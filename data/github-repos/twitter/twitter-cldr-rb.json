{"_default": {"1": {"ehoogerbeets": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206", "title": "Formatting a full datetime with a time zone always gives \"UTC\" as the timezone name", "body": "This code:\r\n\r\n```ruby\r\nTime.now.to_datetime.localize.with_timezone(\"America/Los_Angeles\").to_full_s\r\n```\r\n\r\ngives:\r\n\r\n```\r\n\"Wednesday, July 26, 2017 at 1:03:23 PM UTC -08:00\"\r\n```\r\n\r\nNote that it says \"UTC\" even though I made it clear that the time zone is America/Los_Angeles (ie. PST). The time itself is correct so the offset is working. Just the time zone identifier string is wrong.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemueller": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201", "title": "Date formatting is incorrect for en_GB", "body": "It looks like eee886e5 reversed month/date order for en_GB.  We noticed that yMd switched from \"dd/MM/y\" to \"M/d/y\" and it looks like other date formats changed as well.", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4357e3f853f6b0e9a7c5d8bf319bf604a8ca2ab4", "message": "Fixed parent locales (#202)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ptarjan": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186", "title": "Do you support locales with countries?", "body": "For example:\n\n```\n[1] pry(main)> 500.localize(:\"fr-FR\").to_currency().to_s(:currency => \"USD\")\n=> \"$500.00\"\n[2] pry(main)> 500.localize(:\"fr-CA\").to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n[3] pry(main)> 500.localize(:fr).to_currency().to_s(:currency => \"USD\")\n=> \"500,00\u00a0$\"\n```\n\nWhat is going on with `fr-FR`? That doesn't seem to be how french write currency numbers.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KL-7": {"issues": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124", "title": "Build is failing on jruby-head", "body": "JRuby-head builds were failing for a while now ([first failed build](https://travis-ci.org/twitter/twitter-cldr-rb/builds/30679612)). It might be related to [this JRuby issue](https://github.com/jruby/jruby/issues/985).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110", "title": "Add support for script reordering", "body": "[CLDR 21.0](http://cldr.unicode.org/index/downloads/cldr-21) uses a new concept of [script reordering](http://site.icu-project.org/design/collation/script-reordering) that allows putting native scripts (e.g., Cyrillic for Russian) before Latin characters. \n\nThis feature changes the sorting order of native and Latin characters, causing TwitterCLDR to [fail](https://github.com/twitter/twitter-cldr-rb/commit/0a9399d51616815e300b25fa9765743ab54aa560#diff-6b92832f104a8d5704aafe7ef6fd4456R2) some of the tailoring specs. \n\nIt's probably not a critical issue, because script reordering changes sorting order of scripts relative to each other and not the order of separate characters inside a script, but still it'd be nice to support this tailoring feature in TwitterCLDR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95", "title": "Switch from the XML tailoring rules syntax to the basic one.", "body": "It's not urgent, but most likely something will need to be done since they plan to remove tailoring rules in XML format from the CLDR data. See [this CLDR ticket](http://unicode.org/cldr/trac/ticket/5551) for more information.\n\nAccording to the ticket they plan these changes for CLDR version 24, so when we decide to upgrade to this version, we'll need to update [this part](http://unicode.org/cldr/trac/ticket/5551) of `TailoringImporter` to extract a list of tailored characters for a specific locale not from XML like this:\n\n``` xml\n<rules>\n  <reset>AE</reset>\n  <s>\u00e4</s>\n  <t>\u00c4</t>\n  <reset>OE</reset>\n  <s>\u00f6</s>\n  <t>\u00d6</t>\n  <reset>UE</reset>\n  <s>\u00fc</s>\n  <t>\u00dc</t>\n</rules>\n```\n\nbut from something like this:\n\n``` xml\n<basic_rules>\n  @\u00e6,\u00c6;\u00e4,\u00c4;\u0119,\u0118.\u00f8,\u00d8;\u00f6,\u00d6;\u0151,\u0150;\u0153,\u0152\n</basic_rules>\n```\n\nAs I said, these changes are not required right now, because we use CLDR 21 at the moment and CLDR 24 is nor even released yet (in fact, it's not yet decided what exactly the new syntax for tailoring rules would be), but I'll leave this issue here as a reminder about the upcoming changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/95/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52", "title": "Tailoring: denormalized Japanese code points in the default FCE table", "body": "It turned out that some code points occur in the default FCE table in denormalized form. As we always normalize given code points to NFD form, we completely ignore denormalized elements of the FCE table. If processing normalized and denormalized forms results in different collation elements, we get wrong collation order in the end.\n\nThis issue affects only one test for Japanese tailoring, but it's possible that we simply don't have enough tests to reveal a bigger impact of this problem.\n\nMore details in the [gist](https://gist.github.com/f4ee3bd280a2257c5641/5064b6596eda287e302ffa52c61c05764d7322c9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/52/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/cde5960eb7a0297ac96dda2143a7930e7bc82797", "message": "Merge pull request #156 from twitter/kl_fix_integer_formatting\n\nFix integer formatting for Hindi."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/52e97c48ebcc00aa760ca299cf51a206a21dcee4", "message": "Merge pull request #155 from twitter/kl_fix_format_number\n\nFix default options value for NumberDataReader#format_number."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/fe2e5c3ff414c52bfc8f4b9eafb6a86e8d17ce01", "message": "Fix integer formatting for Hindi."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/105a820294ac966bc0e5197c945cd9f35b52a081", "message": "Fix default options value for NumberDataReader#format_number."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f9137475b846dc99131eede2c9ec447e32b0e3ab", "message": "Merge pull request #153 from twitter/kl_fix_units_for_new_locales\n\nFix units for new locales"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1e1c921182e0632340b976ec3c49a9c689c27c42", "message": "Bump to v3.2.1"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/799cf095228cb182f456701aa36cbaafe1fe7993", "message": "Fix units for new locales."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/825520d37e9a453e6b432bf4326903d20bbc7978", "message": "Using a timezone without DST to fix PST/PDT spec failure."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/13a91f4faab918a5101ee69c3c96c5215ae3a750", "message": "Time flies. It's 2015 already!"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/6188472bc4c88005d5924717642ad32db7c1fb98", "message": "Merge pull request #150 from twitter/kl_drop_1.8\n\nDrop Ruby 1.8 support"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/13318c6a3899b417f16fedd2e57cb5633ccda74e", "message": "Update resources."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/67422cad24bde9c56a962ef9f26227a6dd74ebc3", "message": "Revert resource changes."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/3846320c1ec58939d171aaa51f9d9d79e8b679f8", "message": "Remove more stuff."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8133ead8250e187cc195368608f1f913df9c2e59", "message": "Do not quote strings in YAML files."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/3adb54b6bf2e9bc8aba8454bfeac800a3dc92100", "message": "Update NOTICE file."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b3c777cf6debb05039e7151fd70bdf5b526c1472", "message": "Remove string interpolation backport."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/379f5aa5ecc323e2abea33d7d484a1c6cbc20f97", "message": "Remove 1.8 related stuff."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/3cc9cc8f28e047d6162ab38d67a93017a952e711", "message": "Merge pull request #149 from twitter/new-travis-ci\n\nUse new Travis CI infrastructure"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a06a307b36cdf21e5ff5c226152aa87d1aec12d8", "message": "Use default bundler and rubygems."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/606d1b29202a898a51a2a7952ad16de3cbcb3d73", "message": "Install coveralls on any Ruby >= 1.9"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/80ce8751c19960f669555655332fba72b96c8579", "message": "Require coveralls only on 1.9+."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f7176948088316d26f0ab34a64687bab513ad07a", "message": "Remove empty line."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e1cb19821829a5c0e6631cb8962d87a766b1eaba", "message": "Merge remote-tracking branch 'origin/add-coveralls' into kl_add_coveralls\n\nConflicts:\n\tREADME.md"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/200fdb427b144100cef93b9312e30bdc47b958dd", "message": "Update readme"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/dcfbb0d461751c9fd96d4ac5950be8ef43f3538c", "message": "Use coveralls only on Ruby 1.9."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8f1b1607d872ba3255a3010cc8a83bd50d2c1a70", "message": "Update readme."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1b5070d57c90239acaa3ae3a1b1e9d05719875ac", "message": "Use Ruby 1.8 compatible gems."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f0fd9c2bd8e9f6aa4bc39d64ce427180fd623cc2", "message": "Add coveralls."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672", "body": "@camertron, afaik `return` statement inside a block in Ruby returns from the enclosing method. \n\nIn this particular case we return from the method (with `nil` as a default return value) as soon as we encounter a situation when current node is a `Hash` but doesn't include desired key or it's not a `Hash` at all. \n\nI never had `LocalJumpErorr` with such use of `return`. Though, it definitely causes such an error if you use it inside a block that is not wrapped by any method. E.g., like that:\n\n```\n1.8.7 :008 > (1..10).each do |i|\n1.8.7 :009 >     return if i > 5\n1.8.7 :010?>   end\nLocalJumpError: unexpected return\n```\n\nDoes that make sense?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085", "body": "For some reason it works flawlessly for me on 1.8, but on 1.9 I get same problems as @imkmf. Specifying encoding for everything source file is not the funniest thing to do, but for the project that heavily uses UTF-8 in its code base I think it should be mandatory.\n\n@imkmf, if you don't want to rebase or add magic comments from scratch again I can send a PR from [this](https://github.com/KL-7/twitter-cldr-rb/tree/fix-source-encoding) branch in my fork.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458", "body": "I see there is already one of twitter projects [on travis](http://travis-ci.org/#!/twitter/scalding). You can make `twitter-cldr-rb` be the second one ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962", "body": "If you decide to merge this you'll have to setup travis-ci hook manually as this repository belongs to an organization and not to your github user. [Here](http://about.travis-ci.org/docs/user/how-to-setup-and-trigger-the-hook-manually/) you can find out how to do that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4888962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5011263", "body": "@timothyandrew when you prepare a pull request there is a button saying `Change commits` at the right top corner of the page:\n\n![Change commits](http://i.minus.com/ibx2brVnPUFLnC.png)\n\nClick it and you can choose whatever base branch you like (it'll be the branch where your pull request will be applied).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5011263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5017922", "body": "@timothyandrew, as your method's primary responsibility is to choose the correct range from a hash of ranges I think you can stub/mock `resource_for` in [line 11](https://github.com/timothyandrew/twitter-cldr-rb/commit/e90312a3e48d1b3f16ea2841579a7ea02c83e872#L0R11) and make it return some small hash of ranges. \n\nThen you create a couple of specs to make sure that the method works properly when you pass a number from one of the range, from the borders (beginning and end) of one of the ranges and, finally, a number that is not covered by this set of ranges at all.\n\nAnd after that you just make sure that range name and code point are passed forward to get data from an appropriate file. That can be made with some mocking.\n\nIf you split your method in two smaller methods one for retrieving correct range and one for fetching data from a corresponding file it'd be even easier to test all that stuff. Though, may be stubbing/mocking would be an overkill for such a method. I'm not sure.\n\nBtw, wouldn't it be better to store ranges in `block.yml` in some plain form like:\n\n```\ncherokee:\n  begin: 5024\n  end:   5119\n```\n\nand then manually create ranges from that? Honestly, I don't see any immediate advantage of it over storing ranges as dumped ruby object, I just don't like that much having some data yml file being that language-specific.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5017922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5056213", "body": "@camertron, thanks for code review and such a detailed response. Can we formalize a bit the pluralization mechanism to make sure I clearly understand your vision? I'll explain how I see it and you let me know if I get smth wrong.\n\nWhen we receive some string for processing we do the following:\n1. treat interpolation pattern like `%{horse_count:horses}` as `%{number_key:patterns_key}`;\n2. fetch the number as a value at `number_key` in the interpolation hash;\n3. fetch patterns hash as a value at `patterns_key` in the interpolation hash;\n4. figure out pluralization rule (`:one`, `:each`, etc.) for the number;\n5. knowing pluralization rule, retrieve the proper pattern from the patterns hash;\n6. substitute the number for the `number_key` placeholders in the pattern;\n7. substitute the result for `%{number_key:patterns_key}` in the string.\n\nAs you said throwing exception by default is not desirable, If during the process some required element is not found in the interpolation hash we ignore current interpolation pattern and move to the next one. \n\nI definitely like the idea of accepting lambdas as it brings more flexibility, but I think it's not essential for the initial implementation and can be added later.\n\nDoes that sound good to you?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5056213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5094126", "body": "@camertron, right, interpolation like `\"%{foo}\" % { :foo => 1 }` is part of Ruby 1.9, but not of 1.8. That makes some problems because we can't easily call original `String#%` before (or after) our formatter as 1.8 throws `ArgumentError` when it come across `%{` in the string. Should we include `gettext` as a dependency and delegate the rest of the work (if there is some other interpolations, besides pluralization, in the same string) to its `String#%` that works both on 1.8 and 1.9? Another question is whether we call super method before or after processing the string with our formatter? I don't see much difference at the moment, but may be there is some.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5094126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096285", "body": "@timothyandrew, now when I looked at it I'd suggest smth like that instead of initializing `@@blocks` directly in the class:\n\n``` ruby\nclass UnicodeData\n  class << self\n    def for_code_point(code_point)\n      # use `blocks` getter here\n      target = blocks.find do |block_name, range|\n        range.cover? code_point.to_i(16)\n      end\n\n      ...\n    end\n\n    # lazy evaluated getter for blocks data        \n    def blocks\n      # instance variable here as we're inside `class << self` and \n      # technically our class is an instance here\n      @blocks ||= TwitterCldr.resources.resource_for(\"unicode_data\", \"blocks\")\n    end\n  end\nend\n```\n\nThe problem with the current implementation is that class variable is initialized while defining the class and that literally means when you require `unicode_data` first time. And as we're doing it at the top level of the gem (in `twitter_clrd.rb`) we read `blocks.yml` file right after client loads our gem. But what if he is not going to use `UnicodeData` at all?\n\nOn the other hand approach above will read `blocks.yml` file only when you need that data for the first time. That means if you load the gem, use some classes other than `UnicodeData` this file won't be read from disk at all. And that's good.\n\nIf it's not very clear have a look at [this gist](https://gist.github.com/2369386) and its output at the bottom.\n\n@camertron, I think simple changing `=` to `||=` won't work because when Ruby defines the class `@@blocks` instance variable is `nil` so this lazy assignment will work like a regular one and eventually load the file.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096362", "body": "Btw, @camertron, maybe it'd be a good idea to replace all requires [here](http://www.ruby-doc.org/core-1.9.3/Kernel.html#method-i-autoload) with [auto-loading](http://www.ruby-doc.org/core-1.9.3/Kernel.html#method-i-autoload). What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096787", "body": "@timothyandrew, if there's no need to expose it as a part of API (I'm not sure whether that'd make much sense) it should be private.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5097455", "body": "@camertron, I'm afraid I don't understand how that applies to interpolation with `String#%`. If we want `%` operator to support pluralization we mentioned above we need to override it somehow. For that purpose I was going to implement `PluralFormatter#format` method that accepts a string to be interpolated and replacements hash. Then we can include into the core `String` class some module that defines `%` method. This method roughly does `PluralFormatter.new(:en).format(self, replacements)`. But as we don't won't to break regular interpolation with `String#%` we need to call its original implementation somewhere in our version. And the problem arises with 1.8 as our string might contain `%{` that is illegal sequence for interpolation string in this version of Ruby. \n\nI think the best solution would be to include `gettext` that will give us same behavior of `String#%` in both rubies and after our work is done we can easily delegate the rest of interpolation to it simply by calling `super`. Another option is to borrow `String#%` implementation directly from `gettext` and add our pluralization on top of it.\n\nUnfortunately, I don't see a good place for `LocalizedString` in this flow as long as we already overriding `%` directly in String class. As far as I can see we don't need anything more at the moment, so why do we need that wrapper?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5097455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099818", "body": "@camertron, it's not an issue. I didn't work with `rr` before and trying to learn it now. From what I can read in the docs `mock.proxy` creates a proxy object and allows to do some pretty neat things. In this particular case all we need to know is that the method is never called later. So, I thought maybe a simpler [`dont_allow` method](http://rubydoc.info/gems/rr/RR/DoubleDefinitions/Strategies/Verification/DontAllow) that doesn't create that kind of proxy (though, it obviously creates some other wrapper anyway) would work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5101225", "body": "I felt that 'overriding String#%' won't be that easy =) You're right, monkey-patching is great, but sometimes it gets messy. I mostly agree with your plan, but have a couple of comments:\n1. Implementation of `String#%` from `gettext` does all we need and I believe everything that the same method in 1.9 does ([simple interpolation with a hash](https://github.com/mutoh/gettext/blob/master/lib/gettext/core_ext/string.rb#L73, [formatted interpolation with a hash]%28https://github.com/mutoh/gettext/blob/master/lib/gettext/core_ext/string.rb#L66%29, [delegating to the core implementation]%28https://github.com/mutoh/gettext/blob/master/lib/gettext/core_ext/string.rb#L73%29) and I like most of it so with a couple of changes I can transform it into a utility function to use in this gem.\n2. Looks like there's no `LocalizedString` class in the project at the moment and I still would prefer not to add it. Maybe it can be useful in the future when more features will be added, but at the moment monkey-patching `String` class (I doubt we can get away without monkey-patching at all) with `localize` method just to call a single `%` method on the returned `LocalizedString` instance doesn't sound like a good idea to me. At least not for a regular use case when you need to pluralize a number of string literals in your application. What if we monkey-patch `String` directly with some method that accepts a hash and calls `PluralFormatter#format` right away? Unfortunately, [`pluralize`](http://apidock.com/rails/String/pluralize) might be not the best name for this method but I think we can come up with some other good name for it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5101225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5101654", "body": "@camertron, now that things turned that way I start wondering why do we need to care about other kinds of interpolation at all? If we don't override `String#%` we can leave it for user to handle all other kinds of interpolation and care only about pluralization. If we put that in some new method of `String` class user can simply call this method with a pluralizations hash and then call `%` on it or do whatever he wants. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5101654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5103082", "body": "@camertron, I updated `PluralFormatter` implementation and specs. Check it out, please.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5103082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5121399", "body": "@camertron, ah, sorry, I forgot to mention that your last arguments did convince me =) I'm going to extract interpolation function from gettext and use it for handling everything that left after our pluralization process. And then I'll add `LocalizedString` class - consistency is important thing.\n\nBtw, gettext offers Ruby license or LGPL. Licensing is not my strongest skill, but I can read agreements and learn what is expected from us if we're going to take some code from this project.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5121399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5121501", "body": "@camertron, two more things. Is it better to delegate to that general interpolation function right inside `PluralFormatter#format` or in `LocalizedString#%` that will first call formatter and then pass the result to this utility function? And I can't figure out whether there is any difference in making pluralization first and then regular interpolation or vice versa. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5121501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5132441", "body": "@timothyandrew, is that tabs in both specs and base.rb? I think you should re-indent these files with two spaces and check settings of your editor.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5132441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5154083", "body": "Hey @camertron, I added `LocalizedString` class and I'm not sure that I tested it properly. When a hash is passed into it, it delegates everything to the `PluralFormatter` and to test that behavior I simply copied tests from the test suit of `PluralFormatter`. Is that the right way to go?\n\nAnother question arose related once again to the `TwitterCldr#interpolate` method I'm going to add. We already agreed that our pluralization formatter won't raise any exceptions if some pluralization rule or pattern is missing (because there are cases when you don't have translation at the moment but still want to get at least something in the result string). On the other hand regular `String#%` from Ruby 1.9 throws `KeyErorr` when you don't provide a value for interpolation:\n\n``` ruby\n1.9.3-p125 :001 > '%{name}' % {}\nKeyError: key{name} not found\n```\n\nShould we mimic that behavior as it's done, e.g., in [i18n gem](https://github.com/svenfuchs/i18n/blob/master/lib/i18n/core_ext/string/interpolate.rb), or should we silently ignore that situation and leave the string unchanged?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5154083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5161400", "body": "@camertron, I agree with you, but it's slightly inconsistent with the way we're treating missing translations, though, as it's a bit different situation, throwing an exception here and not throwing it for missing pluralization rules does make sense to me.\n\nWhat do you think about tests for `LocalizedString#%`? I'm seriously puzzled with testing methods like that. From one point of view we want to test its behavior as a black-box, so all these tests make sense, but from the other when the hash is passed this method delegates everything else to the `PluralFormatter#format` method that is already thoroughly tested in a different place and it feels like there is no need in testing the work it's doing again here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5161400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5188319", "body": "@camertron,  I added interpolation function and updated `LocalizedString#%` to use it. And there are some more things I'd like to discuss with you:\n1. I borrowed some tests and parts of the implementation from [i18n](https://github.com/svenfuchs/i18n/blob/master/lib/i18n/core_ext/string/interpolate.rb) and [gettext](https://github.com/mutoh/gettext/blob/master/lib/gettext/core_ext/string.rb) gems, but didn't add any notice about that yet. Should I add some references directly into the `interpolation.rb` file and then licenses texts into `NOTICE` file?\n2. I reduced amount of specs for `LocalizedString#%`, but decided to leave a number of them as integration tests to make sure pluralization and interpolation play nice together. Btw, that helped me to find an issue in the regexp for pluralization placeholders. Does that look ok? Should I add smth to it?\n3. The way we're handling missing information still looks a bit confusing to me, but seems like it works as we discussed: ignores any missing pluralization stuff, but throws exceptions when something is missing for regular interpolation.\n4. Not sure whether it's intentional, but I'd say the gem lacks comments very much. If the interface of this feature is settled, should I add some comments to my code?\n5. Not related to this feature, but to the gem in general. What do you think if I bring its directory structure (specifically `lib` directory) to a [common form](http://timelessrepo.com/making-ruby-gems) that'd look smth like that:\n   \n   ```\n   $ tree -d twitter_cldr\n   |-- lib/\n   |   |-- twitter_cldr.rb\n   |   `-- twitter_cldr/\n   |       |-- core_ext/\n   |       |-- formatters/\n   |       |-- shared/\n   |       |-- tokenizers/\n   |       |-- interpolation.rb\n   |       `-- version.rb\n   |-- spec/\n   |-- Gemfile\n   |-- Rakefile\n   `-- twitter_cldr.gemspec\n   ```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5188319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5233037", "body": "@camertron, I added license information and some notes regarding the code adapted from i18n and gettext gems. Please, check it out and let me know if there's smth I should change.\n\nThere are some comment from me:\n1. I agree with the idea that current implementation might be not very translator-friendly. On the other hand I don't like very much the format you suggested. First, it's not very clear why `horse_count` looks like function name in it. Second, it will require some hand-made parsing, gsub-ing or whatever that I'd prefer to avoid. What do you think about a bit modified version like that:\n   \n   ``` ruby\n   'there %{{ \"horse_count\": { \"one\": \"is one horse\", \"other\": \"are %{horse_count} horses\" } }} in the barn'\n   ```\n   \n   The advantage of this format is that inside `%{...}` we have valid JSON hash that can be easily parsed into a Ruby hash using `JSON.parse`. I'm not sure about doubling outside braces, but the intention is to make it easier to find this pattern in a string using regexp. Though, while `%{{` in the beginning allows us to distinguish that kind of interpolation from a regular one, the closing `}}}` might cause ambiguity. How about some other combination like `%[{...}]` or `%<{...}>`?\n   \n   Anyway, do you want this addition to be a part of this PR? If not, I can make any necessary final fixes, add some comments to public method, clean up commits history, and rebase it on master. Then you'll be able to merge it in and the new syntax will go in a different pull request.\n2. I'd be happy to change directories structure right away, but with this big PR and opened PRs from timothyandrew, I'm afraid we might get in a difficult situation while trying to merge or rebase them after the directories are moved/renamed. I tried it localy and looks like it's too cool even for git. Do you have idea how we can handle that with the smallest possible complications?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5233037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264394", "body": "1. Glad you like the idea, but if you ask me `%|{...}|` looks really strange. So I still think `%<{...}>` is the best choice. It does look a bit like ERB, but 1.9 have `%<foo>d` syntax for formatted named placeholders in interpolation anyway. Though, looks like `%({...})` might work as well.\n   \n   If I remember correctly you can't merge in a PR that doesn't cleanly apply to the current master branch, or can you? I though if I have to rebase it I can squash some fix commits and the initial implementation (that went into the wrong direction) at the same time. But if you think there's no need in it I won't touch anything.\n2. I think there's no need to rush, so we can wait at least until three big currently opened PR get merged in.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5269902", "body": "@camertron, I rebased pluralization branch against master, cleaned up commits history a bit and added comments for interpolation and pluralization methods. I'm pretty much satisfied with this PR now. If you feel the same, you can merge it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5269902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5399343", "body": "@timothyandrew, you're saying \n\n> attributes are now stored in AttrNames\n\nthat means that an instance of `AttrNames` represents attributes themselves and not only their names. \n\nWouldn't it be better then to name this class `Attributes` (or `CodePointAttrs`, or smth of that kind) rather than `AttrNames`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5399343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5426211", "body": "> Have you verified that the inline pluralization implementation throws a KeyError if one of the replacements can't be found in the JSON? That would be consistent with the original implementation.\n\nOur initial agreement was that we throw `KeyError` for missing arguments in regular interpolation, but any pluralization method that we provide tries to be as silent as possible. I added more specs for inline pluralization. You can see that pluralization (both regular and inline version) leaves everything alone if a number or required pattern is not provided. Though, I start doubting: maybe we should let user know that he forgot to provide a number. While missing pattern might be sign of not-yet-translated piece, missing number most likely is a sign of some mistake. What do you think?\n\nRegarding JSON parsing errors, standard ones are pretty good if you ask me:\n\n``` ruby\n1.9.3-p125 :009 > f.format '%<{ \"foo\" }>', {}\nJSON::ParserError: 743: unexpected token at '{ \"foo\" }'\n    from /Users/KL7/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/json/common.rb:148:in `parse'\n    from /Users/KL7/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/json/common.rb:148:in `parse'\n    from /Users/KL7/Coding/oss/gsoc-2012/twitter-cldr-rb/lib/formatters/plurals/plural_formatter.rb:85:in `parse_inline_pluralization'\n    from /Users/KL7/Coding/oss/gsoc-2012/twitter-cldr-rb/lib/formatters/plurals/plural_formatter.rb:70:in `block in format'\n    from /Users/KL7/Coding/oss/gsoc-2012/twitter-cldr-rb/lib/formatters/plurals/plural_formatter.rb:68:in `gsub'\n    from /Users/KL7/Coding/oss/gsoc-2012/twitter-cldr-rb/lib/formatters/plurals/plural_formatter.rb:68:in `format'\n    from (irb):9\n    from /Users/KL7/.rvm/rubies/ruby-1.9.3-p125/bin/irb:16:in `<main>'\n```\n\nThe only downside is that stack trace starts somewhere deep inside JSON library and not in `PluralFormatter#format` that'd be more natural. But that can be easily fixed by rescuing exceptions in this method and raising them again. Do you think it's a good idea?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5426211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5426986", "body": "@camertron, as we're [clearly stating](https://github.com/KL-7/twitter-cldr-rb/blob/76c08a7597f86bb51fbad286fdda6117e1a23954/lib/formatters/plurals/plural_formatter.rb#L41) that inline pluralization is expected to be formatted as JSON I think leaving JSON errors along is not that bad. If we come up with a better idea, we can add it later.\n\nI added all the specs and comments I wanted. Do you have smth to add to this PR?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5426986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5434869", "body": "@camertron, ok, I won't add anything to this PR. Let's leave it alone for now and wait for @tanin47 to complete his PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5434869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5455100", "body": "I added `NotImplementedError` usage in #28 and I'll get to 2 and 3 later. Regarding `method_missing` the problem is that it's too powerful tool that makes it pretty easy to shoot yourself in the foot. So it's better to avoid it when possible. And I think the implementation without `method_missing` might be simple in this case. \n\nHere is how it might look with call to `super` and implemented `respond_to?`:\n\n``` ruby\ndef method_missing(method, *args, &block)\n  type = extract_format_type(method)\n\n  if type\n    @formatter.format(@base_obj, :type => type.to_sym)\n  else\n    super\n  end\nend\n\ndef respond_to?(method_name)\n  extract_format_type(method_name) ? true : super\nend\n\ndef extract_format_type(method_name)\n  format_type = method_name.to_s[/to_(\\w+)_s/, 1]\n  format_type if format_type && TwitterCldr::Tokenizers::DateTimeTokenizer::VALID_TYPES.include?(format_type.to_sym)\nend\n```\n\nAnd here is a solution with dynamic methods definition:\n\n``` ruby\nTwitterCldr::Tokenizers::DateTimeTokenizer::VALID_TYPES.each do |format_type|\n  define_method \"to_#{format_type}_s\" do\n    @formatter.format(@base_obj, :type => format_type.to_sym)\n  end\nend\n```\n\nAs a bonus we get full-fledged methods that are visible in the list of `LocalizedDataTime` instance methods:\n\n``` ruby\n1.9.3-p125 :001 > TwitterCldr::LocalizedDateTime.instance_methods(false).sort                                                                                    \n#=> [:formatter_const, :to_date, :to_default_s, :to_full_s, :to_long_s, :to_medium_s, :to_s, :to_short_s, :to_time]\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5455100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5481324", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5481324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5481499", "body": "I rebased this one on master branch, so it's ready for being merged in.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5481499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5518517", "body": "No problem, rebased. I don't think it'd be simpler if you merged this one first. \n\nBtw, nice talk at railsconf :+1:\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5518517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5529322", "body": "Hi @camertron, I submitted PR #29 with all the changes discussed here except delegation to the wrapped object in `LocalizedObject`. The reason is that I have some doubts about that. I though it might be a good idea so we can do smth like: \n\n``` ruby\nTime.now.localize.strftime('%H') #=> \"21\"\n```\n\nor even\n\n``` ruby\n10.localize + 2 #=> 12\n```\n\nWhile I still think that the first use case might be handy sometimes, the second is quite confusing. Methods like that (arithmetic operations on numbers, strings concatenations, time manipulations) usually return an instance of the same class: you add `2` to `Fixnum` object `10` and get `12` as a `Fixnum` in return. To follow these expectations `10.localize + 2` should also return an object of the same type as the original object - in this case of type `LocalizedNumber`. But as we think about simple delegation the result of `10.localize + 2` (that is `LocalizedNumber` + `Fixnum`) will be `Fixnum` and not a `LocalizedObject`. As the result our localization methods won't be available on the result object.\n\nTo eliminate this kind of confusion it might be better to leave things as they are and expect that users will call methods like `localize` at the very last moment when they've already used all the functionality of the original class (e.g., completed all arithmetic operations with a `Fixnum` object). What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5529322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5634595", "body": "@camertron, I also removed `core_ext/strings`, because `Symbol` extension sitting in this directory is a bit strange. And changed `LocalizedString#to_s` to return a copy of the underlying object to prevent its accidental modification. Do you think it's a good idea?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5634595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5637184", "body": "One more change: I rewrote reordering that is used as a part of canonical ordering algorithm. It passes the test on the full version of `NormalizationTest.txt` and completes it in 20 seconds instead of the original 40 seconds. I think it's quite a good performance boost. See the commit message for more information.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5637184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5637955", "body": "@camertron, why don't we use travis ci to run normalization test against the full version of [`NormalizationTest.txt`](http://unicode.org/Public/UNIDATA/NormalizationTest.txt)? \n\nIf you upload a gzip-ed version of this file (for faster downloading and in case of unicode.org downtime) to the Github, I can setup a separate rake task for CI testing or a simple env variable that will trigger downloading of this file and running normalization test against it instead of the smaller version that we have in the repository. \n\nTests running for 20 seconds might be less pleasant than tests running for 3 seconds for developers, but it doesn't matter for travis. That way we'll be sure that our implementation passes the full test provided by the Unicode Consortium. Plus we will have an easy way to trigger full test locally (I had to manually download and replace `NormalizationTest.txt` file for that and then remove it to make sure it won't get commited).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5637955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5826766", "body": "Hey, @camertron, I turned `compatibility_decomposition?` into a well-mannered boolean predicate and added a comment with some links to the docs that Andrew and I used for the implementation of normalization algorithms. Is there anything else that you'd like to add/change here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5826766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5884088", "body": "1. Yes, going to add it. \n2. Do you mean a hash with abbreviated keys, e.g., `:sat` as in YAML files?\n3. Sure, will do. Returning an empty array when there is no data is good, because most likely it won't break anything when you expect an array. But returning a `nil` is more explicit so I think we should go with it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5884088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5884224", "body": "Well, I think I'll finish this one tomorrow along with `Shared::Numbers` module that will expose symbols from the corresponding YAML files. \n\nI thought about moving these things from `Shared` to smth like `Resources`, but didn't decide whether it's worth it. What do you think?\n\nBtw, do you mind if I convert classes from `shared` directory into modules? I think being modules will be more appropriate for those of them that are not used for creating objects.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5884224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5911828", "body": "Hey, @camertron. I converted shared classes into modules and fixed a small issue with `:unicode_data` included into the array returned by `TwitterCldr.supported_locales`. \n\nRegarding the main purpose of this PR I came a cross quite a strange issue: we're missing some abbreviated months names in `de/calendars.yml` [here](https://github.com/twitter/twitter-cldr-rb/blob/master/resources/de/calendars.yml#L108-114). I checked the latest version available in CLDR and it has full list of abbreviated months. Though, it has a bit different formatting rules for some patterns, e.g. for datetime, so we can't easily upgrade to the latest version. Can you tell me which version of CLDR data you used to generate resources YAMLs? I'll try to find the closest version with fixed months names. Btw, I think it'd be useful to make this information available somewhere in the gem. Like create a `TwtitterCldr::CLDR_VERSION` constant and update it properly.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5911828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5916021", "body": "Added weekdays, updated locale handling and updated `Plurals::Rules#all_for` to return `nil` when an error occurs. \n\nThis `Rules#all_for` method made me think about something. There are quite a lot of expressions like `... rescue nil` across various Ruby projects, but in general it's considered to be not a very good practice. The reason is that in most cases we don't really want to rescue absolutely all exceptions, but some specific ones. \n\nIn [this](https://github.com/KL-7/twitter-cldr-rb/blob/68ff4aa4eda0c9f36071e2e4be9b255a12295711/lib/twitter_cldr/formatters/plurals/rules.rb#L17-22) particular case, I assume, we want to return `nil` if for some reason the hash doesn't have a value at some level of keys nesting. I've seen accessing some deeply nested hashes quite a lot in twitter-cldr. What if we introduce some utility function similar to [this](https://github.com/KL-7/twitter-cldr-rb/blob/68ff4aa4eda0c9f36071e2e4be9b255a12295711/lib/twitter_cldr/shared/calendar.rb#L44-46) one that will dive into the hash as deep as possible but if at some point the value is missing or isn't a hash it'll return `nil`. That will allow us to avoid these `rescue nil`s in situations like the one with pluralization rules. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5916021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5916351", "body": "Thought a bit more about these exceptions handling. There is one more exception that can happen while working with our YAML resources. If for some reason we ask for resource for wrong or missing locale or for missing resource we get \n\n```\nErrno::ENOENT: No such file or directory - /.../twitter-cldr-rb/resources/foo/bar.yml\n```\n\nAs I'm loading resources for calendars at the very last moment user doesn't get error while instantiating the calendar:\n\n``` ruby\ncalendar = TwitterCldr::Shared::Calendar.new(:foo, :bar)\n```\n\nbut as soon as he tries to get some data:\n\n``` ruby\ncalendar.months\n```\n\nhe gets the error that I showed above. It's not very nice if you ask me. Should we catch or prevent that kind of exception in [`Resources#data_for`](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/twitter_cldr/shared/resources.rb#L21-23) and trough instead some custom exception that will tell the user that the resource is not available? \n\nIn addition, if I initialize resources right in the `Calendar#initialize` then the user will instantly get an exception and there will be no incorrectly initialized calendars in the system.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5916351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5916735", "body": "@camertron, can you tell me what do comments like [this](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/twitter_cldr/formatters/calendars/datetime_formatter.rb#L115) one mean? There're quite a few of them and I wonder what this `cldr's multiple inheritance` thing is about.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5916735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5924911", "body": "I updated calendars data (didn't touch other resources yet as it might require even more changes that are not directly related to this PR) and fixed all the issues that were caused by this update:\n- Abbreviated months for de locale are available now and the corresponding test is passing.\n- Seems like we had reverted date and time order in datetime formatter.\n- Day periods format has been changed in CLDR. I changed it to always use `am` and `pm` data from wide format as it looks like these keys are always available in this format. Maybe we should implement a more advanced handling of day periods according to the changes that are described [here](http://cldr.unicode.org/development/development-process/design-proposals/day-period-design).\n- There were some minor changes in a couple of locales that broke the specs.\n- Added more explicit validation for existence of buddhist calendar in th locale. Ruby-cldr gem supports only gregorian calendars so the buddhist one is always erased when you export new data. Hopefully, the assertion I added will make it easier to spot the problem.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5924911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5939818", "body": "@camertron, I'm not sure that all data for advanced handling of day periods is already in CLDR. I'll need to investigate this topic a bit more.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5939818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5939936", "body": "One thing that is still missing is a module that'll expose numbers related symbols from the resources. I'll add it tomorrow. Do you think there's anything else that should be added/changed in this PR before merging in?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5939936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5940054", "body": "Btw, what do you think about specifying the version of CLDR resources? They change quite a lot from one version to another and information about the exact version we're using might be useful for some developers. From that perspective it's a bit confusing that right now we have calendars data from v21 (hm, I wonder why it's not v2.1) and other resources from v1.7.2, but I'm going to fix it in the next few days. After that we'll have all resources based on the same version of CLDR and I think we should definitely specify this version somewhere in the gem. Though, I don't know how not to forget to update it whenever we update resources ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5940054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5942256", "body": "I personally used ruby-cldr's CLI to update resources, but adding some rake task base on this gist sounds like a good idea. Though, it won't be that smooth at least because of us having buddhist calendar data, that is not supported by ruby-cldr, in `th` locale. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5942256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5942443", "body": "Let me list the things that I'm going to do in the next few days just so I have one place to look for them:\n1. Provide access to numerical symbols data [**DONE**].\n2. Update all resources to CLDR v.21 [**DONE**].\n3. Specify CLDR version used in the gem [**DONE**].\n4. Extract nested hashes traversing (from calendars, tokenizers, etc.) [#34].\n5. Throw custom exception in `Resources#resource_for` when resource is missing [#35].\n6. Investigate further day periods handling and the data that CLDR provides for that.\n7. Ask Sven about CLDR's multiple inheritance (really curious what this is about).\n8. Add rake task for updating YAML resources from CLDR data (via ruby-cldr gem) [#36].\n\nWould you mind if I create separate issues for tracking such things in the future? Actually, I'd prefer to do it for those listed above too because when this PR get closed it'll be harder to find them.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5942443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5949865", "body": "Hey, @camertron. I finished items 1-3 from the list above and I think this PR is ready now. If you agree, please, merge it.  I'll create issues for other items from the list above so I don't forget about them. Right now I'm reading docs on collation and that's what I'm going to work on next week. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5949865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5972908", "body": "Having the examples from `README` tested is awesome! Maybe at some point we can think about and implement smth similar to [Ruby DocTest](https://github.com/tablatom/rubydoctest/wiki/) that will allow us to run and test examples directly from the `REAME` file. With some rules for examples formatting it should be pretty simple but still quite a challenge to implement such a thing.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5972908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5972961", "body": "Btw, creating PRs while having a push access to the repository is absolutely normal. Afaik, GitHub folks are doing it all the time on their internal projects (at least that's what Zach Holman says) and guys from Travis-CI core team are sending PRs for each other to review almost every day.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5972961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6054951", "body": "@camertron, I think `once` expectation on the mock is enough for this case and comparing object ids can be dangerous. E.g., all numbers with the same value are basically the same object in Ruby so the object id will always be the same. But this additional check of `object_id` works for strings and looks good in this case, so I added it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6054951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065328", "body": "With [this](https://github.com/twitter/twitter-cldr-rb/commit/b393958436a942cb8a25137fe93a7e91dc2c07bc) commit not a custom exception, but a regular `ArgumentError` is raised when the file is missing. I think it's good enough for now and we can close this issue. Do you agree, @camertron?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065368", "body": "Are we going to do anything about this issue?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6209418", "body": "@gbadiali, please, add\n\n```\n# encoding: UTF-8\n\n# Copyright 2012 Twitter, Inc\n# http://www.apache.org/licenses/LICENSE-2.0\n\n```\n\nin the beginning of every new file you've created. Without the first encoding line Ruby fails to work with Unicode in the source code in some cases.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6209418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6257813", "body": "@gbadiali, it looks great. Just make sure you remove all `puts` statements you've added for debug. And maybe look at the diff of the pull request and remove some blank lines left, like the one in `.gitignore`. Looking at the full diff between master branch and yours is always useful because it shows you the whole picture.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6257813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6351709", "body": "I left two tiny comments, @camertron. Otherwise, it looks great!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6351709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6363870", "body": "Yay! Only 84 out of total 160K tests left. I hope they all are related to the same issue: canonical reordering (performed during normalization) removes a contraction that exists in the original (denormalized) string. I don't see a good workaround for that at the moment, but I'll think about it over the weekend.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6363870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6364971", "body": "@camertron, have a look on 153c5c3f5cb9de7f90ac1a8bdc1e28a38ae43d5c, please. I extracted `NFKC.compose_hangul` into `Hangul.compose` so all Hangul related stuff is there. And made two tiny changes in the `NFKC` itself. Did I get right the idea behind `valid_hangul_sequence?` method?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6364971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6374334", "body": "Hey, @camertron. Looks like the first part of collation is almost done. Only 3 out of 160K tests left and they're related to the problem with Hangul decomposition that I described [here](https://github.com/twitter/twitter-cldr-rb/commit/f6b1d1376b196e4c4c8b9706fefa8b944a3c1026#commitcomment-1464777). I'd appreciate if you help me with that, but maybe I'll look into it myself tomorrow. Besides that I'd like to go over all changes I've made (it turned out to be quite a lot of code in the end) and add some comments, maybe clean up some things. \n\nAlso I'm going to extract a short version of Unicode collation test for running locally and setup a full test run on Travis CI.\n\nOne thing I'd like to add is a couple of methods for `Collator` class: `compare(str1, str2)` and `sort(strings)`. Our users can do it themselves (as I do in the specs right now), but it'd be nice to have these methods built-in. Plus, sort keys are efficient for multiple comparison. If you want to sort a big list of strings, you should build sort keys first and then use them for sorting instead of building sort keys every time you want to compare two strings. We can handle that inside `sort` method.\n\nPlease, have a look at the code and let me know if you have any comments.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6374334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6374741", "body": "@camertron, I renamed `Normalizers` module into `Normalization` because it sounds as a better match for `Collation` module. Do you mind?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6374741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6375174", "body": "`Twitter::Collators::Collator` doesn't look good to me (mostly because there's only one collator and it's not the only significant class here). I think about these two modules as about implementation of Unicode normalization and collation (hence the names), so it seems fine that they both don't match others. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6375174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6375640", "body": "Thanks for your great comments, @camertron. It's really awesome to know that someone is carefully reading your code =)\n1. Don't worry, it's right [there](https://github.com/KL-7/twitter-cldr-rb/blob/988af4f83bba7037b9450c98b25b62c8a84c2c82/resources/collation/FractionalUCA_SHORT.txt). GitHub is just clever enough not to show such a big file on the diff tab (it's there but the content is not displayed).\n2. Ok, I'll add it. \n3. Caching sort keys is a good idea, but together with a carefully tuned expiration mechanism it sounds not like a 5-minute task. What if I finish this PR so you can merge it, and then look into caching? And global cache sounds even more awesome. I saw you've already extracted `compute_cache_key` method, because we need caching almost everywhere. Though, I'm not sure, how much memory all our cache will need in a real app. Will be our internal cache good enough? Should we think about an adapter for, let's say, memcached?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6375640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6466775", "body": "I like how this PR looks now. What do you say, @camertron?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6466775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6714456", "body": "Hey, @camertron.\n1. I'll filter the list of locales once I have resources for most of our standard locales ready.\n2. Well, making this class method private would be enough, but I need a clean way to get this trie available in the collator instance. Making the method private and call ourselves it with `send` is obviously ugly. I thought about using [`Object#freeze`](http://ruby-doc.org/core-1.9.3/Object.html#method-i-freeze), but in order to freeze the whole trie I need to traverse all its nodes after it's build and it doesn't sound good.\n\nAnd regarding a trie being a collection of arrays - I've finally added `Trie::Node` class. I added more methods to the `Trie` class and these `[0]` and `[1]` started looking awful. Do you think it's a good idea?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6714456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6866777", "body": "Thanks for the review, @camertron. I replied to your comments, let me know what you think. I also got an email about you asking \n\n> Do we no longer need to convert the locale? Is the rule no longer at `[:i18n][:plural][:rule]` for some reason?\n\nbut I can't find this comment on anywhere. Is it a ghost-comment? :)\n\nAnyway, I'll answer these questions. Both `Rules#all_for` and `Rules#rule_for` use `[locale][:i18n][:plural]` path in the resource, so I moved it down to the `get_resource` method. And now, when these method no longer use `locale` argument directly, but only pass it into the `get_resource` method, we can remove `convert_locale` calls from both of them, as `get_resource` converts locale himself. And as `convert_locale` always returns a symbol, we don't need `locale.to_sym` here either.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6866777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6866937", "body": "There's one more thing I want to bring to your attention, @camertron. Yesterday we discussed removing all conditions as well as `rcov` from our gemspec. Removing `rcov` is ok, but later I realized that if we remove `unless RUBY_PLATFORM == 'java'` condition, we no longer able to run `bundle install` on JRuby. It's ok locally, as we can comment conflicting dependencies and we'll rarely need JRuby anyway, but it's still a problem on Travis CI, because it runs `bundle install` with the gemspec as it is. \n\nEventually, I decided to [move](https://github.com/KL-7/twitter-cldr-rb/commit/aaee8bfb53dfaaa98769be5ef62eee21f834f971) some of our development dependencies from gemspec to `Gemfile`. Looks like having development dependencies in gemspec is not crucial, but now we have all our problems solved: \n- gemspec doesn't have any conditions, so the gem is packed with the same dependencies on all rubies\n- `bundle install` runs on both MRI versions and on JRuby, so we have a good environment for testing and development\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6866937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6923448", "body": "Hey, @camertron. I [added](https://github.com/KL-7/twitter-cldr-rb/commit/01e935ef613d342232b30741fe9fb510ff48c37a) a rake task for exporting tailoring resources from CLDR data and [fixed](https://github.com/KL-7/twitter-cldr-rb/commit/5f4a4527b97bbab4b2f1ab94da4a50ced1c95b72) an issue in `Trie#find_prefix` that was causing most of our failures for JA locale and all failures for HU locale. \n\nThere are only 4 locales for which our implementation and ICU give different results on the tailoring tests. I described the details in a [gist](https://gist.github.com/f4ee3bd280a2257c5641).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6923448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6983374", "body": "Hey, @camertron. \n\nStatus of the tailoring itself didn't change from my [last comment](https://github.com/twitter/twitter-cldr-rb/pull/46#issuecomment-6923448). At the moment, important, but not critical in my opinion, differences from ICU are: \n- `zh-Hant` - unfortunately, I still haven't found what `type=\"stroke\"` is. We can take care of that later when we find the answer.\n- `ja` - only one test failing, but the reason itself is pretty suspicious and we need to investigate it. Though, I think this issue is not a blocking one, because it seems like it doesn't affect anything except a small number (only one caught by test, but there might be a few more) of Japanese tailoring rules.\n\nI marked all failing tailoring tests as pending so we can address them at any moment. I added assertions to the tailoring spec so we'll notice if we break something. \n\nThere're few minor issues (that I described above) and things that can be improved (e.g., new options for French and Danish tailoring), but I think we can merge current implementation, as it already looks pretty solid. Do you agree? If so, the PR is rebase on the current master and you can merge it in any moment.\n\n---\n\nI also made a few changes to the gemspec: \n- added missing files - `History.txt`, `Gemfile`, and the gemspec itself\n- added `& `git ls-files`` so files from `.gitignore` will never get into the packed gem\n- added full versions of normalization and collation tests to the repository, but excluded them in the gemspec (if that's ok, I'll remove the logic responsible for downloading these files from our specs)\n- moved all development dependencies to `Gemfile`\n\nBtw, I noticed, that `js/` directory is not included in the gemspec. Is that how it's supposed to be?\n\n---\n\nIt's not going into this PR (if you merge it in the next few days), but I found a way to significantly improve `Collator` initialization time. At the moment loading default FCE trie for the first time takes around `0.7` seconds. It's not that bad, but we can do better. \n\nWe can pre-build our tries and marshal them into resource files. It makes loading much faster. E.g., loading default FCE trie from the dump takes only `0.08` seconds. The same mechanism can be applied to tailoring tries: some of them are tiny and take almost nothing to load, but, e.g., Korean tailoring trie itself (not counting the loading time of the default FCE trie) takes around `0.3` seconds. \n\nI can create a rake task that will use CLDR resources and `TrieBuilder` to build default and tailored tries and marshal them. Of course, we'll need to re-build them if CLDR resources or trie format changes. In order not to forget about that we can add a test case that will compare marshaled tries with the ones build from the scratch.\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6983374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6985569", "body": "There're quite a lot of failures on Hungarian, but all of them are identical to ICU. Maybe these tests are simply out-dated and not compatible with the current CLDR tailoring data. \n\nRegarding zh-Hant - I can't find any information on how to parse the only `<default type=\"stroke\"/>` line from from [zh-Hant tailoring file](http://unicode.org/cldr/trac/browser/tags/release-21/common/collation/zh_Hant.xml).\n\nTwo of three Japanese pending tests are failures identical to ICU. The reason of our third failure I described in this [gist](https://gist.github.com/f4ee3bd280a2257c5641). \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6985569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6987658", "body": "@camertron, thanks for merging! I didn't expect this gist to become anything 'official', but you can definitely add a link to it in the readme if you wish. \n\nShould I create separate issues for upper-first sorting (Danish), type \"stroke\" option (Zh-Hant), and the tricky problem with denormalized code points in FCE table (Japanese)?\n\nBtw, have you found out anything about backwards accents sorting in French? \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6987658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6987854", "body": "And answering your previous question:\n\n> Are the full collation test files small enough to be included?\n\nThey're small enough to be included into the repository, but too big for the `.gem` file. That's why I [excluded](https://github.com/twitter/twitter-cldr-rb/blob/master/twitter_cldr.gemspec#L21) them in the gemspec.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6987854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6995613", "body": "Hm, looks like something is [wrong](http://travis-ci.org/#!/KL-7/twitter-cldr-rb/jobs/1872839/L916) with time zones in our specs on Travis CI again. Can you have a look at this, @camertron?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6995613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7081675", "body": "@camertron, please, review this one. If everything is ok, you can merge it.\n\nBtw, any news on French backwards accents sorting?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7081675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7090564", "body": "Fixed typos.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7090564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7368175", "body": "Hey, @camertron. Any idea why Twitter API that you used for custom units resources doesn't return data for EN locale? I regenerated these resources with the rake task I wrote and now we're [missing](https://github.com/KL-7/twitter-cldr-rb/commit/b648bf25e5b2380e4e2791ba90017f4e5ba92ce6#L7L0) `custom/locales/en/units.yml`. Also, this API returns `\"%{number}o\"` as a pattern for hours in EU locale. Is that ok? Previously it [was](https://github.com/KL-7/twitter-cldr-rb/commit/b648bf25e5b2380e4e2791ba90017f4e5ba92ce6#L9L8) `\"%{number}h\"`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7368175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7368278", "body": "Closed by #54.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7368278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7384278", "body": "@camertron, exporting resources with ruby-cldr and symbolizing keys in resources turned out to be pretty fast to implement, so I added these changes to this PR. The thing that's left is downloading missing CLDR files in resources rake tasks. I'll take care of it tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7384278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7405526", "body": "Looks good to me :+1:\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7405526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7408340", "body": "Added downloading of missing input data to all importers. I think all this PR needs now is your, @camertron, review :smile:\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7408340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7436212", "body": "Thanks for merging! I've found one more resource file that isn't updated by rake tasks at the moment - [`shared/currencies.yml`](https://github.com/twitter/twitter-cldr-rb/blob/f7d2b1b93a75664bf7feb3f828e3464181f36b80/resources/shared/currencies.yml). Can you tell me how did you generate this one?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7436212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7436304", "body": "Implemented in #56.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7436304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7436330", "body": "Implemented in #56.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7436330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7436371", "body": "Rake tasks for most of the resources have been added in #56.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7436371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7439285", "body": "@camertron, why is data in [`shared/currencies.yml`](https://github.com/twitter/twitter-cldr-rb/blob/f7d2b1b93a75664bf7feb3f828e3464181f36b80/resources/shared/currencies.yml#L2) placed not on the top level but inside `{ :shared => { :currencies => { ... } }`? Should I do the same thing with `shared/postal_codes.yml`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7439285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7440183", "body": "@camertron, I was talking not about directories structure (postal_codes.yml\nis already in shared directory), but about the structure of currencies.yml\nfile itself.\nOn Aug 1, 2012 11:45 PM, \"Cameron Dutro\" <\nreply@reply.github.com>\nwrote:\n\n> Hey @KL-7,\n> \n> `currencies.yml` is in the `shared` directory because it is not\n> locale-specific.  Please do the same with `postal_codes.yml`.  Thx!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/twitter/twitter-cldr-rb/pull/58#issuecomment-7439386\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7440183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7440249", "body": "See this:\n\n``` yml\n---\n:shared:\n  :currencies:\n...\n```\n\nin the file? Why do we need that nesting?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7440249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480842", "body": "@camertron, postal and phone codes support is ready. Have a look, please. \n\nHow about adding language codes converting to this PR? Can you share the data and your thoughts on how this feature should look like?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7512159", "body": "@camertron, I only have one question about `get_tokens` method, otherwise this PR looks good.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7512159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7529945", "body": "Closed by #59.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7529945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183543", "body": "Looks like none of the files will be required for `= 1.9.0`. Is that intended? Btw, it seems to be a best-practice to avoid `unless` when `if` with the opposite condition would work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183556", "body": "Ok, I'll include that into the PR I'm preparing. Just to be sure: `rake/rdoctask` for `1.8` and `rdoc/task` for `1.9`, right?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183568", "body": "Hm, but I'm not quite sure whether these requires are necessary at all. As for me `RDoc` is not used in the `Rakefile` anyway and looks like simple requiring doesn't automatically add any rdoc generation tasks. Should we just remove those for now?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1260705", "body": "Is that necessary? There's a already `rake build` task provided by [Bundler::GemHelper](https://github.com/twitter/twitter-cldr-rb/blob/64ff9e1ecd0ea7cfa68a8448642eb793424bc96e/Rakefile#L10). Just type `rake -T` to see both `build` and `install` tasks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1260705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277230", "body": "I'm not the biggest fan of explicit `self` unless it's absolutely necessary. It's not python after all :smirk: Same for the methods below.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277243", "body": "Why `StringIO.new` instead of an empty string here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1277243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278846", "body": "As far as I understand unlike `StringBuffer` from C# or Java, that provides optimization for concatenation of a big number of strings, Ruby's `StringIO` is a wrapper around `String` that makes it possible to use it in places, where a real IO object, like a file, is expected. If that's correct using this wrapper doesn't give any benefit in this case and only creates (not sure about that) some unnecessary additional IO object around the string itself. The same applies to [this](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/formatters/base.rb#L12).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278877", "body": "I agree that sometimes it's not very clear at first glance whether you use a local variable or some accessor (or call a method without arguments), but things are much simpler when you call a method with parameters as in these cases. Plus if you keep your methods small (as it is in this case) it's pretty easy to spot all the locals and parameters instantly so you can clearly distinguish them from some accessors or methods calls.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280850", "body": "No worries. It's not a big deal and I'm not entitled to force any kind of style on you, quite the opposite ;) Just felt like sharing what I see as the most popular (not necessarily the right one, though) approach and explaining why it makes sense.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373831", "body": "If I understand it correctly this method can be simplified to `TWITTER_LOCALE_MAP.invert.fetch(locale, locale)`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373842", "body": "If it happens to often it might be useful to define another constant equal to `TWITTER_LOCALE_MAP.invert` and then use it instead of inverting the hash every time.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373891", "body": "Wouldn't `@@output_dir ||= build_dir` work here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373922", "body": "Btw, inside class (or module) methods current class is treated as an instance and you can use smth called class-level instance variables here. You just replace `@@output_dir` with `@output_dir` and everything still works. Class variable might cause no troubles in this case, but I'm just trying to avoid them at all in my own code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1373922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418714", "body": "@camertron, I still don't understand how is this `unless defined?` thing is different from a simpler `@output_dir ||= build_dir`. Can you explain?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443448", "body": "This part is a bit confusing, at least it was for me. Somehow I've completely forgotten about classes re-opening and was wondering for a while why this struct is not confused with the class that is defined below. Finally, I realized that what is going below is just adding methods to this struct. What if we do it a bit more explicit? For example, we can move fields array into a separate `ATTRIBUTES_FILEDS` constant and define the struct along with all its methods like this:\n\n``` ruby\nAttributes = Struct.new(*ATTRIBUTES_FIELDS) do\n  def hangul_type\n    Attributes.hangul_type(code_point)\n  end\n\n  # ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443463", "body": "Another thing that was bothering me for a while is that `Attributes` (if you take it without context) is too general name. And besides this generally named struct we have a nice `UnicodeData` module filled with some methods, half of which return instances of this struct. What if we combine `Attributes` struct with `UnicodeData` module into a single `TwitterCldr::Shared::UnicodeData` class?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443476", "body": "I think returning straight from the method with `return type.to_sym if range.include?(code_point_int)` at this point will be simpler that storing the value into a variable, breaking and returning after the loop. And `return nil` in the first line is a bit too explicit because regular `return unless code_point` will return `nil` anyway. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443491", "body": "While removing `KeyPath` class and working with tokenizers I was wondering why we join with `|` here when usually paths are joined with dots. Is it for handling some special cases when we need to distinguish `foo.bar|baz` from `foo|bar.baz`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443510", "body": "What does 'blarg' mean in this context? I have a hard time choosing the right [definition](http://www.urbandictionary.com/define.php?term=Blarg) myself ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443985", "body": "Well, naming is definitely hard =) \n\nI named this module `CodePoints` because I moved there methods like `code_points_to_string` and renamed them into smth like `CodePoints.to_string`. It made methods' names shorter by removing this `code_points_` prefix and making it a part of module name. How will, e.g., `CodePoints.to_string` look like after renaming this module to `UnicodeString`? I think this module is not really about Unicode strings, but about some sequences of hex strings (or integers in the future) representing Unicode characters.\n\nAnd yes, if we find another name for `CodePoints` module, `CodePoint` is a perfect name for the result of merging `UnicodeData` into `Attributes`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1464777", "body": "@camertron, I rebased collation PR (#40) on top of this commit and some of the collation tests involving Hangul started failing. Looks like the following code points (don't known, maybe there are more) where not decomposed before this commit, but now they are:\n\n``` ruby\n> %w[A960 D7B0 D7CB].map { |cp| TwitterCldr::Normalizers::NFD.normalize_code_points [cp] }\n# before => [[\"A960\"], [\"D7B0\"], [\"D7CB\"]]\n# after  => [[\"10FE\", \"1173\"], [\"1113\", \"1161\", \"11B3\"], [\"1113\", \"1162\", \"11B2\"]]\n```\n\nI guess that something is wrong with `blocks_hangul.yml` resource (btw, why is it `blocks_hangul` when the corresponding method is `hangul_blocks`). I'm not sure what this file is based on. Can you help me and look what's the problem here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1464777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1466790", "body": "Checking type of a code point instead of the existence of a `Hangul` string in its name is definitely better. It's not urgent, so it'd be nice if we could fix `blocks_hangul.yml` file instead of reverting.\n\nRegarding the name of the resource file, it's not that they (the file and the method) should be necessarily named the same, but `blocks_hangul.yml` is a bit awkward name. I instinctively tried to open `hangul_blocks.yml` and was very surprised when I didn't find one =)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1466790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1581661", "body": "Why not a constant?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1581661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1582416", "body": "Should we return a copy of the underlying object here, as we do in `LocalizedString`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1582416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1596827", "body": "How about instead of iterating over the elements simply append the rest of the second array to the first one?\n\n``` ruby\nfirst += second[first.size..-1] if second.size > first.size\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1596827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1597147", "body": "Never mind, it doesn't work, because it doesn't alter the original `first` array. Though, I a bit concerned about how many checks we do in this method. Can we simplify it a bit? We can make the method handle any arguments so there is no need to check classes before calling it recursively. For example, like that:\n\n``` ruby\ndef deep_merge!(first, second)\n  if first.is_a?(Hash) && second.is_a?(Hash)\n    second.each { |key, value| first[key] = deep_merge!(first[key], value) }\n  elsif first.is_a?(Array) && second.is_a?(Array)\n    second.each_with_index { |value, index| first[index] = deep_merge!(first[index], value) }\n  else\n    return second\n  end\n\n  first\nend\n```\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1597147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1600625", "body": "Squashing commits is nice, but `Squashing` commit message is not that cool :smile:\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1600625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1602409", "body": "Where do we use `ruby_parser`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1602409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1604634", "body": "I see, thanks for the explanation. I should say `PluralRulesCompiler` is a pretty impressive thing :+1:\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1604634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1758134", "body": "Hm, in fact we improved Finish and Chinese. And Japanese is the only locale that still have an [issue](https://github.com/twitter/twitter-cldr-rb/issues/52) in tailoring.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1758134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1767223", "body": "Well, I think it's still good to fix the REAME :) We're also missing git tag for 1.8.1.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1767223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1917015", "body": "Looks like it [doesn't help](http://travis-ci.org/#!/twitter/twitter-cldr-rb/jobs/2518411). This issue has been already [reported](https://groups.google.com/forum/?fromgroups=#!topic/travis-ci/qK9v0iBfW2w) to Travis CI team, let's wait until they fix it.\n\nBtw, with RVM's jruby-head I get these failures:\n\n```\n  1) TwitterCldr::Utils#yaml guards against circular references\n     Failure/Error: lambda { TwitterCldr::Utils::YAML.dump(a) }.should raise_error(ArgumentError)\n       expected ArgumentError, got #<SystemStackError: stack level too deep>\n     # ./spec/utils/yaml/yaml_spec.rb:410:in `(root)'\n\n  2) TwitterCldr::Utils#yaml tests successful roundtrip of multi-byte characters\n     Failure/Error: (c == \"\\xc2\\x85\" ? \"\\n\" : c).should == r  # \"\\N\" is normalized as \"\\n\"\n       expected: \"\u00c2\\u0080\"\n            got: \"\\u0080\" (using ==)\n     # ./spec/utils/yaml/yaml_spec.rb:209:in `(root)'\n     # ./spec/utils/yaml/yaml_spec.rb:200:in `(root)'\n     # ./spec/utils/yaml/yaml_spec.rb:178:in `(root)'\n\n  3) TwitterCldr::Utils#yaml tests successful roundtrip of ambiguous strings\n     Failure/Error: src.should == r\n       expected: nil\n            got: \"nUll\" (using ==)\n     # ./spec/utils/yaml/yaml_spec.rb:278:in `(root)'\n     # ./spec/utils/yaml/yaml_spec.rb:274:in `(root)'\n     # ./spec/utils/yaml/yaml_spec.rb:215:in `(root)'\n\n  4) TwitterCldr::Utils#yaml tests successfull roundtrip for a few special characters\n     Failure/Error: src.should == r\n       expected: \"aa\u00e2\\u0080\u00a8\"\n            got: \"aa\\u2028\" (using ==)\n     # ./spec/utils/yaml/yaml_spec.rb:296:in `(root)'\n     # ./spec/utils/yaml/yaml_spec.rb:288:in `(root)'\n     # ./spec/utils/yaml/yaml_spec.rb:287:in `(root)'\n     # ./spec/utils/yaml/yaml_spec.rb:286:in `(root)'\n```\n\nAs far as I can see not all parts of the gem are using `Utils::YAML`, but if we're going to use it everywhere in the future, I think we should try to fix these JRuby issues, because tailoring resources generation depends on it. Should I create an issue for that?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1917015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/2402778", "body": "That way you'll have to add manually at least each new spec directory. How about running all fast specs in one batch and then separately each file that includes slow specs?\n\nE.g. (just an example, not sure that it'll work exactly like that):\n\n``` yaml\nenv:\n  - \"RSPEC_COMMAND=--tag ~slow spec\"\n  - \"RSPEC_COMMAND=--tag slow spec/bidi/bidi_spec.rb\"\n  - \"RSPEC_COMMAND=--tag slow spec/collation/collation_spec.rb\"\n  - \"RSPEC_COMMAND=--tag slow spec/collation/tailoring_spec.rb\"\n  - \"RSPEC_COMMAND=--tag slow spec/collation/trie_dumps_spec.rb\"\n  - \"RSPEC_COMMAND=--tag slow spec/normalization/normalization_spec.rb\"\nscript: 'bundle exec rspec $RSPEC_COMMAND'\nbefore_script: 'gem install bundler'\n```\n\nI believe these are all files that include slow specs. Probably there's some way to generalize it, but I can think of one at the moment.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/2402778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/2425990", "body": "Of course, if some of the 'slow' specs are fast enough to run one after another, they can be combined.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/2425990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959", "body": "@camertron, thanks. I should definitely learn to respect backward compatibility. Added a couple of specs to make sure next guy who deletes this method will get punished =) \n\nRegarding delegation I replaced variable length arguments list in `get_resourse` with the same arguments list as in `resource_for`. Though, I'm still not sure which solution is better. Unlike it was before `get_resource` has a meaningful signature now, but it'll be broken if someone changes arguments list of `resource_for`. On the other hand that's why we have specs and thanks to them broken `resource_for` won't be unnoticed in that case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680", "body": "@camertron, I thought it over and decided that delegating method should not care about signature of the method it delegates to as its role is to pass everything along to the actual method. With that in mind delegating method should look like\n\n``` ruby\ndef self.get_resource(*args, &block)\n  resources.resource_for(*args, &block)\nend\n```\n\nFinally, I came across `SingleForwardable` module from the standard library and used it instead of writing delegating method manually. Hope you wouldn't mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/664680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868", "body": "Are you familiar with a block form of `Hash` [constructor](http://ruby-doc.org/core-1.9.3/Hash.html#method-c-new)? It's just a way of defining default value for a hash, in that case on both levels. Though, it might be a bit tricky, so I'd understand if you reject that PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892", "body": "I just don't like those local variables that are created only to be passed somewhere else in the next moment. But you're probably right, it might be a bit less readable that way. I'll remove that if you decide to merge the other part of this PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472", "body": "Totally agree on that: it depends on the project. I can easily imagine people that won't be very happy if some untranslated text will get unnoticed into production because of some mistake or typo that was silently skipped by the formatter.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563", "body": "I see, but what if we gradually change this convention across the project? I used to use instance variables myself but recently decided to learn what rspec's `let` actually is and eventually started using it in my projects. The reason is that `let` has a number of advantages over instance variables. If you're interested you can find most of them in the answers and comments to [this question](http://stackoverflow.com/questions/5359558/when-to-use-rspec-let) at StackOverflow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573", "body": "Ok, I'll keep that in mind.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581", "body": "Didn't know either, just googled it and was very pleased when found this solution.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/667581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760", "body": "I see most of the formatters use [`Formatters::Base#extract_locale`](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/formatters/base.rb#L33-35) and `TwitterCldr.get_locale` (that also takes `FastGettext` locale into consideration) is mostly used in `localize` methods. Is that on purpose? Would it be more consistent to use `extract_locale` here as in other formatters?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849", "body": "When I add interpolation utility function from gettext this line will be replaced with a call to this function.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612", "body": "If I restructure directories a bit as I suggested [here](https://github.com/twitter/twitter-cldr-rb/pull/14#issuecomment-5188319) this file will live under `lib/twitter_cldr`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237", "body": "Wouldn't it be better to do smth like `code_point = '0' * (4 - code_point.size) + code_point if code_point.size < 4` instead of looping and maybe extract that `4` into some constant with a meaningful name? \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685239", "body": "As you're returning from the method right after that you can even do\n\n``` ruby\ncode_point.size >= 4 ? code_point : '0' * (4 - code_point.size) + code_point\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685241", "body": "What kind of syntax is `Array.new(size=15, obj=\"\")`? I'm afraid I've never seen passing arguments like that in ruby. And as far as I understand all you need from that array is 5th element that you retrieve in the next line. Is the any point of creating an array at all in that case?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685246", "body": "Same concern about array creation here. It might not make a big impact on performance, memory or smth, but I think it's unnecessary here. We can check that `for_code_point` returned an array and get its 3rd element, but if it returned `nil` simply return an empty string. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685247", "body": "Why parenthesis here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685267", "body": "There are [a lot of disputes](http://devblog.avdi.org/2010/08/02/using-and-and-or-in-ruby/) in Ruby community about using `and` and `or` in conditions. These operators have precedence different from their alternatives `&&` and `||` that requires more careful usage of them in conditions. As the result, some companies, like Github, simply forbid using `or` and `and` at all (see [styleguide](https://github.com/styleguide/ruby)), others leave them for chaining operations like `validate and save`. There are still some ppl that use them just because they are more verbose, but I believe these proud guys are in the minority. Honestly, I used to use them myself but under the pressure of the community switched to `&&` and `||` in conditions. \n\n@camertron, do you have some recommendations on that topic in Twitter's styleguides?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/685267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694200", "body": "First, I'm still interested in what kind of syntax is `Array.new(size=15, obj=\"\")`? I assume it's equivalent to `Array.new(15, \"\")`, but I've never seen it before in Ruby. Second, without going into the depth of Ruby implementation, that I'm not very familiar, don't you think creating a whole new array of object is not worth reducing the amount of code you need to perform this check? I think it's really nice to make smth like `element = hash.fetch('key', [])` to get an empty array if the key is not present in the hash, but in this particular case creating an array of 15 elements seems like too much for me. Anyway, I'm just sharing my opinion.\n\nRegarding your changes, why `\"\".split`? It'll simply return an empty array anyway. How about that:\n\n``` ruby\nunicode_data = TwitterCldr::Shared::UnicodeData.for_code_point(code_point)\ndecomposition_mapping = unicode_data ? unicode_data[5].split : []\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694205", "body": "I see, but afaik people usually chain methods as much as they need without adding any unnecessary parenthesis.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/701151", "body": "How about `||` for consistency?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/701151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/701164", "body": "Cool! I suspected there should be smth, but I must have been to lazy at the moment to find it :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/701164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/706605", "body": "@timothyandrew, you can use [`Struct`](http://www.ruby-doc.org/core-1.9.3/Struct.html) class for that purpose. Creating `CodePoint` struct will be pretty easy, but in return you'll be able to do `unicode_data.codepoint` and any mistype in the name of the attribute won't stay unnoticed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/706605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709115", "body": "Again, I'm just sharing my opinion, but in this case you're not chaining actions, but check that value is here and then process it. For such cases I usually use `&&`. Honestly, my attitude changed a bit later and looks like I use `&&` form almost in all cases now. So it's up to you.\n\nWhat really surprised me, now, when I looked at it closer, is that you're checking existence of a value in a hash at some key and then pass both hash and the key further. That feels strange. Basically, you check some value and then do nothing specifically about this value. Wouldn't it be better to move that check into the `get_range_start` method? I didn't read this method yet, so it's just an idea for now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709326", "body": "Ah, sorry @timothyandrew, I completely misunderstood this line. You're returning either the value from the hash directly or pass this hash into the other method in order to find it inside of one of the range-blocks. I think `||` is more appropriate here, but [`Hash#fetch`](http://ruby-doc.org/core-1.9.3/Hash.html#method-i-fetch) with block calling this method might be even better here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709655", "body": "Just try it:\n\n``` ruby\nblock_data.fetch(code_point.to_sym) { get_range_start(code_point, block_data) }\n```\n\nRuby blocks are [closures](http://en.wikipedia.org/wiki/Closure_%28computer_science%29) that means you can access from inside of them anything that was available in the context where they were created.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709663", "body": "@timothyandrew, no problem. You can even store that block in a variable, pass it into other methods several times and it still will be able to reference the method and both arguments you need to pass into it. That's an incredibly powerful feature of Ruby blocks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709206", "body": "`Struct.new` returns a new class so why not to treat it like a class and name it smth like `UnicodeDataAttrs` or `CodePoint`, as @camertron suggested? It's better to avoid class variable in Ruby as they have some ugly side effects when it comes to inheritance and here you have all rights to define a full-fledged constant. Then you can use it in the spec below instead of `Struct`.\n\nAnd maybe it'd be nice to wrap this line. We're not sitting at 80 characters terminals any longer, but smth close to 300 characters is still hard to grasp in one line.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/745415", "body": "Could you, please, replace tabs with 2 spaces here and everywhere else where they might be? I'd suggest adjusting your editor's settings to use 2 spaces for indenting Ruby files.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/745415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854019", "body": "It's nothing more than a regular bubble sort with a small optimization that stops the algorithm if nothing was swapped during the iteration.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854055", "body": "Yes, when NFD comes across compatibility mapping it skips it, while NFKD removes compatibility tag and goes further.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854081", "body": "I agree that it's a good practice to return `true/false` from `?`-methods. This one is for internal use so I was less careful about this rule. Give me a couple of minutes, I'll fix it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854089", "body": "Ah, @camertron, do you mean a document explaining NFD & NFKD algorithms themselves?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/870894", "body": "I'm going to do that. There is even a pending [test](https://github.com/twitter/twitter-cldr-rb/pull/33/files#L3R37) (not yet implemented) for that. I'm trying to move forward with TDD approach and as there were no test for that at the moment, I used default locale directly. Otherwise, do you like the implementation? I'll add days and quarters and seems like that's it for calendars.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/870894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/884144", "body": "Yeah, that's one of the reasons why I previously suggested extracting it. I felt like I've already seen smth similar and today I found almost the same [method](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/twitter_cldr/tokenizers/base.rb#L78-87) inside `Tokenizers::Base` class. It's not critical, but at some point I'll extract it from all these places into `TwitterCldr::Utils` module.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/884144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/889805", "body": "Do you have some options for this method, other than the normalization form, in mind? If not, I think it'd be better to have a single argument named `form` with a default value `:NFD` instead of this uncertain options hash. \n\nAnother question is about returning `nil`. For this method we can clearly specify a list of valid options (that are just `:NFD` and `:NFKD` at the moment), so wouldn't it be appropriate to throw an `ArgumentError` if some invalid normalization form name is passed?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/889805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/889833", "body": "I like the idea with overriding `default_format_options_for` in every subclass, but I think this `2` should be moved back into some constant because it looks too much like a magic number here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/889833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/889880", "body": "This hash should look nicer as a constant, don't you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/889880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/889883", "body": "You can use `TwitterCldr.get_resource` here for conformance with the rest of the code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/889883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952010", "body": "How about `direction = seconds < 0 ? :ago : :until`? It's shorter and a bit easier to read it that way.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952055", "body": "@camertron already commented below about preferring `||` and `&&` over `or` and `and`. Just don't forget this one too. And as the condition body is only one line you can convert into a\n\n``` ruby\nunit = calculate_unit(seconds.abs) if unit.nil? || unit == :default\n```\n\nbut it's more like a personal preference, so it's up to you to decide which form you like more. Same for explicit `self` usage.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952063", "body": "When a hash is the last argument in the method's call Ruby allows to omit curly braces. I think it's a good thing to do.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952139", "body": "I think it's a good practice to add editor-specific files that are not related to the project into your own [global git ignore file](http://robots.thoughtbot.com/post/18739402579/global-gitignore) instead of `.gitignore`. That's, for example, how my `~/.gitexclude` looks like:\n\n```\n*~\n.*.swp\n*.pyc\n.rvmrc\n.classpath\n.project\n.pydevproject\n.settings/\n.idea/\n.redcar/\n.DS_Store\n```\n\nThat allows to keep `.gitignore` clean regardless of what editor every particular developer uses. Plus you do it once and benefit from it in the future projects.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952186", "body": "Can you, please, explain what is this change about? I'm going to extract this method in the nearest future, because we have it duplicated in several places, so I'd like to know all use cases.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952799", "body": "When I started working on the project I suggested @camertron to use methods defined with `rspec`'s `let` instead of regular instance variables. I think he liked the idea. You can read about `let` and `let!` [here](https://www.relishapp.com/rspec/rspec-core/v/2-4/docs/helper-methods/let-and-let) and [here](http://stackoverflow.com/a/5359979/357743) you can find reasons why in most cases it's better than using instance variables in specs.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952844", "body": "Two empty lines is a bit too much for separating regular methods of the same class, don't you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952918", "body": "Unfortunately, this doesn't work in Ruby 1.9. Specs are failing with this error:\n\n```\n1) TwitterCldr::Formatters::TimespanFormatter#format#ago works for a variety of units\n   Failure/Error: @formatter.format(-3273932, :year).should == 'Vor 0 Jahren'\n     expected: \"Vor 0 Jahren\"\n          got: \"[\\\"Vor \\\", \\\"0\\\", \\\" Jahren\\\"]\" (using ==)\n   # ./spec/formatters/calendars/timespan_formatter_spec.rb:19:in `block (4 levels) in <top (required)>'\n```\n\nThe problem is that `Array#to_s` works differently in 1.8 and 1.9. In 1.8 it simply joins elements in one string, that doesn't really make sense in most of the cases. That's why it was changed in 1.9 and now it return smth more similar to `Array#inspect`. Same for `Hash`. So, if you want to join array into a string you should use [`Array#join`](http://www.ruby-doc.org/core-1.9.3/Array.html#method-i-join) instead. And, of course, you can use `Enumerable#map` as @camertron suggested.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952971", "body": "Btw, we have Travis CI (a continuous integration system)  set up for this project. That means you can run specs on [travis-ci.org](http://travis-ci.org/) for your fork of the project too. Just go to this site, sign in with you GitHub account, flip the trigger for `twitter-cldr-rb` project in your profile and push smth to your fork. Right after you push changes to GitHub it'll notify Travis CI which will immediately clone the project and run the specs both on 1.8 and 1.9 rubies. I do most of the development with 1.9 and emails from Travis CI is how I usually notice that I've broken smth on 1.8 ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/952971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953047", "body": "I think it'd look a bit nicer if you extract numeric constants from this method into a hash with time unit symbols as keys. Then you can rewrite this method into smth like\n\n``` ruby\ndef calculate_time(seconds, unit)\n  round_to(seconds / TIME_IN_SECONDS[unit], 0)\nend\n```\n\nWhat's the purpose of `round_to` method in this class if you always pass 0 into it? If you're going to use it with a different precision in the future, I think we should extract this method into `Twttier::Utils` module, because exactly the same method exists in `NumberFormatter`. Using the same method from both classes is much better than having its local copy in every one of them.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953085", "body": "Does this class really belong to `shared` directory? If so, I think it's better to wrap it into `Shared` module as it's done with other classes in this directory. In most cases it's better if modules are nested in the same way as directories are.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953258", "body": "This one fails on my local machine saying that the returned value was `\"Vor 322020420 Sekunden\"`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953451", "body": "For some reason it works in specs (I think because we explicitly include `TwitterCldr` in several our spec), but it fails in console for me with\n\n```\nNameError: uninitialized constant TwitterCldr::LocalizedDateTime::LocalizedTimespan\n```\n\nYou should use the full name (with all parent modules) for `LocalizedTimespan` class here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953594", "body": "Well, I read your comment about `units.hours-ago.1` and I understand the problem now. Your fix works for this case, but it'll break if one day someone will pass a hash with `'1'` key (as a string). But right here there's no much we can do because needle is just a string. In the long run, I think, a better solution will be to rewrite `KeyPath` so that it'll operate arrays of keys instead of strings where keys are joined with dots. That will allow us to distinguish numbers, strings and symbols because they'll be elements of an array representing the path and will have corresponding types. @camertron, what do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/953594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/954248", "body": "I tried completely removing `KeyPath` and fixed a couple of specs in this PR (to make it testable and see the whole picture). @gbadiali, @camertron, please, have a look at [this diff](https://github.com/KL-7/twitter-cldr-rb/compare/f64c9dc4a14c7363b86ef6efe44e3a54c304734d...adding_ago). It completely fixes the problem with `units.hours-ago.1` and all the specs are passing (except [this](https://github.com/KL-7/twitter-cldr-rb/compare/f64c9dc4a14c7363b86ef6efe44e3a54c304734d...adding_ago#L10R64) that I'm not sure how to fix so I'm leaving it for you). If you like it, I can send these changes as a PR to @gbadiali. She will merge them into her branch and in the end they will be added to this PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/954248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/954549", "body": "Here's the intialisation of a cache, but I don't see the place where smth is written into it. Can you, please, point it out?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/954549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963413", "body": "I'd really recommend to use the following formatting for things like this one:\n\n``` ruby\nTIME_IN_SECONDS = {\n    :second => 1,\n    :minute => 60,\n    :hour   => 3600,\n    :day    => 86400,\n    :week   => 604800,\n    :month  => 2629743.83,\n    :year   => 31556926\n}\n```\n\nIt results in a smaller indention, makes the code more readable (arguable, but it looks that way to me) and in the future (maybe not in this particular case, but in general) it'll give you a nicer git diff, because if you add/remove values to the hash/array you will only add/remove lines without ever changing existing ones (the first and the last in your case).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963424", "body": "I totally agree with that. This class still doesn't feel like 'shared' to me, but looks like it's the best place we can find for it =)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/991410", "body": "What do you think if we remove this intermediate `UnicodeData` module? `CodePoint` is the only class in it and I think it's nested too deep.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/991410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/991429", "body": "You can omit quotes quotes in such cases and use `:@decomposition_map` instead.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/991429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997816", "body": "Huh, do we have it? There's something called _Fast C or D_ (or FCD) in the [ICU document](http://source.icu-project.org/repos/icu/icuhtml/trunk/design/collation/ICU_collation_design.htm#CheckFCD). They use it to skip normalization when it's not necessary.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997831", "body": "I haven't found a good description of what has to be done with CJK, so I ported this class (necessary methods and constants) from ICU4J. I'll add some notes about that later. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997833", "body": "It was...\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997838", "body": "I extracted it from `Collator` to make things separated. And I need an instance because otherwise `@bytes_array` and `@common_count` will be passed from one method into another as arguments that doesn't feel right in this particular case when we have quite a lot of methods involved.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997846", "body": "Agree, but we don't have `Array#second` from `ActiveSupport` here, so `final.first` and `node[1]` won't look nice together. That's why I thought about creating a `Node` class. But, as I said, I decided against it eventually and implemented everything with plain arrays and raw indexes =)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997849", "body": "How do you mean streaming? I separated this method from `load_collation_elements_table` to be able to stub the latter with a string in the specs. That's why I chose a neutral `table` name for the argument.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997853", "body": "I think the second option is the right choice. And I'd rather leave things that way until then, so we don't forget about these annoying conversions.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997863", "body": "Ah, now I see what you mean. Unfortunately, I guess, one does not simply stream a YAML file. And all our other resources are in this format.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997869", "body": "Well, you can actually pass a file handler (as an IO-object) into `YAML.load` or even a file name directly into `YAML.load_file`. That might be more efficient, I think.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1031560", "body": "What do you think if we move this fallback to the default locale into `convert_locale` method? Maybe `convert_locale` wouldn't be such a good name then, but I think this method is used in a couple of other places where fallback might be useful as well.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1031560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037986", "body": "Is this method used anywhere?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037992", "body": "Instead of this `key_val` thing you can do:\n\n``` ruby\ncurrent.inject({}) do |ret, (key, value)|\n  ret[key] = expand(val, haystack)\n  ret\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037993", "body": "This whole method can be simplified to `!!locale && supported_locales.include?(convert_locale(locale))`, because `convert_locale` method converts `locale` into a symbol and returns intact locales that do not need to be converted.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1038052", "body": "Ok, let's leave it that way for now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1038052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037994", "body": "@camertron, can you, please, explain, why do we need to go over the whole resources hash and expand all 'redirects' here? Expanding is handled in `Tokenizers::Base#expand_pattern` method when you request a specific resource. Isn't it enough?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085864", "body": "I guess so. Don't worry, when I process more CLDR data and get a more complete list of locales tailorings, I'll filter these resources to the regular list of locales we support for other features.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128437", "body": "I don't use the node itself as a root of a new trie, but instead create a new node with nil value and same hash of children, because by design root node of a trie should have `nil` as its value. Otherwise `find_prefix` works incorrectly in cases when a key is not present in the trie. The problem is that it ends its search in the root node, that means that nothing was found, but returns a non-nil value stored in the root (you can see it [here](https://github.com/KL-7/twitter-cldr-rb/blob/aaee8bfb53dfaaa98769be5ef62eee21f834f971/lib/twitter_cldr/collation/trie.rb#L89)). Maybe there's a better (more explicit) solution for preventing trie's root from having a non-nil value (e.g., with some additional logic in `Trie#intialize`), but that's the best what I could think of. \n\nRegarding locking the trie, the idea is that this method is only used in `Trie#find_prefix` that returns a subtrie, that is supposed to be used only for further search and not for modification, so we better protect our subtrie by locking it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128460", "body": "I can change keys to strings, but it doesn't look like having symbols here hurts in any way at the moment. \n\nI remember we were talking about a serious impact of hashes deep symbolizing on the resources loading time. Have we decided to get rid of symbols at all and use strings everywhere, or we agreed that we'll update our resources to use symbols as keys, so we don't need any processing when we load them? I think it's the latter, but I'm not sure.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128543", "body": "Right, I updated tailoring resources. I'll also create an issue for converting resources to symbols usage, so it's easier to see what we have in our plans.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128614", "body": "Btw, that reminded me of what I didn't like about `ya2yaml`. It's the way it dumps symbols:\n\n``` ruby\n1.9.3p194 > YAML.dump :foo\n => \"--- :foo\\n...\\n\" \n1.9.3p194 > :foo.ya2yaml\n => \"--- !ruby/symbol foo\\n\"\n```\n\nNot that it's a serious issue, but result from `ya2yaml` doesn't looks as nice and clean as the one from the default dumper (if you ignore this `...\\n` thing at the end).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077669", "body": "Where is 1.5.1 and others?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077703", "body": "Looks like we're handling the same list of features as in `ALL_JS_FEATURES` here. Will it be nicer if we turn this constant from array into a hash (with classes as values) and replace this whole method with `ALL_JS_FEATURES[feature]`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077786", "body": "CoffeeScript has existential operator, so we can replace `unit is null or unit is undefined` with a simple `unit?`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077844", "body": "CoffeeScript automatically returns the result of the last expression as a function's return value, the same way as Ruby does. Just saying ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077904", "body": "4 back slashes (as well as 2 in the previous file, imho) is a lot. I think `%Q(...)` will look much nicer here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077946", "body": "Isn't Ruby calling `to_s` for you when you put something inside `#{...}`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1077946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085833", "body": "That's interesting. The docs clearly say:\n\n> existential operator `?` returns true unless a variable is null or undefined\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1165123", "body": "Will [`Array#replace`](http://www.ruby-doc.org/core-1.9.3/Array.html#method-i-replace) work here? And, in fact, replacing one array with another one isn't really 'merging'. If it suits our use case, I think it'd be more transparent to limit acceptable arguments to hashes because only for them we perform in-place merging. What do you think about something like that:\n\n``` ruby\ndef deep_merge!(first, second)\n  raise ArgumentError, \"two hashes expected\" unless first.is_a?(Hash) && second.is_a?(Hash)\n\n  second.each do |key, value|\n    current_value = first[key]\n    if current_value.is_a?(Hash) && value.is_a?(Hash)\n      deep_merge!(current_value, value)\n    else\n      first[key] = value\n    end\n  end\n\n  first\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1165123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1165174", "body": "How about `path.end_with?('.yml')`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1165174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1165190", "body": "I think for this special case we can do `File.join('custom', path)` and don't change `resource_file_path` at all.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1165190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1165199", "body": "I remember you said that it just feels right, but non-successive version are a bit strange, don't you think? In fact, the best approach for versioning that I know is [semantic versioning](http://semver.org/), but I'm not sure that we're following it with TwitterCLDR. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1165199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1194306", "body": "Oh, thanks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1194306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217512", "body": "Removed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217565", "body": "[Updated](https://github.com/KL-7/twitter-cldr-rb/commit/7cc2f73977577f50ec0d5ffd15914c8ae40454de). Any reasons why you prefer `File.open`? I usually use `Kernel#open` because it's shorter and looks consistent with [opening remote resources](https://github.com/KL-7/twitter-cldr-rb/blob/master/spec/normalization/normalization_spec.rb#L101) through `open-uri`. One thing I don't like about it is that if you need to stub/mock it you have to stub/mock it on the current object, like it was [here](https://github.com/KL-7/twitter-cldr-rb/commit/7cc2f73977577f50ec0d5ffd15914c8ae40454de#L5L196) before. Using `File.open` definitely makes things clearer in that case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1285590", "body": "Sure, we can, but `ruby-cldr` [uses](https://github.com/svenfuchs/ruby-cldr/blob/master/lib/cldr/download.rb#L15) exactly the same command to download CLDR, so we're already bound to using `curl`. The reason why I decided to use it as well is that it prints nice progress while downloading. Only developers will use this code, so I don't think there's much to worry about, unless you're going to update resources files on Windows. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1285590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1308331", "body": "Why was that suddenly moved to currency formatter?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1308331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1367591", "body": "I just tried to reduce the number of things that we put into the load path manually. I believe we can make it even nicer by adding `js/lib` to `require_path` in [gemspec](https://github.com/twitter/twitter-cldr-rb/blob/master/twitter_cldr.gemspec#L18) and directly requiring `twitter_cldr_js` here, or even remove this `require_js` method at all, because `TwitterCldr.require_js` wouldn't be much shorter than require 'twitter_cldr_js` in that case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1367591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1423324", "body": "How about extracting these three lines into a method that can be used both for `FastGettext` and `I18n`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1423324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1459629", "body": "To be consistent with the standard `#each` implementation we should return a `Enumerator` when no block is given. I think this should do the trick:\n\n``` ruby\ndef each\n  block_given? ? @base_obj.each { |e| yield e } : @base_obj.to_enum\nend\n```\n\nMaybe you'll want to return `self` when block is given (as you do now), but I'm not sure that it's better than returning `@base_obj` as the implementation above does (it return result of `@base_obj.each` that is `@base_obj` itself). \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1459629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1657449", "body": "When you construct a range like that Ruby uses [`#next`](http://www.ruby-doc.org/core-1.9.3/Fixnum.html#method-i-succ) method to get the next element. For numbers this method returns `self + 1`. As you can't reach `-5` moving that way from `-3`, `(-3..-5)` generates an empty range.\n\nThough, you can use `-3.downto(-5).each { ... }` if you wish. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1657449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1657544", "body": "I guess [`#each_with_index`](http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-each_with_index) would look a bit nicer here. \n\nAlso, I believe every `gsub!` call iterates through the whole string, and you can get the same result with a single walk through like that:\n\n``` ruby\nformat.dup.gsub!(/\\{(\\d+)\\}/) { elements[$1.to_i] }\n```\n\nOf course, it doesn't matter if you deal with short arrays as in this case. Just sharing an idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1657544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2015886", "body": "It's up to you if you prefer it that way, but in my opinion parentheses are needless in cases like that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2015886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016030", "body": "Looks like this revision is no longer in the `master` branch of your fork. Its `master` points to `5f1733b82c065ba516e4d97eefcdde8a8427f941` now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016050", "body": "Why capitalized again? I believe it [was fixed](https://github.com/svenfuchs/ruby-cldr/pull/9) in `ruby-cldr` to be consistent with other components, e.g., `numbers`. Same with `calendars` below. I think you should remove this capitalization both here and in your `ruby-cldr` fork.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016121", "body": "Afaik most rubists [agree](https://github.com/bbatsov/ruby-style-guide) (search for `{`) that having spaces around braces makes code much easier to read. Besides, here you can easily use `map(&:to_s)`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016139", "body": "There's no need to specify `nil` explicitly \u2013 `return` without a value will return `nil` anyway. Besides, `unless` is a bit more expressive than `if !something`, and in a two-lines method I'd avoid explicit `return` altogether and rather move if-condition to the end of the last line.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016185", "body": "EmptyLinesOverflow!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2016185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2018511", "body": "Ah, I see. Nice catch! In that case the only thing I'd suggest to do is to update `README`, because it contains misleading example with lowercase components names.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2018511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597591", "body": "Probably it'd make sense to downcase them for internal consistency \u2013 `TwitterCldr::Shared::LanguageCodes` works only with lower case values as you can see [here](https://github.com/twitter/twitter-cldr-rb/blob/master/spec/shared/language_codes_spec.rb). \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597604", "body": "Great pull request by the way! :+1: \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2601422", "body": "I think `TwitterCldr::Utils::Territories` is a better place for these two methods, because they are related only to this feature. On the other hand, `Utils` module is supposed to contain more generic helpers that are used in multiple places across the project.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2601422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2601591", "body": "Looks like the problem is in the way [`ruby-cldr`](https://github.com/svenfuchs/ruby-cldr) dump data. Specifically, in the way they override [this method](https://github.com/svenfuchs/ruby-cldr/blob/master/lib/cldr/export/yaml.rb#L31-L37) of `Ya2YAML` class. With this method override you always get numeric strings without quotes (that are later parsed by the standard Ruby YAML parser as integers in TwitterCLDR):\n\n``` ruby\n1.9.3p362 :001 > Cldr::Export::Yaml.new.yaml(\"en\"=>{\"territories\"=>{\"001\"=>\"World\", \"002\"=>\"Africa\", \"003\"=>\"North America\"}})\n => \"en: \\n  territories: \\n    001: World\\n    002: Africa\\n    003: \\\"North America\\\"\"\n```\n\nWithout this override (if you comment it and use the original implementation from `ya2yaml` lib) you get quotes around keys:\n\n``` ruby\n1.9.3p362 :001 > Cldr::Export::Yaml.new.yaml(\"en\"=>{\"territories\"=>{\"001\"=>\"World\", \"002\"=>\"Africa\", \"003\"=>\"North America\"}})\n => \"en: \\n  territories: \\n    ? \\\"001\\\"\\n    : World\\n    ? \\\"002\\\"\\n    : Africa\\n    ? \\\"003\\\"\\n    : \\\"North America\\\"\"\n```\n\nIt looks better, but for some reason this YAML string can't be parsed by standard Ruby YAML parser. Probably the fix in `ruby-cldr` should be a bit more accurate than just commenting `is_one_plain_line?` method :) If you're interested, you can dig deeper and try to fix the way `ruby-cldr` dumps data. I think it'd be great to get it fixed rather than ignore these type of codes.\n\nFYI, standard Ruby YAML engine tries to omit quotes around strings when possible, but it leaves them if the string represents a valid octal number (with '0' prefix):\n\n``` ruby\n1.9.3p362 :010 > YAML.dump(['001', '008', 'foo'])\n => \"---\\n- '001'\\n- 008\\n- foo\\n\"\n```\n\nLooks like that's how it should be according to the YAML spec and I think that is what we need to get in the YAML files generated by `ruby-cldr` to solve this problem.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2601591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602566", "body": "Ah, sorry, I actually meant `TwitterCldr::Shared::Territories` module \u2013 the only module (beside auxiliary importer that is used only rarely when CLDR is updated) that uses these methods :( My bad. \n\nLuckily, you did it step by step, so if you simply remove the [last commit](https://github.com/jasonkb/twitter-cldr-rb/commit/2d9973806d0452b40444a20fa841bb90d5b4bbef) it'd be perfect. I apologize for confusing you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602641", "body": "Fair enough, I think. \n\nThe biggest problem with YAML is that MRI 1.8.7 is pretty bad at dumping Unicode characters into YAML and most of this gem is about Unicode. @camertron tried to solve it by adopting parts of `ya2yaml` gem internally in TwitterCLDR and probably that's also the reason why `ruby-cldr` uses `ya2yaml`. It fixes some issues, but the differences between all these YAML implementations are causing a lot of troubles :( \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602904", "body": "Importers don't have specs, because they're used only by TwitterCLDR developers and in most cases it's easy enough to check the final resource files that they produce. At least that's how I justified my laziness when I added these importers without a single spec :)\n\nAnyway, I see your point, so leave it in `TwitterCldr::Utils::Territories` if you think it's appropriate.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602915", "body": "I believe you can remove explicit `TwitterCldr::Utils::Territories` since both methods are in the same module now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2609369", "body": "Great, thanks! :+1: \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2609369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2576063", "body": "Probably `@locale = old_locale` should be moved to `ensure` section. Otherwise, something like \n\n``` ruby\nTwitterCldr.with_locale(:es) { raise 'asdf' }\n```\n\ndoes not switch locale back.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2576063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2576105", "body": "I believe you can 'case' on an object class like that:\n\n``` ruby\ncase proc_or_locale\n  when Symbol, String, Proc\n    locale_fallback << proc_or_locale\n  else \n    raise \"A locale fallback must be of type String, Symbol, or Proc.\"\n  end\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2576105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2576129", "body": "Wouldn't [`Array#reverse_each`](http://www.ruby-doc.org/core-1.9.3/Array.html#method-i-reverse_each) look nicer here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2576129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2576159", "body": "Do you think it's a good idea to hide from users exceptions inside their own lambdas?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2576159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581020", "body": "Remove `.class` call. \n\nWhen you do something like this:\n\n``` ruby\ncase obj\n  when choice then ...\nend\n```\n\nRuby executes something similar to `choice === obj` (note triple equals) for each alternative and selects the first one that returns `true`.\n\nSince [`Module#===`](http://www.ruby-doc.org/core-1.9.3/Module.html#method-i-3D-3D-3D) checks if the passed object is an instance of the module itself, you can do things like:\n\n``` ruby\ncase obj\n  when KlassA then ...\n  when KlassB then ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581308", "body": "Wouldn't that go crazy if you pass an unsupported locale? In that case `old_locale` will be undefined, but still used in the `ensure` section.\n\nI think you'll have to do something like that:\n\n``` ruby\ndef with_locale(locale)\n  raise \"Unsupported locale\" unless supported_locale?(locale)\n\n  begin\n    old_locale = @locale\n    @locale = locale\n    result = yield\n  ensure\n    @locale = old_locale\n    result\n  end\nend\n```\n\n`begin...end` inside a method looks ugly, but I don't know how to handle it nicer.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581764", "body": "Look down.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581765", "body": "Look up.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581777", "body": "Another method duplicate. Looks like git failed to merge correctly.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581850", "body": "Just curious, why an explicit `nil` here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2581850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2586784", "body": "Is that necessary with the `attr_accessor` above? Besides, since a custom getter is defined below, maybe it should be just `attr_writer`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2586784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/15428770", "body": "Yeah, but they were for the old tokenizer implementation and were not even wrapped with a `describe` block. I want to get the missing locales added to JS version as soon as possible, so I didn't take care of these tests yet. I might look into it afterwards.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/15428770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18319099", "body": "This and the next line need to be reverted, right?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18319099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18319185", "body": "Can we (and should we) remove the original `plural_rules.yml` file after we save pre-processed `plurals.yml`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18319185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18358169", "body": "Sounds good :+1: \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18358169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18605286", "body": "Not really related to other changes, but this constant is not used anymore, so I removed it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18605286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18609387", "body": "binding.pry\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18609387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18673583", "body": "There is an issue with these plural rules. If you check cldr [data](http://unicode.org/cldr/trac/browser/tags/release-26/common/supplemental/plurals.xml#L16) Korean has only one plural form `other` while our resource file contains `one`, `few`, `many`, and `other`. This happens because of the locale fallback mechanism in `ruby-cldr` that deep merges locale resources with resources for all its parents and this parents list always includes default `en` locale. This issue is especially important for plurals, but it also affects some other resources. I'm trying to work out a solution for that in svenfuchs/ruby-cldr#33.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18673583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22677064", "body": "I'm not sure how it works, but coveralls already has [a few reports](https://coveralls.io/r/twitter/twitter-cldr-rb) for this repo.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22677064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22679276", "body": "Our readme is generated from `README.md.erb`, so all the changes should go in there. Then you run `bundle exec rake update:readme` and it updates `README.md`. Could you do that? If you don't have environment set up, I can help with that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22679276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22679352", "body": "I mean helping with updating the readme, not with setting up the environment.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22679352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "reiz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/31dfda36ad404dceb0858d73f39af04fa02f012d", "message": "Add license info to the gemspec. (#208)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "camertron": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/db7c7b3bf1d169b337cb3dcb6a3650be10c0387a", "message": "Fix list formatter"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d10df4b2581fff14ac22ad2878fcedb20b455eb9", "message": "Fix titlecasing of Japanese text"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/0f1f13b203955c8ad012dfdf8471ffd7416470b4", "message": "Address several more Ruby 2.4 deprecation warnings; upgrade to RSpec 3, drop rr"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/85674c19a654b60ab29187f58a122e92e343d644", "message": "Bump version/changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/464a33f718ed43f3199e30442a2a13ac6ad0ab07", "message": "Bump version and changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8b58fb89c4a305f269c785c207337ea055435928", "message": "Bumping version and history"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/02b723b20ef0c152edff960daab8a769ef7f59e3", "message": "Bump version and add entry to changelog"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e0b58e2745acbbf60c56fbc198707a67beb968a9", "message": "Adding Tibetan locale (#199)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1d77b997456e8616b697fcce2c998efa8b50b60a", "message": "Adjust loader to not preload non-existent locale resources"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9f16d15ae23e8ec573b45096a2f90d13466ea940", "message": "Skip RBNF rules for unsupported locales"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/13706c4b29f3d30d5148e8838411c3990492837e", "message": "Update transforms"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1b4ea290abe8bbd11cc21a0772086c3da06e4360", "message": "Adding script to add locales; adding alias to Rakefile"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c5741a32932201a524dc6e61b81137fe5563af53", "message": "Fix readme"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b53e35caf5a75303edec4645103ab68e5313525c", "message": "Not quite ready for bo yet"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/34f798cfea25e92d18248f4e9a3b1cbc3f50765d", "message": "Adding a few missing locale components"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/35fffc4cace9b0ed4e8527e2f78528ce753927bc", "message": "Update transform test importer"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d9f24faf4320ce0e2f17c819ca3237d973ac61da", "message": "Isolate different versions of ICU"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c26610edd5ffea44b6fff24c160fe976cf90ee6a", "message": "Use IO#each_line instead of the deprecated IO#lines"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7f836dfe5f055b7f59c26c0ff5aece105d2fd86d", "message": "Disable ULI importer since service is down"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/03f5b6a92fc92f22b4a7c73fdc3e91730bfdc007", "message": "Use methods instead of constants for importer constants"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5ff5562d98a578d777daaa50fcffd70b5fab3f3a", "message": "Refactor update rake task"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/47c8488f147630c20c802068600d830c8df3d903", "message": "Small fixes, includes 1.9 fix"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/718eec263f641f72d1bd694e778d156a8b01aa49", "message": "Fix ruby 1.9"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d010582a436f1af91d71a856ddfb6f27405f1b64", "message": "Small fixes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/738bbdea83cdb183506c88a79e9998f995730e1d", "message": "Refactoring the hyphenation importer"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a718f882526f90fd34ca7ff49aaa42f3f1d8acc3", "message": "Remove download module (no longer needed)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/86b701ccaf63e774a1f3fb4a803e9250ba4238ef", "message": "Fix spec_helper, remove bo (for now)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8b65951442372e8cce37d6b00b06411fc546019d", "message": "WIP"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7d1160f7c8c4b0b755a731fe06bea922caebde4b", "message": "Oops fix import script"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/90992efc662d303edd28f217e9210e4bd3e77351", "message": "Adding Tibetan (bo)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d2f8bb5d8726475b7f9c1a6faf450721c9a796bf", "message": "Add docs for unicode properties support"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/158a8181d06c97621fb234ba91019a4e69ee752f", "message": "Update README with transliterator docs"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1a8eb5fa2110d062aefbd45b7e8b2d75903b61c1", "message": "Switch back to pry-nav"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/64b45cc5ecafee50bf52bf54c6311efccfa2eaba", "message": "Various transliterator tests and fixes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/67c53cf6f32abfe2ef3297ff8a53980678d5c102", "message": "Add Transliterator that can handle multiple scripts"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/61dfbb024e1fe90140093a4843729b02dfdd8a10", "message": "Hyphenation should be higher-level heading in readme"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/21d45d590b6bc7e07c1f0bbd4c6f9bdb8dd01a24", "message": "Fix spacing"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/3bb320acf2ee67c2383cbf808bc28dae8170503a", "message": "Update readme"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d744254120bba85526eb52fbb9c5e8fa170726b4", "message": "Hyphenation features and documentation"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/57c50702e33f7e79d68951df78831dbb9a14d566", "message": "Use Utils::Trie instead of Collation::Trie (renamed)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a04125d8f3dbbab9c027f0bffb0d4a79bcedccaf", "message": "Add entry to History.txt with transliteration item"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2ec188cae3a32c0f5649e52d2dbf7632ece503b6", "message": "Merge branch 'transliterate' into four_point_oh"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4568fff4432f4eddb48562aa184fcea2c6ada1e4", "message": "Merge branch 'master' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1a3ce4d93a3499b9545707c6812e34fe3c7e45e2", "message": "Merging in hyphenation functionality"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4b4a169beb23d15470a7b3a488dc5ed2a00123e1", "message": "Fix collation trie spec"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/44ea4c6c8e506eef25d390039dc9140875333db0", "message": "Remove tester.rb"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/135437cde10b7d6e6d6c712774df87f23b730840", "message": "Fix hyphenator"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5d5e1fc0ba58000dc88dba31195bff1336832ded", "message": "Merging upstream changes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/79fc27afa46a22d92e1ffe05b9e5af37888b143e", "message": "Fix issue with date passed to localizeddate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/37a1ea5e642ea4a9984d9d088c3eec74c008a262", "message": "Oops, fix collator"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/db07049a0cc94f21930343b673f380a26b5a25df", "message": "In collator, raise a specific error when passed invalid codepoints"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8937e646e48d05952b35bb6ace59667bd7e82a6e", "message": "Bumping version and history"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/44c57ada9fb51c52b136db4f340ee3d9bc663706", "message": "Override south korean postal code format"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/439a94d804c6a15e6f340ac64fceda2e23a75905", "message": "Lock version of term-ansicolor to fix ruby 1.9 compatibility"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b0db2818415b647381fb905511735689c4ec3c9c", "message": "Update postal codes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/85a48098c4ae1a91874a35404a4a39a5b3f61a6a", "message": "Merge branch 'master' into cldr29"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/fe4caf5a33672832b3c2a2987aae4a3f8d6c94be", "message": "Inline and fix rbnf tokenizer regex"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/659d29702c61e7108f0480191c64e697a76b719c", "message": "Oops wrong constant"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/fcbc9dba83fba31750bc0b53ee79aa042a7589f3", "message": "Adding entries to history.txt"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4b66ef810f9154635e9949ac9da7ddfa5b3b8520", "message": "Upgrade to Unicode v8.0.0"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/40450ab1914f9ab81975453abe0a9481fdaaf444", "message": "Fix a bunch more tests"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c5855470ff70fe2b2629b06f29dc0c8a7de1cd02", "message": "Fix postal code regex sampler"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2cfceaa726b9385b0df7ff52d923bf8abf76d84a", "message": "Fix specs for timespan data reader"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9a73e3875cdeb984c7c12db043cd660e9398cb80", "message": "Fix Russian RBNF tests"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/eee886e5a96e13d12a03266bef77c355a70b0614", "message": "WIP"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c0e8ba4a7e4b6267486e04762072c4ecc767c064", "message": "Fields support (#193)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/cb3aa9a67c20380c0b42d2c17e4864c319f8beae", "message": "Update plural rules with several bug fixes (#192)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d1b7d645ba465c076bcab3e63ae27435e348a896", "message": "Bumping version"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/3cc6effa3cf702fe508be8da7348c9555b31a540", "message": "Merge branch 'utils_trie' into hyphenation"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/0a2f723f83bedee6a95525fde7960fe95ae88174", "message": "Merge branch 'master' into utils_trie"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/641f5199ec9cea1c16ee6ee6eff7138318792f61", "message": "Merge branch 'master' into hyphenation"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c4a3f6816e4c0fa1f90ebeef49ff8d8563845ce9", "message": "Bumping version and history"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8b693fa64b575a80794542bf6227c6ea1cd364b3", "message": "Add support for units (#189)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/92edcc8df209435348b540279b2d77d4badb2131", "message": "Merge branch 'master' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b1a5b9e6291da41aa52ff692f2410254ea5a74bf", "message": "Merge branch 'master' into hyphenation"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a7d79f39e066a740a9cc3c5c6c11cf21e15fb9de", "message": "Update README."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/bc87bab4a97631bfbf243d5f70e0819c0e96c4dc", "message": "Merge pull request #188 from sandstrom/patch-1\n\nExample with calendar data"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/809b9743ec969907a07f55683c08e3c2451d38c0", "message": "Fixing RangeSet#size under ruby 1.9"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/76d71c0672a9ce54e3be7f78c9c92572ed41e1f7", "message": "Adding some additional specs before publishing new version"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e047981ffdcf63f634dd3c538b83189e975ec4ba", "message": "Bumping version and history for release"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c40099c6270d6c12e6c55fffd5af69018b6d4618", "message": "Merge branch 'master' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/6019d806d801be74250d27927bf377b0b6b17615", "message": "Merge pull request #183 from twitter/fix_regexes\n\nFix invalid unicode regex behavior"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a277024067be962af9145f10c2c88ae737beaedb", "message": "Attempting to fix regexes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d530de9ee26cb876835024cb6553905cf564d9f6", "message": "Merge branch 'master' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/204cc388f39e92c20a95c808f1fa3533a6d5676a", "message": "Merge pull request #182 from Anthony-Gaudino/issue_181_shorter_territory_localization_code\n\nAdds method \"as_territory\" and document territory methods"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/072fc0ae6613ba71384d7fdca1538b361ed32198", "message": "Stuff"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d26b2f4f0fb1d37a0776531e0a60fc4b8d9a3d72", "message": "Memoizing a bit to squeeze out a bit more performance"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b7277a61b0f410e67f69a73a6f71d20c15e5df9a", "message": "[WIP] hyphenation"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d28e43235bfae89126d00dd40d43d31828d4068a", "message": "Moving Trie class from Collation:: to Utils::"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7efde39137b1a7469b2d9a250f46ebdff77ea0b6", "message": "Merge branch 'master' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/bd36e26e4cd323dfdef348e3c88cd30fff95edf3", "message": "Merge pull request #180 from twitter/casing\n\nCasing support"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d2fbf92c5aba8fe7b2199634abbc5c3db02a91cc", "message": "Merge branch 'master' into casing"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1670313fd1b85a67f3b17b9a803ff22033fae6de", "message": "Merge pull request #179 from twitter/segmentation_refactor\n\nSegmentation Refactor"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/42b9cfaa234b92f896071dae1b44baff0ca873b0", "message": "Adding ~120 more test cases"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/59ac74a65a4bfcf19a5cf52939e1d94460168e61", "message": "All tests passing!!"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/ef1241606702606190f36c985283d9e9dcf8793f", "message": "Merge branch 'casing' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/70226b6b4d8becb4366f6a56eccfb06b4660a975", "message": "Revert changes to segments_root.yml (should not be part of this diff)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/eaa94b6f3157612b17f3a30908c2ce6efd5be119", "message": "Attempting to test inverse rule sets"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/679f86d981b0d80caee95682f83a468ad42189e9", "message": "Point ruby-cldr to github master in Gemfile"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/6c858ee20528db2c64383af031d6eb0e8adb9015", "message": "Regenerate segments root so the diff isn't so large"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c3c65e82f949590f019fe0b53d3a5fd129c68e6d", "message": "Moar transliteration work"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/486b2d74b51d9193ebdc2aa920bf5a904859b845", "message": "Merge branch 'segmentation_refactor' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9ea7d2d5f1305ff718675995618cd5f9b0656514", "message": "Merge branch 'segmentation_refactor' into casing"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4e89f37ed4839acd7ab677351ece1e871efd52db", "message": "Use each_cons in break iterator to fix issue with blank initial range"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/866d61894a57283246ccf3c4548eb6a4395345fc", "message": "Add downcase, upcase, and titlecase methods to LocalizedString"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8d4f0d0be64aa54908eef25a1a2b3bce5694b8f8", "message": "Apply unicode casing logic to transforms"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7e52353a207432ca6ae04bffd53355d5198a5934", "message": "Merging 'casing' branch"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/bcbb3ade164468a6854a59e34df7cb12330b0cbf", "message": "Adding specs for caser"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5eb6362b76766e8c4a6accc457be5c24f765efcb", "message": "Merge branch 'segmentation_refactor' into casing"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a898dbe59037d3e559ae2ba52ecc977b2a32d4dd", "message": "Add implicit start of text boundary"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e2ea2a076d070f25fe2845d4eb06a522038bfa50", "message": "Adding titlecasing"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b8c7ba20d2475002260364c2e48b209ea134cf2f", "message": "Merge branch 'segmentation_refactor' into casing"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c777c61b94217ffb16a7853741b63dc28997129d", "message": "Merge branch 'master' into casing"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/00cb3f34fc9bc76c9726dc10fcda763478dbf9ca", "message": "Merge branch 'master' into segmentation_refactor"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2624a2a93d3e9e9a48fc932407b0ca830bff7c25", "message": "Handle nil regex modifier"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/29014c02eb9ce592b95e64c54924038f08b06a85", "message": "Cleaning things up, adding conformance tests from unicode"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/3083d3fc46dcfd4133965b5c334b772bcb024fcf", "message": "Merge branch 'master' into segmentation_refactor"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/724523e41bab42f84f4751dad23ff541716e4de3", "message": "Fix unicode regex modifiers"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a8220f4e8381aba5a50ad031d6841da769d8a501", "message": "WIP"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b98775d9a569bad396190c2f548bc180c0c9f02e", "message": "Modify loader to throw a more specific exception.\n\nInstead of ArgumentError, now throws a ResourceLoadError."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d4b83ed500dd80843b6d4373cefd9db105fd069c", "message": "Refactoring Shared::CodePoint"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a495cf74bf2eed5fd11ad2c364bf91f0d2f8cc6b", "message": "Add ability to turn unicode regexes into strings."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/be33153aa5eae62e00910d9326bb5119c28af871", "message": "Skeleton caser"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e93b5ef161143a1f8497d5dda1961717e998fbfa", "message": "Updating to unicode 6.3.0"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e3e2f14cfda2d1f851fb5dd2b9c7b286a6c163ef", "message": "Merging latest master"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5502048cc578445b4a6ffbb197fe6d12e3b37e69", "message": "Merge branch 'properties'"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4297f8603f0472b588c4d03abe0225b3ff131917", "message": "Merge remote-tracking branch 'origin/property_tries'"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a7281cb646140b42b1db14491da15965daf8ccfb", "message": "Merge branch 'property_importers'"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5f52e7b662f5dc86e7168916afe533c8c00eaecd", "message": "Merge branch 'range_set_improvements'"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/6c41c1d7a12709f146cac661be50d12b67d57ffd", "message": "Merge branch 'file_system_trie'"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9c2ae05edc5f64e4c5284b14bd7e761289c8a5de", "message": "Merge pull request #177 from twitter/properties_cleanup\n\nProperties cleanup"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d05654781f4484add6ecae1a733939d2579e3931", "message": "Merge pull request #176 from twitter/properties\n\nAdd systematic access to unicode properties"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c0a08a350d976ff0b2d7dd0c4565c8e229abb275", "message": "Fixing a few things suggested by @KL-7"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/3031cbbe19ee1c27805ee28ccad71aa399c36ab2", "message": "Merge pull request #175 from twitter/property_tries\n\nAdd properties tries"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/204048490d43b39cdb7fd0e97af81d2d22a55d90", "message": "Merge pull request #173 from twitter/property_importers\n\nImport Unicode properties"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/66bcff799ff58d460a2d20c386dcc02055e98ac6", "message": "Merge pull request #172 from twitter/range_set_improvements\n\nMinor improvements to RangeSet"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/48e7d95729b2548013dbcc0818151f271e2995c9", "message": "Merge branch 'property_importers' into properties"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2f44f26599dd4f1a21a0b806a29d26f8ab4a4db6", "message": "Remove scary escaping"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/002f834e7b0c3aba92887fd612adaed089e156f9", "message": "Nix the include, just use the module directly"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a24ae92d60a4b6c846399c976c1d61e33e4fd394", "message": "Merge branch 'property_importers' into properties"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/09f5318b1719963ac6cdbde59f15af95e9b2e75d", "message": "Adding TwitterCldr::Versions module for CLDR and ICU versions"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9fc162b0e449dc45076252300e85584fe51c009f", "message": "Making a few changes suggested by @KL-7"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/ca8ae1cfacaf25de32bd36d81244d98dda973423", "message": "Making changes suggested by @KL-7"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/93b413e93b4ebcb308161f8394ea22f47b58e1ad", "message": "Merge pull request #169 from twitter/update_blocks\n\nUpdate blocks to the version of unicode we're using (6.1.0)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/ee3958429e8469588a27c2c8a4fbf17d8d82ce13", "message": "Add basic casing transform"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f5ff59bf2974eb77f50756ad69e281075d0d5f4d", "message": "Refactoring transform parser"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7d2887737587bc06a5417e381856237f78ebbcb2", "message": "Bug fixes + Latin transform tests"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a8d89ca66b7c0e3b05d62f64d1ea8f91bc8d32e6", "message": "Fix issue with named transforms\n\nTransform rules can contain a ::Null named transform that\u2019s designed to\nreset the cursor."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c1d4000682524c26530104eac22c16d610a9a3dc", "message": "First attempt at transform specs"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8f8cadbfaef9ac2c003b514782287c3a33aadffe", "message": "Generate transform test data using ICU (JRuby required)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4e0a96716a52a93099a1a388179f3aa3e2a0d14c", "message": "Unicode regexes now correctly handle dashes in character classes\n\nMost programming languages allow the first character of character\nclasses to be a literal dash. Usually, dashes are used to denote\ncharacter ranges, but when they come at the beginning they are used\nliterally."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/cb04bb255ecaacc740270191f45670ef0dd60f81", "message": "Merging transformer and rule group; introducing TransformId to parse and join transform ids"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a9e080e3626b54e44cc6a32ed2470ee3bd9fa112", "message": "Lots of fixes for supporting Hangul, Armenian, and Bengali"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9a48359827ea3ccaf15c1ab1e66c7e3721f59b24", "message": "Lots of fixes for inverting rule sets"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/6926daafba454d93e7e621c7a504c8d9a043d8c3", "message": "Adding additional properties to tests"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9c4ffe566d9ca4fc6d7e72a4d0f7a7e332fc1eb7", "message": "Merge branch 'properties' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/020ec4ae8311aa349c135ce5600c098d9edfb36f", "message": "Merge branch 'properties' into properties_cleanup"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/063e9c159ee3d01e9bce7d2d7f93c75edfbd66d4", "message": "Fix tests for this branch"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b261b6fc774e228bbc4488aaf0019c69b357ba9d", "message": "Return property values as sets instead of arrays"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5ef175c4709dd5f709a00251c4b8ad9b3a2957b3", "message": "Add arabic example to tester"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/81e5f7848e2f6c7fbac2de89feecd8e2599cd1c3", "message": "Examine property name/value combinations in a different order to acheck nil values last"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/67f783c20411ad6cec4bf3cb64e4971960e7caf9", "message": "Raise error if property name/value can't be found"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/99c79ad8188ab3ab514b97f28f39c7cb80fc9e16", "message": "Refactor character set parser (break up into separate methods)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/850786c30de99f491bd68c8b7d89f0780ae797d4", "message": "Merge branch 'properties' into properties_cleanup"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/884446eb7df15cca82473292969f1fb2b9082418", "message": "Fix ruby 1.9 support"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/bed3101546414478b48588782d4f45ed9bd98f6a", "message": "Fix ruby 1.9 support"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/215209d73ce037530ca042d19f3713c25ea19875", "message": "Fix ruby 1.9 support"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9dc38476ed26346e5387953dc9788eb330c03a4d", "message": "Removing some unnecessary debugging stuff"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e3f4ddc48b73531cf1f0eefd33eb0fba200de635", "message": "Merge branch 'properties' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/97734268406e4d547143ea604005dba63be83f11", "message": "Merge branch 'properties' into properties_cleanup"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5380efb4826e40c984e131a787068e2daf90303f", "message": "Address case in property normalizer where an invalid property value would cause a NoMethodError"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/168a7fa48aa00f7c6ac21c88f821737198221529", "message": "Revert changes to spacedhan transform yml file"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f15fbc86ae26d161ddc5b4222c67a991cee25533", "message": "Merge branch 'properties' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/65bdc969aa845284f94d2838c889338e70a499f2", "message": "Merge branch 'properties' into properties_cleanup"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/cc8d101fd4708cf4ab805f0a291152454aceee7b", "message": "Modify property normalizer to fix casing"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b42bc38cc53199c6d08b3c6d07018c34fbd3922c", "message": "Chinese (Han) works!!!"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b1c8f016246b21f7886e3fc098ee38a9679efc72", "message": "Merge branch 'properties_cleanup' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1c0215d7daea0bc445c372aa40f9e147d84169cf", "message": "Merge branch 'properties' into properties_cleanup"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c68d284a9c0ea62d548c797e8bdee94a17534f8e", "message": "Handle legacy character ranges in UCD"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9b6886f3d7394bf881c00f05c91df38cc824f906", "message": "WIP"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f6e45dcf549cce2415662e0cade3528dd1ce5f04", "message": "Merge remote-tracking branch 'origin/properties_cleanup' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8fdbfd0a0e4da48be556a5b61f9d9e95877ed88d", "message": "Removing tons of crufty, unused files after properties refactor"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d5e78646c05ca20d851245ca900b08309da3808a", "message": "Refactor unicode properties"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/99aa86dca89cabb8ca8e21d0e1c0be437f2c3d19", "message": "Add old properties files back in for now"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/56a29aa5f813a012cff69e180825baf91bbefb80", "message": "Add properties tries"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/5f110735e100d625b07ee2115622c9c4c6efd400", "message": "Import unicode properties"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/572a6ecb3f33cc485cc90ca0145567423f79e41e", "message": "Minor improvements to RangeSet"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/420c99d565db524f4213bb3d1e70037b00eb23e4", "message": "Adding the FileSystemTrie class, a trie that stores nodes on the file system"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4203672ee47f02b14f8a2ca4863ac6220dfbad18", "message": "Update blocks to the version of unicode we're using (6.1.0)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/09c4be2daba4ddfdae89fa060ff1349e8c072517", "message": "Merge pull request #164 from twitter/likely_subtags\n\nAdding support for likely subtags"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d17cb86d140920c7a68a7e532db1b2f5276e48a2", "message": "No need to handle array language aliases"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/96333a0ae99d0275fd6a86d8ef4259666b435a3c", "message": "Making changes suggested by @KL_7"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/ec418320a4db6a54f522d6b24abe0ec998c81243", "message": "Merge pull request #167 from twitter/i18napis_postal_codes\n\nPull postcodes from API"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e8ae54b3dce2547e81d38f70a8193a629c8fa7fb", "message": "Use next unless instead of if + indentation."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/0071cc110aa86308b6a2b81c27236916236ec320", "message": "Simplify file write"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/cc04b2b7c20584660a283f5565f92db387a992d1", "message": "Simplify if statement"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/70abfcfe8dd07466cd5324f2b6cd6db8130cefdb", "message": "Fix copyright date in README"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/dc09abd04233af2fbc13c4ab144b060f9ba8351f", "message": "Pull postcodes from http://i18napis.appspot.com since they've been deprecated in CLDR v27"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/30555d412cc787444ddb7d4a2a65d4e0e92d5efc", "message": "Merge branch 'master' into likely_subtags"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4054e3ee23c42716d14c38231c7b39169a3afad4", "message": "A few more fixes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/eaa85d24ece95efc453c7b295b444b7347cdb963", "message": "Merge branch 'master' into likely_subtags"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2c0274f24a06eb7455ee8b7b6836306c25769c43", "message": "Updating implementation files to handle data format changes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f1a5498f33ae7009d83b58b68323ef39c7c76b11", "message": "Update list, number, and calendar data"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1eb9259a1b54636aa9d010a5b1a97673bf9610e6", "message": "Adding specs for LocalizedSymbol#as_locale"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/3cc033e96c260a6a5d0cf9c3886bb5487648c773", "message": "Merge branch 'master' into likely_subtags"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/31199f5e052561096ca2fd9969d523b7662c618e", "message": "Merge pull request #163 from twitter/script_detector\n\nScript detector"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8928bcaa5e93a2302cc91f770e300226d5dba6de", "message": "Add specs for RangeHash#<<"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a895c03d839cd7719b1e4f757d58da9cc0c6fa35", "message": "Simplifying ScriptDetectionResult#best_guess"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/63bf4b754a7ef47d038a9bbad04294c7b8cf4da0", "message": "Use private instead of protected"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b91321de547c6e52bfeed28220dd7ca0b96b8c53", "message": "Refactor overlap cases in RangeSet"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d730dc7c22dce80f4840180529c007320352267a", "message": "Replace hash default block with hash default value"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b0b7fd39695ef796809b7bf7846895abdac263a7", "message": "Alphabetizing list of autoloads in Utils module"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/6998659353bb49196e1971b037090099be6e37b5", "message": "Fix unicode scripts importer"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/fbf3291271bd8fdad66d85c973efd4ed17965d08", "message": "Merge branch 'likely_subtags' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4d3a82458224dccfcecfa7b8efc5f22128486f6d", "message": "Merge branch 'script_detector' into likely_subtags"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e95af1d5af34b767c61e402b235b5f99bbf52391", "message": "Fix unicode regex to handle property values with spaces"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7644d5d513098fcf370d6187ec8053b584d45449", "message": "Adding scripts as a unicode property to make it available to regexes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c64b5da5ee95e26f88dd44a0100b0b5ca105aa4c", "message": "Merging script_detector branch"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/ac89c93bc08766e3d6b905189cefd4af931aefa5", "message": "Rename Locale#with_likely_subtags to #maximize, add Locale#full_script\n\nRenamed to #maximize to be more consistent with Unicode documentation."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/6bb0aacf91f4b7537ca97c3a4f26d874d019997e", "message": "Add PropertyAliases class"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1919a6a090005a7c531f70032da0c94a36db10fd", "message": "Import property value aliases"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9185a80d49cf358415592390c9ec14151efc8110", "message": "Use ruby-cldr master"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/34ad1ebcc674a6cd489f14cfb9943ae9a423b938", "message": "Merging latest master"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2508258b1a601b12a933064b20607651114622f8", "message": "Removed the wrong spec, like an idiot"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/8b2fc865747ee2a7fba52fa04c25834e1d3825db", "message": "Turns out we don't actually need RangeHash"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a2f0fe72cd22d5369f0b21785ee4f08b913ac3e1", "message": "Adding RangeHash"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/4a97fbc4193e00a36e736903a905a760f255ef36", "message": "Adding LocalizedString#script and tests"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7267cd52c8944c025d0a0a417786eb57c611bb0c", "message": "Removing unnecessary dependency"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/46a606a7832d7c06bfb0af3bb5b6ec86d8eb01c7", "message": "Removing RangeSet#<< (not necessary anymore)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/496eab6e0b00fed9297def142674b8fded036ca9", "message": "Removing tester script from git"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/81f0ae896c7c1f478c7684dfb7d1e89edba783ab", "message": "Removing character data (turns out not to be necessary)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/d5d19d9c8bd1acfe0f71c2e0a97e62d435200dd0", "message": "Detector finished and working, plus tests"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/64baa7b818c556b4d256d285fbdd52b21364377a", "message": "Import scripts from unicode data"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b037cc9e6cec2d27d4fc2090f5dcf04135204770", "message": "Adding exemplar characters"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/1a9e41df8970dd4ed6255c6e362803ae7ab4e078", "message": "Working on data import"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/53d777b4adbcc747bcbdcafd70164892cbf02f8e", "message": "Merge pull request #161 from twitter/new_hash_syntax\n\nConvert to 1.9 hash syntax"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/a1abe11f5e55c385a979d08eb94cc67eb6c5d81b", "message": "Reverting another hash to old syntax (for aesthetics)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e7fc27bdb66ee289f9ea3c5916fc49f5b7b8b00a", "message": "Revert to old hash syntax in twitter_cldr.rb"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b6bddf0c36741629046d5e10480b75b88dd3d1ed", "message": "Converting to 1.9 hash syntax"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/e076ed1e647cfdb5cd5c3db1869316b78a7c5647", "message": "Add the Transformer class\n\nSearches for available transformations between locales."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f38dded3349383c74b6925515a565998df16035e", "message": "Give rule groups directionality"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7664854581c2ba220571dccac177a23f17a46831", "message": "Don't use RegexFilter rule to create ranges; filter character by character"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7b73a9afeb758805108e7d39e58d0e6ff97c1d0f", "message": "Expose Loader#resource_exists?"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/ff79cf95added265c502eb07936f3192754ade4e", "message": "Moving transform code into logical groups, providing support for inverting transformations"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b82c333bdc4034d86c1e23589da7c6445e8a1b0c", "message": "Merge pull request #160 from twitter/postal_code_refactor\n\nRefactor PostalCodes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/94d351b8133364d29a8ffe5131de6ca8211694a5", "message": "Refactor PostalCodes\n\n1) Avoid caching generators at the class level.\n2) Add has_generator? method that checks if a generator AST was provided in the CLDR data.\n3) Raise an error if #sample is called and no generator AST is available."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/225174cc6418db3d7fc8a80a1d8260a70202bf77", "message": "Merge branch 'master' into transliterate"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/225fcf40c1ac5976b00f14a1928f2963f482e9ea", "message": "Move region currencies to a separate branch"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/54c9e15407d495b1b3109b4fec600b8deeb6e215", "message": "Update data\n\nruby-cldr now dumps data more consistently, which required a few\nchanges."}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/312c40436b45b53c982608421f5d5d7127e28431", "message": "Adding LikelySubtags and Locale classes (still WIP while I figure out this YAML dumping nonsense)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/76b08240ed09ed3d8534181dab170e7cce9225c9", "message": "Merging upstream changes"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/97ec1222ede91079e242a8dbb80747dfc144d631", "message": "Removing binding.pry statement"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/dd62638538f401095781d6105cf7bd1a989beb92", "message": "Add 'short' as a valid weekday names form in Shared::Calendar"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/0c03bbcfdfdb00cf0f73dfd52d1b7ac05d473890", "message": "Fixing tests for unicode regexes (codepoint representation is different now)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/65a5d23251040c3acfb2fc6d86fae3f8ede10e67", "message": "Again moar WIP"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/ebe2245dd36255c57ff04b602eaa0cecc1cf398b", "message": "Moar WIP"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/168", "title": "[WIP] Update collation", "body": "This PR is meant to address updating our current collation implementation to CLDR v26 and ICU 54.1.1. At the moment, there are several hurdles that need to be overcome:\n1. As @KL-7 mentioned in [this issue](https://github.com/twitter/twitter-cldr-rb/issues/95), as of CLDR v24, the data format for collation rules has changed. Instead of a series of XML tags, the rules are now composed of a sequence of significant characters, one rule per line. I've already addressed this in the PR, i.e. the tailoring importer now parses and correctly interprets these lines.\n2. As of CLDR v22, collation test data is no longer published. Our collation implementation relies on these test data for validation, so we'll have to find some alternative way of doing this. I've tried to address the issue by using ICU to re-sort the test data in v21 before using it to validate our implementation, but I got quite a few test failures. Speaking of which...\n3. It looks like @KL-7 marked a bunch of tailoring tests as \"pending\" in the test files, which is done by prefixing the test case with two forward slashes, eg. \"//\". I couldn't figure out how he determined which tests to mark as pending, as there wasn't any corresponding importer. I've written an importer that grabs the (old) test data from CLDR v21 and re-sorts it using ICU. I would really appreciate some help figuring out which of these new tests to mark as pending. It's surprising to me that _any_ tests fail, since my test importer uses ICU to _re-sort_ all the test cases. Isn't our collator doing the same thing as ICU?\n\nWith this branch checked out, if you run `bundle exec rake clean_vendored update:tailoring_data update:collation_tries update:tailoring_tests` and then run `FULL_SPEC=true bundle exec rspec spec/collation/tailoring_spec.rb` quite a few locales report a bunch of failures. The most alarming of these is Japanese, which has 1007 failures out of 3339 active. I know that we haven't yet addressed things like stroke order in our collation implementation, so maybe that's the reason. Other locales like Spanish have 1 failure out of 402, which I don't understand either.\n\nAnyway, I would really appreciate some help on this.\n", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051", "body": "The command to run tests should be `bundle exec rake` not `build exec rake`. Which one are you running? This doesn't happen on my development machine. What version of Ruby are you using and on what OS? If the problem is indeed a bad encoding issue, adding `$KCODE = \"UTF-8\"` to twitter_cldr should do the trick.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4838051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073", "body": "Published!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4845073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348", "body": "Actually, I think $KCODE is supported in 1.8 and 1.9 - at least, it's working for us using Ruby 1.8.7 on Lion (and CentOS).  The magic encoding comment is great, thanks for bringing it to my attention.  The problem with it is it's not supported in Ruby 1.8 (afaik), and we'd like to make TwitterCLDR backwards compatible with both of those versions of Ruby.  I think the fix for this is to simply add `$KCODE = \"utf-8` at the top of twitter_cldr.rb as I mentioned before.  I'll give it a try on 1.9 and get back to you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573", "body": "Looks like this is a Ruby 1.8 vs 1.9 issue.  I verified that the gem is unusable on 1.9, but works under 1.8.  It's annoying, but  it looks like you really do have to declare the encoding at the top of each file.  My question is this: it looks like you've added Emacs-style magic comments - any reason why you didn't use the regular `# coding: utf-8` instead?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244", "body": "The example stuff looks ok but I'm not sure I understand the purpose for it - can you elaborate?  The US-ASCII issue looks good too, but I think we're going to need to add the `$KCODE` thing for Ruby 1.8 users and integrate your magic comments for Ruby 1.9 users.  We'll also have to add some logic that only sets `$KCODE` if you're using 1.8, otherwise you get an annoying warning.\n\nWould you mind submitting two separate pull requests for these fixes?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4885244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362", "body": "It's acceptable for all tree nodes to be hashes because the CLDR data is all in hashes.\n\nHave you tested that return statement?  I was doing a little playing around to verify your changes, and I don't think you're allowed to `return` inside a block like this.  I get a LocalJumpError.\n\nIt's cool that you want to avoid on error catching to handle the case where the given path doesn't exist, and you're right to question why `NameError` is the only rescued exception.  It would probably be better to make sure the next segment of the path exists before forging ahead, and that `final` isn't `nil`.  That way, we can remove our reliance on error catching.  I think we are going to still want to return nil to the caller if the path can't be found.  I think there are a few tests that rely on that.\n\nWould you mind investigating the `return` issue?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4886362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413", "body": "Yes!  Ok, I understand.  I definitely just learned something new about Ruby, thanks for that.  I hadn't realized `return` returns from the enclosing method.  Your solution is better, I'll merge it right away.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456", "body": "Cool, nice catch.  That's what I get for only testing in my timezone :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600", "body": "The languages that have \"unfinished\" number sections don't specify number formats as the others do.  For example, in resources/hu/numbers.yml, the key `hu.numbers.formats.percent.patterns.default` contains just an empty hash instead of an actual pattern whereas German has `\"#,##0\u00a0%\"`  Tests for this sound awesome, good idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4887600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172", "body": "I'll talk to our open-source lead about adding ci support.  Great idea!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505", "body": "Ok, twitter-cldr-rb has been hooked up to travis thanks to @KL-7 's suggestions!  I won't merge this pull request because I changed the URL for the travis build status icon, but otherwise all credit goes to @KL-7.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109", "body": "A few questions for ya:\n1.  How much memory does this take up when the whole file has been loaded in?\n2.  Is your goal to use this data for normalization some time in the future (what you have now is not full normalization).\n3.  We should really cache the result of `unicode_data` in memory instead of rebuilding the hash from disk every time someone calls it.  I would suggest using a class variable (something like `@@unicode_data`) and only loading the data from disk if that variable is nil or undefined.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157", "body": "Should we leave this ticket open until you've written the tests, or can we close it?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705", "body": "Ok, just spent a good 15 minutes talking about this with a co-worker, trying to do the most efficient thing.  Here's what we think:\n\n~90ms load time and 25mb of memory isn't great, but what else can you do?  The best way to answer that is to define the most common use case.  Normalization is usually done in concert with sorting (i.e. alphabetization) and usually done on a list of phrases in a single language.  For each batch of phrases therefore, we're likely to only need fast access to a small subset of the Unicode data at a time.\n\nKnowing this, it makes more sense to break up the data into individual files by character set.  When normalizing a set of phrases, we can load into memory the files containing only the ranges we need, and cache them for future lookups.  We figured the extra round-trips to disk would be acceptable, and wouldn't be loading in a huge file all at once.\n\nWhat do you think @timothyandrew?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798", "body": "@timothyandrew that's how I would have done it.  It must be the yml uses more memory for some reason... kinda weird.  In any case, the memory usage is a bit high considering we don't need access to the entire spectrum of codepoints all at once.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5003010", "body": "Agreed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5003010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5011128", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5011128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5011195", "body": "@timothyandrew Actually I'm not sure how to initiate a pull request to a branch other than master (not completely familiar with github).  However it seems like that may not be necessary.  After all, your fork is an entirely separate repository, meaning we shouldn't necessarily have the same branches.  As long as your branch is thoroughly tested and has the latest master (from the original fork, i.e. twitter/twitter-cldr-rb), and tests are passing, it'll be fine to merge in.\n\n@timothyandrew Yes, that's the correct way to split up the Unicode data.  Looks like @imkmf has done it (see his link).\n\n@imkmf Really nice work splitting up the files.  I don't think we need UnicodeData.txt anymore, and the ymls look good.  In terms of where the files should live, what would you think about putting them in something like `/resources/unicode_data` instead of `/resources/normalizers`?  We will probably want to support programmatic access to the code points as well as do other things with them besides normalization, so it makes sense to put them in their own directory.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5011195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5036729", "body": "Hey @KL-7, thanks for taking this on!\n\nMy initial concept for this feature was to override the % operator for string interpolation so you could do something like this:\n\n``` ruby\nreplacements = { :horse_count => 3,\n                 :horses => { :one => \"is 1 horse\",\n                              :other => \"are %{horse_count} horses\" } }\n\n\"there %{horse_count:horses} in the barn\" % replacements\n```\n\nHere's an alternate way to do it:\n\n``` ruby\nreplacements = { :horse_count => 3,\n                 :horses => { :one => \"1 horse\",\n                              :other => \"%{horse_count} horses\" },\n                 :to_be  => { :one => \"is\",\n                              :other => \"are\" } }\n\n\"there %{horse_count:to_be} %{horse_count:horses} in the barn\" % replacements\n```\n\nJust like we're already doing with most of TwitterCLDR's functionality, we should support this native, Ruby-ish way as well as provide a formatter like you've already described that the % function delegates to:\n\n``` ruby\nf = TwitterCldr::Formatters::Plurals::PluralFormatter.new(\"there %{horse_count:horses} in the barn\", :es)\nf.to_s(replacements)  # or f.format(replacements)\n```\n1.  I don't think we'll need to make use of the existing tokenizers if we use normal Ruby interpolation syntax everywhere, i.e. `\"string %{inside} another\" % { :inside => \"blah\" }`\n2.  When you say \"when the pattern isn't found\", do you mean when a necessary plural form hasn't been given?  In other words, are you asking if TwitterCLDR should throw an error if :other is missing from the hash in the example above and :horse_count is greater than 1?\n3.  If `to_s` or `format` accepts a full string and a hash of parameters that contain both the counts and the plural definitions (as I have shown above), there shouldn't be any need to create separate formatters for each word.  Also, I like your idea of providing a basic list of plurals for each language, but I'm not sure where we're going to get that data - perhaps from the CLDR's abbreviation lists?\n\nOne last suggestion:  What would you think about also accepting a `Proc` for each plural definition?  That would allow for even greater flexibility:\n\n``` ruby\nreplacements = { :horse_count => 3,\n                 :horses => { :one => \"is 1 horse\",\n                              :other => lambda { |context| context[:horse_count] <= 3 ? \"are many beautiful horses\" : \"are many horses\" } } }\n\n\"there %{horse_count:horses} in the barn\" % replacements\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5036729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5037065", "body": "Hey guys, nice work, this is very promising!  @timothyandrew I'd add a few more tests around the data you're expecting - perhaps just test a few code points and make sure they return what you expect.  Also, I'd really like to see caching before merging this in.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5037065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5082213", "body": "@KL-7 yes, that looks great.  As a side note that may be helpful, the additional `%` functionality for strings is provided by the gettext gem: https://github.com/mutoh/gettext/blob/master/lib/gettext/core_ext/string.rb and isn't a Ruby thing as I assumed it was before.  I think it will be important to preserve the existing gettext functionality while extending it with our special plural syntax, since that's what we use at Twitter and is widely used in the Ruby community as well.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5082213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5083085", "body": "@timothyandrew Hmm, I don't think we'll need to do cache expiration just yet... maybe in the future if memory usage climbs too high.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5083085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5093731", "body": "@timothyandrew Almost!  Just a few really easy changes:\n1.  Let's cache the `blocks.yml` file too.  Just change the operator from `=` to `||=` on the first line of the `UnicodeData` class (and add a test like you have done for the code points).\n2.  Remove the unnecessary \"be\"s from unicode_data_spec.rb, eg, `UnicodeData.for_code_point(code_point).should be == data`\n\nSorry for not catching these before - you're almost there!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5093731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096460", "body": "Oh man, bitten once again by the differences between 1.8 and 1.9!  Fortunately we can get around the issue.  At the moment, the magic method `localize` that you can call on a `Date`, `Symbol`, `String`, and `Time`, returns an instance of a subclass of `LocalizedObject`.  So in the case of `String`, it returns an instance of `LocalizedString`, which means we have total control over formatting - we can create whatever methods we want, including a custom `%` that can delegate to  `base_obj`'s `%` method when necessary.\n\nAs a side note, it would be great if, for these localized objects, we could inherit from the original object so callers can perform all the same operations they can on the original object.  That's a bit difficult because Ruby doesn't support multiple inheritance, but we should be able to accomplish the same thing by turning `LocalizedObject` into a mixin and including it in each localized subclass.  Let me know what you think.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099341", "body": "@KL-7 Must have missed that - I didn't realize it would load `blocks.yml` when the file is required.  Much better to do it your way.  Also, autoloading would be a great feature to add.  The gem is getting big enough that it makes sense to do so.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099464", "body": "You know @timothyandrew, I just realized something really dumb.  The `TwitterCldr::Shared::Resources` class already does caching for each file, so you don't need to do it here.  Sorry to keep messing around with your mind like this!  I totally forgot it's pretty much already implemented.  Fortunately the code changes should be pretty straightforward.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099683", "body": "@KL-7 I'm not sure what you mean about the `dont_allow` issue - can you elaborate?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5100262", "body": "I'd like to try to avoid monkey patching `%` in `string` if at all possible.  I'm thinking specifically of some trouble I ran into a few months ago working inside the twitter.com codebase (internally called \"the Monorail\").  The `%` function was monkey patched in no less than four different places, once by gettext, then again by an i18n initializer and finally by two other 3rd-party gems.  I don't think anybody had ever realized what was happening because most of the time the patches did roughly the same thing.  I however was trying to modify how `%` behaved in a rather drastic way, and it was impossible to know which library to change or if my changes would play nicely with the other libraries.  To make matters worse, there was no way to determine in which order the libraries would be required, meaning I would patch one instance of `%` to do what I wanted, and it would get replaced by another library.  I would then try applying my changes to the other library, only to discover that the previous one was now being loaded last.  It was a nightmare.  Granted, it's probably fairly common in a large project to encounter dependency clashes like this, but it taught me how popular the `%` function is - everybody wants to monkey patch the crap out of it.\n\n`LocalizedString` comes into play when users call the `localize` method on a string.  This way, we only change the behavior of the classes we have control over:\n\n``` ruby\n\"There %{horse_count:horses} in the barn\".localize % { :horse_count => 3 ... }\n```\n\nThis still doesn't explain how we ourselves are going to do `%{}` replacements however.  I think we can simply add a utility function that will do standard interpolation as it's done in 1.9 and gettext, and perhaps even copy the gettext code over into twitter_cldr.  In order to get regular 1.8 (and 1.9) number formatting as well, (eg. `%2.f`) we can use the existing `%` function which will have remained intact.\n\nTo recap, here's my opinion:\n1.  Add a utility function to TwitterCldr called `interpolate` that handles the most basic string substitution case, eg. `\"my %{variable}\" % { :variable => \"hello\" }`.  We may be able to copy this from gettext or even do something as na\u00efve as `gsub`.\n2.  Add the `%` function to `LocalizedString` that delegates to `TwitterCldr::Shared::Plurals::PluralFormatter`.\n3.  Write `TwitterCldr::Shared::Plurals::PluralFormatter` to figure out the right plural rule and use `TwitterCldr.interpolate` for the actual replacements.\n4.  Call `%` on the final string with a modified hash of interpolation options to handle the extra functionality that `String#%` provides (i.e. numbers).\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5100262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5100318", "body": "@KL-7 Ahhh I understand.  Yeah, that sounds like it might be easier to read than `.times(0)`, but either one should be fine.  I'll let @timothyandrew decide.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5100318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5103980", "body": "@KL-7, your points are well taken, here are a few additional things to think about:\n1.  I think we should use `LocalizedString` because it's consistent with the model we already have in place.  You say `DateTime.now.localize.to_s`, not `DateTime.now.format_datetime(blah)`.  In addition, it would be difficult to change or remove a function like `pluralize` out from under our users.  The `localize` function is already embedded in the functionality of the gem, so it's likely that will always exist.  The additional memory required to create instances of `LocalizedString` should be minimal - in this case, consistency should win.\n2.  I initially wanted to support all three types of interpolation (plurals, normal, and numbers) because it's more straightforward for our users.  Instead of doing something like this:\n\n``` ruby\n\"there %{horse_count:horses} in the barn, %{user}!\".pluralize(:horse_count => count,\n                                                              :horses => \"are %{horse_count}\") % { :user => current_user }\n```\n\nyou can combine the hashes and do this instead:\n\n``` ruby\n\"there %{horse_count:horses} in the barn, %{user}!\".pluralize(:horse_count => count,\n                                                              :horses => \"are %{horse_count}\",\n                                                              :user => current_user)\n```\n\nWe aren't obligated to provide this functionality, but it's certainly nice, and wouldn't take much effort to implement.  Besides, we're going to need an interpolation function anyway - why not provide it to everyone?  I'm still on the fence with numbers, but if we support everything else, we might as well do them too.  After all, it's just a single call to `String#%`.\n1.  If we borrow gettext's `%` function, we'll need to copy over the license file as per the license's restrictions (I think it's FreeBSD).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5103980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5119316", "body": "Well crap.  I was going to merge this into a separate branch.  Ah well, master it is.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5119316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5121301", "body": "This is looking awesome!  Just a few more changes and I'll merge it in.  Looks like your most recent commits don't handle the regular interpolation case for `\"I %{verb} watermelons\" % { :verb => \"love\" }`  Also, you haven't added support for `LocalizedString`.  I know we disagreed a bit on that, but I really think we should add it.  Should I handle it or would you like to do it?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5121301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5121740", "body": "@KL-7 Ok cool, glad we agree!  I sincerely appreciate having these thoughtful discussions.  OSS licenses generally let anyone use the code, provided you include a copy of the license in your derived work.  We can include a copy of the LGPL license in our LICENSE file and specify what parts of the gem it applies to.\n\nI don't think there's any difference in calling the general interpolation function before or after `PluralFormatter#format` - you're free to decide what's best!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5121740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5161014", "body": "@KL-7 Twitter uses `||` and `&&` almost exclusively because of the precedence reasons you just stated.  The only time I've seen them used is to do something like `product.save and return`.  Personally, I like the look and feel of `and` and `or`, but it's usually better to use the bitwise ones instead.\n\n@timothyandrew any word on getting this to work with Hangul characters?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5161014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5161091", "body": "Hmm that's a tough question.  In this case, I think we should throw an error to maintain consistency with what's already in place.  Anyone who's using this type of interpolation already in their code should be expecting `KeyError` to be thrown, and may even have specific `rescue` blocks to catch it.  It would be nice to provide the same functionality.  What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5161091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5169130", "body": "Yes, you're right, there's no need to test all the functionality `LocalizedString` delegates to `PluralFormatter#format`.  There really only needs to be a single test: make sure that calling `localize` on a string returns an instance of `LocalizedString`.  It doesn't look like `LocalizedString` needs any specific tests of its own.  I've generally combined the specs for patching core Ruby objects with their corresponding localized object wrapper.  [Time](https://github.com/twitter/twitter-cldr-rb/blob/master/spec/ext/calendars/time_spec.rb) is a good example.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5169130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5214534", "body": "Hey @KL-7 just one comment on your code, but otherwise it's looking darn good.\n1.  Yes, please add a comment to interpolate.rb and interpolate_spec.rb specifying where the code came from originally. Add the additional license info into LICENSE and add a comment above saying why you included it (something like \"Parts of this gem adapted from the gettext gem, available at [url].  The source code requires that the license below accompany it whenever it is copied.\")\n2.  Looks great.  The integration tests you've added are perfect.\n3.  I didn't realize you'd have to define `KeyError`, that's an interesting conundrum.  I still think that's the right behavior however, seeing as how we are in effect porting 1.9 functionality over to 1.8.\n4.  I've found that the Ruby community very much believes in \"self-documenting\" code.  When I first heard that term, I thought it was total crap.  I mean, how can you expect someone to know what you're code is doing if you don't write good comments?  Anyone who writes Java for a living or studied computer science in college for example will tell you to comment the heck out of everything.  In Rubyland, it seems much more customary to only comment the weird things, like complicated regexes and tricky bits of recursion.  Ruby programmers also focus on writing readable, expressive tests that are supposed to serve partly as comments on how the code was designed to be used.  With that in mind, you are free to write as many comments as you like.  Try to focus on the regexes you have, especially those parts where you have like 4 `&&` calls in a row.  Otherwise, let your tests do the talking :)\n5.  Sure, I'd be in favor of reorganizing the gem a bit to follow that outline.  No reason not to, I suppose.\n\nAnd finally, to the other topic at hand.  When my coworkers and I initially talked about what pluralization implementation would be best for TwitterCLDR, we agreed that the implementation you have created was the right answer.  Just yesterday, we had another discussion that has augmented the implementation a bit.  The good news is we can keep all of your changes, and simply offer the augmentations as an additional way to write plurals.  Here's an example of this second way:\n\n``` ruby\n'there %{horse_count(\"one\": \"is one horse\", \"other\": \"are %{horse_count} horses\")} in the barn' % { :horse_count => 3 }\n```\n\nThis technique unifies the whole sentence together, meaning the translators of this phrase don't have to translate first the whole sentence, then each individual plural rule, which might be confusing.  Imagine if you were asked to translate just the string \"is one horse\" without any context at all.  It simply doesn't make sense without the whole sentence.  In other languages like Japanese, you might even want to put the plural in an entirely different place.  Finally, it's easier on the programmer who won't have to build a hash with the correct options for the current language.\n\nIn some projects, however, it might be easier for the programmer to specify a hash.  Imagine, for example, a project that isn't translated. The programmer would have no objections to supplying a hash with `:one` and `:other` rules because they will never change, and s/he can see the phrases in context in the code.\n\nLastly, notice how I've used JSON to represent the plural data.  I wanted to make it as easy as possible to parse using a standard format.  It still might be tricky, and we can definitely talk about it.  What are your thoughts?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5214534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5214690", "body": "@timothyandrew,\n1.  Ah yes, that's definitely too large.  I would suggest only selecting ten or so of the tests from each code point block and writing a nice big comment in the test file explaining what you've done.  You might consider including the URL to the full test file so that curious users can re-run the tests on the full suite if they want to.  I'd be happy to post the full test file under the Downloads section on Github too :)\n2.  The convention that's already established for TwitterCLDR is to extend native classes like `String` and have them return a localized instance, for example an instance of `LocalizedString`.  Fair warning, @KL-7 is working on plurals right now and has already added a `LocalizedString` class that we'll have to intelligently merge with when your normalization work is complete.  `LocalizedString` should have a method called `normalize` that simply delegates to `Normalizers::NFD.normalize`.  Then you can do something like this:\n\n``` ruby\n\"caf\u00e9\".localize.normalize(:NFD)\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5214690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264269", "body": "@KL-7 NOTICE looks good, thanks for adding the additional licensing text.\n1.  I completely agree with you, `horse_count` does look like a function call and for no good reason.  The JSON idea is really nice, I love the simplicity of it - easy to understand for the programmer, translator, and easy-ish for us to implement.  In terms of which delimiter to use instead of `{}` it makes sense to use something else like `[]` or `<>` as you've suggested to avoid regexp complications.  However, I would hesitate to use `<>` because it looks a little too much like ERB, and I might also avoid `[]` because we may at some point want to support JSON arrays.  What would you think about using pipe characters `||` or parentheses `()` instead?  I don't think those would clash with any of the other syntax.  Here's how it would look with pipes:\n   \n   ``` ruby\n   'there %|{ \"horse_count\": { \"one\": \"is one horse\", \"other\": \"are %{horse_count} horses\" } }| in the barn'\n   ```\n   \n   Finally, we should make this a separate pull request instead of trying to fit too much into this one.  Go ahead and put whatever polish you'd like on this PR and I'll happily merge it in.  Also, do you really need to rebase?  Might be nice to keep your commit history intact.\n2.  Hmm yes, perhaps it would be a good idea to wait until things quiet down before rearranging the directory structure.  The only way I can think to do it with the smallest number of complications would be to lock everything down and not accept any new feature/pull requests for a while.  We could then perform the rearrangement and converse individually with others about conforming to the new structure.  Another strategy would to simply ask everyone to reorganize their local copies first, then merge or rebase master.  We're lucky because we only have 2 or 3 people that would have to do this - imagine trying to rearrange files in a project like Twitter Bootstrap...\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264316", "body": "@timothyandrew Great work stress-testing and investigating the issues with the JDK, I appreciate your attention to detail :)  Two seconds, while not ideal, is perfectly fine in my book for spec performance, especially considering running them all took 30 seconds - that's a big improvement even if the tests aren't completely comprehensive.  The Translation Center's specs take over 10 minutes to run if that's any consolation ^_^\n\nIn answer to your previous question, yes, let's wait for @KL-7's changes to `LocalizedString` and then we can merge this in (he's almost done).\n\nI've read over all the code comments between you and @KL-7, but I must admit I'm starting to get lost in all the discussion threads.  Where are we with this PR?  Could you summarize a bit?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264523", "body": "@tanin47 This is quite an interesting problem.  I'm not sure if CLDR supports the Buddhist Calendar, but the ruby-cldr gem doesn't have a data exporter for it which is why TwitterCLDR doesn't have it.  At the moment, there's no way to specify that mathematical operations should be performed on years (or any other numbers) in our implementation, so it also isn't as simple as adding a Buddhist section to the yml files.  Here's my suggestion:\n1.  Modify the appropriate .yml files in `resources/` to include an entry for the Buddhist calendar.  You'll probably want to copy most of this from the Gregorian section, or use YAML inheritance.  In addition, you should come up with some kind of common way to specify mathematical operations.  For example, here's what you might do for `resources/th/calendars.yml`:\n   \n   ```\n   th: \n     calendars: \n       buddhist: \n         formats: \n           date: \n             default: :\"calendars.buddhist.formats.date.medium\"\n             full: \n               pattern: \"EEEE\u0e17\u0e35\u0e48 d MMMM G %{y + 543}\"\n             long: \n               pattern: \"d MMMM %{y + 543}\"\n             medium: \n               pattern: \"d MMM %{y + 543}\"\n             short: \n               pattern: d/M/%{yyyy + 543}\n   ```\n2.  Modify `TwitterCldr::Tokenizers::Base#tokenize_pattern` to create \"grouping\" tokens based on the use of the \"%{}\" syntax in the yml file.  You'll want to give `TwitterCldr::Tokenizers::Token` the ability to contain child tokens.  For example, in the \"full\" pattern above, the tokens would be: `['EEEE\u0e17\u0e35\u0e48', 'd', 'MMMM', 'G', ['y', '+ 543']]`\n3.  Modify `TwitterCldr::Formatters::Base` to be able to handle grouping tokens after they've been processed by `TwitterCldr::Formatters::DateTimeFormatter`.  The easiest way to compute the value would be to call `eval` on the final string.  In other words, `DateTimeFormatter` would do all the necessary replacements, then you could do something like `eval(\"2012 + 543\")`.\n\nI know this is quite a bit to read and understand, and I'd be happy to discuss it further.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264542", "body": "1.  That's fine, we can use `<>` if you like that better.  It's also fine with me if you want to rebase, but I don't have any objections to merging manually using the terminal instead of via Github.  I'll leave it up to you - if you thing rebasing will be cleaner, then that's totally cool.\n2.  Sounds good.  I'm thinking of a) plurals and b) normalization - are there any others we should wait for?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5264542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5324700", "body": "@caniszczyk is this really necessary?  It's going to add a ton of cruft to the top of every file.  Evolution not revolution.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5324700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5334143", "body": "Alright, as long as it's not too verbose that sounds cool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5334143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5370206", "body": "@tanin47 your design looks good, let me know when you've got something working!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5370206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5372662", "body": "This is looking great, nice work once again.\n\nLimitations:\n1. Totally reasonable.  Let's mention this in the readme when the plurals feature is finished.\n2. Understandable but a little disappointing.  This means users won't be able to use `#{}` syntax inside their strings (they'll have to use single quotes).  That's really not a big deal because they shouldn't be doing that inside translatable strings anyway.  Also, it's even less of a problem because they could always use some alternative quoting syntax, like `%Q`.\n\nThrowing exceptions:\n\nAll this sounds fine.  Have you verified that the inline pluralization implementation throws a `KeyError` if one of the replacements can't be found in the JSON?  That would be consistent with the original implementation.  Finally, I think we should wrap any JSON parsing errors.  They tend to be rather cryptic, so it would be nice if we could tell the user what part of the plural interpolation process is failing, and include the actual JSON parser error in the error description.  Something like: \"PluralizationError: The JSON hash you supplied is invalid.  A JSON text must contain at least two octets.\"\n\nThings to add:\n\nSounds good!  Moar specs + comments = awesome.\n\nAnd yes, bringing more than one change into the same pull request is perfect.  Thanks for your hard work on this.  It's gonna be great to release version 1.1 with plurals, unicode data, and unicode normalization.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5372662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5372691", "body": "@timothyandrew hahaaa!! We're better than Java.  Are you ready for this to be merged in?  I think you'll need to merge master into your branch first - Github is saying it can't automatically merge (conflicts no doubt).  I'd be happy to merge it by hand if you like.  Also, could you combine this PR and PR 19 so we don't have merged code depending on unmerged code?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5372691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5372693", "body": "Please merge this into PR 17 so it's all under one roof.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5372693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5389937", "body": "@tanin47, thanks for adding this feature!  Composite tokens may come in handy in the future, nice work.  I have a couple of ideas for you:\n1. Instead of changing the existing values in calendars.yml, would you mind making a separate yml node for the buddhist calendar underneath `gregorian`?  `DateTimeTokenizer` already includes support for multiple types of calendars.  In the end, adding an entry for the Buddhist calendar would allow you to do something like this:\n   \n   ``` ruby\n   DateTime.now.localize(:es, :calendar => \"buddhist\").to_s\n   ```\n2. You'll also need to provide support for an options hash in `LocalizedObject#initialize` so it can be passed to the tokenizer.\n3. I found a crashing bug in your code as well.  I tried to do this:\n   \n   ``` ruby\n   DateTime.now.localize(:th).to_s\n   ```\n   \n   That line throws a `NoMethodError`.  Solution: change line 49 in lib/tokenizers/base.rb to `if token.is_a?(Token) || token.is_a?(CompositeToken)`\n\nOk, that's it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5389937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5391994", "body": "Ok, you're all clear for PR 19.  Thanks for the clarification, btw.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5391994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5392182", "body": "Yup, I'm on it.\n\nOn Fri, Apr 27, 2012 at 3:59 PM, Chris Aniszczyk <\nreply@reply.github.com\n\n> wrote:\n> \n> build is broken now: http://travis-ci.org/#!/twitter/twitter-cldr-rb\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/twitter/twitter-cldr-rb/pull/17#issuecomment-5392134\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5392182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5422932", "body": "Oh #derp I already merged PR 17.  Ok, this looks good, pulling now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5422932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5423566", "body": "Hey @tanin47,\n1.  Cool, looks good.\n2.  Yeah, I can see you had to add `:calendar_type => @calendar_type` in a bunch of places.  Unfortunately I don't think there's any way to do it differently.  I would suggest, however, that `:calendar_type` be moved from `LocalizedObject` to `LocalizedDateTime` because the calendar type doesn't apply to every type of localized object, just dates and times.  I would add something like this to `LocalizedDateTime`:\n   \n   ``` ruby\n   attr_accessor :calendar_type\n   \n   def initialize(obj, locale, options = {})\n       super\n       @calendar_type = options[:calendar_type] || TwitterCldr::Tokenizers::DateTimeTokenizer::DEFAULT_CALENDAR_TYPE\n   end\n   ```\n3.  Thanks for fixing :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5423566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5426883", "body": "@KL-7 Ok in that case we don't need to worry about missing replacements.\n\nMy original idea behind wrapping JSON errors was rooted in my idealistic notion that the user shouldn't have to worry about our implementation.  By allowing JSON parsing errors to bubble up to the user, we're adding an extra layer of complexity that they shouldn't need to ever worry about.  However, I also think keeping the stack trace intact instead of acting as an error proxy is important - after all, complete stack traces at least give you some idea of where the problem occurred.  I'm thinking of specific cases like when the JSON gem you're using has a bug, or you're using the wrong version.\n\nShort version: let's keep things the way they are and let JSON errors bubble up.  Perhaps not ideal, but definitely the least surprising option for our users.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5426883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5427040", "body": "Nope, it's merge time!  I'll also send you the schedule for the next few months sometime today or tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5427040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5430898", "body": "@KL-7 Cool, I love the autoloading.  I've been wanting to do that for a long time, should make things a little more efficient ^_^\n\nI understand the issue with having `LocalizedObject` in core_ext, but I think that's where it belongs.  It supports all the other classes in core_ext, so it makes sense to me that that's where it should live.\n\nAs far as the module/file correspondence goes, there should only be a small number of these discrepancies.  Most of the classes should have a corresponding file in the right location.  For that reason, I think we should just write out the full paths in the necessary declarations.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5430898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5450775", "body": "1.  Well, the `method_missing` allows us to check `TwitterCldr::Tokenizers::DateTimeTokenizer::VALID_TYPES` for every call to `to_*_s` (eg. `.to_medium_s`, `to_long_s`, etc).  It's also flexible in case another type of date format is ever introduced.  I understand what you mean about knowing the (finite) list of methods that can be called in `DateTimeTokenizer`, but I don't think it would necessarily be cleaner or more efficient to add separate methods.  I'm in favor of adding `respond_to?` and the appropriate call to `super`.\n2.  Yes!  I've wanted to do this for a long time but I never knew quite how to approach it without an extra level of polymorphism.  I'm glad you brought up the idea of Delegators, I didn't know a design pattern already existed in Ruby for this.  From what I understand, this would be the definition for `LocalizedObject` with a delegator:\n   \n   ``` ruby\n   module TwitterCldr\n       class LocalizedObject < SimpleDelegator\n         attr_reader :locale, :base_obj, :formatter\n   \n         def __getobj__\n           @base_obj\n         end\n   \n         # ... existing implementation\n       end\n   end\n   ```\n3.  I think I initially wanted `options` to be passed to `setup_for` and then to the call to `fmt_class.new`, but there's no need to do that because all the additional formatting capabilities are handled in `to_s`, not when the formatter is created.  You're absolutely right that `setup_for` changes the object and could have unexpected consequences.  I'd be in favor of getting rid of it and having the `to_*` functions return new instances of `LocalizedNumber`, that's a great idea.\n4.  Absolutely, these should be throwing `NotImplementedError`.  Good catch.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5450775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5476266", "body": "Ok, looks good.  Can you merge master so I can pull this?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5476266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5476287", "body": "@KL-7 alright you've convinced me!  Using `define_method` is definitely cleaner and more readable, plus I like that it gives us actual methods.  Let's do it.  Metaprogramming FTW!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5476287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5517715", "body": "Dang, should have merged this one before the rearrangement PR.  Can you merge master in to this one?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5517715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5519680", "body": "Hehe thx for both the compliment and the rebase!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5519680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5557358", "body": "As per our discussion over Skype today, I agree with you that delegation probably isn't the right answer here.  Initially I thought it would be really cool if we could expose the base object's methods.  However, I think we should still expose certain methods like `strftime` for `LocalizedDateTime` that do standard formatting.  We can convert tokens like `%H` into their CLDR equivalents, run the string through the `DateTimeTokenizer`, and format the result for the user.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5557358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5701559", "body": "@KL-7 the refactor looks good.  Moving the files in `core_ext/string` is fine with me, and it makes sense to have `LocalizedString#to_s` return a copy of the underlying string too.\n\nI also like your idea of having Travis run our test suite over the entire `NormalizationTest.txt` file.  My only concern is that doing so will add an \"external\" dependency and a bit more complexity.  Let's try it and see if it causes any problems.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5701559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5826163", "body": "This generally looks absolutely awesome.  I just commented on a few lines, but it looks nearly ready to merge in.  Let's release a new version of the gem after merging as well.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5826163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5833133", "body": "Hey @KL-7 yes, looks great.  I'll merge it in.  I'd like you to add those extra comments at some point, but that's not blocking the merge.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5833133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5883894", "body": "This looks pretty awesome, just a few suggestions:\n1.  `#days` and `#quarters` needed, but I'm sure you're on top of that :)\n2.  When you implement `#days` (or `#weekdays` if you like) it would be nice to get a hash back instead of an array as it's done for `#months`.\n3.  If no data is available, `nil` is an acceptable return value.  In looking at other shared resources like languages, the following code returns `nil`: `TwitterCldr::Shared::Languages.from_code(:eg)`.  I also noticed that for plural rules, the following code actually returns an empty array instead of `nil`: `TwitterCldr::Formatters::Plurals::Rules.all_for(:eg)`.  It would be great to uniformly return nil whenever data isn't available.  Would you mind updating `TwitterCldr::Formatters::Plurals::Rules` to do the same?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5883894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5884923", "body": "Let's keep them in 'shared' for now just to keep things simple, but I'll consider moving them in the future.\n\nConverting classes into modules in 'shared' is a great idea if they aren't used to make objects - go for it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5884923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5921115", "body": "Hey @KL-7,\n1.  Those German month names are missing because [ruby-cldr](http://github.com/svenfuchs/ruby-cldr) was created over 2 years ago and relies on CLDR v1.7.2, and therefore so does twitter-cldr-rb.  When I tried to export the most recent version of the yamls using ruby-cldr, I encountered an error in the gem.  I've submitted a PR [here](https://github.com/svenfuchs/ruby-cldr/pull/3), but I'm not sure when Sven is going to get a chance to merge it in.  In the meantime, you can use [my fork of ruby-cldr](https://github.com/camertron/ruby-cldr) and export the most recent yamls using [this gist](https://gist.github.com/2784928).  I have verified that the full set of month names is being exported properly now.  This may fix other holes in the CLDR data we currently have too ^_^\n2.  The hash traversing function is a good idea, let's do it!  I think `rescue nil` was just easier before, but we're definitely more #prostyle now.\n3.  What would you think about throwing a custom error in [`#resource_for`](https://github.com/twitter/twitter-cldr-rb/blob/master/lib/twitter_cldr/shared/resources.rb#L15-17) instead of `#data_for`?\n4.  About CLDR's multiple inheritance:  Short answer, I have no idea what this means.  This code was adapted from ruby-cldr.  I did some half-hearted research when I was first implementing twitter-cldr-rb to try and figure out what multiple inheritance is, but I couldn't find any mention of it in the CLDR docs or via Google searches.  The next step is to reach out to Sven Fuchs to ask him about it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5921115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5939540", "body": "This PR covers a whole bunch of cool stuff, nice work.  In reference to better handling of day periods, we could certainly implement that.  I can put it on our roadmap if you like.  Is all the data available?  The CLDR page you linked to said it was a proposal.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5939540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5942206", "body": "Other than exposing numbers, I think this PR is ready to go.  I also like your idea about surfacing the CLDR version, maybe something like `TwitterCldr.cldr_version`.  I agree it's totally weird that CLDR is at version 21 instead of 2.1, especially considering they were at version 2.0.1 right before.  Maybe they're jumping to whole number versions?  Who knows.  We should also copy over the other yml files (perhaps in a separate branch/PR) like numbers.yml so we have the same version across resources.  We'll just have to remember to update the version constant when we update the resources.  Also, what would you think about incorporating the code from the update gist into twitter-cldr-rb?  That would formalize and centralize the update process and not rely on random gists floating around the interwebs.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5942206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5943261", "body": "Great list, let's definitely track these separately.  The thing is, as you work on these features, you and I have more and more ideas, which can sometimes break out of the original feature's scope.  What do you think is reasonable to accomplish for this PR?  I'm thinking just adding numeric data is enough, and we can do the rest in other issues/PRs.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5943261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6000392", "body": "Having automated readme tests like the Ruby DocTest would be really cool!  We could probably use the Github markdown syntax as cues to know where the Ruby code blocks are, then eval them :)\n\nI decided to keep the `:using` option in `String#normalize` because I like the way it flows when you read it out loud.  It sounds like an English sentence: \"string normalize using NFKD\"...  `normalize` protects against a null value for `options[:using]` by defaulting to `:NFD`, so it shouldn't be a problem if the user doesn't pass an explicit form to use.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6000392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6051430", "body": "Hey @KL-7, looks good, just the one comment above ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6051430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065078", "body": "Yeah, the `once` expectation is great, but I was concerned about returning the same actual object instead of a copy.  It's the same check in the end, I suppose.  This PR looks good, time to merge!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065889", "body": "Well, I think this is probably fixed by updating our CLDR data to v21.  I don't think @imkmf is working on the project anymore :( so I'm gonna close it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065897", "body": "Yep!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6065897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6164393", "body": "@gbadiali looking good for a first draft!  I made some comments on individual lines of code, but lemme also respond to your points above:\n1.  The tokenizer should be giving you a list of ordered tokens back - is that not what's happening?  Is it perhaps not including the placeholders?\n2.  If Arabic \"time ago\" strings don't contain {{num}} then what do they contain?  It's possible no number is necessary, but that seems doubtful.  Maybe we can ask Hakhan.\n3.  Tests FTW, but the ones you already have look great.  Beware the hidden timezone bug, however, and there's also my question about using the Buddhist calendar...\n4.  Yeah, we're probably not calling `#to_s` on the `Fixnum` and it's freaking out.  Let's look into it.\n5.  I'm really curious to know how you propose making rounding more accurate - let's chat.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6164393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6193125", "body": "Looking better and better!  Just a few small things remaining.  Also, I'll see if I can get @KL-7 to weigh in, as he's working on TwitterCLDR for GSoC.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6193125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6259981", "body": "@gbadiali This is looking great!  One last (very quick) thing.  Kirill mentioned that, when calling a method with a hash, Ruby allows you to omit the curlybraces, eg: `my_func({ :key => :val })` becomes `my_func(:key => val)`.  Would you mind going through your PR and removing your extraneous curly braces?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6259981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6347412", "body": "Ok, I think this PR is ready, what do you think @KL-7?  I'll rebase and merge if it all looks good :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6347412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6362555", "body": "Merged composition_squash, this PR is done.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6362555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6375123", "body": "@KL-7, renaming `Normalizers` to `Normalization` is fine, but it doesn't match up with `Formatters` and `Tokenizers` as it used to.  What if you put your collation code into a `Collators` module?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6375123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6375556", "body": "Overall, this PR is magical - I'm super excited about getting it merged in!  However I'll confess, I don't understand everything that's going on here, so I'd love to get a walk-through from you on Monday.  Here are a few quick things I wanted to bring up:\n1.  Where is the FCE table?  I don't see it in `resources`.\n2.  As you mentioned previously, it would be awesome to provide a `sort` method in `LocalizedArray` that would handle computing sort keys and comparing the items.\n3.  What would you think about maintaining a sort key cache?  It may grow to be too large if users are computing them for a bunch of different strings, so perhaps we'll need to specify some kind of expiration mechanism.  Actually, I was thinking it might be time to think about a `TwitterCldr::Cache` class that can have some fancy functionality.  We could also provide the ability to set a global memory limit - after all, the gem is getting pretty fat.\n\nLet me know what you think :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6375556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6376464", "body": "1.  Ah ok cool!\n2.  Thanks.\n3.  Yes, it's much too big a feature to add to this PR - we should add it later for sure.  I looked at the size of `resources` and there are only 3.4MB worth of files in there.  There will be some additional overhead of course when the data is read into Ruby objects, but that's really not too large to handle for our internal cache.  Still, it might be worth examining how much memory gets used running certain tests (like normalization) or formatting a few dates.  That's for our existing cached data.  Sort keys are a different story, however.  Whereas before we were only caching a distinct, limited collection of values, now we could potentially be caching an unlimited collection of values.  I don't know if the problem warrants multiple adapters like memcached or redis... but maybe it does.  Do you happen to know how ICU4J handles this?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6376464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6497241", "body": "Hey @KL-7, what do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6497241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6641060", "body": "Ok, I'm going to merge this in and release v1.5.0 even though tailoring isn't finished yet.  We need to release a new version to fix some jank on twitter.com.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6641060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6714192", "body": "Looking good!  A few questions/responses:\n1.  Are you planning on including the ICU4J exporting script into TwitterCLDR?  It might actually be better if Twitter created an official fork of ruby-cldr for us and added it in there.  What do you think?  Also, I noticed you've exported tailoring rules for quite a few locales that Twitter doesn't support - is that just for testing?\n2.  Ok, cool.\n3.  Ok, cool.\n4.  Yeah, maybe copying is the better strategy.  You mentioned that most of the copied sub-tries would be quite small anyway, so it sounds like the impact on memory usage will be negligible.\n5.  It's almost impossible to hide objects in Ruby and prevent someone from modifying them, so I think the best you can do here is to use the `protected` and `private` keywords and hope for the best.  Unless they have a good reason, most developers won't be messing with the default FCE trie, especially if it's marked as `protected` or `private`.  Idea:  considering a trie is mostly a collection of connected arrays, and that the trie should not be modified once loaded, what would you think about freezing the entire structure so nobody can modify it?\n\nOk @KL-7, great work as usual!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6714192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6866249", "body": "Ok @KL-7, just perused your latest commits - everything looks great.  Just a few non-blocking comments.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6866249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6866800", "body": "@KL-7, yes, I made the comment before I saw that you had moved the call to `[:i18n][:plural][:rule]` into `get_resource`.  I deleted the comment when I realized :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6866800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6985433", "body": "Hey @KL-7,\n\nThe pending collation tests aren't ideal of course, but it looks like the majority of them are passing.  I'm a little worried about zh-Hant and hu (Hungarian) however since it sounds like we don't really know what's wrong with them.  Also, on my machine 3 tests are pending for Japanese.  Feature request: could you add percentages for these collation tests in the spec output so we can easily tell how complete they are?\n\nI'm not sure we should merge this just yet given the remaining issues with zh-Hant and hu.  French and Danish are ok.\n\n---\n\nThanks for adding the missing files :)  Are the full collation test files small enough to be included?  The files in the `js` directory should be included in the gem, I can't believe I forgot to add them!  Good catch.\n\n---\n\nThe speed improvements you mentioned are pretty significant, good investigative work.  I think it makes sense to submit that fix as a separate branch/PR (this one's getting pretty large).\n\n---\n\nTo summarize:\n1.  Investigate the issues with zh-Hant and hu, fr and da are ok.\n2.  Add percentage to spec output for collation tests.\n3.  Create separate branch/PR for collation trie loading speed improvements\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6985433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6987534", "body": "@KL-7, thanks for that really nice summary of our collation \"failures\".  I will definitely be linking to it in the readme!  Thanks for adding the percentage feature I requested - it looks like this is indeed ready to merge.  Here we go...\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6987534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6988582", "body": "@KL-7, yes please create separate issues for the Danish, French, Japanese, and Chinese issues.  I haven't had an opportunity to research French backwards accent sorting yet, tried to take a look today but it looks like you were right - unicode.org is down right now!\n\nCongrats on this merge, btw, really good stuff.  Did you see my tweet?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6988582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6989737", "body": "Hey @KL-7, I just added abbreviated timespan support to this PR (both Ruby and JS) - would you mind looking over the code one last time?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6989737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7053186", "body": "Ok, I think this PR is ready, do you agree @KL-7?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7053186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7090339", "body": "Looks perfect, just two really small nits.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7090339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7101832", "body": "Oops, wrong button.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7101832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7340951", "body": "Hey @KL-7, here are the relevant Gists:\n1. To generate [`decomposition_map.yml`](https://gist.github.com/3195176).\n2. To generate [`composition_exclusions.yml`](https://gist.github.com/3195022)\n3. To generate custom locale [`units.yml`](https://gist.github.com/3194858) files like `resources/custom/locales/ru/units.yml`.  You didn't mention this specifically in your comments for this PR, but since I'm linking to all the other scripts, it seemed appropriate to include this one too.\n4. The ranges inside `hangul_blocks.yml` came from the Unicode normalization guide (a PDF), so they're not updatable programmatically.\n\nGo ahead and move the blocks files into `unicode_data/blocks` - that's a great idea.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7340951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7375600", "body": "Hey @KL-7,\n\nThe Translation Center doesn't return anything for the EN locale because we consider that to be our base locale.  We'll have to handle that file manually.  It won't ever change though :)\n\nWe got `%{number}h` before for EU (Basque) because the phrase wasn't translated and the API was falling back on the English phrase instead.  Basque is one of our \"self-service\" languages, meaning we don't manage the content - we just let it grow organically.  Looks like `%{locale}o` is correct.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7375600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7439386", "body": "Hey @KL-7,\n\n`currencies.yml` is in the `shared` directory because it is not locale-specific.  Please do the same with `postal_codes.yml`.  Thx!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7439386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7440750", "body": "Ah ok I misunderstood.  I'm not sure why I added the the extra `:shared` namespace.  I think I was trying to be more consistent with the other yml files which generally have an upper-level locale namespace like `:ru:`.  Using `:shared:` in place of the locale code just made sense at the time.  If you think that's superfluous, we can remove it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7440750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7511176", "body": "Hey @KL-7, I think this pull request is ready - can you take a look?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7511176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1268311", "body": "Lulz I totally didn't know `rake build` existed.  We used to run `rake gem`, probably before Bundler got all fancy with its rake tasks and I was trying to emulate that functionality.  Looks like I can remove this.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1268311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278792", "body": "This is probably a holdover from my C# days (StringBuffer) but I was also trying to make it obvious that the string could be quite large.  You're absolutely right however, a literal string here is exactly the same.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278804", "body": "`self` makes it obvious that you're calling in the class or instance context, and doesn't cause you confuse the call with a variable name.  That may not be a big issue to the seasoned Rubyist, but I've found it helpful more than once when I re-read my code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1278804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280237", "body": "Yeah, I guess it's just a matter of style.  I can remove 'em, but I can't promise I won't slip one in every once and a while by accident :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280239", "body": "Oh yeah, that's totally true, my reasoning behind using `StringIO` was just to tell the reader that a large string is being concatenated here.  If they come from C#/Java land, that reasoning makes sense, but if they come from Ruby land they'll probably just go \"WTF\".  Changed to a literal string ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1280239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1378441", "body": "Oh man I knew there had to be a better way.  Ruby to the rescue once again ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1378441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418388", "body": "Yes, I agree about changing `@@output_dir` to a class-level instance variable.\n\nI kept `@@output_dir` and `build_dir` separate because I was trying to follow the `./configure` - `make` - `make install` paradigm that builds the project in a temporary directory and moves it into place during the install step.  Additionally, `build_dir` is used during tests when it doesn't make sense to \"output\" the files anywhere.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1418388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1425295", "body": "Ah sorry, I misunderstood your comment.  You're absolutely right, I'll make the change right away.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1425295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443919", "body": "Haha LOL!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443929", "body": "No, I just chose `|` because I thought it looked cool.  We can use any separator we want, I believe.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443943", "body": "Ok, I can change it.  For some reason I have this aversion to writing `return` in Ruby because I can never remember how it works inside blocks.  In this case, I think it makes sense.  Also, I forgot functions return nil by default, so `return unless code_point` is cool too.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443956", "body": "Yes, `Attributes` is really not the right name for this class.  I like the idea of merging `Attributes` into `UnicodeData`, but I'm also wondering if `UnicodeData` is a misleading name too.  What would you think about a class called `CodePoint`?  That makes more semantic sense to me :)\n\nWe also have the `TwitterCldr::Utils::CodePoints` class, which doesn't really make sense either.  What would you think about renaming that to `UnicodeString`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1443956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1466772", "body": "Hey @KL-7, it looks like the quickest fix is to change line 43 in nfkd.rb to check the name in `unicode_data` as had been done before:  `if unicode_data.name.include?(\"Hangul\")` instead of `if unicode_data.hangul_type == :compositions`.  However, checking for the existence of \"Hangul\" in the name is a bit hacky, which is why I replaced it with a call to `hangul_type`.  I'll look into fixing blocks_hangul.yml, which is obviously where the problem lies.  It's interesting that none of the tests in the short or long test file caught this.  I was however able to verify using the [unicode gem](https://github.com/blackwinter/unicode) that `A960`, `D7B0`, and `D7CB` are NOT supposed to be decomposed.\n\nI agree the discrepancy between blocks_hangul.yml and `hangul_blocks` is confusing.  I named the file blocks_hangul.yml so it would alphabetically sort next to blocks.yml, and decided it made more grammatical sense in the code to call the function `hangul_blocks`.  Do you think they should be the same?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1466772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1467001", "body": "Agreed.  I'll take a look at fixing `blocks_hangul.yml` on Monday when I get back to the office.\n\nI suppose the alphabetical ordering of `blocks_hangul.yml` next to `blocks.yml` isn't all that important - I'd be fine with renaming the file.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1467001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1582092", "body": "Because `TwitterCldr::Js::Renderers::PluralRules::*` aren't `require`d when this class is loaded.  Using a method means the constant lookup is deferred until the method is called.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1582092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1599412", "body": "Yeah, I think you're right, all those checks kinda bugged me too.  I'll update the code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1599412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1604609", "body": "It's used by the JavaScript compiler to translate plural rule expressions from Ruby to JavaScript.  [Check out this file](https://github.com/twitter/twitter-cldr-rb/blob/master/js/lib/renderers/plurals/rules/plural_rules_compiler.rb) for more details.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1604609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1759583", "body": "Oops lol, I totally messed that one up :$\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1759583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1771229", "body": "Git tag created, updated History.txt.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1771229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1918190", "body": "Oh weird.  The issues I was getting were because bundler wasn't installed for some reason.  Travis never actually got to run the YAML tests with JRuby until now.  Yes, we should definitely create an issue for this.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1918190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125", "body": "Let's keep `self.resources` and add `self.get_resource` for backwards compatibility :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818", "body": "Where is `locale` defined here?  I don't see any way that the body of this block will ever be executed.  Also, only one instance of `TwitterCldr::Shared::Resources` is ever created... I guess maybe I'm missing the point of this change.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828", "body": "These changes feel less readable to me than the previous solution, albeit more compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/678828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040", "body": "There's not much reason to use File.join unless you're joining more than one sub-path.  Try this instead:\n\n`data_path = File.join(File.dirname(__FILE__), \"data\")`\n\nAlso, data files are all stored in the `/resources` directory.  Unless they pertain to specific locales, they're put in `/resources/shared`.  It would be great if UnicodeData.txt could live there too and be accessed by the `TwitterCldr::Shared::Resources` class.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062", "body": "At Twitter, it's standard to use the `do ... end` syntax instead of curly braces for multi-line blocks.  Also, this is another great place to use File.join:\n\n```\nIO.readlines(File.join(data_path, \"UnicodeData.txt\")).map do |line|\n  ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/656062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703", "body": "Just looked this up.  You're passing it a block that handles initialization - that's actually super cool.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710", "body": "Yeah I completely understand what you mean.  Really, it's not that much more unreadable.  I think we can keep your changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281", "body": "Ah, I see what you mean.  No, I don't think an error should be thrown here.  Instead I think we should leave the original text in the string, so instead of `\"5 houses\"` you get `\"%{houses_count:houses}\"` without any replacements.\n\nHowever!  I've been considering for a while whether to include a global option to raise errors instead of just letting things slide.  It really depends on the use case.  At Twitter, we would most likely not want TwitterCLDR to raise errors because we occasionally launch features that aren't 100% translated anyway, but other projects (or other companies) might feel differently.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284", "body": "The convention used throughout the rest of the specs is to assign instance variables for objects used across multiple tests:\n\n``` ruby\n@patterns = { :one => '\u043c\u0435\u0434\u0432\u0435\u0434\u044c', :few => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f', :many => '\u043c\u0435\u0434\u0432\u0435\u0434\u0435\u0439', :other => '\u043c\u0435\u0434\u0432\u0435\u0434\u044f' }\n@plurals = ...\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292", "body": "Although this line will likely change, the convention used at Twitter (and in these specs) is to use a lambda and .should raise_error:\n\n``` ruby\nlambda { subject.format(2, patterns) }.should raise_error(ArgumentError, \"Missing pattern for :few.\")\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296", "body": "LOVE these refactors - much better, thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297", "body": "Didn't know you could do this.  Very cool.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/663297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768", "body": "Hmm... well, I suppose it couldn't hurt.  Thanks for the SO question, that helped explain things.  Let's do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/673768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728", "body": "Better to accept a hash of options here and use `TwitterCldr.get_locale` if no locale is specified.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827", "body": "Ah, right you are.  `extract_locale` is better.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830", "body": "Cool, very compact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/682830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339", "body": "This file should probably not be hanging out right inside `lib` - consider moving it into a child directory.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705410", "body": "Wouldn't it be cool if `for_code_point` returned an instance of something like `TwitterCldr::Shared::UnicodeData::CodePoint`?  That way we wouldn't have to use array indices to access the code point data.  In other words, you could do `unicode_data.code_point` instead of `unicode_data[0]`.  What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/705410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/717593", "body": "Ha!  Awesome.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/717593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/717595", "body": "Spelling ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/717595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/717597", "body": "Yeah, I think @KL-7 is right, there's no reason why unicode_data_attrs shouldn't just be a constant that you can call `.new` on.  Making it a class variable isn't wrong necessarily, but, in addition to inheritance issues, it doesn't allow you to access the struct outside of the `UnicodeData` class.  If you used a constant name like `CodePoint` instead, you could access it outside by using `TwitterCldr::Shared::UnicodeData::CodePoint`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/717597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/745481", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/745481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/751953", "body": "The style used in the rest of this codebase for multi-line blocks is to use `do`...`end` instead of curly braces.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/751953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/853939", "body": "Unless I misunderstood the purpose of this method, it might be better for it to explicitly return true/false instead of an int/nil.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/853939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/853967", "body": "Could you add a link to the document (if you or Andrew used one) that explains this algorithm\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/853967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/853983", "body": "Love this comment.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/853983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854024", "body": "Ah ok.  Just so I understand completely:  this method does not handle compatibility mapping as NFKD does, so it simply returns nil if a compatibility mapping is required.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/854024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/856314", "body": "It would be great to add a comment at the top of this file with a link to the NFKD spec, but I was referring to a description of the stable sort algorithm you used.  If you mention it's just a bubble sort that maintains the order of equal elements and exits early if no swap was performed, that should be fine.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/856314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/870867", "body": "This should be converted into a CLDR locale by calling TwitterCldr::convert_locale, otherwise stuff like: `TwitterCldr::Shared::Calendar.new(:'zh-tw').months` won't work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/870867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/871002", "body": "Yep, just saw the pending test.  The implementation looks solid and, as usual, very neat and compact.  See my last comment for details.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/871002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/884101", "body": "Didn't we discuss using this type of hash traversal in a few other places too?  Can we move this into a module and mix it in to those places?  I'm thinking of plurals and calendars.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/884101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/884805", "body": "Ok, whenever it's convenient.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/884805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/912340", "body": "I usually compare `object_id`s for cases like this where you want to make sure you don't get duplicate objects.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/912340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/939848", "body": "Might be nice to pass the full options hash to `#to_s` instead of just the unit.  Also, you can give `options` a default value of `{}` so it's `def ago(options = {})`  That way, `options[:base_time]` is less likely to throw an error if `options` isn't a hash (or an array).\n\nI'm also not sure about this constructor.  It looks like you have to pass in `:ago` or `:using` and the order of the arguments might be a little confusing since there are so many of them.  I have two suggestions:\n1.  Move the logic for subtracting the timestamps out of `LocalizedTimespan` and move them into the `#ago` and `#until` methods.  That way, `LocalizedTimespan#new` only has to worry about keeping track of a single number of seconds, and you don't have to pass `:ago` or `:until` or two different ints.\n2.  Make `LocalizedTimespan#new` accept a hash of options so we can (kind of) have named arguments and don't have to guess parameter order.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/939848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/939935", "body": "These two lines can be combined so you'll have: `base_time = options[:base_time] || Time.now`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/939935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/939944", "body": "Still not sold on the name \"Ago\" - what do you think?  We could do something like \"TimespanFormatter\".  I'll leave it up to you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/939944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/939964", "body": "Move these into `LocalizedDateTime#until` and `LocalizedDateTime#ago`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/939964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940016", "body": "Does this really need to be a decimal?  We can assume some standard number of days or weeks in a month, like 30 or 4.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940028", "body": "Doesn't `Float#round` use 0.5 as the cutoff point?  Why do you say it always rounds down?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940031", "body": "Hash!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940064", "body": "You should be able to get plural rules using the `TwitterCldr::Formatters::Plurals::Rules` class.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940223", "body": "Why use the Buddhist calendar here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940234", "body": "Have you tested this locally for a timezone other than PST?  Use System Preferences to change it around and see what happens when you run the tests again.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/940234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948575", "body": "This can be combined like: `strings = tokens.map { |token| token[:value] }`\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948590", "body": "Should be `TwitterCldr::Formatters::TimespanFormatter`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948593", "body": "How about `tokens_with_placeholders_for`?  Also, this whole function can fit on one line:\n\n``` ruby\ndef tokens_with_placeholders_for\n  self.tokenize_pattern(self.pattern_for(self.traverse(key)))\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948612", "body": "Indenting is a bit off for the first `:ago` hash.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948617", "body": "Customary to use `||` instead of `or` operator here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/948617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/961738", "body": "After talking to @KL-7 about this, I'd be fine with removing `KeyPath` and just passing around arrays - it makes sense because the names of the variables with key paths are clearly named in most cases, eg. `@base_path`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/961738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/994188", "body": "Yeah, that's probably a good idea.  Most likely we won't be adding any new classes under `UnicodeData` so it makes sense to remove it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/994188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/994191", "body": "Ah cool!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/994191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997812", "body": "Are you referring to the `nfd_quick_check` technique?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997823", "body": "Is this used anywhere?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997825", "body": "Did you follow an algorithm or a spec for this def?  If so, please give the URL here :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997834", "body": "I would have expected `build` to return an instance of `SortKey` instead of a byte array.  If you're going to return a byte array, why create an instance of `SortKey` at all?  Throughout the rest of the collation code, it doesn't look like instances of `SortKey` are retained anywhere - just the byte arrays.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997835", "body": "Cleaner (IMHO) to say `final.first`\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997840", "body": "Streaming the resource is clever, nicely done!  However, the `table` argument is a little misleading - it's not really the table you're passing in, it's a file handle.  Could we make this streaming behavior available in `TwitterCldr::Resources`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997842", "body": "This is a great refactoring of the Hangul stuff, nice work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997843", "body": "Ha!  Nice.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997844", "body": "Yes, this is much better.  I was doing some other logic with this `case` before refactoring and just didn't see it this way - thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997847", "body": "Ugh.  I'm getting really tired of this `.to_s(16).upcase.rjust(4, \"0\")` thing.  Maybe we can add a method to `Fixnum` or something.  Hopefully we can move away from doing string code point to int conversions in the future too.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997850", "body": "Yeah, I think that's the same thing.  We don't have it yet - it will require adding and loading a few more resources.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997859", "body": "I meant streaming in the sense that you're not loading the entire table into memory.  Instead, you're opening the file with `open` and reading and parsing each line individually.  The line `parse_trie(load_collation_elements_table)` doesn't pass the table to `parse_trie`, it passes an instance of `File`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997934", "body": "Oh no, I meant we could use streaming for non-yml files, but move the logic for streaming into `TwitterCldr::Resources`.  Just a thought, probably not necessary.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/997934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1034811", "body": "Hmm yes...  that's not a bad idea.  I'll look into it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1034811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037070", "body": "On second thought, doing that actually messes a bunch of things up.  For example, `Languages.translate_language(\"Russian\", :en, :blarg)` should return `nil`, but instead returns \"Russia\" because it defaulted to the English translation.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1037070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1071717", "body": "Removed :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1071717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1071722", "body": "Oh nice, thx.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1071722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1071725", "body": "Beautiful.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1071725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1071736", "body": "I think I explained this over Skype, but for completeness I'll comment here too.  I'm expanding all redirects here because the JavaScript version shouldn't have to expand the paths itself.  Plus, it turns out the Ruby version wasn't doing redirects for the calendar data, which was fine for CLDR v0.7 but not for v21.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1071736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085781", "body": "Is this English for Belgium?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128293", "body": "Why is the value `nil` here, and why lock the returned trie?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128339", "body": "Since we symbolize keys whenever a resource is loaded, there's no need to export these files with symbol keys.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128530", "body": "We decided to eventually use symbol keys in all our yaml resources.  I commented on the use of symbol keys here because none of our other resources use them yet, so it seemed inconsistent.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1128530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1129117", "body": "Ugh, wow I didn't notice that.  I've submitted a [pull request](https://github.com/afunai/ya2yaml/pull/2) for the ya2yaml gem that should fix the ugly symbol dumping.  You'll have to specify the `:use_natural_symbols` option, but that shouldn't be too hard.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1129117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085687", "body": "I haven't been choosing versions sequentially, this one just felt right.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085693", "body": "Yes, that's a great idea, thanks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085705", "body": "Yeah, I tried that and discovered the existential operator doesn't handle the `undefined` case, so I decided to chain a bunch of `or` statements instead.  I could change it to be `if !unit? or unit is undefined or unit is \"default\"` but there's not much to be gained by doing so.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085709", "body": "Ah good point.  I'll update the code.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085713", "body": "Absolutely, I'll update it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085718", "body": "Hmm yes, I guess I was just trying to be explicit.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1085718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1145604", "body": "Yeah I know.  I'll try it again.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1145604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1171000", "body": "We are using semantic versioning to a certain extent.  Whenever we release a non-trivial version, I try to increase the \"minor\" part of the version number.  This PR alone probably warrants a bump to 1.6.0, but with collation it _definitely_ should be increased to 1.6.0.  I'll make the appropriate changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1171000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1171005", "body": "Nice!  Hadn't seen that one before :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1171005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1184359", "body": "We talked about this over Skype, but I'll record the answer here too:  There are conceivably times where we would want to merge arrays and not just hashes.  I'll change this code to merge arrays more intelligently - that is, iterate through all the elements and recursively merge arrays and hashes that occur at the same indices.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1184359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1194258", "body": "\"... bytes that are greater ...\"\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1194258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1194259", "body": "\"are\" again\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1194259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217000", "body": "This doesn't really matter, but I prefer `File.open` instead.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217016", "body": "`File.open` preferred.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217025", "body": "Extra spaces :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1217025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1285517", "body": "This is fairly platform-specific - can we use `Net::HTTP` instead?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1285517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1285598", "body": "Ah ok, no worries then :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1285598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1308709", "body": "Oh man good catch, this was kind of a hack.  As it turns out, currency is the only number format that specifies separate positive and negative formats.  For example `resources/locales/en/numbers.yml` you'll see this: `:default: \u00a4#,##0.00;(\u00a4#,##0.00)` - notice the conspicuous lack of a minus sign.  I thought I was doing the right thing at first by moving `get_tokens` into `currency_formatter.rb` and specifically prepending `#{sign}` to the front of each formatted string.  That approach works, but doesn't handle positive/negative format possibilities for other number types (eg. decimals, plurals).  I have moved the sign stuff into `NumberTokenizer` to be more explicit and consistent.  The `get_tokens` function has been moved to the parent `NumberFormatter` class where it should have been all along.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1308709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1367326", "body": "Really nice.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1367326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1781300", "body": "Great idea, will change, thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/1781300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2011953", "body": "Most of this should be merged into the [ruby-cldr gem](http://github.com/svenfuchs/ruby-cldr) instead of twitter-cldr.  That's where all the CLDR xml files are parsed, plus it's nice to give back to that library and keep our implementation separate from their more generic one.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2011953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2011960", "body": "Can we fold this functionality into the existing `LocalizedNumber` class?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2011960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2019523", "body": "It might be nice to tell everyone what the replacement is for `Currencies#countries`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2019523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2019655", "body": "This is kinda weird.  I know the the currency symbol for the Nuevo Sol is \"S/.\" - is that not in the CLDR repo?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2019655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2092009", "body": "Interestingly, running `bundle exec rake update:locales_resources` now outputs a bunch of `plurals.rb` files in each locale resource directory - is this the reason why?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2092009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597115", "body": "Just FYI `TwitterCldr.get_locale` is going away in favor of `TwitterCldr.locale`.  See PR #92 :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597177", "body": "There's a handy RSpec matcher we wrote (`match_normalized`) that I like to use when comparing text values.  It normalizes both values before comparison, ensuring that characters like non-breaking spaces and accents are treated as equivalent even if their bytes aren't quite the same.  For this example, you'd do this:\n\n``` ruby\nTerritories.translate_territory(\"Russia\", :en, :es).should match_normalized(\"Rusia\")\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597184", "body": "What's up with the uppercased locale code symbols (eg. `:ES`)?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597628", "body": "Yeah, I agree.  Lowercasing would be consistent with the rest of the locale codes in the project.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597731", "body": "Normalizing the text before matching won't remove important accent marks and such, it just combines them so the bytes can be compared.  For example, the character **\u00f1** can either be represented in memory as **n** and **\u02dc** separately or combined into a single character.  Most display systems (eg. browsers) will combine these characters visually, even if they're actually separate characters.  The normalization step just ensures we're comparing apples to apples and not driving ourselves crazy trying to find the difference between strings that look visually equivalent.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2580788", "body": "Hmm, I don't think that works in 1.9 or 1.8.  Try this:\n\n``` ruby\narr = []\ncase arr.class\n  when Array then puts \"Yep, it's an array\"\nend\n```\n\nThe `puts` never executes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2580788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2580912", "body": "Fallbacks are meant to either return a locale symbol, `nil`, or fail silently.  If they raise or return `nil`, the system \"falls back\" on the next fallback or the default locale if no other fallbacks exist.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2580912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2584248", "body": "Otherwise it returns the fallback proc, which isn't all that useful.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2584248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2584253", "body": "Woops!  Nice catch, that's my fault during the rebase :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2584253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2627753", "body": "Good call.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2627753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/5687622", "body": "Are there any tokens out there that have legit quotes in them?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/5687622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/14980873", "body": "Oops, my bad :(\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/14980873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/15428646", "body": "Um...?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/15428646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/15428703", "body": "Actually wait, I think this is my fault. The tests in `spec/data_readers/timespan_data_reader.rb` (that you deleted) should be placed here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/15428703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/15429131", "body": "They weren't wrapped in a describe block and their file didn't have the `_spec` suffix because I hadn't yet ported them, and then totally forgot. I might be able to take a look at adding them back in.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/15429131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18322309", "body": "Oh dang, yes they do.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18322309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18322330", "body": "We could, although `twitter-cldr-js` relies on that data to build its own plural code. I thought it probably wouldn't be a problem to include in the ruby version because the files are quite small. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18322330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18475868", "body": "We require anyone using 1.8.7 to have [oniguruma](http://www.geocities.jp/kosako3/oniguruma/) installed, which supports the second argument for `#match`. Let me suggest adding this private method to the class, then calling it in the constructor:\n\n``` ruby\ndef build_regexp(regexp_str, modifiers = '')\n  if RUBY_VERSION <= \"1.8.7\"\n    begin\n      Oniguruma::ORegexp.new(regexp_str, modifiers)\n    rescue NameError\n      raise \"Postal codes require the Oniguruma gem when using Ruby 1.8. Please install, require, and retry.\"\n    end\n  else\n    Regexp.new(regexp_str, modifiers)\n  end\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18475868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18676802", "body": "Ok, thanks @KL-7 :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/18676802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22474335", "body": "Will this have any effect on running tests locally?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22474335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22475100", "body": "According to the docs, `#wear!` causes results to be sent to Coveralls whenever the project is built on Travis. I did a cursory read of the source code and it didn't look like that was true... I must have missed something. To me it looked like data is always sent, even if you're running tests locally.\n\nAlso, twitter-cldr-rb uses Simplecov already. We might consider hooking up Coveralls' Simplecov integration.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22475100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22475253", "body": "Alright, I'll see what I can do :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22475253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/33119557", "body": "Probably only a minor version bump required for this PR since your changes are purely additive.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/33119557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "eigilsagafos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/54913ee6fa49feabf1bff865b5c1221378785078", "message": "Use Integer instead of Bignum/Fixnum in core_ext for Ruby 2.4.0 (#205)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "viroulep": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2ae997baa1901d4688ac17e19f11ff2578bf84f5", "message": "Add Slovenian locale (#204)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muirrn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/f022e78f4f736ce06e6c97b03a1f0594eb1be976", "message": "Pass along locale when formatting currencies. (#203)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sandstrom": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/9fa61c1b4e74191ebb6e042d52d716e0b3bde924", "message": "Timestamp and format changelog (#197)"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/7e6b1390b415854b753501145b099aecf9daf678", "message": "Example with calendar data"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "krzysiek1507": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/68c70832301d58911adaac4a27276e2c16107d3a", "message": "json dependency only for Ruby < 2.0 (#191)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Anthony-Gaudino": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2ccae37eaa504c4364d9455c1322ff00af6797c8", "message": "Added the method \"as_territory\" for use along with \"localize\", which simplifies the call to \"TwitterCldr::Shared::Territories::from_territory_code_for_locale()\", this way, a user can, for example, obtain the territory name for \"gb\" in Portuguese by using \":gb.localize(:pt).as_territory\".\n\nThe documentation (README.md and README.md.erb) now have a section called \"World Territories\" which describes this new method along with the use of the other territory localization methods present at \"twitter-cldr-rb/lib/twitter_cldr/shared/territories.rb\".\n\nA test for the new \"as_territory\" method, was added to the Ruby spec test file \"twitter-cldr-rb/spec/localized/localized_symbol_spec.rb\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bigloser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/2ed18dd7c8f7b0a543715416177b1885d5571141", "message": "Merge pull request #152 from twitter/add_some_indian_languages\n\nadd gujarati, tamil, kannada"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c07fcb10e4470afba30b7c6f7044dd70ecaefa25", "message": "Add Gujarati, Kannada, Marathi"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/ed5f1dea92ecee321205189a4eb31bdc2bcc3274", "message": "Drop Rubinius and use MRI 2.2.0\n\nSigned-off-by: Chris Aniszczyk <zx@twitter.com>"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/00328fd38c34f4c87176ce05ce087ab781093800", "message": "Add cache: bundler to .travis.yml\n\nSigned-off-by: Chris Aniszczyk <zx@twitter.com>"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/c2c33b199d5acbdbda57438956174812624a12cf", "message": "Use new Travis CI infrastructure\n\nSigned-off-by: Chris Aniszczyk <zx@twitter.com>"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/cd6d0728895e4e87cf233bc7de1b325128154748", "message": "Merge pull request #147 from twitter/add-coveralls\n\nAdd code coverage via coveralls"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/commits/b988965918bd9f1e76a0a340d1093eb119334e81", "message": "Add code coverage via coveralls\n\nhttps://coveralls.io/r/twitter/twitter-cldr-rb\n\nSigned-off-by: Chris Aniszczyk <zx@twitter.com>"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846", "body": "Thanks, great to have this out the door finally.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4850846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230", "body": "+1, we do this already for scalding\n\nJust go here @camertron - https://github.com/twitter/twitter-cldr-rb/admin/hooks\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4891230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5333769", "body": "Short answer yes, APLv2 is a per file license essentially. If you don't want to put the full notice as specified in the license, we can simply get away with a reference:\n\nCopyright 2012 Twitter, Inc\nhttp://www.apache.org/licenses/LICENSE-2.0\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5333769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5333793", "body": "Without a reference to a license, things are typically considered \"All Rights Reserved\" so for the sake of any downstream consumers and the legal departments they may have to face, let's put the license reference :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5333793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5392134", "body": "build is broken now: http://travis-ci.org/#!/twitter/twitter-cldr-rb\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5392134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6641447", "body": "By the way @camertron, while you were gone on vacation, I got travis ci support on pull requests. It's fancy now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6641447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22474477", "body": "trying to figure this out in Ruby land myself:\nhttps://coveralls.zendesk.com/hc/en-us/articles/201769485-Ruby-Rails\n\nLooks like it should magically post the results after running specs\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22474477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22475168", "body": "Feel free to do that as you're more familiar with Ruby than I am :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22475168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22677885", "body": "Ya, those were me pushing things locally\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/22677885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "severin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/209", "title": "Add missing postal code for Liechtenstein", "body": "Postal codes in Liechtenstein go to `9498`, see https://en.wikipedia.org/wiki/Postal_codes_in_Switzerland_and_Liechtenstein#Liechtenstein", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imkmf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382", "body": "Yup. Typo there - I was running `bundle exec rake`. \n\nIn regards to the coding, I'm running Ruby 1.9.3p125 on Lion 10.7.3. Managed through RVM, etc.\n\n`$KCODE`, as far as I can tell, isn't supported in versions < 1.9.0.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4846382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615", "body": "I'm going to redo these comments once again -- the `# coding: utf-8` is the correct form, I grabbed the wrong code and wrote a quick script to push it out to all the `.rb` files. I've resolved that, and only added it to the files that need it. The commits, and thus the pull request should be a lot cleaner.\n\nWant me to submit a new one? Also, how did the other areas of the pull request look? Tests and example locale?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4864615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880", "body": "Heh, beat me to it. I've been working on some other stuff at the same time as the magic comments :)\n\nAccept this one, not mine!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4889880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014", "body": "This is the coolest thing I've learned about today. Hot damn.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4892014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662", "body": "I'll be working on it this weekend, so if you could keep it open, that'd be great!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728", "body": "I like @camertron's solution - in terms of uniformity, it fits with having each locale or character set in its own separate file.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002976", "body": "FWIW, I think this pull request, if/when it's accepted, should be on a different branch than master. If the normalization implementation isn't complete, the gem shouldn't include a potentially large library with no current way to use it. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5008662", "body": "Yup. This is the common way to split the Unicode Data - the Unicode site has a bit of documentation on it. I'm splitting them as we speak and I'll have them up on my fork in the next couple minutes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5008662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5010593", "body": "Hope to never have to make all of these files again xD\n\nI [split it up](https://github.com/imkmf/twitter-cldr-rb/compare/unicode-normalizer) into separate YAML files. There's a couple issues with locales and normalizers being in the same resource folder, but it's a step in the right direction, I'd say. I haven't worked on any of the ruby bits either, just the YAML section. (aka, don't use this as an alternative to the pull request)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5010593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5013417", "body": "@timothyandrew Yep, that's the plan. In all honesty, I've been occupied with some Easter stuff with my family this weekend so I haven't gotten around to it. Glad that file could help with your implementation though.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5013417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183545", "body": "Wow, not sure how I didn't catch that. Feel free to submit a pull request here - not feeling very smart. _(walk of shame)_\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183559", "body": "Yep. Excited to see it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183611", "body": "Yeah, bizarre. I haven't used Rdoc at all so I'm not sure where that came from. If I'm the only one with this problem, then taking it off is fine by me! I'm not the final deciding factor but it was my pull... so sounds good!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1183611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "timothyandrew": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431", "body": "I tried serializing this to a YAML file, and reading it from there, but that seems to be slower.\n\n``` bash\n0.089785 seconds. # to parse UnicodeData.txt and retrieve a single code point.\n0.124981 seconds. # to parse UnicodeData.yml (pre-generated) and retrieve a single code point.\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/4974431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261", "body": "1. Oops, looks like it's about 25 megs on my system. Hadn't noticed that; somehow I was convinced that it was 5MB the last time I tried. Maybe we can just read the file for every request?\n2. Yes, I'm planning to implement the normalization algorithms, starting with NFC. As far as I know, the Decomposition_Mapping field in UnicodeData.txt is required for the algorithm.\n3. If we _are_ holding the entire thing in memory, then yeah, this sounds good. Let me just see how much slower it is to read from the file for every call to unicode_data. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5000261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702", "body": "Maybe I'm not using the right method to measure the memory usage, but I'm getting inconsistent results. I just checked, and a script that loads a YAML or JSON version of UnicodeData.txt is using around 70MB (!) more memory than a script that loads twitter_cldr but not the UnicodeData file.\n\nI'm just running the two programs at the same time and comparing their memory usage in OS X's Activity Monitor. Is there a better way to measure memory usage?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5002702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5006366", "body": "@camertron @imkmf That makes sense. How do I initiate a pull request to a branch other than master on your end?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5006366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5006437", "body": "Seems like [this](http://inamidst.com/stuff/unidata/) would be one way to split up UnicodeData.txt. There are 121 categories. So assuming we're using this, do we have 121 .yml files in resources/shared/? Or do we split up UnicodeData.txt so as to match the locales already under resources/?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5006437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5010486", "body": "@imkmf  Do you have a link to the unicode documentation that specifies how best to split the file? The [link](http://inamidst.com/stuff/unidata/) I posted only divides up code points upto FFFF, but UnicodeData.txt specifies ~8000 code points past that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5010486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5013047", "body": "@imkmf Great job! Blocks.txt was exactly what I was looking for. I wrote a splitter script too, but it outputs YAML that when loaded, outputs a hash that can be directly looked up for keys. Wouldn't your YMLs need some parsing every time they're loaded?\n\nFor example, this is (an extract from) my currency_symbols.yml\n\n``` ruby\n---\n20A0: \n- 20A0\n- EURO-CURRENCY SIGN\n- Sc\n- \"0\"\n- ET\n- \"\"\n- \"\"\n- \"\"\n- \"\"\n- N\n- \"\"\n- \"\"\n- \"\"\n- \"\"\n- \"\"\n\n20A1: \n- 20A1\n- COLON SIGN\n- Sc\n- \"0\"\n- ET\n- \"\"\n- \"\"\n- \"\"\n- \"\"\n- N\n- \"\"\n- \"\"\n- \"\"\n- \"\"\n- \"\"\n\n20A2: \n- 20A2\n- CRUZEIRO SIGN\n- Sc\n- \"0\"\n- ET\n- \"\"\n- \"\"\n- \"\"\n- \"\"\n- N\n- \"\"\n- \"\"\n- \"\"\n- \"\"\n- \"\"\n```\n\nand you can just load it up and use it straight away:\n\n``` ruby\ncurrency = YAML.load(File.read('currency_symbols.yml'))\ncurrency[\"20A2\"] # [\"20A2\", \"CRUZEIRO SIGN\", \"Sc\", \"0\", \"ET\", \"\", \"\", \"\", \"\", \"N\", \"\", \"\", \"\", \"\", \"\"]\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5013047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5013085", "body": "@KL-7 It doesn't let me change the branch name on twitter's side\u2026maybe @camertron needs to create a **parse_unicodedata** branch on twitter/twitter-cldr-rb before I can push to it from my fork?\n\n![Screenshot](http://i.imgur.com/dkHgz.png)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5013085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5017371", "body": "I've split **UnicodeData.txt** into YAML files (based on Blocks.txt), which live in **resources/unicode_data/**. Blocks.txt is included as blocks.yml, which is needed to find the corresponding block for a given code point.\nThere's an interface to this in TwitterCldr::Shared::UnicodeData:\n\n``` ruby\nputs TwitterCldr::Shared::UnicodeData.for_code_point('1F3E9').inspect # [\"1F3E9\", \"LOVE HOTEL\", \"So\", \"0\", \"ON\", \"\", \"\", \"\", \"\", \"N\", \"\", \"\", \"\", \"\", \"\"]\n```\n\nI've written a few basic tests for that method, but I'm not too sure how to test it _thoroughly_.\n@imkmf @KL-7 @camertron  How would you augment [**spec/shared/unicode_data_spec.rb**](https://github.com/timothyandrew/twitter-cldr-rb/commit/e90312a3e48d1b3f16ea2841579a7ea02c83e872#diff-2)?\n\nAlso, recently-looked-up *yml files aren't cached _(yet)_.\n\nI haven't committed the splitter script I used, but I've uploaded it as a gist [here](https://gist.github.com/b4b206a7fc9094b6ea59), along with a few tests.\n**It contains an _rm -rf_ so please use with care.**\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5017371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5051049", "body": "@camertron I've added caching, but cached blocks never expire. I wonder if deleting cached items based on something like LRU will be necessary.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5051049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5083479", "body": "All right; so is this is good enough to be merged?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5083479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5095588", "body": "1. Is this necessary? Wouldn't `@@blocks` be assigned the first time the UnicodeData class is used and then stay cached for the lifetime of the program?\n2. Yeah, will remove this.\n\nThat sounds great! :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5095588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096751", "body": "@KL-7 You're right, loading it _on request_ this way is much better. I'll update the code.\nDoes the `blocks` method need to be marked `private`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5096751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099520", "body": "@camertron Oops! I've looked at that method a dozen times and I didn't realize that either. *facepalm*\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5099520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5112295", "body": "@KL-7 Thanks, I missed the section on `dont_allow`\n**EDIT**: I guess this test isn't required if we're removing the cache.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5112295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5171978", "body": "@camertron Not yet, I've been sick with fever the last couple of days; haven't really gotten much work done. But I will keep pushing to this branch as I commit so you can keep track of my progress.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5171978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5172080", "body": "> KL-7 commented:\n> @timothyandrew, is that tabs in both specs and base.rb? I think you should re-indent these files with two spaces and check settings of your editor.\n\n@KL-7 Good catch! I'd forgotten to set the global preference for spaces in Sublime.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5172080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5177013", "body": "As I've just [found](http://books.google.co.in/books?id=wn5sXG8bEAcC&lpg=PA177&ots=J09Bq2PaXB&dq=unicodedata.txt%20decomposition%20code%20points%20don't%20exist&pg=PA153#v=onepage&q&f=false) [out](http://unicode.org/reports/tr44/#Code_Point_Ranges), not all code points are _explicitly_ mentioned in UnicodeData.txt. Some code points _implicitly_ exist; they are part of a **range** of code points, all with the same data. UnicodeData.txt just includes the first and last element of such ranges.\n\nFor example,\n\n```\n4E00;<CJK Ideograph, First>;Lo;0;L;;;;;N;;;;;\n9FCC;<CJK Ideograph, Last>;Lo;0;L;;;;;N;;;;;\n```\n\nThis indicates a range (the names are enclosed in < >,  first name ends in `First` and the second name ends in `Last`). This implicitly means that all code points between 4E00 and 9FCC _exist_, containing the same data as the first and last elements.\n\nTherefore, `UnicodeData.code_point_for('4E11')` should return something like:\n\n``` ruby\n[\"4E11\", \"<CJK Ideograph>\", \"Lo\", \"0\", \"L\", \"\", \"\", \"\", \"\", \"N\", \"\", \"\", \"\", \"\", \"\"]\n```\n\nBut it actually returns `nil`.\n_Fixed in 2d7a38b._\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5177013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5191190", "body": "@camertron I've got a few questions regarding this:\n1. We can't package [NormalizationTest.txt](https://github.com/timothyandrew/twitter-cldr-rb/blob/nfd-normalizer/spec/normalizers/NormalizationTest.txt) as a part of the library because it's 2.3MB. Also, the test using it (in [nfd_spec.rb](https://github.com/timothyandrew/twitter-cldr-rb/blob/nfd-normalizer/spec/normalizers/canonical/nfd_spec.rb)) runs for about 30 seconds. I guess we can't test the entire file, so maybe we can test a relevant subset of it? I'm not sure what to do here.\n2. The code right now normalizes code points, not strings. We need an interface to  `Normalizers::NFD.normalize_code_points`. Is it better to add a method to the String class:\n   \n   ``` ruby\n   \"caf\u00e9\".normalize(:NFD)\n   ```\n   \n   or simply use something like this?\n\n``` ruby\nNormalizers::NFD.normalize(\"caf\u00e9\")\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5191190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5229424", "body": "@camertron,\n1. That sounds great, I'll work on cutting down NormalizationTest.txt to a saner number of tests.\n2. All right, so I'll just write `Normalizers::NFD.normalize` for now, and we'll add `LocalizedString#normalize` when @KL-7 is done with plurals. That okay?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5229424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5233650", "body": "I used [this script](https://gist.github.com/8f257bda963b5f6adc1b) to reduce the size of `NormalizationTest.txt`.\nPart0 is intact, 10 cases are picked randomly from Part1 **for each block** in `Blocks.txt` and 10 cases are picked randomly from Part2 & Part 3 (10 each).\n\nI've added a [notice](https://github.com/timothyandrew/twitter-cldr-rb/blob/7b0b34ce102f242463d4b846b47f098d99ce10af/spec/normalizers/NormalizationTest.txt#L2) at the top of the file detailing the changes I've made to it.\n\nThe test takes about a second and a half to run:\n\n``` bash\n\u00b1 % time rspec **/nfd*spec*rb\nrspec **/nfd*spec*rb  1.39s user 0.12s system 99% cpu 1.511 total\n```\n\nAnd all the tests run in about 2 seconds:\n\n``` bash\n\u00b1 % time rake\nrake  1.90s user 0.22s system 99% cpu 2.122 total\n```\n\n@camertron is this still too slow?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5233650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5237458", "body": "I wanted to stress-test my implementation of the NFD algorithm, so I wrote up a small [test](https://gist.github.com/fbb13cd39acad569aeb4) (running on jRuby) that takes random unicode strings and normalizes them using the Java normalizer as well as this normalizer and compares the results.\n\nThe test fails occasionally, but each and every time it's because of a code point that's been introduced _after_ Unicode 4.0.0, which is the version the Java normalizer is apparently based on.\n\n**EDIT**: Oops, forgot to mention. The random string generator throws up a lot of characters that are _valid_ unicode code points, but code points that have nothing assigned to them. So they don't exist in UnicodeData.txt. The Java normalizer simply returns these code points as is, so I've made that change here as well.\n\n**EDIT 2**: I guess the Normalizer in Java 7 has been updated to work with Unicode 6. The tests aren't failing at all on JDK 1.7.0_04.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5237458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5268407", "body": "@camertron,\n\nGreat. :)\n\nThe discussions we had were mostly about stylistic changes. In addition to the NFD algorithm, this pull request changes `UnicodeData#for_code_point` so that it supports the character _ranges_ in `UnicodeData.txt`. More info [here](https://github.com/twitter/twitter-cldr-rb/pull/17#issuecomment-5177013). \n\nApart from that, I think this pull request is ready to go. Once it's merged in, I'll update [PR #19](https://github.com/twitter/twitter-cldr-rb/pull/19) so that this code uses the [`Struct`](https://github.com/twitter/twitter-cldr-rb/pull/19) instead of the array indices.\n\nAlso, my JRuby tests fail very rarely on Java 7. Maybe one test case fails for every 1000. I'm not sure if this is because of Java 7 using a slightly outdated version of Unicode, or if it's a bug in my code. I will look into it, but I don't think it's a big enough issue to warrant delaying merging in this PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5268407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5269854", "body": "I **did** find a minor bug in my NFD implementation, which I fixed in 7dfd9f2.\nI'm assuming that the Java 7 normalizer is based on Unicode 6.0.0, _not_ 6.1.0, because the only time a test case failed (in around 10000 cases) was:\n\n```\nString -> \"\u97ff\u6eba\u8336\u8f38\u649a\u7956\u76db\ufa2e\u52d2\u523a\u8f62\"\nCode points -> [\"FACA\", \"F9EC\", \"F9FE\", \"FAC2\", \"F991\", \"FA50\", \"FAA7\", \"FA2E\", \"F952\", \"F9FF\", \"F98D\"]\nNormalized using Ruby -> [\"97FF\", \"6EBA\", \"8336\", \"8F38\", \"649A\", \"7956\", \"76DB\", \"90DE\", \"52D2\", \"523A\", \"8F62\"]\nNormalized using Java -> [\"97FF\", \"6EBA\", \"8336\", \"8F38\", \"649A\", \"7956\", \"76DB\", \"FA2E\", \"52D2\", \"523A\", \"8F62\"]\n```\n\nThe only discrepancy between the Java and Ruby versions is 8th code point. In the Java normalizer, **FA2E** stays **FA2E**, but in the Ruby normalizer, it gets decomposed to **90DE**. **FA2E** was introduced in Unicode 6.1.0 ([link](http://www.fileformat.info/info/unicode/char/FA2E/index.htm)).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5269854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5390290", "body": "@camertron Yeah, I pulled master in, so this should be ready to go.\n\nNo part of this code depends on [PR 19](https://github.com/twitter/twitter-cldr-rb/pull/19); it still uses array indices to access code point data. Once this is merged in, I can update PR 19 so all references to `UnicodeData#for_code_point` treat is at a `Struct` rather than an Array.\nI think keeping it separate might be better just because changing the format of how we treat a code point isn't directly related to this PR. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5390290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5398956", "body": "The attributes are now stored in a constant named [`AttrNames`](https://github.com/timothyandrew/twitter-cldr-rb/blob/750d36b9606b76425d29ca149d6a01547fc21379/lib/shared/unicode_data.rb#L9), and references to `UnicodeData::for_code_point` have been updated to use the struct attributes instead of the old array indices.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5398956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5399944", "body": "@KL-7 Absolutely! Thanks for pointing that out. I think `UnicodeData::Attributes` sounds good. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5399944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1269335", "body": "Should be `line[0] =~ /(@|#)/`\nSince all lines in [`NormalizationTest.txt`](https://github.com/twitter/twitter-cldr-rb/blob/master/spec/normalizers/NormalizationTest.txt) contain trailing comments, `line =~ /@|#/` evaluates to a non-zero value for a line like:\n\n```\nC8C4 0334 11AE;C8C4 0334 11AE;110C 116C 0334 11AE;C8C4 0334 11AE;110C 116C 0334 11AE; # (\uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; \uc8c4\u25cc\u0334\u11ae; ) HANGUL SYLLABLE JOE, COMBINING TILDE OVERLAY, HANGUL JONGSEONG TIKEUT\n```\n\nand so the tests aren't run on it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/comments/1269335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952", "body": "I'm not too sure if the `sort_by` is required here.\n@KL-7 @camertron Since Ruby 1.8 doesn't maintain the hash keys in the insertion order, is it better to leave it in?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/693953", "body": "I did not know this! I've changed the code to use `&&` and `||`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/693953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/693964", "body": "Just thought it made it a little more readable than `code_points.size.times do`\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/693964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/693987", "body": "`Array.new(size=15, obj=\"\")` creates an array of 15 empty strings. I chose to create the entire array just so the next statement would work whether `TwitterCldr::Shared::UnicodeData` returned `nil` or not:\n\n``` ruby\ndecomposition_mapping = unicode_data[5].split\n```\n\nI think it'd require more code to perform the nil check and then return an empty string if it _is_ nil:\n\n``` ruby\nunicode_data = TwitterCldr::Shared::UnicodeData.for_code_point(code_point)\nif unicode_data\n  decomposition_mapping = unicode_data[5].split\nelse\n  decomposition_mapping = \"\".split\nend\n```\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/693987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/693993", "body": "Please see [comment](https://github.com/twitter/twitter-cldr-rb/pull/17#r693987) above.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/693993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694469", "body": "On closer inspection, it seems like this is something that `UnicodeData#for_code_point` should handle, since the \"missing\" code points I'm trying to handle by using `Array.new(size=15, obj=\"\")` actually `do` exist, but are not explicitly specified. I've detailed my reasoning [here](https://github.com/twitter/twitter-cldr-rb/pull/17#issuecomment-5177013).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/694469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/701124", "body": "That looks **much** better.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/701124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/701154", "body": "Whoops, looks like there's a [builtin String function](http://www.ruby-doc.org/core-1.9.3/String.html#method-i-rjust) for this. So I guess we can do\n\n``` ruby\ncode_point.rjust(4, '0')\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/701154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/706533", "body": "That's a great idea\u2026I actually started implementing something like this, but let it go early. In my version, `for_code_point` returns a hash of values. I can just zip up a list of keys with the values returned by `for_code_point` to get me my hash:\n\n``` ruby\nkeys = [:codepoint, :name, :category, :combining_class, :bidi_class, :decomposition, :digit_value, :non_decimal_digit_value, :numeric_value, :bidi_mirrored, :unicode1_name, :iso_comment, :simple_uppercase_map, :simple_lowercase_map, :simple_titlecase_map]\nHash[keys.zip UnicodeData.for_code_point('1F3E9')]\n```\n\nwhich gives me:\n\n``` ruby\n{:codepoint=>\"1F3E9\", :name=>\"LOVE HOTEL\", :category=>\"So\", :combining_class=>\"0\", :bidi_class=>\"ON\", :decomposition=>\"\", :digit_value=>\"\", :non_decimal_digit_value=>\"\", :numeric_value=>\"\", :bidi_mirrored=>\"N\", :unicode1_name=>\"\", :iso_comment=>\"\", :simple_uppercase_map=>\"\", :simple_lowercase_map=>\"\", :simple_titlecase_map=>\"\"}\n```\n\nWouldn't that be simpler than returning an instance of `TwitterCldr::Shared::UnicodeData::CodePoint`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/706533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/708351", "body": "@KL-7 Yeah, I think that's the perfect solution for this. Thanks for the idea; I had no idea ruby had something like this! :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/708351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/708382", "body": "The change is at [pull request #19](https://github.com/twitter/twitter-cldr-rb/pull/19).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/708382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709072", "body": "As I understood from the [link](http://devblog.avdi.org/2010/08/02/using-and-and-or-in-ruby/) you posted, `||` and `&&` are for boolean expressions, and `and` and `or` are for chaining expressions together. Since this is an instance of the latter, wouldn't `or` be correct?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709528", "body": "I used some [Java code](https://gist.github.com/8139eefcd58abe9ff6d5) to generate these strings.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709622", "body": "If I use `Hash#fetch` with a block, wouldn't I be able to access _only_ the code_point from inside the block? I don't see a way to pass `block_data` to `get_range_start` without making `block_data` a class variable.  \n\n``` ruby\nblock_data.fetch(code_point.to_sym) do |code_point_sym|\n  #Can't access block_data from here, only code_point\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709653", "body": "Oops, I can just use `block_data` inside the block, right? Sorry!\nI guess `Hash#fetch` works well for this case, then.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/709653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/718012", "body": "Oops. Saying it that way is more like the norm here in India. :smiley:\nWill make the change.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/718012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tanin47": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5349395", "body": "I think it makes sense. I'll try it and see how it goes.\n\nI have one detail though. Should we use # instead of %? Just to conform with Ruby variable binding.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5349395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5349994", "body": "Here is my proposed design:\n- Adding `#\\{[^\\}]+\\}` into `@token_splitter_regex`\n- Adding `{  :type => :composite, :regex => /^(#\\{[^\\}]+\\})/, :content => /^#\\{([^\\}]+)\\}/ }` into `@token_type_regexes`\n- Modify `TwitterCldr::Tokenizers::Base.tokenize_format(text)` to create `CompositeToken`. `CompositeToken` contains an array of `Token`.\n- A `#{....}` block will be stored as an instance of `CompositeToken` (the name is tentative)\n- I shall modify `TwitterCldr::Formatters::Base.format` to handle `CompositeToken`. When it finds `CompositeToken`, it recursively formats the content of `CompositeToken`.\n\nI will need to extract some part of `TwitterCldr::Formatters::Base.format` in order to support the recursion above. This is because the `format` method currently calls `get_tokens`.\n\nThere is no use of `tokenize_pattern`. I'm not sure whether or not I should use `tokenize_pattern` because it seems to handle a different thing, e.g. {1}, {0} for time and date.\n\nPlease give me some thoughts.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5349994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5402835", "body": "I've just updated my commit without making a new commit (with git commit --amend and git push origin master -f). \nI never did it before. Therefore, please take a careful look at the differences.\n\nFor number 1, it's a great idea. So, I have added a Buddhist calendar with a fallback behaviour (to Gregorian). I believe it makes sense because every other type of calendar is slightly different from Gregorian. Otherwise, we would have to re-define the whole calendar.\n\nFor number 2, I've added it, though I'm not satisfied. If we are to add more option, the modifications to support the new option will be spread across many files. Right now `:calendar_type => ...` are everywhere. \n\nMy suggestion is to store all options as attr_accessor, so that it is easy to pass to other LocalizedObject. Please advice me on this issue.\n\nFor number 3, this is embarrassing. So, I've add a few test cases in `spec/ext/datetime_spec.rb` to ensure that `to_long_s`, `to_medium_s` and etc. always work.\n\nPlease have a look.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5402835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5475058", "body": "Hello @camertron,\n1. I decide to move `TwitterCldr::Tokenizers::DateTimeTokenizer::DEFAULT_CALENDAR_TYPE` to `TwitterCldr::DEFAULT_CALENDAR_TYPE` because the constant is used by both `DateTimeTokenizer` and `LocalizedDateTime`\n2. I moved `attr_accessor :calendar_type` to `LocalizedDateTime`\n3. The multi-line `{ ... }` is turned into `do ... end`\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/5475058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/748166", "body": "Got it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/748166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/754409", "body": "Okie, I'll fix it\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/754409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2012063", "body": "In the new pull request, we don't have this anymore. We get it directly in `currency_formatter`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2012063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2012066", "body": "You're right! I will move them to `ruby-cldr`\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2012066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2018439", "body": "There was a bug. `Data.components`, used as defaults when `--components` is not specifed, is in Camel-case, but the options for `--components` should be entered in Snake-case. \n\nTherefore, if we ran `bundle exec thor cldr:export`, `plurals.xml` wasn't exported.\n\nSo, right now, everything entered is camelized in order to fix this bug. (I should explain this in that pull request)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2018439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2019424", "body": "Now either `bundle exec thor cldr:export --components Plurals CurrencyDigitsAndRounding` or `bundle exec thor cldr:export --components plurals currency_digits_and_rounding` works.\n\nAll the comments are very useful. Appreciate your time. I'll get them fixed soon!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2019424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2020670", "body": "I see it now. The currency symbol is per locale, and the locale that uses `S/.` is `es_PE`.\n\nBut in twitter-cldr-rb, we don't have `es_PE`, we only have `es`.\n\nThis currency symbol per locale is really new to me. I never knew that before!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2020670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gbadiali": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6187848", "body": "- Placeholders are now put in the right place! \n- When no unit is prescribed, units are determined according to how Twitter does it in the monorail (although for them it makes a little more sense because they round something like 30 seconds to \"about a minute ago\", while we just turn it into \"a minute ago\".\n- Good call on the timezone bug! That did indeed mess up all the tests. \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6187848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6257448", "body": "Thanks for all the tips! The KeyPath stuff looks great & should be successfully merged in now. I made the changes you brought up--do you have any more suggestions?\n\n\"let\" looks interesting. I think more tests could maybe be cleaned up. I'll check it out more.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6257448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963220", "body": "Great to know, thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963240", "body": "I tried this in my two new spec classes but there are a bunch of other places where this could be changed--I'll investigate further.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963307", "body": "Thanks for catching this. The problem was that LocalizedTime doesn't keep track of a date and therefore was defaulting to today's date, which varies by timezone. We discussed the possibility not allowing \"ago\" to work at all for a LocalizedTime, but decided that there are certain use cases where it makes sense for a user to ask about time on the current day. To test this I'm now just using a timespan with two times which are x seconds apart by definition (e.g. time2 = time1 + x). \n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963394", "body": "I put it in the shared directory because core_ext only contains objects from the original Cldr. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/963394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "travisbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6641404", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1732715) (merged 27d90c01 into 8b4fff81).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6641404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6670534", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1739351) (merged f08ab6d3 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6670534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6694839", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1751388) (merged 5ffb58eb into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6694839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6694959", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1751447) (merged 68ce7078 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6694959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6695962", "body": "This pull request [fails](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1752198) (merged 85092352 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6695962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6696189", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1752355) (merged fb4c5eb2 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6696189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6715263", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1759983) (merged 2f405337 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6715263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6719400", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1761242) (merged 4f341f8c into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6719400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6767677", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1780166) (merged f3884a84 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6767677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6792586", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1790148) (merged 0141d247 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6792586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6819679", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1799729) (merged 1ece6fb3 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6819679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6824204", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1803639) (merged e105f760 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6824204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6824381", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1803750) (merged e9645f7a into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6824381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6831408", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1809445) (merged 294d513b into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6831408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6832298", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1810293) (merged cba37793 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6832298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6852666", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1818203) (merged 2e059ed2 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6852666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6857386", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1819518) (merged aaee8bfb into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6857386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6869837", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1824065) (merged c30291f9 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6869837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6881175", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1823161) (merged 7cbe9520 into 1d8b2de6).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6881175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6921918", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1841089) (merged 53c7afbe into edae8f22).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6921918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6923484", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1841662) (merged 5f4a4527 into edae8f22).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6923484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6972855", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1858893) (merged 520b30a5 into edae8f22).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6972855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6983189", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1864134) (merged 062d4521 into edae8f22).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6983189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6985701", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1865931) (merged ee59c4c2 into edae8f22).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6985701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6985788", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1865958) (merged 3ec79149 into edae8f22).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6985788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6988593", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1868081) (merged 3cc17558 into 29135f4d).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6988593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6995731", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1873002) (merged cf619543 into 29135f4d).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/6995731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7053525", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1890460) (merged a3853662 into 29135f4d).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7053525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7077858", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1897697) (merged cad54e5d into 29135f4d).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7077858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7080249", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1898323) (merged 8bb5f5f6 into f88d36df).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7080249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7081026", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1898472) (merged 37f49624 into f88d36df).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7081026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7090720", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1901588) (merged 2bc98cd7 into 6cdda71b).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7090720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7090746", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1901565) (merged f3f14c2b into 6cdda71b).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7090746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7102229", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1905271) (merged 2bc98cd7 into 6cdda71b).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7102229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7155647", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1922668) (merged 5d56942f into db8b917f).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7155647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7185521", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1933849) (merged 7cc2f739 into db8b917f).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7185521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7267499", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1955826) (merged ad9b28d3 into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7267499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7350873", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1981601) (merged e45196cc into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7350873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7365382", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1989686) (merged dc4dc552 into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7365382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7365960", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1989879) (merged 1b7642a8 into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7365960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7366955", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1990232) (merged ea1e8bf6 into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7366955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7368387", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1990563) (merged 45c249cc into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7368387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7368423", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1990581) (merged b648bf25 into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7368423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7376817", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1992853) (merged 1ef21522 into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7376817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7377740", "body": "This pull request [fails](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1993156) (merged 439090bf into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7377740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7384578", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/1995033) (merged 874d7879 into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7384578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7408582", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2003374) (merged eb7a9541 into fc1d556a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7408582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7439427", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2013360) (merged 63b6dbac into f7d2b1b9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7439427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480558", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2027254) (merged 8331ddb4 into f7d2b1b9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480807", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2027417) (merged ca81233e into f7d2b1b9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480852", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2027428) (merged b6c0772a into f7d2b1b9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480910", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2027485) (merged 07b46d08 into f7d2b1b9).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7480910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7504080", "body": "This pull request [fails](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2036594) (merged 327953ad into cb72c3cd).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7504080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7508930", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2039738) (merged 9afff61e into cb72c3cd).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7508930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7509049", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2039820) (merged e22ae542 into cb72c3cd).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7509049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7513847", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2043264) (merged 06204fa8 into cb72c3cd).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7513847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7527116", "body": "This pull request [passes](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2048594) (merged 28283a95 into ed767622).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7527116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7589063", "body": "This pull request [fails](http://travis-ci.org/twitter/twitter-cldr-rb/builds/2068288) (merged cf088f5f into 308e760a).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/issues/comments/7589063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jasonkb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597191", "body": "Ah, excellent changes! I will change to TwitterCLDR.locale when PR #92 is merged in.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597241", "body": "These are ISO 3166-1 alpha-2 country codes. In CLDR they are (seem to always be) uppercase.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597323", "body": "I'll change all the 'should == \"...\"' to 'should match_normalized(\"...\")' (and I'll also change languages_spec.rb in the same way, which I modeled this file from) but I want to check one thing -- don't we actually want to test that there are no strange non-breaking spaces or accents anywhere? Also, below, we would like to make sure that the accent in\n  Territories.translate_territory(\"Spain\", :en, :es).should == \"Espa\u00f1a\"\nisn't lost or mangled, so at least there, it would be appropriate to do a direct string comparison maybe?\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2597323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2598130", "body": "Ah now I see what you mean by \"consistent with the rest of the project\" -- I see that methods phone code and postal code related use lower-cased ISO 3166-1 alpha-2 codes.\n\nI'll make it so all ISO 3166-1 alpha-2 codes are downcased before they are stored or compared.\n\n(If there weren't consistency concerns, I think upper-case country codes would be preferable -- official references all use uppercase codes:\n\nThey are uppercase in references on iso.org:\nhttp://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm\nhttp://www.iso.org/iso/home/standards/country_codes/iso-3166-1_decoding_table.htm\n\nThey are uppercase in CLDR itself:\n\n```\n# grep 'territory' vendor/cldr/common/main/en.xml\n...\n                        <territory type=\"KE\">Kenya</territory>\n                        <territory type=\"KG\">Kyrgyzstan</territory>\n                        <territory type=\"KH\">Cambodia</territory>\n                        <territory type=\"KI\">Kiribati</territory>\n                        <territory type=\"KM\">Comoros</territory>\n                        <territory type=\"KN\">Saint Kitts and Nevis</territory>\n                        <territory type=\"KP\">North Korea</territory>\n                        <territory type=\"KR\">South Korea</territory>\n...\n```\n\nPlus, it makes it easier to not get confused between language and country codes :es, :ES, :sv, :SE when there is also a case difference =P)\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2598130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2600013", "body": "Ah I see -- I misunderstood what match_normalized does. Cool. I changed territories_spec.rb and languages_spec.rb to use match_normalized.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2600013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2600018", "body": "I made a bunch of changes to the pull request to store territory codes lower-case, and allow asking for their names from either an upper-case code or a lower-case code. Could you take another look?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2600018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602396", "body": "Good point, I moved those two methods to TwitterCldr::Utils::Territories.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602479", "body": "Thank you for the thorough investigation!\n\nGiven how many headaches YAML has already caused you (reading the \"Unicode YAML Support\" section of the readme) my guess is time would be better spent refactoring to not use YAML at all =P\n\nBecause these UN three-digit area codes are exceedingly infrequently used, I would prefer to leave this be (and make sure it is well-documented that they are not supported).\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602741", "body": "Hm right I did it in two steps, because I did the first step and then thought it was pretty unclean to have\n1) LocalesResourcesImporter have this one static method, and have a spec file that tests only that one method\n2) TwitterCldr::Shared::Territories.normalize_territory_code() be public\n\nSo I like it better this way, but I'm happy to revert the last commit if you still think it is better in that state. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2602741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2608768", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2608768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2608818", "body": "Makes sense, the importers are indirectly tested by all the rest of the specs!\n", "reactions": {"url": "https://api.github.com/repos/twitter/twitter-cldr-rb/pulls/comments/2608818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}