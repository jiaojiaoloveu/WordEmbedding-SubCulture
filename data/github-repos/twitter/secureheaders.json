{"_default": {"1": {"jasssonpet": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/381", "title": "Android 4.4 unsupported nonces", "body": "# Bugs\r\n\r\nUsing a script with added `content_security_policy_script_nonce` tag is not being executed on stock Android 4.4 device and emulator (in stock browser and webview). The same script is loaded on Android 4.2/4.3.\r\n\r\nI've tried manually passing `'unsafe-inline'` instead and the script was loaded.\r\n\r\nUser-Agents:\r\n```\r\nMozilla/5.0 (Linux; Android 4.4.2; Android SDK built for x86 Build/KK) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/30.0.0.0 Mobile Safari/537.36\r\nMozilla/5.0 (Linux; Android 4.4.4; XT1021 Build/KXC21.5-40) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Mobile Safari/537.36\r\n```\r\n\r\n### Expected outcome\r\n\r\nThe script should be executed.\r\n\r\n### Actual outcome\r\n\r\nScript with nonce is blocked. The following logs are produced:\r\n```\r\n01-19 12:45:47.009 2241-2241/com.android.browser E/browser: Console: The source list for Content Security Policy directive 'script-src' contains an invalid source: ''nonce-VqttPDPhtEDgC+kNL57SmLkTpCzD+6bPDh2TbhrROJg=''. It will be ignored. :0\r\n01-19 12:45:47.009 2241-2241/com.android.browser E/browser: Console: Refused to execute inline script because it violates the following Content Security Policy directive: \"script-src 'self' 'nonce-VqttPDPhtEDgC+kNL57SmLkTpCzD+6bPDh2TbhrROJg='\".\r\n```\r\n\r\n### Config\r\n\r\nUsing version 5.0.4:\r\n```ruby\r\nSecureHeaders::Configuration.configure do |config|\r\n  config.csp = {\r\n    :default_src => SecureHeaders::OPT_OUT,\r\n    :script_src => %w('self')\r\n  }\r\n  config.hsts = SecureHeaders::OPT_OUT\r\n  config.x_download_options = SecureHeaders::OPT_OUT\r\n  config.x_frame_options = SecureHeaders::OPT_OUT\r\n  config.x_permitted_cross_domain_policies = SecureHeaders::OPT_OUT\r\nend\r\n```\r\n### Generated headers\r\n\r\n```\r\nContent-Security-Policy: script-src 'self' 'nonce-VqttPDPhtEDgC+kNL57SmLkTpCzD+6bPDh2TbhrROJg='\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/162778519", "body": "You may want to remove the \"depending on browser\" part from the method comments above.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/162778519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "oreoshake": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/380", "title": "Using `override` after using `append_content_security_policy_directives` leads to unexpected behavior", "body": "# Bugs\r\n\r\n:bug:\r\n\r\n### Expected outcome\r\n\r\n1. Add CSP changes to the default policy using `append/override_content_security_policy_directives`\r\n1. Use `SecureHeaders.use_secure_headers_override`\r\n1. CSP additions from step 1 are preserved\r\n\r\n### Actual outcome\r\n\r\n1. CSP additions from step 1 are not preserved\r\n\r\n### Example code\r\n\r\n```ruby\r\nclass ThingController < ApplicationController\r\n  before_action :secure_all_the_things\r\n\r\n  SecureHeaders::Configuration.override(:disable_referrer_policy) do |config|\r\n    config.referrer_policy = SecureHeaders::OPT_OUT\r\n  end\r\n\r\n  def secure_all_the_things # CSP changes are added and removed here\r\n    append_content_security_policy_directives(script_src: 'foo.com')\r\n    use_secure_headers_override(:disable_referrer_policy)\r\n  end\r\nend\r\n```\r\n\r\n@ptoomey3 is working around this issue, but this is surprising behavior. I expected the CSP exceptions to persist even though I'm \"overriding\" here. Unfortunately, the internals here are a bit messy and the tests are brittle.\r\n\r\nMaybe augmenting `named_appends` is a better approach. Also, we could add a `override_referrer_policy` method, similar to `override_x_frame_options`.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/369", "title": "expect-ct is undocumented", "body": "", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/360", "title": "clear-site-data should not be available as a global config", "body": "Given some [recent](https://github.com/twitter/secureheaders/issues/355) and [totally understandable confusion](https://twitter.com/mikewest/status/911474048315609088), `clear-site-data` should not be a global config value and should only be available as a per-action override like https://github.com/twitter/secureheaders/pull/356 documents.\r\n\r\nThis would be a breaking change but I think it's fine to do this without a major release because copy/pasting the not-meant-to-be-an-example-but-clearly-perceived-that-way config is a breaking change to begin with!", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/323", "title": "Handle setting multiple headers of the same name (by using a comma-separate list)", "body": "# Feature Request\r\n\r\nRails does not allow you to set multiple headers with the same name, but CSP allows this. However, multiple headers that are comma separated can be used for the same effect.\r\n\r\nThis is an issue if you want to use [the upcoming hashes for external sources feature](https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/t2ai4lsHhWI) AND restrict to a host:\r\n\r\n`Content-Security-Policy: script-src 'sha256-abc', script-src my.cdn.com`\r\n\r\nIt will treat the `script-src` values as if they are separate policy, enforcing each individually.\r\n\r\nSee https://twitter.com/mikewest/status/852252789690556417\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/318", "title": "Dynamic referrer-policy headers", "body": "Just like CSP and XFO, referrer-policy needs to have per-action configurability.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/280", "title": "Add a collaborator to this project", "body": "**Problem**: One person is running this project. Things have worked out well (I think), but they can probably be better.\n**Symptoms**: Code quality is probably suffering, domain knowledge may be too high for contributions. It has been a while since I've seen a refactor/cleanup PR.\n**Solution**: More people should be responsible for this project. That's how open source works for the most part. \n\n**Ideas**: stop merging my own PRs. Get explicit :+1: from someone. Have someone else :+1:/merge \"outside\" contributions.\n\nOne problem is that I no longer have admin rights to this repo, so it might involve a fork if I can't get in touch with someone from twitter.\n\nAnyone interested? :wave:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/277", "title": "Add support for cookie-scope directive", "body": "## Adding a new CSP directive\n\n\"cookie-scope\" directive https://www.w3.org/TR/csp-cookies/\n\n> - Is the directive supported by any user agent? If so, which?\n\nUnknown\n\n> - What does it do?\n\nSets limitations on all cookies for a given origin.\n\n> - What are the valid values for the directive?\n\nThe directive has one of four values:\n- \"host\" allows \"host only\" cookies to be set, but will block setting cookies which set a domain attribute.\n- \"http\" allows cookies to be set via the Set-Cookie HTTP header, but not via document.cookie.\n- \"none\" blocks all cookies.\n- \"secure\" allows cookies to be set with a secure attribute, and will block setting any non-secure cookies.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/275", "title": "Add support for \"Feature Policy\" header", "body": "Add support for [Feature Policy](https://wicg.github.io/feature-policy/). Feature policy needs to have support for highly dynamic policies just like CSP.\n\nSee [Mike West's AppSec EU presentation @39:21](https://youtu.be/0qu9oFaHuY0?t=2361)\n\n> - Is the header supported by any user agent? If so, which?\n\nA prototype is in chrome (ship in Q4?)\n\n> - What does it do?\n\nEnables/disables features in web browsers/\n\n> - What are the valid values for the header?\n\nExamples:\n\n```\nFeature-Policy: {\"disable\":[\"geolocation\"], \"target\":[\"https://example.com\"]}\n\nFeature-Policy: {\"disable\":[\"webrtc\"], \"target\":[\"https://example.com\"]},\n        {\"enable\":[\"webrtc\"], \"target\":[\"https://other.com\"]}\n```\n\n> - Where does the specification live?\n\nhttps://wicg.github.io/feature-policy/\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/275/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/264", "title": "Add support for `require-sri-for` directive", "body": "Firefox nightly just landed support according to https://twitter.com/freddyb/status/738375472711634944\n\nA writeup: https://gist.github.com/mozfreddyb/f4b7e79ab629a3ecff663f33d9a56e82\n\nThe (proposed) spec: https://github.com/w3c/webappsec-subresource-integrity/pull/32/files\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/c7fc44c3e574c5a4b125cf6c06f1aa6dc6b6aa77", "message": "bump to 5.0.4"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/83eddbd20fa7510664377fef2dd75c7719ba170d", "message": "Merge pull request #373 from paulfri/webpacker-stylesheet-nonced-tag\n\nAdd missing `nonced_stylesheet_pack_tag`"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2d198d4f5ad6f06d0c702e650a9c0b6f7e284a14", "message": "Merge pull request #377 from twitter/rubocop-vuln-critical-sev0-breach\n\nupgrade some test dependencies because the GitHub UI said"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/c130007adf0edbe87df59e6ec73932da97c54b50", "message": "nope, gotta be specific :thinking_face:"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/08253208d37913aa943d61f7aa5b953d0fe8c231", "message": "will this use the current 2.4.2/2.3.5?"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/8a784a35e4ebd2760963554d21e77f318b3220a3", "message": "upgrade ruby while we're at it"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/17cd26c3e93540489f70ce0727ed3ef098ab5793", "message": "rubocop"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2662fc48b53b6ef14aa2aa9598b0bdfeefb4c556", "message": "upgrade some test dependencies"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/dec5a793d87ac2a91925d4baa7ba943087cee377", "message": "Merge pull request #374 from ghiculescu/patch-1\n\nthe same URL is repeated twice in the gemspec"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/ec4b50e101e45bd0ecea6b9b210cc9e528493b8f", "message": "bump to 5.0.3"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/565b819af01ad415f56942e147ebfb8d7919d86e", "message": "Merge pull request #372 from steveh/nonced_include_tags\n\nAdd nonced versions of Rails link/include tags"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/d34fa279d4b43c9c6c0e4e3becb9db1db103caa7", "message": "bump to 5.0.2"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1c13c9f4d294298b6339c802bea73cff755ea7aa", "message": "Merge pull request #371 from ptoomey3/master\n\nUpdate Referrer-Policy to support multiple token values"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f738658585b94f10ecd32977644de80b80008b8b", "message": "Update README.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/92ba4c82a8c55adda65d6b4c36b3794be144cbde", "message": "remove hpkp from readme"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/e2115caa8f12138d859a52ee4e84b549e235d520", "message": "Delete HPKP.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/c9b2c7c511aa74b5593626cdb34984c815f49005", "message": "bump to 5.0.1"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9357c7c2d86492d93cdfb6f2288cda5ecf372aa0", "message": "Merge pull request #367 from ptoomey3/master\n\nUpdate Expect-CT to use separator in spec"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/cc3d97b1da1a8b3f6d89e953f47bb01f8a4c2ecd", "message": "Bump to 5.0.0 and update docs with upgrade guide"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/483f4d7f1c60c3a5ec3829c018ec186923a8077d", "message": "changelog and bump to 4.0.1"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/570d210a0db3168de630aaceffb7b3a7a2701b57", "message": "Merge pull request #362 from jacobbednarz/boo-to-rechecking-after-merge\n\nAdd last missing `SecureHeaders` namespace fix for `OPT_OUT`"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1e369a6f721ad191017880523e583fe9b56eb140", "message": "Merge pull request #361 from jacobbednarz/update-4.0-cookies-docs\n\nUse `SecureHeaders` namespace for OPT_OUT docs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/de6a989231c246c9ed4c483e6549d6ba06a46e15", "message": "Remove `includeSubdomains` in the example that's getting copy/pasted"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/4940d4f3b4f30a0cd71ae904081528e73b365d10", "message": "Remove examples from README that are never meant to be copy/pasted"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7bafd11186decd2da9b69e9bbaeaf41c4f20670b", "message": "bump to 4.0.0"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/10143e1b9f39e6b72d17ecebf970abec553b1cd4", "message": "Merge pull request #356 from srisa/doc-update\n\nUpdates to documentation to clarify the default configuration misunderstanding."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/8e6f963f54511f399ef911c611baccaed6bc2c52", "message": "bump for sandbox fix"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/95207bb5a3eaec013259d2cbc20b823398d4db55", "message": "Merge pull request #352 from koenrh/patch-1\n\nFixed URL to 'Upgrading to 4.0' document."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/65eef3c36f1634f42820852c9becb10a02172393", "message": "fix unused var warning"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/c1e90f55629802a66ed6db68c9bbc57e32b63eb8", "message": "fix uninit'd warning"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1eb5493b560d8e929c3d3b464a1517aaecd25543", "message": "add note about script-src being required and how to opt out"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a2d363e9077f5f8a85abf99b5bfcaaac800fa00e", "message": "bump to alpha03"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/90b6b2c169d18b99348705492d0c607c237b3439", "message": "Merge pull request #346 from twitter/opt-out-overuse\n\nPrevent global cookie OPT_OUT from blowing up in middleware"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/5d046a924b34085a122ea8ab0c0f133058a74176", "message": "add long comment about ensuring this specific test remains non-https"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1dbc59053187928338162e2d87fdc8112145dffb", "message": "don't try to modify an opt-out config for cookies"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/501270c96b455560ac629da8ca00433c64a7dec5", "message": "bumpt to 4.0.0.alpha02"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7e5e9d69795e7f9ccbc14f9897b0d9361647c396", "message": "Merge pull request #345 from twitter/allow-opting-out-of-script-src-requirement\n\nallow opting out of script-src requirement"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/bd3ee4576e357ff8e6f0a6d19ddf32a32d2ac787", "message": "make note about overriding script-src requirement clearer"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/884cda24de328f28f93c50b642629af641a040b4", "message": "can't use &. yet"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/713da82bdc1bf013d6acad54fbe133f7481083ce", "message": "allow opting out of script-src requirement"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a410f15ba54ec9bcd55af43894630398c9b88d09", "message": "bump and docs 4.0.0.alpha01"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/4813308dd5fcb6eba612a8924d53a7b49b535da1", "message": "fix broken test due to changed defaults"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1a8f9a1ae1a87c00de6896b7fb5fcdb13b23ae5a", "message": "Merge pull request #343 from twitter/samesite-default-to-lax\n\nDefault samesite: true to mean SameSite=Lax instead of Strict"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/5e93c58c9aa951756c2a6103b08a64767e2f476a", "message": "Merge pull request #341 from anglinb/update_cookie_defaults\n\nAdds secure, httponly, and SameSite=lax to cookies by default"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/d3f883ec3e678ba3883459dee2657e096d221aa2", "message": "Use `||` instead of `or`"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/17ae48c0c03b5208cd0846609bcbb60b90d5b8fa", "message": "Update docs to reflect new defaults"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1b0f249f4fcb11ca1fbfd90f2bca5daa56b945cd", "message": "Merge pull request #344 from diddeb/the-smallest-typo\n\nThe smallest typo in comments/README.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0ca78f141223b3ca11cbd7760c793354dff46254", "message": "Merge branch 'master' into samesite-default-to-lax"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1e7d777538b9c84530aa32913bb26d83e2083250", "message": "ugh, ruby versions"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/547741b66b50015eb9e582e5fa152b55e4812d89", "message": "Default samesite: true to mean SameSite=Lax instead of Strict"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/6379fa00ce3ccaa9cefa562a19b886c08d40c7e7", "message": "better post install message"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/067936443865d87b21cda1986ec6b4d8cba59fe0", "message": "post install message + more docs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f6b0e08a056639e064867231518e428eff085e44", "message": "Merge pull request #342 from twitter/deprecations\n\n[4.x prep] Deprecations"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/dfe67310c3ac51b5c59c7e656cfb25a5441a9bd4", "message": "Update README.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0534134ec8433fb1df23a8a1338d3c3ef4219c94", "message": "[skip ci] add docs about removed #secure_cookies API"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f6f6aba433e6a3624472fef931c00aa9955a2d62", "message": "don't support the #secure_cookies method"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a9985724042160b8dae86e1987d696e58429c072", "message": "raise errors when child/frame-src values don't match"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/4815c263b820f61045789e9b991b4882f8ba415f", "message": "more notes around CSP deprecated changes"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0f4ef2343ca642b9381c9945372db84032eaa34f", "message": "Merge branch 'master' into deprecations"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/5f7d8050419d69399f0dbe069f646c9ca8bdeab2", "message": "make deprecations around setting CSP out of order turn into exceptions"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/b23ef8f840c948faa8ebb6c834a1922972ddee76", "message": "Merge pull request #340 from twitter/default-csp\n\n[4.x prep] Require a script-src, change default CSP"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f9ec5bf781b9d0803da96959164ae50380166e39", "message": "Create upgrading-to-4-0.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/517493e83ba525a7e5fe160adf926b1c838dacb4", "message": "Add note about upcoming 4.x line in readme"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/17a1677993aab1d057c8a8da61ddd5bf3c69e8e0", "message": "set a more lenient img-src"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/3e3f99c016f816ae4889d2acd33f930813eb6f27", "message": "fix guard for recent rubies\""}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/fed16c63d9c8c12272fc53272c516bb5e218fb4d", "message": "Merge pull request #339 from carlosantoniodasilva/manifest-src\n\nUpdate directives to add `manifest-src` to Chrome/Firefox"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1b94fe06f7f9a19604f76068de89705ff4f63c56", "message": "add docs around breaking changes"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/cecc908bda43d1c5416093539366e32d40c8bb65", "message": "Update tests to reflect new defaults/required settings"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/fb3da85c2cfef311043dbdf7a979fb0849aa0c17", "message": "use default csp that is more strict but shouldn't break things terribly"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/30d0582e3a89a81c0b91012781d30e6b7483d15b", "message": "Merge pull request #337 from anglinb/pin_dependency\n\nFixes #336  Pins dependency version of useragent"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f186589288d87eb4068a4b2c452bd2977b0d9d39", "message": "Update CONTRIBUTING.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/24340c89b8ceca1060038b36e8278393e90154e0", "message": "Merge pull request #332 from stve/rubocop\n\nAdd RuboCop"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/6033c85519c182257cf5536df12818e40cb56d59", "message": "Merge pull request #333 from twitter/unsupported-rubies\n\nRemove unsupported rubies"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/81821b22daf76541573ce6952c675588da1dc238", "message": "Update .travis.yml"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/77214a376d5ca1624d1fc7f364826cf6c3e67e58", "message": "Drop support for unsupported rubies"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0e5eba732ead44a8caf11b048e5edd3b9eec1b8a", "message": "Merge pull request #330 from stve/warnings\n\nEnable verbose mode in tests"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2dcc7d55fe3dbc7931f8d55aa65f91d71856a413", "message": "Merge pull request #329 from scouttyg/updated-documentation-for-hashes\n\nUpdated a few places where wrong wordage was being used for where and\u2026"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0966fb9088c93453bb97fa77f5f2531cd9fa0055", "message": "bump 3.6.4"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7ad53c023e960ac86bdb24747914508b9e9be102", "message": "Merge pull request #325 from bobjflong/BL/f\n\nprevent loss of frame_src/child_src when using append_content_securit\u2026"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/dc972de16fe97db29ae65f6d1543cd58c0629e03", "message": "bump to 3.6.3"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/d9bed91704afb688221663a38b10ec86bfd56e83", "message": "Create CONTRIBUTING.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/466664bd70e1641c0d61e3a657553120c1c905f3", "message": "Create CODE_OF_CONDUCT.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/fb27fd314e2f2cc4099747de12776e758f5db008", "message": "Merge pull request #324 from bobjflong/BL/dep\n\nremove deprecation warning about frame_src"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/090b87d349fbff86a02023ae77695e165d50f36f", "message": "version bump"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/ae1d20d11d5b5eae43dc7aa0a1c308f6dc980adb", "message": "update changelog for 3.6.2"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/b69b1fae3754d37522cd1f7289076feba5b2e707", "message": "comment out report_only: true"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/ad5ac24df7d68b4c4d955dde1a98bd8931e36695", "message": "Merge pull request #319 from necolt/safari10-csp2\n\nAdded CSP2 support for Safari 10+"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/68ea150778699f6e92afcefd3d185bdcdfb1df5e", "message": "Merge pull request #306 from connorshea/test-ruby-23-24\n\nAdd Ruby 2.3 and 2.4 to test matrix."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/5638cb03344a8b5f02024735143d2261cff08a94", "message": "Update LICENSE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7ac8eb98b775f18b854ef3a71deab646f4aa65f4", "message": "bump to 3.6.1"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/fd559f2acc591c04e0c9563e3f9e857e7ce6e6c9", "message": "Merge pull request #313 from carlosantoniodasilva/memory-improvements\n\nReduce object allocations: memory improvements"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f8a75d994b6cc1b04487eafa5c6a7ae2d6f9f50b", "message": "Merge pull request #311 from BePsvPT-Fork/patch-1\n\nAdd link to php secure-headers"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/c2e84e8c4e083f58305466b94b3defe193e9714b", "message": "Merge pull request #310 from lgarron/readme-no-preload\n\nRemove `preload` from the default HSTS configuration in the README."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1b2baf2211e9b16448e72751ef82808400535e96", "message": "3.6.0 bump (includes clear-site-data header support)"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/acb48e82d98a1aa8c77b273eb023f4cfabaed860", "message": "Merge pull request #308 from mastahyeti/clear-site-data\n\nAdd support for Clear-Site-Data header"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/4d128a87e05683d6313ce29c2611f8a0c37938a2", "message": "add functionality to validate/set the header via the config"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/886305c704fe67a3546ffd1c2d710a03a68e5a82", "message": "Delete index.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/51d75bff8c2c96f43042ab3392323790ef2d1b1f", "message": "make links to docs anchored at /docs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2c8e683e29765b9611c274d6ba83919ac2ad6749", "message": "Merge pull request #305 from twitter/docs\n\nMicrodocs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/d8591444d031ddf89d73f78b1a9ba22e930859c4", "message": "add more to the main readme, make the sinatra config a standalone file"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/96ceea6790bff63082809b067c0b4618889ac6f3", "message": "link the README as the docs index file"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/c6202a9de85e585059c2daa966fbabfea5470a39", "message": "move content of configuration.md into main README"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a590ef4fa179cf041d0dd0a42cccd6901294b89c", "message": "Merge branch 'master' into docs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a8531e7edfcba470c94e22f62946122cadc0df52", "message": "version bump and docs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/8007c4fb3a683a7b9fe06f9060d86b582e292b22", "message": "Merge pull request #303 from twitter/strict-dynamic\n\nquick and dirty strict-dynamic support'"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/e8bf322846a910f6c02a3a435795d83f305430c0", "message": "quick and dirty strict-dynamic support'"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/ec4a1c89a5d4baa048414d6e325b510cd5db6329", "message": "Add google CSP resources\n\n/cc @mikispag"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/b37c6fad00e18bcaef0d35ec6a45f0ba2cdd9a00", "message": "Merge pull request #301 from stve/useragent\n\nhandle null useragent version"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2b82324b21f07e6f5fd9b0462a47cbfffaa76ab5", "message": "Merge pull request #297 from jeremydurham/add-missing-referrer-policies\n\nAdd missing Referrer Policies"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/04f42abab0c7cb617d99165239eb44b7b2aaf2fa", "message": "update changelog tag"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/85760fe6ad19cc8ae723a4b95bd13792c200d17d", "message": "bump to v3.5.0"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/530b6b52024f8b8b145bcac10cf6dd5553a2e2c9", "message": "Merge pull request #296 from anujdas/fix_secure_cookies\n\nSet secure cookies on interleaved http/https calls correctly"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/df0364633e6fd3b638dc3f5238b5a009204a96ba", "message": "Merge pull request #294 from twitter/public-nonce-check\n\nmake the nonce support helper method public"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/680e7e9de740de92b3d88f06cf663529fce7d144", "message": "make the nonce support helper method public"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7801462a4ea6c83479d7c38f6820e56177610745", "message": "Merge pull request #292 from twitter/view_helper\n\nadd content_security_policy_script/style_nonce to view helper"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a85b80cca27106f357900f0ac930caec30f6be74", "message": "Merge pull request #293 from twitter/safari-nonce-support\n\nsafari 10 supports nonces"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/6f0c453411042ed5093b0957d756cca6ff5a6586", "message": "add content_security_policy_script/style_nonce to view helper"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/af338e82d89db7e35f5daee9c067e41185f32709", "message": "safari 10 supports nonces"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f543be044f5630b10591bee7ffe23c695f6a0e8c", "message": "Remove \"use\" section because everyone knows how to do this and would use bundler anyways."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0f98c66ba0af8815a7cb163b24f12fc263167a17", "message": "Merge pull request #290 from lalithr95/patch-1\n\nFix readme"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/20fd0674e12f8c17b0d17de34397795f3cee38c8", "message": "Merge pull request #291 from twitter/fix-ci\n\nrestrict term-ansicolor so it works on 1.9"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0fd8e694fd5c7ac5ed3759712495ab48f979051b", "message": "Merge pull request #288 from btsai/master\n\nFixing README documentation on csp_report_only"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/3d25454e6a20fd48a27d401248f1b4d4138c93cc", "message": "bump for prerelease w/ two csp headers"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9ee96933b1af157fc73f63c7d07588b24c75ab0c", "message": "Merge pull request #281 from twitter/dynamic-csp-config-abstraction\n\nSetting two CSP headers, abstract out dynamic pieces"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9a3c729554fa525069778488efb9b8e7965bceff", "message": "Merge branch 'master' into dynamic-csp-config-abstraction"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f083d8ce92c158bcf3c6566a085b568fc5a42a52", "message": "version bump and docs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/310da39fa4247fb9a1b9237b8893d35e8e22ece2", "message": "Merge pull request #287 from twitter/handle-nonces-for-undefined-directives\n\nhandle the case where nonces weren't populated for default csp config\u2026"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/6ad84a79951a7762ec046267ec8a61f331af462c", "message": "Merge branch 'master' into handle-nonces-for-undefined-directives"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/16b0b0c92a724406838be65099d294027e67eb85", "message": "handle the case where nonces weren't populated for default csp configs using the nonce helpers"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/db82b5806f141b55a9b2020d5e7fe4a09bdd2d12", "message": "Merge pull request #283 from twitter/named-appends\n\nadd support for named appends"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7abe764d80762c6367736efd27855fa403151f84", "message": "use @ instead of @@"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2b06ada4fb696f2e68c6b3ea73c37ade3acdb6da", "message": "add support for named configs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/3225ed600306d8c7e90ecf4d6849a9f17e0d9ac0", "message": "infer default policies when incomplete CSP configuration is supplied."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7600b900c6663883a321719882616652f72e6386", "message": "add guard ensuring people aren't setting csp_report_only with report_only: false"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/dc1bbac3c878222c92e503890cba2c5a440d67d3", "message": "ensure that the deprecated way of using the report_only header still works :)"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/8e14907adb94048a8b8ca0d3cbc6b51b60642d5b", "message": "don't modify the original config object, removing the need to dup it"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1b80f85be36152c3d25f7ff699f51422c3c3ffa4", "message": "inline method so we're not creating UserAgent objects everywhere"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/6d9d76a7b22ee28374b0da21a56d02b53269a14b", "message": "remove unnecessary special handling of CSP/CSPRO now that they are separate classes"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9112c625e7220fa78df567ff54f45ef6cd5ca5b8", "message": "remove CSP/CSPRO shortcut constants"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1e91f7e0a5bce97136ee08d715c2e1b46ac391e9", "message": "further separate CSP from CSPRO"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/af0c26c9a0dc771e949bf10aef8b575f352485d5", "message": "remove last bits of == OPT_OUT"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7536caeb4d9083870fe1f632f703416200a86d1d", "message": "get rid of even more != OPT_OUT"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/8c1c019fe6261eba6090f2329cec6d02668390a9", "message": "use #opt_out? helper in another location again"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/3afd1ddabbe7442b4083d87658142feb7e74ec0b", "message": "use #opt_out? helper in another location"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2a9021c36e5432f1a23e0018cfa7237e848978ea", "message": "update docs to show csp/cspro config"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/df9631015f4ddd225795825b1a31137c42ebbd99", "message": "very minor cleanup"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a77ce142ae421b39241ce4d568f4f877d808b1ba", "message": "remove #idempotent_additions? because it's irrelevent now"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/60103a11c3491657bbd2b19797fc7be6b34d8984", "message": "replace some == OPT_OUT with #opt_out?"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a1d74cf9d53e1b9df0a68a45589b83bdea846279", "message": "Merge pull request #282 from olivierlacan/patch-1\n\nUse SVG badges"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/92dd4e58859767f7ec297cbcb9677ff034f8a851", "message": "add tests for inferring which policy to modify"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/c7a57f36951810f10612de217a36bd53f00f6b6c", "message": "ensure that config objects are only dup'd when necessary"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/d19a55134bd9fc488948f5d63b06eb5216b4a2b8", "message": "don't specify the target since that's not the point of the test"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/40313cef1f77b71e76c57e0bed971bcfe35dd40c", "message": "add tests for overriding with two headers"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/893d6e9aa9a4177c24c36b87dcfac2d7c4ad8ef7", "message": "get append/override working"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/dbea8c6bf663de8bf5c91f17fca3899f67efbea8", "message": "specs for the configuration class now pass"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/27f27439de8b7e12c6f15111c825bc66395fd0d3", "message": "base spec is passing"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/89cac3d1b37fb6c29bc5b81aaed745690e09f82a", "message": "Merge branch 'master' into dynamic-csp-config-abstraction"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/023008df01fecbf285fc15adcedf351be12d22dd", "message": "Merge pull request #279 from lalithr95/patch-1\n\nMinor change in domain"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/e9fa410a7ba14b2607530ec84b5fba8f2b5633ca", "message": "wip"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/48f92000870478d1156e80a2e24241b8b40a66f2", "message": "initial work for making csp config an actual class"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/388a12b543bcf7655a381681448b5cc69ea61321", "message": "Merge branch 'master' into dynamic-csp-config-abstraction"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/76e60a6aaa2d929d2493a6c5c7c949b4c323e279", "message": "add docs about child/frame-src handling"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/4d311143bbf2cde1ed6f642e7748ac6bc07fc655", "message": "bump to 3.4.0 and include child/frame-src handling"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/72a74ccd97190bba2eb6b355937d6c9a6072c5d1", "message": "wip'"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7f581bccfdb4460201c6023e2f489b8f4468229e", "message": "get csp tests passing"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2e01a7fdca8c1075d738af595309d9374c49ec68", "message": "wip"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/526467050bd9a6b391dd34efda95d180c0998f3a", "message": "add report-only functionality"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0cc560c0c79db1368723c80c43f07cd8812cb2fa", "message": "Merge pull request #272 from koenpunt/patch-1\n\nhook include of helper to loading of ActionView"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9bf22e772e6d84f79c97e6afbd53a46a7cf8612b", "message": "Add basic checklist to PR template"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/4e9da9dc6976b057137e2fe31a08c9818ab2d622", "message": "Merge pull request #270 from twitter/ff-child-frame-src\n\nHandle child/frame-src gracefully across different browsers and versions"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/51aa52edb1583c94b1de88bd39c64935bd3658d9", "message": "Create PULL_REQUEST_TEMPLATE.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/cc281302b7901719d1030bc43ee845c10e5ced07", "message": "Create ISSUE_TEMPLATE.md"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/951beee9cb375a5970af795227c2aaace9ed9568", "message": "lock the json gem to a 1.9.3-friendly version"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/6de28f23156f849218390757df2d598edb57d119", "message": "lock test rack at 1.x.x"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9b47401e729fa0975f0df4d3ca33b88daf0e06da", "message": "Merge branch 'master' into ff-child-frame-src"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/883779c0fe8b14bb5c6c5f5a65ef12437bb0033a", "message": "remove reference to frame-src in README"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/6803f3b66df35441c9fa0c701ba8f198ae333754", "message": "add more clarity around behavior when child and frame-src directives are supplied"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a3aca2c71431c0602658ec0e6bea2bd00ab8323c", "message": "add tests showing each directives specific value. also demonstrats copying child-src to frame-src."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/697f5a9ccf49714751d1f0f1f08c2afa3c315142", "message": "Add the \"FirefoxTransitional\" CSP variation\n\nThis ensures it can be cached."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9a6c91381f478f7744a29d4bc3822497e290a457", "message": "remove tags"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/03ada2f15158eada6245ef126c0c1cf967d20a13", "message": "Merge pull request #267 from xtian/wss\n\nwws: -> wss:"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/ab122c2ef291a4f6860930e61cd9c3da90f3d364", "message": "wip"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7e7780319b5022080440e34d256cd160fb5c50e2", "message": "Merge pull request #263 from jurre/patch-1\n\nCorrect usage of content_security_policy_nonce in upgrade docs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7604b5bfa6852e5ed90b54cd7a60fcba99f86bd2", "message": "Merge pull request #261 from stve/x-frame-options-rfc\n\nupdate x-frame-options link to RFC"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/17e199d62b515b7c9a622b53214303217c872bef", "message": "bump to 3.3.2"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0b198810b94c6da3885c6e4c9e0ffc70dd530291", "message": "Merge pull request #259 from dankohn/dan-257-defined-constants\n\nAlternative fix for already initialized constant"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/13f0c5157a89c0c7056a474adea95de86f8f0f2f", "message": "Merge pull request #255 from davidhan527/master\n\nAdd updates to the upgrade to 3.0 readme"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/945fbae42c431fb3cb632459a57a2432886f0ad3", "message": "version bump for 3.3.1"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0d054b7d817747d6e27e2ed5fa96943e8b3af443", "message": "Merge pull request #253 from stefansundin/fix-false-boolean\n\nFix false booleans being included in the CSP directive"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/b11b7f804a0ba914a2233fd9cd33399ce05b1052", "message": "Merge pull request #252 from stefansundin/master\n\nFix minor papercuts"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/e8f51038759fd4ad71cf4a3815ac4a68105b9e8e", "message": "Mention preserve_schemes per https://github.com/twitter/secureheaders/issues/251#issuecomment-217595827"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/eff3da9721aae64c25d31b890a2817c21907af96", "message": "3.3.0 version bump and docs"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/c09b6dec7a73760fbdb478383a3c926b18db8bbe", "message": "Merge pull request #246 from twitter/hpkp-warn\n\nWarn if HPKP report host is the same as the current host"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/681c8af6e16c8843ce8d0817b1a3704972629ba0", "message": "Merge branch 'master' into hpkp-warn"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/d3aac03bd25d735be71829a796979c3512513d1e", "message": "Merge pull request #247 from twitter/edge-directives\n\nfilter unsupported Edge directives"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a6f806692bc8a491d76ad39b6f44959fd0976302", "message": "Merge pull request #249 from tomgilligan/master\n\nAdd support for Referrer Policy header"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/ede35f914fe5539f50bf87d3720769fd9c74825a", "message": "Merge pull request #244 from stve/tests\n\nAdditional tests"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/5908b0b14bb66d4b253877758cebfc7d8bd4fc33", "message": "filter unsupported Edge directives"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/ef2d12380ca9ee059775d6476bc411d13b766b7e", "message": "extract report_host for clarity"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/10b3074bf8d45e3cd89bc3341a74e010070493f6", "message": "Warn if HPKP report host is the same as the current host"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/e1321c5123f53b7bbc3854ba0770f4d4ae98d19e", "message": "Merge pull request #245 from ivanreese/patch-1\n\nFix a formatting error in the changelog"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/382", "title": "unconditionally send nonces and unsafe-inline when working with nonces", "body": "Fixes #381 \r\n\r\n/cc @jasssonpet can you see if this resolves your issue?\r\n\r\n## All PRs:\r\n\r\n* [x] Has tests\r\n* [x] Documentation updated N/A\r\n\r\nThis pull request stops guessing whether or not a UA supports nonces and relies on the backwards-compatible behavior of sending `'unsafe-inline'` with every `'nonce-`. \r\n\r\nThe reason for sniffing was mostly because Safari < 9 would generate console messages about an unknown directive value (`nonce-*`). Safari 9 is two versions behind so in theory fewer people are using it. Given the bugs UA sniffing like this has caused, I'm less sympathetic to those on unsupported browsers craving a clean console. \r\n\r\n", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/271", "title": "add support for 'require-sri-for' CSP directive", "body": "Fixes #264\n## All PRs:\n- [x] Has tests\n- [x] Documentation updated\n## Adding a new CSP directive\n- Is the directive supported by any user agent? If so, which?\n  - Chrome vSomething, Firefox 50+\n- What does it do?\n  - Ensures that all assets (scripts and styles for now) loaded have a valid integrity attribute per SRI\n- What are the valid values for the directive?\n  - `script` and `style` for now (unquoted, right?)\n\nSee https://codereview.chromium.org/2056183002/ and https://frederik-braun.com/new-csp-directive-to-make-subresource-integrity-mandatory-require-sri-for.html and https://gist.github.com/mozfreddyb/f4b7e79ab629a3ecff663f33d9a56e82\n\n/cc https://github.com/w3c/webappsec-subresource-integrity/pull/32\n", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12689232", "body": "\"so that \"require secure_headers\" works outside of a Rails app\"\n\nWant. Hadn't tried. Thanks.\n\n@sikachu thanks, while renaming things sucks, not following conventions sucks more :poop: any other changes? Feel free to submit a pull request, or I'll get to it tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12689232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12689259", "body": "Wat? totally a bug. :csp => false should mean no header is assigned at all. Thanks! Will fix tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12689259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12689274", "body": "Just to be clear, did you set :csp => false in the controller or in a .configure block?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12689274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12689310", "body": "Also escaped the hyphens. Thanks for the pull request!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12689310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707222", "body": "@bmaland in my experience the lib is auto required by any call to `Bundler.require` which is standard in Rails 3 (in application.rb), but not 2. Am I failing on some other bundler logic somewhere? I usually require it in the initializer for Rails 2\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707542", "body": "Changing the name had no effect on this issue for me. I'm assuming the naming is unrelated to the issue? Your callon the PR, ideally I would want to support both with deprecation warnings until 1.0\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707641", "body": "Confirmed. It is supplying the default value so it thinks it's receiving nil as the value to :csp. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12728438", "body": "One last thing, I think it should be `secure_headers`, emphasis on the pluralization of \"header\" since we are applying multiple headers (in the majority of cases).\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12728438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12766481", "body": "Not too familiar with sinatra, but you can use the set_x_header methods directly if included. I had a snippet, will post and add to the readme\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12766481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12766512", "body": "``` ruby\nrequire 'rubygems'\nrequire 'sinatra'\nrequire 'haml'\nrequire 'secure_headers'\n\n::SecureHeaders::Configuration.configure do |config|\n  config.hsts = {:max_age => 99, :include_subdomains => true}\n  config.x_frame_options = 'DENY'\n  config.x_content_type_options = \"nosniff\"\n  config.x_xss_protection = {:value => '1', :mode => false}\n  config.csp = {\n    :default_src => \"https://* inline eval\",\n    # ALWAYS supply a full URL for report URIs\n    :report_uri => 'https://example.com/uri-directive',\n    :img_src => \"https://* data:\",\n    :frame_src => \"https://* http://*.twimg.com http://itunes.apple.com\"\n  }\nend\n\nclass Donkey < Sinatra::Application\n  include SecureHeaders\n  set :root, APP_ROOT\n\n  get '/' do\n    set_csp_header(request, nil)\n    haml :index\n  end\n\nend\n\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12766512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12766531", "body": "Can you de-jank that and submit a PR? I'll add it to the readme, just don't wan to upset the sinatra users with my jank\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12766531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968241", "body": ":+1: \n\nDefinitely what I wanted to do. \n\nRE: browser_extensions, there's some debate as to whether this will be part of the spec (i.e. don't report on extension activities at all). It might be premature abstraction, which I'm not completely against. Likely the method to manipulate extensions across browsers will not be standardized very soon which justifies this entirely.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968397", "body": "Ha, thanks for the clarification.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968649", "body": "While you're at it, let me know if you figure out why #3 wasn't caught in tests? I thought I had tests for exactly that. Either they are invalid or missing.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968942", "body": "fwiw that code is some jank. It's used in different contexts and for different purposes IIRC\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12972717", "body": "Not to put any pressure on you... but I was about to integrate the code to apply two headers (on that enforces, and an \"experimental\" one that only generates reports).\n\nWe will have a mega conflict, but I can easily resolve my conflicts with this change so I'll hold off until then.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12972717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12973827", "body": "Updating readme w/ this example\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12973827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12973984", "body": "Finished in 0.23764 seconds\n118 examples, 0 failures\n\nCoverage report generated for RSpec to /home/travis/build/twitter/secureheaders/coverage. 364 / 375 LOC (97.07%) covered.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12973984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13023490", "body": "just fyi You can work around this by moving to a .configure block\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13023490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13052536", "body": "Woot. moar proper.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13052536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13275543", "body": "just a demo\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13275543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13276847", "body": "Use feature branches, don't work off master\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13276847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13276868", "body": "Closed by https://github.com/twitter/secureheaders/pull/18\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13276868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13364256", "body": "What @bertomartin mentions is how it is meant to be used. Currently there is a bug that settings included with `ensure_security_headers` in `ApplicationController` will be ignored, but the `ensure_security_headers` is still required regardless.\n\nIt will be renamed to be auto-included by bundler and the \"settings in app controller don't work\" bug will be fixed next release. PRs welcome.\n\nSettings in non-ApplicationController-controllers will still work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13364256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13364330", "body": "There is still a merge conflict. Try creating a new branch off master and start over.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13364330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13440490", "body": "You might need to\n\n`require 'secure_headers'` dude to poor naming. Will be fixed in next\nrelease\n\nNeil\nOn Feb 12, 2013 7:46 AM, \"coderdave\" notifications@github.com wrote:\n\n> I created an initializer following the suggestion in the readme. However\n> when I start the rails server, I get:\n> /config/initializers/secure_headers.rb:1:in `': uninitialized constant\n> SecureHeaders (NameError)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/twitter/secureheaders/issues/23.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13440490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13464973", "body": "What version of rails? \n\nCurrently, 3.0 doesn't work, but 3.1+ will.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13464973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13465971", "body": "perhaps \n\n`include SecureHeaders` before that will work.\n\nLet me know! I plan on releasing a bugfix release today :rocket: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13465971/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472359", "body": "try secure_headers 0.1.0 (note the gem name change). I think it should work just fine.\n\nThanks!\n\n> I'm use Rails 3.2.12 or whatever we're up to now. :)\n\n:laughing: Fun year, eh?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472371", "body": "Try secure_headers 0.1.0 (note the name change)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472391", "body": "Wanna give secure_headers 0.1.0 a chance? (note the name change)\n\nYour bug should be fixed!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472417", "body": "I believe I've addressed all comments in secure_headers 0.1.0 (note the name change). Feel free to reopen if that's not the case!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472427", "body": "please reopen if this failed to work\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472430", "body": "please reopen if this failed to work\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472436", "body": "please reopen if this failed to work\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13473501", "body": "done.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13473501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13473569", "body": "Just rebased, conflicts were not trivial to resolve :crying_cat_face:, as in I gave up quickly. I'll try to take a stab at this soon\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13473569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13477840", "body": "Did the include method work? Sounds like the railtie isn't working.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13477840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13477876", "body": "Is the code public?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13477876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13530252", "body": "The `include` goes in your application controller, before the `ensure_security_headers` but honestly this shouldn't be happening and indicates another bug.\n\nI don't imagine the entire application is available?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13530252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13536727", "body": "Awesome. I'll update the docs if it's unclear\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13536727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13574296", "body": "`@ivar` set to nil is actually the preferred way to use things.\n\nI think this gist clears up both issues: https://gist.github.com/oreoshake/4955688\n\n`:options` is definitely named wrong, `defined?` not necessary\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13574296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13589074", "body": "Updated diff, nil is actually a valid case here so the fall through is fine\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13589074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13589757", "body": "> if @secure_headers_options is nil, then it will call up to the parent class. Is this correct behavior? \n\nPrecisely :sweat_smile:\n\nP.S. That horse looks alive to me. Let's not be violent.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13589757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13731331", "body": "Yo, just merge in the smelly_csp branch and this should be good :) just merged in real_tests and everything but travis is working! (I think i know what is causing travis fail)\n\nSplitting up the tests into separate classes would be awesome but I think the genericizing (aka coupling) of the classes could be justifiable for now :deciduous_tree: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13731331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13735603", "body": "Re: 2) I was actually working on further splitting that out so that the headers can be built without the request object. Currently, it depends on it for a couple of reasons. Ideally we would be able to supply things like :ssl => true instead of parsing the request.\n\nI'm of the opinion that there is no value in the version-specific firefox stuff so I want to rip it out too. Separate ticket.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13735603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13808110", "body": "I like the new impl more. The normalize_reporting_endpoint is a little janky, but it's definitely an improvement.\n\n> See if you have an implementation preference. I will say in the new branch, I was having trouble pushing #normalize_reporting_endpoint down into a strategy so that says something.\n\nMeh no biggie, I don't think there's anything horribly wrong w/ that. I like the strategy pattern. The tests pass. I'm going to do some manual testing but it looks like it's ready to merge if you wanna open a PR\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13808110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13811943", "body": "Closed by 13e8bbda6f5bb2bda9b9e7b46d7e3a2b8070c3ee\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13811943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13813899", "body": "Merged in your other branch in 29cba15fd2b3cb86a7ae14997b31ca73bf5fbeba\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13813899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13813910", "body": "merged your other branch in 29cba15fd2b3cb86a7ae14997b31ca73bf5fbeba\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13813910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13813929", "body": "Merged in your other branch in 29cba15fd2b3cb86a7ae14997b31ca73bf5fbeba\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13813929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13814057", "body": "lrn2github\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13814057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13814500", "body": "allows\n\n```\nirb(main):001:0> config = {:script_src=>\"inline self\", :img_src=>\"self\", :default_src=>\"self\", :http_additions=>{:default_src=>\"http://*\"}}\n\nirb(main):002:0> SecureHeaders::ContentSecurityPolicy.new(config, :ua => \"Firefox\", :ssl => false).value\n=> \"allow 'self' chrome-extension: http://*; options inline-script; font-src 'self' chrome-extension: http://*; frame-ancestors 'self' chrome-extension: http://*; frame-src 'self' chrome-extension: http://*; img-src 'self' chrome-extension: data:; media-src 'self' chrome-extension: http://*; object-src 'self' chrome-extension: http://*; script-src 'self' chrome-extension:; style-src 'self' chrome-extension: http://*; xhr-src 'self' chrome-extension: http://*;\"\n\nirb(main):003:0> SecureHeaders::ContentSecurityPolicy.new(config, :ua => \"Chrome\", :ssl => false).value\n=> \"default-src 'self' chrome-extension: http://*; connect-src 'self' chrome-extension: http://*; font-src 'self' chrome-extension: http://*; frame-src 'self' chrome-extension: http://*; img-src 'self' chrome-extension: data:; media-src 'self' chrome-extension: http://*; object-src 'self' chrome-extension: http://*; script-src 'unsafe-inline' 'self' chrome-extension:; style-src 'self' chrome-extension: http://*;\"\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13814500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15536333", "body": "Ah, good eye. In real life, people would expect that to work either way. If you want to fix that too, double the :smile: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15536333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15536867", "body": "I'm just going to make the other change, it's quick. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15536867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15555051", "body": "99% of the time, no, the `before_filter` is hidden behind `ensure_security_headers`. \n\nHowever, anyone calling set_csp_header (included in the sinatra/padrino examples) will have a problem since that API changed. I'll add a check to make that backwards compatible.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15555051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16074825", "body": "Was taken care of in d641975eb3e0380ad372b3563a257fdba9773dc9\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16074825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16151043", "body": "Thanks! I'll release a new version.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16151043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16185553", "body": "That's very weird that the behavior is different. The Gemfile.lock should ensure you're using the same versions... Anyhow, try the new gem as @reedloden suggested and let me know if the issue persists. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16185553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16199297", "body": "Sorry for taking so long to notice this, I did not notice this issue was open at all :crying_cat_face: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16199297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16637416", "body": "Good call (even if I don't like script-nonce :wink:)\n\nNow to get script-hash into the spec...\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16637416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17350228", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17350228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17499317", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17499317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17499363", "body": "Please reopen if this is still an issue\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17499363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17644438", "body": "Woot\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17644438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17644641", "body": "It should only set that header for IE https://github.com/twitter/secureheaders/blob/master/lib/secure_headers.rb#L88\n\nIs there another issue here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17644641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17679450", "body": "> The file is not served with the HTTP header X-Content-Type-Options: nosniff\n\nWould that render the extension non-installable, and that's the desired effect? Not opposed to it at all, just trying to understand the use case.\n\nIt's a simple change, perhaps another flag in the settings for XCTO. `\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17679450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17688882", "body": "> Any objection to a PR that adds brwsr.chrome? to the check as well? That will effectively handle this specific case, too, as it'll get sent to all Chrome users for all requests.\n\n:shipit:\n\nI had no idea chrome supported that header. Safari too? Thanks for the info!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17688882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/18154734", "body": "Thanks for the test cleanup too!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/18154734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/18636925", "body": "https://hacks.mozilla.org/2013/05/content-security-policy-1-0-lands-in-firefox-aurora/\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/18636925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19477714", "body": "Version 25+ http://blog.chromium.org/2013/01/content-security-policy-and-shadow-dom.html\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19477714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19561705", "body": "Seems legit to me!\n\n```\n    def broken_implementation?(browser)\n      return browser.ios5? || (browser.safari? && browser.version == 5)\n    end\n```\n\nI'll fix this in the next release (coming today)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19561705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19578151", "body": "fixed in master\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19578151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19582782", "body": "false.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19582782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23345084", "body": "Tthank yyou!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23345084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23771507", "body": "Super hacky, no tests, no haml support(?), only works for rails 3.1+. Not going to supply a Capistrano task for now... suggesting guard-rake because if somehow you forgot to update your hashes before deploy... clearly you didn't run/have integration tests. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23771507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23775048", "body": "Only works if entire tag is on one line lol. Don't use scan.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23775048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23882636", "body": "You're right. This was something that was too specific to the app that questioned it and is not good in general.  \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23882636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23882659", "body": "Also, 'duh' moment on the content-type issue.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23882659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23972712", "body": "Writeup of the why and how of this branch: http://nmatatal.blogspot.com/2013/09/how-my-script-hash-poc-works.html\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23972712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/24296802", "body": "JS equivalent hash computation with jQuery and cryptojs\n\n``` javascript\n$.each($('script'), function(index, x) { console.log(CryptoJS.SHA256(x.innerHTML).toString(CryptoJS.enc.Base64));});\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/24296802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26078560", "body": "Ha, yes. Tunnel vision.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26078560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26346468", "body": "BLINK (renderer for Chrome) is dropping support soon, looks like version 33. https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/3AaCbkdGSPs/pnQO579qrNkJ\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26346468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26346758", "body": "Also, this was mainly motivated by the fact that Firefox fails closed. That jank aka code can go away. \n\nThis leaves the open question: \"What about Safari?\" who only plans to support the X-Webkit-CSP header for now.\n\nStill waiting for numbers on Firefox upgrade paths.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26346758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26348046", "body": "This PoC has served it's purpose\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26348046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26348173", "body": "bleh\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26348173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26348194", "body": "Not this tools job. Bleh.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26348194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26349311", "body": "If you point your report URI to any endpoint on your application, the CSP report will show up in your logs.\n\nI had a long drawn out answer...\n\nThis leads me back to \"there are other tools designed to do this\".\n\nMy biggest concern is storage. What would be the best way of saying ruby -e \"store(data)\" that works across all ruby applications? \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26349311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26372265", "body": "Yeah, I'll just keep it simple and support ActiveRecord for now (unless there's an abstraction layer I don't know about). \n\nBasically `be rails g scaffold csp` with polish\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26372265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/27735821", "body": "@bemurphy this rips out a lot of your code. The separation really helped :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/27735821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28240930", "body": "Fixed in #75 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28240930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28240967", "body": "Just kidding, #75 dropped all browser sniffing\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28240967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28410586", "body": ">  but it 404s on that endpoint when in a non-development environment\n\nouch. that's really only when it matters.\n\nI'll look into this, I haven't heard of it happening and `consider_all_requests_local = true` should not have any effect. \n\nDoes adding  `post SecureHeaders::ContentSecurityPolicy::FF_CSP_ENDPOINT => \"content_security_policy#scribe\"` to your routes make any difference?\n\nThis is very odd indeed. If your site is all ssl, this shouldn't matter as it should never hit that endpoint.\n\nCan you post your configuration? I might have time to get to this in the next week or so but I'm a little unsure how this could happen.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28410586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/29320344", "body": "Bad Crypto :tm:\n\nThanks for pointing this out. I think I'm just going to rip out that chunk entirely.\n\nJustification: that was only needed so that you could forward CSP reports from Firefox (which will not post unless the scheme/TLD+1/port match). This is going to eventually go away (https://bugzilla.mozilla.org/show_bug.cgi?id=843311) has been nothing but a headache and is responsible for half of the complexity of the code. There is support for protocol relative URLs so this only affects people posting reports to an entirely different domain.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/29320344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30790837", "body": "Chrome shouldn't be using this... that's a bigger issue. Chrome can post cross-origin no problem. This hack is only for Firefox.\n\nUgh, why did they change the content type.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30790837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30790863", "body": "Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=843311\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30790863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30799305", "body": "Can you post your config? Is your report-uri set to the forwarding endpoint (which would be wrong)?\n\n```\nFirefox does not support cross-origin CSP reports. If we are using Firefox, AND the value for :report_uri does not satisfy the same-origin requirements, we will instead forward to an internal endpoint (FF_CSP_ENDPOINT). This is also the case if :report_uri only contains a path, which we assume will be cross host. This endpoint will in turn forward the request to the value in :forward_endpoint without restriction. More information can be found in the \"Note on Firefox handling of CSP\" section.\n```\n\nRelated code\n\n```\ndef normalize_reporting_endpoint\n  if @ua && @ua =~ /Firefox/\n    if same_origin? || report_uri.nil? || URI.parse(report_uri).host.nil?\n      return\n    end\n\n    if forward_endpoint\n      @report_uri = FF_CSP_ENDPOINT\n    end\n  end\nend\n```\n\nAlso, why not just submit a pull request with the above code (without the use of metaprogramming)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30799305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30867607", "body": "Looks good but merge conflict?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30867607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30892679", "body": "Thanks, I'll push a new version shortly\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30892679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/32655309", "body": "Reopening because someone else might be motivated to make this a thing before I get to it. \n\nSome people would rather support dynamic hashing (in development only) rather than have an external process (guard) grep/populate hashes.\n\nI still disagree. Whatevs.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/32655309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/37364580", "body": "Thanks for the pull request, but that config is actually invalid as well. I've cleaned that up in 893b9caddf6fe9ab2a6c46b557c1bc8ab8293eff. Thanks for bringing this to my attention!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/37364580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41601126", "body": "Should the default be 'none'?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41601126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41609569", "body": "Makes sense to me. Hmmm this could potentially break a lot of sites who wouldn't override the setting and needs it to function.\n\nsecure_headers 2.0 I guess.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41609569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44912920", "body": "No, that's what frame-ancestors is for. Although as #84 says, frame-ancestors is not universally applied.\n\nI have used that referrer-based approach but I'd prefer to stick to the standards here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44912920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44914760", "body": "Hmm referrer was mentioned over user agent. We'll let OP clarify.\n\n> it may be preferable to just send DENY or SAMEORIGIN instead for those particular browsers\n\nIf this is the case, I'm still wary of supporting this. I suppose it could take a lambda as a fallback.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44914760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/45222439", "body": "Really, logging the raw json (without the \"csp-report\" wrapper) and ingesting this in other tools is best.\n\nIf you use _commercial-but-free-to-a-degree tool X_ to ingest the json, it gives you all the flexibility you need to search and visualize. I'm glad to give suggestions and provide config/usage instructions.\n\nI'm going to add an option to log the reports (without the wrapper), one per line, off by default.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/45222439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/45554147", "body": "removed it in #92 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/45554147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/47967546", "body": "I have no idea why that would be. Does bumbler give any insight into why?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/47967546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/50506567", "body": "Thanks for reporting this. I'll look into it later today.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/50506567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/50532918", "body": "It's because of the | characters. I've seen a few options around handling this, but I think the best route would be to add `@request_host = request.host` and set it here: https://github.com/twitter/secureheaders/blob/master/lib/secure_headers/headers/content_security_policy.rb#L214 Then use that value rather than parsing the URI. \n\nI haven't tested this, but I think that's better than blindly assuming true, although it probably has no impact in the real world.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/50532918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/50533025", "body": "Oops, we'd need to set request.protocol as a value somewhere too\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/50533025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51559295", "body": "I'm fixing the build errors in #99. Do you mind making the suggested changes? It would remove parsing altogether.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51559295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51559348", "body": "Should be fixed with #99 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51559348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51559366", "body": "moving 6f12545 into it's own branch to fix up others: #99 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51559366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51564328", "body": "Can you give me some information about the application? E.g. How many controllers?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51564328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51645008", "body": "Or maybe this should rescue with a return value of false to ensure no reports are lost because of browser restrictions (technically all reports could go through the forwarder)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51645008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51672113", "body": "@cantino sorry for the long period of silence, I'd be interested in this. Still willing to submit a pull request?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51672113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51672806", "body": "closed by #97 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51672806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51672817", "body": "whatever.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51672817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51673317", "body": "@EiNSTeiN- can you see if https://github.com/twitter/secureheaders/tree/forward_uri_fix aligns with your suggestion? \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51673317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51855892", "body": "Thanks, this closes #95 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51855892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51855944", "body": "Fixed in #100 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51855944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51955947", "body": "Released in 1.3.1\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51955947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52128015", "body": "oh cool, i'm so behind on github features :(\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52128015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52128422", "body": "This has to be automated somehow. Is there a rake task I can steal? I'm tired of building/pushing anyways and have been meaning to up my gem publishing game.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52128422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52269096", "body": "Cool. Going to stick to the manual approach for now. I already created two releases all semi-pro style.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52269096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52269147", "body": "Closing this one out. Please reopen if you are able to provide more info.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52269147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52269228", "body": "What did you use to check the referrer? Static string? Regex? Ruby code?\n\nI suppose all 3 should be supported. I'm glad to give this a go sometime next week, I'm just looking for some feedback on the config API\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52269228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53139264", "body": "@spikebrehm I like it. A lot. I still have to support mustache but that shouldn't be too hard.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53139264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53341529", "body": "This branch was just a PoC. I welcome any pull requests on this! Don't fork!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53341529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53342603", "body": "One issue with this dynamic hashing is that it doesn't buy you anything. I'd want the hash values to be static or otherwise limited in production\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53342603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53774549", "body": "thanks, I'll release this with the next batch of changes\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53774549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54239373", "body": "Yeah, the branch is very old. I'm going to assume merging/rebasing master fixes this. I'll attempt to do so right now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54239373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54244857", "body": "> However, I do think that the helper approach is simpler and easier to use than Rake task / YAML approach.\n\nTotally. So how about the helper works in !production and then we just make the hash generation just another deploy step?\n\nI'd love to iron all this out and ship something somewhat soon. I should have the cycles too. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54244857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54251264", "body": "I received some feedback that a helper that dynamically computes the values during development is pretty much necessary. \n\nOne option is to always calculate hashes dynamically AND compare to a list of known hashes and respond to mismatches in a configurable way. i.e. \"OH NOEZ raise exception\" vs \"yeah, we logged that out and we'll clean it up in the next release, don't blow up in the meantime\"\n\n``` ruby\ncsp = {\n  ...,\n  rescue_from_script_hash_mismatch: lambda {\n    if RAILS.env.production?\n      raise \"go home, you're drunk\"\n    elsif RAILS.env.development?\n      puts \"oops, unexpected hash, run be rake secure_headers:generate_hashes\"\n    end\n  }\n}\n```\n\nPerhaps the lack of a rescue handler implies that the dynamic calculation should not even happen, and the inline script helper becomes a noop, falling back to the yaml-only behavior.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54251264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54380983", "body": "Yeah, I just hope we don't run into whitespace issues.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54380983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54544149", "body": "Yep, move https://github.com/twitter/secureheaders/blob/master/lib/secure_headers/headers/content_security_policy.rb#L157 \n\nAlthough, the nonce hasn't been generated by that point because the ContentSecurityPolicy object doesn't exist. So the nonce value has to be an attribute or we would have to build the object and pass it through ENV\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54544149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54662503", "body": "The downside would be that we're generating a SecureRandom unnecessarily. The config indicates clearly if a nonce is used so I don't think we'd have to generate them unnecessarily.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54662503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55363313", "body": "This was fixed a while ago\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55363313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55804180", "body": "Thanks. Do you know more about this? Who supports it? When was it added? I only vaguely remember seeing this elsewhere. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55804180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55805509", "body": "Cool. Curious, what do the reports look like?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55805509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56593244", "body": "I don't fully understand the implications of this change. \n\nCan I get a sanity check from someone else?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56593244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56680298", "body": "Yeah, this should really be ripped out into a separate gem. I've been meaning to do this, but haven't had much motivation for doing so.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56680298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/57320467", "body": "Definitely. This and a few other pieces are missing from CSP level 2. \n\n(Also missing: plugin-types, referrer, and hash support)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/57320467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/57321400", "body": "I agree. Since this ticket was opened, there are multiple \"csp report endpoints in a box\" and I hear a new one is in the pipeline... \n\nSane defaults, pluggable architecture, etc. are all great things. For another gem ;) \n\nAlso, I have 0 interest in doing this so it's up to someone else to propose and code something up :smile:\n\nClosing this out.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/57321400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/58987385", "body": "If the ContentSecurityPolicy object is stored in request.env, the code would be more straightforward and not require passing along/syncing the nonce. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/58987385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59080759", "body": "Closed out in favor of #117 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59080759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59080786", "body": "Closing in favor for #117 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59080786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59080814", "body": "Closing out in favor of #117 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59080814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59083774", "body": "Fixed in c7ca5bb5c1f84d019ee6123587c99c7850b336e8\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59083774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59115111", "body": "@caniszczyk I'll drop 1.8 support when twitter does :boom: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59115111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59238941", "body": "I've changed my mind slightly on this one...\n\nI don't think it's reasonable to rely on the middleware to set the header by default. I think that should only happen when using hash sources. Mostly because it would be a breaking change for all rails 2 apps, but also because it just seems like it will come out much cleaner.\n\nI ripped out the forwarder and \"experimental\" feature which should simplify things a bit too. I'll take another stab at this soon and merge the script hash branch (with your patch) soon after.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59238941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59251903", "body": "yeah i'll take a stab at hacking around that\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59251903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62961599", "body": "closed in favor of #121 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62961599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62961615", "body": "closed in favor of #121 \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62961615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62983462", "body": "Here's a PoC using railsgoat as an example: https://github.com/oreoshake/railsgoat/pull/1\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62983462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62993555", "body": "Fixed in 1a0e1412eb89467dd5f4f5c8eb8bdcfe0158e07c\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62993555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62993587", "body": "Fixed in 1a0e1412eb89467dd5f4f5c8eb8bdcfe0158e07c\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62993587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62993594", "body": "Fixed in 1a0e1412eb89467dd5f4f5c8eb8bdcfe0158e07c\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62993594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62993601", "body": "Fixed in 1a0e1412eb89467dd5f4f5c8eb8bdcfe0158e07c\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62993601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/63000101", "body": "Yes please! \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/63000101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/63765684", "body": "Thanks! \n\nI'll cut a new gem tomorrow. Hooray for major version bumps.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/63765684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/65880901", "body": "Just released 2.0.0.pre2\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/65880901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/66158490", "body": "Thanks for the patch! I'll push a new version.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/66158490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/68930151", "body": "> Can I skip the filters that protect those headers?\n\nCertainly! Setting the headers at a \"higher\" level is always better. Just be sure ALL environments set this header. I can imagine a case where someone developing locally may not have set those headers in their nginx (or they're using webbrick/unicorn/etc directly) so be sure dev matches prod!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/68930151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/68930299", "body": "Also, kudos on that config. The internet thanks you for \"includeSubdomains\". Now just get on that preload list https://hstspreload.appspot.com/\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/68930299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70149401", "body": "Yeah I had originally proposed that in twitter/secureheaders/issues/69 but never got around to it. I'd love a pull request if you could :smile_cat: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70149401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70155778", "body": "I think it's just a call to `config.action_dispatch.default_headers.clear` in an initializer block\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70155778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70165633", "body": "> we'd need to only remove headers that are defined in this gem\n\nGood call. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70165633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70326567", "body": "Good point. We could clear just the headers that this gem sets, and then things would be have as expected. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70326567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70344082", "body": "Damn you 1.8.7. I'm ready to drop support and the timing is right given the pending 2.0 release.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70344082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70345253", "body": "I'd love an additional sanity check from someone with experience working with the header. @ptoomey3  ? Did the pin-\\* value need to be quoted or something?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70345253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70346804", "body": "Hmm I'm no bundler expert but it looks like this is restricting the `i18n` version for all platforms. But maybe that's ok since it's just for testing.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70346804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70346879", "body": "If you merge master, the build will pass on 1.8.7\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70346879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70349599", "body": "lulz. thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70349599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70894656", "body": "Hmm that test failure might be annoying. Rails 4 doesn't support 1.8.7 and it generates a mixed bag of hash syntaxes. Would you mind converting those? I can take a stab at it, but probably won't get to it anytime soon.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70894656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70926802", "body": "Well you can build/set the header yourself like this: https://github.com/twitter/secureheaders/blob/master/lib/secure_headers.rb#L88\n\nThat's probably the best way to modify CSP for a single action. You can also set per-controller configs `ensure_security_headers(:csp => {...}`\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70926802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70952475", "body": ":sparkles:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70952475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70952519", "body": "I'll release a gem tomorrow\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70952519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71333852", "body": "It sounds like the [`railtie`](https://github.com/twitter/secureheaders/blob/master/lib/secure_headers/railtie.rb) isn't running. I'm assuming dropping `include ::SecureHeaders` will fix the issue, but I'm not sure why this isn't working. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71333852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71418258", "body": "Definitely not. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71418258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/72707068", "body": "And I'll add that example to the `README` or we can come up with a better way of doing this.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/72707068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/72707338", "body": "Mind throwing in some debug statements in the railtie class to see if/when things are executing? I can cut a branch if you'd prefer.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/72707338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/comments/3719103", "body": "Fixed in https://github.com/twitter/secureheaders/commit/116330d91bf64e204d15cbb8c099dc6fccdc3e95\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/3719103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/6684305", "body": "Probably because my setup is outdated. That was just the output of the rvmrc -> ruby-version command. So no good reason :) \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/6684305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/8147244", "body": "Ha, probably explains why my tests are erroring out\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/8147244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/8278412", "body": "Can you provide as much code/information as you can about your setup and the test?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/8278412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/13825024", "body": "Ha, good eye.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/13825024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2851862", "body": "Got beef with this test?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2851862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2853155", "body": "I like.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2853155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2856303", "body": "honestly this whole condition isn't needed, which reduces the need for the browser ivar. I doubt firefox will drop support for \"allow\" anytime soon. @imelven?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2856303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938197", "body": "hmm in this case we should just remove the w3c reference\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938246", "body": "in this case, w3c is the correct thing to use\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938331", "body": "w3c/w3c -> WebKit/W3C\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938380", "body": "w3c -> WebKit/W3C\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938404", "body": "w3c -> webkit\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2938404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3018257", "body": "This indicates my testing was incorrect or this block is never actually used. I suppose @secure_headers_options is always defined and superclass never responded to the invalid value? (no nil is not a valid value here)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3018257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3104975", "body": "Nah, decided even though the effect is the same, a ? method returning a boolean made more sense to me. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3104975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3105140", "body": "tl;dr :forward_endpoint is used in the CSPController to forward the requests. FF_CSP_ENDPOINT represents the route to the CSPController\n\n`:forward_endpoint` is used in the controller that forwards the csp reports. The constant represents the route that the report should post to from the browser. This logic is meant to say:\n\nIf you are on a different domain than your `:report-uri`\\* or `:report_uri` only contains a path, and you're using firefox, send the report back to my app so it can be forwarded to the value in `:forward_endpoint`\n\nIf no `:forward_endpoint` is supplied, assume you know what you're doing and understand that you may lose some firefox reports unless you're using a path. \n\n<rant>\nIt's so effing confusing that at one point I questioned what that setting meant (and the mean has mos definitely changed). Yay for 0.x releases. I think that entire section in the README needs to be rewritten, by someone other than me so it's comprehensible to at least two people.\n</rant>\n- fwiw This part of the code may become an edge case with the upcoming Firefox releases. Currently, TLD+1/scheme/port have to match but that may be changing to only require TLD+1 to match\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3105140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3106490", "body": "sorry, the other branch is based off this one, so no conflict\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3106490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3292620", "body": "_by_ the server. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3292620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3292622", "body": "i hate this readme\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3292622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3555020", "body": "this should just take the header instance, not the individual values, relic of older code. some other time.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3555020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/7421773", "body": "yeah, using a static nonce is not something I would encourage :) in fact, I should rip out https://github.com/twitter/secureheaders/blob/master/lib/secure_headers/headers/content_security_policy.rb#L216 too\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/7421773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16016642", "body": "Because of `[\"'nonce-#{nonce}'\", \"'unsafe-inline'\"]`\n\nWe could end up with a nested array and add unsafe-inline twice. So it's more to cover up a janky api.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16016642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16857941", "body": "copy/paste error ;)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16857941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025268", "body": "missing a } ?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219529", "body": "Error if no CSP policy set\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219545", "body": "openssl adds the filename to the output with some decoration. There's probably a flag I'm missing to get hex output without the framing.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219558", "body": "LOL reading the write header, writing the potentially wrong header. Just another reason to store the ContentSecurityPolicy object in env and set a single string rather than doing gsub after the fact.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219594", "body": "ensure this can be set during runtime (for guard-like support without restarting the server)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219598", "body": "this is C/P'd from above. Generalize.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6221248", "body": "It's a super paranoid integration test that shows it works to non ruby people. It's behind the debug flag and probably won't be in the final branch anyways. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6221248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17023351", "body": "It should also be sha1. Only sha1 is supported for now afaik.\n\nPlease do submit a PR if you have the time, including your other changes. Or submit a fresh PR :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17023351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025312", "body": "Oh sweet. Didn't know that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17086438", "body": "Sounds about right, I think that's only the case when you override settings from one controller to another. I guess this has just never come up :shrug: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17086438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17135639", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17135639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17135835", "body": "The experimental flag is meant to be used only in the case that you are enforcing and want to add a report-only header. So yes, set both headers.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17135835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/18807825", "body": "this line is particularly questionable\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/18807825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23118803", "body": "nit: can you `join(';')` instead of prefixing some with \"; ...\" ?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23118803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23119132", "body": "nice. can you add a test ensuring this header isn't set by default?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23119132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23119686", "body": "please add a test for the pin values\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23119686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23119727", "body": "is it valid to set this without at least one pin- entry?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23119727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23120497", "body": ":cool: , thanks for the pointer.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23120497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23179103", "body": "LOL `secure_headers` thrives on awkward abuse of the `Hash` class. \n\nBut seriously, I like the \"array of hashes\" syntax more than either suggestion. I never said I was good at API design.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23179103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23338273", "body": "please use the pre-1.9 hash syntax => (sorry, still need to support 1.8.7)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23338273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23178914", "body": "I think we should future proof this by including the headers this gem sets, even if they aren't in default headers.\n\ni.e. csp, csp report only, hpkp, xdownload, etc\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23178914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23194959", "body": "Yeah, each header class does have a name constant, but with CSP it's a little awkward. I think the string values are fine.\n\nPlease add the hpkp headers too twitter/secureheaders/pull/132\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23194959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23348206", "body": "I feel like this would raise an error on rails < 4, default_headers wouldn't even be defined! Must be more rails method missing crap magic.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23348206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/29723428", "body": "How about something like \n\n> Be aware that pinning error reporting is governed by the same rules as everything else. If you have a pinning failure that tries to report back to the same host, by definition this will not work. \n\n@ptoomey3 Do people typically supply a separate host? Do reports go cross-origin? I forget where CSP implementations ended up, but I've had to use a proxy host in the past :sob: to get around this\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/29723428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/33963779", "body": "Fixed in https://github.com/twitter/secureheaders/commit/547286d0b6653326a25c412df243bee65fcdc81e\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/33963779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/41225328", "body": "definitely, thanks for the :eyes:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/41225328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42281873", "body": "good call. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42281873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42282006", "body": "Agreed. I think the code is trying to be too generic when there's many possible cases. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42282006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42282957", "body": "All of these CONFIG_KEYS will be scoped to https://github.com/twitter/secureheaders/pull/181/files#diff-e7fcd10663004caed933b95e0ff2e643R23 in https://github.com/twitter/secureheaders/pull/181/files#diff-e7fcd10663004caed933b95e0ff2e643R160. That will be \"unsupported\" when I remove the line from your comment about pulling the config from two different places in `request.env`. \n\nUnfortunately that's a left over from when I thought passing a hash directly to `header_hash_for` would be a thing. :hankey: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42282957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42283352", "body": "Yeah, that will also make it easier to scope the configuration for the given precomputed overrides. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42283352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42286035", "body": "Re `each_with_object` zomg I love this post ruby 1.8.7 world I now live in. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42286035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53276900", "body": "Much nicer! However, this should probably be a constant.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53276900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53357517", "body": "The reason for setting the different `before_filter`s is that it makes it possible to use `skip_before_filter` for each individual header. Calling `set_security_headers` would remove this granularity.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53357517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56240715", "body": "`req.env[SECURE_HEADERS_CONFIG]` should suffice.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56240715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56240991", "body": "Or maybe make `config_for` public? https://github.com/twitter/secureheaders/blob/44c8c3edfe6c5456274c448ba68371b20fe649d7/lib/secure_headers.rb#L225\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56240991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56241060", "body": "This should be fine.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56241060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/57049058", "body": "Added a test [here](https://github.com/twitter/secureheaders/pull/232/files#diff-5ffee118dcfe384935df780237dadf39R109) for the cache busting. I'll have to think about your second item.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/57049058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58581283", "body": "I think this would be better if the conditions were swapped so we can short circuit on a hash lookup instead of a regex match.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58581283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58585145", "body": "Please add a deprecation warning here. I know it's brand new code but I plan to get rid of it and use this format.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58585145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58789375", "body": "missing closing `}`\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58789375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58789460", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58789460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58789654", "body": "is this valid? I'm asking because I have no idea if that means the same thing as `SameSite=Strict`\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58789654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58798111", "body": "I wonder if it would be better to parse out the flags into fields so we can use accessors instead of regex to test if the value needs to be modified. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58798111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58909513", "body": "> Now that I've re-read it, my interpretation of that would be that rule 1 would apply and it would be ignored.\n\nThat's my understanding as well.\n\n>  If so, samesite: true shouldn't be valid and I'll remove it.\n\n:+1: \n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58909513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58912961", "body": "Yes. Also, I think the sample you provided would be the ideal setup that people would want to work towards. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58912961/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59433959", "body": "This isn't valid anymore, right?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59433959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59434419", "body": "use symbols here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59434419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59630829", "body": "Looks like you used ` instead of ' so copy pasting failed :smile:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59630829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/60974672", "body": "Good :eyes:, I didn't catch that. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/60974672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/62583184", "body": "In the \"before\" column, setting a config value to `false` was also a way to opt-out of a header. i.e. `config.x_download_options = false`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/62583184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/62583355", "body": "Please add a link to the [nonce docs](https://github.com/twitter/secureheaders#nonce) here. The view helpers are preferred, but they aren't the only way to use nonces.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/62583355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/74850609", "body": "Well moving to report only shouldn't break existing implementations, but the previous default was an enforced policy. The change to enforce-by-default was made at the last major version bump iirc so there's no reason to go \"backwards\" here. This PR does change the default policy to something more realistic and secure at the same time. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/74850609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221681", "body": "Seems so! Fixed in 3afd1dd\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221751", "body": "Note to self: wat \u2049\ufe0f \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221892", "body": "This `dup` is only necessary because we actually modify the underlying arrays of the config with lots of `!` methods. A naive attempt to remove the ! methods and the `dup` failed miserably. But this is a smell worth cleaning up.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75223667", "body": "This is going to take another non-trivial, but overdue refactoring of the way CSP vs CSPRO are handled. The result should be much cleaner. Passing around symbols and class objects with all sorts of special casing have trickled down.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75223667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75223840", "body": "I'll do a pass and ping you when this and the refactor mentioned below are ready for :eyes: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75223840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/81873839", "body": "This seems a little small to stand on its own.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/81873839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/81873900", "body": "combine this page with the \"hash\" page.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/81873900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/81887653", "body": "I agree. This page, docs/README.md, and docs/configuration.md should probably all live in the original readme\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/81887653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/94830080", "body": ":+1:", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/94830080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118576753", "body": "This one seems odd. Is it saying use kwargs instead?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118576753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118577011", "body": "This is kind of a bummer. Same for https://github.com/twitter/secureheaders/pull/330/files#diff-16a93318ee7771ce5483636b9959f4ec. Should we just not use `@instance_var_name`?\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118577011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118577109", "body": "This one seems strange as well.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118577109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118578659", "body": "Strange. It's [definitely used](https://github.com/twitter/secureheaders/blob/fd559f2acc591c04e0c9563e3f9e857e7ce6e6c9/lib/secure_headers.rb#L233) and important.\r\n\r\nAs a side note: I'm ok with making strange changes to appease a tool in the name of keeping a clean list of warnings.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118578659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118580904", "body": "\ud83e\udd14 an early mentor of mine emphasized not passing around \"magic booleans\" (or any magic things really). I guess we could add a second method or treat the value as an options hash.\r\n\r\nMaybe in 4.0 we can drop < 2.1 and use kwargs. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118580904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118582581", "body": ":+1:", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118582581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118587636", "body": "Would this get enforced by CI? It looks like `--warnings` will still return a 0 exit code. It would be nice to enforce this.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118587636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118775606", "body": "> This has me stumped\r\n\r\nThanks for trying. I think we can :ship: what we have here if you think it's :+1: \r\n\r\n> I guess another route to go would be to add rubocop.\r\n\r\nThat would be great! I'm happy to help whittle this down.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118775606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119177011", "body": "> IIRC warnings go to STDERR, so you should be able to just enforce that STDERR is empty in CI\r\n\r\n:thinking: that might be a bit too strict. Other stderr might happen. I guess we can go with that strategy until we find it doesn't work. Any \"other\" stderr would not be the responsibility of the PR author, but hopefully adding this restriction doesn't discourage working a PR to completion.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119177011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119913877", "body": "What's this for?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119913877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119934205", "body": "> btw, I think we could probably move --format progress to .rspec and remove the block here.\r\n\r\n:+1: ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119934205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123044082", "body": "> Or do you all prefer to just suck in the changes and do the version bumping yourself?\r\n \r\nIf we weren't on the same team I'd probably complain, it's :cool: \ud83d\ude0e ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123044082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123044331", "body": "whitespace", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123044331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123044973", "body": "> an Array of String\r\n\r\nStrings", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123044973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123046394", "body": "I'd prefer literals in the `eq`. It feels like you're comparing the output of the same function to itself.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123046394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123046515", "body": ":+1:", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123046515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/128070856", "body": "Per https://github.com/twitter/secureheaders/pull/341#issuecomment-315867482, I think we should go with\r\n\r\n```ruby\r\nconfig[:secure] = true unless config[:secure] == OPT_OUT\r\nconfig[:httponly] = true unless config[:httponly] == OPT_OUT\r\n```", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/128070856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109489752", "body": "I prefer to spell out the full name of the header spec.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109489752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109489821", "body": "I prefer to spell out the full name of the header spec.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109489821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109489928", "body": "I prefer `\"`", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109489928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109491855", "body": ":+1:", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109491855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109491889", "body": "`report-uri` is quoted. Interesting.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109491889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137087837", "body": "We can get rid of `nonce_added?` and just check that `directive.to_s.end_with?(\"_nonce\")`. It's pretty dirty that nonces are essentially added as extra directives. Probably best to clean that up, but in a separate PR.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137087837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137088330", "body": "\ud83e\udd14 now that we use the `OPT_OUT` pattern that should probably be revisited", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137088330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151293004", "body": "Should just be a passthrough call to `nonced_javascript_include_tag`? ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151293004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151293080", "body": "Should this be a passthrough to `nonced_stylesheet_link_tag` instead?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151293080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151293164", "body": "What is the reason for the alias? Can we accomplish the same thing without the metaprogramming?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151293164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "jacobbednarz": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/379", "title": "`report-uri` sample rate", "body": "One thing about CSP that I've always found extremely dangerous is it's ability to generate an enormous amount of traffic for a reporting endpoint if you hit browser bugs or use a misconfigured policy. This was a very real issue for us and something we've mitigated using a patch to only send a percentage of the reports to the reporting endpoint. We tune this number up and down based on the risk when we roll out an updated policy.\r\n\r\nMy question to the other users of `secureheaders` is whether or not this configuration option would be valuable to you? If so, I'm happy to open a PR with our base implementation and we can expand on it from there. To give you a bit of an idea around the implementation:\r\n\r\n```rb\r\n# initializer\r\nconfig.csp_report_only = {\r\n  # .. snip\r\n  report_uri: %w(https://report-uri.io/example-csp-report-only)\r\n  sample_rate: 0.3 # only send 30% of violations\r\n}\r\n```\r\n\r\nThe above configuration would then result in the `report-uri` directive for the policy only being appended 30% of the time and the remaining 70% would not have the `report-uri` directive at all. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/379/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/90ac658bc8eb2e6d787f83d5da94c4f12eecdd96", "message": "Add last missing `SecureHeaders` namespace fix for `OPT_OUT`\n\nI missed this in #361 but didn't notice until _after_ it was merged."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/8745cfa11ec35c5d97d4346c2ce5265f7b605afb", "message": "Use `SecureHeaders` namespace for OPT_OUT docs\n\nThe documentation for upgrading to 4.0 suggests using `OPT_OUT` for\ncookie values you don't wish to set however this throws a `NameError`\n\n```\nNameError: uninitialized constant OPT_OUT\n```\n\nTo correctly resolve the `OPT_OUT` value, we need to use the\n`SecureHeaders` namespace."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a1daa24de59523ae13730518d484c3a075b1e74f", "message": "Add support for `Expect-CT` HTTP header (#322)\n\n* Update README with example usage for `Expect-CT`\r\n\r\n* Add some tests for the expected API\r\n\r\n* Add classes and loading to main entrypoints\r\n\r\n* Add `ExpectCt` class\r\n\r\nAdds the `ExpectCt` class and it's associated validation of the header\r\nsyntax\r\n\r\n* Use full name of specification instead\r\n\r\n* Use consistent double quotes\r\n\r\n* Update README example to use correct naming for Expect-CT\r\n\r\n* Set defaults for Expect-CT via helper\r\n\r\n* Add missing comma in README example\r\n\r\n* Add frozen string literal"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/comments/23889703", "body": "Doesn't look like it was in alphabetical prior to this change so I'm \ud83e\udd37\ud83c\udffc\u200d\u2642\ufe0f but if you're interested in doing it, I'm sure a PR would be appreciated.\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/23889703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/74843637", "body": "Would smarter defaults be to swap these conditions and allow a report only by default?\n\n``` rb\nself.csp = OPT_OUT\nself.csp_report_only = ContentSecurityPolicyConfig::DEFAULT\n```\n\nOr would this break backwards compatibility with existing implementations?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/74843637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/74843926", "body": "\ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/74843926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/74850739", "body": "Sounds perfectly sane :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/74850739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221331", "body": "should this be using the `opt_out?` method? i.e.\n\n``` rb\nif [:both, :enforced].include?(target) && !config.csp.opt_out?\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221488", "body": "same question as https://github.com/twitter/secureheaders/pull/281/files#r75221331. does this need to be swapped to use `opt_out?` too?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221989", "body": "I was about to comment on this and say a similar thing about the readability of this \ud83d\ude1b  The `def blah; end.map do |klass|` definitely makes for it slightly difficult to follow. Is there an approach that we could take here to break this up a bit?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75221989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75222494", "body": "sorry to be a broken, nagging record but it looks like we've got a few instances of the `!= OPT_OUT` in here still. would you like me to comment on each one I find or are you OK to just do a giant find + replace?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/75222494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/81872009", "body": "This might be better suited in the `configuration.md` so people have a quick and easy point of reference for starting out?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/81872009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109525069", "body": "Good call! Fixed via 8e528e2", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109525069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109525261", "body": "This did strike me as odd too but, you know, specs? `\u00af\\_(\u30c4)_/\u00af`", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109525261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109525670", "body": "Oh my! What caveman would ever commit files with mixed quotes?!?! \ud83d\ude1b  Fixed in 8ef3f80 ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/109525670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139322334", "body": "> It serves as a reference to all the available options.\r\n\r\nThis isn't quite true since not all of the directives have all available options. For example, HSTS:\r\n\r\n```rb\r\n# Add \"; preload\" and submit the site to hstspreload.org for best protection.\r\nconfig.hsts = \"max-age=#{20.years.to_i}; includeSubdomains\"\r\n```\r\n\r\nPerhaps wording along the lines of \"It serves as a sample implementation of the configuration\"? Alternatively, we could go through and add all the possible values however I think this opens a bigger can of worms for those who don't read this warning and just copy-pasta into their app and all of a sudden, their site is bricked because of incorrectly configured HSTS or HPKP.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139322334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139322362", "body": "We could also just treat those dangerous directives differently and allow them to not be the full available options so people cannot shoot themselves in the foot without knowing it. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139322362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139322430", "body": "Looks like you've got an extra newline here that we could probably get rid of to keep the markdown examples pretty.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139322430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/145817078", "body": "Thanks! I think this was my bad from when I had it renamed `expect_ct_spec` => `expect_certificate_spec` \ud83d\ude1b ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/145817078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tessereth": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/376", "title": "CSP sources are incorrectly removed when both wildcards and schemes are present", "body": "When I have the following as part of my csp header config:\r\n\r\n```ruby\r\n  config.csp = {\r\n    frame_ancestors: %w[*.foo.com http://www.foo.com],\r\n    preserve_schemes: true,\r\n    ...\r\n  }\r\n```\r\n\r\nand I'm serving my frame over https to be embedded on `http://www.foo.com`, the `http://www.foo.com` is required but is being removed by [minify_source_list](https://github.com/twitter/secureheaders/blob/2bb810a/lib/secure_headers/headers/content_security_policy.rb#L149-L162)\r\n\r\n### Expected outcome\r\n\r\nI expect to have `frame-ancestors *.foo.com http://www.foo.com` in my CSP header\r\n\r\n### Actual outcome\r\n\r\nThe CSP header had only `frame-ancestors *.foo.com`\r\n\r\n### Config\r\n\r\n```ruby\r\nSecureHeaders::Configuration.default do |config|\r\n  config.csp = {\r\n    default_src: %w['self'],\r\n    script_src: %w['self'],\r\n    frame_ancestors: %w[*.foo.com http://www.foo.com],\r\n    preserve_schemes: true\r\n  }\r\nend\r\n```\r\n\r\n### Generated headers\r\n\r\n`Content-Security-Policy: default-src 'self'; frame-ancestors *.foo.com; script-src 'self'`\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "renchap": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/375", "title": "Discussion: integration with Rails 5.2 CSP feature", "body": "There have been several tentatives to merge this gem into Rails. CSP support has been merged and will be released in Rails 5.2: https://github.com/rails/rails/pull/31162\r\n\r\nI gave a quick look at it and it does not replace this gem, but it seems a good idea to get the two work together, and maybe use the Raisl API. Any thoughts?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/358", "title": "Edge now supports CSP 2.0", "body": "MS Edge is now supporting CSP 2.0: https://blogs.windows.com/msedgedev/2017/01/10/edge-csp-2/\r\n\r\nEdge build 15002 (https://developer.microsoft.com/en-us/microsoft-edge/platform/changelog/desktop/15002/) has been released in january.\r\n\r\nThis is breaking our application when loading Webworkers from `blob:` as `secureheaders` is not sending `child-src` (but `frame-src`), so Edge defaults to `default-src`.\r\n\r\nI tried to change `EDGE_DIRECTIVES = DIRECTIVES_1_0` to `EDGE_DIRECTIVES = DIRECTIVES_2_0` and it solved the problem, but I guess a proper fix requires checking the Edge build number. I can do it if you confirm this is the correct fix.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stve": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/368", "title": "Consider removal of support for HPKP?", "body": "https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/he9tr7p3rZ8/eNMwKPmUBAAJ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/886a322880200807d8075ff156957fdc9849640c", "message": "remove rspec block notation from Rakefile"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/e21ab51db5ddf40762186d5cd4ffa5b21496a3db", "message": "fix rubocop violations"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/194c6e3da3110df80aedd0070ce4d1dbf86dec26", "message": "add rubocop-github"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/a7e2a75a5464d0042c1b6cfece98af55cd344d1e", "message": "split out rspec and rubocop in CI"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/194c14b4eb8179d2d5179361fc62cce0467fa044", "message": "enable all rubocop cops"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/fcdabb8043f797ce1591cca4dd1dc5ef84701a17", "message": "add custom rubocop rules"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1385e83049272d66b4344a3c7737d1b1801e67b0", "message": "add rubocop rake task"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/94763f384abdaf6725bb8fea1b5c075c619fafb1", "message": "add rubocop dependency"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/29d26965dfb04c4269dc46a997496ca58f3898b8", "message": "suppress warning in #header_hash_for"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/4452dd86b6b4f939dc0d403b5753ed5b14bdb69c", "message": "update contribution guidelines to mention warnings"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0d1c2a4d00f87f5a0e20774f96584c7eb5ceb59c", "message": "fix warnings from running in verbose mode"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/bf32b1d66ae5f5b2c6fd38e4c9a995e619c17c7f", "message": "enable warnings when running tests"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/c22259786ac65af2c06bc9c4deb6be0b8dddc388", "message": "handle nil useragent version"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/59795aafae5e9f9132ea18cb14024fe83d656f3b", "message": "update x-frame-options link to RFC [ci skip]"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/74279a894f18beb3534f6d69a11dcb133cda2479", "message": "add a test for referencing an undefined override"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41604028", "body": "It seems like 'none' would be the most secure. All others would assume the existence of a crossdomain.xml file which is probably outside the scope of this project.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41604028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41640069", "body": "I would think that since you aren't changing the external API (code-wise, at least) a major version release wouldn't be necessary. Maybe the default should be `nil`? That way the header is only included when a value is assigned. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41640069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62999928", "body": "I see that a pre-release of 2.0 was just tagged, given the major version bump, is there interest in having this included as part of 2.0? If so, I'd be happy to put some effort towards it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62999928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70159140", "body": "> I think it's just a call to `config.action_dispatch.default_headers.clear` in an initializer block\n\nThat would clear out any non-security related headers as well as an unintended side-effect, presumably we'd need to only remove headers that are defined in this gem.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70159140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/comments/13807855", "body": "this seems accidental\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/13807855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16858802", "body": "Oops! Good catch, just pushed a fix.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16858802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/18856589", "body": "It's just the 1.9 hash syntax that is causing this to fail, just change to 1.8 syntax:\n\n`gem 'coveralls', :require => false`\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/18856589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/44025053", "body": "missing a `:` here\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/44025053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58591781", "body": "Absolutely. I was going to ask you about that. I was thinking I'd add it on configuration\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58591781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58889720", "body": "nice catch, thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58889720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58890013", "body": "That's a good point. `CGI::Cookie` does some of this already, but unfortunately falls a little bit short since it doesn't support attributes other than `Secure` and `HttpOnly`. I'll take a stab at parsing out the cookie.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58890013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58891576", "body": "My first read of the spec led me to believe this was a shortcut for `Strict` but now i'm not so sure. Here's the [relevant section](https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1) in the spec:\n\n>   If the \"attribute-name\" case-insensitively matches the string \"SameSite\", the user agent MUST process the \"cookie-av\" as follows:\n> 1.  If \"cookie-av\"'s \"attribute-value\" is not a case-sensitive match for \"Strict\" or \"Lax\", ignore the \"cookie-av\".\n> 2.  Let \"enforcement\" be \"Lax\" if \"cookie-av\"'s \"attribute-value\" is a case-insensitive match for \"Lax\", and \"Strict\" otherwise.\n> 3.  Append an attribute to the \"cookie-attribute-list\" with an \"attribute-name\" of \"SameSite\" and an \"attribute-value\" of \"enforcement\".\n\nNow that I've re-read it, my interpretation of that would be that rule 1 would apply and it would be ignored. Is that your understanding as well? If so, `samesite: true` shouldn't be valid and I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58891576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58912300", "body": "Do you think it's worth supporting booleans on Strict/Lax? Like:\n\n``` ruby\nconfig.cookies = {\n  samesite: {\n    strict: true\n  }\n}\n```\n\nUse of a boolean on either would prevent a rule of any sort for the other enforcement mode. This could be checked via validation.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58912300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58913101", "body": ":+1:  alrighty, i'll adjust this\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58913101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58974717", "body": "I ripped some code out of `CGI::Cookie` and implemented a rudimentary parser so that we can avoid regex testing (2e74b8120a75144e952afe06ebe7ad12d1c98e5f). I like this approach better, thanks for the suggestion. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/58974717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59437582", "body": "that's correct, `samesite` will only accept a `Hash`, I'll fix this\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59437582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59438808", "body": "We can certainly do that, my reasoning for using strings was that parsing the cookie in order to decompose it would require `to_sym` on strings in order to set these to a truthy value. I guess now that Ruby garbage collects symbols this is less of a concern.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59438808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59640375", "body": "Whoops! :banana:  I've been doing some React/JSX stuff lately and this probably was a bad context switch. Fixed now. :smile: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/59640375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118578239", "body": "apparently `prevent_dup` wasn't used. I didn't want to remove it b/c I figured there was a reason it existed, but prefixing the arguement with an underscore suppresses the warning.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118578239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118578502", "body": "yep, these are unfortunate. This was the most common warning: \"warning: instance variable @ivar not initialized\"", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118578502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118578859", "body": "the problem here was that the block parameter `source_expression` was identical to that of the outer parameter (`source_expression.each`)", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118578859/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118579410", "body": "Ohhh. just realized, this is a method call, so I think it should actually just be `config = config_for(request, true)`", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118579410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118582234", "body": "I agree, kwargs would be a logical change here \u2705  \r\n\r\nTo get around the warning, this would probably work too:\r\n\r\n```ruby\r\nprevent_dup = true\r\nconfig = config_for(request, prevent_dup)\r\n```", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118582234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118592430", "body": "good point. I'm not sure if `--warnings` will, but maybe via `RUBYOPT` it can be enabled. I'll see if I can figure out a way to enforce it.\r\n\r\nOne thing to note is that there are a few deprecation warnings which we don't want to cause the suite to fail.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118592430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118624320", "body": "This has me stumped. I can't seem to figure out how to make the suite fail when there are warnings outputted. \r\n\r\nI guess another route to go would be to add rubocop. I created a branch where I added rubocop and was able to bring it down to ~270 violations. Most of those remaining could be fixed either by overriding rubocop's default rules or via code changes (line length in particular is probably the most prominent violation).", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118624320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119263401", "body": "Locally (perhaps on Travis as well) i've been getting warnings from `pry` that would probably turn up in stderr as well. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119263401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119915905", "body": "Oops! \ud83c\udf4c  I was trying to make running `bundle exec rake` run both rspec and rubocop and left this by accident\r\n\r\nbtw, I think we could probably move `--format progress` to `.rspec` and remove the block here.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119915905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119937406", "body": "Fixed now. \r\n\r\nFYI, I removed the `desc \"Run Rspec\"` line as well as it overrode the description it inherits from RSpec.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/119937406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/127805243", "body": "\ud83d\udc4d for adding support for `SecureHeaders::OPT_OUT` this was a HUGE miss on my part in the initial implementation.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/127805243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/127806515", "body": "I wonder if it would make sense to define the default as `{ secure: true, httponly: true}` as opposed to checking for `nil` in the configuration.\r\n\r\nI'm of the opinion that if a configuration is defined (even if it disables `secure` or `httponly`), you shouldn't have to opt-out of each configuration explicitly.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/127806515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "akkee": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/350", "title": "Implement strict-dynamic alongside URL whitelists", "body": "# Feature Requests\r\n\r\n## Adding a new CSP directive\r\n\r\nNow I'm not sure if it's a new directive\r\n\r\nI'm talking about implementing `strict-dynamic` in `script_src` alongside a list of known URLs. \r\nBasically using nonce-specified inline scripts from my own views, alongside few URLs like jsdelivr\r\n\r\nOf course using `strict-dynamic` blocks all external scripts.\r\n\r\nhttps://csp.withgoogle.com/docs/faq.html#strict-dynamic-with-whitelists suggests a way to do that, specifying two csp headers.\r\n\r\nNot sure how I'd replicate that in the initializer I use for SecureHeaders config.\r\nNeedless to say, setting `scripts_src` twice inside csp, generates a duplicate key warning", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "edwinv": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/349", "title": "Remove auto-insertion of middleware and force the manual insertion to avoid whacky bugs", "body": "We are using SecureHeaders 3.6.7 in a Rails 5.0.3 project and want to start using the `nonced_javascript_tag` helper to remove `unsafe-inline` from our CSP.\r\n\r\n### Expected outcome\r\n\r\nWhen using the `nonced_javascript_tag`, we expect two things:\r\n\r\n1. A `script` tag with a `nonce` attribute\r\n2. A `nonce-...` value in our CSP header\r\n\r\n### Actual outcome\r\n\r\n1. `script` tag is correct\r\n2. `nonce-...` value is missing from the CSP header\r\n\r\n### Config\r\n\r\n```\r\n# frozen_string_literal: true\r\n\r\n::SecureHeaders::Configuration.default do |config|\r\n  config.x_frame_options = \"DENY\"\r\n  config.x_content_type_options = \"nosniff\"\r\n  config.x_xss_protection = \"1; mode=block\"\r\n\r\n  config.csp = {\r\n    default_src: %w['none'],\r\n    connect_src: %w['self' www.project.nl],\r\n    child_src: [Rails.application.secrets.applications[\"storage_public_url\"]],\r\n    img_src: [\"'self'\", \"data:\", Rails.application.secrets.applications[\"storage_public_url\"], Rails.application.secrets.applications[\"assets\"]],\r\n    style_src: [\"'self'\", Rails.application.secrets.applications[\"assets\"], \"'unsafe-inline'\"],\r\n    font_src: [\"'self'\", Rails.application.secrets.applications[\"assets\"]],\r\n    script_src: [\"'unsafe-eval'\", Rails.application.secrets.applications[\"assets\"]],\r\n    object_src: %w['none'],\r\n    media_src: %w['none'],\r\n    frame_ancestors: %w['none'],\r\n    report_uri: %w[/csp_report]\r\n  }\r\n\r\n  config.hsts = SecureHeaders::OPT_OUT\r\nend\r\n```\r\n\r\n### Generated headers\r\n\r\n```\r\nCache-Control:no-cache, no-store, must-revalidate\r\nConnection:keep-alive\r\nContent-Length:35584\r\nContent-Security-Policy:default-src 'none'; child-src storage.project.dev app.project.dev; connect-src 'self' www.project.nl; font-src 'self' assets.project.dev; frame-ancestors 'none'; img-src 'self' data: storage.project.dev assets.project.dev; media-src 'none'; object-src *; script-src 'unsafe-eval' assets.project.dev 'self'; style-src 'self' assets.project.dev 'unsafe-inline'; report-uri /csp_report\r\nContent-Type:text/html; charset=utf-8\r\nDate:Wed, 16 Aug 2017 10:58:28 GMT\r\nExpires:0\r\nPragma:no-cache\r\nServer:nginx/1.4.6 (Ubuntu)\r\nX-Content-Type-Options:nosniff\r\nX-Download-Options:noopen\r\nX-Frame-Options:ALLOW-FROM https://app.project.dev\r\nX-Permitted-Cross-Domain-Policies:none\r\nX-Request-Id:d748d1d5-b6c3-42f6-8b41-6d088ee8283a\r\nX-XSS-Protection:1; mode=block\r\n```\r\n\r\n### Debugging\r\n\r\nI've done some debugging to find out if the problem was in another part of our software. I came to the following conclusions:\r\n\r\n1. Calling the `nonced_javascript_tag` helper, indeed sets the `nonce` in the SecureHelper configuration. \r\n2. This nonce is still present at the end of the request in Rails, tested by reading the `request.env['secure_headers_request_config']` in an `after_action` callback in the `ApplicationController`.\r\n3. When the SecureHeaders middleware kicks in, `env['secure_headers_request_config']` is nil, therefore a new default configuration is loaded from our configuration in `config/initializers/secure_headers.rb`. Somehow the configuration already stored in the `env` is neglected, therefore the nonce is missing and not added to the headers.\r\n\r\nI've disabled all custom middleware in our project to make sure our middleware isn't interfering with the `env` object, this didn't have any impact on the result.", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "n2liquid": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/348", "title": "Don't upgrade insecure requests when the page is served over HTTP", "body": "I want to set `upgrade_insecure_requests` only if the page is requested over HTTPS, because I don't use HTTPS when developing on localhost (i.e. when developing, I browse http://localhost, not https://localhost).\r\n\r\nRight now if I set `upgrade_insecure_requests`, I can't develop locally since all internal resource requests are upgraded, and since my local server doesn't support HTTPS, they fail.\r\n\r\nI think this should be a fairly typical scenario. Would this be considered a bug, or is there a work-around for it?\r\n\r\n### Relevant software versions\r\n\r\n* rack 1.6\r\n* secure_headers 3.6.7\r\n\r\n### Expected outcome\r\n\r\n1. I configure CSP to `upgrade_insecure_requests`.\r\n1. I browse http://localhost while developing.\r\n1. `upgrade_insecure_requests` header shouldn't be set, since it's pointless as the webpage itself is being insecurely served.\r\n\r\n### Actual outcome\r\n\r\n1. `upgrade_insecure_requests` header is set and all internal resources are broken.\r\n\r\n### Config\r\n\r\n```\r\n  SecureHeaders::Configuration.default do |config|\r\n    config.cookies = {\r\n      secure: true,\r\n      httponly: true,\r\n      samesite: {\r\n        lax: true\r\n      }\r\n    }\r\n    # Add \"; preload\" and submit the site to hstspreload.org for best protection.\r\n    config.hsts = \"max-age=#{20.years.to_i}; includeSubdomains\"\r\n    config.x_frame_options = \"DENY\"\r\n    config.x_content_type_options = \"nosniff\"\r\n    config.x_xss_protection = \"1; mode=block\"\r\n    config.x_download_options = \"noopen\"\r\n    config.x_permitted_cross_domain_policies = \"none\"\r\n    config.referrer_policy = \"same-origin\"\r\n    config.clear_site_data = [\r\n      \"cache\",\r\n      \"cookies\",\r\n      \"storage\",\r\n      \"executionContexts\"\r\n    ]\r\n    config.csp = {\r\n      # \"meta\" values. these will shaped the header, but the values are not included in the header.\r\n      # report_only: true,      # default: false [DEPRECATED from 3.5.0: instead, configure csp_report_only]\r\n      preserve_schemes: true, # default: false. Schemes are removed from host sources to save bytes and discourage mixed content.\r\n\r\n      # directive values: these values will directly translate into source directives\r\n      default_src: %w('self'),\r\n      base_uri: %w('self'),\r\n      #block_all_mixed_content: true, # see http://www.w3.org/TR/mixed-content/\r\n      child_src: %w('self'), # if child-src isn't supported, the value for frame-src will be set.\r\n      connect_src: %w(),\r\n      font_src: %w('self'),\r\n      form_action: %w('self'),\r\n      frame_ancestors: %w('none'),\r\n      img_src: %w('self' *),\r\n      manifest_src: %w('self'),\r\n      media_src: %w('self'),\r\n      object_src: %w('self'),\r\n      plugin_types: %w(),\r\n      script_src: %w('self' 'unsafe-inline' maps.googleapis.com),\r\n      style_src: %w('self' 'unsafe-inline'),\r\n      upgrade_insecure_requests: true, # see https://www.w3.org/TR/upgrade-insecure-requests/\r\n    }\r\n  end\r\n```\r\n\r\n### Generated headers\r\n\r\n```\r\n[...]\r\nContent-Security-Policy:default-src 'self'; base-uri 'self'; child-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; img-src *; manifest-src 'self'; media-src 'self'; object-src 'self'; script-src 'self' 'unsafe-inline' maps.googleapis.com; style-src 'self' 'unsafe-inline'; upgrade-insecure-requests\r\n[...]\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "somethingnew2-0": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/331", "title": "Cross-Origin Resource Sharing (CORS)", "body": "This is more of a question than a feature request, is there a historical reason the Cross-Origin Resource Sharing (CORS) headers aren't included in the list of headers configured by secureheaders?  Has it just not been implemented yet? Do you all recommend using [rack-cors](https://github.com/cyu/rack-cors) as a complement to secureheaders instead of including this feature directly? Just curious \ud83d\ude04 \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "belenko": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/317", "title": "Source Deduplication Doesn't Take Schemes into Account", "body": "`SecureHeaders` excessively deduplicates sources without taking schemes into account leading to removal of sources that shouldn't be removed.\r\n\r\nI think the problem is with [`dedup_source_list()`](https://github.com/twitter/secureheaders/blob/master/lib/secure_headers/headers/content_security_policy.rb#L151) which relies on filesystem-like matching.\r\n\r\n### Expected Header\r\n\r\n`Content-Security-Policy: default-src 'self' wss://ws.contoso.com *.contoso.com`\r\n\r\n### Actual Header\r\n\r\n`Content-Security-Policy: default-src 'self' *.contoso.com`\r\n\r\n### Config\r\n\r\n```ruby\r\nSecureHeaders::Configuration.default do |config|\r\n  config.csp = {\r\n    preserve_schemes: true, # this line doesn't matter, actually\r\n    default_src: %w('self' wss://ws.contoso.com *.contoso.com)\r\n  }\r\nend\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "csuhta": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/273", "title": "Add instructions for Rails 5 confusion? ", "body": "Rails 5.0 includes [several header options](http://api.rubyonrails.org/classes/ActionDispatch/SSL.html) that conflict with Secure Headers 3.3.2.\n\nFor example, here is my SecureHeaders config:\n\n``` ruby\nSecureHeaders::Configuration.default do |config|\n  config.cookies = {\n    secure: true,\n    httponly: true,\n  }\n  config.hsts = \"max-age=#{356.days}\"\n  config.x_frame_options = \"DENY\"\n  config.x_content_type_options = \"nosniff\"\n  config.x_download_options = \"noopen\"\n  config.x_permitted_cross_domain_policies = \"none\"\n  config.x_xss_protection = \"1; mode=block\"\n  config.referrer_policy = SecureHeaders::OPT_OUT\n  config.csp = SecureHeaders::OPT_OUT\nend\n```\n\nIf I set `force_ssl = true` in the Rails configuration, I get this when I boot a Rails 5.0 app:\n\n``` text\nDEPRECATION WARNING: In Rails 5.1, The `:subdomains` option of HSTS config will be treated as true if unspecified. \nSet `config.ssl_options = { hsts: { subdomains: false } }` to opt out of this behavior.\n```\n\nIt's unclear to the user (1) why they need to set it in both places (2) which one overrides the other. Also, should SecureHeaders be performing the Rails configuration for you?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19515966", "body": "Actually, scratch that. It seems CSP headers are still always sent to Safari 5 with either version, but the version sent in gem version `0.4.3` seems to be less catastrophic (only images die instead of everything)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19515966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "connorshea": {"issues": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/269", "title": "report-uri is deprecated in favor of report-to", "body": "I don't know if the gem should be modified based on drafts of the spec, but I figured it was worth noting that the latest draft of the CSP standard replaces `report-uri` with `report-to` ([Source](https://w3c.github.io/webappsec-csp/#directive-report-uri)).\n\nObviously `report-uri` shouldn't be removed, but `report-to` might want to be supported? I'm not particularly familiar with the W3C drafting process, so I'm not sure how much of this will be subject to significant change.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/269/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/a140b8d2bd94d54f7164625aac3c8b6176fc0ee5", "message": "Add Ruby 2.3 and 2.4 to test matrix."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paulfri": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/35a505df70b8a52fd87ecb85ead97117a5560027", "message": "Support multiple sources in asset tag helpers"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/ba575317780eca138829ab6855e38ea564ed8762", "message": "Add missing `nonced_stylesheet_pack_tag`\n\nEquivalents were added in 1e81a0a.\n\nThis also fixes a bug preventing passing any arguments to these\ntags. Tests were updated with a sample to reflect this."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghiculescu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/3b43af51ed17d9473fef403789d0440be287e7bb", "message": "correct url"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2b6519f8d964ff7dd519ea3b922622cf126f261d", "message": "the same URL is repeated twice in the gemspec"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "steveh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/1e81a0a5635647618f5678123cefbb76baad0c6e", "message": "Add nonced versions of Rails link/include tags\n\nAdds support for nonced versions of Rails' CSS, JavaScript and Webpacker link/include tags.\n\n* nonced_stylesheet_link_tag\n* nonced_javascript_include_tag\n* nonced_javascript_pack_tag"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151293979", "body": "No, `nonced_style_tag` generates `<style>` whereas `nonced_stylesheet_link_tag` generates a `<link />`", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151293979/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151294099", "body": "We could, but for the purpose of this test the method is identical. Would you prefer that?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151294099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151294296", "body": "The Rails API is a little different:\r\n\r\n`javascript_tag(content_or_options_with_block = nil, html_options = {}, &block)`\r\n\r\n`javascript_include_tag(*sources)`\r\n\r\nIt might work as a passthrough though, if that's preferred?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/151294296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ptoomey3": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/0474176a5bc0f4e5ffada1d9d83a9efd09cbabb4", "message": "Use consistent quotes throughout"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9e04fa34d7d6f93b5cac5d727300347e3cbd2e98", "message": "Update example to use multiple config values"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/8447ec32c552034c48498fd782c382f1df3f0a6d", "message": "Update changelog"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/41e87d545cc823b32eb3b7651b28721ea257dd13", "message": "Add support for multiple policies"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0190de96e3b1426a4819d1e9b788b1a7e54253bf", "message": "Updates CHANGELOG"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/7c525e42382e262403292bd42232e0c90bb49804", "message": "Update Expect-CT to use separator in spec"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/2bb810ad45382cb1e1da2c8c4d995ee21a9241e0", "message": "Distinguish between source lists directives and non-source list directives (#354)\n\n* Add more specific type support for non \"source list\" directives\r\n\r\nPrior behavior treated anything that was an \"array of stuff\" as a \"source\r\nlist\". But, source lists are very specific and don't really have meaning for\r\nsome directives. For example, the sandbox directive take an array of values,\r\nbut they are very specific. They aren't URLs, don't support wildcard values,\r\netc. So, This commit extract those directives from being treated like source\r\nlists and adds native support for the associated directive.\r\n\r\n* Make overall naming more consistent and adds some polish\r\n\r\n* Remove unnecessary nonce logic and special case OPT_OUT for source lists"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/48c69ab33ea376e502a90dd09b42f44878431670", "message": "Polish based on feedback from @oreoshake."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/e5fd74389bc6e1e012aa53cf7540ec93e7a752ac", "message": "Bump version number of gem."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9e8c3a3f2cd8103c9a28169cbdc77a1fd0542ab9", "message": "Remove unused constant."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f203dc340d9b68b75467fd57d537a1afbfb15327", "message": "Update Clear-Site-Data to use the current spec format."}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/383", "title": "Rewrite the entire notion of named overrides (breaking change)", "body": ":warning: Work in progress \u26a0\ufe0f \r\n\r\nThis PR is very likely not yet ready for a full review. But, I wanted to push up the work in progress to get a sense of whether the direction of it is palatable, since I am introducing some relatively foundational changes that will definitely break some existing uses. \r\n\r\n#380 outlines a bug related to the current implementation of named overrides. There is an underlying assumption that named override is more or less a \"fork\" of a parent configuration. The parent configuration, at the point the override is defined, is duplicated and then the changes in the override are applied. The resulting configuration is statically stored in a class instance variable and can be retrieved when it is requested with `Configuration.get(:named_override`). Unfortunately, this model is directly at odds with how configurations work at runtime. Imagine the following scenario:\r\n\r\n* Request is using the default config\r\n* At runtime we append on another `script-src`\r\n* At runtime we apply an override\r\n\r\nCurrently, the above scenario results in the appended `script-src` from not showing up. The reason is that, when we call the override, it applies the config that was generated when the override was defined. That config is simply a copy of the original default config with the overridden directives applied. So, the dynamic changes made to the default config are lost. \r\n\r\nIn order to fix this we, unfortunately, need to redefine the entire notion of an override. Most callers would assume that an override will override the \"current configuration\" at runtime. As a result, we can't statically computer the override at the point it is defined. Instead, we need to treat overrides more like how we treat named appends. We store the provided block for an override in a hash that maps the name to the `Proc`. Then, when the override is requested, we `instance_eval` the `Proc` with the current configuration for the request. \r\n\r\nAlso, during this PR it became evident that trying to cache the generated configs was incredibly complex and prone to error. This PR removes the caching and just computes the headers on demand for each request. We already hit this case a fair bit if one ever used per-request overrides anyway, since the cached values would get invalidated depending on which code path you went through on a given request. The computation overhead of making a header is relatively low and we don't expect it to be a concern. If there is a concern we could optimize the base case and only precompute the default config. But, if any changes are applied, then the precomputation is lost. As I'm typing this it sounds like that could be a nice win, since so few folks probably use dynamic policies. Thoughts?\r\n\r\nfixes #380\r\n\r\n## All PRs:\r\n\r\n* [ ] Has tests\r\n* [ ] Documentation updated\r\n\r\n## Adding a new header\r\n\r\nGenerally, adding a new header is always OK.\r\n\r\n* Is the header supported by any user agent? If so, which?\r\n* What does it do?\r\n* What are the valid values for the header?\r\n* Where does the specification live?\r\n\r\n## Adding a new CSP directive\r\n\r\n* Is the directive supported by any user agent? If so, which?\r\n* What does it do?\r\n* What are the valid values for the directive?", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70352686", "body": "I just gave that a quick glance, but left some initial feedback. More generally, I would be hesitant to set this for Chrome, as the current stable implementation has a number of bugs:\n\nhttps://code.google.com/p/chromium/issues/detail?id=444511\nhttps://code.google.com/p/chromium/issues/detail?id=412866\n.. I'd have to double check if there are any additional known issues\n\nThe above bugs prevent `max-age` from working, doesn't let you revoke/rotate out a known pin, and always sets the `includeSubdomains` directive even when the policy does NOT have it set. So, I'd be a bit cautious with putting `Public-Key-Pins` in a release until things settle down. Supposedly these will be fixed in the next Canary release, but I haven't had a chance to validate the fixes yet. Also, I haven't played around with Firefox 35 as much, but I haven't yet seen anything unexpected or that violates the spec in my limited testing.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70352686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122204", "body": "This block seems unneeded. Supporting a scheme relative URL in the config implies the resulting final URL will go over `http` or `https` based on some sort of context. But, it will always get set to go over `https`. I vote that `report_uri` is documented simply as `:report_uri => \"http[s]://example.com/uri-directive\"`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122212", "body": "@oreoshake - This (`\\\"#{hash}\\\"`) is the quoting that is necessary in Firefox 35 and will soon be mandatory in Chrome Canary. :+1: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122245", "body": "As noted in http://tools.ietf.org/html/draft-ietf-websec-key-pinning-21#section-4.3 and http://tools.ietf.org/html/draft-ietf-websec-key-pinning-21#section-2.5:\n\n> The given set of Pins contains at least one Pin that does NOT\n>       refer to an SPKI in the certificate chain.  (That is, the host\n>       must set a Backup Pin;\n> ...\n> Because having a backup key pair is so important to recovery, UAs\n>    MUST require that hosts set a Backup Pin \n\nSo, `validate_config` should check to make sure that >= 2 unique pins are provided in the config.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122323", "body": "You may want to add a note and/or a warn that `report_uri` and `Public-Key-Pins-Report-Only` have not yet been implemented yet in Chrome: https://code.google.com/p/chromium/issues/detail?id=445793#c2 (I'm not sure of the status in Firefox). Similarly, it may be good to document/warn that setting a `report_uri` to the same domain as the hosting application can lead to unexpected behavior because, as noted in http://tools.ietf.org/html/draft-ietf-websec-key-pinning-21#section-2.1.4:\n\n> If the scheme in\n>    the report-uri is one that uses TLS (e.g.  HTTPS), UAs MUST perform\n>    Pinning Validation when the host in the report-uri is a Known Pinned\n>    Host; similarly, UAs MUST apply HSTS if the host in the report-uri is\n>    a Known HSTS Host.\n\nSo, if you have a pin failure you will not be able to send a report back to the hosting application via `https`. Moreover, if the site is HSTS you won't be able to send back a report of `https` or `http` (because of HSTS).\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122457", "body": "I think draft 21 is the latest. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23122457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23125988", "body": "This syntax feels a little awkward (could just be me). Given that it would be extremely rare for each pin to use their own hash type, it may make sense to just set it globally:\n\n```\n...\npin_hash: \"sha256\",\npins: [\"pin1base64hash\", \"pin2base64hash\"],\n...\n```\n\nOr, just bake the hash type into the pin\n\n```\npins: [\"sha256:pin1base64hash\", \"sha256:pin2base64hash\"],\n```\n\nI tend to prefer the first style, as there is no reason you can't/shouldn't use the same hash format for all pins. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23125988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23128503", "body": "Yeah, I definitely think it should be flexible enough to support alternate hash algos. I just thought the array of hashes syntax was a bit awkward. I'll leave up to @oreoshake since it is purely stylistic preference. \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23128503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23179202", "body": "Ha...fair enough :smile:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23179202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56670074", "body": "Given this PR is optimizing policy overrides are, I was surprised there was no test to validate that you are in fact only busting the cache once even if there are > 1 overrides. Does that seem a reasonable thing to add?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56670074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56670241", "body": "Would it also make sense to add a test to verify that overrides never end up touching `csp` and only touch `dynamic_csp`? \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56670241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123030360", "body": "Doh..need to bump the actual version too. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123030360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123030709", "body": "Or do you all prefer to just suck in the changes and do the version bumping yourself?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123030709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123032485", "body": "I updated this, since it is the URL that Mike West referenced. The current URL seems to have not been updated recently. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123032485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123044886", "body": "Ok..I bumped the gem version number in https://github.com/twitter/secureheaders/pull/334/commits/d2070ea581004db8b0b3a83550ffccccb46c8846. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123044886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123047750", "body": "Yeah..debated that myself and laziness won out :smile:. I'll change it. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123047750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123048427", "body": "doh..darn you sublime whitespace auto-detect. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123048427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137082296", "body": "This is the bit I think I simplified. But, a second set of eyes to make sure I didn't remove some underlying assumption would be \u2728 ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137082296/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137082447", "body": "I don't think I saw any `:string` types so I removed it here. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137082447/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137082810", "body": "If someone sent something bogus like `sandbox: false` we would technically catch that here. But, we never actually reach this code if you do that, since there is some higher level code that does something like `next unless value` for all directives. I didn't want to open pandora's box by removing that higher level assumption. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137082810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137097068", "body": "You caught me..I noticed this as well and punted :-). I'll take a quick pass at addressing it. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/137097068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/145750439", "body": "I also updated the name of this test, as \"expect certificate\" was ever so slightly confusing :smile:. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/145750439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163030158", "body": "The configuration now references some of the individual header objects..so it had to move. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163030158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163031057", "body": "Since all the caching and stuff has been removed I needed up moving some of the \"make me a header\" logic down into the actual `Configuration` object. So, these classes are defined in https://github.com/twitter/secureheaders/pull/383/files#diff-5b9420dafe46fa9c6c8ac3415ab06102R91. Let me know if you hate it. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163031057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163031350", "body": "We were only validating the config during the initial `Configuration.defautl { ...  }`. But, we never did any checks when an override is applied. So, before we actually send out the header, we validate again. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163031350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163031617", "body": "I made the `generate_headers` ignorant to HTTPS. We could send additional data into `make_headers` to let be smart about HTTPS. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163031617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163031702", "body": "Yay for killing off this `update_cached_csp` business \ud83d\ude1b ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163031702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163032156", "body": "I kept `Configuration.get`..but it now only ever returns the global configuration. I'm guessing almost nobody was calling `Configuration.get`, so we could rename this to something like `Configuration.default_config` or something if you like. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163032156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163032408", "body": "`target` didn't seem to be used so I removed it. Plus, whatever the intent with \"target\", we probably couldn't support it anyway (i.e. same issue as named overrides). ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163032408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163032766", "body": "In the spirit of \"cache less\" , I just made `hpkp_report_host` a dynamic method invocation. Plus, it was the only attribute that didn't have some config class backing it..so it made defining our attributes cleaner :smile:. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163032766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163033458", "body": "I was originally doing all this overrides stuff inside the main `secure_headers.rb`. But, most of the code in that class assumes a `request` object. But, we might want to apply an override to a config outside of that context. For example, at GitHub, we have a script that we used to update some static files. So, it would be handy to be able to apply an override to a config directly. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163033458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163034462", "body": "As of https://github.com/twitter/secureheaders/pull/383/files#diff-5b9420dafe46fa9c6c8ac3415ab06102R91 I realized we no longer really ever had a need to look at this value. Plus, it feels like `CONFIG_KEY` is something that the config object should know about and not the individual classes (since the `Configuration` object is the only object that really needs to mess with them). ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163034462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163034712", "body": "As of https://github.com/twitter/secureheaders/pull/383/files#diff-5b9420dafe46fa9c6c8ac3415ab06102R186 I made the `make_header` logic super general. So, I adjusted al the classes to support the same interface. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163034712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163034814", "body": "The linter told me that a few locations needed a small style update. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163034814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163035375", "body": "@oreoshake - I know we had chatted about the expectations of `merge`. But, given that `merge!` was overwriting existing values, it seems like `merge` should to the same (or `merge!` should do the opposite). It seems like `append` should be used for any kind of \"combine these policies\" use cases. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163035375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163035832", "body": "I'm now validating `report_only` inside the actual config object. So, we can't go setting `report_only: true` unless we are going to be validating it with a `ContentSecurityPolicyReportOnlyConfig`. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163035832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163036015", "body": "This test exercises the bug in https://github.com/twitter/secureheaders/issues/380. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163036015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163036146", "body": "Since we are now validating the config before we generate headers we need to use a legit value for `plugin_types`. ", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/163036146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "arr-dev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/4bc4b746accf92196c5f8e987df231e01cba0333", "message": "Support worker-src CSP directive (#364)\n\n* Support worker-src CSP directive\r\n\r\n* Add newline after `worker_src` const def\r\n\r\n* Remove trailing whitespace"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "srisa": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/7102240d8344c1885ae61ab6b8f8d55f5699a75d", "message": "addressed the comments from the review"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/02808fc4e5831d5e5b5fa96ca8de275d39a7df79", "message": "Corrected a spelling mistake"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/dfd70f4f43672eab17e03398731dca7fcec74e2b", "message": "Changes to the documentation  to make it more explicit that provided configuration should only be used as a reference"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koenrh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/44c7d278ea375faf959746525ae80a6ffde3478d", "message": "Fixed URL to 'Upgrading to 4.0' document."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "diddeb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/552afc08287dbef0a4af2659d52133b8e4756968", "message": "Typo 2\n\nSo `shaped` becomes `shape`."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/592aa90c4c6450ad27a477c7096839462ecc34c5", "message": "Typo\n\nSo `shaped` becomes `shape`."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anglinb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/d0026969fa471ddb02083e9303217419b83b585e", "message": "Adds SameSite=Lax default"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/0ae4c00624cb29d1e1621961396b88b55b4e23f6", "message": "Forces explict OPT_OUT"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/810e2c1e99f76de67d56c451f0a6218084c0cb72", "message": "Updates documentation detailing the new cookie defaults"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/8f7757e82f10dbfba6c1c1361b095a0568f1e376", "message": "Style fixes"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/19850dd3fc266719ec9afac213f055fa04604492", "message": "Adds secure and httponly to cookies by default"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1977637ba3546d20f41ff601326f4096040aee3a", "message": "Pins dependency version of useragent because secure_headers actually requires this version for the test suite to pass"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carlosantoniodasilva": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/aa1b0304cbabc4a3af8b40edf03a19569db3ce5b", "message": "Simplify the directives setup by removing the \"draft\" ones"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/49514ff42dbdd3a9d6d7ecec46a784a572dda596", "message": "Add \"manifest-src\" to Chrome/Firefox\n\nIt is well supported in both now."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/5b4a5e3be988347fad37be457a86cefe2915403a", "message": "Remove dropped \"reflected-xss\" directive"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/6cf57c09b0edd2f4003fc7c9d96aae0b8535612c", "message": "Bump Ruby version to 2.4.1 and test versions of 2.3 and 2.4"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/85d4879d7359424a1be0f40e8a3059672d9b3558", "message": "Use full version for Ruby 2.3 on travis, otherwise it fails"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/35d3c219ce8eb1ded1dd12e09b55030a956a1ecb", "message": "Remove unneeded flatten"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9dceb6e140674981be833e6ab172477f9f0f6406", "message": "Avoid creating extra arrays when building the headers hash\n\nWe only need to check for two different classes in here, so it's just\nbetter/faster to do the individual comparisons than building an extra\narray per header that is being generated."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/84e30f7e53bce59d312d5d6e482d6a63921f1ea6", "message": "Fix type [ci skip]"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/4bd8b9b0269bab7708ce298fb55b652e292e6178", "message": "Simplify the modified check on the config to avoid metaprogramming"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/13c354cea6e5e3ef9ede7afd3e6147c91b9bbf3b", "message": "Freeze all header names\n\nSince the library builds a hash with all the headers many many times, it\nends up retaining a lot of strings since string hash keys are duped by\ndefault. By freezing the keys we ensure the duping doesn't happen,\ndecreasing the number of objects created."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/45f8530ebe5226035f4904ca89750c44989feead", "message": "Perform lop using `each_key` instead of creating intermediate array"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/d3c9662c9b842e99edab42bee0137562d6d73f9e", "message": "Extract logic to write attribute to prevent double checking for the attribute being valid\n\nWhen initializing the config from hash we need to check if it's part of\nthe known list of attributes, and the same happens when writing the\nattribute (I'm still wondering why we need to do that check, since the\nmethods are initialized from the list of attributes, but decided not to\ntouch it for now).\n\nExtracting this logic allows us to bypass the duplicated inclusion check\nwhen initializing from hash. It also bypasses `send` which helps speed\nthings up."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/4e0f916615b5dd3f92a97d08bb5530bd9e8c081d", "message": "Loop a single time over the hash to set configs\n\nReject `nil` values within the loop, instead of performing an initial\nloop just to reject them.\n\nLoop using `each_pair` as we already get both key and value, without\nneeding to perform another hash lookup to grab the value."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/f7115c33550622b846e1953ffd04c1a46f2aafcd", "message": "Cache instance variable name to prevent creating the same string 3 times"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/bdb959dced2756b131d492654613aa3aefde1003", "message": "Speed up `to_h` on dynamic config by performing a single loop through attrs\n\nAvoid initializing the hash with a `nil` value just to reject it later."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/51f7b749c0fbc705690c9dc70a3d4ef97bbc8592", "message": "Cache the config attributes to prevent creating multiple objects at runtime"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/43d4101e2a7826e4ec6914e8e9d9a81d66eb01b2", "message": "Include Ruby 2.3 in the test matrix\n\nRuby 2.4 needs to wait on a new Rails 4.2.x release which includes some\nfixes for that Ruby version, so going only with Ruby 2.3.x for now."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scouttyg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/5d9b015d3dd11f8180a6b64c7f13d8f5764c8b46", "message": "Updated a few places where wrong wordage was being used for where and how to configure hashes"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bobjflong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/587c40e71e56ba6c5b7231b1c47f9587dcf05a28", "message": "prevent loss of frame_src/child_src when using append_content_security_policy_directives"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/5fda0fa7f3733c9a4d24d5061e7916f6dfbe04d4", "message": "remove deprecation warning about frame_src"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dziulius": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/86b270b53d286149ad57fda684310568dbe90920", "message": "Added CSP2 support for Safari 10+"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grimreaper": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/9cb212a130d5f733884b4acf839f5b3fe50d634f", "message": "Merge pull request #315 from twitter/mit-license\n\nUpdate LICENSE to MIT\r\n(approved on behalf of Twitter)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BePsvPT": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/b4ba03ae77a289210403c991da5d6b830d313ba9", "message": "Add link to php secure-headers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lgarron": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/40ed074b23cb3e6d90bc90e4c1595ab1aea953cb", "message": "Remove `preload` from the default HSTS configuration in the README.\n\nSee https://hstspreload.org/#opt-in"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mastahyeti": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/412ccf2e724e5e79abea261ce6d8a5b181e84663", "message": "Merge pull request #1 from twitter/clear-site-patch\n\nadd functionality to validate/set the header via the config"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/666d4d6c04bf5e8f6395355bda370f7f736078e6", "message": "different exception for invalid utf8 in 1.9.3"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/9e1ee40d32a988f67d4742e9ed45aad5031a7dc1", "message": "Add support for Clear-Site-Data header"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42276203", "body": "Since we're using these in the `request.env`, it seems like they should be more unique to avoid conflicts. Maybe `SECURE_HEADERS_HPKP`, for example?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42276203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42276643", "body": "It seems a bit weird to me to be using class-level instance variables so much. That seems to be how it was before this PR, but at some point do you think it would be worthwhile to to refactor to have a Configuration instance that is passed around?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42276643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42276985", "body": "Wouldn't hurt to freeze the results of `make_header(config)` too.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42276985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42277024", "body": "ditto here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42277024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42277236", "body": "This is a weird syntax for accessing a method. How about `SecureHeaders::Configuration.default_headers`, unless you think `::` is more idiomatic.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42277236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42277836", "body": "Using `each_with_object` instead of `inject` would save you a line on [L140](https://github.com/twitter/secureheaders/pull/181/files#diff-e7fcd10663004caed933b95e0ff2e643L65).\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42277836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42277902", "body": "This block is pretty complex and hard to read. Do you think any of the logic could be extracted into helper methods?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42277902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42280844", "body": "Are these two separate API's for overriding the config per-request? If so, it would be nice to just pick one to go with for simplicity's sake.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42280844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42281059", "body": "A comment here would be good. I don't understand this.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/42281059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jeremydurham": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/cd66deeba6b39b33a88c087de150e4f0c7793804", "message": "Add missing Referrer Policies\n\n  * Add same-origin, strict-origin and strict-origin-when-cross-origin"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anujdas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/57e77b73d69b8b11608194067a6bdeff215bde42", "message": "Set secure cookies on interleaved http/https calls correctly\n\nThe current HTTP/HTTPS detection code mutates the cookie config in place\nin order to switch between secure and non-secure cookies. However, since\nthe original global secure_headers config was passed around everywhere,\nthe very first HTTP request received would modify the global cookie\nconfig, resulting in :secure => false for all subsequent requests\nregardless of SSL. The solution is to dup the cookie config before using\nit, which is a pattern followed for every other configuration type\nanyways; a better long-term fix would be using non-mutating methods\ninstead."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcaught": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/53f0d3ddbae5ae5ba4b109f076f0b89a5cea55cb", "message": "Improvements to the documentation\n\nChanges suggested by @oreoshake and @jacobbednarz."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/e98d8f1814f1d369fc9869a58890959f50b38af5", "message": "Attempt at breaking up the documentation"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lalithr95": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/50eac98be105307edfa9f86b7f0d948f2eccb058", "message": "Fix readme"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/387f7a69a4e77b15dace6ff8010c0585091fa1e3", "message": "Minor change in domain"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "btsai": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/555d46b184e25dac4ae6da4ae5cbb952df3533c2", "message": "Merge pull request #1 from btsai/btsai-patch-1\n\nFixing README documentation on csp_report_only"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/615136015538339bd42ee250d78cd0dedb8f638f", "message": "Fixing README documentation on csp_report_only\n\n`csp_report_only` is available only in 3.5.0_pre and onwards, but if you run bundle install with `gem 'secure_headers`` in your Gemfile, it will pull 3.4.1 which doesn't have `csp_report_only` available."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "olivierlacan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/35c702652727f041474b7f23628ded57f1ad01fc", "message": "Use SVG badges"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koenpunt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/fbb4dc2cc0b470d074b481ae3b616ccdf4fd1201", "message": "check for existence of ActiveSupport"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/129720eb20fac66fd1e0730b46e76630befc227d", "message": "hook include of helper to loading of ActionView\n\nWhen using rspec with rails-controller-testing, specs would break due to incorrect load order. More info here: https://github.com/rails/rails-controller-testing/issues/24"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xtian": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/66f439dfeb3e77a73dfb4af41d77ad29537f23c8", "message": "wws: -> wss:"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jurre": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/d113f43a31bbf2e61d52a7790b1c641dc2196c74", "message": "Correct usage of content_security_policy_nonce in upgrade docs"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dankohn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/8ce2928764086b312042dcefe020be05acd93ae5", "message": "Alternative fix for already initialized constant\n\nSigned-off-by: Dan Kohn <dan@dankohn.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidhan527": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/2ee39506a32f271cb7ebb4d96b8208baea0805b0", "message": "Add updates to the upgrade to 3.0 readme relating to nonce and opting out of default behavior"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stefansundin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/3558578fecb8a34e0e2f63a5bec2a5173d9af912", "message": "Add test for boolean values."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/caa7d925fd64e504672bd1198b3130196ca2ea15", "message": "Fix false booleans being included in the CSP directive."}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/89cdbf177e64da5eb1b9abbd6420cb7f80992d81", "message": "Fix minor papercuts. Add description to rake task to make it appear in \"rake -T\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomgilligan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/07c9520371c29d75fe3d692c1d456db5c1225ef9", "message": "Disable Referrer-Policy by default for now"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/1fe3cdf576cabc90693f1b9da811da0c331b39c6", "message": "Correct a typo in name of Referrer Policy header"}, {"url": "https://api.github.com/repos/twitter/secureheaders/commits/b9de3f0a8f580c9cc66b1133f3834339599b9c3d", "message": "Add support for Referrer Policy header"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/61006761", "body": "Ahh! Soz\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/61006761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/61007056", "body": "Yep, addressing # 2 and typo in railtie now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/61007056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ivanreese": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/secureheaders/commits/84a001b10fc2bd06f50a07d28075aef50e39cb8c", "message": "Fix a formatting error in the changelog"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "s-gerber": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/370", "title": "small typo fix: a minimum \u2026 IS required", "body": "This PR fixes just a small typo.\r\n\r\nThank you for your work", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sikachu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12669261", "body": ":-1: ... I think we should fix something else, like make sure that this gem follow Ruby's convention.\n\nI think the gem name should be change to `secure_headers`, if the author really want to use SecureHeaders as a module name.\n\nor else, move all the files to `secure/headers.rb` ... but it doesn't make any sense here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12669261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707412", "body": "Yeah, I think just the Gem name fix would be fine. I think `secure_header` would be a great name for this, so that it would follow the convention.\n\nI could send a PR for gemspec change, but would still need you to do the `gem push` and `gem build` still. Do you want me to do that?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707666", "body": "Oh, it has some issue, since if your gem name is `secure_header`, the `require =>` fix in b2266ca is not required anymore. So if we change the gem's name, you don't need to merge in b2266ca.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12707666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12728462", "body": "Oh yes, `secure_headers`. I actually missed the pluralization there. :poop: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12728462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472597", "body": ":+1: thanks for updating this. This will make our lives easier. :)\n\nOh, one last thing, you might eventually want to rename the gemspec file to match the new gem's name though (`secure_headers.gemspec` instead of `secure-headers.gemspec`)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hellvinz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12693230", "body": "i've put \n\n```\nensure_security_headers hsts: {include_subdomains: true, x_frame_options: false}, x_frame_options: 'DENY', csp: false\n```\n\nin the controller\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12693230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bemurphy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12930745", "body": "I think you meant SecureHeaders::ContentSecurityPolicy class and not the controller?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12930745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12956054", "body": "I think there's some chrome specific stuff (like the extensions) that could be split out to webkit as well.  Maybe have a general `#browser_extensions` method or something that can handle that kind of thing?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12956054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12957856", "body": "BTW, here's my feature branch flogged on the file currently:\n\n180.2: flog total\n     7.5: flog/method average\n\nHere's master:\n   250.1: flog total\n     8.9: flog/method average\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12957856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968371", "body": "@oreoshake ok I'll keep trucking with it tonight then.  I think I can get it far enough it's worthy of master (it's pretty close already) and then we can keep pulling in features for little extractions here and there.\n\nI think the tests were pretty helpful btw (I hope!) because I've relied on them entirely for the refactoring so far.  I do need to do another sweep on them though to make sure nothing is breaking and stubs are lying to me or something...\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968723", "body": "@oreoshake hah, yeah that issue just caught my eye, too.  I'll check it out.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/12968723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13732052", "body": "@oreoshake sounds good.  A couple questions/points first:\n- I split into a different implementation Thursday night at the hackfest.  It's in my branch at: https://github.com/bemurphy/secureheaders/tree/content_security_policy_refactor\n- See if you have an implementation preference.  I will say in the new branch, I was having trouble pushing `#normalize_reporting_endpoint` down into a strategy so that says something.\n- I agree that ultimately the tests should be split out but that it's a win for now.\n- Lastly, the one thing that led me to the different attempt last thursday was that the `ContentSecurityPolicy. initialize` went to 3 optional arguments, which broke the notions of a factory from the browser in the `build` class method.  Maybe that request really ought to never be nil, but also, that method signature is a bit messy feeling to me now.  The messiness bit is something that can be addressed later.\n\np.s. that's right...there was hacking at the hackfest!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13732052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13732762", "body": "thought about this some more, fwiw it's a good idea to look at the new implementation but if the old branch will work I think it'll be less headache, I'll tell you more later.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13732762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13734825", "body": "I won't give the plus one since I wrote much of it ;)  But two things\n\n1) check and/or delete this commented line:\nhttps://github.com/twitter/secureheaders/blob/smelly_csp/lib/secure_headers/headers/content_security_policy.rb#L82\n\n2) As long as `ContentSecurityPolicy.build` should never have a nil request passed legitimately, then the factory method should still be ok.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13734825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/27735880", "body": "whoa time machine.  @oreoshake cool glad it helped!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/27735880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2851890", "body": "I ripped `supports_standard?` from the other classes, it's only a private for FF now because that was the only place using it.  Does this make sense?\n\nIt was in commit 7a6cbd5f6e6c6c\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2851890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3018579", "body": "+1 on that, was gonna say it was checking `:options` and not `:secure_headers_options`\n\nThe defined check would only be needed if you ever needed to set `@ivar` to nil, which is probably not the case here, so an `if @ivar` is fine.\n\nEDIT:  sorry if I just spammed a github user named ivar.  fixed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3018579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bertomartin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13324881", "body": "I had to: require 'secured_headers' in environment.rb and add ensure_security_headers as well as adding the initializer for this to work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13324881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "coderdave": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13441367", "body": "Now I get:\nconfig/initializers/secure_headers.rb:17:in `<top (required)>': undefined local variable or method`ensure_security_headers' for main:Object (NameError)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13441367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13471651", "body": "Similar error:\nconfig/initializers/secure_headers.rb:20:in <top (required)>': undefined method 'ensure_security_headers' for SecureHeaders:Module (NoMethodError)\n\nI'm use Rails 3.2.12 or whatever we're up to now. :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13471651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472959", "body": "Ok, I'm using secure_headers-0.1.0 now but I still get the error:\nconfig/initializers/secure_headers.rb:15:in <top (required)>': undefined local variable or method ensure_security_headers' for main:Object (NameError)\n\nSorry, I don't see the button to Reopen it. Maybe I don't have permission to?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13472959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13512870", "body": "The include didn't help.\n\nHere's the code. It's in an app that I play with:\nhttps://github.com/coderdave/just-notes/blob/master/config/initializers/secure_headers.rb\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13512870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13530585", "body": "Ah, it works when I add ensure_security_headers to the application controller. No include or require needed. I misunderstood the documentation that the ensure_security_headers goes in the initializer.\n\nThe entire Just Notes apps: https://github.com/coderdave/just-notes\n\nThanks for your help!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13530585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "presidentbeef": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13589292", "body": "Not to beat a dead horse too badly, but if `@secure_headers_options` is `nil`, then it will call up to the parent class. Is this correct behavior? :horse:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13589292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13589855", "body": "Okay, cool :racehorse: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13589855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13815494", "body": "Looks like a good idea to me :rooster: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/13815494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/14590415", "body": "Some docs confusion but otherwise :nut_and_bolt: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/14590415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15543402", "body": "This seems like a good idea to me. Will this affect current users?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15543402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15557948", "body": "Cool :shaved_ice: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15557948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17560189", "body": ":hocho: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17560189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26354499", "body": "I think PStore is the only library you could reliably use to store data on any Ruby deployment :put_litter_in_its_place: I don't think storing stuff in the DB is a big deal. Don't most Rails plugins do this?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26354499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28232194", "body": "Looks good to me but I'm not really an expert.\n:ox:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28232194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/45224561", "body": "This could be a whole separate gem, actually.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/45224561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59113036", "body": "Coveralls uses simplecov which only supports Ruby 1.9 and later: https://coveralls.zendesk.com/hc/en-us/articles/201769485-Ruby-Rails\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59113036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70347030", "body": "I think it should be `:platforms`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70347030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3018092", "body": "I think `defined?` is pretty heavy. Why not just `if @secure_headers_options` or `if not @secure_headers_options.nil?` ? Is `nil` a valid value?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3018092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3102674", "body": "So the value of `:forward_endpoint` doesn't matter?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3102674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3102704", "body": "Uh...is this a merge conflict with the other pull request?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3102704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3108491", "body": "Yeah, wow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3108491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3289639", "body": "Sent _to_ the server or _by_ the server? (I suspect the latter?)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3289639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3289665", "body": "Seems to contradict line 110?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3289665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16012154", "body": "Was there a specific reason for this, or just hygiene?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16012154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/15970519", "body": "`elsif` -> `else`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/15970519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "wmakley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15538080", "body": "Haha I just did it too, oh well. My pleasure!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15538080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15645254", "body": "Ah sorry, didn't mean to get all those commits from my branch, will redo\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/15645254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "reedloden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16151663", "body": "Try the new 0.4.1 release of the gem. I believe I just fixed this issue with a PR.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16151663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17645002", "body": "This is a feature request to make the gem support sending that header for Chrome users for file downloads where the suffix is .crx.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17645002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17681984", "body": "Yep, correct & correct. Yeah, another flag is fine for that special case.\n\nHowever, I did some digging, and Chrome does use this same header to prevent JS from being invoked if sent with a non-JS content-type.\n\nSee the commit that added support to WebKit (for Chrome's use only): http://git.chromium.org/gitweb/?p=external/Webkit.git;a=commitdiff;h=43e54bae5407bc353e5bffa23429bb3f058c1681\n\nhttps://bugs.webkit.org/show_bug.cgi?id=71851\n\nSo, looks like this header should be sent anyway for Chrome, not just because of the special-cased Chrome extension stuff. Any objection to a PR that adds brwsr.chrome? to the check as well? That will effectively handle this specific case, too, as it'll get sent to all Chrome users for all requests.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17681984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/18157601", "body": "Want to bump and release a new version for me when you get a chance? :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/18157601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26076689", "body": "The X- header for CSP only, I assume?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/26076689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/27746770", "body": "I support ripping out brwsr and just sending more headers... Honestly, I send most of these via Apache or nginx rules anyway.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/27746770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41651603", "body": "For now, I think the best option is to not set this header by default but allow a user to set a specific value as needed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/41651603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44911123", "body": "Using https://github.com/fnando/browser or something else?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44911123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44914560", "body": "I think what @cantino is saying is that not every browser implements all of RFC 7034, which means X-Frame-Options using ALLOW-FROM may fail to work on some browsers. In those cases, it may be preferable to just send DENY or SAMEORIGIN instead for those particular browsers.\n\nhttp://erlend.oftedal.no/blog/tools/xframeoptions/\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44914560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56889676", "body": "Why is this only for 'test' and 'development' environments then? What happens differently on 'production'?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56889676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/comments/3163372", "body": "Update the comment, maybe?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/3163372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/3713679", "body": "For Django, you can use https://github.com/jsocol/commonware for most stuff and https://github.com/mozilla/django-csp for CSP\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/3713679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/4555206", "body": "Add hood as well for Node.js... https://github.com/seanmonstar/hood and http://seanmonstar.com/post/66383442331\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/4555206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/4560144", "body": "We link to the github site for everything else, so might as well use https://github.com/seanmonstar/hood -- thoughts?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/4560144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/5643019", "body": "Don't think you meant to do this, considering the next line...\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/5643019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/6673956", "body": "Why p484 and not latest 1.9.3 (p547)?\n\nhttps://www.ruby-lang.org/en/news/2014/05/16/ruby-1-9-3-p547-released/\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/6673956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/8147233", "body": "Don't think you meant to commit this. :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/8147233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/12022398", "body": "Still have `:ruby_21` listed twice here. :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/12022398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/12023259", "body": ":)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/12023259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/12416454", "body": "Actually, can you add https://github.com/ianheggie/hola-ianh/commit/cdfabafac0d56e45b08d22596d861f030fb84c1f as well? All Travis CI builds are failing right now because of the :ruby_22.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/12416454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/16319052", "body": "Just noticed 'X-Permitted-Cross-Domain-Policies' and 'X-Content-Type-Options' are listed twice.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/16319052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/16334346", "body": "`X-Content-Type-Options` is listed twice as well.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/16334346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/16937187", "body": "Might be good to let people configure that somehow (but have a default).\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/16937187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/17360610", "body": "invalid\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/17360610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/23886685", "body": "Shouldn't this be in alpha order?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/23886685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/7421744", "body": "This seems like a typo... What's with the ']' just hanging there?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/7421744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/7421750", "body": "Did you mean to remove this?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/7421750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/29917566", "body": "https://tools.ietf.org/html/rfc7469 now :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/29917566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/33836138", "body": "You mean :ruby_22 at the end here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/33836138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/41221680", "body": "base_uri, no?\n\nhttps://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives#base-uri\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/41221680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/86482206", "body": "Not a fan of pinning to a specific version, as it makes it a big pain to fix when there's a security issue or something with a gem. Can't we just do `\"~> 0.16.8\"` or something if that's the minimum version we actually need?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/86482206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139293622", "body": "ALL_TYPES, perhaps?", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139293622/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139293632", "body": "after_action is more common nowadays", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/139293632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bigardone": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16189501", "body": "Hi! I'll try to test it tomorrow and check if if works. Thanks!  \n\nEl mi\u00e9rcoles, 10 de abril de 2013 a las 04:13, Reed Loden escribi\u00f3:\n\n> Try the new 0.4.1 release of the gem. I believe I just fixed this issue with a PR.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/twitter/secureheaders/issues/43#issuecomment-16151663).\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/16189501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "coderanger": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17374546", "body": "max_age should be a string\n\n``` ruby\nconfig.hsts = {:max_age => '99', :include_subdomains => true}\n```\n\nWould be good to throw a to_s in that code though.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17374546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23837688", "body": "This seems dangerous, and I don't see the need for it. The stuff for content sniffing is definitely needed on all requests. In general there is no way to know if adding format=json to a method is actually going to do anything, it the vast majority of cases this just gives a way around defenses.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23837688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219770", "body": "Any reason you aren't doing this in Ruby? Only hurts platform compat and requires file I/O for no obvious reason.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/6219770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "danhodge": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17374664", "body": "All of the example configurations in the Readme specify `max_age` as a `Fixnum`. I've opened a pull request to call `to_s` on the value before writing the header. Alternatively, the Readme could be updated to reflect that the expected type of the `max_age` parameter is a `String`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/17374664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "codeferret": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19485174", "body": "This reads super confusing I think b/c WebkitStrategy should be StandardStrategy, otherwise it's baffling why firefox checks are inside the webkit class.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19485174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19485319", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/19485319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3018136", "body": "why not superclass.respond_to?(:secure_header_options) ?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/3018136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/4711713", "body": "I always use kind_of? over is_a? but don't know if this is preferred.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/4711713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "caniszczyk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/21279668", "body": "@oreoshake is a boss:\nhttps://github.com/twitter/secureheaders/blob/master/README.md#similar-libraries\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/21279668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23187314", "body": "This was trivially so I merged it in.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/23187314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52128266", "body": "@oreoshake it's my job to bug you I guess :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52128266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52132956", "body": "@oreoshake I'm not good at the Rubies so I haven't found anything online. Honestly, if you have your rake task simply git-tag the project that's a good first step... filling out the release notes is a bit of a PITA... maybe using something git-changelog and modifying it to work for github release notes could be fun (https://github.com/visionmedia/git-extras)... sorry I'm not more helpful here\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52132956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59100626", "body": "@oreoshake do we really need to support 1.8?\n\nIf we do, any idea how I can make this work for 1.8, I was so close...\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59100626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59243550", "body": "@oreoshake fair enough, I'm game to somehow hack the build to not run this on 1.8 but have no idea how\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59243550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rajeshkp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/24133034", "body": "It would be nice to see view the CSP report in HTML or somewhere in the logs. The ability to serialize this information to JSON or providing hooks to other systems could be addressed at a later stage. \n\nInformation on policy adjustment suggestions within the UI would be very helpful.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/24133034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "locochris": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28436334", "body": "Sorry about that - my fault.  I see this in our routes file now:\n\n```\n  unless Rails.application.config.consider_all_requests_local\n     match '*not_found', :to => 'application#render_error_404'\n```\n\nAnd yes adding\n\n```\npost SecureHeaders::ContentSecurityPolicy::FF_CSP_ENDPOINT => \"content_security_policy#scribe\"\n```\n\nappears to have fixed the problem.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/28436334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "EiNSTeiN-": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30788333", "body": "I'm sorry, my solution does not seem to work, I'm still trying to figure it out.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30788333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30796879", "body": "This seems to be the chrome patch that changed this type: http://src.chromium.org/viewvc/blink?view=revision&revision=154215\n\nI am using Chrome 31.0.1650.63\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30796879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30797087", "body": "Is there a way to avoid using the forwarder for non-firefox browsers?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30797087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30798021", "body": "For anyone having problems with this, until this is fixed in the secure_headers gem, I added this to my initializer:\n\n``` ruby\nrequire 'secure_headers'\nSecureHeaders::ContentSecurityPolicyController.class_eval do\n  old_scribe = instance_method(:scribe)\n  define_method(:scribe) do\n    if request.content_type == \"application/csp-report\"\n      request.body.rewind\n      params.merge!(ActiveSupport::JSON.decode(request.body.read))\n    end\n    old_scribe.bind(self).()\n  end\nend\n```\n\nThis fixes the forwarder.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30798021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30853313", "body": "I had report_uri set to FF_CSP_ENDPOINT, which as you mentionned is wrong. The correct thing to do is to set both forward_uri and report_uri to the same URI, which appeared counter-intuitive to me for some reason.\n\nWhy not simply use the report_uri as the forward_uri when the latter is not set and report_uri is cross-origin?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30853313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30853373", "body": "Closing this since I found my bug.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30853373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30856335", "body": "See #79 for some more background on the problem with Chrome forwarding.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30856335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30860181", "body": "I'm not sure how to fix the spec failure...\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30860181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30891563", "body": "I think I fixed the merge conflict...\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/30891563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/50496953", "body": "The test failure looks unrelated... not sure?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/50496953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51824782", "body": "I'll get to this in the next few days\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51824782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51954190", "body": "Awesome, thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51954190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55804957", "body": "I know some google domains are already using it (youtube etc) and my current version of chrome (37.0.2062.120) supports it, but I don't know the exact version where this was added. The webkit bugtracker says [r133323](http://trac.webkit.org/changeset/133323) in webkit.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55804957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55805723", "body": "The report looks like this:\n\n``` ruby\n{\"xss-report\"=>{\"request-url\"=>\"https://foo.com/?foo=sdfsdf%3Cimg%20src=%22x%22%20onerror=alert(/1/)%3E\", \"request-body\"=>\"\"}}\n```\n\nWhere `request-body` is supposed to be POST parameters.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55805723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55806010", "body": "Thanks for merging! I'll give more details when this goes to prod.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/55806010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "cantino": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44915948", "body": "Thanks @oreoshake and @reedloden,\n\nAs Chrome doesn't support `ALLOW-FROM`, my intention was that we simulate the behavior by checking the _referrer_ and responding with either `DENY` or `ALLOW`.  Otherwise `ALLOW-FROM` is basically unusable.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/44915948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51699544", "body": "We may get to it, depending on our needs.  It's turned out that conditionally skipping the before_filter works fairly well too.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/51699544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52402244", "body": "Yea, the original plan was to allow certain user agents and referrers to skip clickjacking protection.  We've mostly just skipped the whole `before_filter` in the few controllers where this is needed, though.  But it'd still be a cool feature that we might use.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52402244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "achiu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/46856212", "body": ":+1: looks good thanks for the update\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/46856212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jeromegn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52802353", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52802353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "spikebrehm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52959700", "body": "Sweet, thanks for this PoC.  What do you think about a more simple approach of using a specific Rails helper, say, `inline_script_with hash`:\n\n```\n<%= inline_script_with_hash do %>\n  var timestamp = Date.now();\n<% end %>\n```\n\nwhich explicitly computes a hash, and saves it to a list for later (controller instance variable, `request.env`, whatever), and the SecureHeaders gem utilizes the list when building the header?\n\nOr is this the approach you mention here:\n\n> Some people would rather support dynamic hashing (in development only) rather than have an external process (guard) grep/populate hashes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52959700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52970032", "body": "FWIW I got this working by copying over your `SecureHeaders::ScriptHash` middleware into our app, and with this helper:\n\n``` ruby\nmodule InlineScriptHelper\n  def inline_script_with_hash(&block)\n    content = \"\\n#{capture(&block)}\"\n    (request.env['script_hashes'] ||= []) << compute_inline_script_hash(content)\n    content_tag :script, content\n  end\n\n  def compute_inline_script_hash(content)\n    Digest::SHA256.base64digest(content)\n  end\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/52970032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53338925", "body": "Are there plans to change secureheaders to support computing the header in a middleware, in a less-hacky way?  I notice this is a year old.  If not, I suppose we'll fork this to support it, but I'd rather not fork if we can help it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53338925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53343385", "body": "Sure, I can agree that hashing of dynamic script content may be a bad idea, and that the helper approach makes it easy to do that.\n\nHowever, I do think that the helper approach is simpler and easier to use than Rake task / YAML approach.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/53343385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54238486", "body": "Strange, the build failure appears to be due to missing/mismatched RSpec features? https://travis-ci.org/twitter/secureheaders/jobs/34242758\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54238486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54249491", "body": "> Totally. So how about the helper works in !production and then we just make the hash generation just another deploy step?\n\nToday I've actually been implementing the YAML approach, and there does seem to be a benefit in the fact that it's literally impossible to whitelist dynamic scripts.  The helper approach doesn't have that benefit, because you will always be whitelisting the dynamic value post-evaluation.  That is certainly a nice development experience, but it may be too permissive given an organization's needs.\n\nThe downside of the YAML approach is that the developer would have to run the Rake task and restart the Rails server every time they add/update a `<script>` tag. That sounds like a PITA, but hopefully in practice app developers shouldn't _actually_ be writing script tags; there should be patterns in place that make writing script tags a special case.\n\nYou're proposing a hybrid approach? What would that look like?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54249491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54368244", "body": "Interesting, I like that.  So the script-finding regex will also have to support finding the ERB statement containing the call to the helper.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54368244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54540785", "body": "Hmm, so the one failing spec is:\n\n```\n  1) OtherThingsController headers sets the CSP header with a local reference to a nonce\n     Failure/Error: expect(nonce).to match /[a-zA-Z0-9\\+\\/=]{44}/\n       expected nil to match /[a-zA-Z0-9\\+\\/=]{44}/\n     # ./spec/controllers/other_things_controller_spec.rb:18:in `block (3 levels) in <top (required)>'\n```\n\nI'm not sure how we should best handle this -- maybe we set the `nonce` as an instance variable on the controller in the new `ContentSecurityPolicy.add_to_env()` method?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54540785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54646520", "body": "Would it be terrible to always build a nonce value and add it to the ENV and as a controller instance variable, _even if_ it's actually never used downstream in the middleware?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54646520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54718044", "body": "Oh great point! I will incorporate that.\n\nOn Friday, September 5, 2014, Neil Matatall notifications@github.com\nwrote:\n\n> The downside would be that we're generating a SecureRandom unnecessarily.\n> The config indicates clearly if a nonce is used so I don't think we'd have\n> to generate them unnecessarily.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter/secureheaders/pull/110#issuecomment-54662503.\n\n## \n\nSpike Brehm\nSoftware Engineer\nSan Francisco\n\n(602) 828-2358\n\nSee my favorite listing https://www.airbnb.com/rooms/267097\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/54718044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/57302162", "body": ":+1: for a separate gem for this.  IMO ActiveRecord / relational DB seems like the wrong solution for this, because this will quickly become a firehose of data, and the data is not relational.\n\nSomething using logstash could be a decent default?  Again, this could be a pluggable adapter.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/57302162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/58996516", "body": "sweet :+1: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/58996516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59279054", "body": "word.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/59279054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62980065", "body": "This is awesome!  I like the hybrid approach for easier dev but safer prod :+1: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/62980065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025498", "body": "_facepalm_ copy paste error...\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025513", "body": "fixed & force-pushed\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16560240", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/16560240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17022748", "body": "This causes improperly formatted `script-src` when there's multiple script hashes.  As is, the output for two hashes, `abcde` and `fjhij` is:\n\n```\nscript-src 'sha256-abcde fghij'\n```\n\nThis should be:\n\n```\nscript-src 'sha256-abcde' 'sha256-fghij'\n```\n\nHere's the proper source code:\n\n``` ruby\ndef hash_source_expression(hashes, format = \"sha256\", delimeter = \"-\", hash_delimeter = \" \", wrapper = \"'\")\n  hashes.map { |hash| wrapper + format + delimeter + hash + wrapper }.join(hash_delimeter)\nend\n```\n\nIf you like I can make a PR to this branch that fixes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17022748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025208", "body": "Here we go: https://github.com/twitter/secureheaders/pull/109\n\nShould it really be `sha1`? `sha256` works for me in Chrome 37.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17025208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17081254", "body": "This could be an issue if the superclass is itself a subclass of `ApplicationController`, yeah? i.e.:\n\n```\nMyController < AuthenticatedController < ApplicationController\n```\n\nIs it too hacky to recursively look up the superclass tree until it finds `superclass.name == 'ApplicationController'`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17081254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17137951", "body": "Got it :+1: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/17137951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/20329561", "body": "extra newline :trollface: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/20329561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "grosser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56597735", "body": "it basically fixes a bug in rails 3 that eager-loads all engine files, no longer needed for rails 4 ...\n\nalternative fix is to add this in a rails 3 app ...\n\n```\nunless app.config.eager_load\n  Rails::Railtie.descendants.each do |railtie|\n    railtie.class_eval { def eager_load!; end }\n  end\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56597735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56891029", "body": "production is supposed to eager-load to be fast on the first request ...\nkind of coding configuration into this gem blah ...\n\nproper solution is this I guess ...\nhttp://grosser.it/2014/09/25/rails-3-faster-startup-by-not-eager-loading-engines/\n\nOn Thu, Sep 25, 2014 at 2:51 PM, Reed Loden notifications@github.com\nwrote:\n\n> Why is this only for 'test' and 'development' environments then? What\n> happens differently on 'production'?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter/secureheaders/pull/112#issuecomment-56889676.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/56891029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/60259275", "body": "we are using the eager load patch, so don't care anymore ...\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/60259275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Eagllus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/66247466", "body": "your very welcome!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/66247466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "frodsan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/69012648", "body": "Thank you so much for the advices. I try to add my site to the preload list, but the site doesn't support TLS 1.1/TLS1.2. I contacted Adam and he's going to fix it in the next weeks. :smile: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/69012648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "naiyt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70151180", "body": "Sure, I'll take a look and see if I can figure out it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70151180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70166355", "body": "Yeah, good point., @stve. I'm working on getting a failing spec written right now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70166355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70180614", "body": "I added a [Rails 4 fixture](https://github.com/naiyt/secureheaders/compare/rails4) trying to match as closely as possible what you have for the Rails 3 fixtures. Oddly, though, I can't seem to get replicate the issue when running those specs.\n\nTo test, I set `config.x_frame_options = 'DENY'` [in the initializer](https://github.com/naiyt/secureheaders/blob/550ca519c458fdf5bc041aab67cde80dc86781e0/fixtures/rails_4_1_8/config/initializers/secure_headers.rb#L3). ActionDispatch defaults it to `SameOrigin`.\n\nSo I would expect [that this spec should fail](https://github.com/naiyt/secureheaders/blob/550ca519c458fdf5bc041aab67cde80dc86781e0/fixtures/rails_4_1_8/spec/controllers/other_things_controller_spec.rb) on Rails 4. However, it passes, which means secureheaders is setting that header correctly.\n\nEither some quirk of the test environment, or I'm doing something silly. I'll keep looking into it, but if you guys notice anything obvious I'm missing let me know. :+1:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70180614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70302872", "body": "...er, actually that is failing. I just did something silly yesterday.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70302872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70325457", "body": "Hm, something else I just thought of is the `skip_before_filters`. Doing, for example `skip_before_filter :set_x_frame_options_header` will cause it to return to the Rails default of `SAMEORIGIN` as opposed to removing the header, which would probably be what you expect.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70325457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70430639", "body": "Good idea, @oreoshake. I've done that in the initializer and it seems to work fine. I've also added another fixture for Rails 4 matching what you had for the others, but setting the headers that Rails sets to something else to ensure this fix is working.\n\nIf this looks good, let me know if you'd prefer me to squash the commit history.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70430639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70702831", "body": "HPKP headers are in now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70702831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70896028", "body": "No problem, I'll do that later today.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70896028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70950457", "body": "Luckily the only thing in the Rails 4 fixture not using the hash rocket was the route, so it passes on 1.8.7 now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/70950457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71252197", "body": "This is working for me on Rails 4 now with the #131 merge.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71252197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23137971", "body": "This seems to work correctly, and allows stuff like the `skip_before_filters` to still work as expected.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23137971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23194150", "body": "Good point on that @oreoshake RE: adding the other headers to future proof it. Might also be nice if there was a way to reach in and grab the header names directly from each `Header` class, but I couldn't think of a good way to do it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23194150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "raphaelcm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71327660", "body": "Note, I tried: `gem 'secure_headers', require: 'secure_headers'`. No change.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71327660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71376766", "body": "`include ::SecureHeaders` did the trick, but shouldn't be necessary, right?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71376766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chrhansen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71571880", "body": "@martinpovolny if you have an example to share it would be great, I would like to do something similar, i.e. add extra `connect_src` or `script_src` for particular actions.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/issues/comments/71571880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jarinudom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/comments/8278361", "body": "I think this change may be causing `undefined local variable or method 'ensure_security_headers' for ApplicationController:Class (NameError)` when running rspec.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/8278361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/comments/8278504", "body": "Here's my stack trace. It might be possible that `inherited_resources` or `activeadmin` are causing problems. It works totally fine if I put `include SecureHeaders` at the top of `ApplicationController`.\n\n```\n/Users/jarinudom/projects/jmjmainframe/app/controllers/application_controller.rb:6:in `<class:ApplicationController>': undefined local variable or method `ensure_security_headers' for ApplicationController:Class (NameError)\n    from /Users/jarinudom/projects/jmjmainframe/app/controllers/application_controller.rb:1:in `<top (required)>'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:247:in `require'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:247:in `block in require'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:232:in `load_dependency'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:247:in `require'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:348:in `require_or_load'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:480:in `load_missing_constant'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:180:in `const_missing'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/inherited_resources-1.4.1/app/controllers/inherited_resources/base.rb:11:in `<module:InheritedResources>'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/inherited_resources-1.4.1/app/controllers/inherited_resources/base.rb:1:in `<top (required)>'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:247:in `require'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:247:in `block in require'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:232:in `load_dependency'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:247:in `require'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:348:in `require_or_load'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:480:in `load_missing_constant'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:180:in `const_missing'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/bundler/gems/active_admin-b794f4b7550d/lib/active_admin/base_controller/authorization.rb:2:in `<module:ActiveAdmin>'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/bundler/gems/active_admin-b794f4b7550d/lib/active_admin/base_controller/authorization.rb:1:in `<top (required)>'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:247:in `require'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:247:in `block in require'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:232:in `load_dependency'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:247:in `require'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/bundler/gems/active_admin-b794f4b7550d/lib/active_admin/base_controller.rb:1:in `<top (required)>'\n    from /Users/jarinudom/.gem/ruby/2.0.0/bundler/gems/active_admin-b794f4b7550d/lib/active_admin/application.rb:217:in `controllers_for_filters'\n    from /Users/jarinudom/.gem/ruby/2.0.0/bundler/gems/active_admin-b794f4b7550d/lib/active_admin/application.rb:210:in `block (2 levels) in <class:Application>'\n    from /Users/jarinudom/projects/jmjmainframe/config/initializers/active_admin.rb:11:in `block in <top (required)>'\n    from /Users/jarinudom/.gem/ruby/2.0.0/bundler/gems/active_admin-b794f4b7550d/lib/active_admin.rb:71:in `setup'\n    from /Users/jarinudom/projects/jmjmainframe/config/initializers/active_admin.rb:1:in `<top (required)>'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:241:in `load'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:241:in `block in load'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:232:in `load_dependency'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/dependencies.rb:241:in `load'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/engine.rb:648:in `block in load_config_initializer'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/activesupport-4.1.6/lib/active_support/notifications.rb:161:in `instrument'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/engine.rb:647:in `load_config_initializer'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/engine.rb:612:in `block (2 levels) in <class:Engine>'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/engine.rb:611:in `each'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/engine.rb:611:in `block in <class:Engine>'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/initializable.rb:30:in `instance_exec'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/initializable.rb:30:in `run'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/initializable.rb:55:in `block in run_initializers'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:150:in `block in tsort_each'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:183:in `block (2 levels) in each_strongly_connected_component'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:210:in `block (2 levels) in each_strongly_connected_component_from'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:219:in `each_strongly_connected_component_from'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:209:in `block in each_strongly_connected_component_from'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/initializable.rb:44:in `each'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/initializable.rb:44:in `tsort_each_child'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:203:in `each_strongly_connected_component_from'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:182:in `block in each_strongly_connected_component'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:180:in `each'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:180:in `each_strongly_connected_component'\n    from /Users/jarinudom/.rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/tsort.rb:148:in `tsort_each'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/initializable.rb:54:in `run_initializers'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/railties-4.1.6/lib/rails/application.rb:300:in `initialize!'\n    from /Users/jarinudom/projects/jmjmainframe/config/environment.rb:5:in `<top (required)>'\n    from /Users/jarinudom/projects/jmjmainframe/spec/rails_helper.rb:4:in `require'\n    from /Users/jarinudom/projects/jmjmainframe/spec/rails_helper.rb:4:in `<top (required)>'\n    from /Users/jarinudom/projects/jmjmainframe/spec/controllers/home_controller_spec.rb:1:in `require'\n    from /Users/jarinudom/projects/jmjmainframe/spec/controllers/home_controller_spec.rb:1:in `<top (required)>'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `block in load_spec_files'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `each'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load_spec_files'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:96:in `setup'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:84:in `run'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:69:in `run'\n    from /Users/jarinudom/Dropbox/Mackup/.gem/ruby/2.0.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:37:in `invoke'\n    from /Users/jarinudom/.gem/ruby/2.0.0/gems/rspec-core-3.1.7/exe/rspec:4:in `<top (required)>'\n    from /Users/jarinudom/.gem/ruby/2.0.0/bin/rspec:23:in `load'\n    from /Users/jarinudom/.gem/ruby/2.0.0/bin/rspec:23:in `<main>'\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/8278504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "bquorning": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/comments/16094355", "body": "Could you please push a v2.5.1 tag?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/comments/16094355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "imelven": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2879648", "body": "The tentative plan is to deprecate the old header (including the old syntax e.g 'allow') somewhere around Firefox 24 which is an ESR, but there's a lot of dependencies that need to be addressed first.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/2879648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "thirstscolr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23120437", "body": "yes -- only `max_age` is required. from http://tools.ietf.org/html/draft-ietf-websec-key-pinning-21#section-2.1.1\n\n\"\"\"According to the processing rules of Section 2.1, the UA MUST ignore\n   pin-directives with tokens naming hash algorithms it does not\n   recognize.  If the set of remaining effective pin-directives is\n   empty, and if the host is a Known Pinned Host, the UA MUST cease to\n   consider the host as a Known Pinned Host (the UA should fail open).\"\"\"\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23120437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23128142", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23128142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23128159", "body": "SHA256 is the currently only supported hash algorithm but I wanted this to be flexible in the case it is extended.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23128159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23128186", "body": "good catch ill add that check.\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/23128186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "chrisarcand": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53316513", "body": "Derp. Late night. Thanks :smile: \n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53316513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53318231", "body": "@oreoshake Actually, I just noticed that all of these methods are included in `set_security_headers` (except `prep_script_hash`) How's this, instead?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53318231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53360389", "body": "Oooh of course. Thanks for the clarification ^_^\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/53360389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jmera": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56240411", "body": "@oreoshake is there an easier way to access the config from this context?\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56240411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56240744", "body": "For this feature to work correctly `SecureHeaders::Middleware` needs to come before the session middleware (or simply at the top of the rack stack).\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56240744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56242813", "body": "Sounds good to me, will help keep things dry\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/56242813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "estark37": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/60973542", "body": "Is this supposed to be two separate strings instead of continuing the PKP-RO string?\n\n```\n'Public-Key-Pins-Report-Only', 'Referrer-Policy'\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/60973542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "eugeneius": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/111432137", "body": "This is asserting that a _particular_ warning isn't logged; we probably want to assert that _no_ warnings are logged:\r\n\r\n```ruby\r\nexpect(Kernel).to_not receive(:warn)\r\n```", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/111432137/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "sgrif": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118848250", "body": "IIRC warnings go to STDERR, so you should be able to just enforce that STDERR is empty in CI", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/118848250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "mikewest": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123045206", "body": "Yeah. Linking to the editor's draft is generally the right thing to do. The document on `w3,org` is practically always out of date. :)", "reactions": {"url": "https://api.github.com/repos/twitter/secureheaders/pulls/comments/123045206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}