{"_default": {"1": {"lvc": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/484", "title": "API changes report for Elephant Bird Core", "body": "Hi,\r\n\r\nI'd like to share my results on API changes analysis for the library: https://abi-laboratory.pro/java/tracker/timeline/elephant-bird-core/\r\n\r\nThe report is generated by the https://github.com/lvc/japi-compliance-checker tool for jars found at http://central.maven.org/maven2/com/twitter/elephantbird/elephant-bird-core/ according to https://wiki.eclipse.org/Evolving_Java-based_APIs_2.\r\n\r\nThank you.\r\n\r\n![elephant-bird-core-2](https://user-images.githubusercontent.com/1517837/31162064-f249ba5c-a8e3-11e7-82c4-53da2655da25.png)\r\n![elephant-bird-core-1](https://user-images.githubusercontent.com/1517837/31162065-f24e666a-a8e3-11e7-8ce8-9d41580f9f4c.png)\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sreekuppa": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/475", "title": "Build Issue. ", "body": "I am trying to install twitter's Elephant Bird parser and I am following the instructions on the official github page. But everytime, the build fails. \n1. I used this link https://leveragebigdata.wordpress.com/2015/10/08/install-protocol-buffer-2-5-0/  to install protobuf 2.4.1.\n2. mvn -Dmaven.test.skip=true package inside elephant-bird directory.\n\n```\n[INFO] Building Elephant Bird Pig 4.15-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO]\n[INFO] Elephant Bird ..................................... SUCCESS [0.304s]\n[INFO] Elephant Bird Hadoop Compatibility ................ SUCCESS [0.598s]\n[INFO] Elephant Bird Core ................................ SUCCESS [2.513s]\n[INFO] Elephant Bird Cascading2 .......................... SUCCESS [0.042s]\n[INFO] Elephant Bird Cascading3 .......................... SUCCESS [0.034s]\n[INFO] Elephant Bird Cascading Protobuf .................. SUCCESS [0.024s]\n[INFO] Elephant Bird Crunch .............................. SUCCESS [0.101s]\n[INFO] Elephant Bird Hive ................................ SUCCESS [0.114s]\n[INFO] Elephant Bird Pig ................................. FAILURE [0.045s]\n[INFO] Elephant Bird Mahout .............................. SKIPPED\n[INFO] Elephant Bird RCFile .............................. SKIPPED\n[INFO] Elephant Bird Lucene .............................. SKIPPED\n[INFO] Elephant Bird Pig Lucene .......................... SKIPPED\n[INFO] Elephant Bird Examples ............................ SKIPPED\n[INFO] --------------------------------------------------------------------- ---\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------ \n[INFO] Total time: 4.104s\n[INFO] Finished at: Mon Oct 17 13:43:13 EDT 2016\n[INFO] Final Memory: 24M/750M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal on project elephant-bird-pig: Could not resolve dependencies for project com.twitter.elephantbird:elephant-bird-pig:jar:4.15-SNAPSHOT: Failure to find com.twitter.elephantbird:elephant-bird-core:jar:tests:4.15-SNAPSHOT in http://maven.twttr.com was cached in the local repository, resolution will not be reattempted until the update interval of twitter has elapsed or updates are forced -> [Help 1]\n\nNot sure what to do. Someone pls help. I have thrift version 0.7.0 and protobuf 2.4.1. I am running all this on centos 7\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "heapxor": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/474", "title": "compilation issue", "body": "Hi,\nIm desperately trying to install the git version of elephant-bird; latest thrift+protobuf were installed accordingly. \n\nI executed mvn package and got error below\n\n[ERROR] Failed to execute goal com.github.igor-petruk.protobuf:protobuf-maven-plugin:0.6.5:run (default) on project elephant-bird-core: 'protoc' failed. Exit code 0 -> [Help 1]\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal com.github.igor-petruk.protobuf:protobuf-maven-plugin:0.6.5:run (default) on project elephant-bird-core: 'protoc' failed. Exit code 0\n        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)\n        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\n        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\n        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)\n        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)\n        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)\n        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)\n        at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\n        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\nCaused by: org.apache.maven.plugin.MojoExecutionException: 'protoc' failed. Exit code 0\n        at com.github.igor_petruk.protobuf.maven.plugin.RunMojo.printErrorAndThrow(RunMojo.java:430)\n        at com.github.igor_petruk.protobuf.maven.plugin.RunMojo.printErrorAndThrow(RunMojo.java:434)\n        at com.github.igor_petruk.protobuf.maven.plugin.RunMojo.detectProtobufVersion(RunMojo.java:405)\n        at com.github.igor_petruk.protobuf.maven.plugin.RunMojo.execute(RunMojo.java:230)\n        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)\n        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)\n        ... 19 more\n[ERROR]\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "manoharballia": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/473", "title": "Lucene merge multiple indexes into single using HdfsMergeTool Failing", "body": "I am trying to merge multiple solr collections into single using provided tool HdfsMergeTool. But i get the bellow error:\nUsed command :  hadoop jar HdfMergeSolr.jar /work/slr_merged_1_and_2 2 /solr/collection_1 /solr/collection_2\n\nError Log:\n16/09/21 09:28:01 INFO mapreduce.Job: Job job_1469767030336_14546 running in uber mode : false\n16/09/21 09:28:01 INFO mapreduce.Job:  map 0% reduce 0%\n16/09/21 09:28:09 INFO mapreduce.Job: Task Id : attempt_1469767030336_14546_m_000000_0, Status : FAILED\nError: org.apache.lucene.index.LogByteSizeMergePolicy.setUseCompoundFile(Z)V\n16/09/21 09:28:17 INFO mapreduce.Job: Task Id : attempt_1469767030336_14546_m_000000_1, Status : FAILED\nError: org.apache.lucene.index.LogByteSizeMergePolicy.setUseCompoundFile(Z)V\n16/09/21 09:28:21 INFO mapreduce.Job: Task Id : attempt_1469767030336_14546_m_000000_2, Status : FAILED\nError: org.apache.lucene.index.LogByteSizeMergePolicy.setUseCompoundFile(Z)V\n16/09/21 09:28:27 INFO mapreduce.Job:  map 100% reduce 0%\n16/09/21 09:28:27 INFO mapreduce.Job: Job job_1469767030336_14546 failed with state FAILED due to: Task failed task_1469767030336_14546_m_000000\nJob failed as tasks failed. failedMaps:1 failedReduces:0\n\n16/09/21 09:28:27 INFO mapreduce.Job: Counters: 11\n        Job Counters\n                Failed map tasks=4\n                Launched map tasks=4\n                Other local map tasks=4\n                Total time spent by all maps in occupied slots (ms)=18101\n                Total time spent by all reduces in occupied slots (ms)=0\n                Total time spent by all map tasks (ms)=18101\n                Total vcore-seconds taken by all map tasks=18101\n                Total megabyte-seconds taken by all map tasks=74141696\n        Map-Reduce Framework\n                CPU time spent (ms)=0\n                Physical memory (bytes) snapshot=0\n                Virtual memory (bytes) snapshot=0\nException in thread \"main\" java.lang.RuntimeException: Merge tool exited with code: -1\n        at com.sears.MergeSolrIndex.HdfsMergeTool.main(HdfsMergeTool.java:105)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n        at org.apache.hadoop.util.RunJar.run(RunJar.java:221)\n        at org.apache.hadoop.util.RunJar.main(RunJar.java:136)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "krausb": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/472", "title": "com.twitter.elephantbird.util.ThriftUtils unable to find fields with _ or - in its name", "body": "In my current case the ThriftUtils.getFieldType(...) is not able to successful reflect a field named signal_name out of the thrift class.\n\nExample thrift struct:\n\n> struct TSignal {\n>     1: required i32 signalId\n>     2: required string signal_name\n>     3: required i64 timestamp\n>     4: required i32 raw_value\n>     5: required double physical_value\n>     6: optional string note\n> }\n\nThe Problem here is, that the thrift compiler itself camel cases the getter and the setter to \nTSignal.getSignalName and TSignal.setSignalName without _ or -.\n\nOn line 142 of latest Version of ThriftUtils.getFieldType(...) you are looking for:\n`Method method = containingClass.getDeclaredMethod(prefix + suffix);`\n\nThe variable suffix evaluates as a result of line 135:\n`String suffix = // uppercase first letter\n        fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);` \nto \"getSignal_name\" or \"isSignal_name\" which does not exist in the thrift class.\n\nWould be nice if you could recognize this behaviour and add that eventuality into ThriftUtils.getFieldType.\n\nPossible solutions would be changing the discovery of the fields by using Class.getDeclaredField(...) so you would'nt need the prefix + suffix and may use the field name directly here or additionaly camel case the field name.\n\nRegards,\nBastian\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MohanBunny": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/471", "title": "PIG LOAD JSON FILE using Elephant-bird gives ERROR", "body": "Trying to load the json file which is having null values in it by using elephant-bird JsonLoader.\n\nsample.json\n\n`{\"created_at\":\"Mon Aug 22 10:48:23 +0000 2016\",\"id\":767674772662607873,\"id_str\":\"767674772662607873\",\"text\":\"KPIT Image Result for https:\\/\\/t.co\\/Nas2ZnF1zZ... https:\\/\\/t.co\\/9TnelwtIvm\",\"source\":\"\\u003ca href=\\\"http:\\/\\/twitter.com\\\" rel=\\\"nofollow\\\"\\u003eTwitter Web Client\\u003c\\/a\\u003e\",\"truncated\":false,\"in_reply_to_status_id\":123,\"in_reply_to_status_id_str\":null,\"in_reply_to_user_id\":null,\"in_reply_to_user_id_str\":null,\"in_reply_to_screen_name\":null,\"geo\":null,\"coordinates\":null,\"place\":null,\"contributors\":null,\"is_quote_status\":false,\"retweet_count\":0,\"favorite_count\":0,\"entities\":{\"hashtags\":[],\"urls\":[{\"url\":\"https:\\/\\/t.co\\/Nas2ZnF1zZ\",\"expanded_url\":\"http:\\/\\/miltonious.com\\/\",\"display_url\":\"miltonious.com\",\"indices\":[24,47]}],\"user_mentions\":[],\"symbols\":[]},\"favorited\":false,\"retweeted\":false,\"possibly_sensitive\":false,\"filter_level\":\"low\",\"lang\":\"en\",\"timestamp_ms\":\"1471862903167\"}`\n\nscript:\n\n```\nREGISTER piggybank.jar\nREGISTER json-simple-1.1.1.jar\nREGISTER elephant-bird-pig-4.3.jar\nREGISTER elephant-bird-core-4.1.jar\nREGISTER elephant-bird-hadoop-compat-4.3.jar\n\njson = LOAD 'sample.json' USING JsonLoader('created_at:chararray, id:chararray, id_str:chararray, text:chararray, source:chararray, in_reply_to_status_id:chararray, in_reply_to_status_id_str:chararray, in_reply_to_user_id:chararray, in_reply_to_user_id_str:chararray, in_reply_to_screen_name:chararray, geo:chararray, coordinates:chararray, place:chararray, contributors:chararray, is_quote_status:bytearray, retweet_count:long, favorite_count:chararray, entities:map[], favorited:bytearray, retweeted:bytearray, possibly_sensitive:bytearray, lang:chararray');\ndescribe json; \ndump json;\n```\n\nWhen I dump json,I am getting the following **output** and the **worning**\n\n**(Mon Aug 22 10:48:23 +0000 2016,767674772662607873,767674772662607873,google Image Result for Twitter Web Client,false,1234,12345,3214,43215,,,,,,,,,,,,,,)**\n\n**WARN org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger - org.apache.pig.builtin.JsonLoader(UDF_WARNING_1): Bad record, returning null for {complete json}**\n\nBy warning i guess it is because of getting NULL values. So **how can we load a Json which is having null values in it.**\n\nAnd I have tried in another way i.e\n\n`json = LOAD 'sample.json' USING com.twitter.elephantbird.pig.load.JsonLoader('created_at:chararray, id:chararray, id_str:chararray, text:chararray, source:chararray, in_reply_to_status_id:chararray, in_reply_to_status_id_str:chararray, in_reply_to_user_id:chararray, in_reply_to_user_id_str:chararray, in_reply_to_screen_name:chararray, geo:chararray, coordinates:chararray, place:chararray, contributors:chararray, is_quote_status:bytearray, retweet_count:long, favorite_count:chararray, entities:map[], favorited:bytearray, retweeted:bytearray, possibly_sensitive:bytearray, lang:chararray');`\n\n`describe json;`\n**Output**\n\n**Schema for json unknown.**\n\nPlease suggest me.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gzm55": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/470", "title": "Add support thrift TCompactProtocol in ThriftConverter", "body": "Hi,\n\nIn many general cases, compact protocol bytes in lzo-block file can save 10%~15% size than binary protocol bytes, but the ThriftConverter can't choose other protocol factory than TBinaryProtocol.Factory when serialize() or deserialize(). \n\nCan we add two optional parameters,\n- first is to set a TProtocolFactory class name, used as output protocol when calling serialize();\n- second  is to enable detecting the protocol via TProtocolUtil.guessProtocolFactory() when calling deserialize().\n\nif neither is set, all behaviors of previous codes (MR/pig/hive, etc.) should be preserved.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SonaliShrivastava": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/468", "title": "TestThriftToPig for Elephantbird piggybank getting failed", "body": "Hi All,\n\nI am trying to port Elephant Bird Stable Release \"2.2.3\" on RHEL 7.2 ppc64le using open jdk 1.8\nGot success in running ant, ant compile, ant resolve, ant jar and for other targets too except got\nfailure for ant test.\n\nIt gives me Test Failure in below line:\n[junit] Running com.twitter.elephantbird.pig.piggybank.TestThriftToPig\n    [junit] Tests run: 16, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.081 sec\n    [junit] TEST com.twitter.elephantbird.pig.piggybank.TestThriftToPig FAILED\n\nBy debugging failures,\nI see, it is failing on line no. 160 i.e. \nassertEquals(\"{(1,0,34,27000,16777216,6000000000,3.141592653589793,JSON THIS! \\\"^A,\" + ooe.zomg_unicode +\n        \",0,base64,{(1),(2),(3)},{(1),(2),(3)},{(1),(2),(3)}),(1,0,35,27000,16777216,6000000000,3.141592653589793,JSON THIS! \\\"^A,\" +\n        ooe.zomg_unicode + \",0,base64,{(1),(2),(3)},{(1),(2),(3)},{(1),(2),(3)})}-{({}),({(and a one),(and a two)}),({(then a one, two),(three!),(FOUR!!)})}-{zero={}, three={}, two={(1,Wait.),(2,What?)}}\",\n        (toTuple(type, hm).toDelimitedString(\"-\")));\n\nFor debugging purpose, i have added logs and could get below clarity for string comparison failing as a result they are not equal and so assert error, following are details log i printed:\n        FAILED\nexpected:<...,{(1),(2),(3)})}-{({[}),({(and a one),(and a two)}),({(then a one, two),(three!),(FOUR!!)})}-{zero={}, three={}, two={(1,Wait.),(2,What?)]}}> \nbut was:<...,{(1),(2),(3)})}-{({[(and a one),(and a two)}),({}),({(then a one, two),(three!),(FOUR!!)})}-{zero={}, two={(1,Wait.),(2,What?)}, three={]}}>\njunit.framework.AssertionFailedError.\n\nIf I comment above line, this happens similar to line below too:\nassertEquals(\"(bob,jenkins),42,foo@bar.com,{(415-555-5555,HOME)}\", toTuple(type, person).toDelimitedString(\",\"));\n\nas well as also for line i.e.\nassertTrue( // the order of elements in map could vary because of HashMap\n        tupleString.equals(\"(bob,jenkins)-{MOBILE=650-555-5555, WORK=415-555-5555, HOME=408-555-5555}\") ||\n        tupleString.equals(\"(bob,jenkins)-{MOBILE=650-555-5555, HOME=408-555-5555, WORK=415-555-5555}\"));\n\nWhen i comment all 3 lines above, test passes for all other modules of it and also for other projects of elephant-bird.\n\nIt seems this is coding issue.\n@Team: Can you please let me know for reason it is failing beside other all test are passing except failing for com.twitter.elephantbird.pig.piggybank.TestThriftToPig.\n\nThanks & Regards,\nSonali Shrivastava\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "immo-huneke-zuhlke": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/467", "title": "lucene-queryparser compatibility?", "body": "In `com.twitter.elephantbird.mapreduce.output.LuceneIndexOutputFormat.createIndexWriter`, there is a call to the API `org.apache.lucene.index.LogByteSizeMergePolicy.setUseCompoundFile`, which was removed after version 4.0.0 of `org.apache.lucene:lucene-queryparser`. This prevents me from using any features of later versions of the query parser in my program (specifically, 4.7.2) if I want to continue to use `elephant-bird-pig-lucene`.\n\nWhat are your plans for upgrading this dependency? Currently, the `org.apache.lucene` components are at version 6.0.1 (35 releases beyond 4.0.0, released in October 2012).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aksbhatia": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/466", "title": "JsonStringToMap cannot handle JsonArrays", "body": "**Error:**\nCaused by: java.lang.ClassCastException: org.json.simple.JSONArray cannot be cast to org.json.simple.JSONObject\n    at com.twitter.elephantbird.pig.piggybank.JsonStringToMap.parseStringToMap(JsonStringToMap.java:63)\n    at com.twitter.elephantbird.pig.piggybank.JsonStringToMap.exec(JsonStringToMap.java:53)\n\n**Possible Reason:**\n  protected Map<String, String> parseStringToMap(String line) {\n    try {\n      Map<String, String> values = Maps.newHashMap();\n      **_JSONObject jsonObj = (JSONObject) jsonParser.parse(line);**_\n\ni.e. Since it is trying to cast JSONArray to JSONObject, it fails.\n\n**Eg. Input:**\n[{\"discountLevel\":\"SUBTOTAL\",\"itemIDs\":[\"2523445\"]},{\"discountLevel\":\"SUBTOTAL\",\"itemIDs\":[\"1119882\"]}]\n\n**My Pig Script:**\na = FOREACH applied GENERATE JsonStringToMap(input);\n\nSome googling led me here : https://groups.google.com/forum/#!topic/elephantbird-dev/mxCcAh4WEXY \nSimilar?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/466/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mtsgrd": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/462", "title": "Protobuf 3.x compatibility?", "body": "Has anyone tested compatibility with protobuf 3.x?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/462/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gerashegalov": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/453", "title": "SplitUtils consistently misnames min as maxCombinedSplitSize", "body": "the logic in SplitUtils#getCombinedSplits clearly treats maxCombinedSplitSize as the min, and the actual split size may well exceed it. \n\n```\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/comments/6468832", "body": "5 should be a configurable number of locations\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/6468832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/6468858", "body": "Alternatively, for better data locality, it could make sense to consider locations with most bytes rather than most splits  in case the splits are numerous but tiny.  \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/6468858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/6469014", "body": "If you use some custom class with a mutable int field,  you can avoid auto-boxing on line 94-98, and a second unnecessary lookup for update on line 98. Instead you could increment the int field in the object returned by hosts.get.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/6469014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/14628891", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/14628891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rubanm": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/449", "title": "Add a parameter for MAX_COLLECTION_SIZE to ThriftBinaryProtocol", "body": "Follow up from https://github.com/twitter/elephant-bird/pull/448\n\nThis could be used for ignoring corrupt records irrespective of the readLength check.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/2761b313a7ee1df880e3c0cc164d0183848c738b", "message": "[Release] - 4.14, prepare for next development iteration 4.15-SNAPSHOT"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/380f5aa9f034024ca19237359c1727e8b105c414", "message": "[Release] - Prepare release 4.14"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/fbe07c4f34e72772d498e5d85d95869b24e3c8d7", "message": "Merge pull request #465 from twitter/rubanm/cascading3_followup_fixes\n\nFollow-up fix for cascading3"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/1aaaa1dd5194094b91d0df4e77d91d2c34199955", "message": "use deprecated IF wrappers for LzoText"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c557b2d204bca118a6355b9ab760301507de71f1", "message": "fix LzoText schemes"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/7c29a806f67dffc375983318b6cf20b10bd419a8", "message": "Fix output formats to work in hadoop1 context"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b598d321b6cff990f1a7acc80c19da24c0495227", "message": "Follow-up fixes for cascading3"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/61f3a8f1ba939b4fe1d43d76be181af7b5e55c51", "message": "[Release] - 4.13, prepare for next development iteration 4.14-SNAPSHOT"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/25c0b184edfe7b18889e0e948f0f19f38563240a", "message": "[Release] - Prepare release 4.13"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/9c4d0917e478e9fa3143f106319b42ff5c993155", "message": "Merge pull request #463 from rubanm/rubanm/try_cascading3\n\nCompatibility with Cascading 3.0 take two"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c77ee1f7c310169346ea97035f66e46ea22ecb69", "message": "add comment re cascading versions"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b19c1d60516d22ea99e74060b9e4915642677679", "message": "undo whitespace only changes, minor comment update"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/80c34c47992665ff82f495bfa29fd329f61ba39d", "message": "Input format fixes"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/0f6b769293ba89d5a48c01cd33ceb1877aa91233", "message": "add new subproject to pom file"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/fe4004213585ac80cd1c06da1c7bc93feb86908b", "message": "do not port deprecated schemes to cascading3"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/941db7979930f2cdff7296be9154f80af624b103", "message": "remove common protobuf code from cascading2"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/5accfdb05d7d3aa19f433a040bbd5d7229ceb4f7", "message": "move common classes to cascading-protobuf"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c7fd5e950821632cdff7c3427b112bf6da8b8962", "message": "gitignore swp files"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/04803b5dced17c70c5e2244968805923fc779d5d", "message": "fix package namespace in cascading3"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/d3bd3dbe8bc2e0a44e2c664e2a1ce73b3158f64f", "message": "Merge branch 'try_cascading3' of https://github.com/cchepelov/elephant-bird into try_cascading3"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/be20fa68b3052babbb0dcfd48afc6f06257c551b", "message": "Merge pull request #5 from twitter/master\n\nMerge from twitter/elephant-bird"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/cef8656353c4cad0b2ce144593bc2355cb432ade", "message": "Merge pull request #460 from bismoy2013/Issue#451\n\nIssue-451 : https://github.com/twitter/elephant-bird/issues/451"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/358c476f931219faa2af912a0e6b6612e55361dd", "message": "Merge pull request #459 from twitter/ianoc/updateReleaseScript\n\nRemove push commands from the release to avoid side effects to the repo"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6c5a8e4f070fca962ae0c0521b49358b6800808b", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b2dbea6bb486196fa63c6887f60d15d313be6a30", "message": "[maven-release-plugin] prepare release elephant-bird-4.10"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/fb94ed1692011bfa59736639f0d60716271f0002", "message": "Merge pull request #448 from rubanm/rubanm/check_read_length\n\nAdd container size check in ThriftBinaryProtocol"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/e882509b83f4de64be953024fa3897428590706f", "message": "verify mock in unit test"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/fd8f01e6773b3f05ab9058a419cf9c5b2e96d152", "message": "use easymock in tests"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b8febe54c8e41a130823144653390db2df8868e8", "message": "Add container size check in ThriftBinaryProtocol"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/2ea912ee751fcedc1409b8c31cdf9a7d8035f8b8", "message": "Merge pull request #4 from twitter/master\n\nMerge from twitter/elephant-bird"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/5657c75330383a13fbf5c8cc1a907b7f38621c9a", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/8cc1d44aa58c476c60376c1deac46e2884f7fcf2", "message": "[maven-release-plugin] prepare release elephant-bird-4.9"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/8189113ee11b367363f106ecf2964fc1a9692616", "message": "Merge pull request #444 from rubanm/rubanm/base64_reader_fix\n\nthrow DecodeException in Base64Codec"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/aed1c1ec0ab7d7240359c64edc8ba64328001aaa", "message": "change to runtimeexception"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/654c10e00bf0cd408fee4c84934831d7d6dc52b2", "message": "tests for base 64 codec"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/a00662f3974a60f4e04755cc9bf984d1800a1c36", "message": "throw decode exception on base64 codec"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/7d9c7a23dbe2a18c059cc2efb9c7b823429bd663", "message": "Merge pull request #3 from twitter/master\n\nMerge from twitter/elephant-bird"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ed51801d33f3ac95edeb9539d2c158f8369133b4", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/eab81dbb8bf50a250e45067e6e6789183ac876c2", "message": "[maven-release-plugin] prepare release elephant-bird-4.8"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/5d85b858a6e11a0ffdf3e789d8a49863ebde1c5c", "message": "updated changes for version 4.8"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6d787894e8a6e431ea364b06c0a0af2e57a5b0aa", "message": "minor code move"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/e249ac60096d427db91fcccf8ef0235b6e90c811", "message": "use CodecInputStream to build SerializedBlock"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/5b1f9ee03d9aa701731903afb87a76fc14371f5e", "message": "revert InputStream usage in BinaryBlockReader"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c36a69a3250dd9bf6572e3a3cefccefbee6308fc", "message": "Merge pull request #2 from twitter/master\n\nMerge from twitter/elephant-bird"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/bc69713266be1a366bc65a20397063b07f1eb80b", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/01f6567341f1a2c8e14dd56dd5796c0c2371fb5e", "message": "[maven-release-plugin] prepare release elephant-bird-4.7"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/8261e7d2491292774bcf1d17a952615df31086c2", "message": "Update changes for release 4.7"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/783ce6de8f51b0f289aa89c4c5e9d949b776ccb5", "message": "rename to valueClass"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/f17357d263386645179a7def6e9d329f680c212e", "message": "use ReflectionUtils"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/d61ddd79985f64b2f7d2f862be99eec8a26d9ed6", "message": "make constructor protected"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/655aae21ee24f155f887a27637ada60c476572c1", "message": "some comments"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/f2ded74fba14098368855019eae2d629ea94b1db", "message": "catch specific exceptions"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/fc0f85a9c6bd7c0b4af3095aa11fe18ee2cd7c12", "message": "Merge branch 'master' into rubanm/generic_if_writes"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c915cc71654effcc01564e63ee9580a059537b90", "message": "Merge pull request #1 from twitter/master\n\nMerge from twitter/elephant-bird"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/4499c99e3be591862b84809dba41b64bb324aa32", "message": "handle DecodeException in record readers"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b6f25132ac3328f8505ed69dc9b1a03ae3c41c81", "message": "shorten to DecodeException"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6efc478e951c8941217f693f826488264a7dd702", "message": "fix the catch block for real"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/d09cd0eb0adef35d03ff7c1f106fd29934d23c6a", "message": "fix catch in ThriftConverter"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/38c5547a9ca9bf1c1a6209dcb43ddc0078a42c58", "message": "remove unneeded GenericBlockWriter, cleanup"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/07cbbd222c7575da9dee69dda626864f801deaf8", "message": "Merge branch 'rubanm/generic_inputformat' into rubanm/generic_if_writes"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/88aca05de6911c7a58e9f5aa45f19dc5b2d9b8af", "message": "rename to getConverter, catch Exception instead of Throwable"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/9f1257c7c92f205ac675e6faeb5124123496b621", "message": "rename to getConverter, catch Exception instead of Throwable"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/61a5fe0f89250687e20e7a3b4d1bd885a310c737", "message": "Merge branch 'rubanm/generic_inputformat' into rubanm/generic_if_writes"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/93b35e69bfe04ad1e7634c355b5661038d1ef79f", "message": "some more exception fixes"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/11adb6ba48853a74aa36b380810ce9ef5127cdf6", "message": "review comments from laurent, ian"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/5378c12cdb7d5d76511e45d9480754cb8f102762", "message": "working version for generic output format"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/dfd475fbaf09e5c3f2a59a24979db678ccf81d7f", "message": "Merge branch 'rubanm/generic_inputformat' into rubanm/generic_if_writes"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/7cec322c4f5c17a973c774338f350dfd8d7fdc05", "message": "add todo comment"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/067b895e772cee925a11397f65e25475594e3ddc", "message": "another build fix"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/bc542090a5a9ff6e6e29218e06d7026892ef936e", "message": "fix build"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/3ae848ba1c6d95403276e781db26909eaa0ce312", "message": "review comments"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/7edf44708be6224840858ac8d7e9ccc2c9332cb0", "message": "revert ByteString usage"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ee37861659573f0cf655af69eb136dee27fa611c", "message": "Merge branch 'rubanm/generic_inputformat' into rubanm/generic_if_writes"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/3751b165f155757f3b8257a6b68b495b70369367", "message": "skip nulls in B64 reader"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c3f9395aca0dce854ab772df45184305fe6a5fa2", "message": "skip nulls in converters"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/2fdebffc8d067d28e40433b59e69fd81d62aee7f", "message": "add parseFrom InputStream"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/952e9282f87bf54c5c2ee83f8f3a39f63a1f3be0", "message": "rename to getConverter"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b52a4f9ff8eed81d040c405e9d274566d34ba025", "message": "drop GenericBlockReader, skip nulls in LzoBinaryBlockRecordReader"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/1ee5d9562c8f044bf3f8bc115dd724b074f21139", "message": "Revert \"refactor common code\"\n\nThis reverts commit 548804c9783a96d80bfd2bf20775de5a015c7436."}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b4e03dcab4bf53a6d72244e607b7aa24d0ab1eb8", "message": "initial commit for generic output format"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/548804c9783a96d80bfd2bf20775de5a015c7436", "message": "refactor common code"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6c7ff31a3b7c4d9606859fa909677f1fa358a3c5", "message": "fix classname in log statements"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/1ad52b3675b5f9e0c8c11c242b8ff48a91f77258", "message": "Revert \"Two things here, once setting the output fields in the cascading scheme goes via a better path.\"\n\nThis reverts commit 295e25580d8db171441ea17af689200300dcb4be."}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6f7cb512850ce282832f3fdfad6af57bd2fd2649", "message": "Revert \"Don't allocate strings and do concat if debug mode isn't enabled\"\n\nThis reverts commit af48e3e4257896aa13f0b76ed7f5ace978ec83a8."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "justmytwospence": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/445", "title": "OrderedLoadFunc for JsonLoader", "body": "Is there a particular reason the Pig JsonLoader can't implement the OrderedLoadFunc rather than LoadFunc interface? OrderedLoadFunc would allow JSON data to be merge sorted later.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bluezone2015": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/438", "title": "RCFileProtobufInputFormat not work in hive 0.13. I need help, thanks a lot~~~", "body": "--------------------------create table first:--------------------------\ncreate external table test_rc\nrow format serde \"com.twitter.elephantbird.hive.serde.ProtobufDeserializer\"\nwith serdeproperties (\n\"serialization.class\"=\"com.galaxy.example.seqfile.proto.AddressBookProtos$Person\")\nstored as\ninputformat \"com.twitter.elephantbird.mapred.input.RCFileProtobufInputFormat\"\noutputformat \"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\";\n\n--------------------------then I load data to hive table:--------------------------\nload data local inpath '/root/galaxy-cdh-client/hadoop/bin/part-r-00000.rc' overwrite into table test_rc;\n\n--------------------------exec the hql:--------------------------\nselect id,name from test_rc;\n\n--------------------------then I encounter the exception:--------------------------\nDiagnostic Messages for this Task:\nError: java.lang.RuntimeException: org.apache.hadoop.hive.ql.metadata.HiveException: Hive Runtime Error while processing writable org.apache.hadoop.hive.serde2.columnar.BytesRefArrayWritable@141ed711\n        at org.apache.hadoop.hive.ql.exec.mr.ExecMapper.map(ExecMapper.java:195)\n        at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:54)\n        at org.apache.hadoop.mapred.MapTask.runOldMapper(MapTask.java:450)\n        at org.apache.hadoop.mapred.MapTask.run(MapTask.java:343)\n        at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:168)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at javax.security.auth.Subject.doAs(Subject.java:415)\n        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1642)\n        at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:163)\nCaused by: org.apache.hadoop.hive.ql.metadata.HiveException: Hive Runtime Error while processing writable org.apache.hadoop.hive.serde2.columnar.BytesRefArrayWritable@141ed711\n        at org.apache.hadoop.hive.ql.exec.MapOperator.process(MapOperator.java:533)\n        at org.apache.hadoop.hive.ql.exec.mr.ExecMapper.map(ExecMapper.java:177)\n        ... 8 more\nCaused by: java.lang.ClassCastException: org.apache.hadoop.hive.serde2.columnar.BytesRefArrayWritable cannot be cast to org.apache.hadoop.io.BytesWritable\n        at com.twitter.elephantbird.hive.serde.ProtobufDeserializer.deserialize(ProtobufDeserializer.java:56)\n        at org.apache.hadoop.hive.ql.exec.MapOperator$MapOpCtx.readRow(MapOperator.java:154)\n        at org.apache.hadoop.hive.ql.exec.MapOperator$MapOpCtx.access$200(MapOperator.java:127)\n        at org.apache.hadoop.hive.ql.exec.MapOperator.process(MapOperator.java:508)\n        ... 9 more\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wonlay": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/432", "title": "DeprecatedOutputFormatWrapper does not work well with PartitionTap", "body": "When using DeprecatedOutputFormatWrapper with PartitionTap, the output won't be committed to the final location but discarded in the temporary directory.\n\nThere are two issues here:\n1. TapOutputCollector used by PartitionTag is testing if the output format is a FileOutputFormat or not, after wrapped, it's not a FileOutputFormat anymore, the filenames won't be created.\n1. The commit never happen when used in this case, the test for commit will always return false, since the real output format is writing to a different temp dir, and no intermedium commit to bridge them up.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nellore": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/426", "title": "LzoInputFormat's listStatus() can take prohibitively long on S3 because it invokes FileInputFormat's listStatus() implementation", "body": "LzoInputFormat's listStatus begins with\n\n``` java\nList<FileStatus> files = super.listStatus(job);\n```\n\nwhere super refers to FileInputFormat. FileInputFormat's listStatus() calls singleThreadedListStatus() (when LIST_STATUS_NUM_THREADS == 1), which is not optimized for S3. This becomes an issue when listing a directory with many files when a job begins; I've observed that a single listStatus() call can take 17 minutes when there are 50k files in an input path.\n\nProposed solution: use the listStatus method of the FileSystem of the appropriate input path (obtained from getInputPaths(job)). This will call the listStatus method of whatever class is specified by fs.s3[n].impl in core-site.xml.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/428", "title": "uses FileSystem's listStatus rather than FileInputFormat's in LzoInputFormat", "body": "Proposed resolution to #426, which describes how FileInputFormat's listStatus is slow on S3 for input paths spanning many files.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gsteelman": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/419", "title": "DelegateCombineFileInputFormat Doesn't Honor CombineFileInputFormat.maxSplitSize", "body": "I'm trying to use DelegateCombineFileInputFormat + LzoTextInputFormat + LzoTextOutputFormat. I'm also trying to specify the maxSplitSize for combining files. I've found that DelegateCombineFileInputFormat doesn't honor maxSplitSize, minSplitSizeNode, or minSplitSizeRack if they are configured before the job is run.\n\nPer @jcoveney \"If there is a maxInputSplitSize in Hadoop's CombineFileInputFormat no, it is not honored.\":\nhttps://github.com/kevinweil/elephant-bird/blob/master/core/src/main/java/com/twitter/elephantbird/util/SplitUtil.java#L35\n\nI can see a couple approaches for a fix:\n1) SplitUtil.getCombinedSplitSize(Configuration): Change it so it tries to getLong from COMBINE_SPLIT_SIZE, if it can't it'll try to get from CombineFileInputFormat \"mapreduce.input.fileinputformat.split.maxsize\" which apparently isn't a static constant, but a hard coded string...\n\n2) DelegateCombineFileInputFormat could set SplitUtil.COMBINE_SPLIT_SIZE equal to CombineFileInputFormat max split size if it was set. This same approach could be used for minSplitSizeNode and minSplitSizeRack. Where in DelegateCombineFileInputFormat would this go?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snehotosh": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/415", "title": "error: no suitable constructor found while doing building jar (mvn package)", "body": "Hi,\n\nI am facing below error though all pre-requisite are met including Thrift 0.7.0,protoc and jdk 1.7.55 version.\n\n[INFO]\n[INFO] Elephant Bird ...................................... SUCCESS [01:06 min]\n[INFO] Elephant Bird Hadoop Compatibility ................. SUCCESS [03:09 min]\n[INFO] Elephant Bird Core ................................. FAILURE [01:12 min]\n[INFO] Elephant Bird Cascading2 ........................... SKIPPED\n[INFO] Elephant Bird Crunch ............................... SKIPPED\n[INFO] Elephant Bird Hive ................................. SKIPPED\n[INFO] Elephant Bird Pig .................................. SKIPPED\n[INFO] Elephant Bird Mahout ............................... SKIPPED\n[INFO] Elephant Bird RCFile ............................... SKIPPED\n[INFO] Elephant Bird Lucene ............................... SKIPPED\n[INFO] Elephant Bird Pig Lucene ........................... SKIPPED\n[INFO] Elephant Bird Examples ............................. SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 05:28 min\n[INFO] Finished at: 2014-08-29T13:41:54+05:30\n[INFO] Final Memory: 26M/161M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:testCompile (default-testCompile) on project elephant-bird-core: Compilation failure: Compilation failure:\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/OneOfEach.java:[189,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/com/twitter/elephantbird/thrift/test/TestUnion.java:[110,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/Base64.java:[129,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/Base64.java:[131,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/Base64.java:[133,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/Base64.java:[135,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/Base64.java:[137,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/Base64.java:[139,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/CompactProtoTestStruct.java:[355,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/CompactProtoTestStruct.java:[382,12] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/CompactProtoTestStruct.java:[409,12] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/CompactProtoTestStruct.java:[442,12] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/CompactProtoTestStruct.java:[471,12] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/thrift/test/ComparableUnion.java:[96,8] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte,String) is not applicable\n[ERROR](actual argument boolean cannot be converted to String by method invocation conversion)\n[ERROR] constructor FieldValueMetaData.FieldValueMetaData(byte) is not applicable\n[ERROR](actual and formal argument lists differ in length)\n[ERROR] /u01/Installables/PIG_Related/elephant-bird-master/core/target/generated-test-sources/thrift/com/twitter/elephantbird/thrift/test/TestBinaryInListMap.java:[107,16] error: no suitable constructor found for FieldValueMetaData(byte,boolean)\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <goals> -rf :elephant-bird-core\n[root@bigdata1 elephant-bird-master]#\n\nRegards,\nSnehotosh\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jcoveney": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/402", "title": "Refine implementation in SplitUtils -- better locality awareness", "body": "This is a refinement of #398 \n\nWe want to make sure that empty splits are not dropped, but more radically, we want better incorporation of locality. @gerashegalov, @sjlee, would love your comments and ideas.\n\nIdeally, #401 would have been completed and we would have more robust regression testing.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/401", "title": "Clean up SplitUtils -- add tests, clean code", "body": "This is a refinement of #398 \n\nThe implementation lifted from Pig is a bit ugly, and could be better tested. Better tests will allow us to do more radical refinement in the future. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6a690fdde6a9d1b7be5a5692f69a454424acd7df", "message": "Merge pull request #423 from ianoc/ianocBase64DecodePerf\n\nDon't copy the array before handing it for base64 decode"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/7990c5646bea7ef98b97367922174bfcee63a396", "message": "Merge pull request #422 from ianoc/ianocBase64DecodePerf\n\nUse signficantly faster base64 implementation"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/09509d612cebb4b1a1e1a95d2f4dd2fe98315c25", "message": "Merge pull request #418 from rangadi/remove_protobufs\n\nReplace ColumnarMetadata protobuf used in RCFile with dynamic protobuf, remove CountedMap for pig"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2772170", "body": "Raghu, I moved the logic. You're right -- much cleaner.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2772170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234837", "body": "Ah, good call. I guess my reservation is that there could be cases where a Struct wouldn't turn into a tuple, but instead into a bag...but thinking on it now, that isn't the case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237064", "body": "Yes. Now that we are explicitly wrapping it in a tuple, there is no reason to change the schema name.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237082", "body": "AFAIK, in thrift you cannot have a list/set that contains a list/set without wrapping the inner part in a struct. As such, I think we can just get rid of the LIST and SET case in singleFieldToTupleSchema. We could leave it in for theoretical completeness, but given it's private and only used by singleFieldToFieldSchema, it makes more sense to me to delete the lines rather than plan for a case that can't happen. Thoughts? The tests ran without it, but of course, we're not testing for it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237418", "body": "I deleted my comment because I in fact had made a separate mistake throwing an error, so you were right :) I've refactored the code to properly handle arbitrarily nested objects, and am adding tests to make sure that isn't broken. Will push when it is done.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237438", "body": "I don't think our HoleyMoley tests for it, but thrift in general supports it, and it is easy to support.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/256786", "body": "I just want to highlight that I believe this was creating the issue with lists of lists. Basically, you have singleFieldToFieldSchema, which calls singleFieldToTupleSchema, but it called field.getListElemField each time, which was going too deeply into the list.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/256786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mikemidwest": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/399", "title": "mvn package error", "body": "[ERROR] Failed to execute goal on project elephant-bird-hadoop-compat: Could not resolve dependencies for project com.twitter\n.elephantbird:elephant-bird-hadoop-compat:jar:4.6-SNAPSHOT: Failure to find org.apache.hadoop:hadoop-client:jar:1.1.2 in http\n://repo1.maven.org/maven/ was cached in the local repository, resolution will not be reattempted until the update interval of\n central has elapsed or updates are forced -> [Help 1]\n\nAnyone had the same issue?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Foolius": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/397", "title": "No parsing", "body": "I want to use elephant-bird to write a twitter crawl to elasticsearch.\nHow this can be done is described here: http://www.elasticsearch.org/guide/en/elasticsearch/hadoop/current/pig.html\nI don't need any parsing but I need valid json and when I load it as it is, there are sometimes messages from the twitter API which are not valid json and cause elasticsearch-hadoop to crash.\n\nIs this possible to do with elephant-bird?\n\nIf not, is it perhaps possible to implement it? I can imagine for someone knowing the code it is easily done.\n\nI know, this is a strange use case, but perhaps I'm not the only one who could use this.\n\nCheers\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aniket486": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/396", "title": "MultiInputFormat should support Parquet", "body": "", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/367", "title": "add semver validation checks", "body": "@dvryaboy I think this is really useful, we should do it for EB too.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/365", "title": "EB should stop packaging test thrift/protobufs", "body": "For example, https://github.com/kevinweil/elephant-bird/blob/master/core/src/main/thrift/test.thrift is currently packaged with eb-core jar. Downstream application such as parquet use these thrifts for tests. We do not ensure backward's compatibility for these. We should remove these from eb and move them to test or we should make sure that new fields added to thrifts are \"optional\".\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/338", "title": "mvn install test failure", "body": "mvn install fails because of following test failure-\ntest(com.twitter.elephantbird.pig.util.TestThriftToPig)  Time elapsed: 0.001 sec  <<< FAILURE!\norg.junit.ComparisonFailure: expected:<415-555-5555,[HOME]> but was:<415-555-5555,[1]>\n    at org.junit.Assert.assertEquals(Assert.java:123)\n    at org.junit.Assert.assertEquals(Assert.java:145)\n    at com.twitter.elephantbird.pig.util.TestThriftToPig.tupleTest(TestThriftToPig.java:190)\n    at com.twitter.elephantbird.pig.util.TestThriftToPig.test(TestThriftToPig.java:146)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\nOn investigation I found out that its because testSetConversionProperties which is the last test in the file calls conf.setBoolean(ThriftToPig.USE_ENUM_ID_CONF_KEY, true); which mutates the static variable. So, if the order of the tests is changed, mvn install fails.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b983c990262c112dd6f692ea2da1fb6bdeebf997", "message": "Merge pull request #394 from rangadi/task_hearthbeat\n\nuse progress() from HadoopCompat"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ace81c60af49af406678dfdbe852717c1053a549", "message": "Merge pull request #369 from aniket486/move_thrift_proto_to_test\n\nMove thrift files from src to test"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/5727df2a247c3d57fa1b82e3af970d9e58045b13", "message": "add missing licence header"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/31a404bcb07ba9088ebdabe731718427bc9e50ea", "message": "add missing licence, remove duplicated address_book.thrift, fix package naming"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/34018ed46aeab11c2fecd766033745b6d936f484", "message": "change git ignore to add core/test*.txt"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b8ded83c6db7e0d4f67c17a8a949344a7336e65d", "message": "remove thrift from core src"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6f1520bac08379c72e9b510dcafbe6ef535ef8b8", "message": "remove Fixtures.java to test, why was it in main?"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/71f04a6d7d6a899a8675cb896818100ef39147e2", "message": "remove unnecessary build-helper plugin"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/599d2cd42d9f2712a19273dbf496c82f189bb879", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/7224bf7489c70d80f40e5ffa33ceccd386f36684", "message": "[maven-release-plugin] prepare release elephant-bird-4.4"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drahcos": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/389", "title": "SeqeuenceFile with VectorWritable", "body": "Hi,\nI try to extract entries from a tfidf-SequenceFile which I created with seq2sparse. I can read and extract the content but I need to create a new SequenceFile with the entries I extracted. The value needs to be of VectorWritable type (like in seq2sparse tfidf). I tried your SequenceFileStorage with '-c com.twitter.elephantbird.pig.mahout.VectorWritableConverter' as the second parameter but the output always uses the Text class instead.\nIs there some way to handle this?\n\nRegards,\nRichard\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rangadi": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/382", "title": "Extra Thrift deserializer sanity checks", "body": "The default thrift deserializer is very lenient and ignores anything that does not quite make sense. The consumers almost always prefer Thrift deserializer to fail when a serialized record has something unexpected rather than ignore it.\n\nAn example of EB sanity check is where it throws TException when it sees an unknown type ( https://github.com/kevinweil/elephant-bird/blob/master/core/src/main/java/com/twitter/elephantbird/thrift/ThriftBinaryProtocol.java )\n\nWe could add some more (enabled optionally): \n- Deserializer does not consume entire length of the buffer. We always expect a binary record to contain one and only one thrift record.\n- If a field id and corresponding type don't match\n- If a fieldId is negative or much larger than known ids. We don't expect a thrift struct to jump field id by 1000, for e.g.\n- [this is a bit extreme, but might be useful in some cases] error on any known field id, i.e. we expect entire set of records to confirm to exactly single version of IDL. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/316", "title": "provide a way avoid 'key is not a String' in ThriftToPig", "body": "It is annoying for users to see the following warnings multiple times in a script. We should either provide an option not to warn or limit it o once per thrift struct.\n\n```\n2013-05-17 17:08:04,082 [main] WARN  com.twitter.elephantbird.pig.util.ThriftToPig - Using a map with non-string key for field contributors. while converting to PIG Tuple, toString() is used for the key. It could result in incorrect maps.\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/311", "title": "Improve ThriftToPig with Field.getGenericType() ", "body": "Currently ThriftToPig does not handle some cases well because of lack of type info inside containers. e.g. : \n- if a struct as exception inside a container (as in map<string, MyException>), it can't get type of MyException.\n  - when a buffer is declared a container (map<string, buffer>), it does not figure that value type is not a String but a buffer.\n\nThese are essentially quircks in Thrift itself, that we should handle better with use of [Field.getGenericType()](http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/Field.html#getGenericType%28%29).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/290", "title": "hadoop-lzo jar should be optional.", "body": "If an application does not use use lzo, we should not require hadoop-lzo.jar or lzo native libs. There are probably some references that could be organized better.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/267", "title": "provide an option for Lzo inputformat not to read index file (or read remotely)", "body": "The index for a an lzo file is read on the client while making the splits. for large inputs, this takes very long since the file are read serially.\n\nSome times users may not need to split the file (say, there are already lots of files), a simple option to disable readin the index might be good enough.\n\nAnother option is to read the index on the remote tasks. Each record reader adjusts its split based on the the index.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c219eee25200fb3bd5789f59413a4d400a098346", "message": "Merge pull request #434 from gerashegalov/master\n\nSpeed up LzoInputFormat splitting by caching FileStatus'es from the very first listStatus"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/1efa52d912ad35fbdf6d60f3d45a6801ec722063", "message": "Merge pull request #430 from gerashegalov/master\n\nConfigurable minimum indexable file size"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/72e6e4b6c14aad74302255ea797c88ec51d5b6fc", "message": "Merge pull request #421 from brirams/expose_file_descriptor\n\nExpose FileDescriptor and FieldDescriptor in ThriftToDynamicProto"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/80d034dee1471f955050d1efad1307514cb1b0fe", "message": "Merge pull request #417 from amatsukawa/cascading_seqfile_combine\n\nA Cascading scheme for combining intermediate sequence files"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/7e317883c7ab1c12e3e9b0b5caa858382583d141", "message": "Merge pull request #414 from gstaubli/patch-1\n\nthrift, not thrist"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/2c412257a5cbb6ccd896994267cb503a07428b6b", "message": "Merge pull request #413 from lewismc/master\n\nTrivial Javadocs for LuceneIndexInputFormat"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c40f3cf84fbefe6ff47a86295fa87d39d7910be6", "message": "Merge pull request #412 from brirams/thrift_to_dynamic_proto_container_support\n\nAdding support for Map, Sets and Lists to ThriftToDynamicProto"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/cd4598308287a2fa17c68724d615688b2acf3f84", "message": "Merge pull request #407 from lewismc/master\n\n Make dependencies explicit in Readme quickstart section"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/4fa5dfcc1a287bfb4e580dbf9f4b1203bee83a2d", "message": "Merge pull request #403 from kevinweil/jco/dont_open_at_once\n\nRefactor CompositeRecordReader to only make a record reader when necessary"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/133642cb3fa62350eff5a78cbe2dd7d2c4823a92", "message": "Merge pull request #395 from jcoveney/jco/properly_incorporate_name_in_shim\n\nIncorporate the name given to record writer into the record writer"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/5c5f3a98055ed23cb67157dadb9497c1d42612d4", "message": "Merge pull request #392 from jcoveney/jco/deprecatedfileoutputformat\n\nIntroduce and use DeprecatedFileOutputFormatWrapper"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c7c2a8b88b82f9a43433bf5b98cf906c920d15d6", "message": "Merge pull request #390 from jcoveney/jco/lzo_status_wrapper\n\nUse ReporterWrapper in DeprecatedOutputFormatWrapper"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/4ee0b2f450782c30a3c042e8b3abe33c1b899166", "message": "Merge pull request #386 from jcoveney/jco/350\n\nAdd support for strict mode in LzoTextDelimited"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/bc297b3ae5bb2cd679ea9d0d8c1eda5c061e7645", "message": "Merge pull request #388 from jcoveney/jco/cascading_2.5.2\n\nUpgrade to use cascading 2.5.2"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c8916c23e924112e4f1dbba635473319af7dde13", "message": "Merge pull request #381 from sorenmacbeth/master\n\nsupport the --java:bean thrift compiler flag (Soren Macbeth)"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/50dd22596920331704dce3c20c2fecacced0fcaa", "message": "Merge pull request #380 from bryanherger/master\n\nCorrect an issue with ByteString handling in Protobuf Serde"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/98944689e230c551f89115623e74d9079fc50949", "message": "Merge pull request #371 from ankurbarua/patch-1\n\nClose cloned HDFSIndexInput instances"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ef8949728905935530897851427e0aae33977d56", "message": "Merge pull request #375 from jwills/master\n\nCrunch version bump and bug fixes for Thrift types and shuffle serialization"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/462f3dbf62852c228fa93546567e3c8f4af576ab", "message": "Merge pull request #373 from rangadi/dynamic_proto\n\nReplace generated SerializedBlock with a DynamicMessage (protobuf 2.5.0 support)"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/be159e5b9efd463fc9f9a4c6970d2cec97560ad0", "message": "Merge pull request #374 from rangadi/update_hadoop_lzo_version\n\nupgrade hadoop-lzo version to 0.4.19."}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/970d8013cda6af0904e9bd25df3edb103d0edbf1", "message": "Merge pull request #368 from rangadi/update_hadoop_compat\n\nadd a few more methods methods to hadoop-compat"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/9e6a12e43758c2e3f8aaa37268898d6f3de2f72a", "message": "Merge pull request #364 from dvryaboy/tstruct_enum_npe\n\nPrevent NPE in TStructDescriptor when an unexpected enum is encountered"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/814e05edfed024dd69ce39640a03a957b026b24d", "message": "Merge pull request #356 from rangadi/avoid-thrift-field-value-metadata\n\nThrift typedef handling: avoid relying on Thrift's FieldValueMetaData"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/bad412e3eea7101323899ca264a0dcc9c8c28fe9", "message": "Merge pull request #362 from Chandler/patch-1\n\nCombinedFileInputFormat javadoc link didn't have the full path"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/101", "title": "Support for non-LZO files.", "body": "set elephantbird.lzo.input.include.nonlzo to enable it.\nby default only lzo files are read.\n\nAll the existing Lzo\\* input formats and Pig loaders would work with this. \n\n(eventually we might remove \"Lzo\" prefix for many of these loader classes).\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/612522", "body": "Thanks Guys.\n\nAdded another update to the patch. Includes all the suggestions.\n- renamed couple of 'Binary' base classes to remove 'Proto' in the name.\n- Updated names for counters in PigLoaders to include name of the Thrift/Protobuf class name.\n- added stats for InputFormats.\n- PigCounterHelper : changed order of checking for reporter so that there are Map insertions and deletions in common case.\n- Other misc smaller changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/612522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/615003", "body": "Updated the equals methods as suggested. \n\nFor now, retained the stats names. can can add '_' once elephant-bird can export these stats to ganglia.. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/615003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/632770", "body": "Only the last three commits are the real commits. The rest of them are already merged.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/632770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/798382", "body": "Thanks Dmitriy. We completely missed the static Descriptor and field objects that Protobuf uses for hash when Johan raised this issue on Thursday.\n\nI didn't know we could write such a test in ant. I would have mostly even attempted it!.\n\nI think the current fix is consistent with compareTo() where we serialized bytes. I think we should make equals also consistent by just returning 'compareTo() == 0'. This applies both to Thrift and Protobufs. Even in the case of Thrift, we might have access to only the serialized bytes sometimes (when used as mapper's output key).\n\nI am working on a patch for the current implementation to remove 'serialized' and 'deserialized' booleans. Should I fix equals() as well?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/798382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/799875", "body": "I sent a pull request https://github.com/kevinweil/elephant-bird/pull/29\n\nThe update make equals() consistent. \n\nMore importantly, since Thrift objects are mutable our Writable either keeps the object or the serialized buffer, but not both at a time. \n\nIt complicates get() JavaDoc a bit. User might get different physical object from each call to get(). We essentially keep the serialized buffer most of the time. \n\nWe could consider renaming get().\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/799875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/831075", "body": "whua, \nsee ProtobufMRExample.java to see how LzoProtobufBlockInputFormat is used. \n\nIf that does not cover use case, then please explain your use case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/831075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/832829", "body": "ThriftToPig schema : added another smallish fix I noticed today. We didin't handle DOUBLE before...\nAlso needed a hack to distinguish between 'string' and a 'binary' during Schema time.   \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/832829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/856839", "body": "There are couple of pig examples in examples/ directory.\n\nProtobuf :\nhttps://github.com/kevinweil/elephant-bird/blob/eb1.2.1-dev/examples/src/pig/people_phone_number_count.pig \n(see the comment that show how to use Pig loader without codegen).\n\nThrift : \nhttps://github.com/kevinweil/elephant-bird/blob/eb1.2.1-dev/examples/src/pig/people_phone_number_count.pig\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/856839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/858814", "body": "discarded. will include this in next pull request.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/858814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/882263", "body": "I am piggy-backing a small fix for PigConterHelper. It now just stores the PigHadoopLogger singleton (to avoid locking around getInstance()) rather than reporter.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/882263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/929569", "body": "what is the fix? may be it is better to use static method encodeBase64(byes, isChunked) that is part of both versions : http://commons.apache.org/codec/api-1.3/org/apache/commons/codec/binary/Base64.html#encodeBase64(byte[], boolean)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/929569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/942211", "body": "Angus, could you describe the bug in detail? How does the failure manifest.? We tried running this code in an environment where there is just 1.3, 1.3 & 1.4. It seemed to work alright.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/942211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/946536", "body": "I am still not bale to reproduce. \n\n\"[..] The cause is that Base64 default constructor in 1.4 enables the chunking silently, which breaks the output line with more than 76 into several lines, thus TextInputFormat in hadoop can only read part of the message in one call.[...]\"\n\nThis is exactly the bug this issue is supposed to fix, right? Why do you think it didn't work?\n\nI see that you don't have '-libjars' in your command to reproduce this. May be elephant-bird jar is part of TaskTracker's classpatch. Can you make sure that jar has this fix? One way to make sure is that you can log something in Codecs.createStandardBase64().\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/946536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/947992", "body": "That is true for for any jar mismatch, right? \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/947992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1097423", "body": "hi Dmitriy,\n\ncould you pull this so that it goes into next EB release. thanks.\nThis bug does not affect MR or PIG since we use specific class loaders in both cases. so not urgent.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1097423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1193771", "body": "courtesy :  Xiang Xu\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1193771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1201358", "body": "Thanks for reporting the bug.\nThis is fixed in latest release 1.2.5 https://github.com/kevinweil/elephant-bird/pull/43\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1201358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1362928", "body": "+1. Looks good. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1362928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1364164", "body": "Please ignore this pull request. incorrect commit range. I will file another one.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1364164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1374139", "body": "Hi Miguno,\n\nkevinweil's master is the \"official\" release. This is what we are using at Twitter right now. 2.0.2 is considered stable and is the official release. There will be 2.0.3 sometime today or tomorrow.\n\nOur process so far has been: A all the development patches into kevinweil/eb-dev. The we merge eb-dev into master when we are ready to make a release.\n\nI will take a look at LzoPigStorage.java. I how it is different from LzoTextLoader in functionality (both use LzoTextInputformat for reading).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1374139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1375071", "body": "[ ignore this comment. I thought you were talking another log line ] \nThe file name saves lot of time debugging when some of the mappers fail due to corruptions. IWe had added similar logging to base pig loader. after PIG 8, we are not using that code anymore. I replaced one info log with another..\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1375071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1378787", "body": "+1.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1378787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1384481", "body": "This does not look like a Thrift or Elephantbird related issue. it is easy to reproduce :\nrun the following script with an input that has two integers in one line :\n\n-- run with pig -x local.\na = load 'x.txt' as (a:long, b:long);\n-- dump a;\n\nx = foreach a generate a, TOBAG(a, b) as abag;\ny = foreach x generate TOTUPLE(a, abag) as atuple;\nz = foreach y generate atuple.abag;\ndescribe z;\ndump z;\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1384481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1384768", "body": "right. Pig 10's error message is very different. I will check out PIG 10. It might be change in how tuple in DataBags are represented in schema.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1384768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1390592", "body": "There is some stripping going on in pig trunk. Added following log line to Schema.java (line 1986 in 0.8 and 1880 in trunk) :\n`log.info(\"XXX : bag schema : \" + rfs + \" inner : \" + innerFs);`\n\nWith same EB jar:\n\nOn trunk : \n  `bag schema : item_ids:{item_ids_tuple:long} inner : item_ids_tuple: long` \n   followed by error shown above.\n\nOn 0.8 : \n  `bag schema : item_ids:{t:(item_ids_tuple:long)} inner : t: tuple({item_ids_tuple: long})\n    bag schema : item_names:{t:(item_names_tuple:chararray)} inner : t: tuple({item_names_tuple: chararray})\n    bag schema : tokens:{t:(tokens_tuple:chararray)} inner : t: tuple({tokens_tuple: chararray})`\n\nThe tuple wrapping gets stripped in Pig 10. I will try out a change in ThriftToPig.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1390592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1390834", "body": "It might be reverse, Pig 0.8 might be adding an implicit wrapper.\nFor trunk, adding an extra Tuple wrapper fixes it. ie, a bag of longs looks like :\n\n<pre>\nnew Schema( \n      new FieldSchema(  \"bag\", \n           new Schema ( \n                new FieldSchema(  \"t\",  // Extra layer  \n                        new Schema (    // Extra layer\n                               new FieldSchema( \"bag_tuple\", null,  DataType.LONG )\n                        ), DataType.TUPLE  // Extra layer\n                 )\n         ), DataType.BAG\n )\n</pre>\n\nBut this does not seem compatible with pig 0.8.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1390834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1430233", "body": "This is not ready yet. It needs to use LzoTextInputFormat so that the files are splittable. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1430233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1433741", "body": "Updated to use LzoTextInputFormat for loading (just like gerritjvv's version did).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1433741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1433748", "body": "sent https://github.com/kevinweil/elephant-bird/pull/62 against keviweil/eb-dev. Thanks gerritjvv.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1433748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1434148", "body": "LzoTokenizedStorage is buggy.  deprecated and replaced by LzoPigStorage. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1434148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1434178", "body": "There are multiple bugs. It writes \"9\" instead of tab for when the delimiter is '\\t'. Obviously noone used this for storage.\n\nReplace by LzoPigStorage in https://github.com/kevinweil/elephant-bird/pull/62 .\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1434178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1434229", "body": "Thanks for bringing this our attention, miguno.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1434229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1434313", "body": "Replaced LzoTokenizerLoader as well. but I was not sure if should be deprecated or not.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1434313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1436363", "body": "Two more updates : \n- added Bz2PigStorage. PIG can split bz2 files and it is pretty good option for some of he outputs.\n- LzoTextLoader = LzoPigLoader(\"\\n\")\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1436363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1514464", "body": "Using streaming in PIG might be an easy option. This works well if you need access to the fields in the protobuf rather then the whole serialized protobuf itself in your script.\n\nsomething like :\n\nA = load 'input' using LzoProtobufBlockPigLoader('protobuf_class');\nB = foreach A generate field1, field2;\nC = stream B through `script_that_handles_field1_and_field2` as ...;\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1514464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1648310", "body": "we don't see an immediate need for a release..\nare there any specific patches we are planning to use? we can make a release.. the recent patches have all been fairly safe improvements/features.\n\nI will going to update this patch so the it works with older version of hadoop-lzo as well.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1648310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1658433", "body": "Updated patch to work with older hadoop-lzo in classpath. \nI still kept the compile time dependency so that it looks better and simpler. And it forces us to update EB's hadoop-lzo jar :). \nThis patch will be complete only after hadoop-lzo is upgrade to 0.4.13.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1658433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1665580", "body": "JSONParser#parse does mention null as on of the possible returns. But could not easily see how that occurs.\nDo you have the input that produces this problem?\n\nyes, checking for null and logging a warning would be a good fix (same as a parse error).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1665580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1787108", "body": "Thanks Dmitriy. I will make a release with this.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1787108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1830921", "body": "lots of discussion.\nI had briefly looked at the patch this morning and came back to say I will review this. I will go through the patch and comments later today.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1830921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1843429", "body": "> And capture Thrift, too? I know it's more than you signed up for, we should be able to help. Seems like we shouldn't do this half-way though, people will be \n> confused about what is and is not available.\n\nYes, mentioned my line note for ProtobufInputFormat ( separating recorder reader and the one that converts record to Protobuf). \n\n> ideally there would only be one loader and it would just figure out whether the input is compressed or not, and use the right input format.\n> [digressing here to larger issue]\n\nIt would be great to refractor loaders, inputformat to built just by picking different components  (each box below is a ordered chain of handlers)\n <pre>  \n      -------------------------------------------\n   |  Record to User Object handlers   |  E.g. bytes --> b64 decode --> protobuf -->  pig tuple \n      ------------------------------------------\n                           ^\n                            |\n      -------------------------------------------\n   | Raw stream to Record extractors |  E.g. LineRecordReader, SequenceFile Reader, EB's bloc storage reader...\n      -------------------------------------------\n                           ^\n                            |  \n      -------------------------------------------\n   | File stream readers                        |  Decompressors etc.  \n      ------------------------------------------- \n\n</pre>\nThe boundaries are not very hard.. The whole thing can be thought of as large Chain.\nA user would have responsibility to build correct chain so that each handler understands the one immediately before it.\n\nSomething like this would be very useful outside EB as well.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1843429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1934662", "body": "Thanks Andy. I will merge the patch. I will go through the reviewboard  you mentioned.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1934662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1936170", "body": "Hi Scott, lemme know if you have any comments about two review comments I made on Aug 18th. \n\nYou can ignore the comment with text boxes about thoughts on future refactoring of these classes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1936170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1943517", "body": "These delays are normal. no problem.\n\nTo update this patch, all you need to do is to commit and push the new changes to your elephant-bird master (as you have done couple of times already). This pull request automatically gets updated since it is tied your master branch.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1943517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1950069", "body": "Thanks Andy. will merge it today. Is commons-httpclient-3.0.1.jar used any where in the patch?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1950069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2120284", "body": "Thanks Andy. I think we need to write more tests on the same lines as your tests here and for SequenceFileStorage. \n\nOne question: Say I have a thrift class called 'com.twitter.thrift.Person', how do I make use of these classes and SequenceFileStorage in a pig script to read/write thrift objects in a sequence file? Do I need another java class {code} \nPersonWritableConverter extends LazyThriftWritableConverter<Person> { ... }\n{code} ?\n\nIt would be an extra burden for user to generate this class (though it is very trivial). One option is to take extra options for SequenceFileLoader that get passed down to Converter class or it could take --thrift or --protbuf option that can be used to create the right converter inside SequenceFileLoader. The latter is probably better.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2120284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2120628", "body": "yep. tested with client_events.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2120628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2124644", "body": "got it. \nfor loaders '-c' takes extra arguments. \n\n> Storing data successfully is another story; SequenceFile header data encodes only the base classnames of the Writable \n> types supporting key and value data. If you were to use ThriftWritable<T> directly, the thrift type T would be lost .. \n\nI don't see an issue with this. Your SequenceFileLoader uses RawSequenceFIle which does not depend on the class..\n\n> Currently, Writable instances are created during SequenceFile read by a Deserializer. Default Deserializer impl for ...\n\nright. but a user can still read using SequenceFileInputFormat without a specialize class.. what happens is that SequenceFile creates a ThriftWritable with out knowing the actual thrift class Person and passes it to user.\n Then user needs to tell which Thrift class it is before doing a get. i.e. \n`writable.setConverter(Person.class);\n  Person p = writable.get();``\n Actual deserialization of Thrift object is delayed until get() mainly for this reason . Does this address the concern?\n\nI will merge this patch in later today.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2124644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2130995", "body": "hmm. does it mean the constructor for a converter should be declared as String[]? May not be necessary yet. Go ahead and submit another pull request. I will close this one. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2130995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2138945", "body": "PIG in similar contexts  tries to invoke Constructor(String, String, ...), so many users might just declare Constructor(String, String) etc.\n\nCould you first check if the String constructor exists, before trying to invoke String[] constructor? It might be more intuitive for PIG users who have written UDFs etc.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2138945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2408742", "body": "Looks good. I am assuming you have tested all these on real data.\n\nReturning value only in case of NullWritable does not seem more helpful.. why not just return null? Does it also mean while storing, the relation should have only one column 'value'?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2408742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2409572", "body": "+1 for keeping both key and value irrespective of the type. Looks more consistent to me. User won't be surprised by nulls.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2409572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2463117", "body": "love the new improvements. When I was reviewing the other pull request, I was thinking on the similar lines : it would be better I don't need to specify the WritatableConverter for thrift and just the Thrift class, since the converter can be derived.\n\n> After backing out DefaultWritableConverter and related changes, client use of SequenceFileStorage \n\nIt is up to you. I don't mind including DefaultWritableConverter here.\n\n> pair = LOAD '$INPUT' USING ...SequenceFileLoader();\n\nHow do you figure out it is 'int, chararray\"?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2463117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2469899", "body": "> More details are listed in this commit message. Generally, on LOAD, \n\nI see. `PigStorageSchema` also does something similar. It does not seem to worry about the recently generated table. It just uses the 'location' passed in  getSchema(). Is that affected by this issue too?\n\nbtw, I think most of the commit message belongs in code itself..\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2469899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2474423", "body": "looking at the patch now.. will commit soon.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2474423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2474779", "body": "> The prior DefaultWritableConverter would need to keep track of any extra arguments passed in, such as the name of a Thrift class, in order to support this. Doable, but as I mentioned, I'd prefer to hold off until I figure out a cleaner way to determine schema info during LOAD.\n\nThis has already improved. Thrift classes don't need to specify ''-t com.twitter.elephantbird.mapreduce.io.ThriftWritable\"\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2474779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2483612", "body": "will review. \nyou might want to look at https://github.com/kevinweil/elephant-bird/pull/71 which add generic support for uncompressed files. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2483612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2610911", "body": "can you update your commit range to merge into \"kevinweil:eb-dev\"?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2610911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2611416", "body": "Thrift : The following script sees a 25% benefit (57 sec with the patch vs 77 sec without). EVENT has 14 fields. \n\n```\nce = LOAD './ce-block' USING LzoThriftBlockPigLoader('Event');\ndetails = FILTER ce by event_details IS NOT NULL;\nids = foreach details GENERATE event_details.event_info;\nc = foreach ( group ids all ) generate COUNT(ids); \ndump c;\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2611416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2635732", "body": "added test for map with enum keys.\nyes, the existing test verified string map.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2635732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2636621", "body": "EB currently sets correct Tuple wrapping for both pig 0.8 and 0.9+\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2636621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2685531", "body": "used incorrect commit range. will open a new one.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2685531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2701333", "body": "not yet. The way I would implement this without fundamental restructuring of whole record reading hierarchy is to make LzoInputFormat (optionally) delegate handling non-lzo files to FileInputFormat. \n\nI think that gives maximum benefit short of big redesign.\n\nThe implementation here is pretty specific to protobuf. I was thinking about this when while implementing MultiFormatLoader in https://github.com/kevinweil/elephant-bird/pull/97 .\nI will get a patch this weekend.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2701333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2739085", "body": "Once #97 is merged, I will update MultiInputFormat loader to read non-lzo files.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2739085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2739097", "body": "#101 should make it trivial (just set elephantbird.lzo.input.include.nonlzo to true).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2739097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2771919", "body": "+1.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2771919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2841098", "body": "Closing this. It is trivial to implement by extending LzoJsonStorage. will add if there is interest.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2841098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2843042", "body": "after discussing with Julien.\n- lets refactor more and do the right thing now rather than later.\n  - so Lzo\\* classes handle only lzo input\n  -  e.g. in addition to LzoProtobufBlockPigLoader, there will be ProtobufBlockPigLoader that loads files in other formats as well. \n- delegate to differerent inputformats as cleanly as the InputFormat interface allows \n  - there are some limitations here.. e.g. what makes sure that \"file.lzo.index\" is not read by any input format etc.\n\nwill try to get better patch.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2843042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2843555", "body": "thanks Julien. The patch is updated.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2843555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2853750", "body": "Thanks Julien.\nUpdate the patch based on review and merged it with eb-dev (there was a minor conflict).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2853750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2904636", "body": "You can use the same example to read from lzo file you created to text. Let me know if you need help with this.\n\nIf you plan to use Pig, you use Lzo protobuf loader to load the protobufs and then 'dump' them.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2904636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2953709", "body": "Thanks Jon. Merged into eb-dev.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2953709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3210937", "body": "also, does this imply arrays should be databags?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3210937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3211515", "body": "what is the version of hadoop-lzo you are using?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3211515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3223000", "body": "Do you expect any uncompressible data? hadoop-lzo 0.4.14 fixes a bug that used to cause exact stacktrace (https://github.com/kevinweil/hadoop-lzo/pull/32) when there is uncompressible data. \nIf yes, please make sure there isn't another hadoop-lzo taking precedence in the path.\n\nOtherwise it will be great if you can send me a file that causes this error.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3223000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3343444", "body": "This patch converts a json map to Pig map. Similarly as a userI would expect json arrays to be Pig arrays. Currently arrays would be strings.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3343444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3358396", "body": "Pig does not set context in some cases. We use following work around in another loader. will check if this is the same issue.\n\n```\n private void ensureUDFContext(Configuration conf) throws IOException {\n      if ( UDFContext.getUDFContext().isUDFConfEmpty()\n           && conf.get(\"pig.udf.context\") != null) {\n          MapRedUtil.setupUDFContext( conf );\n    }  \n }\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3358396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363286", "body": "Thanks Ted. We need to get Pig to fix this inconsistency as well.\n\nI think you auto-reformatted the whole file. was that intentional?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363758", "body": "yes, please.\n\nI had looked into where Pig fails to set the context a while back. I will file a PIG jira after confirming it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363922", "body": "merged. \nA new pull request was not required. #113 gets updated as well.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3455278", "body": "Thanks for the review Dmitriy.\nadded warning for use of deprecated Lzo loaders.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3455278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3570064", "body": "This is really an issue with SequenceFileInputFormat in MapReduce. This class needs to override listFiles().\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3570064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3570101", "body": "btw, you can try LOAD ' 'hdfs://localhost//foo/{23,24}' ...\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3570101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3592873", "body": "should be independent of it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3592873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3751340", "body": "fixed the imports. thanks.\nMy editor had other errors for these files and didn't catch these.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3751340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3786605", "body": "looks like you rewrote the whole file by mistake.. could you correct it? (look at the diff)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3786605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3806876", "body": "meged.  thanks Travis.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3806876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3834805", "body": "thanks Chris, I will try it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3834805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3835150", "body": "the jar on Maven does not have com.google.protobuf.Plugin.*. Need to check if there another package that include this.\nCurrently a protobuf jar is included under lib/ directory.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3835150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3975000", "body": "yeah. This is second on my elephant-bird list after the update to Thrift-RCFile. should have have a patch next week.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3975000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4010964", "body": "PigUtil uses if for checking a core pig class itself to see if we are are Pig 0.8 or on  newer version. We could remove the whole check once we decide not to support Pig 8 anymore.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4010964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4028326", "body": "we can check in our version of Pig 0.92 into libs.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4028326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4044250", "body": "I thought protobufs are always requires for EB (be cause of block format).\n\nOh, what you are saying is that we should not need protobuf if Thrift + B64Lines are used, right? I can add that.\n\nwith the current patch :\n- protobuf jar : always required for EB\n- thirft jar : only if thrift class is used for loader or input format.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4044250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4093166", "body": "this is closed and replaced by pull #144\n\nI made the mistake of merging master and this request contains too many unrelated commits.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4093166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/comments/279754", "body": "I don't think we need these two booleans. Essentially we could have, serialized == (message != null) and deserialized == (messageBytes != null). We will make sure this condition holds when the state of the object changes (in set(), readFields() etc).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/279754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/279771", "body": "minor: Do you have auto-reindent set? I think the prev indentation was better.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/279771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/2807880", "body": "nope. may be just 3.0.0 for min version is good enough.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/2807880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/5853", "body": "This file got committed in the past by mistake.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/5853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/7650", "body": "builder.clone()  is create() + mergeFrom() . merge iterates over all the fields.\nmessage.newBuilderForType() is just create(). \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/7650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/12441", "body": "You can just call Base64(0), right? since EB will have 1.4 in its libs.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/12441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/12676", "body": "I was able to compile even though my hadoop has 1.3. I don't think hadoop libs are included in classpath while compiling. Not sure if t invoking through reflection is much costlier than invoking directly. Either way, it does not affect EB since it creates only one per file.\n\nIt would be nice to have a comment inside createStandardBase64() as to why we have this work around.\nthanks for the patch.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/12676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/44630", "body": "Removed this as this was not used any more.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/44630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/45677", "body": "This was the bug. We were using the same filter for listing directories, which ended up filtering out directories not ending \".lzo\"\n\nThe rest of the code changes is mainly to move file filtering logic into one place (into addInputPath).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/45677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/45768", "body": "The java doc says it can return null if Schema could not be determined. In fact my test for recursion was using this patch (with JsonLoader).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/45768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/105968", "body": "How are splits handled? this should take split start and end into account?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/105968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/105987", "body": "these properties can be removed since Pig projection will read only the required fields.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/105987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106035", "body": "scratch the above. these are context properties not pig config properties.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106042", "body": "eventually we need to let key and value converters to provide the schema so that getSchema() can be implemented. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106055", "body": "It is probably better to expect just two columns 'key, value' in the input table. It would be less error prone and also lets PIG skip the unused fields efficiently. Most of our scripts don't access fields with index. In the above case it would be :\n\nkey_value = foreach key_val generate key, val;\n\nSTORE key_val INTO '$OUTPUT' USING com.twitter.elephantbird.pig.store.SequenceFileStorage (\n  '-t org.apache.hadoop.io.IntWritable -c com.twitter.elephantbird.pig.util.IntWritableConverter',\n '-t org.apache.hadoop.io.Text        -c com.twitter.elephantbird.pig.util.TextConverter'\n );\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106068", "body": "next() would return null if hasNext() is not called? I don't think Iterator contract makes invoking hasNext()  and next() strictly in pairs.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/95478", "body": "What is the intention here? In the case of a DataBag, it returns a tuple with the bag. Did you forget invoking ProtobufTuple()?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/95478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/96415", "body": "Please revert the file properly. This patch is just reformatting this. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/96415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/96446", "body": "I see two parts here:\n  (a) an input format where each record is separated by 'Protobufs.KNOWN_GOOD_POSITION_MARKER'\n       - this part similar to LzoBinaryBlockRecordReader + BinaryBlockReader\n\n  (b) the part that converts the record to protobuf \n\n(a) is bulk of the code and is not Protobuf specific. It could be separated. Then adding support for thrift or something else would be easier.\n\nIdeally, you should be required to write just (a) and the rest of of the inputformat, loader etc should have easily doable. \n\nCurrent existing class hierarchy is tied Lzo (only at the low level). As Dmitriy mentioned sometime we need to bite the bullet and rework this so that different parts can be assembled in a pipeline to make different input formats and loaders etc. (not part of this patch, of course).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/96446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/107111", "body": "I didn't mean to we need it in this patch. We need the converters to tell us the schema.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/107111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/110873", "body": "So far we were incrementing this counter even when the deserialization fails and returns null.\nI will change it to increment only successful read + deserilization.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/110873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/130042", "body": "Could you remove 'AS' clause? Users would think they have to specify it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/130042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/130056", "body": "I will remove it after merging.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/130056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165761", "body": "Isn't this expected to be always true?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/171773", "body": "note to self: setConverter() is pretty inefficient for calling for every record since it creates whole new converter each time. May be we should add get(converter) and set(converter) to BinaryConverter().\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/171773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/171795", "body": "I see. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/171795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/172116", "body": "sure. I was not sure when newInstance was true.. so it only set for first record then.\n\nI am only semi-following las two comments above :) let me know when you have an update... once I find some more time, I will dig a bit deeper.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/172116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165025", "body": "I think it is a common practice to use null key when you are just interested in sequence of values. That would blow up the logs. \n\nAs such I think you should either limit the log or not log at all if it is not an error. You could increment a counter, which is much more accessible to users.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165029", "body": "and, you should not skip when t is not null, even if either key or value are nulls.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165077", "body": "I think if a user is writing nulls, we should allow it. null values are explicitly supported by sequenceFileFormat I think. \n\nDoes Pig ever do putNext(null)? otherwise, could remove all of null checks.\n\nFor counters see use of PigCounterHelper in JsonLoader.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165118", "body": "you are right. then this makes sense. Handling NullWritable might need more changes, it is up to you :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/222369", "body": "Much needed update to primary documentation read by most. This would help a lot.\n\nminor: couple more references to 'via codegen' here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/222369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234811", "body": "minor: info is always enabled. The test just obscures the code. Even most of the LOG.debug() statements don't need such a check.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234813", "body": "Some of these inner classes like FieldDescriptorProto and DescriptorProto can also be imported (will shorten the lines).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234817", "body": "you could add \"while generating dynamic Protobuf\" so that it is clear even when we don't look at the stacktrace.\n\nbtw, most of the code to support nested structs and lists is already in this patch (of course, it is not needed yet, but will we find some use for it in future). \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236215", "body": "yes. unless this is in a loop, String construction should n't matter at al. One argument against it I have come across (and agree) is that the extra check just adds more code and makes it less readable. Your call :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/229038", "body": "I think better to extend LzoJsonStorage(). and just override getOutputFormat().\n\nAnd you can remove any compression settings from LzoBaseStoreFunc since that is handled by LzoOutputFormat. I am closing this. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/229038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246704", "body": "Yes. Essentially we need to rename this class (along with many other higher level classes) and not have Lzo in the name. This the beginning of transition.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/247006", "body": "I noticed AllLoader in Pig9 last week. It is interesting. will keep in mind. \nbriefly chatted with Dmitriy about it. It will of course need more patch to fit in here with Protobuf, Thrift loaders etc.\n\nAlso, as we discussed, we rework this patch more..  Lzo\\* classes only do Lzo etc.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/247006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/247098", "body": "yes. currently this is an implementation detail :) currently handling generic inputformat  in another pull request. Once that is is in, will update here as well.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/247098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/247101", "body": "setInputFormat(class, jobConf) would be better. will do.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/247101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/247162", "body": "thought about this.. to implement createRecordReader(), need to reflectively find the constructor that takes TypeRef. \n\nI think currently tis switch statement is not too bad compared to checking for a constructor. will revisit once we add more formats.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/247162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/205717", "body": "Most of the code is removed since this class extends B64LineLoader. Only difference is getInputFormat().\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/205717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/205719", "body": "Most of the code is removed since this extends B64LineLoader.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/205719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248756", "body": ":) right. kept _ because the original author had it that way. Right now it needs to support setTypeRef() for generated classes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234832", "body": "The fix probably should go to singleFieldToTupleSchema() where we replace\n\n```\n// wrapping STRUCT in a FieldSchema makes it impossible to\n// access fields in PIG script (causes runtime error).\nreturn toSchema(field.gettStructDescriptor());\n```\n\nwith\n\n```\nif (PigUtil.Pig9orNewer) {\n   fieldSchema = new FieldSchema(fieldName, toSchema(field.gettStructDescriptor()), DataType.TUPLE)\n} else {\n   return toSchema(field.gettStructDescriptor());\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/234832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236113", "body": "actually, everything needs to be wrapped in an extra tuple layer, not just Struct. Other primitives are also wrapped below.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236130", "body": "removing \"_tuple\" intentional?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237305", "body": "no space around '=' (here and other places) \n\nnot sure how it is related tuple wrapping.  will talk to you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237316", "body": "> AFAIK, in thrift you cannot have a list/set that contains a list/set without wrapping the inner part in a struct.\n\nit can have arbitrarily nested fields. \n\nmay be we should add a test for this. I think \"HollyMolly\" class has nested field like that. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237410", "body": "hm... HolyMoly in TestThriftToPig has a `Set<List<String>>`. \nfailure is in toSchema().. may it needs a fix.. toTuple() seems to work fine.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237436", "body": "may be not.. HolyMoley in TestThriftPig.java is different. let me check.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237491", "body": "look for `({(and a one),(and a two)}),({(then a one, two),(three!),(FOUR!!)})}` in the Test. Thats a `Set<List<String>>`\n\nWhat it does not test is toSchema() and that is failing in your test.  we could fix that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/237491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303373", "body": "good.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303385", "body": "not related, or we could make this configurable for ant.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303387", "body": "'ant -Dtestcase=TestJsonLoader test' is already supported.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303413", "body": "while you are at this, could you move this change to LzoJsonLoader and replace JsonLoader to just extend LzoJsonLoader.\nJsonLoader loader needs to extend just getInputFormat().\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303870", "body": "yes. constructor arg would be better than a property I think. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/447015", "body": "yeah, we should move this check to LzoIndex.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/447015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478919", "body": "should be moved to getInputFormat(). need to use PigContext.resolveClasName() for Pig loaders.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478923", "body": "This would just be FileInputFormat.setInputPaths(job). This is pretty much all input formats store the input path.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478946", "body": "I think this could extend LzoBaseLoadFunc. LzoBaseLoadFunc is misnomer (it is not lzo specific), but has lot useful stuff commonly used in out loaders.\n\nIt is the LzoBaseStoreFunc, i think can go away, I was mistaken on our chat.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478954", "body": "actually once this class extends LzoBaseLoad func, this method can be removed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478971", "body": "I am not sure if this should deprecated. JsonLoader is not drop in replacement.\n `.. using LzoJsonLoader` is so much better than `using JsonLoader('com.twitter.elephantbird.mapreduce.input.LzoInputFormat')`\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/478971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/481045", "body": "could use incrCounter() from base class.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/481045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/481050", "body": "LzoBase does this. you can rename reader_ there to 'reader' if you like :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/481050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/481057", "body": "This could just return (InputFormat) PigContext.resolveClassName(inputFormatName).newInstance();\nresolveClassName throws only IOException.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/481057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/524147", "body": "looked at the other changes that moves ensureUDFContext() to Loader, but not used in Loader. Is that part required?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/524147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/524327", "body": "new pull is not required. you could just update this patch. I will merge appropriately.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/524327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/543935", "body": "It is possible empty record is a valid record, say if we were storing lines from a file. But for Protobufs and Thrift, it is never valid.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/543935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/543944", "body": "for this class these are just blobs (term is used in SerializedBlock), but for users they are 'records'. I will both to records.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/543944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617193", "body": "we shouldn't need any RecordReaders.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617247", "body": "now that it reuses the recordreader, it should not ignore these exceptions anymore. A file with lots or errors should result in an error.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617833", "body": "This should not be the case. Pig loader (ThriftPigLoader) does not loop. Of course, the loop here does not harm.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624078", "body": "yes, will be removed here once he merges master.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626498", "body": "'map' name may be problematic. e.g. following line results in an error : \n`a = load 'a.txt' as (map : [chararray]);`\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626605", "body": "or 'json'?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/627450", "body": "thanks for the PigServer test. \nbeing able to inject a in-memory relation would be nice (a case for TestPigServer). I would be very surprised if that is possible now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/627450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/649098", "body": "javadoc?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/649098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/649105", "body": "why is  this check required?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/649105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/658263", "body": ":). yeah, I included it just for comparison.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/658263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662516", "body": "I will remove it (since there are other API changes in this release).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662575", "body": "Once there these are used more widely we will add this to MultiInputFormat. need to enhance MultiInputFormat to handle more formats. currently it reads lzo files. Apart from this, the loaders add following functionality :\n1. takes advantage of a short cut where the recordreader directly returns a Pig tuple. skips creating intermediate thrift/protobuf object.\n2. sets required field list for RCFile inputformat (this could be pushed to generic loader). \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662676", "body": "updated the javadoc with an example. The unknown fields is relevant at OutputFormat level (Pig tuple can't carry these).\nI think we can support these for thrift as well. I will have a another patch for that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/648111", "body": "positive test is better (isNestedLoadEnabled). I think default should be disabled (for now).\nAnother alternative is to have 'NestedJsonLoader()' which just extends JsonLoader.\nworking through pig properties is not very convenient for many users. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/648111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/648113", "body": "positive test is better rather than '! isNestedLoadDisabled'\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/648113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/648124", "body": "'fields' should be applied only for top level json?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/648124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/648129", "body": "format better?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/648129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/656864", "body": "hmm.. that might surprise many users. How much memory do you save? The full json is already parsed and loaded into memory. only savings you is avoiding tuple wrapping of arrays?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/656864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657089", "body": "makes sense. \nso if you want to get field called 'X' five levels down, you should give all its parents right? (say A, B, C, D).\nPlease document this.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657253", "body": "thanks. Let us know one this is ready to go.\nbtw, you could skip map copy in the common case where no fields are set.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/658262", "body": "thanks. will get this into 2.2.0.\n\nthese options are visible in a pig script. shorter the, better. how about\n '-nestedLoad=true|false' & '-fields=fields'\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/658262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/666554", "body": "looks nice. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/666554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/666571", "body": "my vote is for (1) and field filtering could be added in another pull.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/666571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/666600", "body": "two arguments is iffy. e.g. if you just want to enable -nestedLoading, you also need to specify 'org.apache.hadoop.mapreduce.input.TextInputForamt'.\nwe can move input format also to arguments (-inputFormat). '-inputFormat' will be rarely used.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/666600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667052", "body": "The single arg constructor was added only recently, we can break that.\n\nEven if you add single arg constructor, user still needs to specify long inputFormat name even if she just wants to control 'nestedLoadEnabled'. It kind of forces user to specify unnecessary implementation.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667083", "body": "as discussed above, this would force the user to specify TextInputFormat.class even to enabled nested. We can fold this arg also into options string.\nThis was added recently and can be broken, I think. As far as I know not used outside.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667634", "body": "agreed. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/673373", "body": "may be we can mention that 'ant -p' lists the available targets including 'fatjar'?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/673373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/727948", "body": "there is already a debug message above.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/727948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/728014", "body": "please add documentation here, otherwise it is not simple to see the intent. As I understand it :\n\n\"for the the first record returned, pos_ should be 0 if the recordreader is reading the first split, otherwise it should be end of current lzo block.\n This makes pos_ consistent with LzoBinaryB64LineRecordReader\"\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/728014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/782499", "body": "it is formatted. looks quite pretty :) \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/782499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/782539", "body": "Each pig loader would set the config appropriately. In this current use case RCFileProtobufInputFormat directly extends this class, so this conf is not used at all.\n\nThe config limitation applies only to MR jobs. If an MR job does need to use multiple input formats in the same mapper, it need to define one or more InputFormat classes that extend the wrapper class (like RCFileProtobufInputFormat). There is no way to get around the config limitation since MR does not provide a way to keep context.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/782539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/828401", "body": "this will still cause an issue if a user passes some other Reporter that is not Reporter.NULL.\n\nCan you paste here how you are invoking getRecordReader()?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/828401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/828413", "body": "this can cause NPEs too.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/828413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832306", "body": "will check if it is available. \nalso, does EB show up to external projects as depending on thrift-test? It should not, since it is required only for our tests.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/834613", "body": "copied Fixtures.java and dome DebugProtoTest.thrift from thrift (retained the licence and added a comment about there this copied from).\nThis is even better since we would codegen using the current thrift compiler, rather than always using 0.5.0 compiled classes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/834613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862840", "body": "That does not seem right. If this used as real recordReader, cascading should have access to the reporter created by MR. will look at where this is done in cascading.. I am not that familiar with it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862865", "body": "the caller might not read the counters, but the underlying record reader does not know that. Presumably you would want this to work with any inputformats and recordreadears...\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/870025", "body": "my eclipse does not like \"rawtypes\" apparently javac does not support it either.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/870025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/870739", "body": "my eclipse is pretty old. will merge this now.. will see if this issue comes up again.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/870739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/473676", "body": "could you remove all these 'auto reorder imports' patches?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/473676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/473709", "body": "Please remove all the auto-reformat changes... There are lots of these.\nwhile you are at it, I would recommend disabling these auto stuff while saving.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/473709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474001", "body": "why does this need to be a set?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474871", "body": "What is this for? javaDoc missing?\nI would think this would just be a thin wrapper for protobuf.ExtensionRegistry\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474877", "body": "if this registry is unused, do we need this method? This has change has many ripple changes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474878", "body": "Same comment as singleFieldToSchema()\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474916", "body": "how is extensionRegistry used to return appropriate schema?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "johnynek": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/370", "title": "Fix cast exception in DeprecatedOutputFormatWrapper", "body": "There is a cast:\nhttps://github.com/kevinweil/elephant-bird/blob/master/core/src/main/java/com/twitter/elephantbird/mapred/output/DeprecatedOutputFormatWrapper.java#L100\n\nThat can fail:\norg.apache.hadoop.mapred.YarnChild.main(YarnChild.java:170) Caused by: java.lang.ClassCastException: org.apache.hadoop.mapred.Reporter$1 cannot be cast to org.apache.hadoop.mapreduce.StatusReporter at com.twitter.elephantbird.mapred.output.DeprecatedOutputFormatWrapper$RecordWriterWrapper.<init>(DeprecatedOutputFormatWrapper.java:98) at com.twitter.elephantbird.mapred.output.DeprecatedOutputFormatWrapper.getRecordWriter(DeprecatedOutputFormatWrapper.java:84) at cascading.tap.hadoop.io.TapOutputCollector.initialize(TapOutputCollector.java:102) at cascading.tap.hadoop.io.TapOutputCollector.<init>(TapOutputCollector.java:79) at cascading.tap.hadoop.io.TapOutputCollector.<init>(TapOutputCollector.java:68) at cascading.tap.hadoop.io.HadoopTupleEntrySchemeCollector.makeCollector(HadoopTupleEntrySchemeCollector.java:57) at cascading.tap.hadoop.io.HadoopTupleEntrySchemeCollector.<init>(HadoopTupleEntrySchemeCollector.java:49) at cascading.tap.hadoop.Hfs.openForWrite(Hfs.java:454) at cascading.tap.hadoop.Hfs.openForWrite(Hfs.java:91) at cascading.flow.hadoop.HadoopFlowProcess.openTrapForWrite(HadoopFlowProcess.java:289) at cascading.flow.stream.TrapHandler.getTrapCollector(TrapHandler.java:58) at cascading.flow.stream.TrapHandler.handleException(TrapHandler.java:131) at cascading.flow.stream.TrapHandler.handleException(TrapHandler.java:115) at cascading.flow.stream.ElementStage.handleException(ElementStage.java:134) at cascading.flow.stream.FunctionEachStage.receive(FunctionEachStage.java:103) at cascading.flow.stream.FunctionEachStage.receive(FunctionEachStage.java:39) at cascading.flow.stream.SourceStage.map(SourceStage.java:102) at cascading.flow.stream.SourceStage.run(SourceStage.java:58) at cascading.flow.hadoop.FlowMapper.run(FlowMapper.java:127) ... 7 more\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "codedecode01": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/363", "title": "Support for the json data validation against JSON Schema", "body": "I have a question, Is there any option to validate the json data against the JSON Schema file?\n\nI have a pig code for which the parsed output is failing with Class Cast Exception in Pig script after it reads the json row into map.\n\nIt fails while flattening the subsequent fields, with error.\n\n013-12-23 03:24:20,280 [main] INFO  org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher - Failed!\n2013-12-23 03:24:20,289 [main] ERROR org.apache.pig.tools.grunt.GruntParser - ERROR 1081: Cannot cast to map. Expected bytearray but received: bag\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sagemintblue": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/355", "title": "PigToThrift assumes input is Integer instead of Boolean for bool thrift fields", "body": "https://github.com/kevinweil/elephant-bird/blob/master/pig/src/main/java/com/twitter/elephantbird/pig/util/PigToThrift.java#L121\n\nThis is confusing, and likely an artifact of earlier pig versions not having an explicit boolean type.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/346", "title": "Update `ThriftBytesToTuple.outputSchema` to return more reliable tuple schema", "body": "https://issues.apache.org/jira/browse/PIG-3082\n\nClass `com.twitter.elephantbird.pig.piggybank.ThriftBytesToTuple` should report a more reliable tuple schema, instead of sticking all `FieldSchema`s directly within the Schema instance returned to caller.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/345", "title": "com.twitter.elephantbird.pig.piggybank.BytesToThriftTuple is unused", "body": "This class may be dead code, seeing as how we also have non-abstract class `com.twitter.elephantbird.pig.piggybank.ThriftBytesToTuple`\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/261", "title": "Extend PigToThrift to support thrift maps whose keys are not strings", "body": "We currently punt on conversion of pig maps to thrift maps when the thrift map key type is not string or enum. This could be improved with some changes to PigToThrift such that pig key strings are converted to the appropriate thrift key type.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1950463", "body": "Great! Thanks for all your help, Raghu.\n\ncommons-httpclient is used in unit tests to run PigServer in local\nmode. You'll run into class not found errors if it's left out,\nunfortunately.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1950463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2005984", "body": "Closing this now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2005984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2099606", "body": "I meant to submit this against eb-dev branch, but I guess github only supports pull requests against a project's primary branch? How can I fix this?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2099606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2099631", "body": "Ah, i see it now. I'll close this and reopen against eb-dev. Thanks for your patience.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2099631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2116255", "body": "Dmitriy, I took your advice re WritableConverter ctor arguments. The latest patch adds this, and cleans up unit tests.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2116255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2123541", "body": "Raghu, your suggestion is pretty close to what this changeset supports; To load data for a custom thrift class, pass the name of the class in to `SequenceFileLoader` as an extra argument; This argument is then given to `ThriftWritableConverter`'s constructor:\n\n```\npeeps = LOAD '$sequencefile' USING ...SequenceFileLoader (\n  '-c ...IntWritableConverter',\n  '-c ...ThriftWritableConverter com.twitter.thrift.Person'\n) AS (id: int, person: ());\n```\n\nThe `ThriftWritableConverter` instance used by the `SequenceFileLoader` now knows it's dealing with `ThriftWritable<Person>` instances (or some derived type).\n\nStoring data successfully is another story; `SequenceFile` header data encodes [only the base classnames](http://svn.apache.org/viewvc/hadoop/common/tags/release-0.20.2/src/core/org/apache/hadoop/io/SequenceFile.java?view=markup#l1462) of the `Writable` types supporting key and value data. If you were to use `ThriftWritable<T>` directly, the thrift type `T` would be lost:\n\n```\n-- this will succeed, but regular SequenceFile read mechanism will fail to deserialize Person data:\nSTORE peeps INTO '$sequencefile' USING ...SequenceFileStorage (\n  '-t ...IntWritable -c ...IntWritableConverter',\n  '-t ...ThriftWritable -c ...ThriftWritableConverter com.twitter.thrift.Person'\n);\n```\n\nThe simplest way around this issue is to subclass `ThriftWritable<T>` such that `T` is encoded directly in the subclass, e.g. `ThriftPersonWritable extends ThriftWritable<Person>`:\n\n```\n-- here, we substitute ThriftWritable with subclass ThriftPersonWritable which internally defines target thrift type Person:\nSTORE peeps INTO '$sequencefile' USING ...SequenceFileStorage (\n  '-t ...IntWritable -c ...IntWritableConverter',\n  '-t ...ThriftPersonWritable -c ...ThriftWritableConverter com.twitter.thrift.Person'\n);\n```\n\nA better solution might be to improve `SequenceFile`'s own handling of construction of `Writable` instances for deserialization of key and value data.\n\nCurrently, `Writable` instances are created during `SequenceFile` read by a [`Deserializer`](http://svn.apache.org/viewvc/hadoop/common/tags/release-0.20.2/src/core/org/apache/hadoop/io/serializer/Deserializer.java?view=markup). Default `Deserializer` impl for `Writable` types is [`WritableSerialization.WritableDeserializer`](http://svn.apache.org/viewvc/hadoop/common/tags/release-0.20.2/src/core/org/apache/hadoop/io/serializer/WritableSerialization.java?view=markup#l40) which uses `Writable` class to create new `Writable` instance with default ctor, and passes in Hadoop `Configuration` (if `Writable` class implements `Configurable`). Unfortunately, at that point, the `Deserializer` doesn't know if it's deserializing key or value data. In a situation where key and value `Writable` types are `ThriftWritable<T1>` and `ThriftWritable<T2>` respectively, the deserializer can't create an appropriate `ThriftWritable` instance, even if we were to encode `T1` and `T2` in configuration.\n\nIf `SequenceFile` were to expose some `Writable` factory API which allowed [`SequenceFile.Metadata`](http://svn.apache.org/viewvc/hadoop/common/tags/release-0.20.2/src/core/org/apache/hadoop/io/SequenceFile.java?view=markup#l676) to be passed into the factory, then we could do more interesting things here-- Use `Metadata` to record more information about `Writable` types when we first create the `SequenceFile`, then use this info within `Writable` factory impl to create an appropriate `Writable` instance for deserialization of data.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2123541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2125016", "body": "Raghu, thanks for reminding me of the `writable.setConverter(Person.class)` functionality! I have a few refinements to this branch I'd like to make in light of that. Please hold off on the merge-- I'll push another commit to this branch in another hour or so.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2125016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2125136", "body": "All set-- I've completed updates.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2125136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2130939", "body": "Hi Raghu,\n\nI'd like to support WritableConverter implementations which perform option parsing, similar to what SequenceFileLoader itself is doing. I'm thinking of changing the way SequenceFileLoader looks up a suitable WritableConverter constructor, such that if one or more argument strings are available for the WritableConverter, a ctor with `String... args` is used, instead of ctor with fixed number of `String` arguments.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2130939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2131182", "body": "This is needed for an upcoming Mahout `VectorWritableConverter` class. There are 5 optional arguments for this new `WritableConverter` implementation, and a `VectorWritableConverter(String[] args)` ctor makes a lot of sense there.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2131182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2138987", "body": "I like it. I'll work that in now and push an update here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2138987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2151138", "body": "Hi Raghu, I've got another pull request in the queue after this one-- Adds LongWritableConverter and cleans up a few more loose ends. If possible, I'd like to get this pull as well as that one into 2.0.9.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2151138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2374453", "body": "The last commit enables uses like the following, to store value-only SequenceFile data:\n\n```\nA = LOAD '$INPUT' AS (value: text)\nSTORE A INTO '$OUTPUT' USING ...SequenceFileStorage (\n  '-t ...NullWritable',\n  '-t ...Text -c ...TextConverter'\n);\n```\n\nAlso, when loading value (or key) only data, the proper schema is reflected by the loader:\n\n```\nA = LOAD '$INPUT' USING ...SequenceFileLoader (\n  '-c ...NullWritableConverter',\n  '-c ...TextConverter'\n);\nDESCRIBE A; -- {(value: chararray)}\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2374453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2408857", "body": "> I am assuming you have tested all these on real data.\n\nUnit tests include tests for explicit null key and value data, as well as unexpected null values. I haven't tested with larger data.\n\n> Does it also mean while storing, the relation should have only one column 'value'?\n\nDuring STORE eval, if either key or value type is NullWritable, only the first value in input tuples is used. I'm not sure I like this, and impl code is complicated by the fact that the tuple index of key and value data changes based on type configuration.. I'd be happy to rework so key index is always 0 and value index always 1, no matter the type config. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2408857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2409628", "body": "I'll make this change later today and push an update. Thanks for feedback!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2409628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2461224", "body": "I got myself into a lengthy refactoring session here, unfortunately; The last two commits first add a lot of new stuff, and then pair it down to a more manageable size for this branch. I may post another pull request to get your feedback on the new features.\n\nThe bulk of new stuff is inclusion of a `DefaultWritableConverter` impl, along with changes to `SequenceFileLoader` and `SequenceFileStorage` which allow `DefaultWritableConverter` to selection and instantiate a `WritableConverter` which best suits data type at runtime. This dramatically simplifies client use in cases where key, value types are simple (i.e. int, long, chararray, null):\n\n```\n-- read SequenceFile<IntWritable, Text> without args or schema\npair = LOAD '$INPUT' USING ...SequenceFileLoader();\nDESCRIBE pair; -- {(key: int, value: chararray)}\n\n-- write SequenceFile<IntWritable, Text> without args\nSTORE pair INTO '$OUTPUT' USING ...SequenceFileStorage();\n```\n\nAfter backing out `DefaultWritableConverter` and related changes, client use of `SequenceFileStorage` is still simplified from what it was: Specification of `Writable` type is unnecessary when using a `WritableConverter` which defines a default `Writable` type. For example:\n\n```\npair = LOAD '$INPUT' AS (key: int, value: chararray);\n\n-- store without using '-t MyWritableType' args\nSTORE pair INTO '$OUTPUT' USING ...SequenceFileStorage (\n  '-c ...IntWritableConverter',\n  '-c ...TextConverter'\n);\n```\n\nIn the case of a `WritableConverter` which does not specify a default `Writable` type, such as `GenericWritableConverter`, the type must still be specified manually:\n\n```\npair = LOAD '$INPUT' AS (key: int, value: bytearray);\n\n-- store without using '-t MyWritableType' args\nSTORE pair INTO '$OUTPUT' USING ...SequenceFileStorage (\n  '-c ...IntWritableConverter',\n  '-c ...GenericWritableConverter -t MyWritableType'\n);\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2461224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2461240", "body": "This feature is now covered by latest commits to https://github.com/kevinweil/elephant-bird/pull/89\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2461240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2463163", "body": "> It is up to you. I don't mind including DefaultWritableConverter here.\n\nI'd rather not include it at this time because I'm not happy with the consistency with which I can properly derive runtime data types during `LOAD` expression evaluation.\n\n> How do you figure out it is 'int, chararray\"?\n\nMore details are listed in [this commit message](https://github.com/sagemintblue/elephant-bird/commit/3e55fbf522ee2266fce8a5eb074d2177451ff014). Generally, on `LOAD`, I can deserialize key, value classes from the target `SequenceFile` data, if it exists. Unfortunately, if the data to be loaded is generated earlier in the same script, it doesn't yet exist when the front end queries the `LoadFunc` (`LoadMetadata`) for schema info. It'd be great it Pig communicated the `LOAD` expression's schema clause to the `LoadFunc`, but I believe this only happens during `LoadPushDown` evaluation.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2463163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2463181", "body": "> it would be better I don't need to specify the WritatableConverter for thrift and just the Thrift class, since the converter can be derived.\n\nThe prior `DefaultWritableConverter` would need to keep track of any extra arguments passed in, such as the name of a Thrift class, in order to support this. Doable, but as I mentioned, I'd prefer to hold off until I figure out a cleaner way to determine schema info during `LOAD`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2463181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2470302", "body": "> It does not seem to worry about the recently generated table. It just uses the 'location' passed in getSchema(). Is that affected by this issue too?\n\nIt should be affected, yes-- `getSchema(..)` is only called on pig front end during planning. If the target location is created earlier in the same script, it won't exist when `getSchema(..)` is called. Looking at source for [`PigStorageSchema`](http://javasourcecode.org/html/open-source/pig/pig-0.8.1/org/apache/pig/piggybank/storage/PigStorageSchema.java.html) and util class [`JsonMetadata`](http://javasourcecode.org/html/open-source/pig/pig-0.8.1/org/apache/pig/piggybank/storage/JsonMetadata.java.html), seems as though errors are logged and `getSchema(..)` returns null when no schema metadata can be found for the target location.\n\nHowever, if the input location is created earlier in the script via `PigStorageSchema`, then perhaps if [`StoreMetadata#storeSchema(..)`](http://pig.apache.org/docs/r0.8.1/api/org/apache/pig/StoreMetadata.html#storeSchema%28org.apache.pig.ResourceSchema, java.lang.String, org.apache.hadoop.mapreduce.Job%29) is also called on front end during planning (creating metadata for target location), then a subsequent `PigStorageSchema#getSchema(..)` would succeed. Unfortunately, I can't tell from docs when / where `StoreMetadata#storeSchema(..)` is called.\n\n> btw, I think most of the commit message belongs in code itself..\n\nAgreed. When I have time to push `DefaultWritableConverter` back in, I'll include the commit log description in its javadoc.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2470302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2473972", "body": "Raghu, anything more you'd like to see in this branch? I'm keen on getting this shipped as I'm blocking now on EB 2.0.9 release for some other work. Do you keep a regular release schedule for EB? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2473972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2474848", "body": "> This has already improved. Thrift classes don't need to specify ''-t com.twitter.elephantbird.mapreduce.io.ThriftWritable\"\n\nIndeed! Clients should be able to load Thrift data like this:\n\n```\npair = LOAD '$INPUT' USING ...SequenceFileStorage (\n  '-c ...IntWritableConverter',\n  '-c ...ThriftWritableConverter -- ...MyThriftType'\n);\n```\n\nNo need to additionally specify `-t ...ThriftWritable`, unless you're using deprecated derived type like `ThriftMyTypeWritable extends ThriftWritable<MyType>`.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2474848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2512646", "body": "My next branch will be named [wahffer_thin_sequence_file_storage_update](http://www.youtube.com/watch?NR=1&v=LFhDFDffd2Y).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2512646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3973929", "body": "@dmeister could I see the full stack trace? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3973929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3985136", "body": "Looks like the fix for #112 could have been placed a bit higher in the `SequenceFileStorage` class hierarchy. I'm cutting a branch with a possible fix for this now. I'll post back here when I've got something for you to test.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3985136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3985306", "body": "Looks like there's another use of `Class.forName` in `com.twitter.elephantbird.pig.piggybank.Invoker` which might need the same treatment.\n\n`com.twitter.elephantbird.pig.util.PigUtil` also calls `Class.forName(\"org.apache.pig.EvalFunc\")` but perhaps this use is okay?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3985306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3986689", "body": "So I decided to simply remove the precondition as I'm not sure the assumption is correct in all situations. Could you test with the following branch?:\n\nhttps://github.com/sagemintblue/elephant-bird/tree/hazen_remove_signature_is_null\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3986689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4003772", "body": "This looks like another issue I'm trying to debug right now.. Is your\nscript very long? Do you think you could include more context here?\n\nI'm looking specifically for the placement of your REGISTER statements.\n\nThanks,\n\nOn Thu, Feb 16, 2012 at 1:36 AM, Dirk Meister\nreply@reply.github.com\nwrote:\n\n> I not really sure if it is related, but this is the error I get now:\n> \n> \u00a0 \u00a0java.lang.RuntimeException: java.io.IOException: WritableName can't load class: \u00a0 com.twitter.elephantbird.mapreduce.io.ProtobufWritable\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.io.SequenceFile$Reader.getValueClass(SequenceFile.java:1622)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.io.SequenceFile$Reader.init(SequenceFile.java:1562)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.io.SequenceFile$Reader.<init>(SequenceFile.java:1435)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.io.SequenceFile$Reader.<init>(SequenceFile.java:1424)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.io.SequenceFile$Reader.<init>(SequenceFile.java:1419)\n> \u00a0 \u00a0 \u00a0 \u00a0at com.twitter.elephantbird.mapreduce.input.RawSequenceFileRecordReader.initialize(RawSequenceFileRecordReader.java:45)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.impl.io.ReadToEndLoader.initializeReader(ReadToEndLoader.java:174)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.impl.io.ReadToEndLoader.getNextHelper(ReadToEndLoader.java:209)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.impl.io.ReadToEndLoader.getNext(ReadToEndLoader.java:190)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getNext(POLoad.java:129)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.runPipeline(PigGenericMapBase.java:267)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.map(PigGenericMapBase.java:262)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.map(PigGenericMapBase.java:64)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:144)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.pen.LocalMapReduceSimulator.launchPig(LocalMapReduceSimulator.java:194)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.pen.ExampleGenerator.getData(ExampleGenerator.java:257)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.pen.ExampleGenerator.readBaseData(ExampleGenerator.java:222)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.pen.ExampleGenerator.getExamples(ExampleGenerator.java:154)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.PigServer.getExamples(PigServer.java:1245)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.tools.grunt.GruntParser.processIllustrate(GruntParser.java:698)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.tools.pigscript.parser.PigScriptParser.Illustrate(PigScriptParser.java:591)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.tools.pigscript.parser.PigScriptParser.parse(PigScriptParser.java:306)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:188)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:164)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.tools.grunt.Grunt.run(Grunt.java:69)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.Main.run(Main.java:495)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.pig.Main.main(Main.java:111)\n> \u00a0 \u00a0 \u00a0 \u00a0at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n> \u00a0 \u00a0 \u00a0 \u00a0at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n> \u00a0 \u00a0 \u00a0 \u00a0at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n> \u00a0 \u00a0 \u00a0 \u00a0at java.lang.reflect.Method.invoke(Method.java:601)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.util.RunJar.main(RunJar.java:156)\n> \u00a0 \u00a0Caused by: java.io.IOException: WritableName can't load class: com.twitter.elephantbird.mapreduce.io.ProtobufWritable\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.io.WritableName.getClass(WritableName.java:73)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.io.SequenceFile$Reader.getValueClass(SequenceFile.java:1620)\n> \u00a0 \u00a0 \u00a0 \u00a0... 31 more\n> \u00a0 \u00a0Caused by: java.lang.ClassNotFoundException: com.twitter.elephantbird.mapreduce.io.ProtobufWritable\n> \u00a0 \u00a0 \u00a0 \u00a0at java.net.URLClassLoader$1.run(URLClassLoader.java:366)\n> \u00a0 \u00a0 \u00a0 \u00a0at java.net.URLClassLoader$1.run(URLClassLoader.java:355)\n> \u00a0 \u00a0 \u00a0 \u00a0at java.security.AccessController.doPrivileged(Native Method)\n> \u00a0 \u00a0 \u00a0 \u00a0at java.net.URLClassLoader.findClass(URLClassLoader.java:354)\n> \u00a0 \u00a0 \u00a0 \u00a0at java.lang.ClassLoader.loadClass(ClassLoader.java:423)\n> \u00a0 \u00a0 \u00a0 \u00a0at java.lang.ClassLoader.loadClass(ClassLoader.java:356)\n> \u00a0 \u00a0 \u00a0 \u00a0at java.lang.Class.forName0(Native Method)\n> \u00a0 \u00a0 \u00a0 \u00a0at java.lang.Class.forName(Class.java:264)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.conf.Configuration.getClassByName(Configuration.java:819)\n> \u00a0 \u00a0 \u00a0 \u00a0at org.apache.hadoop.io.WritableName.getClass(WritableName.java:71)\n> \u00a0 \u00a0 \u00a0 \u00a0... 32 more\n> \n> It cannot find the class ProtobufWritable, but the elephant bird library is registered (it is also seen in the stack trace).\n> \n> PIG Script:\n> \u00a0 \u00a0DATA = load 'hdfs://XXX \u00a0USING com.twitter.elephantbird.pig.load.SequenceFileLoader (\n> \u00a0 \u00a0 \u00a0 '-c com.twitter.elephantbird.pig.util.TextConverter',\n> \u00a0 \u00a0ILLUSTRATE DATA;\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kevinweil/elephant-bird/issues/136#issuecomment-3997598\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4003772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4005912", "body": "Dirk, your first snippet seemed incomplete. I'll put what I have together here:\n\n```\nregister '../fs-c/*.jar'\nregister '../fs-c/lib/com.google.guava-guava-11.0.1.jar'\nregister '../fs-c/lib/com.google.guava-guava-bootstrap-11.0.1.jar'\nregister '../fs-c/lib/protobuf-java-2.3.0.jar'\nregister '../fs-c/lib/elephant-bird-2.1.8.jar'\n\nDATA = load 'hdfs://XXX' USING\ncom.twitter.elephantbird.pig.load.SequenceFileLoader (\n  '-c com.twitter.elephantbird.pig.util.TextConverter',\n  ??? -- what argument string did you specify here?\n);\n\nILLUSTRATE DATA;\n```\n\nOn Thu, Feb 16, 2012 at 9:56 AM, Dirk Meister\nreply@reply.github.com\nwrote:\n\n> This is the comple script before the LOAD/ILLUSTRATE:\n> \n> \u00a0 \u00a0register '../fs-c/*.jar'\n> \u00a0 \u00a0register '../fs-c/lib/com.google.guava-guava-11.0.1.jar'\n> \u00a0 \u00a0register '../fs-c/lib/com.google.guava-guava-bootstrap-11.0.1.jar'\n> \u00a0 \u00a0register '../fs-c/lib/protobuf-java-2.3.0.jar'\n> \u00a0 \u00a0register '../fs-c/lib/elephant-bird-2.1.8.jar'\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kevinweil/elephant-bird/issues/136#issuecomment-4005771\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4005912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4005942", "body": "Nevermind. Github just cut it out of its email notification. I see it in your comment above.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4005942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106037", "body": "On Mon, Aug 29, 2011 at 2:13 PM, rangadi\nreply@reply.github.com\nwrote:\n\n> > - \u00a0 \u00a0 \u00a0 \u00a0default:\n> > - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// TODO fix Pig's silent ignorance of FrontendExceptions thrown from here\n> > - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new FrontendException(\"Expected field indices in [0, 1] but found index \" + i);\n> > - \u00a0 \u00a0 \u00a0}\n> > - \u00a0 \u00a0}\n> > - \u00a0 \u00a0setContextProperty(READ_KEY_PARAM, Boolean.toString(readKey));\n> > - \u00a0 \u00a0setContextProperty(READ_VALUE_PARAM, Boolean.toString(readValue));\n> > - \u00a0 \u00a0return new RequiredFieldResponse(true);\n> > - \u00a0}\n> >   +\n> > - \u00a0@Override\n> > - \u00a0public void setLocation(String location, Job job) throws IOException {\n> > - \u00a0 \u00a0Preconditions.checkNotNull(location, \"Location is null\");\n> > - \u00a0 \u00a0Preconditions.checkNotNull(location, \"Job is null\");\n> > - \u00a0 \u00a0FileInputFormat.setInputPaths(job, new Path(location));\n> > - \u00a0 \u00a0readKey = Boolean.parseBoolean(getContextProperty(READ_KEY_PARAM, \"true\"));\n> \n> these properties can be removed since Pig projection will read only the required fields.\n\nCould you clarify? Pig signals LoadFunc impls to optimize their\nbehavior based on required projection. These properties support\nimplementation of that optimization in SequenceFileLoader. If I remove\nthem, unnecessary Writable deserialization will take place during\nprojection.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106039", "body": "On Mon, Aug 29, 2011 at 2:29 PM, rangadi\nreply@reply.github.com\nwrote:\n\n> > - \u00a0 \u00a0 \u00a0 \u00a0default:\n> > - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// TODO fix Pig's silent ignorance of FrontendExceptions thrown from here\n> > - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new FrontendException(\"Expected field indices in [0, 1] but found index \" + i);\n> > - \u00a0 \u00a0 \u00a0}\n> > - \u00a0 \u00a0}\n> > - \u00a0 \u00a0setContextProperty(READ_KEY_PARAM, Boolean.toString(readKey));\n> > - \u00a0 \u00a0setContextProperty(READ_VALUE_PARAM, Boolean.toString(readValue));\n> > - \u00a0 \u00a0return new RequiredFieldResponse(true);\n> > - \u00a0}\n> >   +\n> > - \u00a0@Override\n> > - \u00a0public void setLocation(String location, Job job) throws IOException {\n> > - \u00a0 \u00a0Preconditions.checkNotNull(location, \"Location is null\");\n> > - \u00a0 \u00a0Preconditions.checkNotNull(location, \"Job is null\");\n> > - \u00a0 \u00a0FileInputFormat.setInputPaths(job, new Path(location));\n> > - \u00a0 \u00a0readKey = Boolean.parseBoolean(getContextProperty(READ_KEY_PARAM, \"true\"));\n> \n> scratch the above. these are context properties not pig config properties.\n\nGot it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106040", "body": "On Mon, Aug 29, 2011 at 2:05 PM, rangadi\nreply@reply.github.com\nwrote:\n\n> > - \u00a0private final DataInputBuffer kibuf = new DataInputBuffer();\n> > - \u00a0private final DataInputBuffer vibuf = new DataInputBuffer();\n> > - \u00a0private FileSplit fileSplit;\n> > - \u00a0private SequenceFile.Reader reader;\n> > - \u00a0private ValueBytes vbytes;\n> > - \u00a0private boolean more, valueUncompressed;\n> >   +\n> > - \u00a0@Override\n> > - \u00a0public void initialize(InputSplit inputSplit, TaskAttemptContext context) throws IOException,\n> > - \u00a0 \u00a0 \u00a0InterruptedException {\n> > - \u00a0 \u00a0Preconditions.checkNotNull(inputSplit, \"InputSplit is null\");\n> > - \u00a0 \u00a0Preconditions.checkNotNull(context, \"TaskAttemptContext is null\");\n> > - \u00a0 \u00a0Configuration conf = context.getConfiguration();\n> > - \u00a0 \u00a0this.fileSplit = (FileSplit) inputSplit;\n> > - \u00a0 \u00a0Path path = this.fileSplit.getPath();\n> > - \u00a0 \u00a0this.reader = new SequenceFile.Reader(FileSystem.get(conf), path, conf);\n> \n> How are splits handled? this should take split start and end into account?\n\nI think you're right. Look for an update soon...\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106222", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106224", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106227", "body": "\"-i\" option removed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106232", "body": "You mean LoadMetadata#getSchema()? I hadn't planned on implementing LoadMetadata in SequenceFileLoader. Should this be added before inclusion of this branch?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106367", "body": "I've added basic LoadMetadata support to SequenceFileLoader with latest commit to this branch.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/106367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/107163", "body": "No problem. Let me know if the additions to converters and\nSequenceFileLoader look okay. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/107163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165776", "body": "When used in a LOAD expression, WritableConverter#initialize will be passed a null value for writableClass:\n\nhttps://github.com/kevinweil/elephant-bird/blob/master/src/java/com/twitter/elephantbird/pig/util/WritableConverter.java#L26\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165778", "body": "Here's the code in SequenceFileLoader which passes null:\n\nhttps://github.com/kevinweil/elephant-bird/blob/master/src/java/com/twitter/elephantbird/pig/load/SequenceFileLoader.java#L363\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/171824", "body": "Ah, good to know, though the situation in which this would get called frequently doesn't yet exist:\n\nYou'd need some WritableConverter impl which handles conversion of a collection (or structure) containing ThriftWritable instances, requiring the \"newInstance\" flag be set to true during creation of (possibly many) ThriftWritable instances for a single output. I think this use case is very unlikely.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/171824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/171956", "body": "> I think this use case is very unlikely.\n\nIn fact, I'd like to modify the protected API entry points within [WritableStoreCaster](https://github.com/sagemintblue/elephant-bird/blob/master/src/java/com/twitter/elephantbird/pig/util/WritableStoreCaster.java#L77) to remove the `newInstance` flag completely. I think my original motivation was misguided.. Composition of Writable objects seems unnecessary, especially when you can use something like Thrift or Protobuf to generate arbitrarily composed structs.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/171956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165032", "body": "Ah! I had thought I couldn't get at the counters from that method. Are they accessible via UDFContext?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165047", "body": "Good point about value-only (or key-only) SequenceFile output. For these cases we could require the user to explicitly request Writable type 'NullWritable'. How does that sound?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165079", "body": "Null values in SequenceFiles are not supported unless you explicitly use NullWritable for key or value type. Then, all keys / values must be null.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/509803", "body": "This is the important line. Other changes are aesthetics only.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/509803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/524183", "body": "I had tried to use ensureUDFContext() within Loader, but this is only useful if Loader can reliably grab the job Configuration. This isn't always the case when getContextProperties() is called, so I removed use of ensureUDFContext(), but left the definition there.\n\nIf you'd like I can create a new pull request which only removes this line.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/524183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626550", "body": "I'll rewrite pig's parser one of these days. Mean time, I'll change the default alias to... `m`?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626614", "body": "I like it. I'll update, and add a \"real\" unit test which execs the udf within pig runtime.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626643", "body": "Was curious; Is there any way to programmatically inject into PigServer instance a relation (DataBag) you build manually, without having to invoke a LoadFunc?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/626643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/663350", "body": "Utility also lies with the specification of the conventional name of the protobuf generated static `getDescriptor` method. No similar util method seems to be exposed within protobuf APIs which defines this name, besides the javadoc for the `Descriptors` class.\n\nI'll clarify this in the javadoc.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/663350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/663351", "body": "`getProtobufClass` seems to be correct here-- it first attempts `PigContext.resolveClassName` then backs off to `Protobufs.getProtobufClass` on failure.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/663351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736287", "body": "Is this safe to use in non-MR context?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736301", "body": "What if a user adds this option within key arguments string?\n\nThe ctor should accept three strings and parse non key/value related options from the third option.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736477", "body": "Thanks! An extra ctor was bound to be added at some point to support non-key/val specific options. Just make the existing two arg ctor delegate to the three arg one and pass along an empty string so existing clients don't break.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/870131", "body": "What version of java / eclipse are you using? I'm running:\n\nEclipse Java EE IDE for Web Developers\nVersion: Indigo Service Release 2\nBuild id: 20120216-1857\n\njava.runtime.name=Java(TM) SE Runtime Environment\njava.runtime.version=1.6.0_31-b04-415-11M3635\njava.specification.name=Java Platform API Specification\njava.specification.vendor=Sun Microsystems Inc.\njava.specification.version=1.6\njava.vendor=Apple Inc.\njava.vendor.url=http://www.apple.com/\njava.vendor.url.bug=http://bugreport.apple.com/\njava.version=1.6.0_31\njava.vm.info=mixed mode\njava.vm.name=Java HotSpot(TM) 64-Bit Server VM\njava.vm.specification.name=Java Virtual Machine Specification\njava.vm.specification.vendor=Sun Microsystems Inc.\njava.vm.specification.version=1.0\njava.vm.vendor=Apple Inc.\njava.vm.version=20.6-b01-415\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/870131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/870136", "body": "I get no warnings / errors from ant either:\n\n[ivy:retrieve] :: retrieving :: com.twitter#elephant-bird [sync]\n[ivy:retrieve]  confs: [compile, test]\n[ivy:retrieve]  103 artifacts copied, 0 already retrieved (44212kB/266ms)\n\ngenerate-protobuf:\n     [exec] Result: 1\n    [apply] Applied protoc to 4 files and 0 directories.\n\ncompile:\n    [javac] /Users/hazen/workspace/elephant-bird/build.xml:85: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds\n    [javac] Compiling 4 source files to /Users/hazen/workspace/elephant-bird/build/classes\n    [javac] /Users/hazen/workspace/elephant-bird/build.xml:85: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds\n    [javac] Compiling 165 source files to /Users/hazen/workspace/elephant-bird/build/classes\n    [javac] Note: Some input files use or override a deprecated API.\n    [javac] Note: Recompile with -Xlint:deprecation for details.\n    [javac] Note: Some input files use unchecked or unsafe operations.\n    [javac] Note: Recompile with -Xlint:unchecked for details.\n\nBUILD SUCCESSFUL\nTotal time: 13 seconds\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/870136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832221", "body": "Add parent info? We can configure dependency management in parent pom.xml to simplify dependency version management and other build plugins across all sub modules that way.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832430", "body": "Yes, we can specify all dependency version info in parent pom.xml within dependencyManagement section. Also, if each sub module pom.xml contains parent section, we can leave off the sub module's groupId and version elements.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832469", "body": "Definitely. If not a sub module here, I'll eventually migrate the Mahout-Pig stuff into a sub module of Mahout itself.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856129", "body": "May also want <relativePath> element in here and in other submodule pom.xmls:\n\nhttp://maven.apache.org/pom.html#Inheritance\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856136", "body": "Jar is default packaging; can be left out if you like.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856144", "body": "May want to move any repo config, plugin or otherwise, to parent pom.xml\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856151", "body": "This should be moved to build config of parent pom.xml-- I'm guessing the same config is used by all submodules.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856166", "body": "May want to add dependencyManagement and pluginManagement sections so we can standardize Maven plugin versions and centralize dependency versions.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856456", "body": "Looks like github filtered out the html element from my earlier comment :(\n\nI was referring to parent/relativePath element, which just points submodule to directory containing parent pom.xml if it's likely to be close by. Generally, this is just \"..\".\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856466", "body": "Oh, I had meant to tag the maven-release-plugin config below this line. Sorry for confusion.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "amalhotra": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/349", "title": "Protobug + hive + empty partitions", "body": "[HIVE-4175](https://issues.apache.org/jira/browse/HIVE-4175?focusedCommentId=13794522&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13794522) provides a gist of the issue on the hive side. I'm not sure if and when this will be solved.\n\nOn the Elephant Bird side, its a simple ClassCastException coming out from [ProtobufDeserializer.java](https://github.com/kevinweil/elephant-bird/blob/master/hive/src/main/java/com/twitter/elephantbird/hive/serde/ProtobufDeserializer.java#L56)\n\nCan we patch this on our elephant-bird's end till hive pushes a fix? Open to suggestions and pushing the fix.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timjurka": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/336", "title": "VectorWritableConverter Does Not Work with Latest Version of Mahout", "body": "When using mahout-core-0.9-SNAPSHOT-job.jar, I get the error below. The job completes without errors when using mahout-core-0.6-job.jar. \n\n```\n2013-08-15 23:36:30,762 FATAL org.apache.hadoop.mapred.Child: Error running child : java.lang.NoSuchMethodError: org.apache.mahout.math.Vector.iterator()Ljava/util/Iterator;\n    at com.twitter.elephantbird.pig.mahout.VectorWritableConverter.toDenseVectorTuple(VectorWritableConverter.java:312)\n    at com.twitter.elephantbird.pig.mahout.VectorWritableConverter.toTuple(VectorWritableConverter.java:296)\n    at com.twitter.elephantbird.pig.mahout.VectorWritableConverter.toTuple(VectorWritableConverter.java:131)\n    at com.twitter.elephantbird.pig.util.WritableLoadCaster.bytesToTuple(WritableLoadCaster.java:87)\n    at com.twitter.elephantbird.pig.mahout.VectorWritableConverter.bytesToObject(VectorWritableConverter.java:272)\n    at com.twitter.elephantbird.pig.load.SequenceFileLoader.getCurrentValueObject(SequenceFileLoader.java:518)\n    at com.twitter.elephantbird.pig.load.SequenceFileLoader.getNext(SequenceFileLoader.java:481)\n    at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.nextKeyValue(PigRecordReader.java:194)\n    at org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.nextKeyValue(MapTask.java:532)\n    at org.apache.hadoop.mapreduce.MapContext.nextKeyValue(MapContext.java:67)\n    at org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:143)\n    at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:764)\n    at org.apache.hadoop.mapred.MapTask.run(MapTask.java:370)\n    at org.apache.hadoop.mapred.Child$4.run(Child.java:255)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at javax.security.auth.Subject.doAs(Subject.java:396)\n    at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1121)\n    at org.apache.hadoop.mapred.Child.main(Child.java:249)\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonathanikpeazu": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/333", "title": "Compile failure: cannot find hadoop-compat/target/classes directory", "body": "I followed the first 2 instructions in the Quickstart section of the Readme. When I run `mvn package -Dprotobuf.version=2.3.0`, I get the following error: \n\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project elephant-bird-hadoop-compat: Compilation failure\n[ERROR] Failure executing javac, but could not parse the error:\n[ERROR] javac: directory not found: /Users/Johno/Downloads/elephant-bird-download/hadoop-compat/target/classes\n...\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rore": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/319", "title": "InputFormat wrapper doesn't work on CDH4", "body": "Trying to use DeprecatedInputFormatWrapper on CDH4, getting the following exception:\njava.lang.NoSuchMethodException: org.apache.hadoop.mapreduce.TaskAttemptContext.getCounter(java.lang.String, java.lang.String)\n    at java.lang.Class.getMethod(Class.java:1624)\n    at com.twitter.elephantbird.util.HadoopCompat.<clinit>(HadoopCompat.java:127)\n\nTaskAttemptContext doesn't contain a getCounter method.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hobbes203": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/318", "title": "Updated Read Me", "body": "I had trouble building Elephant Bird pig, the test compile would fail. I was using Java 6 JRE and switched to Java 7 JRE. I am unsure if Java 6 JRE is supported, but, in my case, Java 7 solved the problem.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ddaniels888": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/309", "title": "LZO Index file save fails with FileNotFoundException on S3 filesystem", "body": "On EMR (and other S3-backed hadoop file systems), the underlying S3 file system is eventually consistent, so doing an ls immediately after a write can fail to find the just-written file.\n\nThis was happening for us in the Lzo indexing process.  LzoUtils was trying to read the LZO file to determine it's size in  https://github.com/kevinweil/elephant-bird/blob/master/core/src/main/java/com/twitter/elephantbird/util/LzoUtils.java#L89 .  The LZO file has just been saved, so when LzoUtils calls `fs.getFileStatus(..)`, it receives a FileNotFoundException.\n\nThis is particularly bad, since the LZO file actually did get saved, and will appear very shortly.  The exception fails the task, but hadoop doesn't see that any files have yet been written, so it does no cleanup.  All succeeding tasks that are restarted then fail, as their output file actually does exist, which in turn fails your whole MapReduce job.\n\nOur fix was to wrap the ls in retries, which fixes the issue.  Not sure if you'll want this at twitter since you don't run against S3, but we'll post the fix in case anyone else needs it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/310", "title": "Retry file status (ls) operations, which can fail with FileNotFound due to eventual consistency in S3", "body": "Fixes issue #309.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "christopheclc": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/307", "title": "Return null instead of the default value to Pig when the Protobuf field is not present", "body": "If I have a protobuf message with an integer field that is not present, Pig should see it as being null instead of 0.  Otherwise, we suffer from a loss of information. The aggregate functions in Pig won't behave as most people would expect them to, for example.  If I use AVG(myInt) for example, and I have 3 rows such that one doesn't have myInt set, one has myInt set to 0, one has myInt set to 2, I would expect the result of the average to be 1.  However, it will instead be 2/3 = 0.66...\n\nI believe the code in ProtobufToPig.java's toTuple method should contain something like this instead of what it does now:\n\nObject fieldValue = null;\n        if (msg.hasField(fieldDescriptor)) {\n          fieldValue = msg.getField(fieldDescriptor);\n        }\n\nWhat it contains now is just:\nObject fieldValue = msg.getField(fieldDescriptor);\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kendaleiv": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/306", "title": "Version requirements documentation for Protocol Buffers requires updates?", "body": "https://github.com/kevinweil/elephant-bird#version-compatibility:\n\"Protocol Buffers 2.3.0, 2.4.1\"\n\nhttps://github.com/kevinweil/elephant-bird#protocol-buffer-and-thrift-compiler-dependencies\n\"Elephant Bird requires Protocol Buffer compiler version 2.3 at build time, as generated classes are used internally.\"\n\nIt seems to require 2.4.1 when I invoke `mvn package`:\n\n```\n[INFO] Protobuf dependency version 2.4.1\n[INFO] 'protoc' executable version 2.3.0\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/416", "title": "Improve nested JSON pig examples", "body": "Unsure when `elephant-bird-hadoop-compat.jar` is actually required. The Hortonworks Sandbox 2.1 seems to require it, anyhow.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Downchuck": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/299", "title": "Implement data locality in lucene splits", "body": "The allocation of splits to available nodes may benefit from testing data locality; mainly, repeated searches would result in the same shards being run on the same nodes (or group of nodes) in the cluster, reducing network overhead.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joaosal": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/264", "title": "Parsing JSON error", "body": "Hi All,\n\nSomeone can tell me what I am doing wrong\n\nI just compile the elephant-bird on an EC2 instance. why the class is not found...after doing \"mvn package\" it should just work.....\n\nAny ideas...please\n\ngrunt> register file:/home/hadoop/elephant-bird/pig/target/elephant-bird-pig-3.0.4-SNAPSHOT.jar;\ngrunt> raw_events = load 'hdfs://10.244.29.201:9000/user/hadoop/test/abc.json' using com.twitter.elephantbird.pig.load.JsonLoader() as (json:map[]);\n2012-10-17 12:30:08,761 [main] ERROR org.apache.pig.tools.grunt.Grunt - ERROR 2998: Unhandled internal error. org/json/simple/parser/ParseException\nDetails at logfile: /home/hadoop/pig_1350476952551.log\ngrunt> quit;\nhadoop@ip-10-244-29-201:~$ less /home/hadoop/pig_1350476952551.log\n## Pig Stack Trace\n\nERROR 2998: Unhandled internal error. org/json/simple/parser/ParseException\n\njava.lang.NoClassDefFoundError: org/json/simple/parser/ParseException\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:247)\n        at org.apache.pig.impl.PigContext.resolveClassName(PigContext.java:457)\n        at org.apache.pig.impl.PigContext.instantiateFuncFromSpec(PigContext.java:487)\n        at org.apache.pig.parser.LogicalPlanBuilder.validateFuncSpec(LogicalPlanBuilder.java:723)\n        at org.apache.pig.parser.LogicalPlanBuilder.buildFuncSpec(LogicalPlanBuilder.java:712)\n        at org.apache.pig.parser.LogicalPlanGenerator.func_clause(LogicalPlanGenerator.java:4374)\n        at org.apache.pig.parser.LogicalPlanGenerator.load_clause(LogicalPlanGenerator.java:2906)\n        at org.apache.pig.parser.LogicalPlanGenerator.op_clause(LogicalPlanGenerator.java:1082)\n        at org.apache.pig.parser.LogicalPlanGenerator.general_statement(LogicalPlanGenerator.java:687)\n        at org.apache.pig.parser.LogicalPlanGenerator.statement(LogicalPlanGenerator.java:487)\n        at org.apache.pig.parser.LogicalPlanGenerator.query(LogicalPlanGenerator.java:373)\n        at org.apache.pig.parser.QueryParserDriver.parse(QueryParserDriver.java:171)\n        at org.apache.pig.PigServer$Graph.validateQuery(PigServer.java:1608)\n        at org.apache.pig.PigServer$Graph.registerQuery(PigServer.java:1581)\n        at org.apache.pig.PigServer.registerQuery(PigServer.java:583)\n        at org.apache.pig.tools.grunt.GruntParser.processPig(GruntParser.java:966)\n        at org.apache.pig.tools.pigscript.parser.PigScriptParser.parse(PigScriptParser.java:386)\n        at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:189)\n        at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:165)\n        at org.apache.pig.tools.grunt.Grunt.run(Grunt.java:69)\n        at org.apache.pig.Main.run(Main.java:500)\n        at org.apache.pig.Main.main(Main.java:114)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.hadoop.util.RunJar.main(RunJar.java:187)\nCaused by: java.lang.ClassNotFoundException: org.json.simple.parser.ParseException\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:202)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n#         ... 28 more\n\n/home/hadoop/pig_1350476952551.log (END) \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/240", "title": "Creating error ", "body": "$ git clone git://github.com/a-b/elephant-bird.git\nCloning into elephant-bird...\nremote: Counting objects: 11298, done.\nremote: Compressing objects: 100% (2235/2235), done.\nremote: Total 11298 (delta 8165), reused 10893 (delta 7875)\nReceiving objects: 100% (11298/11298), 45.22 MiB | 3.39 MiB/s, done.\nResolving deltas: 100% (8165/8165), done.\n\nelephant-bird$ ant\nBuildfile: /home/hadoop/git/elephant-bird/build.xml\n\nrelease:\n     [echo] Building in release mode...\n\ninit:\n    [mkdir] Created dir: /home/hadoop/git/elephant-bird/build\n    [mkdir] Created dir: /home/hadoop/git/elephant-bird/build/classes\n    [mkdir] Created dir: /home/hadoop/git/elephant-bird/build/test\n\ncompile-protobuf:\n\nBUILD FAILED\n/home/hadoop/git/elephant-bird/build.xml:182: The following error occurred while executing this line:\n/home/hadoop/git/elephant-bird/build.xml:146: Execute failed: java.io.IOException: Cannot run program \"thrift\": java.io.IOException: error=2, No such file or directory\n    at java.lang.ProcessBuilder.start(ProcessBuilder.java:460)\n    at java.lang.Runtime.exec(Runtime.java:593)\n    at org.apache.tools.ant.taskdefs.Execute$Java13CommandLauncher.exec(Execute.java:827)\n    at org.apache.tools.ant.taskdefs.Execute.launch(Execute.java:445)\n    at org.apache.tools.ant.taskdefs.Execute.execute(Execute.java:459)\n    at org.apache.tools.ant.taskdefs.ExecTask.runExecute(ExecTask.java:635)\n    at org.apache.tools.ant.taskdefs.ExecTask.runExec(ExecTask.java:676)\n    at org.apache.tools.ant.taskdefs.ExecTask.execute(ExecTask.java:502)\n    at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n    at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    at org.apache.tools.ant.Task.perform(Task.java:348)\n    at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68)\n    at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n    at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    at org.apache.tools.ant.Task.perform(Task.java:348)\n    at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "billonahill": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/249", "title": "Update ThriftToDynamicProto and ProtobufsUtils to support nested structures", "body": "I'm working on support for nested structures.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236049", "body": "I'm not sure what you mean by info always being enabled. If an EB user sets their log verbosity to ERROR, how would INFO be enabled?\n\nThe isEnabled check is there as a best practice to avoid unnecessary string creation in production, when the verbosity is set higher than the LOG.foo() call.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236189", "body": "Good call. Maying that change now and will re-submit.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236210", "body": "Good call, updating log messaging.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/236210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wouterdebie": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/192", "title": "JsonStringToMap doesn't parse output schema", "body": "Hi!\n\nI've just found an issue using JsonStringToMap on PIG 0.8.1. The schema `\"json: [chararray]\"` throws a `ParseException`.\nThe following works on PIG 0.8.1:\n\n```\nreturn Utils.getSchemaFromString(\"json: []\", DataType.CHARARRAY);\n```\n\nThis seems related to https://issues.apache.org/jira/browse/PIG-1985?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13017764#comment-13017764\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "traviscrawford": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/158", "title": "json handling improvements", "body": "JSON is currently handled a little weird. Pig can read json from any file input format, however, map reduce jobs can only read json from lzo files. Additionally, parsing is done a little different in both places.\n\nI think the ideal situation would be a json input format that wraps a given actual input format, converting each valid value to json. The json pig loader would simply use the json input format, and convert each record into a tuple (rather than parsing records into json like it does today).\n\nThoughts? I think it would be cool to separate the app data format (pig tuple), from the storage record format (json) from the file format (lzo compressed file) so users can mix & match as they see fit. For example, there's no reason why someone who wants to compress files with snappy shouldn't be able to use the json & pig layers.\n\nI started playing around with this idea in the recent json loader refactor, and tonight in https://github.com/traviscrawford/elephant-bird/tree/json_record_reader but want to get some feedback before going too far.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2243597", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2243597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3833201", "body": "Hey Chris -\n\nThis works when adding that link as a maven repo in your ivy configuration. If you visit the page directly you do get a 404 because of how github is setup. For example, this link works:\n\nhttps://raw.github.com/kevinweil/elephant-bird/master/repo/com/twitter/elephant-bird/maven-metadata.xml\n\nAfter setting this up Raghu and I realized this is going to bloat the EB repo when developers clone, which is kind of annoying. We decided to create a new github repo that only contains published artifacts. We'll update the documentation accordingly with the new repo path.\n\nCan you try adding the URL listed in the documentation as a maven repo in your ivy file and see if that works?\n\n--travis\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3833201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3833494", "body": "Actually we decided to keep the maven artifacts checked in here to keep things self-contained. When the repo is large enough that cloning is an issue we can revisit.\n\nCan you try adding the current repo to your ivy file and see if that works for you?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3833494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/comments/2807640", "body": "OSX 10.8 ships with:\n\n```\nApache Maven 3.0.3 (r1075438; 2011-02-28 09:31:09-0800)\n```\n\nAny objection to dropping this version requirement to 3.0.3?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/2807640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/480988", "body": "Good suggestion - done.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/480988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/480989", "body": "Good suggestion - done.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/480989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/480991", "body": "Good suggestion - done.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/480991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/483439", "body": "Per our conversation, I'll remove the deprecated annotation. At some point in the future when a multi-loader figures out the correct loader for you this could be removed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/483439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/483445", "body": "Good suggestion - done.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/483445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/483465", "body": "I believe this is needed, actually. resolveClassName only throws IOException but we need to catch the exceptions thrown by newInstance.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/483465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609400", "body": "What about using zipgroupfileset and removing merge external?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609412", "body": "Is this necessary? Locally I see build/ivy-2.2.0.jar already.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609418", "body": "Let's call this \"fatjar\" instead of \"nodep\"\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609444", "body": "What's the error? I'm using 1.8.2 on osx and don't have any issues.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609507", "body": "Okay, that makes sense. Can you add a comment above that target so its clear what's going on?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609511", "body": "Huh. Okay, let's add this. Its basically the same and unbreaks it for ya.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609512", "body": "Sounds good.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/651113", "body": "Good suggestion, updating.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/651113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/651115", "body": "Its not - removed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/651115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662071", "body": "What's the reason for having an RCFile-specific loader, rather than hooking into the MultiInputFormat-based loader? Having a single loader would make things much easier for users.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662075", "body": "Same comment as the protobuf-based loader - how about hooking into MultiInputFormat and not having these format-specific loaders to simplify things for users.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662084", "body": "Mark as deprecated?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662102", "body": "Please add a bit more info about how the \"unknown fields\" work, from a user perspective. An example describing what happens when data is read with one schema and written with another would be helpful. What's the performance impact of dealing with unknown fields?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/662102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/735351", "body": "Please use slf4j as that's what the other loggers in this project use.\n\nExamples:\n\nack 'import.*Logger' src\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/735351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/735360", "body": "Nit - please fix spacing.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/735360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832246", "body": "What about thrift-test?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832340", "body": "Is there a way to set the project version in one place and have all sub projects use it? I could see these version strings getting out of date, not just for the EB release, but for stuff like protobuf. Can we reference properties or something instead?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832372", "body": "I'm not very comfortable with depending on this. Can we self-host the plugin? If that site goes away for whatever reason we can't build. That's not a situation we can find ourselves in.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832383", "body": "How do we get this plugin? Same concern as the thrift one.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832405", "body": "Is this needed? I don't believe thrift codegen is needed to build elephant-bird-core. Its just needed for the tests.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832419", "body": "Raghu's making a change so this is no longer necessary. We can update after that patch goes in and use the regular mavenized version.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832433", "body": "What version of hadoop-lzo does this pull in? Is this the twitter version? I don't believe that's in the maven central repo yet, so this probably pulls in the wrong version. I think it needs the in-git-repo version for now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832438", "body": "Please don't merge until we get all tests working.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832451", "body": "Thoughts on making the Mahout stuff its own subproject? A lot of people running pig nots are not using Mahout.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/832451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sritchie": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/145", "title": "elephant-bird fails w/ Cascading 2.0-wip226", "body": "With one of the more recent wips, Cascading changed SourceCall from a class to an interface. Elephant-bird uses SourceCall [here](https://github.com/kevinweil/elephant-bird/blob/master/src/java/com/twitter/elephantbird/cascading2/scheme/LzoB64LineScheme.java#L93) and other places -- to make this work, the project needs to be recompiled against cascading 2.0-wip226.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862795", "body": "And presumably if you're passing a null reporter, you're not going to try to access its counters or use this for anything real. I suppose the code should have been structured to just handle `null`, rather than a special null reporter.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "keolson": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/118", "title": "SequenceFileLoader fails if given comma-separated list of files", "body": "data = LOAD 'hdfs://localhost//foo/23,hdfs://localhost/foo/24' USING  com.twitter.elephantbird.pig.load.SequenceFileLoader ()\n\nproduces:\n## Backend error message during job submission\n\norg.apache.pig.backend.executionengine.ExecException: ERROR 2118: java.net.URISyntaxException: Illegal character in scheme name at index 0: 23,hdfs:\n    at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.getSplits(PigInputFormat.java:280)\n    at org.apache.hadoop.mapred.JobClient.writeNewSplits(JobClient.java:944)\n    at org.apache.hadoop.mapred.JobClient.writeSplits(JobClient.java:961)\n    at org.apache.hadoop.mapred.JobClient.access$500(JobClient.java:170)\n    at org.apache.hadoop.mapred.JobClient$2.run(JobClient.java:880)\n    at org.apache.hadoop.mapred.JobClient$2.run(JobClient.java:833)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at javax.security.auth.Subject.doAs(Subject.java:396)\n    at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1127)\n    at org.apache.hadoop.mapred.JobClient.submitJobInternal(JobClient.java:833)\n    at org.apache.hadoop.mapred.JobClient.submitJob(JobClient.java:807)\n    at org.apache.hadoop.mapred.jobcontrol.Job.submit(Job.java:378)\n    at org.apache.hadoop.mapred.jobcontrol.JobControl.startReadyJobs(JobControl.java:247)\n    at org.apache.hadoop.mapred.jobcontrol.JobControl.run(JobControl.java:279)\n    at java.lang.Thread.run(Thread.java:662)\nCaused by: java.lang.IllegalArgumentException: java.net.URISyntaxException: Illegal character in scheme name at index 0: 23,hdfs:\n    at org.apache.hadoop.fs.Path.initialize(Path.java:148)\n    at org.apache.hadoop.fs.Path.<init>(Path.java:126)\n    at org.apache.hadoop.fs.Path.<init>(Path.java:50)\n    at org.apache.hadoop.fs.FileSystem.globPathsLevel(FileSystem.java:1063)\n    at org.apache.hadoop.fs.FileSystem.globPathsLevel(FileSystem.java:1066)\n    at org.apache.hadoop.fs.FileSystem.globPathsLevel(FileSystem.java:1066)\n    at org.apache.hadoop.fs.FileSystem.globPathsLevel(FileSystem.java:1066)\n    at org.apache.hadoop.fs.FileSystem.globPathsLevel(FileSystem.java:1066)\n    at org.apache.hadoop.fs.FileSystem.globPathsLevel(FileSystem.java:1066)\n    at org.apache.hadoop.fs.FileSystem.globPathsLevel(FileSystem.java:1066)\n    at org.apache.hadoop.fs.FileSystem.globStatusInternal(FileSystem.java:1002)\n    at org.apache.hadoop.fs.FileSystem.globStatus(FileSystem.java:966)\n    at org.apache.hadoop.mapreduce.lib.input.FileInputFormat.listStatus(FileInputFormat.java:211)\n    at org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat.listStatus(SequenceFileInputFormat.java:55)\n    at org.apache.hadoop.mapreduce.lib.input.FileInputFormat.getSplits(FileInputFormat.java:248)\n    at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.getSplits(PigInputFormat.java:268)\n    ... 14 more\nCaused by: java.net.URISyntaxException: Illegal character in scheme name at index 0: 23,hdfs:\n    at java.net.URI$Parser.fail(URI.java:2809)\n    at java.net.URI$Parser.checkChars(URI.java:2982)\n    at java.net.URI$Parser.checkChar(URI.java:2992)\n    at java.net.URI$Parser.parse(URI.java:3008)\n    at java.net.URI.<init>(URI.java:736)\n    at org.apache.hadoop.fs.Path.initialize(Path.java:145)\n    ... 29 more\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3555761", "body": "Thanks Dmitriy.  As a workaround, I tried using a hadoop style glob:\n\n LOAD '{hdfs://localhost//foo/23,hdfs://localhost/foo/24}'\n\nThis also failed due to Pig thinking it was a relative path and trying to dereference it (Pig 0.8.1):\n\njava.lang.IllegalArgumentException: java.net.URISyntaxException: Illegal character in scheme name at index 0: {hdfs\n    at org.apache.hadoop.fs.Path.initialize(Path.java:148)\n    at org.apache.hadoop.fs.Path.<init>(Path.java:126)\n    at org.apache.pig.LoadFunc.getAbsolutePath(LoadFunc.java:252)\n    at org.apache.pig.LoadFunc.relativeToAbsolutePath(LoadFunc.java:74)\n    at org.apache.pig.impl.logicalLayer.parser.QueryParser.LoadClause(QueryParser.java:1615)\n\n Any ideas on how I can hack around this bug until a fix is ready?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3555761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3556574", "body": "Unfortunately it's actually about 300 files, not just 2.  I'll just fallback on indexed lzo for the time being.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3556574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dvryaboy": {"issues": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/20", "title": "Writables need instantiation similar to InputFormats", "body": "With Raghu's refactoring, we can set the inputFormat and outputFormat as follows:\n\n```\njob.setInputFormatClass(\n  LzoProtobufB64LineInputFormat.getInputFormatClass(MyProtobufClass.class, conf)\n);\n```\n\nWe need to do the same for Writables, as this:\n    job.setOutputValueClass(ThriftWritable.class);\ndoesn't work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/20/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/de6f96698ad9b0456ad86a5a594c9e3d9bfaeb4e", "message": "Merge pull request #429 from rangadi/block_reader\n\navoid double reading first block in split in block-format"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/d822da33a967b4151690e18d65c87f361c6e74ae", "message": "Merge pull request #409 from kevinweil/alexlevenson/compress\n\nGzip objects before storing them in the job conf"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c562d2986384961e69b7cde344599d4f4d145335", "message": "Merge pull request #405 from kevinweil/jco/fix_dumb_bug\n\nFix bug in CompositeRecordReader"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ccddfc68e634fea2d05a1804057a1c4826817471", "message": "Merge pull request #383 from ehrlichja/master\n\nFixing a link in the readme"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ea968467572699dbf2b8a0d00c1a58774481907b", "message": "Merge pull request #372 from bcoverston/progressable\n\nAdded progressable method to HadoopCompat"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ee24f85d18c28b8f1785b4cbf07aa69aa47a6abb", "message": "Merge branch 'master' of git://github.com/kevinweil/elephant-bird into tstruct_enum_npe\n\nConflicts:\n\tcore/src/main/java/com/twitter/elephantbird/thrift/TStructDescriptor.java"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/dec939414ed1f8553c2c87b377a630918defe9f2", "message": "Check for null maps in enum-related TStructDescriptor methods."}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/8ca12daa9c264fc61c0b732671503b79538ecd2d", "message": "Prevent NPE in TStructDescriptor when an unexpected enum is encountered by returning an empty map."}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/dae42dfab271da7f63ebed50690c65dcbab24978", "message": "Merge pull request #360 from Chandler/MapredInputFormatCompatibleInterface\n\nAllow DeprecatedInputFormatWrapper to manually set key and value on a mapreduce RecordReader"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/216368", "body": "You are quite right -- at the moment we don't support complex fields in pig to protobuf conversion (we do support them in protobuf to pig conversion). Adding this functionality would basically require taking ProtobufToPig and inverting it to create PigToProtobuf. We'll keep this in mind as a feature to add. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/216368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/220480", "body": "merged, tested, committed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/220480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/245590", "body": "The main issue here is that Pig pre-0.7 does not use Slices in local mode, and slices are where the actual work happens.  This should get taken care of when we branch the current code to a 0.6 branch, and port master to 0.7. It's a big rewrite, though, so won't happen for a bit. Are you blocked by this, or just slowed down?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/245590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/270904", "body": "Did we not put guava in lib/ ? That would be an oversight. Guava is Apache 2, so we can just distribute it with Elephant Bird.  I tried to set it up using maven/ivy for another project the other day, but looks like the maven deploy for guava is broken :(.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/270904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/477454", "body": "This has been merged.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/477454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/590076", "body": "Love the refactor. \n\nWe should update the docs to explain that one does not need all that code generation anymore! Nice work.\n\nBinaryProto\\* should just be Binary\\* -- otherwise it's confusing that Thrift objects appear to come from protocol buffer - related classes. Same for the various proto\\* variables in Binary\\* classes (protoConverters become binaryConverters, etc).\n\nI think we had this in the old code too, but I am not terribly happy with the silent failures on decode errors in the Readers.  Perhaps we should wrap them in a DecodeException and rethrow; then allow InputFormat to increment error counters and return null if that's the desired behavior. The counters should be parametrized with the run-time class, not just be generic.\n\nThe LzoThriftB64LinePigLoader.java comments still refer to protocol buffers -- please change.\n\nThe thrift changes make sense.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/590076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/628893", "body": "Merged to master.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/628893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/659173", "body": "I added a slightly amended version in a separate commit.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/659173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/659174", "body": "Please check the pig_08 branch in my fork of Elephant Bird and see if it works for you.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/659174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/659175", "body": "this was pulled in a while back, forgot to close the issue :).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/659175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/694317", "body": "merged.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/694317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/695143", "body": "I will merge into the 1.1.1-dev branch (we are now trying to be better about versions and not doing development on master).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/695143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/695152", "body": "merged.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/695152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/775012", "body": "This is fixed now, right Jimmy?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/775012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/787239", "body": "The issue appears to be that an AbstractMessage hashCode is a combination of Descriptor hashCode and hashCode of the collection of the Message's Fields.\n\nDescriptor does not implement hashCode (http://code.google.com/p/protobuf/source/browse/tags/2.3.0/java/src/main/java/com/google/protobuf/AbstractMessage.java) -- and I checked 2.4.0 and it does the same thing.\n\nKenton Varda seems to indicate here: http://groups.google.com/group/protobuf/msg/cefa4b585c046b03 that the way to go is to serialize the protobuf and compare raw serialized bytearrays. We could do something gnarly like implement our own hashCode() by copying that of the AbstractMessage, cache the results of serializing the result of getDescriptorForType().toProto(), and stick that in instead of getDescriptorForType().hashCode().\n\nOr we could email the protocol buffer user group.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/787239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/787332", "body": "Also:\n\nhttp://download.oracle.com/javase/6/docs/api/java/lang/Object.html#hashCode()\n\"This integer need not remain consistent from one execution of an application to another execution of the same application.\" \n\nNaturally Writable does not document the fact that it has a constraint on hashCode that is different than normal Java constraints.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/787332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/789819", "body": "Ok, pushed a change to eb1.2.1-dev branch, please review.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/789819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/798434", "body": "Yeah sure why not.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/798434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/841024", "body": "No, it compiles fine for us.. what version of protoc are you using?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/841024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/844776", "body": "In EB 1.2.1\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/844776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/844783", "body": "In EB 1.2.0\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/844783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/845650", "body": "Yup, we don't support 2.2. In version 2.3 custom generator support was added, and we uses that pretty extensively to codegen InputFormats, Writables, etc.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/845650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/888384", "body": "Hi Angus,\n\nHere's the thing, Hadoop 0.20 actually requires codec 1.3. \nWe intentionally maintain 1.3 in EB because 1.4's interface is so broken with regards to backwards compatibility (see this highly amusing JIRA: https://issues.apache.org/jira/browse/CODEC-89 ), and the distribution of hadoop we are running packages the older version.  I might consider bumping all the way to 1.5, which restores sanity according to the linked jira, but would like to avoid 1.4 if at all possible. \n\nNow, granted, this may not, in fact, be possible, as it looks like Hadoop recently bumped the requirement up to 1.4. I am not even sure where they did that, but it's 1.3 in https://github.com/yahoo/hadoop-common/blob/yahoo-hadoop-0.20/ivy/hadoop-core.pom and 1.4 in the yahoo-hadoop-0.20.104 branch. Haven't checked what Cloudera ships. \n\nI don't really know what a good solution here is unless it's to add some compatibility mode flag to the build process and do gnarly file-substitution tricks.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/888384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/891410", "body": "You know, we can probably just add a little helper that checks if the Base64(0) constructor is available via reflection, and calls it if it is. Then it'll \"just work\" with whatever is on the classpath.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/891410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/921162", "body": "Your wish is my command :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/921162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/921198", "body": "Changes look good, I'll have another pair of eyes take a look and if Raghu is cool with it, we'll pull it in. Thanks for doing this!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/921198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/926830", "body": "Merged into 1.2.4\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/926830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/926892", "body": "Pulled this into 1.2.4, should be out on master later today.\n\nThanks Angus!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/926892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/927107", "body": "Closing as protobufs don't have maps, thrift non-string keys to pig are now covered via issue 38, and it's not clear how to translate from pig's string keys to thrift non-string keys in storage.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/927107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/927111", "body": "Merged into 1.2.4\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/927111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/929406", "body": "Hm yeah you are right we might have runtime errors. Please for from eb-dev branch, and issue a new pull request to it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/929406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/946562", "body": "Angus, Raghu's asking about the \"might cause some runtime errors\" problem with the patch I merged into 1.2.4, not the original bug you reported.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/946562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1065410", "body": "Yep, looks like we broke the noproto target in some recent refactorings. We'll fix but in the meantime, the solution is simply to install protocol buffers 2.3...\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1065410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1134966", "body": "Pull requests should go to the dev branch.. I'll pull in there.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1134966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1135008", "body": "Ok, merged into eb-dev. \nFYI we recently started treating master as \"release only\" (since people build from it whom we don't know about), and do the development in eb-dev branch.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1135008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1135010", "body": "Oh and thanks for contributing :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1135010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1191805", "body": "Conventions. Gotta love em. Thanks for highlighting this, I'd forgotten it does that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1191805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232088", "body": "What does protoc --version say ? I think you have the wrong version installed, and it's generating code that's not compatible with 2.3\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232140", "body": "Sounds like it's not backwards-compatible, at any rate.. that's unfortunate.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232142", "body": "I think you can just replace the protobuf jar with the 2.4 version and it should work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1238910", "body": "That's too bad. You are sure you did \"ant clean\" before compiling?\nWe don't have plans to upgrade to 2.4 for now so this will have to wait for someone with the appropriate motivation to get fixed if the simple approaches don't work.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1238910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1239323", "body": "None.. we just don't need the upgrade, and lately have been focusing on Thrift support.\nI'll close the ticket, but if you feel like patching this, feel free, we'll take the submission as long as it's backwards-compatible.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1239323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1374738", "body": "Master on Kevin's repo is the \"official\" branch to which we push\nreleases. A release is basically whatever we are running on Twitter's\ninternal clusters. The eb-dev branch on Kevin's repo is the\nintegration branch, into which changes are pulled in from different\ncontributors, mostly myself and Raghu these days, but there are\noccasional others (like the recent work to add \"deprecated\" api\nsupport for reading Thrift).\n\nAs we are finding some corner cases right now, having just upgraded on\nMonday to Pig 8 and EB 2.0+, minor version bumps are going to be a bit\nmore frequent than before.. we will likely push 2.0.3 today. I expect\nthis will stabilize shortly.\n\nWe can certainly pull in Gerrit's LzoPigStorage, he just needs to send\na pull request :).\n\nHappy to hear you are using the stuff!\n\nD\n\nOn Wed, Jun 15, 2011 at 2:24 AM, miguno\nreply@reply.github.com\nwrote:\n\n> Hi Kevin & all,\n> \n> I have two quick question:\n> \n> First, I have seen that Dmitriy merged (kevinweil/elephant-bird@ebaa220c5c728) his [Pig-0.8 compatibility branch of EB](https://github.com/dvryaboy/elephant-bird/tree/pig-08) into Kevin's [eb-dev](https://github.com/kevinweil/elephant-bird/tree/eb-dev). Kevin's master branch of [kevinweil/elephant-bird](https://github.com/kevinweil/elephant-bird) now contains the \"2.0.2 bug fix release\" and is just one version-bump commit behind [eb-dev](https://github.com/kevinweil/elephant-bird/tree/eb-dev). So my question would be: Is EB 2.0.2 considered stable or an official release? Is Kevin's repo the recommended code base or rather Dmitriy's? (I'm a bit confused what development happens in each repo, sorry :-D)\n> \n> Second, gerritjvv forked Dmitriy's EB repo some time ago ([gerritjvv/elephant-bird](https://github.com/gerritjvv/elephant-bird)). He added the class [LzoPigStorage.java](https://github.com/gerritjvv/elephant-bird/blob/master/src/java/com/twitter/elephantbird/pig/load/LzoPigStorage.java). This class appears to be a very simple, straight-forward LZO-enabled wrapper for standard PigStorage -- less than 10 lines of effective code. If the implementation is sound, do you think it would make sense to bring `LzoPigStorage` into your repository?\n> \n> Many thanks for your work on ElephantBird, it's appreciated!\n> \n> Best,\n> Michael\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kevinweil/elephant-bird/issues/56\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1374738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1379627", "body": "Fix is in the integration branch.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1379627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1384606", "body": "Not quite. This doesn't work in 0.8.1 and triggers the same exception; it does, however, work in trunk. Chuang's example does not work in trunk. This implies a problem in Pig (which has been fixed in later versions) _and_ a problem in EB.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1384606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1386271", "body": "Totally different error but point taken. I'll fix.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1386271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1386303", "body": "We're looking at Gerrit's patch, adding a few things. Closing this ticket in the meantime. Btw 2.0.3 is out as of today.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1386303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1508555", "body": "Good question. I don't have a ready answer, we don't really deal with streaming that much, and when we do, it's not reading from the writables, but from Base-64 encoded lines. I'd suggest emailing the hadoop users list.\n\nClosing the issue cause it's not really a bug :).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1508555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1768806", "body": "Meant to send this to the dev branch...\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1768806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1819624", "body": "Yeah, Thrift version is 5 (though 6 _might_ work). Protobuf 2.4 doesn't work, sadly, that's correct.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1819624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1820317", "body": "I pulled this into the dev branch (we don't pull into master, instead we develop in the eb-dev branch and merge to master to make a \"release\". Thanks for the contrib! :).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1820317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2118698", "body": "This looks good. I'd like a second opinion from Raghu.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2118698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2120610", "body": "You tested that with this change our complex structures work with pig 9?\n\nOn Sep 16, 2011, at 4:50 PM, Raghu Angadireply@reply.github.com wrote:\n\n> The patch detects Pig 0.9 or newer version so  that simple types in PIG bags.\n> \n> PIG 0.8 added an implicit wrapper (and removed this wrapper while reading).\n> PIG 0.9 is more consistent and expects the Loader to export proper schema.\n> \n> ProtobufToPig was not affected by this patch since it always added this wrapper (but would not work with PIG 0.8 and older).\n> \n> You can merge this Pull Request by running:\n> \n>  git pull https://github.com/rangadi/elephant-bird pig_9_port\n> \n> Or you can view, comment on it, or merge it online at:\n> \n>  https://github.com/kevinweil/elephant-bird/pull/79\n> \n> -- Commit Summary --\n> - detech PIG 0.9 or new version so that simple fields in bags\n> \n> -- File Changes --\n> \n> M src/java/com/twitter/elephantbird/pig/util/PigUtil.java (15)\n> M src/java/com/twitter/elephantbird/pig/util/ProtobufToPig.java (1)\n> M src/java/com/twitter/elephantbird/pig/util/ThriftToPig.java (3)\n> \n> -- Patch Links --\n> \n>  https://github.com/kevinweil/elephant-bird/pull/79.patch\n>  https://github.com/kevinweil/elephant-bird/pull/79.diff\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kevinweil/elephant-bird/pull/79\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2120610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2512529", "body": "I love how you guys snuck in a gigantic refactor under a innocuous-sounding heading of replacing some checks with warnings :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2512529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2626906", "body": "Add a test? IIRC we have existing tests for PigToThrift / ThriftToPig\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2626906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2627080", "body": "Ok so this won't build if we don't add the cascading jars (or set up ivy. or maven). Cascading 1 being GPL, seems like we shouldn't... we should split up elephant-bird-gpl and elephant-bird.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2627080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2698654", "body": "Thanks Michael, looks good.\nWe develop in the eb-dev branch and merge to master when we make a \"release\" (we make those every few weeks, so it's not a big delay). I can pull this in manually into the right branch, but if you can send pull requests to the dev branch in the future, that would make it so we can just hit the merge button. I'll add a \"how to contribute\" section to the readme.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2698654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2699373", "body": "I've forgotten where we left this at this point. Raghu, did we just add ability to read non-LZO files to our LZO loaders? \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2699373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2705226", "body": "Ok, closing without prejudice :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2705226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2756218", "body": "Thanks for doing this, Angus! Looks good.\nKind of hard to believe they broke backwards compatibility just to move com.google to google. .. It'll take some time for us to merge this as we'll need to do this at the same time as upgrading all of our build machines to protoc 2.4, redeploy everything in sync, etc. Fun.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2756218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2871087", "body": "Hi Hassan,\nThis worked for me:\n\nHADOOP_CLASSPATH=./lib/guava-r09.jar:./lib/protobuf-java-2.3.0.jar hadoop jar elephant-bird-examples-1.0.jar  com.twitter.elephantbird.examples.ProtobufMRExample -libjars=eblib/protobuf-java-2.3.0.jar,eblib/guava-r09.jar tmp/nameage.txt tmp/ebexample_out\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2871087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3084146", "body": "Matt, that's a pig bug :(\nMind opening a jira on pig.apache.org?  Also, please provide a sample script that reproduces the problem.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3084146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3172378", "body": "Thanks for the contribution, Alexander!\nI'll take a look. FYI, there's another JsonLoader in Pig's trunk now (it requires static schemas though).\nAlso -- we can't bump up from Thrift 0.5 to 0.7 right now (lots of dependencies). Was that meant as part of the patch?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3172378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3172463", "body": "Ok, now that I read the patch -- that looks good, but I'd want to verify this can actually be read correctly in Pig. Have you tried some sample scripts to see if you can reach inside nested maps? Up to version 0.8, Pig had a nasty habit of assuming <String, String> maps (which is why we did it this way in EB). There was a bunch of work in Pig 0.9 to fix this, but I haven't tested how well Pig handles complex values now. It would be terrific if you tried your patch with some scripts on Pig 8 and 9 and reported results. \n\nThanks again for working on this!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3172463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3367535", "body": "Good catch, thanks guys. I'll close this out since it was resolved in #114.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3367535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3555706", "body": "Verified this behavior -- it's a real bug, thanks. We'll check it out.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3555706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3556557", "body": "2 loads and a union?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3556557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3592847", "body": "Looks good. Is there a dependency between this and Travis's change?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3592847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3789927", "body": "Good amount of work in there, thanks. It's getting to the point where it probably needs some tests..\n\nI am concerned that changing the behavior of what we do with nested structures in Json is backwards-incompatible. This behavior should be controlled by a pig property, or an optional constructor argument.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3789927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3789944", "body": "Pull request #123 also aims to do the same thing.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3789944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3837120", "body": "That's harder because it requires us to upgrade the whole org to 2.4, sadly Google chose to rename all packages in that release :-/.\nThere are some missing classes in the jar for 2.3 on central maven.. we are trying to track them down now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3837120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3974189", "body": "The SequenceFileStorage tests seem slow due to the infamous sleep(5000). If we use the internal pig, it'll fly.. we need to figure out how to push this patch upstream, it's not quite clean enough for the general case..\n\nApache Pig 9.2:\n    [junit] Running com.twitter.elephantbird.pig.util.TestProtobufWritableConverter\n    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 16.693 sec\n    [junit] Running com.twitter.elephantbird.pig.util.TestThriftNameWritableConverter\n    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 16.774 sec\n    [junit] Running com.twitter.elephantbird.pig.util.TestThriftNameWritableConverterCustom\n    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 16.693 sec\n\nOur version of 9.2:\n\n```\n[junit] Running com.twitter.elephantbird.pig.util.TestProtobufWritableConverter\n[junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 1.726 sec\n[junit] Running com.twitter.elephantbird.pig.util.TestThriftNameWritableConverter\n[junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 1.68 sec\n[junit] Running com.twitter.elephantbird.pig.util.TestThriftNameWritableConverterCustom\n[junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 1.687 sec\n```\n\n:-(((\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3974189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3974619", "body": "Ok, read the patch. Looks good (and also, you are a madman!). We should update to Readme to indicate Mahout version compatibility, and a blurb about what this does. \n\nIn fact we should probably add a whole wiki page about how this stuff works.\n\nWe can do that as a separate commit.\n\nI'll merge it in.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3974619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3974629", "body": "Raghu are you still planning on tackling this?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3974629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4010478", "body": "Invoker is deprecated (it's in Pig core now). We should remove it, it's been deprecated for close to a year iirc.\n\nPigUtil.. yeah we should probably fix that.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4010478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4038123", "body": "I think we want the opposite behavior -- only require protobufs if Thrift didn't match.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4038123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4045687", "body": "You are right, I didn't think about the block stuff. This seems like a good solution, then. Don't worry about the Thrift + B64 special case.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4045687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4065759", "body": "Thanks, that looks like quite a bit of work!\n\nJust curious, do you guys actively use the codegen? We've switched to almost 100% dynamic I/O Formats, loaders, etc.\n\nCould you add some high-level docs of what you added and how to use it?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4065759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4088617", "body": "Thanks (and yes, Dmitriy's the right name). I meant add docs to the readme :)\n\nI'll run a few tests and unless something comes up, merge this week -- seems pretty safe since we don't use extensions yet, so it's unlikely to break our stuff. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4088617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/7647", "body": "It's better to keep a prototypical builder around and clone it every time than to build a new builder every time.\nSo instead, keep builder_ here, and in writer_.write do tupleToMessage(builder_.clone(), f);\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/7647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/45713", "body": "I am not confident Pig won't break if we return null here.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/45713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/90075", "body": "guess we should rethrow here.. RTE?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/90075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/90076", "body": "\"can\"\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/90076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94877", "body": "it would probably be better to change the build so noproto and nothrift are combinable (so we don't have to add noproto_nothrift targets, etc)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94878", "body": "\"generates\"\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94884", "body": "Oh I see we already have properties. We should be able to just rework the compile target and make sure it respects -Dnoproto, -Dnothrift, etc, and get rid of the specialty targets.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94891", "body": "It seems like we shouldn't need jar-precompiled if we get the dependencies right here -- it should see that certain stages have been done and skip them automatically.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94901", "body": "Nice addition. You want to add some javadocs for the new behavior.\n\nWouldn't it make sense, if you are converting a databag of protobufs, to return a databag of protobufs, rather than a tuple that contains said bag?\nThis can be done easily in Pig by implementing getArgToFuncMapping to tell it to use a different implementation of EvalFunc for a different argument (so it will automatically route databytearrays to the current implementation, and databags to a new one).\n\nAs far as actually implementing this:\n\nYou should grab a BagFactory.getInstance() for the class.\nHere, create a List<Tuple> (using Lists.newArrayListWithExpectedSize((DataBag) o).size());\nPopulate the list in a loop.\nThen create the bag by calling bagFactoryInstance.newDefaultBag(listOfTuples);\n\nYou won't need this is you just return a bag, but fyi -- when creating tuples, it's better to create a tuple of a known size, and set its fields, than to do appends. Appends are less efficient.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94908", "body": "Great idea and very useful. \nI wonder if we can just bite the bullet and do a generic solution for delimited protos, b64 (but uncompressed) protos, block-formatted, etc?\nAnd capture Thrift, too? I know it's more than you signed up for, we should be able to help. Seems like we shouldn't do this half-way though, people will be confused about what is and is not available.\n\nRaghu, what do you think?\n\nI also suspect we can reuse some of the lzo loader code.. ideally there would only be one loader and it would just figure out whether the input is compressed or not, and use the right input format.\n\nBy the way there is another pull request for hadoop-lzo right now, which makes it so LzoInputFormat can do both lzo and non-lzo files, mixed together. That might make this a lot easier.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94950", "body": "We have an abstract BinaryRecord abstraction above Thrift and Protobufs in most of EB code to handle the common stuff, and only do the Thrift- or Proto- specific bits in the implementations. Agree that we will likely still need separate loaders. Unless thrift and proto block serializations have magic headers.. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/110399", "body": "Should we only increment that for successful reads?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/110399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/110406", "body": "The string constant should be created as a public static final variable.\n\nThe skipping behavior as well as the name of this property should be clearly documented in the javadoc for the reader and the InpFormat\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/110406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/126102", "body": "might be cleaner to treat all arguments (so, things not preceded by -foo) as args to the constructor.\n\n'-c MyWritableConverter arg1 arg2'\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/126102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165060", "body": "see PigCounterHelper#incrCounter\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/165060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221972", "body": "Javadoc needs to be fixed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221984", "body": "The javadoc needs to be fixed.\n\nIn fact I am not sure this class is needed at all -- the whole point of lzobase was to add the lzocodec bit, if it's not needed, I am not sure what this class is doing.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221987", "body": "log spam :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221991", "body": "log spam :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221995", "body": "delete dead code\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221999", "body": "something's up with the tabulation in this file.. we use no tabs, 2 spaces for indentation.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/221999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303830", "body": "It occurs to me that having this behavior just turn on in the next release of EB will break existing scripts (including production ones we are already running...). To ensure backwards compatibility, the multilevel behavior should be controlled via property and/or optional constructor argument.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303878", "body": "I think both. Long-term, it should just work this way, and new adopters shouldn't have to know about the fact that it didn't use to. We'll want to set the default behavior to not do this, and use an optional arg to do the deep parsing in new scripts.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/321782", "body": "I think that crosses the line into too many knobs.. can't imagine a situation where you want to deep-parse 3 levels, but want a string value for 4th and 5th._Maybe_ for some super deep json you want that, to save on parsing... but that's pretty custom and probably rare. It'll just cause confusion to have this tunable, imho. Agree / Disagree?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/321782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/344593", "body": "We should just have a general ProtobufPigLoader and ThriftPigLoader, and deprecate all of these in favor of the 2 new classes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/344593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/344594", "body": "I think we have examples that use this -- we should update them.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/344594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/446853", "body": "This is fine, but just as a heads-up -- Owen O'Mailley's changes in the hortonworks fork will break this, as there are now two places for an index to possibly exist (foo.index and .foo.index).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/446853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/543808", "body": "what's the difference between blobs and records? why use 2 terms?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/543808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/543811", "body": "when would you want this to be false?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/543811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624026", "body": "did you want to add a basic wrapper-based scheme here?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624038", "body": "LOG.warn(\"$class is deprecated, use $newclass\");\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624041", "body": "same here and elsewhere \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624048", "body": "this is from Raghu's patch, right? \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624052", "body": "if we are going to be adding new classes.. let's stop using the _ suffix. It's a bit of an eyesore. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624367", "body": "now I am confused. It says deprecated up top..\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/663283", "body": "the utility of this method is simply hiding the need to catch an exception (by rethrowing as an RTE).\n\nThis should be documented.\n\n\"quietGetProtobufDescriptor\" ?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/663283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/663289", "body": "I think we fixed this earlier, but worth checking that this isn't done via normal Class.forName and uses PigContext instead\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/663289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/655743", "body": "Also please use a namespaced value (\"elephantbird.jsonloader.nestedok\" ?)\n\nAlso please pull it up into a static final constant rather than using string literals, and document (maybe we should have a separate wiki page on reading json?)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/655743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/658169", "body": "We should preserve the single-arg constructor for backwards compatibility (it's trivial to just make it call this(inputFormatClassName, \"\")).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/658169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/658177", "body": "Now that I look at the docs and the code.. this behavior still seems somewhat surprising. It's reasonable to expect some keys to occur at different hierarchy levels, and it would be surprising to have odd hierarchies show up when you think you are filtering them out. Say, you specify \"user,id\" to get the id of a user. But your records might have a top-level key called id (meaning, id of a record). You'll get some odd matches.\n\nThis isn't a made-up case btw -- that's actually what I suspect will happen if you feed Twitter's json representation of a tweet into this loader, it's got status ids, and a nested user object that has a user id also called \"id\". See https://dev.twitter.com/docs/api/1/get/statuses/user_timeline.  \n\nWhat you really want is some XPath-like spec language (in fact, xpath might just work) -- but that sounds like a separate project, and shouldn't block progress on satisfying the specific narrow use case you have.\n\nStill, I don't think it's a good idea to put an implementation with such confusing potential side-effects into the top-level JsonLoader.\n\nMaybe make whatever methods you need to be protected, and have a specialized loader that inherits from JsonLoader and does this filtering optimization? \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/658177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667252", "body": "I bow to Raghu's wisdom :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/782211", "body": "please add the <p> tags for proper javadoc formatting\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/782211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/782217", "body": "how do we deal with something like pig using several of these in one job? the class conf values will clash.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/782217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "benpence": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/f5f5baeac4869e6969cddc88ed49f0103e368b39", "message": "Merge pull request #481 from Yaliang/yaliangw/add-presto-hive-query\n\nAdded condition to fetch serialization class for a presto query"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Yaliang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/bd5f658e85b85ace26716191204997bcc82c8a59", "message": "Added condition to fetch serialization class for a presto query"}], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/485", "title": " Check LZO index file existence when check splitability of LZO files", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "isnotinvain": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/1a6b87410afc4e546d4db86df467b3e14cfb936f", "message": "Merge pull request #479 from dieu/apanasenko/release_4.15\n\nRelease 4.15"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6b2e45057f1904295cec3291d6b5f3720434813a", "message": "Merge pull request #478 from dieu/apanasenko/writebale_seq_with_combined\n\nAdded CombinedWritableSequenceFile to cascading2"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/87efd8c5358614888791fc2ce6b68675bac32239", "message": "Merge pull request #469 from zmhassan/typo-1\n\nFixed documentation to remove typo"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/5f201605a7b5931b2b28b5f4d2aca95d395ff503", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6cfea473897d043d6aa3cdc900085f14cc200fb7", "message": "[maven-release-plugin] prepare release elephant-bird-4.11rc1"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ec35b47d7524eb94712fc8cdef0f387df9719929", "message": "Merge pull request #456 from twitter/alexlevenson/better-logging-determine-format\n\nBetter logging and error reporting when determining format in MultiInputFormat"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/e267caef0bbaf69c8be79bcca97b25fbbb093535", "message": "Simplify per Gera's suggestion"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/8467bec6e3e03dc2f544bf6fdc123ab684f78886", "message": "minor cleanup"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/eb0c8703dc9acf6cdb1b139d63dd429a2d0da757", "message": "Better logging and error reporting when determining format in MultiInputFormat"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/0e8990e1e067480bf742b7ecf8bbe6e1ccfe2468", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/efb2cc4737ceec1b6f6e7ba3f841fb9885e0f640", "message": "[maven-release-plugin] prepare release elephant-bird-4.6"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/fd78c72d7bed39bf78372653bedd2805bc38a651", "message": "Upgrade release plugin to 2.5.1 to support newer versions of git"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/12de77040ac46a0d652af1cdac1c3cd9ff9b1747", "message": "Update git url references from kevinweil to twitter"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/81da2607f9d71c9cc498c49a7bccb74e0a78d25d", "message": "Update Changes.md for 4.6 release"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/94aa4a7dd250457bf231fdac6ab5e12a987263c0", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/cae707e38a009a445be2c1d953fe5ac5c7daf48f", "message": "[maven-release-plugin] prepare release elephant-bird-4.6rc4"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/7d14603e3dccc6f9e9aa3b2604ff22d537061791", "message": "Merge pull request #411 from kevinweil/jco/compositerr_proper_kv_init\n\nFix NPE in CompositeRecordReader due to improper delegate initialization"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/29d9ccc2fe8f4f1581128b17e7b9e4fea76c5eb5", "message": "Update javadoc"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/e8c4c5b9ee168b75ab1cb0bb596e20ed52448136", "message": "Gzip objects before storing them in the job conf"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/1d1dcce3d365d016206c3854797f4370b4fe8b67", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/365fe33967eac845b71b8978bab1fb4d9c21f2b8", "message": "[maven-release-plugin] prepare release elephant-bird-4.6rc3"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/2d307d3e9a58909bb23204da135089c7da332684", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/42cf8c3d7f4cc590e758aacd4c6ecfa39ddc095b", "message": "[maven-release-plugin] prepare release elephant-bird-4.6rc2"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/baaf47893e20693f8e5d38162fd4930e95ade1c1", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/05368a213b95b34b9149df97557381fec9b01ad4", "message": "[maven-release-plugin] prepare release elephant-bird-4.6rc1"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6681d7089cee7ed930f4d10e0d174403adebff24", "message": "[maven-release-plugin] prepare for next development iteration"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/290f6f5b4f0a031ff771bce592e2dd89421ab99d", "message": "[maven-release-plugin] prepare release elephant-bird-4.5"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/9f44ac3a97abffd07b9a170bb77cf250ba56cc45", "message": "Update changes for release 4.5"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dieu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/abde522550fd6d9185d3ff3a427dfca0d9f75f43", "message": "[Release] - 4.15, prepare for next development iteration 4.16-SNAPSHOT"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/1e6889fe0100e5b7dbd1ed9384ceb114f760f7f1", "message": "[Release] - Prepare release 4.15"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/62005488404f8bc20ca9f73cb97edad8c47e127f", "message": "Added CombinedWritableSequenceFile to cascading2"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zmhassan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/316fe46b3a867b617f349d89da30698ae49447e2", "message": "Fixing documentation to remove typo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ianoc": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/9f622eecf03a7615173306028c7fea68c4c7d385", "message": "Merge pull request #461 from laurentgo/restore-thrift-api-compatibility\n\nRestores API compatibility for ThriftBinaryProtocol/ThriftBinaryDeserializer"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/cc8855a841555e7cbeb28cf9d1f27a95b2ff98e7", "message": "Remove push commands from the release to avoid side effects to the repo"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/0784fa74359be2cc78528b024b187f146804fdae", "message": "[Release] - 4.12, prepare for next development iteration 4.13-SNAPSHOT"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/e2373b504f0949fdc8282d4332c722cebb855f77", "message": "[Release] - Prepare release 4.12"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/4f371a2cf8c9862aa08cbdd5d544aa7852f1969f", "message": "Add recommended mvn gpg plugin settings and bump version"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/2c289293ff05704e3b94ccebdaf8e6fdccc88124", "message": "Merge pull request #455 from EugenCepoi/master\n\nFixes #452 - supporting thrift 0.7 and 0.9"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/a7df8e5f6896161dc6ef602b21b16c8fe9a14fce", "message": "Merge pull request #442 from twitter/ianoc/configureCompressionOptions\n\nAdd some options so we can influence the compression options of inter\u2026"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/3df81ba68bb7fbbb90a9f5c417af993a08ba51b2", "message": "Add some options so we can influence the compression options of intermediate data written by cascading"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6123d4d9bb0bf984ef3f6c1ce730b8961eaa5a18", "message": "Merge pull request #441 from rubanm/rubanm/protobuf_size_fix\n\nrevert InputStream usage in BinaryBlockReader"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/3a401a4da7ccfa6d75309a8027db693ca50755cc", "message": "Merge pull request #440 from rubanm/rubanm/generic_if_writes\n\nLzoGenericBlockOutputFormat"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ae18a16fcab207df08d4a1f734a3d8eefa69ed80", "message": "Merge pull request #439 from rubanm/rubanm/generic_inputformat\n\nAdds generic block record readers"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/2f8b8e2cf56aee309d338bf4f93ac81e56cc286f", "message": "WIP"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c11c0ab7e92a5d6f8a38a1fcfcb503385a75124e", "message": "WIP generic format"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c058bbd3820a8a9ab46a93789733241bcc5cc798", "message": "Merge branch 'master' of github.com:twitter/elephant-bird into ianoc/FasterLzoUsage"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/af48e3e4257896aa13f0b76ed7f5ace978ec83a8", "message": "Don't allocate strings and do concat if debug mode isn't enabled"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/295e25580d8db171441ea17af689200300dcb4be", "message": "Two things here, once setting the output fields in the cascading scheme goes via a better path.\n\nSecondly a bigger one if reading lots of lzo data reading all the index files can be very very slow, use a thread pool here and store them into a map"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/4af586a46ec155e9bdcd467e99f002aaea14da6c", "message": "Don't copy the array before handing it for base64 decode"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/9b990609e0b8a7f4d12a11030ce0cd67d4b39154", "message": "Pulls in the source of a BSD licenced base64 implementation that is 5x faster than the Apache one for our usage"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "laurentgo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/d813ffe37597dac5b4adcee1f5424fe2829edc3c", "message": "Fix javadoc"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EugenCepoi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/a0f954bcd02d834cf7e55c3a69a7f12723eef75c", "message": "An attempt to fix the buffer overflow errors during pig tests in travis"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/35c441c4f5e1c11f04a118a1b142232c263d56f9", "message": "Automatic release against thrift 7 and 9"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ff41cf21d45a1586768fdad9eea97379bc093c6f", "message": "Using travis matrix feature to speedup the build"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/e73bb6ed479655ec4f4fb0d1725f09a6bfd7457a", "message": "Fixes #452 - supporting thrift 0.7 and 0.9 via multiple maven profiles"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cchepelov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/86cd8909bcfed46aeab16c99e97af71075125f10", "message": "remaining JobConf\u2192Configuration migration, next\n\n(should have whacked myself with a \"mvn clean\" stick first)"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/6cf43a5f509888c4564b8ad16706fc45bf319408", "message": "a remaining JobConf\u2192Configuration migration\n\nSigned-off-by: Cyrille Ch\u00e9p\u00e9lov (TP12) <cch@transparencyrights.com>"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/f5e65d6ba66fcbe10fb8055c0f832f88b1f6b16e", "message": "Another casualty of the Cascading 3.0 JobConf\u2192Configuration change"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/3122612d994b362e01e08b939268bd7ff99c2956", "message": "Adapt elephantbird-cascading3 to Cascading 3.0.2"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/cedb954cbcc70d491abe2aea95c7403332ee6fb4", "message": "Fork cascading2 into cascading3 (still into cascading2 API)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "caniszczyk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/51cc0a58d5a9dba21065f8f5e4f95b19c3cd8859", "message": "Fix link to Travis CI results"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gstaubli": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/a3c9dd5bfd426f7b29c803e44245d10e2a66cb08", "message": "thrift, not thrist"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lewismc": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b069933284dc4ffd2ba4ecd0d45210cb8b7cc55e", "message": "Update PR for Trivial Javadocs for LuceneIndexInputFormat#413"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/c2fd1d2b1250eb795acb5881080745c098b17d39", "message": "Merge branch 'master' of https://github.com/kevinweil/elephant-bird"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/a567fe2b446dcaf727e27d8905e8be475b55196f", "message": "Trivial Javadocs for LuceneIndexInputFormat"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/a8dec1946d7ea0df4ea9265c3463188fc876d40a", "message": " Make dependencies expicit in Readme quickstart #406"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "julienledem": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/4096d6c88996d2ecca74ec7f19fbbea6e7d806ea", "message": "Merge pull request #398 from kevinweil/jco/combine_input_format\n\nAdd CombineFileInputFormat support (esp. for lzo)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2851860", "body": "Cool stuff. Ship it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2851860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2856780", "body": "Looks great! Thanks Raghu.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2856780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246651", "body": "If the LZOInputFormat does not do LZO only maybe we should split that class.\nThe LZOInputFormat would work the same and a new InputFormat would handle multiple compression formats.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246659", "body": "maybe add a comment here. We read all the files except the LZO index files.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246697", "body": "there should probably be an wrapping InputFormat which just delegates to the actual format of the file to know if it is splittable, etc.\nThere is a related work in: https://issues.apache.org/jira/browse/PIG-1722\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246730", "body": "Same comment if there was a wrapping InputFormat delegating to the InputFormats dealing with the actual format there would not be a special case here \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246757", "body": "Composition instead of inheritance ? As mentioned in the description The MultiInputFormat is not specifc to LZO.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246822", "body": "this should probably be a \"set\"\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246832", "body": "Debug ?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246842", "body": "you could also do fileFormat.createRecordReader(recordClass, typeRef) and avoid the switch by putting the logic in the enum\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246858", "body": "(\"could not instantiate \\\"\"+className+\"\\\" from conf property \"+CLASS_CONF_KEY, e)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246874", "body": "if this throws an exception \"in\" does not get closed. you can use 2 nested try{}finally{}\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/246874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248681", "body": "we can use @RunWith and @SuiteClasses to make this test part of a separate suite with a different target.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248712", "body": "why do we need contextSignature here? it is already used in getUDFProperties() to get the properties for this UDF signature/FuncSpec.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248718", "body": "_ is so 1983 :)\nyou probably want to make it final as well\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248790", "body": "but it is called Tuple\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/248790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ehrlichja": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b7c1a16a1e587599f5d3ee4bbd645bbe427638b4", "message": "Update Readme.md\n\ntypo"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/983f7044382250e5ac2d6028731ac9150ac25857", "message": "Update Readme.md\n\nFixing a dead link: \"Build and Runtime Dependencies\""}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sorenmacbeth": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/98809f412d9749b9318d66c4f00967265b639ecb", "message": "update comment"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b6ee5c7d8f9f20dff7e93c6832a0cb26b6f0c384", "message": "support the --java:bean thrift compiler flag"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bryanherger": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/a57182d8e37ec5c994305fa8b3cb36de9a3cce47", "message": "Unit tests for protobuf bytes change\n\nAdded bytes field to test protobuf and updated unit test classes.  Pig\nunit test updated because it tests the schema and detects the new field."}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/737ad0a39ef642bc5666b9b24be0c69c3991234c", "message": "Correct an issue parsing bytes field from protobuf\n\ncom.google.protobuf.ByteString doesn't provide an implicit conversion\nfrom ByteString to Binary primitive, so the above change is necessary to\ndetect ByteString, explicitly convert to byte[] with toByteArray()\nmethod, and return that."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jwills": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/dfa702908a142020076ba7871ddf191ba6c70bd1", "message": "Use converter instance directly for ProtoOutFn and ThriftOutFn"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/706b862353c3433d1e4529775267191e5c48bdc9", "message": "Crunch version bump and bug fixes for Thrift types and shuffle serialization"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ankurbarua": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/b5d4740c3a35ed7a713d030ef9f49d27b14e65b0", "message": "closing the cloned HDFSIndexInput instances"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/4a92ef66830a5b21aec8bb53d9056b27d3177106", "message": "closing the cloned HDFSIndexInput instances"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/ba9e2118df9d93fea3c648065a946eb32c6a89ce", "message": "closing the cloned HDFSIndexInput instances\n\nWarning: Lucene never closes cloned IndexInputs, it will only do this on the original one. The original instance must take care that cloned instances throw AlreadyClosedException when the original one is closed. \r\n\r\nhttp://grepcode.com/file/repo1.maven.org/maven2/org.apache.lucene/lucene-core/4.0.0/org/apache/lucene/store/IndexInput.java#IndexInput.clone%28%29"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/665bf808a2df42b65f7ff4a7897454ed16c05f85", "message": "Update LuceneHdfsDirectory.java"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/1b2e859d3d50ab3ab3ba99b0616812c584a20a20", "message": "Update LuceneHdfsDirectory.java\n\nWhen using inside a webapp, there were a lot of open files in (CLOSED_WAIT state) for the index files on HDFS for every request. A lot of open files eventually chokes the host. Also, the FileSystem should not be closed as it is passed from outside and it could be used by others."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bcoverston": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/686cd65c95c884606d22dcf196ed43b0d70eac1e", "message": "Update HadoopCompat.java"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/commits/e91e2b88ea26a2ba76b77ed37ef356866203e2c5", "message": "added progress to HadoopCompat"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Chandler": {"issues": [], "commits": [{"url": "https://api.github.com/repos/twitter/elephant-bird/commits/a4dfb8b8673952b43824f1eb2eb2755719c700f7", "message": "CombinedFileInputFormat javadoc link didn't have the full path"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "steveniemitz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/483", "title": "Add an option to disable using LZO index files when computing splits", "body": "We have many jobs that read large (>10,000) numbers of LZO input files.  Because of the linear relationship of split calculation time to the number of inputs, some of these jobs can actually take longer to calculate the splits than for the mappers to actually run.\r\n\r\nResults from an trivial test job show a massive speedup when disabling using indexes when calculating splits, with no change in the number of splits actually created.\r\n\r\nWith index files enabled:\r\n``` \r\n * RESULTS:          1\r\n *   input paths:  9708\r\n *   total splits: 4854\r\n *   time [s]:      165\r\n```\r\nand disabled:\r\n```\r\n *  RESULTS:          1\r\n *   total paths:  9708\r\n *   total splits: 4854\r\n *   time [s]:        2\r\n```\r\n\r\nInternally we've been using hacky similar solution which involved overriding `getSplits()` from `MultiInputFormat` in a subclass.  While hacky, it has enabled a very significant speed up in many of our jobs.\r\n\r\nAs a follow up enhancement, we could automatically skip split calculation using LZO indexes if the number of input files is greater than some number N (which could be chosen via sampling many existing jobs).\r\n\r\nFinally, another reason one would want to enable this feature is in cloud environments.  Typically cloud blob stores (S3, GCS) have a significantly higher time-to-first-byte than say, locally hosted HDFS.  Because of this, doing many small (LZO index files are typically only a few MB) sequential reads can be very slow.  I specifically ran into this running a job in Google Dataproc processing ~10,000 files, the time to calculate splits for the job took over 40 minutes!  Disabling splitting dropped the time to ~1 second.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glennq": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/477", "title": "Make numRecordsPerBlock configurable", "body": "@isnotinvain \r\nAttempt to make numRecordsPerBlock configurable.\r\n\r\nWhen testing locally there's a strange failure for pig even when building from master (at line 166 of TestThriftToPig.java):\r\n```\r\nFailed tests:   test(com.twitter.elephantbird.pig.util.TestThriftToPig): expected:<...,{(1),(2),(3)})}-{({[}),({(and a one),(and a two)}),({(then a one, two),(three!),(FOUR!!)})}-{zero={}, three={}, two={(1,Wait.),(2,What?)]}}> but was:<...,{(1),(2),(3)})}-{({[(and a one),(and a two)}),({}),({(then a one, two),(three!),(FOUR!!)})}-{zero={}, two={(1,Wait.),(2,What?)}, three={]}}>\r\n```\r\n\r\nPassed all tests before this failure.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zhuguangbin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/476", "title": "fix LzoBinaryBlockRecordReader bug: skip bad block rather than throws IOE", "body": "In some scenario, LzoThriftBlock file may be corrupt. For example, in our company, we consume kafka data and sink to HDFS as LzoThriftBlock format using a flink streaming job. If the job crash, the writing file may be corrupt. The mapreduce job reading the corrupt file will fail . \r\n\r\nError logs are as follows: \r\n\r\norg.apache.hadoop.mapred.YarnChild: Exception running child : java.io.IOException: Premature EOF from inputStream\r\n\tat org.apache.hadoop.io.IOUtils.readFully(IOUtils.java:201)\r\n\tat com.twitter.elephantbird.mapreduce.io.BinaryBlockReader.parseNextBlock(BinaryBlockReader.java:145)\r\n\tat com.twitter.elephantbird.mapreduce.io.BinaryBlockReader.setupNewBlockIfNeeded(BinaryBlockReader.java:169)\r\n\tat com.twitter.elephantbird.mapreduce.io.BinaryBlockReader.readNextProtoBytes(BinaryBlockReader.java:87)\r\n\tat com.twitter.elephantbird.mapreduce.io.BinaryBlockReader.readNext(BinaryBlockReader.java:74)\r\n\tat com.twitter.elephantbird.mapreduce.input.LzoBinaryBlockRecordReader.nextKeyValue(LzoBinaryBlockRecordReader.java:138)\r\n\tat com.twitter.elephantbird.pig.load.LzoBaseLoadFunc.getNextBinaryValue(LzoBaseLoadFunc.java:108)\r\n\tat com.twitter.elephantbird.pig.load.ThriftPigLoader.getNext(ThriftPigLoader.java:48)\r\n\tat org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.nextKeyValue(PigRecordReader.java:211)\r\n\tat org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.nextKeyValue(MapTask.java:556)\r\n\tat org.apache.hadoop.mapreduce.task.MapContextImpl.nextKeyValue(MapContextImpl.java:80)\r\n\tat org.apache.hadoop.mapreduce.lib.map.WrappedMapper$Context.nextKeyValue(WrappedMapper.java:91)\r\n\tat org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:144)\r\n\tat org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:787)\r\n\tat org.apache.hadoop.mapred.MapTask.run(MapTask.java:341)\r\n\tat org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:164)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat javax.security.auth.Subject.doAs(Subject.java:422)\r\n\tat org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1693)\r\n\tat org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:158)\r\n\r\nThe reason is the last block of the split is incomplete because of suddenly quit of the writing steam. I think this could be more tolerant\uff0calthough the last block is corrupt, the preceding blocks of the split is OK. All we should do is skipping the corrupt block.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rjoberon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/464", "title": "added option to include the raw JSON", "body": "I found no option to \"pipe\" the raw JSON through Pig, i.e., to filter the JSON with Pig based on its content but then output the original JSON. Using JsonStorage does not work, since it does not fully support nested structures. The same is true for LzoJsonStorage. Therefore, I added an option which adds the raw JSON to the returned tuple such that the first tuple can be used for processing with Pig and the second tuple can be stored.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mflood": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/443", "title": "Changed  byteStream.getCount() to byteStream.getLength()", "body": " so that RCFilePigStorage works with hive 0.14 (and is backwards compatible with previous versions)\n\nBecause 'public int getCount()' was removed from org.apache.hadoop.hive.serde2.ByteStream.Output in hive 0.14, and getLength() is available from the parent class.\n\n   See:\n\n   https://groups.google.com/forum/#!msg/elephantbird-dev/jNPK7p_QaNs/XshS_OLXNogJ\n   https://issues.apache.org/jira/browse/PIG-3949\n   https://issues.apache.org/jira/browse/HIVE-6430\n   https://issues.apache.org/jira/secure/attachment/12642763/HIVE-6430.12.patch\n\nHive 0.13:\nhttp://svn.apache.org/repos/asf/hive/branches/branch-0.13/serde/src/java/org/apache/hadoop/hive/serde2/ByteStream.java\n\nHive 0.14:\nhttp://svn.apache.org/repos/asf/hive/branches/branch-0.14/serde/src/java/org/apache/hadoop/hive/serde2/ByteStream.java\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "venugit": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/436", "title": "Fix NPE when iterating over an input split in CompositeRecordReader.java", "body": "When iterating over input splits via DeprecatedInputFormatWrapper, DeprecatedInputFormatWrapper.java always calls mifcReader.setKeyValue(key, value) before nextValue is invoked which can call through to setKeyValue in CompositeRecordReader.java. setKeyValue requires that the currentRecordReader instance be non-null; however currentRecordReader is set to null in line 113 at the end of every input split, leading to an NPE with the next call to setKeyValue after the end of an input split. \n\nThis patch address the situation by having the setKeyValue method doing a null check for currentRecordReader and in the case it is null, invoking nextKeyValue to see if there are any more elements to be found \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikekap": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/433", "title": "Support fullcamel mode thrift in ThriftStructDescriptor", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "angushe": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/425", "title": "Fix protobuf serde errors", "body": "Hi, \n\nThis is a pull request trying to fix the same problem described in pull request #400,  and the fix has been tested successfully on Hive 0.12/0.13 and Protobuf 2.4.1/2.5.0.\n\nAny comments?\n\nThanks\nAngus\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/143", "title": "Protobuf message extension support", "body": "Hi,\n\nHere is an attempt to add protobuf message extension support to elephant-bird. \n\nAny comments would be appreciated. \n\nThanks\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/888463", "body": "Probably we could roll our own Base64 implementation just like HBase?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/888463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/888469", "body": "Or upgrade to common-codec-1.4, for new Base64(0) cannot compile in common-codec-1.3?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/888469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/916349", "body": "Hi dvryaboy,\n\nSorry for the delay.\nI have committed some codes about the \"Base64 helper\" as you suggest.\nAny comment?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/916349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/929372", "body": "Hi Guys,\n\nFirst sorry for the poor design above, for createStandardBase64 might output two different concrete classes(though nearly the same but have no common interface).  And it might cause some runtime errors.  If user uses some specific methods only existing in one version such as encodeToString in common-codecs-1.4.jar(not in common-codecs-1.3.jar) and common-codecs-1.3.jar precedes common-codecs-1.4 in java classpath at runtime, error happens.  So another commit comes.\n\nAny comment?  And Do I need to issue another pull request?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/929372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/929669", "body": "@dvryaboy, \nPull request issued.\n\n@Raghu,\nProbably, the implementation of encodeBase64(byes, isChunked) from apache common-codecs is not very efficient for Hadoop, for it will create a new Base64 instance each call.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/929669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/944698", "body": "Hi Raghu,\n\nTry the following steps to reproduce the error:\n1. ensure the common-codecs 1.3 and 1.4 in java classpath, and 1.4 precedes 1.3(which is often the case, for the latest hadoop distribution(at least since 0.21 community version and 0.20.2 Cloudera version) is packaged with 1.4).\n2. create a file with one line of random text in it. And the line length should be greater than 76(the default chunk size of Base64 in 1.4)\n3. issue something like this:\nhadoop jar dist/elephant-bird-examples-1.0.jar com.twitter.elephantbird.examples.ProtobufMRExample -Dproto.test=lzoOut dist/input dist/output\n4. Then\nhadoop jar dist/elephant-bird-examples-1.0.jar com.twitter.elephantbird.examples.ProtobufMRExample -Dproto.test=lzoIn  dist/output dist/output-1\n\nAnd the error happens:\n11/04/01 16:04:31 ERROR io.ProtobufConverter: Invalid Protobuf exception while building com.twitter.elephantbird.examples.proto.Examples$Age\ncom.google.protobuf.InvalidProtocolBufferException: While parsing a protocol message, the input ended unexpectedly in the middle of a field. \n This could mean either than the input has been truncated or that an embedded message misreported its own length.\n        at com.google.protobuf.InvalidProtocolBufferException.truncatedMessage(InvalidProtocolBufferException.java:49)\n        at com.google.protobuf.CodedInputStream.refillBuffer(CodedInputStream.java:691)\n        at com.google.protobuf.CodedInputStream.readRawBytes(CodedInputStream.java:756)\n        at com.google.protobuf.CodedInputStream.readString(CodedInputStream.java:209)\n        at com.twitter.elephantbird.examples.proto.Examples$Age$Builder.mergeFrom(Unknown Source).\n\nThe cause is that Base64 default constructor in 1.4 enables the chunking silently, which breaks the output line with more than 76 into several lines, thus TextInputFormat in hadoop can only read part of the message in one call.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/944698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/947901", "body": "Hi Raghu,\n\nSorry for the misunderstanding.  (Thanks, dvryaboy.)\n\nThe first pull request just works in current implementation of eb, for the two method Base64.encode() and Base64.decode() exist in both 1.3 and 1.4.  \n\nBut the design of the first is not elegant, for Codecs.createStandardBase64() might return two different concrete class which share no common interface between compile time and runtime(or among different runtimes), which may result in some errors.\n\nFor instance, if one user invokes Base64.encodeToString() with the 1.4 at compile time, but there is also a 1.3 at runtime and 1.3 precedes 1.4 in classpath, an instance of NoSuchMethodException is thrown, for 1.3 has no such method.\n\nSo in order to get a deterministic behavior,  the second pull request about this comes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/947901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/948042", "body": "The mismatch is quite likely to happen when used with hadoop, so we might need to include a base64 implementation with deterministic behavior just like HBase does.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/948042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2757679", "body": "Thanks for the comments, dvryaboy.\nWait for the progress to start our own redeployment. :-)\n\nBTW, I have created a issue concerning the weird package name in protobuf project.\nhttp://code.google.com/p/protobuf/issues/detail?id=345\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2757679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4070334", "body": "Thanks Dmitriy. (BTW, Do I use the correct name?)\n\nYes, we use the codegen but plan to migrate to dynamic implementation, for it\nreally produces too many codes sometimes and is not very consistent. \n\nIn current implementation of protobuf(at least 2.3.0), an ExtensionRegistry\nobject must be provided to deserialize a protobuf message serialized with\nextensions. But once the extensions are added to protobuf builtin\nExtensionRegistry, it can never be retrieved, which is very important in the\nconversion between Pig tuple and protobuf message with extension. As a result,\nwe introduced a new type named ProtobufExtensionRegistry which augments the\nbuiltin with ability to return the registered extensions back.\n\nIn order to make elephant-bird recognize the extensions, user must provided a\nProtobufExtensionRegistry instance populated with the extensions, and only\nthese registered extensions will be identified. Some test cases are modified\nto show the use of message extension, and works are still going on.\n\nBy the way, the change is backward compatible, so user don't need to modify\nexisting source codes after upgrade.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4070334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/12443", "body": "Hi Raghu,\n\nIt is intentional, for some users's Hadoop distribution comes up with the commons-codec-1.3.jar which may precede the 1.4 version in classpath. And in that case, Base64(0) fails to compile.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/12443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474381", "body": "Raghu,\n\nYes, It don't need to be a set, it is here just because I thought the code is from the base but actually from Harry Chen.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/474381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/475169", "body": "Yes, it is just a wrapper for protobuf. \nIn addition, when the extension is a type of protobuf message, with the wrapper, we can get the corresponding Java class, for it is unable to instantiate the extension like other normal fields with the containing type's Builder.newBuilderForField method. \n\nYes, Javadoc is missing, and a lot of comments need to updated too.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/475169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/475185", "body": "Actually we don't need this method since we can get all necessary information from fieldDescriptor. \nIt is here just for the the consistence with the signature of ProtobufToPig.messageToFieldSchema.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/475185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/475192", "body": "The same comment as singleFieldToFieldSchema too. :D\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/475192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/475226", "body": "extensionRegistry is used to get extension field descriptors with the containing message descriptor. Then the returned extension field descriptors are merged with the normal field descriptors to form the complete schema.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/475226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "canojim": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/410", "title": "support mahout version 0.9", "body": "support mahout changes in 0.9\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xuwenhao": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/404", "title": "Add BooleanWritableConverter to use them in SequenceFileLoader in pig", "body": "I have used BooleanWritable as a key or value in SequenceFile, since BooleanWritable is built inside hadoop, I suggest to have BooleanWritableConverter built into the elephant-bird. \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rahulrv1980": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/400", "title": "Fix for ProtobufStructObjectInspector to work correctly with Hive", "body": "Use builder class since hive expects mutable objects while message objects are immutable\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pereferrera": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/387", "title": "Update Readme.md", "body": "Adding beginner's guide to registering all needed jars in a Pig session.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gurmeetsaran": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/378", "title": "Added Support for Handling Invalid JSON Records", "body": "Hi Kevin,\n\nI have added support for handling Invalid JSON Records. Currently It just filters out invalid JSON Records. I have added support to return invalid records which can be segregated into good and bad records. This can help if we want to report invalid records to the upstream user who is generating the records.\n\nThis can be changed by setting the -invalidRecord option in the JsonLoader constructor\n Example: \nsource_data = LOAD '$input' USING com.intuit.iac.pig.udf.JsonLoader('-nestedLoad -invalidRecord') as (json:map[]);\nSPLIT source_data INTO source_data_good_record IF json#'error_string' is null,source_data_bad_record IF json#'error_string' !='';\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "housejester": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/212", "title": "Json work (Jive Software)", "body": "These commits started with a need to have a JsonConverter with nesting support to be used by the SequenceFileLoader.  There are several places in elephant-bird that do json work, and they seem to do it differently.  It seems reasonable to start to refactor those places to delegate to a single json parsing utility.  \n\nSo, the first commit simply adds JsonToPigParser, which is mostly the same code as what is in JsonLoader, but uses the jackson json parser instead of simple-json.  It supports creating nested maps from nested json, as well as detecting string values that have json data (think avro json structures that have a field that is essentially a json payload).  Has tests.\n\nThe next commit adds the JsonConverter for use with the SequenceFileLoader.  The javadoc shows usage.\n\nThe final commit modifies the JsonStringToMap to delegate to the JsonToPigParser.  I REALLY wish I could get the nesting to work here.  It was easy enough to add, but pig refused to allow me to refer to the nested structures.  What is strange is that the nesting support DOES work in the JsonConverter scenario.\n\nNext steps might be to refactor the existing Json\\* classes to delegate to the JsonToPigParser.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kevinweil": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/174861", "body": "Yes, that's a good point.  The LZO native libs must be on your java.library.path in both hadoop and pig to use the code for either.  I will update the readme.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/174861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/176112", "body": "Fixed.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/176112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/256493", "body": "Yeah, it's just not possible to use custom slicers in local mode with pig 0.6.  As Dmitriy says, this is fixed in 0.7, at which point it will begin magically working.  I'm going to close this bug now, because we'll have to do refactoring for 0.7 anyway.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/256493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/379827", "body": "Hi Scott,\n\nThe goal is to be sure that some corruption in a large file doesn't brick the whole file.  So data is written in chunks, and chunks are delimited by this 16-byte separator.  A more elegant design would allow the separator to be dynamic to ensure that any written block does not contain its separator, but there is a 2^128 chance of this happening, so we were ok with it.  And we'd welcome backwards compatible changes that address it, if you're concerned :)  But that's the overall function of the KNOWN_GOOD_POSITION_MARKER.  It also is used in making the file splittable for Hadoop-based parallel processing, which works the same way.  \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/379827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/379832", "body": "Update on this: reached out to Karthik, who wrote the protocol buffers to a file in a different file format than elephant bird uses, so it makes sense that they were unreadable for elephant bird.  Closing this as not an issue.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/379832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/382232", "body": "Looks good.  Will do...\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/382232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/382233", "body": "Pulled and integrated into kevinweil/master\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/382233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/382234", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/382234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/431366", "body": "I'm not sure what the issue is here, since it works on Linux/Mac.  I don't have the time right now to make this support the Windows environment, so I'm going to close this request.  If you have time to debug it and patch it for Windows, though, I'd gladly accept it!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/431366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/477462", "body": "Empty.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/477462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/478482", "body": "Todd, is this release backwards incompatible with CDH2?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/478482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/478485", "body": "Oops, wrong pull request :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/478485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/643931", "body": "Working on it as we speak!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/643931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/685516", "body": "Nice... internal hostnames on github :)\n\nJimmy, unless this is using Raghu's new-fangled non-codegen stuff, you shouldn't be using ProtobufWritable directly.  Can you clarify?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/685516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/722789", "body": "Hi,\n\nWe're almost ready with a version of this for Pig 0.7+.  Stay tuned!\n\nRe the JSON loader, it should be easy to divorce the LZO from it.  There's just an LZO input stream added to the chain of input streams somewhere in there, and if you take that out, it should just work.  It's been a TODO to abstract this appropriately for a while.  If you do, please commit it back!\n\nGood luck,\nKevin\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/722789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1920066", "body": "This diff LGTM, but I will let Raghu, Dmitriy, or Travis comment and merge.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1920066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1920067", "body": "Thanks btw!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1920067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "voberoi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/214219", "body": "FWIW, the first id field doesn't have to be part of the message definition to cause this bug. It seems to happen with any repeated nested message.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/214219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/216377", "body": "I'm currently working on a patch and I'll send you guys a pull request later today or tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/216377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/217744", "body": "Patch is in voberoi/elephant-bird/master.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/217744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/245602", "body": "Just initially puzzled by this behavior and slowed down. This is certainly a very-nice-to-have, though.\n\nWriting tests that run in any reasonable amount of time for large Pig scripts, for example, is impossible.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/245602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mhkt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/270984", "body": "Ah, I do see google-collect in lib, which covers it. \n\nAnd from the Guava issue-tracker, I'm guessing the Ivy issue is related to IVY-1169 (fixed in SVN):\nhttps://issues.apache.org/jira/browse/IVY-1169\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/270984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "karthikswa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/351091", "body": "Also wanted to mention that my LZO file contains a list of repeated Protobuf objects in them\n\n-Karthik.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/351091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "johanoskarsson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/656110", "body": "As Dmitriy mentioned the method is kinda awkward, it's generated by Eclipse and I didn't polish it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/656110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/694288", "body": "I have clearly not figure out git/github yet. Let me retry.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/694288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/786969", "body": "Not sure what the solution is. Looking at the code Protocol buffers 2.4 has changed some parts of the hashCode generation, perhaps that fixes the issue? Have not seen any tickets about this. Other alternative might be to generate the whole hashCode method in ProtobufWritable.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/786969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/789873", "body": "Looks ok. Guess this is the best alternative short of getting the hashCode implementation in protobuf improved.\nI will refrain from commenting on testStableHashcodeAcrossJVMs. Great work digging in the Ant codebase. :)\nI can test this out with the job that triggered the bug at some point, let's talk next week.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/789873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848623", "body": "The Fixtures.java in core seems to depend on the generated thrift classes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848641", "body": "I'm not very well versed in the Maven world. What exactly is the parent info you are referring to?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848644", "body": "We can just copy the artifacts into our public maven repo. Should be fine.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848646", "body": "I've pulled in his change. Will push soonish.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848669", "body": "I've talked to @rangadi about pushing out the hadoop-lzo to our repo or a github repo. Hopefully we can do this before we merge in this branch. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848694", "body": "Think I found it. Adding now.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/848694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856404", "body": "Hmm, not following unfortunately. What element? What does it do?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856414", "body": "So far the plugin is only used by the core, it's the only part with thrift and protobuf files.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856427", "body": "Can you assist me with this? I'm not sure what either does or the benefit of adding them.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/856427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "omalley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/787765", "body": "You should file a bug on protobuf. They are using the Descriptors.Descriptor.hashcode in a few places and should be using a hashcode that doesn't change between jvms.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/787765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "whua": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/829501", "body": "Can you show an example about how to do this?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/829501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/854895", "body": "rangadi,\nThanks a lot. It is very cool.\nCan you also show me how to do this in Pig?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/854895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "edsu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/845635", "body": "ed@curry:~/Projects/elephant-bird$ protoc --version\nlibprotoc 2.2.0\n\nI just noticed 2.3 is required?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/845635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/845651", "body": "2.3 works nicely, sorry for the noise, and thanks for the help :-)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/845651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ojilles": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/920659", "body": "Can you close this issue? Was going to fix it for you, but then found no typo's and saw later that you fixed it already :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/920659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ldespot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1066681", "body": "Thanks for the info.  Installing thrift and protobuf is more than I have time for.  Was just trying to see if the JsonLoader for Pig would solve some of the issues I was having.  Looks like I will just put pig on the backburner for a while.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1066681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tongwang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1191693", "body": "Never mind. I figured it out. ProtocolBuffersStructObjectInspector just ignores any fields that start with \"has\", which unfortunately include \"hashtags_\". \n\n```\nclass ProtocolBuffersStructObjectInspector extends ReflectionStructObjectInspector {\n\n@Override\npublic boolean shouldIgnoreField(String name) {\n     return name.startsWith(\"has\");\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1191693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "stevenbedrick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232112", "body": "Gah. That's probably what's going on... I forgot that I had protobuf 2.4 installed. I'm pretty new to protobuf; were there pretty dramatic changes between 2.3 and 2.4?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232172", "body": "Nope:\n\n```\ncompile-protobuf:\n     [exec] Result: 1\n    [mkdir] Created dir: /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/build/gen-java\n    [apply] Applied thrift to 1 file and 0 directories.\n    [apply] Applied protoc to 4 files and 0 directories.\n    [javac] Compiling 9 source files to /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/build/classes\n    [javac] Note: Some input files use unchecked or unsafe operations.\n    [javac] Note: Recompile with -Xlint:unchecked for details.\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/build.xml:117: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds\n    [javac] Compiling 45 source files to /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/build/classes\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/src/java/com/twitter/elephantbird/proto/HadoopProtoCodeGenerator.java:14: package com.google.protobuf.compiler.Plugin does not exist\n    [javac] import com.google.protobuf.compiler.Plugin.CodeGeneratorRequest;\n    [javac]                                           ^\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/src/java/com/twitter/elephantbird/proto/HadoopProtoCodeGenerator.java:15: package com.google.protobuf.compiler.Plugin does not exist\n    [javac] import com.google.protobuf.compiler.Plugin.CodeGeneratorResponse;\n    [javac]                                           ^\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/src/java/com/twitter/elephantbird/proto/HadoopProtoCodeGenerator.java:16: package com.google.protobuf.compiler.Plugin.CodeGeneratorResponse does not exist\n    [javac] import com.google.protobuf.compiler.Plugin.CodeGeneratorResponse.File;\n    [javac]                                                                 ^\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/src/java/com/twitter/elephantbird/proto/HadoopProtoCodeGenerator.java:35: cannot find symbol\n    [javac] symbol  : class CodeGeneratorRequest\n    [javac] location: class com.twitter.elephantbird.proto.HadoopProtoCodeGenerator\n    [javac]     CodeGeneratorRequest request = CodeGeneratorRequest.parseFrom(inputStream);\n    [javac]     ^\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/src/java/com/twitter/elephantbird/proto/HadoopProtoCodeGenerator.java:35: cannot find symbol\n    [javac] symbol  : variable CodeGeneratorRequest\n    [javac] location: class com.twitter.elephantbird.proto.HadoopProtoCodeGenerator\n    [javac]     CodeGeneratorRequest request = CodeGeneratorRequest.parseFrom(inputStream);\n    [javac]                                    ^\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/src/java/com/twitter/elephantbird/proto/HadoopProtoCodeGenerator.java:36: package CodeGeneratorResponse does not exist\n    [javac]     CodeGeneratorResponse.Builder responseBuilder = CodeGeneratorResponse.newBuilder();\n    [javac]                          ^\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/src/java/com/twitter/elephantbird/proto/HadoopProtoCodeGenerator.java:36: cannot find symbol\n    [javac] symbol  : variable CodeGeneratorResponse\n    [javac] location: class com.twitter.elephantbird.proto.HadoopProtoCodeGenerator\n    [javac]     CodeGeneratorResponse.Builder responseBuilder = CodeGeneratorResponse.newBuilder();\n    [javac]                                                     ^\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/src/java/com/twitter/elephantbird/proto/HadoopProtoCodeGenerator.java:63: cannot find symbol\n    [javac] symbol  : variable File\n    [javac] location: class com.twitter.elephantbird.proto.HadoopProtoCodeGenerator\n    [javac]           responseBuilder.addFile(File.newBuilder()\n    [javac]                                   ^\n    [javac] /Users/steven/Desktop/Hacking/protobuf/elephant_bird/elephant-bird/src/java/com/twitter/elephantbird/proto/HadoopProtoCodeGenerator.java:71: cannot find symbol\n    [javac] symbol  : class CodeGeneratorResponse\n    [javac] location: class com.twitter.elephantbird.proto.HadoopProtoCodeGenerator\n    [javac]     CodeGeneratorResponse response = responseBuilder.build();\n    [javac]     ^\n    [javac] Note: Some input files use or override a deprecated API.\n    [javac] Note: Recompile with -Xlint:deprecation for details.\n    [javac] Note: Some input files use unchecked or unsafe operations.\n    [javac] Note: Recompile with -Xlint:unchecked for details.\n    [javac] 9 errors\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1232172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1239081", "body": "Yup, I did run \"ant clean\". Dang. Well, thanks anyway... just out of curiosity, though, is there a particular reason that you guys aren't planning on upgrading to 2.4?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1239081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1239342", "body": "OK... I ended up just downgrading to 2.3 after a somewhat desultory stab at figuring out exactly what was broken about 2.4. \n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1239342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1508605", "body": ":-D Definitely not a bug. Thanks for the speedy reply!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1508605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1819432", "body": "Wait, cancel that- I mis-read a diff between the current version of build.xml and an old version I had lying around. The Thrift-related information in my patch is broken, please disregard this pull request.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1819432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1819718", "body": "Elephant-Bird happily compiles against Thrift 0.6 if you manually change build.xml's version check[1], though I don't know whether it actually works or not. \n\nI'll submit another pull request with a cautionary note about protobuf 2.4 (and without my mistaken note about Thrift).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1819718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "miguno": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1379547", "body": "Many thanks for your replies and all the infos, Raghu and Dmitriy!\n\nI have [asked Gerrit](https://github.com/gerritjvv/elephant-bird/issues/5) about said pull request.\n\n> Happy to hear you are using the stuff! \n\nHappy to be using what you are sharing! :-)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1379547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1433937", "body": "Many thanks, Raghu!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1433937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1522919", "body": "Hiya!\n\nAny updates on this pull request?\n\nBest, Michael\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1522919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1645244", "body": "Hi Raghu, you have an estimate when this change will be integrated?  I am asking since we are about to upgrade to a newer version of EB, and this change might be worth holding out just a little bit longer.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1645244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1663231", "body": "Oh, and this is latest ElephantBird 2.0.x from the eb-dev integration branch (commit 50ad2a64c39d1df74dc2).\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1663231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1682671", "body": "I do have the input data that produces this problem, but I'd have to narrow it down to the exact snippet that triggers the bug.  I already have a patch available, but I want to add a proper unit test + test data to it.  Will work on this next week.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1682671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1940911", "body": "I have not forgotten this issue. Stay tuned!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1940911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2694166", "body": "I sent you a pull request at https://github.com/kevinweil/elephant-bird/pull/99.\n\nThe commit is based on the eb-dev branch as of commit 06608de8d0.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2694166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2694262", "body": "I have a slightly improved patch, will send a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2694262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2694308", "body": "Edit: New pull request with slightly improved patch at https://github.com/kevinweil/elephant-bird/pull/99.  I closed the old pull request #98.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2694308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2700341", "body": "@Dmitriy:  Ah, cr*p.  The pull request should have been against eb-dev, not master.  I'll create a new pull request once I've addressed Raghu's comments.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2700341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2706566", "body": "See my [follow-up comments](https://github.com/miguno/elephant-bird/commit/86bfa834d06af954066d716cb060027a163ec827#commitcomment-708913) on [commit 86bfa834d0](https://github.com/miguno/elephant-bird/commit/86bfa834d06af954066d716cb060027a163ec827#commitcomment-708913), addressing Raghu's questions.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2706566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2894576", "body": "The patch was merged in, see https://github.com/kevinweil/elephant-bird/pull/102.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2894576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gerritjvv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1379625", "body": "Hi, I'll make the pull request. \nThere will be other commits also, just merge in the ones of interest.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1379625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1379652", "body": "OK, I've made the pull request to dvryaboy:master  as this is the repo I branched.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1379652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kurtosis0": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1385376", "body": "The previous issue is cleared up but I now get the same issue with HBaseLoader.\n\n## Pig Stack Trace\n\nERROR 2999: Unexpected internal error. null\n\njava.lang.NullPointerException\n    at org.apache.pig.impl.util.UDFContext.generateKey(UDFContext.java:190)\n    at org.apache.pig.impl.util.UDFContext.getUDFProperties(UDFContext.java:112)\n    at org.apache.pig.backend.hadoop.hbase.HBaseStorage.getNext(HBaseStorage.java:253)\n    at org.apache.pig.impl.io.ReadToEndLoader.getNextHelper(ReadToEndLoader.java:209)\n    at org.apache.pig.impl.io.ReadToEndLoader.getNext(ReadToEndLoader.java:189)\n    at org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getNext(POLoad.java:131)\n    at org.apache.pig.pen.ExampleGenerator.readBaseData(ExampleGenerator.java:166)\n    at org.apache.pig.pen.ExampleGenerator.getExamples(ExampleGenerator.java:91)\n    at org.apache.pig.PigServer.getExamples(PigServer.java:1155)\n    at org.apache.pig.tools.grunt.GruntParser.processIllustrate(GruntParser.java:630)\n    at org.apache.pig.tools.pigscript.parser.PigScriptParser.parse(PigScriptParser.java:308)\n    at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:168)\n    at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:144)\n    at org.apache.pig.tools.grunt.Grunt.exec(Grunt.java:90)\n    at org.apache.pig.Main.run(Main.java:500)\n\n#     at org.apache.pig.Main.main(Main.java:107)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1385376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "scottfines": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1942961", "body": "Hi Raghu,\n\nI've been stuck in my normal work for the last little while, and couldn't\nget back to the pull request until today.\n\nI have no objections to your comments in terms of changes made to this\nparticular pull request. However, as I'm not exactly a git expert, I think\nit might be easier to open a new pull request with my modifications (removal\nof mistake logs, that sort of thing).\n\nI'd be willing to help out with a larger conversion if that is where this\nparticular pull leads.\n\nLet me know about a fresh pull request with later updates, or if there's a\ngood tutorial on how to modify this pull request to be more up-to-date.\n\nScott\n\nOn Mon, Aug 29, 2011 at 3:46 PM, rangadi <\nreply@reply.github.com>wrote:\n\n> Hi Scott, lemme know if you have any comments about two review comments I\n> made on Aug 18th.\n> \n> You can ignore the comment with text boxes about thoughts on future\n> refactoring of these classes.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kevinweil/elephant-bird/pull/71#issuecomment-1936170\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/1942961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94895", "body": "I agree -- it certainly would be less confusing. This was my first-run attempt to get the build working on my system.\n\nI think that just one target and the underlying logic appropriately handled the -Dnoproto -Dnothrift parameters would be best in the end\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94913", "body": "I did not know that. I'll give it a shot and see if I can do this a little better\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94934", "body": "Could we just switch the RecordReader implementations depending on the presence/absence of the correct Compression codec? Seems like that would mean we could remove the ProtobufFileInputFormat entirely.\n\nI'm not sure about being able to do Thrift in the same way, though.  You'll have to forgive me if I sound stupid, but I don't use Thrift usually, so I'm unfamiliar with its file format, but it seems like it would be difficult to easily determine whether a file is Thrift, Protobuf, or neither--in which case I would think it would be better to provide three clear implementations rather than try and be too smart about it.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/94934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/95486", "body": "As it turns out,  its a mistake in how I was running my tests. When you\ncarefully and correctly define the schema in pig, the loaders are correct.\n\nHowever, applying ProtobufBytesToTuple directly as a function in pig instead\nof through a loader will not work without this section. Given its lack of\nusefulness outside of a loader, this is a limitation that is plenty\nacceptable, so I'm going to revert it.\n\nScott\n On Aug 17, 2011 9:29 PM, \"rangadi\" <\nreply@reply.github.com>\nwrote:\n\n> > @@ -54,9 +53,23 @@ public class ProtobufBytesToTuple<M extends Message>\n> > extends EvalFunc<Tuple> {\n> > return null;\n> > }\n> > try {\n> > - DataByteArray bytes = (DataByteArray) input.get(0);\n> > - M value_ = protoConverter_.fromBytes(bytes.get());\n> > - return new ProtobufTuple(value_);\n> > - Object o = input.get(0);\n> > - if(o instanceof DataByteArray){\n> > - DataByteArray bytes = (DataByteArray) input.get(0);\n> > - M value_ = protoConverter_.fromBytes(bytes.get());\n> > - return new ProtobufTuple(value_);\n> > - }\n> > - else if(o instanceof DataBag){\n> > - Iterator<Tuple> tupleIterator = ((DataBag) o).iterator();\n> > - DataBag bag = new DefaultDataBag();\n> \n> What is the intention here? In the case of a DataBag, it returns a tuple\n> with the bag. Did you forget invoking ProtobufTuple()?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kevinweil/elephant-bird/pull/71/files#r95478\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/95486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "hassanrom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2871741", "body": "Thanks for trying this out, but your example didn't work for me:\n\n$ HADOOP_CLASSPATH=/Users/hassanrom/elephant-bird/lib/guava-r09.jar:/Users/hassanrom/elephant-bird/lib/protobuf-java-2.3.0.jar ~/hadoop-0.20.2/bin/hadoop jar ~/elephant-bird/examples/dist/elephant-bird-examples-1.0.jar  com.twitter.elephantbird.examples.ProtobufMRExample -libjars=/Users/hassanrom/elephant-bird/lib/protobuf-java-2.3.0.jar,/Users/hassanrom/elephant-bird/lib/guava-r09.jar tmp/nameage.txt tmp/ebexample_out\n11/11/25 07:42:02 INFO jvm.JvmMetrics: Initializing JVM Metrics with processName=JobTracker, sessionId=\nException in thread \"main\" java.lang.NoClassDefFoundError: com/google/protobuf/GeneratedMessage\n    at java.lang.ClassLoader.defineClass1(Native Method)\n    at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:615)\n    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)\n    at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)\n    at java.net.URLClassLoader.access$000(URLClassLoader.java:58)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:197)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n    at com.twitter.elephantbird.examples.ProtobufMRExample.runLzoToText(Unknown Source)\n    at com.twitter.elephantbird.examples.ProtobufMRExample.main(Unknown Source)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.apache.hadoop.util.RunJar.main(RunJar.java:156)\nCaused by: java.lang.ClassNotFoundException: com.google.protobuf.GeneratedMessage\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:202)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n    ... 18 more\n\nIs there a way to get hadoop to output more debugging information?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2871741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2871762", "body": "What version of java are you using? I'm thinking it might be because I'm using a different one than what the jars were compiled for.\n\n$ /System/Library/Frameworks/JavaVM.framework/Home/bin/java -version\njava version \"1.6.0_29\"\nJava(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11M3527)\nJava HotSpot(TM) 64-Bit Server VM (build 20.4-b02-402, mixed mode)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2871762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2872032", "body": "OK. I finally figured out that it's using the HADOOP_CLASSPATH defined in my local hadoop-env.sh and simply ignores the one in my commandline. But I'm getting this error now:\n\n $ ~/hadoop-0.20.2/bin/hadoop jar ~/elephant-bird/examples/dist/elephant-bird-examples-1.0.jar  com.twitter.elephantbird.examples.ProtobufMRExample tmp/name_age_sample.txt tmp/ebexample_out\n11/11/25 08:34:25 INFO jvm.JvmMetrics: Initializing JVM Metrics with processName=JobTracker, sessionId=\n11/11/25 08:34:34 INFO input.FileInputFormat: Total input paths to process : 1\n11/11/25 08:34:37 INFO mapred.JobClient: Running job: job_local_0001\n11/11/25 08:34:37 INFO input.FileInputFormat: Total input paths to process : 1\n11/11/25 08:34:37 WARN mapred.LocalJobRunner: job_local_0001\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n    at java.util.ArrayList.RangeCheck(ArrayList.java:547)\n    at java.util.ArrayList.get(ArrayList.java:322)\n    at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:124)\n11/11/25 08:34:38 INFO mapred.JobClient:  map 0% reduce 0%\n11/11/25 08:34:38 INFO mapred.JobClient: Job complete: job_local_0001\n11/11/25 08:34:38 INFO mapred.JobClient: Counters: 0\n\nAny ideas? My name_age_sample.txt looks like this:\n\nAlex  10\nAbu 20\nFulan 36\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2872032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2883451", "body": "I think I got my small example to run to completion now. Is there a utility tool I can use to read the generated output in human readable form?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2883451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mihaic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2875460", "body": "I have the same issue with a fresh clone of master. Building without protocol buffers is still mentioned in Readme.md.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/2875460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matt-martin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3084030", "body": "I'm using illustrate with elephant-bird 2.1.1 (i.e. all changes up to commit 13dda2a1de31844fe07bcf4a58e94fffcb9aa374) and Pig 0.9.1.  I'm seeing a similar, but different null pointer exception within the incrCounter method:\n\njava.lang.NullPointerException\n        at org.apache.hadoop.mapreduce.TaskInputOutputContext.getCounter(TaskInputOutputContext.java:84)\n        at org.apache.pig.tools.pigstats.PigStatusReporter.getCounter(PigStatusReporter.java:55)\n        at com.twitter.elephantbird.pig.util.PigCounterHelper.incrCounter(PigCounterHelper.java:55)\n        at com.twitter.elephantbird.pig.load.JsonLoader.incrCounter(JsonLoader.java:91)\n        at com.twitter.elephantbird.pig.load.JsonLoader.getNext(JsonLoader.java:55)\n        at org.apache.pig.impl.io.ReadToEndLoader.getNextHelper(ReadToEndLoader.java:210)\n        at org.apache.pig.impl.io.ReadToEndLoader.getNext(ReadToEndLoader.java:190)\n        at org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getNext(POLoad.java:129)\n        at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.runPipeline(PigGenericMapBase.java:267)\n        at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.map(PigGenericMapBase.java:262)\n        at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.map(PigGenericMapBase.java:64)\n        at org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:144)\n        at org.apache.pig.pen.LocalMapReduceSimulator.launchPig(LocalMapReduceSimulator.java:194)\n        at org.apache.pig.pen.ExampleGenerator.getData(ExampleGenerator.java:257)\n        at org.apache.pig.pen.ExampleGenerator.readBaseData(ExampleGenerator.java:222)\n        at org.apache.pig.pen.ExampleGenerator.getExamples(ExampleGenerator.java:154)\n        at org.apache.pig.PigServer.getExamples(PigServer.java:1245)\n        at org.apache.pig.tools.grunt.GruntParser.processIllustrate(GruntParser.java:698)\n        at org.apache.pig.tools.pigscript.parser.PigScriptParser.Illustrate(PigScriptParser.java:591)\n        at org.apache.pig.tools.pigscript.parser.PigScriptParser.parse(PigScriptParser.java:306)\n        at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:188)\n        at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:164)\n        at org.apache.pig.tools.grunt.Grunt.exec(Grunt.java:81)\n        at org.apache.pig.Main.run(Main.java:553)\n        at org.apache.pig.Main.main(Main.java:108)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.hadoop.util.RunJar.main(RunJar.java:186)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3084030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3549021", "body": "Hi Dmitriy, Finally got around to making a bug for this on the JIRA.  Please see: https://issues.apache.org/jira/browse/PIG-2481 and let me know if you have any further questions. Thanks, Matt\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3549021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "a-b": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3178104", "body": "Hello, thank you for review! Main idea of this improvement: provide ability to read few levels of JSON from Flume. We already tested and it works in the Pig for us. About Trift 0.7.0 probably that was not the best idea, assumption was based on passed tests ;) Thanks!\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3178104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3305298", "body": "Can you please clarify difference?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3305298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303502", "body": "let's make it configurable\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303513", "body": "agree let's skip it\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/303513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/319406", "body": "Maybe it make sense to pass through the argument how deep json should be parsed?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/319406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "isaiah": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3213209", "body": "@rangadi \nhadoop-lzo: 0.4.14\nelephant-bird: 2.1.2\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3213209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tdunning": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3361893", "body": "Where should this be called from?  I am assuming that you are suggesting\nthat this be inserted into either the SequenceFileStorage or\nSequenceFileLoad class, but I don't see an obvious way to get the\nconfiguration it needs.\n\nOn Wed, Jan 4, 2012 at 10:07 AM, Raghu Angadi <\nreply@reply.github.com\n\n> wrote:\n> \n> Pig does not set context in some cases. We use following work around in\n> another loader. will check if this is the same issue.\n> \n> ```\n> private void ensureUDFContext(Configuration conf) throws IOException {\n>      if ( UDFContext.getUDFContext().isUDFConfEmpty()\n>           && conf.get(\"pig.udf.context\") != null) {\n>          MapRedUtil.setupUDFContext( conf );\n>    }\n> }\n> ```\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kevinweil/elephant-bird/issues/112#issuecomment-3358396\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3361893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363034", "body": "I think I found how to set this.\n\nI will fork and send a pull request.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363247", "body": "See https://github.com/kevinweil/elephant-bird/pull/113\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363730", "body": "That was not intentional.\n\nWould you like for me to back that out?\n\nOn Wed, Jan 4, 2012 at 3:45 PM, Raghu Angadi <\nreply@reply.github.com\n\n> wrote:\n> \n> Thanks Ted. We need to get Pig to fix this inconsistency as well.\n> \n> I think you auto-reformatted the whole file. was that intentional?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kevinweil/elephant-bird/pull/113#issuecomment-3363286\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3363730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3364787", "body": "Thanks.\n\nNice work, btw.\n\nOn Wed, Jan 4, 2012 at 4:46 PM, Raghu Angadi <\nreply@reply.github.com\n\n> wrote:\n> \n> merged.\n> A new pull request was not required. #113 gets updated as well.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kevinweil/elephant-bird/pull/114#issuecomment-3363922\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3364787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "cwilkes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3833619", "body": "I found the problem -- I'm compiling https://github.com/tdunning/pig-vector and it wanted version 2.1.2 of elephant bird, upped it to 2.1.5 / 2.1.6 per the metadata.xml and now that part works.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3833619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3835212", "body": "There's also this other pull request to up the version to 2.4.x:\n  https://github.com/kevinweil/elephant-bird/pull/103\nif that's easier.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3835212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dmeister": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3981628", "body": "This is not the exact same situation (it is after a DUMP but with a lot of grouping in between), but the same message\n\n```\norg.apache.pig.impl.logicalLayer.FrontendException: ERROR 1066: Unable to open iterator for alias A10\n    at org.apache.pig.PigServer.openIterator(PigServer.java:901)\n    at org.apache.pig.tools.grunt.GruntParser.processDump(GruntParser.java:655)\n    at org.apache.pig.tools.pigscript.parser.PigScriptParser.parse(PigScriptParser.java:303)\n    at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:188)\n    at org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:164)\n    at org.apache.pig.tools.grunt.Grunt.run(Grunt.java:69)\n    at org.apache.pig.Main.run(Main.java:495)\n    at org.apache.pig.Main.main(Main.java:111)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.apache.hadoop.util.RunJar.main(RunJar.java:156)\nCaused by: org.apache.pig.PigException: ERROR 1002: Unable to store alias A10\n    at org.apache.pig.PigServer.storeEx(PigServer.java:1000)\n    at org.apache.pig.PigServer.store(PigServer.java:963)\n    at org.apache.pig.PigServer.openIterator(PigServer.java:876)\n    ... 12 more\nCaused by: org.apache.pig.backend.executionengine.ExecException: ERROR 2043: Unexpected error during execution.\n    at org.apache.pig.PigServer.launchPlan(PigServer.java:1325)\n    at org.apache.pig.PigServer.executeCompiledLogicalPlan(PigServer.java:1299)\n    at org.apache.pig.PigServer.storeEx(PigServer.java:996)\n    ... 14 more\nCaused by: java.lang.NullPointerException: Signature is null\n    at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:204)\n    at com.twitter.elephantbird.pig.load.SequenceFileLoader.getContextProperties(SequenceFileLoader.java:296)\n    at com.twitter.elephantbird.pig.load.SequenceFileLoader.getContextProperty(SequenceFileLoader.java:306)\n    at com.twitter.elephantbird.pig.load.SequenceFileLoader.setLocation(SequenceFileLoader.java:411)\n    at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.hasTooManyInputFiles(MRCompiler.java:1252)\n    at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.hasTooManyInputFiles(MRCompiler.java:1266)\n    at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.aggregateScalarsFiles(MRCompiler.java:251)\n    at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.compile(MapReduceLauncher.java:470)\n    at org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.launchPig(MapReduceLauncher.java:119)\n    at org.apache.pig.PigServer.launchPlan(PigServer.java:1314)\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3981628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3997598", "body": "I not really sure if it is related, but this is the error I get now:\n\n```\njava.lang.RuntimeException: java.io.IOException: WritableName can't load class:   com.twitter.elephantbird.mapreduce.io.ProtobufWritable\nat org.apache.hadoop.io.SequenceFile$Reader.getValueClass(SequenceFile.java:1622)\nat org.apache.hadoop.io.SequenceFile$Reader.init(SequenceFile.java:1562)\nat org.apache.hadoop.io.SequenceFile$Reader.<init>(SequenceFile.java:1435)\nat org.apache.hadoop.io.SequenceFile$Reader.<init>(SequenceFile.java:1424)\nat org.apache.hadoop.io.SequenceFile$Reader.<init>(SequenceFile.java:1419)\nat com.twitter.elephantbird.mapreduce.input.RawSequenceFileRecordReader.initialize(RawSequenceFileRecordReader.java:45)\nat org.apache.pig.impl.io.ReadToEndLoader.initializeReader(ReadToEndLoader.java:174)\nat org.apache.pig.impl.io.ReadToEndLoader.getNextHelper(ReadToEndLoader.java:209)\nat org.apache.pig.impl.io.ReadToEndLoader.getNext(ReadToEndLoader.java:190)\nat org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getNext(POLoad.java:129)\nat org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.runPipeline(PigGenericMapBase.java:267)\nat org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.map(PigGenericMapBase.java:262)\nat org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.map(PigGenericMapBase.java:64)\nat org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:144)\nat org.apache.pig.pen.LocalMapReduceSimulator.launchPig(LocalMapReduceSimulator.java:194)\nat org.apache.pig.pen.ExampleGenerator.getData(ExampleGenerator.java:257)\nat org.apache.pig.pen.ExampleGenerator.readBaseData(ExampleGenerator.java:222)\nat org.apache.pig.pen.ExampleGenerator.getExamples(ExampleGenerator.java:154)\nat org.apache.pig.PigServer.getExamples(PigServer.java:1245)\nat org.apache.pig.tools.grunt.GruntParser.processIllustrate(GruntParser.java:698)\nat org.apache.pig.tools.pigscript.parser.PigScriptParser.Illustrate(PigScriptParser.java:591)\nat org.apache.pig.tools.pigscript.parser.PigScriptParser.parse(PigScriptParser.java:306)\nat org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:188)\nat org.apache.pig.tools.grunt.GruntParser.parseStopOnError(GruntParser.java:164)\nat org.apache.pig.tools.grunt.Grunt.run(Grunt.java:69)\nat org.apache.pig.Main.run(Main.java:495)\nat org.apache.pig.Main.main(Main.java:111)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:601)\nat org.apache.hadoop.util.RunJar.main(RunJar.java:156)\nCaused by: java.io.IOException: WritableName can't load class: com.twitter.elephantbird.mapreduce.io.ProtobufWritable\nat org.apache.hadoop.io.WritableName.getClass(WritableName.java:73)\nat org.apache.hadoop.io.SequenceFile$Reader.getValueClass(SequenceFile.java:1620)\n... 31 more\nCaused by: java.lang.ClassNotFoundException: com.twitter.elephantbird.mapreduce.io.ProtobufWritable\nat java.net.URLClassLoader$1.run(URLClassLoader.java:366)\nat java.net.URLClassLoader$1.run(URLClassLoader.java:355)\nat java.security.AccessController.doPrivileged(Native Method)\nat java.net.URLClassLoader.findClass(URLClassLoader.java:354)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:423)\nat java.lang.ClassLoader.loadClass(ClassLoader.java:356)\nat java.lang.Class.forName0(Native Method)\nat java.lang.Class.forName(Class.java:264)\nat org.apache.hadoop.conf.Configuration.getClassByName(Configuration.java:819)\nat org.apache.hadoop.io.WritableName.getClass(WritableName.java:71)\n... 32 more\n```\n\nIt cannot find the class ProtobufWritable, but the elephant bird library is registered (it is also seen in the stack trace).\n\nPIG Script:  \n    DATA = load 'hdfs://XXX  USING com.twitter.elephantbird.pig.load.SequenceFileLoader (\n       '-c com.twitter.elephantbird.pig.util.TextConverter',  \n    ILLUSTRATE DATA;\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/3997598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4005771", "body": "This is the comple script before the LOAD/ILLUSTRATE:\n\n```\nregister '../fs-c/*.jar'                                                                                          \nregister '../fs-c/lib/com.google.guava-guava-11.0.1.jar'                                                           \nregister '../fs-c/lib/com.google.guava-guava-bootstrap-11.0.1.jar'                                                 \nregister '../fs-c/lib/protobuf-java-2.3.0.jar'                                                                     \nregister '../fs-c/lib/elephant-bird-2.1.8.jar' \n```\n\nThank you ver much.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/issues/comments/4005771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Piyushbalwani": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/comments/20620925", "body": "when i implement examples/src/main/pig/nested_json_get_distinct_items_from_nested_array.pig \r\n\r\ngrunt> register /home/piyush/Desktop/pro/json-simple-1.1.1.jar ;\r\ngrunt> register /home/piyush/Desktop/pro/elephant-bird-core-4.1.jar ;\r\ngrunt> register /home/piyush/Desktop/pro/elephant-bird-pig-4.1.jar ;\r\ngrunt> json_data = load '/home/piyush/Desktop/sample.json' using com.twitter.elephantbird.pig.load.JsonLoader('-nestedLoad'); \r\n\r\n2017-01-26 08:49:50,123 [main] ERROR org.apache.pig.tools.grunt.Grunt - ERROR 2998: Unhandled internal error. org/slf4j/LoggerFactory\r\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/comments/20620925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "azymnis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/404566", "body": "I think that you can remove some more of these imports.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/404566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/404569", "body": "Same here. You can get rid of some of these imports too.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/404569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617594", "body": "Will casting set the realSplit field? Would that not return null?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617619", "body": "Never mind. Figured it out by myself.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/617619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624216", "body": "Nah, this is abstract and is never used.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624228", "body": "Ok will fix.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624238", "body": "Wait, same what? This one is not deprecated.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624292", "body": "Done. Fixed for all deprecated classes.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624399", "body": "Its just git being silly... This class sticks around.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624402", "body": "Actually scratch that. You were right. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/624402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657298", "body": "This should be\n\n```\njobConf.setOutputFormat(anOutputFormat.class)\n```\n\nright?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657304", "body": "Actually scratch that. You are right.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862767", "body": "Tracing into the cascading code, this is how the `getRecordReader()` is invoked:\n\n```\nprivate RecordReader makeReader( int currentSplit ) throws IOException {\n    LOG.debug( \"reading split: {}\", currentSplit );\n    return inputFormat.getRecordReader( splits[ currentSplit ], conf, Reporter.NULL );\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862782", "body": "Only if this reporter is used to do anything.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/862782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "AlexisTp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609422", "body": "it was breaking build on my ant 1.8.3. Dunno why.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609428", "body": "I did it on first commit, but problem is that you can't filter files which are content of jar files => Manifest was a merged with lots of signatures and really bad headers. Possible improvement would be adding correct MANIFEST headers.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609436", "body": "Cglib has this convention, and many others. I'd really use nodep.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609502", "body": "elephant-bird/build.xml:100: The specified destination is a directory\nMaybe this is not convenient for you, but it made the job for me, I wasn't really watching and I am neither a good ant scripter.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609528", "body": "Ok, i'll do, also i'll remove any English writing crimes I did. If I can.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/609528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "panisson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/656849", "body": "'fields'  is applied to all json levels. Controlling the load of json fields in all levels is the best way to achieve the fastest load and lowest memory usage.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/656849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657042", "body": "it depends on the json structure. If you have a complex json and just want to access some field deep in the structure, avoiding tuple wrapping and creation of new maps and objects could make some difference. Besides, if someone have to bother adding a field specification to speed up processing, why not use it in the most effective way?\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657109", "body": "yes, you should specify all its parents, and I agree that it should be well documented (I'm working on this point :)\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/657109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/664641", "body": "I agree with you, this does not work well in hierarchies where fields have the same name in different levels.\nIn fact, the fields filtering feature is not essential for us, and at this point I think that this feature should be more discussed and should probably be submitted as a separated patch.\nI propose two different solutions for this:\n1. Simplifying the patch by completely removing the fields filtering feature;\n2. Re-implement it as top-level field filtering, as proposed by rangadi in previous comments.\nLet me know what would be the best solution.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/664641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/666710", "body": "yes, it is inadequate, and I would like to implement it the way you explained. However I think dvryaboy would like to maintain it in order to preserve the single-arg constructor for backwards compatibility. I'm thinking in three constructors: the no-arg constructor, a single-arg constructor for backwards compatibility and a two-args constructor with the options.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/666710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667224", "body": "Ok, thanks for the clarification. I will implement a single-arg constructor with the -inputFormat as an option.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667619", "body": "Not sure if this is the best way to do it, but I think it is better than super(optString + \" -inputFormat=\" + LzoTextInputFormat.class.getName());\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/667619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "xstevens": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736428", "body": "LzoBaseLoadFunc used it so I assumed it was okay.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736434", "body": "Fair point. I thought about doing that initially but I was trying to do minimal constructor changes on you. I'll add this though.\n", "reactions": {"url": "https://api.github.com/repos/twitter/elephant-bird/pulls/comments/736434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}