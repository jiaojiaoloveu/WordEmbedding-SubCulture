{"_default": {"1": {"instagibbs": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12244", "title": "decodescript only returns non-segwit p2sh for redeemScript/witnessScript", "body": "Seems useful to return both types of addresses.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12244/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6697a7089441deded836332e7ce3b4a1a9a3cbcd", "message": "add test for unconfirmed balance between restarts"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba8f30e7b0b0bbb365fcca95b0c33af31f28ef4", "message": "don't attempt mempool entry for wallet transactions on startup if already in mempool"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11900", "title": "[script] simplify CheckMinimalPush checks, add safety assert", "body": "the two conditions could simply never be hit as `true`, as those opcodes have a push payload of size 0 in `data`.\r\n\r\nAdded the assert for clarity for future readers(matching the gating in the interpreter) and safety for future use.\r\n\r\nThis effects policy only.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11545", "title": "[wallet] Support CMV signing of 17~20 key template", "body": "Useful in cases where a larger signing set is possible than legacy p2sh(segwit v0?), and for general testing.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11120", "title": "[RPC] verifytxoutproof returns object including blockhash", "body": "Allows direct use of the proof to get block header related info without additional parsing, and more directly mirrors `gettxoutproof` arguments.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10360", "title": "[WIP] [Wallet] Target effective value during transaction creation", "body": "Previous fee-targeting behavior lead to needless looping, excessive fees, and surprising behavior. \r\n\r\nThis PR changes the \"fee targeting\" algorithm by considering \"effective value\" of considered inputs instead of simply trying to hit an absolute fee, seeing if it failed, then trying again with the estimated total fee at the end of the loop.\r\n\r\nThe algorithm also doesn't select any coin with non-positive effective value.\r\n\r\nIn short:\r\n`effectiveValue = nValue - feeRate*num_bytes_for_signed_input`\r\n\r\nSee https://github.com/bitcoin/bitcoin/issues/10247 , https://github.com/bitcoin/bitcoin/issues/7664 \r\n\r\nTo do:\r\n1) Previously the wallet just kept stuffing fees until it succeeded. In this PR there is no strict sanity checks on the loop, so if there is some error where we are just shy and cannot re-balance change output to pay for it, it will look forever(I have no idea if this is possible since we should be over-estimating at worst). We should probably have something like https://github.com/bitcoin/bitcoin/pull/10333 for re-balancing, and then a sanity check to error out if a specified feerate cannot be hit for some reason post-coin selection, perhaps after a fixed number of tries. \r\n2) This breaks the `coinControl->nMinimumTotalFee` option. I can't conceive a use for it, so I want to remove this anyways.  https://github.com/bitcoin/bitcoin/pull/10390", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96560969", "body": "remove?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96560969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40393961", "body": "\"remembering [that] mistakes\" or \"keeping in mind that\" perhaps?  \n\nGood work :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40393961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "randyrossi": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12230", "title": "Core dump on bitcoind 0.15.1 with -mempoolexpiry=24", "body": "<!-- Describe the issue -->\r\nI upgraded my full node to bitcoin 0.15.1 last night from 0.14.1 and saw that less than 24 hours later I got a core dump:\r\n\r\n/usr/local/bin/bitcoind -mempoolexpiry=24\r\nbitcoind: net_processing.cpp:1096: void ProcessGetData(CNode*, const Consensus::Params&, CConnman*, const std::atomic<bool>&): Assertion `!\"cannot load block from disk\"' failed.\r\nAborted (core dumped)\r\n\r\nThe previous version (0.14.1) would run indefinitely without ever crashing.  However, I just started using -mempoolexpiry=24 option to cut down on memory usage and I'm wondering if this change causes the issue.  (So 2 things changed that resulted in core dump, version and additional argument).\r\n\r\n<!--- What behavior did you expect? -->\r\nShould not crash.\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nOnly saw this once.\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nBinary distribution of 0.15.1 for linux 64 bit\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nx86_64  - AMD A4-4000 APU with Radeon(tm) HD Graphics\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "theuni": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12229", "title": "Shutdown deadlock in SyncWithValidationInterfaceQueue", "body": "I'm hoping to take a look at this at some point in the next day or two, but logging here in case I forget. Ping @TheBlueMatt.\r\n\r\nTrigger conditions: I was catching up after ~1week offline, and interrupted halfway through.\r\n\r\nThe backtrace is straightforward:\r\n```\r\n(gdb) thread apply all bt\r\nThread 3 (Thread 0x7fbb37fff700 (LWP 31792)):\r\n#0  syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38\r\n#1  0x00007fbb75a9aa16 in std::__atomic_futex_unsigned_base::_M_futex_wait_until(unsigned int*, unsigned int, bool, std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#2  0x000055d498e501e0 in SyncWithValidationInterfaceQueue() ()\r\n#3  0x000055d498e34965 in CChainState::ActivateBestChain(CValidationState&, CChainParams const&, std::shared_ptr<CBlock const>) ()\r\n#4  0x000055d498e36847 in ProcessNewBlock(CChainParams const&, std::shared_ptr<CBlock const>, bool, bool*) ()\r\n#5  0x000055d498d32464 in ProcessMessage(CNode*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, CDataStream&, long, CChainParams const&, CConnman*, std::atomic<bool> const&) [clone .constprop.1364] ()\r\n#6  0x000055d498d3dd80 in PeerLogicValidation::ProcessMessages(CNode*, std::atomic<bool>&) ()\r\n#7  0x000055d498cee7cd in CConnman::ThreadMessageHandler() ()\r\n#8  0x000055d498cce47f in void TraceThread<std::function<void ()> >(char const*, std::function<void ()>) ()\r\n#9  0x000055d498d065cb in std::thread::_Impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() ()\r\n#10 0x00007fbb75a9cc80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#11 0x00007fbb75d6d6ba in start_thread (arg=0x7fbb37fff700) at pthread_create.c:333\r\n#12 0x00007fbb7520241d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n\r\nThread 2 (Thread 0x7fbb61e98700 (LWP 31778)):\r\n#0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n#1  0x000055d499034a1b in leveldb::(anonymous namespace)::PosixEnv::BGThreadWrapper(void*) ()\r\n#2  0x00007fbb75d6d6ba in start_thread (arg=0x7fbb61e98700) at pthread_create.c:333\r\n#3  0x00007fbb7520241d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n\r\nThread 1 (Thread 0x7fbb76384740 (LWP 31765)):\r\n#0  0x00007fbb75d6e98d in pthread_join (threadid=140442075133696, thread_return=0x0) at pthread_join.c:90\r\n#1  0x00007fbb75a9cb97 in std::thread::join() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#2  0x000055d498d037ab in CConnman::Stop() ()\r\n#3  0x000055d498cc9630 in Shutdown() ()\r\n#4  0x000055d498c9e2a3 in AppInit(int, char**) ()\r\n#5  0x000055d498c9164f in main ()\r\n```", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6365c5c3d277af355c51d7aee969f261dc5a751", "message": "depends: fix libzmq's needless linking against libstdc++\n\nThis is broken for a number of reasons, including:\n- g++ understands \"-static-libstdc++ -lstdc++\" to mean \"link against whatever\n  libstdc++ exists, probably shared\", which in itself is buggy.\n- another stdlib (libc++ for example) may be in use"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3830b6e0659106458c941029f5b2e789e3cb38a3", "message": "net: use CreateSocket for binds"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df3bcf89e49ec951baa3778a2452c0d1237ec053", "message": "net: pass socket closing responsibility up to caller for outgoing connections\n\nThis allows const references to be passed around, making it clear where the\nsocket may and may not be invalidated."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3b2f576bb368a0857e808dcbd24b2dcb8bef2d", "message": "net: Move IsSelectableSocket check into socket creation\n\nWe use select in ConnectSocketDirectly, so this check needs to happen before\nthat.\n\nIsSelectableSocket will not be relevant after upcoming changes to remove select."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1729c29dedc64d900a1a1c686a56e16fa5417fa1", "message": "net: split socket creation out of connection\n\nAlso, check for the correct error during socket creation"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/126999d1cc1b2513cb2ca62a70db0cd6a912a7ba", "message": "depends: fix zmq build with mingw < 4.0"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7f7e2cd340c088e82d09090eb275b98b34a9812", "message": "threads: add a thread_local autoconf check"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11457", "title": "Introduce BanMan", "body": "BanMan is not a bad Man, he's just a different class of Man. He's an ex-ConnMan Man, looking to take a different path and make a new namespace for himself.\r\n\r\nBeware BanMan's banhammer as he banishes bandits with the bandwidth to jam him. Not standing for non-canon, he\u2019ll ban and he\u2019ll ban. Some heroes wear capes, but BanMan? A Bandana.\r\n\r\n--\r\n\r\nDespite the diff size, this is mostly move-only. It breaks the ban/unban functions out of CConnman and into a new class because, while logically bans are tied to connections, they're really just entries in a database. Like CConnman, a global is still required due to RPC (and qt). I plan to address this along with CAddrMan, which I'll be breaking out next.\r\n\r\nThis also makes testing easier as different implementations can be dropped in.\r\n\r\nThere are a few small behavioral changes here, which are pretty insignificant:\r\n- Banning no longer implies disconnecting. If you want both, you need to call both.\r\n- For simplicity, The ban db is read in the constructor, meaning that it happens in init rather than net.\r\n- RPC returns RPC_DATABASE_ERROR if the bandb is not loaded. This should not be possible now, but the idea is for future changes to allow us to disable p2p but still interact with the ban commands.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11387", "title": "net: remove more CConnman globals", "body": "This continues some of the great work that @benma has been doing.\r\n\r\nMore work towards a CConnman with no globals, so that we can test instances against themselves.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11227", "title": "WIP: switch to libevent for node socket handling", "body": "Not yet ready for review. This can be considered a staging area. Chunks of this will be PR'd until only the actual libevent switch-over is ready, at which point this PR should be ready for review.\r\n\r\nThese changes remove our old select() loop for socket handling in favor of libevent, which uses epoll/kqueue/etc. as a back-end. In addition to being faster and more efficient, this allows us to drop some annoying restrictions, namely that select can only handle 1024 sockets in practice on most systems.\r\n\r\nNote that this does _not_ yet make the switch to libevent for outgoing connections, that work is happening in parallel, and will be easier to merge after this.\r\n\r\nAlso, for any reviewers, several of these commits would individually introduce some regressions or slow-downs, but they've been split up in order to clarify why some of the changes are being made.\r\n\r\nDepends on:\r\n- [x] #10663 \r\n- [ ] #11363\r\n\r\nTodo:\r\n- Add a ton of documentation\r\n- RAII the libevent structures\r\n- Add some tests where possible", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11194", "title": "fees: optimize decay", "body": "As discussed briefly last week with @morcos and @sdaftuar.\r\nRather than jumping around, visit elements in-order. This produces a noticeable speedup.\r\n\r\nI added the assertions because it's not entirely clear from the existing code if the bucket size is allowed to differ from the individual sizes. I can't imagine that that could be the case, so I'll remove them if preferred.\r\n\r\nAdditionally, I assume we could skip UpdateMovingAverages() altogether if no entries have ever been added, but it's not obvious to me how to do that without breaking something.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10800", "title": "build: add lto configure option", "body": "Addresses #10616. Please see the commit messages and note that AR/RANLIB may need to be set manually!\r\n\r\nThis is testing the waters for LTO. There are a few unknowns:\r\n- A boost LTO issue was addressed here, but others may remain for different libs/versions\r\n- ar/ranlib detection will likely turn out to be annoying\r\n- Not yet tested with Gitian\r\n\r\nI propose adding this as-is (maybe after Gitian testing), and seeking feedback. I suspect that there will be quite a few platforms/toolchains where it's broken, but there's only so much we can do about it.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738", "title": "net: drop custom CNode refcounting in favor of smart pointers", "body": "This is a more involved version of #10697, which instead completely gets rid of our nasty AddRef() and Release() in favor of automatic lifetime management.\r\n\r\nSpecial care must be taken, though, to only delete CNodes from a single thread, and to control which thread that is. Eventually, this should move to the message processing thread, so that it's not possible to hit cs_main from the main network thread.\r\n\r\nIn order to do this safely, this PR introduces 2 new generic smart pointer types: strong_ptr and decay_ptr. They provide a functionality that I've wanted for a long time: the ability to safely decay a shared_ptr to a unique_ptr. That sounds somewhat nonsensical at first, but it's useful to be able to make copies of a pointer for a while, stop, wait until only one remains, then delete with guaranteed safety.\r\n\r\nPlease read shared_ptr.h and check out the tests before groaning. I think this is a very cool (and completely safe) pattern.\r\n\r\nThis functionality could potentially be accomplished with a shared_ptr and polling ptr.unique(), but that's inherently racy because a new copy could be created simultaneously. Even moving to a local instance and calling .unique() on that one is not safe, as a weak_ptr could be upgraded simultaneously.\r\n\r\nInstead, a strong_ptr is created which acts like a unique_ptr but allows shared_ptrs to be \"loaned\" out. Once a strong_ptr is moved into a decay_ptr, the strong_ptr is reset and no new loans may be created. The decay_ptr tracks the lifetime of the loaned copies, and knows whether or not they have all expired. This can be queried, with no race concerns, with decay_ptr::decay().\r\n\r\nAdditionally, if the loaned shared_ptrs for some reason outlive the strong_ptr/decay_ptr, they are safely deleted once the last loaned shared_ptr expires. So there is no risk of leaks.\r\n\r\nIn order to make review easier, these changes were made in a few stages:\r\n1. Where possible, make functions agnostic to the type of pointer being used\r\n2. Switch to shared_ptr but keep existing refcounting on top\r\n3. Switch to strong_ptr\r\n4. Drop existing refcounting and now-unnecessary locking.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9566", "title": "threading: use std::chrono for timestamps", "body": "Obviously not for 0.14.\r\n\r\nThough boost's chrono hides the racy gmtime() issue nicely, it's really just using gmtime_r internally. This switches to the same thing, but without the boost indirection.\r\n\r\nPRing this separately from other boost removals because it's not a 1:1 replacement.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4039765", "body": "@jgarzik thanks\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4039765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4135450", "body": "I considered this, but I don't really think the pros outweigh the cons. My plan was to auto-generate the .qrc on-the-fly based on the contents of QT_TS/RES_ICONS/RES_IMAGES/RES_MOVIES, but I'm afraid it would break in subtle ways between different versions of qt tools. Best to handle it by hand, I'm afraid.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4135450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4135812", "body": "Correct. No, the QT_TS part was forgotten in the doc update.\n\nAs I said, it could be generated on the fly, but surely this happens too infrequently to justify that?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4135812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16683264", "body": "@sipa: These are non-debug, so significantly smaller than typical dev objects. They're also gzip compressed (see 2 lines down). A full linux build that way results in a ~17mb ccache dir. For reference, the exact same build _with_ debug is 105mb. That's probably more inline with what you're seeing?\n\nAlso, as I see it, there's really no use in keeping more than one version of each object around, since each cache matches a single build config. It either matches the current revision or it can be discarded. So my target with the 100mb figure was the largest reasonable compressed store of one version of all objects. \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16683264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47940649", "body": "This should go in \"install\". Also, should depend on the host being OSX, not on the OSX_SDK availability.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47940649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60530410", "body": "Sure, will remove.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60530410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/78611064", "body": "Why remove this? See https://docs.travis-ci.com/user/multi-os/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/78611064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93371912", "body": "@MarcoFalke Yea, I don't think there's any way around configuring twice for that. There is a built-in that uses the cache to save some time, though.\r\n\r\nJust change the:\r\n```\r\nmake $MAKEJOBS check VERBOSE=1\r\n```\r\nto\r\n```\r\nmake $MAKEJOBS distcheck VERBOSE=1\r\n```\r\nI think that should actually work these days.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93371912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30450634", "body": "Any reason for not using \"Bitcoin Core\" here? These set the volume descriptor that OSX ends up using for mounting.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30450634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15939469", "body": "I don't see how this helps. @laanwj is correct on both counts. Besides that, it already exits with a descriptive message:\n\n``` sh\ncory@cory-i7:~/dev/bitcoin(master)$ sudo mv /usr/bin/libtoolize /usr/bin/libtoolize.old\ncory@cory-i7:~/dev/bitcoin(master)$ ./autogen.sh \nCan't exec \"libtoolize\": No such file or directory at /usr/bin/autoreconf line 195.\nUse of uninitialized value in pattern match (m//) at /usr/bin/autoreconf line 195.\nCan't exec \"libtoolize\": No such file or directory at /usr/share/autoconf/Autom4te/FileUtils.pm line 345, <GEN3> line 5.\nautoreconf: failed to run libtoolize: No such file or directory\nautoreconf: libtoolize is needed because this package uses Libtool\n```\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15939469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67598315", "body": "I believe this hasn't been necessary in the past because qt assumed more\nabout win builds than other environments. If that's the case, and it's\nneeded now, we'll need to make sure we only check for this for 5.6+.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67598315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/68169976", "body": "This seems to be using pkg-config in the if(!pkgconfig) case?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/68169976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110225451", "body": "We need to make it so that this doesn't signal failed qt detection if libqminimal isn't found. It'd be fine if it were just test_bitcoin-qt disabled, but this would also disable the bitcoin-qt build which has no dependency on the lib.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110225451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142265041", "body": "This was clearly broken before, but it didn't matter because we define QT_STATICPLUGIN elsewhere. Let's just delete this.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142265041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158160304", "body": "Nah, this is ok.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158160304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Sjors": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12223", "title": "Log origin IP of RPC request ", "body": "Currently when launching `bitcoind` with `-debug=rpc` the log is rather sparse, e.g. `ThreadRPCServer method=validateaddres`. If possible I'd like it to show the origin IP.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12223/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191", "title": "bech32-optimized QR codes", "body": "@sipa said in #11991:\r\n\r\n> I haven't looked at the code, but inside QR codes it's advantageous to use uppercase Bech32 (it will result in a smaller QR encoding).\r\n\r\nIs that still the case when rendered as URI?\r\n\r\nShould amounts be added in a different way?\r\n\r\nWould that involve amending BIP-21?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12058", "title": "Slow catchup for recent blocks on non-SSD drive", "body": "It often takes more than half an hour to catch up on less than a day of blocks. I suspect the bottleneck is disk I/O because I don't have an SSD Drive.  Here's a recent [log](https://gist.github.com/Sjors/b72dbc71c1a3d1a8627adc60518ddd72).\r\n\r\nIt's a Fusion drive, which means some part of it is SSD, but it's up to the OS where to put stuff. Maybe there's some way to give MacOS a hint which files to be on the SSD part? (Or maybe it eventually figures this out).\r\n\r\nI'm not using `txindex`.\r\n\r\nI've noticed things tends to speed up a bit as the used dbcache grows.\r\n\r\n@sipa wrote in #10647:\r\n> The database is stored in a special compact format on disk. When loaded into memory it's done an quickly-accessible way that is several times larger than the disk version. Loading the whole thing in memory needs around 8 GB.\r\n\r\n> There could perhaps be an option to load the whole database into memory at startup to speed things up later if you actually have that much dbcache configured....\r\n\r\nIs there an experimental branch for this? Depending on the level of rocket science required, I might take a stab at it myself.\r\n\r\nI'm buying an external SSD drive, so will be able to compare. Although apparently that might still not perform nearly as well as an internal SSD drive. Though again, loading a whole bunch of date in one operation might help there as well.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11959", "title": "OSX Uninstaller (which can also delete blockchain data)", "body": "Sister ticket for #993 Windows.\r\n\r\nFor reasons I can't wrap my around there's doesn't seem to be a way for OSX applications to clean up after themselves after a user drags them into the trash can.\r\n\r\nOne workaround could be for QT to check if `~/Application Support/Bitcoin` already exists. If not, it would store the blockchain and other non-wallet data _in the application package itself_ and put a symlink in `~/Application Support/Bitcoin` so Bitcoind can find it. This might be quite brittle though.\r\n\r\nAnother approach is to put an uninstall button inside QT, somewhere in the settings. This would work for Linux as well. In Windows it would just launch the standalone uninstaller. The uninstall button would have a check box:\r\n\r\n\"Do you want to delete the blockchain data? [x GB]\", checked by default\r\n\r\nIn addition it would say: \"your wallet will remain in [PATH]\" and will be used again if you decide to reinstall in the future.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11959/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11950", "title": "Avoid generating UI elements from code", "body": "Please don't do this:\r\n<img width=\"926\" alt=\"schermafbeelding 2017-12-19 om 16 28 31\" src=\"https://user-images.githubusercontent.com/10217/34164373-ade137e6-e4d9-11e7-84b2-c23e7b35ea31.png\">\r\n\r\nOr this:\r\n<img width=\"530\" alt=\"schermafbeelding 2017-12-19 om 17 18 28\" src=\"https://user-images.githubusercontent.com/10217/34166976-b2c86782-e4e0-11e7-907a-eea9fd435b09.png\">\r\n\r\nQT builder has all sort of nifty tricks to keep the layout pretty, but we can't leverage that when parts of the UI are generated from code. Editing the XML files is probably fine though.\r\n\r\nNotice how the amount field in interface builder is given full width:\r\n\r\n<img width=\"789\" alt=\"qt builder\" src=\"https://user-images.githubusercontent.com/10217/34164414-bfe89006-e4d9-11e7-919e-913a072e838f.png\">\r\n\r\nThe currency selection dropdown is added later:\r\n\r\n<img width=\"740\" alt=\"schermafbeelding 2017-12-19 om 16 39 06\" src=\"https://user-images.githubusercontent.com/10217/34164924-292f7e5c-e4db-11e7-9228-f78ce2f7e5a7.png\">\r\n\r\nIf I then try to add some UI element to the right of the currency dropdown (like a bech32 check-box), things get ugly:\r\n\r\n<img width=\"754\" alt=\"schermafbeelding 2017-12-19 om 16 35 30\" src=\"https://user-images.githubusercontent.com/10217/34164755-ab3aee78-e4da-11e7-9ff1-ebdd393eddaa.png\">\r\n\r\nNote how \"format\" is too far to the right, and this checkbox should really be snapped to the left. Of course it can be fixed with even more UI generating code, but I've been there, it's a dark place :-)\r\n\r\nI'll try to refactor this specific example.\r\n\r\nI'll be careful not to create a giant xml diff in the process.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11950/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11875", "title": "Snoei: a.k.a. how to translate technical jargon", "body": "This is hilarious as it sounds like gardening advice.\r\n<img width=\"432\" alt=\"snoei\" src=\"https://user-images.githubusercontent.com/10217/33882565-cd7c1450-df38-11e7-9261-64c6fd5f3ee0.png\">\r\n\r\n\r\nI suggest sticking to the English technical terms, appending a translation in brackets where needed. For custom settings like `prune=`, it's safe to assume the user knows the English word.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11863", "title": "Compact Client Side Filtering  for Light Clients (Neutrino server-side support)", "body": "@Roasbeef, @martelletto  and @aakselrod implemented server-side support for this protocol in the btcd client, and the lnd Lightning client is able to use this.\r\n\r\nAre there any prerequisites for implementing server-side support for this protocol in Bitcoin Core, at least as a proof of concept?\r\n\r\n* [draft BIP](https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki)\r\n* [video presentation](https://www.youtube.com/watch?v=7FWKc8lM4Ek) about the neutrino protocol\r\n* [btcd implementation](https://github.com/btcsuite/btcd/compare/master...Roasbeef:segwit-cbf)\r\n* [mailinglist discussion](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014474.html)", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11840", "title": "Sometimes missing desktop notification for new transactions", "body": "I noticed while testing #11403 that there was no desktop notification (OSX) upon receiving a transaction. This is occasionally happening on master as well. I'm trying to find a reliable way to reproduce.\r\n\r\nSteps to (sometimes???) reproduce on master 497d0e014:\r\n1. launch QT a fresh (testnet) wallet\r\n2. generate receive address\r\n3. navigate to Overview tab\r\n4. use another wallet to send funds\r\n5. notice the transaction appears in the list\r\n6. notice no popup notification appears\r\n\r\nI'm not getting notifications for `v0.15.1` anymore either, both mainnet and testnet.\r\n\r\nRebooting OSX made this issue go away both on v0.15.1 as well as the SegWit WIP. So at least we can rule out that this has anything to do with #11403. Unfortunately I can't reproduce the issue after this reboot, so I'll continue debugging next time it happens.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11828", "title": "Request no-RBF via BIP21/70 URI (no125=1)", "body": "@TheBlueMatt [suggested](https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-349113282):\r\n\r\n> There may be cases where not using RBF is preferable, and I've suggested many times that people who want that put something like no125=1 in their URIs do so, and we should honor such things [...]\r\n\r\nSupporting such a `no125` flag seems trivial.\r\n\r\nFor [BIP-21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki) URI's: `bitcoin:175t...45W?amount=20.3&no125=1` would disable RBF by default.\r\n\r\nFor [BIP-70](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) a new field `optional boolean no125 = 1;` could be added to `PaymentDetails`.\r\n\r\nIn addition to disabling RBF by default when this flag is set, the wallet could warn users when they try to activate it. \r\n\r\nSteps (?):\r\n\r\n- [ ] 1. implement BIP-21 change as a proof of concept: WIP Sjors/bitcoin#12\r\n- [ ] 2. propose an amendment to the BIP-21 (cc @luke-jr)\r\n- [ ] 3. merge BIP-21 implementation\r\n- [ ] 4. implement BIP-71 change as a proof of concept\r\n- [ ] 5. propose an amendment to the BIP-70\r\n- [ ] 6. merge BIP-70 implementation\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11720", "title": "iOS Deployment Target for RPC", "body": "The iPhone 8 and X come with 256 GB variants. Plenty to store the current blockchain, certainly enough when you prune it. Most people who can afford such a phone also have pretty liberal data plans. This means there's at least some demographic out there that can practically run a full node on their phone.\r\n\r\nIDB and syncing more than a day still need wifi (can be done in the background when the phone is charging). Connections to other nodes would need some throttling on mobile. Maybe a smart app could even use SPV or trust a server when it's not fully synced.\r\n\r\nI wonder how hard it would be to create an iOs target (for bitcoind) based on the OSX target.\r\n\r\nBuilding a full fledged iOs app is out of scope here, so it would just be the RPC server. A native wallet app would be an RPC client. Leaving out QT should also make that a lot easier.\r\n\r\nSome configuration flags that might make it slightly easier:\r\n\r\n```\r\n./configure --without-gui --with-incompatible-bdb\r\n```\r\n\r\n* `--without-gui`: this removes the dependency on QT (used for the UI)\r\n* `--with-incompatible-bdb`: no need to be backwards compatible on a new OS\r\n\r\nIf I understand correctly `--without-gui` also removes the dependency on OpenSSL once #11622 is merged (maybe that requires an additional step, or maybe it already does).\r\n\r\nI have experience with iOs itself so I can probably make a demo app around this library, but build pipelines are out of my league.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11720/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11717", "title": "QT: allow custom fee increase / bump for RBF", "body": "Currently the UI doesn't give you a choice when increasing the fee of an RBF transaction:\r\n<img width=\"352\" alt=\"custom please\" src=\"https://user-images.githubusercontent.com/10217/32980386-df931d5e-cc65-11e7-888a-3812eb159bac.png\">\r\n\r\nThe [bumpfee](https://github.com/bitcoin/bitcoin/blob/v0.15.1/src/wallet/rpcwallet.cpp#L2960) RPC command has an option `totalFee`, so the UI could add support for this.\r\n\r\nI think the best approach would be to reuse parts of the send screen.\r\n\r\n<img width=\"624\" alt=\"schermafbeelding 2017-11-18 om 13 44 42\" src=\"https://user-images.githubusercontent.com/10217/32980467-180e6b92-cc67-11e7-81f5-b41b60172159.png\">\r\n\r\n* \"Pay only the required fee\" would be replaced by \"Bump fee by minimum permitted amount\". \r\n* The custom per kilobyte field would show an error if the fee is too low.\r\n* \"Request RBF\" would be replaced with \"Disable RBF\" \r\n\r\n I don't know if the required information for that UI can be obtained with the current RPC methods though. It boils down to reusing the existing transaction screen, but hiding UI elements that aren't properly supported for RBF yet (e.g. changing the recipient).", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11716", "title": "Wallet downgrade tool", "body": "The issue of downgrading a wallet came up in a [gist](https://gist.github.com/sipa/125cfa1615946d0c3f3eec2ad7f250a2#gistcomment-2261785) related to #11403.\r\n\r\nUse cases I've seen so far:\r\n1. downgrade future SegWit format to v0.15.1 compatible format\r\n2. ~opt-out of HD (e.g. by saving individual keys and deleting the seed)~ (see discussion on #11730)\r\n\r\nA separate tool (~or RPC command~) would allow keeping the wallet code itself less complex.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11645", "title": "BitcoinQT downcases bitcoin://... address on OSX", "body": "When entering bitcoin://1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX in the Safari address bar, it opens BitcoinQT, but then says: \r\n \r\n<img width=\"432\" alt=\"invalid\" src=\"https://user-images.githubusercontent.com/10217/32615780-e8e88142-c570-11e7-962d-d3f7c4abe346.png\">\r\n\r\nDev hint: try [RCDefault](http://www.rubicode.com/Software/Bundles.html#RCDefaultApp) in order to make OSX open these links using a custom build.\r\n\r\nTested with v0.15.1rc1 as well as master. Using QT 5.8.0.\r\n\r\nThis doesn't happen when I start QT from the command line:\r\n`Bitcoin-Qt bitcoin://1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX`\r\n\r\nIt does happen if I use:\r\n`open bitcoin://1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX`\r\n\r\nSo it's not a Safari issue.\r\n\r\nUsing log statements I found that this downcase happens somewhere before `bool parseBitcoinURI` in `guiutil.cpp`. This function actually strips `//` from the URI because:\r\n\r\n```  \r\n//    Cannot handle this later, because bitcoin:// will cause Qt to see the part after // as host,\r\n```\r\n\r\nSee also #854.\r\n\r\nThis function is called from `PaymentServer::handleURIOrFile` in `paymentserver.cpp`. \r\n\r\nBefore that `bool PaymentServer::eventFilter` uses:\r\n\r\n```cpp\r\n      QFileOpenEvent *fileEvent = static_cast<QFileOpenEvent*>(event);\r\n      ...\r\n          handleURIOrFile(fileEvent->url().toString());\r\n```\r\n\r\nLower case already happened here.\r\n\r\nIf I use a single slash, there's no downcase, altough the UI then complains about the initial slash.\r\n\r\nSo perhaps something changed in QT and we need to do this earlier. Or it's OSX that's broken.\r\n\r\nThis does behave, suggesting that indeed something is treating the address as a host name:\r\n`open bitcoin:1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX`\r\n\r\nQT documentation for [QUrl](http://doc.qt.io/qt-5/qurl.html#UrlFormattingOption-enum) suggests this is expected behavior:\r\n\r\n> Note that the case folding rules in Nameprep, which QUrl conforms to, require host names to always be converted to lower case, regardless of the Qt::FormattingOptions used.\r\n\r\nThat remark has been in their documentation more or less [forever](https://github.com/qt/qtbase/blame/5.8/src/corelib/io/qurl.cpp#L247-L249). \r\n\r\nI can't find a workaround, unless there's some way to get additional information out of [QFileOpenEvent](http://doc.qt.io/qt-5/qfileopenevent.html).", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11564", "title": "[Qt] display fees in Sat / vByte instead of (\u03bc/m)BTC/kB ", "body": "Currently the send screen displays the fee in terms of (\u03bc/m)BTC/kB, depending on a global preference. When entering a custom fee the user can select (\u03bc/m)BTC using a dropdown. The resulting numbers are quite hard to read, often with five leading zeros.\r\n\r\n<img width=\"589\" alt=\"schermafbeelding 2017-10-26 om 18 06 10\" src=\"https://user-images.githubusercontent.com/10217/32047392-62ff7c5a-ba78-11e7-9505-a08580e7e7a3.png\">\r\n\r\nThis makes it too easy to make an off-by-ten mistake, especially because the wallet doesn't display fiat values.\r\n\r\nI think Sat per Virtual Byte (vByte?) makes for more readable numbers. People generally find numbers between 0.01 and 100 easy to work with, because they're used to cents and dollars. Several fee estimators currently use Sat/vByte, where 1 is the minimum relay fee, 10-100 is the usual range, people start complaining when it goes over.\r\n\r\nI also think this choice is quite durable, even if the price increases by orders of magnitude and fees get worse (low fees would not really be a UX issue). Assuming fees in dollar terms stay in the same range, or even a factor ten more, Sat/vByte produces easy to read numbers for a price range of $500 (100 - 1000 sat/vByte) to $5 million (0.01 - 0.10 sat/vByte).\r\n\r\nIn this case the (\u03bc/m)BTC dropdown could be removed from the fee UI; I don't think the users currency preference (\u03bcBTC / mBTC / BTC) should be applied to the fee UI. This preference makes sense for the users balance, for a transaction amount and the absolute fee value.\r\n\r\nThere would still some confusion if people look at other fee estimators on the web which currently often user fee per byte, based on non-segwit transactions.\r\n\r\nHopefully the industry will trend towards a single metric for fees, so people can develop an intuition for them, decreasing the likeliness of mistakes.\r\n\r\nI can make a PR is people think this is a good idea.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11564/reactions", "total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ac8907ce6ab095b37858d6e96946b59ce1c13f", "message": "[qt] receive tab: bech32 address opt-in checkbox\n\nWhen launched with -adresstype=legacy the checkbox will be hidden."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cbbbd71432bffa4089ff34dd6b09f017c4adaf7", "message": "[Wallet] Use RBF by default in QT only\n\nGUI wallet uses RBF by default, regardless of -walletrbf.\n\nRPC and debug console in the GUI remain unchanged; they don't\nuse RBF by default, unless launched with -walletrbf=1."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f455a24da7b098d390b6405ae19826d0c5684c3e", "message": "[net] add seed.testnet.bitcoin.sprovoost.nl to testnet DNS seeds"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12200", "title": "Bind functional test nodes to 127.0.0.1", "body": "Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\r\n\r\nTo test, make an arbitrary whitespace change to `src/bitcoind.cpp` and recompile. This normally resets the firewall's memory.\r\n\r\nEasiest way to reproduce a popup without running the test suite:\r\n\r\n```sh\r\nsrc/bitcoind -regtest -bind=127.0.0.1 # No popup\r\nsrc/bitcoind -regtest # Popup\r\n```\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12152", "title": "[WIP] misc. backwards compatibility tests", "body": "Builds on top of #12134.\r\n\r\nTests:\r\n- [x] v0.16 generated wallets don't work on older versions\r\n- [x] the five SegWit wallet scenario's (including bech32 address)  \r\n\r\nTest framework changes (or: things I'm doing wrong):\r\n- [ ] method to copy wallet\r\n- [ ] method to push and pop wallet backups\r\n- [ ] remember network topology between start and restart\r\n\r\nSuggestions for additional tests welcome. I'll make individual PR's later.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12134", "title": "Build previous releases and run functional tests ", "body": "Some scenarios where it might be useful to run tests against earlier releases:\r\n\r\n* creating a wallet with #11403's segwit implementation, copying it to an older node and making sure the user didn't lose any funds  \r\n* future consensus changes\r\n* P2P changes (e.g. to make sure we don't accidentally ban old nodes)\r\n\r\nUsage:\r\n\r\n```sh\r\ncontrib/devtools/backwards_compatibility.py -f v0.15.1\r\ntest/functional/downgrade.py\r\n```\r\n\r\nHaving to build these old versions on developer machines is probably unacceptably slow, so tests that involve older versions probably shouldn't run by default. Travis can cache earlier releases, so it should be able to run these tests with little performance impact.\r\n\r\nI only tried version v0.15.1 and v0.14.2, ~which involved a small patch due to #11389~. I don't know how hard it would be to keep supporting earlier releases with similar patches in the future.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12119", "title": " [wallet] use P2WPKH change output if any destination is P2WPKH or P2WSH", "body": "If `-changetype` is not explicitly set, then regardless of `-addresstype`, the wallet will use a ~`bech32` change address~ `P2WPKH` change output if any destination is `P2WPKH` or `P2WSH`.\r\n\r\nThis seems more intuitive to me and more in line with the spirit of [BIP-69](https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki).\r\n\r\nWhen combined with #11991 a QT user could opt to use `bech32` exclusively without having to figure out how to launch with `-changetype=bech32`, although so would #11937.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12098", "title": "[scripts] lint-whitespace: add param to check last N commits", "body": "E.g. before you push three commits to Github and upset Travis, check if you didn't make any whitespace mistakes:\r\n```sh\r\ncontrib/devtools/lint-whitespace.sh 3\r\n```\r\n\r\nThis is slightly more convenient than doing:\r\n```sh\r\nTRAVIS_COMMIT_RANGE=HEAD~3...HEAD contrib/devtools/lint-whitespace.sh\r\n```\r\n  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12097", "title": "[scripts] lint-whitespace: use perl instead of grep -P", "body": "MacOS does not support `grep -P` out of the box. This change makes\r\nit easier for developers to check for whitespace problems locally.\r\n\r\nBased on [this](https://stackoverflow.com/a/16658690) and [this](https://serverfault.com/a/504387) Stack Exchange answer.\r\n\r\nTested with:\r\n```sh\r\nexport TRAVIS_COMMIT_RANGE='fe78c9a...62e0453'\r\ncontrib/devtools/lint-whitespace.sh \r\nThis diff appears to have added new lines with tab characters instead of spaces.\r\nThe following changes were suspected:\r\n\r\ndiff --git a/src/test/bignum_tests.cpp b/src/test/bignum_tests.cpp\r\n@@ -0,0 +1,110 @@\r\n+\tnum.setint64(n);\r\n```\r\n  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11989", "title": "[build] .gitignore: add QT Creator artifacts", "body": "These files appear on OSX if you follow the [QT Creator instructions](https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md#using-qt-creator-as-ide).\r\n\r\nThe files don't contain anything terribly useful that might warrant including them in the repo instead.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11962", "title": "[net] add seed.bitcoin.sprovoost.nl to DNS seeds", "body": "ACK https://github.com/bitcoin/bitcoin/blob/master/doc/dnsseed-policy.md\r\n\r\nI'm willing to keep it up and running at least throughout 2018, unless something bad happens.\r\n\r\nSame setup as #11917, but with a dedicated instance.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11761", "title": "[WIP] [docs] initial QT documentation", "body": "I'll update this as I figure out how everything is tied together, but I think it's a useful enough start.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160912890", "body": "- [ ] will look into `ccache` behavior.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160912890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151981268", "body": "Fixed typo.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151981268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "laanwj": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219", "title": "More granular net logging", "body": "#11583 moved many network logging messages to the `net` category, including the version messages for new connections.\r\n\r\nI think this was a good idea in itself, however this means that the only way to get information about connections and abnormal things happening is to enable *all* network logging. This includes every single message and transaction, bogs down performance and fills up the disk quickly.\r\n\r\nI'd like a category for just low-traffic network logging.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11949", "title": "\"make docs\" or such to build doxygen documentation", "body": "Would be nice to have a \"make docs\" that builds the developer documentation.\r\nIt is hosted on https://dev.visucore.com/bitcoin/doxygen/, but some users prefer an offline copy (and one up to date with their specific branch).\r\n\r\nEssentially it would do:\r\n```bash\r\ndoxygen doc/Doxyfile\r\n```\r\n(but taking into account build/source directories if separate)\r\n\r\nIt could also build other documentation in the future.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11902", "title": "NAT-PMP port forwarding support", "body": "After repeated issues with libminiupnpc's security we disabled uPNP by default since release 0.11.1.\r\n\r\nHowever this means that by default there is no port forwarding, resulting in nodes not being reachable for incoming connections by default (unless they use tor), and a reduction in the number of externally reachable nodes compared to total nodes.\r\n\r\nNAT-PMP ([RFC 6886](https://tools.ietf.org/html/rfc6886)) is another common automatic port forwarding protocol that would be much less risky than UPnP, because it uses fixed-size UDP packets instead of XML parsing. It would be fairly straightforward to support that without introducing a new dependency.\r\n\r\n(NAT-PMP was succeeded by PCP, or [RFC 6887](https://tools.ietf.org/html/rfc6887) which is backwards compatible, probably preferable to support the lowest common denominator) \r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11844", "title": "Bitcoin core build on Android NDK", "body": "It would be useful to have support for building against the Android NDK in the repository as well as the depends system.\r\n\r\nGreenaddress is currently doing this and has [scripts and patches for doing so](https://github.com/greenaddress/bitcoin_ndk) in a separate repository.\r\n\r\nIntegrating this into the upstream build would likely be more maintainable, and it would make it possible to make the ndk build part of the gitian build set at some point, providing higher reassurance for the Android executables.\r\n\r\n(sister issue for iOS is #11720)", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11844/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11449", "title": "Release schedule for 0.16.0", "body": "Here is a proposed release schedule for 0.16.0. Like for previous major releases I've added 6 months to the previous release schedule (#9961), as well as two extra for segwit wallet release 0.15.1.\r\n\r\n```\r\n2018-03-02\r\n-----------\r\n- Open Transifex translations for 0.16\r\n- Soft translation string freeze (no large or unnecessary string changes until release)\r\n- Finalize and close translations for 0.14\r\n\r\n2018-03-16\r\n-----------\r\n- Feature freeze (bug fixes only until release)\r\n- Translation string freeze (no more source language changes until release)\r\n\r\n2018-04-06\r\n-----------\r\n- Split off `0.16` branch from `master`\r\n- Start RC cycle, tag and release `0.16.0rc1`\r\n- Start merging for 0.17 on master branch\r\n\r\n2018-05-01\r\n-----------\r\n- Release 0.16.0 final (aim)\r\n```\r\nIf any specific dates or timeframes are a problem, or there's any mistakes, let me know.\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11449/reactions", "total_count": 16, "+1": 0, "-1": 0, "laugh": 0, "hooray": 16, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4c942e3615435c9e5d7ff0cefd935be08768d0c", "message": "Merge #12220: Error if relative -walletdir is specified\n\nec527c6 Don't allow relative -walletdir paths (Russell Yanofsky)\n\nPull request description:\n\n  This makes it an error to explicitly specify a non-absolute -walletdir path, and also adds a debug.log warning if a relative rather than absolute -datadir path is configured.\n\n  Specifying paths relative to the current working directory in a daemon process can be dangerous, because files can fail to be located even if the configuration doesn't change, but the daemon is started up differently.\n\n  Specifying a relative -datadir now adds a warning to the debug log. It would not be backwards-compatible to forbid relative -datadir paths entirely, and it could also be inconvenient for command line testing.\n\n  Specifying a relative -walletdir now results in a startup error. But since the -walletdir option is new in 0.16.0, there should be no compatibility issues. Another reason not to use working directory paths for -walletdir specifically is that the default -walletdir is a \"wallets\" subdirectory inside the datadir, so it could be surprising that setting -walletdir manually would choose a directory rooted in a completely different location.\n\nTree-SHA512: 67cbdae677f82487a9031c5ec96b0205a488ab08718a0f4f49365e025119f3d7f6cfc88ba1eba04c1ecd8b9561a5b2c42e2e1a267af7c08c76b83e5e361f5a31"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e839d6570d9d0575a63ac45d35ad8bc248aeaacc", "message": "Merge #12166: [docs] Clarify -walletdir usage\n\n97c3cad [docs] Clarify -walletdir usage (John Newbery)\n\nPull request description:\n\n  After discussion with @ryanofsky around #11687 , I think this documentation is a bit clearer for how the new `-walletdir` argument works.\n\nTree-SHA512: f279cab82524dbc0d75e6f9891f0e228ec4c8d0df3e16f351057fa243ddd263ff786f05383fd00a09b89edcc07dab211be5b64387f77271edf8af0177bcf667d"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898f560b55aba2070f188b0223ef2beefcdede8b", "message": "Merge #12206: qa: Sync with validationinterface queue in sync_mempools\n\nfa1e69e qa: Sync with validationinterface queue in sync_mempools (MarcoFalke)\n\nPull request description:\n\n  Commit e545dedf72bff2bd41c93c93eb576929fce37112 moved `TransactionAddedToMempool` to the background scheduler thread. Thus, adding a transaction to the mempool will no longer add it to the wallet immediately. Functional tests, that `sync_mempools` and then call into wallet rpcs will race against the scheduler thread.\n\n  Fix that race by flushing the scheduler queue.\n\n  Fixes #12205; Fixes #12171;\n  References #9584;\n\nTree-SHA512: 14d99cff9c4756de9fad412f04e6d8e25bb9a0938f24ed8348de79df5b4ee67763dac5214b1a69e77e60787d81ee642976d1482b1b5637edfc4892a238ed22af"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17180fa608100ce1aab3df74c9db17c342c0380d", "message": "Merge #12210: wallet: Deprecate addwitnessaddress\n\ncdf3e03 wallet: Deprecate addwitnessaddress (Wladimir J. van der Laan)\n\nPull request description:\n\n  Now that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`.\n\nTree-SHA512: f33b1c33d200fa8f1a0fba424b30e9c2a78147cde8bb0a3fd41194b77980454cddfb23da256cd6fe78726e87161deaa23357d0764e74c3eb83177cc518afa49c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdf3e03a723b1a0242199672878caf1543ba8124", "message": "wallet: Deprecate addwitnessaddress\n\nNow that segwit is natively supported by the wallet, deprecate the hack `addwitnessaddress`."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7978be899646194b6abc5b34a7f6a3311490033", "message": "Merge #12101: Clamp walletpassphrase timeout to 2^30 seconds and check its bounds\n\n134cdc7 Test walletpassphrase timeout bounds and clamping (Andrew Chow)\n0b63e3c Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds (Andrew Chow)\n\nPull request description:\n\n  Fixes #12100\n\n  Makes the timeout be clamped to 2^30 seconds to avoid the issue with sign flipping with large timeout values and thus relocking the wallet instantly. Unlocking for at most ~34 years should be sufficient.\n\n  Also checks that the timeout is not negative to avoid instant relocks.\n\nTree-SHA512: 426922f08c54e323d259e25dcdbebc2cd560708a65111ce6051493a7e7c61e79d9da1ea4026cc0d68807d728f5d7c0d7c58168c6ef4167b94cf6c2877af88794"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adce1de9a6ce5b41c4117b62f705bca53bf97216", "message": "Merge #12198: rpc: Add deprecation error for `getinfo`\n\n49e5f3f rpc: Add deprecation error for `getinfo` (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add a short informative deprecation message when users use `getinfo`, that points them to the new calls\n   here to get the different information fields.\n  This is meant to be temporary, for one release only.\n\nTree-SHA512: 4fccd8853762d0740d051d9e74cdea5ad6f8d5c0ba67d69e8dd2ac8a1538d8270c1a1fab755d9f052ff3b3677753b09138c8c5ca0bc92d156de90413cd5c1814"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e5f3ff7e940b8da7d9e7252d2b1e27bd192ae4", "message": "rpc: Add deprecation error for `getinfo`\n\nAdd a short informative deprecation message when users use `getinfo`,\nthat points them to the new calls where to get the different information fields."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66e3af709dd444b2d85e15c56f4608c700ff82ee", "message": "Merge #11904: Add a lock to the wallet directory\n\n2f3bd47 Abstract directory locking into util.cpp (MeshCollider)\n5260a4a Make .walletlock distinct from .lock (MeshCollider)\n64226de Generalise walletdir lock error message for correctness (MeshCollider)\nc9ed4bd Add a test for wallet directory locking (MeshCollider)\ne60cb99 Add a lock to the wallet directory (MeshCollider)\n\nPull request description:\n\n  Fixes https://github.com/bitcoin/bitcoin/issues/11888, needs a 0.16 milestone\n\n  Also adds a test that the lock works.\n\n  https://github.com/bitcoin/bitcoin/pull/11687 will probably rework this to a per-wallet lock instead of just the walletdir, but this fixes the current issue\n\nTree-SHA512: 98e52d67f820e3b8f919cf361ffbb7d928f1bd67603e0ed26c5076ea02d9b3a90c3535ddf7329f3b88171396fa28dd3c87adab3577a8a217bd1e4247bda99138"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc91b7699732efc20ac1526383515c944b66d70", "message": "Merge #12173: [Qt] Use flexible font size for QRCode image address\n\n59f9e2a Use flexible font size for QRCode image address (Jonas Schnelli)\n\nPull request description:\n\n  Bech32 addresses are currently cut off in the QRCode image in the GUI receive tab.\n  This adds a simple font size calculation logic that \"must\" (down to 4pt) fix into the given image width.\n\n  Examples OSX HiDPI:\n  <img width=\"332\" alt=\"bildschirmfoto 2018-01-12 um 11 25 40\" src=\"https://user-images.githubusercontent.com/178464/34896144-c0c65d76-f78c-11e7-93e1-94dc8e203269.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 25 46\" src=\"https://user-images.githubusercontent.com/178464/34896145-c0edfe1c-f78c-11e7-8c09-c15155e2160e.png\">\n\n  Examples Ubuntu non HIDPI:\n  <img width=\"314\" alt=\"bildschirmfoto 2018-01-12 um 11 27 51\" src=\"https://user-images.githubusercontent.com/178464/34896151-c88347f4-f78c-11e7-8a03-df8049dcfed6.png\">\n  <img width=\"322\" alt=\"bildschirmfoto 2018-01-12 um 11 27 42\" src=\"https://user-images.githubusercontent.com/178464/34896152-c8bb881c-f78c-11e7-89d2-6f04ec608a19.png\">\n\nTree-SHA512: d749763fb748b146f77fd8d88fb7d29b07a46cde0b0f303a4006ae9cc3521b3c2e8ab43b828e243514109379898b198552e17b8f316c5a869b0cc8246b054b86"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44080a90a29292df96e92f22242785c5040000a1", "message": "Merge #12118: Sort mempool by min(feerate, ancestor_feerate)\n\n0a22a52 Use mempool's ancestor sort in transaction selection (Suhas Daftuar)\n7abfa53 Add test for new ancestor feerate sort behavior (Suhas Daftuar)\n9a51319 Sort mempool by min(feerate, ancestor_feerate) (Suhas Daftuar)\n6773f92 Refactor CompareTxMemPoolEntryByDescendantScore (Suhas Daftuar)\n\nPull request description:\n\n  This more closely approximates the desirability of a given transaction for\n  mining, and should result in less re-sorting when transactions get removed from\n  the mempool after being mined.\n\n  I measured this as approximately a 5% speedup in removeForBlock.\n\nTree-SHA512: ffa36b567c5dfe3e8908c545a459b6a5ec0de26e7dc81b1050dd235cac9046564b4409a3f8c5ba97bd8b30526e8fec8f78480a912e317979467f32305c3dd37b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db16ec82793beb941a7db2750e774246d7fbc21", "message": "Merge #11796: [tests] Functional test naming convention\n\n5fecd84 [tests] Remove redundant import in blocktools.py test (Anthony Towns)\n9b20bb4 [tests] Check tests conform to naming convention (Anthony Towns)\n7250b4e [tests] README.md nit fixes (Anthony Towns)\n82b2712 [tests] move witness util functions to blocktools.py (John Newbery)\n1e10854 [tests] [docs] update README for new test naming scheme (John Newbery)\n\nPull request description:\n\n  Splitting #11774 into two parts -- this part updates the README with the proposed naming convention, and adds some checks to test_runner.py that the number of tests violating the naming convention doesn't increase too much. Idea is this part of the change should not introduce merge conflicts or require much rebasing, so reviews of the complicated bits won't become invalidated too often; while the second part will just be file renames, which will require regular rebasing and will introduce merge conflicts with pending PRs, but can be merged later, and should also be much easier to review, since it will only include relatively trivial changes.\n\nTree-SHA512: b96557d41714addbbfe2aed62fb5a48639eaeb1eb3aba30ac1b3a86bb3cb8d796c6247f9c414c4695c4bf54c0ec9968ac88e2f88fb62483bc1a2f89368f7fc80"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9501dc27b336fc20adb0c367e0904b57bd507f51", "message": "Merge #12127: Remove unused mempool index\n\n8e617e3 Remove unused mempool index (Suhas Daftuar)\n\nPull request description:\n\n  We haven't used the \"mining_score\" index since 0.12, so remove it.\n\nTree-SHA512: ae37b8663194986eaeecfc2bbeca7ecb4ae6f0d8384515fa218cbc939a580d4b9f7f997c5297c3f1b3c3a0651edb092f373ac9a4808aaec30d38cb99d5f3ed70"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2eaba300bc13c556e3cb05420dcc91ae12e1d0", "message": "Merge #12133: [qa] Fix rare failure in p2p-segwit.py\n\n35c2b1f Fix rare failure in p2p-segwit.py (Suhas Daftuar)\n\nPull request description:\n\n  Avoid creating very small utxos that would violate an assumption in\n  test_non_standard_witness.\n\n  Fixes #11953\n\nTree-SHA512: 5fb7ae68f8731df819bab365923a84568b57227e4112f711fc2574767d15be83acd3e99d0d5bac94a42411a958b13a2119468babefed14efcfdda180004d4166"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6286873e50248717afd7c56c664cee069c76fa", "message": "Merge #12112: Docs: Remove the ending slashes from RPC URI format.\n\n2be2b5d Remove the ending slashes from RPC URI format. (Jacky C)\n\nPull request description:\n\n  This resolves #11861 (A confusion caused by incorrect information in the release notes).\n\n  More information can be found at #11861.\n\nTree-SHA512: 35f85854b01a84acd5358e0c9deff881205111120277fa7cdf270801933c2603c2ae04fa4d55d233675c7298c2d37cc60c919f89e7e6091f5c61884025775ab0"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9a49e6e7e8df13d80a6dc3245ce7ef041942e9b", "message": "Merge #12001: [RPC] Adding ::minRelayTxFee amount to getmempoolinfo and updating help\n\naad3090 [rpc] Adding ::minRelayTxFee amount to getmempoolinfo and updating mempoolminfee help description (Jeff Rade)\n\nPull request description:\n\n  These are RPC document changes from #11475 which is now merged.  Took into consideration comments from #11475 and #6941 for this PR.\n\n  Biggest change here is when calling `getmempoolinfo`, will now show the `minrelaytxfee` in the JSON reponse (see below):\n\n  ```\n  $ bitcoin-cli getmempoolinfo\n  {\n    \"size\": 50,\n    \"bytes\": 13102,\n    \"usage\": 70480,\n    \"maxmempool\": 300000000,\n    \"mempoolminfee\": 0.00001000,\n    \"minrelaytxfee\": 0.00001000\n  }\n  ```\n\n  Fixes #8953\n\nTree-SHA512: 5ca583961365ee1cfe6e0d19afb0b41d542e179efee3b3c5f3fcf7d3ebca9cc3eedfd1434a0da40c5eed84fba98b35646fda201e6e61c689b58bee9cbea44b9e"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5961b23898ee7c0af2626c46d5d70e80136578d3", "message": "Merge #12062: Increment MIT Licence copyright header year on files modified in 2017\n\n595a7ba Increment MIT Licence copyright header year on files modified in 2017 (Akira Takizawa)\n\nPull request description:\n\n  Edited via:\n\n  $ contrib/devtools/copyright_header.py update .\n\n  ps) It is the same commit as #9450\n\nTree-SHA512: 274bfcd6cf2914315ed52f6db773a68800ce9d6bd225a3142654483f0bbc3fd865009e62f9d954f65765d038c626e55d2a64e37e16843809adc2f67abe659b6d"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04cb48df9616fe107f6514f3cd12e77e3da66ab", "message": "Merge #12077: [Docs] Correct `sendmany` curl example\n\n0d663f8 Fixes issue #12067 `sendmany` curl example is wrong. (251)\n\nPull request description:\n\n  The example curl command in the `sendmany` RPC help results in an error:\n  ```\n  {\"result\":null,\"error\":{\"code\":-1,\"message\":\"JSON value is not an object as expected\"},\"id\":\"curltest\"}\n  ```\n  because - as reported in #12067 - the second element in the `params` array should be a JSON object.\n\n  This PR removes the escaped backslash and quote characters that serialize the JSON object to a string and make it a plain JSON object:\n\n  ```\n  curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", {\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}, 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n  ```\n\n  which (when executed with valid addresses) yields the expected result:\n\n  ```\n  {\"result\":\"c446213f06ee4489660ed5dc47d65daca27345d0b5fc5bd344ebca78b2d87356\",\"error\":null,\"id\":\"curltest\"}\n  ```\n\nTree-SHA512: 9be055515175f633d21cbe2f6735e08709af306639b31e9f2bf83d9eb1cf4dbbf807951728649f3c091fde96dbf4ea732ee903dec9589f90ea1e046b832b90d0"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63a4dc10876bfc61c2e87d35dcf17da2f0f8c316", "message": "Merge #12027: [Docs] Remove boost --c++ flag from osx build instructions\n\n5ec3eae remove brew c++ flag (Pablo Fernandez)\n\nPull request description:\n\n  the c++ is not needed since the listed brew formulas no longer have this option. It also raises a warning that may generate confusion.\n\nTree-SHA512: 37c0ebee2901947a21abfcd646ae0c7e73293568f37db9b130d1c521aa4222b0e82e21614e6ac60bb5347c34ef15bbd24eb8066ebf576ea3da9f365be9a4d062"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efae3663a772169f9ef5172d76f938e0bb02eca4", "message": "Merge #11984: doc: Update OpenBSD build instructions for 6.2 (cont'd)\n\n6915f93 doc: Update OpenBSD build instructions for 6.2 (Wladimir J. van der Laan)\n\nPull request description:\n\n  (this continues #11442)\n  There is no more need to install a new compiler. This simplifies instructions a lot.\n\n  From discussion with @fanquake on IRC I first wanted to add a new section for 6.2, but that made the document a complex mess. I think it's good enough (and more maintainable too) to only support the most recent release.\n\n  Includes #11976.\n\n  I moved the \"resource limits\" section to the end as I didn't seem to need it with clang, but this may vary based on source changes and the phase of the moon so it's good to keep it as optional extra information.\n\nTree-SHA512: 15794afec6d682323d0aa13c7616d009acb7fce8b0ef5d2106261f2ebd86b7b2fe66040c04860d9bf2f0c1934fbdc2b594b8c09a98accfaac04f3daf9a6cadf3"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5180a86c96bc05d2a731f70f36aae28ab5a3fad4", "message": "Merge #11517: Tests: Improve benchmark precision\n\n760af84 Removed CCheckQueueSpeed benchmark (Martin Ankerl)\n00721e6 Improved microbenchmarking with multiple features. (Martin Ankerl)\n\nPull request description:\n\n  The benchmark's KeepRunning() used to make a function call for each call, inflating measurement times for short running code. This change inlines the critical code that is executed each run and moves the slow timer updates into a new function.\n\n  This change increases the average runtime for Trig from 0.000000082339208 sec to 0.000000080948591.\n\nTree-SHA512: 36b3bc55fc9b1d4cbf526b7103af6af18e9783e6b8f3ad3adbd09fac0bf9401cfefad58fd1e6fa2615d3c4e677998f912f3323d61d7b00b1c660d581c257d577"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20166f8a448156f476f3e23825f59ebec36424a9", "message": "Merge #11748: [Tests] Adding unit tests for GetDifficulty in blockchain.cpp.\n\n3e1ee31 [Tests] Adding unit tests for GetDifficulty in blockchain.cpp. (sean)\n\nPull request description:\n\n  blockchain.cpp has low unit test coverage. This commit is intended\n  to start improving its code coverage to reasonable levels. One or more\n  follow up commits will complete the task that this commit is starting\n  (though the usefulness of this commit is not dependent upon later\n  commits).\n\n  Note that these tests were not written based upon a specification of how\n  GetDifficulty *should* work, but rather how it actually *does* work. As\n  a result, if there are any bugs in the current GetDifficulty\n  implementation, these unit tests serve to lock them in rather than\n  expose them.\n\n  -- Why has blockchain.cpp been modified if this is a unit testing change?\n\n  Since the existing GetDifficulty function relies on a global variable,\n  chainActive, it was not suitable for unit testing purposes. Both the\n  existing GetDifficulty function and the unit tests now call through to\n  a new, more modular version of GetDifficulty that can work on any chain,\n  not just chainActive.\n\n  -- Why does blockchain_tests.cpp directly include blockchain.cpp instead\n  of blockchain.h?\n\n  While the new GetDifficulty function's signature is arguably better than\n  the old one's, it still isn't great, and doesn't seem to warrant inclusion\n  as part of the blockchain.h API, especially since only test code is\n  directly using it. If a better way of exposing the new GetDifficulty\n  function to unit tests exists, please mention it and the commit will be\n  updated accordingly.\n\n  -- Why is the test fixture named blockchain_difficulty_tests rather than\n  blockchain_tests?\n\n  The Bitcoin Core policy for naming unit test files is to match the the\n  file under test (\"blockchain\" becomes \"blockchain_tests\"). While this\n  commit complies with that, blockchain.cpp is a massive file, such that\n  having all of the unit tests in one file will tend towards disorder.\n  Since there will be a lot more tests added to this file, the intention\n  is to divide up different types of tests into different test fixtures\n  within the same file.\n\nTree-SHA512: a7dda9c2a9414d4819b4d2911f5637891dc19cecbecfc1463846161d2a78793151927a5ab911c69a5d3013f7668e75a1d78a65667cb9d83910cda439cbe84d62"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bad8d64721768953cb9c18f30d48ec8c2757879", "message": "Merge #11475: [rpc] mempoolinfo should take ::minRelayTxFee into account\n\n149dffd [rpc] mempoolinfo should take ::minRelayTxFee into account (Cristian Mircea Messel)\n\nPull request description:\n\n  Fixes #6941 following https://github.com/bitcoin/bitcoin/pull/11410#issuecomment-332991078 's suggestion\n\n  This takes care of the mentioned ticket without changing the behavior of https://github.com/bitcoin/bitcoin/pull/11410/files#diff-24efdb00bfbe56b140fb006b562cc70bL629\n\n  By modifying https://github.com/bitcoin/bitcoin/blob/5a9da37fb3f4b53f556e1d46509b94dc3c661d75/src/txmempool.cpp#L984 the syncing mempools becomes problematic as per https://github.com/bitcoin/bitcoin/pull/11410#issuecomment-333868390\n\n  ~~Same code causes different tests to fail: https://travis-ci.org/bitcoin/bitcoin/jobs/286128241 https://travis-ci.org/bitcoin/bitcoin/jobs/286128241 . I can't reproduce the problems locally, am I doing something wrong?~~ travis sometimes fails unexpectedly\n\nTree-SHA512: fd81628da6a3eff51bd09e5342d781bac0710f79d6b330b1df3662756ecaceb2e1682bf9768b5f8edbcba6479a3223dfa6604d37c9e9d37d00d077172da4f6ea"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f19ca129ffd7cd3aae0a12394fcf3665d3169f33", "message": "Merge #11605: [Wallet] Enable RBF by default in QT\n\n5cbbbd7 [Wallet] Use RBF by default in QT only (Sjors Provoost)\n\nPull request description:\n\n  ~If there are no objections, this would supersede #11556.~\n\n  Enabling RBF by default avoids the need to explain all possible use cases of RBF.\n\n  This PR does not change the default RPC wallet behavior, as this could break implementations that depend on it and it's not clear what happens when automated services suddenly switch on RBF on a large scale.\n\n  After trying various approaches, we settled on just having QT ignore `-walletrbf`.\n\n  Send screen:\n  <img width=\"388\" alt=\"send\" src=\"https://user-images.githubusercontent.com/10217/34251097-329c8dee-e63f-11e7-9e14-d7f55d2b52cc.png\">\n\n  Confirmation screen by default (with RBF):\n  <img width=\"429\" alt=\"rbf yes\" src=\"https://user-images.githubusercontent.com/10217/32442799-f50d54aa-c2fc-11e7-9392-96339d0f1f74.png\">\n\n  Confirmation screen without RBF:\n  <img width=\"431\" alt=\"rf no\" src=\"https://user-images.githubusercontent.com/10217/32442793-ef30bc34-c2fc-11e7-8ca2-e86a97175278.png\">\n\nTree-SHA512: 53efb5d277144478143e69dcae8112c1b9c2beb981fdd0fe778592e5f7d5bf838f73d48052ead874586a75b944e8af469b25e5f376c135cf48cc3598e77f5891"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6915f93cc9edc56ecc6de20b72fb1eee35c0d164", "message": "doc: Update OpenBSD build instructions for 6.2\n\nThere is no more need to install a compiler. This simplifies\ninstructions a lot."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/180a25596a29a553164266b882290fde6185cc0d", "message": "Merge #11981: Fix gitian build after libzmq bump\n\na6365c5 depends: fix libzmq's needless linking against libstdc++ (Cory Fields)\n\nPull request description:\n\n  Broken gitian builds were introduced with #9254. Big thanks to @jonasschnelli for narrowing down the bisection.\n\n  This is broken for a number of reasons, including:\n  - g++ understands \"-static-libstdc++ -lstdc++\" to mean \"link against whatever libstdc++ exists, probably shared\", which in itself is buggy.\n  - another stdlib (libc++ for example) may be in use\n\nTree-SHA512: d84968ee680f32ea799034ee516e9477fff2b1ef1b7c9a8ef1941631520ab196ecd50f5d64f3ed1c84113ead44be5e3ddf6ff2ae0277625bdeed05f1da89e017"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711d16ca4a916d4e30f17e2babb46fc1b0be4732", "message": "Merge #11667: Add scripts to dumpwallet RPC\n\n656fde5 Add script birthtime metadata to dump and import wallet (MeshCollider)\n1bab9b2 Add script dump note to RPC help text and release notes (MeshCollider)\n68c1e00 Add test for importwallet (MeshCollider)\n9e1184d Add dumpwallet scripts test (MeshCollider)\nef0c730 Add scripts to importwallet RPC (MeshCollider)\nb702ae8 Add CScripts to dumpwallet RPC (MeshCollider)\ncdc260a Add GetCScripts to CBasicKeyStore (MeshCollider)\n\nPull request description:\n\n  As discussed in https://github.com/bitcoin/bitcoin/pull/11289#issuecomment-334600457, adds the CScripts from the wallet to the `dumpwallet` RPC and then allows them to be imported with the `importwallet` RPC. Includes a basic test, and modifies the helptext of the dumpwallet RPC.\n\n  Notes:\n  - Reviewers: use `?w=1` to avoid the indentation-only change in commit `Add scripts to importwallet RPC `\n  - currently the scripts are followed with `# addr=` comments just as the other keys are, unsure if this might confuse users into thinking all the scripts are for valid P2SH addresses though, but I don't think that should be an issue.\n  - there are no birthtimes for scripts, so script imports don't affect rescans\n  - `importwallet` imports the CScripts but I'm not sure how to approach specifying whether scripts are for P2SH addresses, BIP173 addresses, etc. whether that matters or not. Otherwise the RPC helptext might just need modification.\n\n  Fixes #11715\n\nTree-SHA512: 36c55837b3a58b9d3499d4c0c2ae82153d62aa71919e751574651b63a1d2b8ecc83796db4553cc65dad9b5341c3a42ae2fcf4d62598c30af267f8e1461ba8272"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a11ba7e01f365cdbe21bb4fb6b737931b38da69", "message": "Merge #11945: Improve BSD compatibility of contrib/install_db4.sh\n\n2712742 doc: Update FreeBSD build instructions to use bdb4 (Wladimir J. van der Laan)\nd95c83d contrib: FreeBSD compatibility in install_db4.sh (Wladimir J. van der Laan)\nc0298b0 contrib: Make X=Y arguments work in install_db4 (Wladimir J. van der Laan)\nb798f9b contrib: New clang patch for install_db4 (Wladimir J. van der Laan)\n\nPull request description:\n\n  This PR improves the BSD compatibility of the bdb4 installer script.\n\n  See #11921, #11868.\n\n  I've tested this on OpenBSD 6.2 (clang) and Ubuntu 16.04 (gcc).\n\n  This needs testing on OSX at least, ~~and on gcc/Linux to make sure that applying the patch unconditionally doesn't negatively affect gcc~~.\n\n  ~~NB: this is not yet sufficient to make `install_db4.sh` work on FreeBSD, as we need to use yet another `sha256` tool there. But it's a step in the right direction.~~\n\n  ### contrib: New clang patch for install_db4\n\n  Replace the clang patch with a new and improved version that also fixes the build issues with OpenBSD and FreeBSD's clang, and apply it unconditionally.\n\n  Thanks to @fanquake for finding the patch.\n\n  ### contrib: Make X=Y arguments work in install_db4\n\n  Trailing X=Y arguments are supposed to be passed through unchanged to bdb's configure. This was not the case, at least with OpenBSD 6.2's shell.\n\n  Fix this by not storing the arguments in a temporary variable but passing \"$@\" through directly.\n\n  ### contrib: FreeBSD compatibility in install_db4.sh\n\n  Unfortunately, FreeBSD uses yet another syntax for `sha256`.\n\n  Support FreeBSD's syntax too. Using `uname` is a bit of a hack but it works and I found no way to distinguish the two.\n\nTree-SHA512: 12461a58dfeb4834701891762efc747c8187d834f41d98c8451edee1402a3958c4842bbc02c61bacbc7b0d90cc6b020a2ca158b65304d9760c9f0d2052ff36d4"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79399c8cd0b6030034eea5feed3a7523e369b256", "message": "Merge #10657: Utils: Improvements to ECDSA key-handling code\n\n63179d0 Scope the ECDSA constant sizes to CPubKey / CKey classes (Jack Grigg)\n1ce9f0a Ensure that ECDSA constant sizes are correctly-sized (Jack Grigg)\n48abe78 Remove redundant `= 0` initialisations (Jack Grigg)\n17fa391 Specify ECDSA constant sizes as constants (Jack Grigg)\ne4a1086 Update Debian copyright list (Jack Grigg)\ne181dbe Add comments (Jack Grigg)\na3603ac Fix potential overflows in ECDSA DER parsers (Jack Grigg)\n\nPull request description:\n\n  Mostly trivial, but includes fixes to potential overflows in the ECDSA DER parsers.\n\n  Cherry-picked from Zcash PR https://github.com/zcash/zcash/pull/2335\n\nTree-SHA512: 8fcbd51b0bd6723e5d33fa5d592f7cb68ed182796a9b837ecc8217991ad69d6c970258617dc00eb378c8caa4cec5d6b304d9d2c066acd40cda98e4da68e0caa4"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc66765144296f10ec8f9c9a437e74f22c70d235", "message": "Merge #11917: Add testnet DNS seed:  seed.testnet.bitcoin.sprovoost.nl\n\nf455a24 [net] add seed.testnet.bitcoin.sprovoost.nl to testnet DNS seeds (Sjors Provoost)\n\nPull request description:\n\n  I tested it myself by:\n  * `dig seed.testnet.bitcoin.sprovoost.nl`  (should have propagated by now, but if you only see two records with `A 66.111... ` try again later)\n  * deleting the other seeds and all data in `.../testnet3`, recompiling and then starting the node. Log shows `21 addresses found from DNS seeds`.\n\n  ACK https://github.com/bitcoin/bitcoin/blob/master/doc/dnsseed-policy.md\n\n  I'm willing to keep it up and running at least throughout 2018, unless something bad happens.\n\n  About my setup:\n  * Amazon EC2 instance in Europe, running Ubuntu 16.04; I use this instance for some other chores, but only port 53 is world reachable (for mainnet I'd probably run a dedicated instance, and perhaps a location I have physical control over)\n  * running [sipa/bitcoin-seeder](https://github.com/sipa/bitcoin-seeder) with default settings (and the non-root port redirect)\n  * feedback about my domain / DNS setup is welcome, I can provide more details via private email\n\n  I can use guidance on _Any hosting services contracted by the operator are equally expected to uphold these expectations_. Although I assume the requirements for testnet are less strict than for mainnet, in case I want to pursue the latter in the future: what unpleasant things can Amazon, my domain registrar and other intermediaries do? How would I mitigate that?\n\n  Also note that The Netherlands passed some pretty onerous legislation creating uncertainty over what the secret service can compel people like myself to do. However these laws won't take effect before mid 2018, there's probably more interesting targets than myself to go after, and it's easier for them to just monitor all unencrypted P2P traffic everywhere, or monitor some intermediary I depend on.\n\n  Any good tools for monitoring uptime?\n\nTree-SHA512: 386fe688e5006ab8352d93ab3954fc07dc566876ae002891baa51acfaa5bb113f51b1f5ca08c7394a530b10a2f5008c56d57153af3ed07544a305586dda06b97"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e404a3afa8898738e7ff8ce28a7fa1373f727e", "message": "Merge #11879: [tests] remove redundant univalue_tests.cpp\n\n2862b56 [tests] remove redundant univalue_tests.cpp (John Newbery)\n\nPull request description:\n\n  univalue unit tests were added in #4730 , and exist at `/src/test/univalue_tests.cpp` (outside the univalue tree). That test was brought into the univalue repository in https://github.com/bitcoin-core/univalue/pull/4 , which was pulled into the github repository in https://github.com/bitcoin/bitcoin/pull/11420.\n\n  That means that the univalue test exists in two places:\n  1. `/src/test/univalue_tests.cpp`\n  2. `/src/univalue/test/object.cpp`\n\n  (2) is a strict superset of (1). It adds some macros to work around boost not being a univalue dependency, and adds a few extra lines of test.\n\n  Therefore remove `/src/test/univalue_tests.cpp`\n\nTree-SHA512: 3747b10bbf62e9f12363905488b29945ad559ddca68c5c03d8a362de612a51f408f41a04d3712c6889bfc1632fb1a5fa0d7df0fbf02c322b3981a6d698f501b0"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ab9963386ed321bf845997674ebd2c997fb3b1f", "message": "Merge #11952: [qa] univalue: Bump subtree\n\n88411e9 Squashed 'src/univalue/' changes from fe805ea74f..07947ff2da (MarcoFalke)\n\nPull request description:\n\n  Pulls in the test changes to the univalue subtree.\n\n  Beside looking at the code, reviewers should refer to https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md#git-subtree-checksh on how to verify the subtree pull.\n\nTree-SHA512: 09493625a573dca1140570326ee90c1bb84e4893e1dab2cdd51bc23ae1fba1e33c43ed771ca9e112ac71b0242e8a8d058071334562c738d502587eadd5a0f114"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2712742ef2947feef4a142f7d1360d1e821597dc", "message": "doc: Update FreeBSD build instructions to use bdb4\n\nUse Berkeley DB 4 as recommended on other platforms."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d95c83d193d4f16dc85cb4a81ab481cbbe41a033", "message": "contrib: FreeBSD compatibility in install_db4.sh\n\nUnfortunately, FreeBSD uses yet another syntax for `sha256`.\n\nSupport FreeBSD's syntax too. Using `uname` is a bit of a hack but it\nworks and I found no way to distinguish the two."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4307062ee2c2b8cd80b88a866047d8951d91052b", "message": "Merge #11960: [Doc] Fix link to installation script\n\n3d3e58e [Doc] Fix link to installation script (laudaa)\n\nPull request description:\n\n  While trying to set up a fresh build by following the Doc, I've noticed that the scripts to the installation script are broken. They try to go to:\n  https://github.com/bitcoin/bitcoin/blob/master/doc/contrib/install_db4.sh, but should go to:\n  https://github.com/bitcoin/bitcoin/blob/master/contrib/install_db4.sh\n\nTree-SHA512: db7df9dbfdd946c6edc07e10b6717cbb82083f974f11765dc2b6942d20d1569f54bf63da34cf29ee12ba2217e342574d382e4dc61ee2d2617f40e87b538ab76a"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb34e0d1f585dc6bb26ccbbcc26e9be4e107892", "message": "Merge #11951: Remove dead feeest-file read code for old versions\n\n62e7c04 Remove dead feeest-file read code for old versions (Matt Corallo)\n\nPull request description:\n\n  0.15.0 introduced a new feeest file format, and support for parsing\n  old versions was never fully added. We now simply fail to read the\n  old format, so remove the dead partial-implementation.\n\n  Follow up to #11273.\n\nTree-SHA512: c291ce51b7cb0c93479c18a1885dd646cbe03e4c7d12df03c0e99c0634e1bf9f9e41facf54a645227154bab58b9988f21b928cf3fc0520087c4eede4258c8861"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfd99ddc3c19e5b493be2d3622512dafffe78fc7", "message": "Merge #11883: Add configuration file/argument testing\n\nbe9a13c Add configuration/argument testing (MeshCollider)\n\nPull request description:\n\n  Adds a new functional test for testing various command line and configuration file argument interactions, that aren't specific enough to other functionality to be placed in other tests.\n\n  Currently this tests the error messages for non-existent datadir, which would have caught the bug fixed in https://github.com/bitcoin/bitcoin/pull/11829. It also tests that command line arguments override the ones in the config file.\n\n  I plan on working on a fix for https://github.com/bitcoin/bitcoin/issues/11819 / https://github.com/bitcoin/bitcoin/issues/1044 and then expanding this test with cases for that.\n\nTree-SHA512: 97aea18c67d331db3ca3d0c99c79267cf012df67fddafc9fac63d392f5c3a6469aa14d93b5865c3bbe561461648d2485367978a77446483b8df53d1916f1c8e8"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdd6bbf10a818d243f973f628e465cc1df98691a", "message": "Merge #11273: Ignore old format estimation file\n\n3a3a9f9 Ignore old format estimation file (Murch)\n\nPull request description:\n\n  The fee estimation data format changed from 0.14.x to 0.15.0, so we should no longer read the old data. H/T @jnewbery, @morcos\n\n  Pending testing.\n\nTree-SHA512: c8e3824dbdd8f6730133d5ad20b00995e9a63ab54431158a91e2f4d2aba5763b8aa698bce1fffca2713ba3a162e23d8fcd6e3efb9847b015c2e1e8725398150b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81c89e966e1e08c3d94dc9d1d0a26034312c56ff", "message": "Merge #11923: Wallet : remove unused fNoncriticalErrors variable from CWalletDB::FindWalletTx\n\necf9b25 remove unused fNoncriticalErrors variable from CWalletDB::FindWalletTx (Pierre Rochard)\n\nPull request description:\n\n  The `CWalletDB::FindWalletTx` method was patterned after `CWalletDB::LoadWallet`, where `fNoncriticalErrors` is used when a tx check fails in `ReadKeyValue`.\n\n  Since `FindWalletTx` is only used by methods which are zapping txs, it makes sense that `ReadKeyValue` is not called and the tx is not checked, so I think that deleting the unused `fNoncriticalErrors` boolean variable and its conditional statement is appropriate.\n\nTree-SHA512: 0976eae97522719fdaeca1fb3f4a080561e46c06d0b8dc75e14262c6bc242998db3f7057183a230a1d7e4ac5fc348e9059f545b7d718ebbcdf6dcdfc63bcc286"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45085192501db329e1eff330d9c1244f101449a3", "message": "test: Fix rawtransactions test\n\nLooks like another `assert_raises_jsonrpc` snuck in with #11178.\nChange it to `assert_raises_rpc_error`."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2971fd030f6e20ff5279bd86ba18acc5e5ed1ce9", "message": "Merge #11220: Check specific validation error in miner tests\n\n12781db [Tests] check specific validation error in miner tests (Sjors Provoost)\n\nPull request description:\n\n  ## Problem\n\n  `BOOST_CHECK_THROW` merely checks that some `std::runtime_error` is\n  thrown, but not which one.\n\n  Here's an example of how this can cause a test to pass when a developer\n  introduces a consensus bug. The test for the sigops limit assumes\n  that `CreateNewBlock` fails with `bad-blk-sigops`. However it can\n  also fail with bad-txns-vout-negative, if a naive developer lowers\n  `BLOCKSUBSIDY` to `1*COIN`.\n\n  ## Solution\n\n  `BOOST_CHECK_EXCEPTION` allows an additional predicate function. This\n  commit uses this for all exceptions that are checked for in\n  `miner_tets.cpp`:\n  * `bad-blk-sigops`\n  * `bad-cb-multiple`\n  * `bad-txns-inputs-missingorspent`\n  * `block-validation-failed`\n\n  If the function throws a different error, the test will fail. Although the message produced by Boost is a bit [confusing](http://boost.2283326.n4.nabble.com/Test-BOOST-CHECK-EXCEPTION-error-message-still-vague-tt4683257.html#a4683554), it does show which error was actually thrown. Here's what the above `1*COIN` bug would result in:\n\n  <img width=\"1134\" alt=\"schermafbeelding 2017-09-02 om 23 42 29\" src=\"https://user-images.githubusercontent.com/10217/29998976-815cabce-9038-11e7-9c46-f5f6cfb0ca7d.png\">\n\n  ## Other considerations\n\n  A more elegant solution in my opinion would be to subclass `std::runtime_error` for each `INVALID_TRANSACTION` type, but this would involve touching consensus code.\n\n  I put the predicates in `test_bitcoin.h` because I assume they can be reused in other test files. However [serialize_tests.cpp](https://github.com/bitcoin/bitcoin/blob/v0.15.0rc3/src/test/serialize_tests.cpp#L245) also uses `BOOST_CHECK_EXCEPTION` and it defines the predicate in the test file itself.\n\n  Instead of four `IsRejectInvalidReasonX(std::runtime_error const& e)` functions, I'd prefer something reusable like `bool IsRejectInvalidReason(String reason)(std::runtime_error const& e)`, which would be used like `BOOST_CHECK_EXCEPTION(functionThatThrows(), std::runtime_error, IsRejectInvalidReason(\"bad-blk-sigops\")`. I couldn't figure out how to do that in C++.\n\nTree-SHA512: e364f19b4ac19f910f6e8d6533357f57ccddcbd9d53dcfaf923d424d2b9711446d6f36da193208b35788ca21863eadaa7becd9ad890334d334bccf8c2e63dee1"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0298b06e5b58ed8b177c39354a0c3f8b1b88263", "message": "contrib: Make X=Y arguments work in install_db4\n\nTrailing X=Y arguments are supposed to be passed through unchanged\nto bdb's configure. This was not the case, at least with OpenBSD\n6.2's shell.\n\nFix this by not storing the arguments in a temporary variable but\npassing \"$@\" through directly."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b798f9bab99891cbc779f1c05502b76f8b7d3cea", "message": "contrib: New clang patch for install_db4\n\nReplace the clang patch with a new and improved version that also fixes\nthe build issues with OpenBSD and FreeBSD's clang, and apply it\nunconditionally.\n\nThis needs testing on OSX."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1808660c8d470f4519ffec7701712a716d7db523", "message": "Merge #11943: contrib: fix typo in install_db4.sh help message\n\nce552b6 contrib: fix typo in install_db4.sh help message (Wladimir J. van der Laan)\n\nPull request description:\n\n  It installs db4, not db5.\n\nTree-SHA512: c503819bd46da1fc5bd386fbf7cab1702ed8a9f0532a5f9e81f8737dfc1c7883eddf54d7de78418f327e60627ed344f94b1c2819101971e0f170b2c4c0ba4efe"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce552b62e46b848d27e4a406296c284da7c464d8", "message": "contrib: fix typo in install_db4.sh help message\n\nIt installs db4, not db5."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee0370fd6e53234d230799bbbbe45eda5dcf630", "message": "Merge #11178: Add iswitness parameter to decode- and fundrawtransaction RPCs\n\n6f39ac0 Add test for decoderawtransaction bool (MeshCollider)\nbbdbe80 Add iswitness parameter to decode- and fundrawtransaction RPCs (MeshCollider)\n\nPull request description:\n\n  Suggested in https://github.com/bitcoin/bitcoin/pull/10481#issuecomment-325244946, this adds the option to explicitly choose whether a serialized transaction should be decoded as a witness or non-witness transaction rather than relying on the heuristic checks in #10481. The parameter defaults to relying on #10481 if not included, but it overrides that if included.\n\nTree-SHA512: d4846a5bb7d64dc19c516445488b00af329fc1f4181d9dfdf9f2382a086568edc98250a4ac7594e24a1bc231dfdee53c699b12c8380c355b920a67cc6770b7a9"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483bb67253620014c7c6ec0f9197f1fd66badae3", "message": "Merge #11936: [build] Warn that only libconsensus can be built without Boost\n\n3eb4d45 [build] Warn that only libconsensus can be built without boost (Varunram)\n\nPull request description:\n\n  This replaces the \"configure: error: Could not find a version of the boost_system library!\" message you receive when trying to build without Boost, with \"only libbitcoinconsensus can be built without boost\".\n\n  `./configure --with-utils=no --disable-bench --disable-gui-tests --disable-tests --with-daemon=no --without-gui --disable-wallet --with-boost=no` builds libconsensus.\n\n  `./configure --with-boost=no` should always fail with:\n  ```\n  checking whether to build Bitcoin Core GUI... yes (Qt5)\n  configure: error: only libbitcoinconsensus can be built without boost\n  ```\n\n  For anyone wondering why the check comes after the AX_BOOST_BASE check, see this [comment](https://github.com/bitcoin/bitcoin/pull/11806#discussion_r155359394). \"the AX_BOOST_BASE macro that does the --with-boost handling (along with the actual checks), and sets \"want_boost\". \"\n\n  Fixes #10826, replaces #11806.\n\n  @theuni if you re-ACK we can get this merged.\n\nTree-SHA512: f0b8f483586465187ca6689e731b24ff77da41a06fb5c9d6390c82990719911dd54ebcccaf6d4fcea2be92986cc7fa88ed979e6cb9d77917920181e5e5188067"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7181952436a90a7f300f2b673321e2ac92ef56", "message": "Merge #11886: Clarify getbalance meaning a tiny bit in response to questions.\n\nc79d73d Clarify getbalance meaning a tiny bit in response to questions. (Matt Corallo)\n\nPull request description:\n\n  Someone was asking why getbalance \"*\" was more \"correct\" than getbalance, which should rarely be true...spendzeroconfchange was the issue.\n\nTree-SHA512: 90201cad1acec5161aee469fb4c6d737a0eb90f8380ac93abf0e41e0f02d120afcc3e2e873e5096d3655bb63bbd16fe99e72452f308d72e69139c7f6bb2d745e"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8585bb8f058441b951b8012de8c0e45207528dec", "message": "Merge #11616: Update ban-state in case of dirty-state during periodic sweep\n\n57ac471 Call BannedListChanged outside of cs_setBanned lock (Jonas Schnelli)\nc853812 Update ban-state in case of dirty-state during periodic sweep (Jonas Schnelli)\n\nPull request description:\n\n  We do currently not update the UI during periodic ban list sweeps (via dump banlist).\n  Fixes #11612\n\nTree-SHA512: bffbdcc03c63042177bdd511b0a9187c211c2b5011178481e8ee3e43a71eef1e4cd6b72f73672babab142b644f62f8b56f0aac1d26d3f19372b1f8644fec9395"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c66adb286a89738a6a5218be2ecfea8e398878dd", "message": "Merge #10839: Don't use pass by reference to const for cheaply-copied types (bool, char, etc.)\n\n99ba0c3 Don't use pass by reference to const for cheaply-copied types (bool, char, etc.). (practicalswift)\n\nPull request description:\n\n  Don't use pass by reference to const for cheaply-copied types (`bool`, `char`, etc.).\n\nTree-SHA512: ccad5e2695dff0b3d6de3e713ff3448f2981168cdac72d73bee10ad346b9919d8d4d588933369e54657a244b8b222fa0bef919bc56d983e1fa64b2004e51b225"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8f0a3b8e670f1410a642b31274e6ceeb9344da", "message": "Merge #11842: [build] Add missing stuff to clean-local\n\nb341143 [build] Add missing stuff to clean-local - test/functional/test_framework/__pycache__ - test/cache (Karl-Johan Alm)\n\nPull request description:\n\n  After doing\n  ```\n  ./autogen.sh && ./configure && make\n  make clean\n  make distclean\n  ```\n  and moving `.gitignore` aside, the following files still remain after this patch:\n  ```\n  \tMakefile.in\n  \taclocal.m4\n  \tautom4te.cache/\n  \tbuild-aux/compile\n  \tbuild-aux/config.guess\n  \tbuild-aux/config.sub\n  \tbuild-aux/depcomp\n  \tbuild-aux/install-sh\n  \tbuild-aux/ltmain.sh\n  \tbuild-aux/m4/libtool.m4\n  \tbuild-aux/m4/ltoptions.m4\n  \tbuild-aux/m4/ltsugar.m4\n  \tbuild-aux/m4/ltversion.m4\n  \tbuild-aux/m4/lt~obsolete.m4\n  \tbuild-aux/missing\n  \tbuild-aux/test-driver\n  \tconfigure\n  \tdoc/man/Makefile.in\n  \tsrc/Makefile.in\n  \tsrc/config/bitcoin-config.h.in\n  ```\n\n  Most are automake related so I guess it's fine if they litter around.\n\nTree-SHA512: 7566f56a79932cc1d6ee6ff487d121e3909db57167775e1b27209d93bcc1c14e47b0fcc9c0c272c4b9df907c1bc0664f02006a21b3b6939fa50fc2a5762729e4"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66479c0e611a22d54c90e84ffaf0bdf2356f90b6", "message": "Merge #11884: Remove unused include in hash.cpp\n\n3f09e03 Remove unused include in hash.cpp (Karl-Johan Alm)\n\nPull request description:\n\nTree-SHA512: 543a72656460fba1c5498a0b85c49601d9b0399a4ecc49f4acf4715c258918da729df388e3be724c3161438e903ee16ad3c50626a71483aa6d85ffdbb827742d"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ae58d5bfb76ba01ceb52518281f0eeaaf2882f7", "message": "Merge #11864: Make CWallet::FundTransaction atomic\n\n03a5dc9 [wallet] Make CWallet::FundTransaction atomic (Jo\u00e3o Barbosa)\n95d4450 [wallet] Tidy up CWallet::FundTransaction (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This PR fixes a race for `setLockedCoins` when `lockUnspents` is true. For instance, it should not be possible to use the same unspent in concurrent `fundrawtransaction` calls.\n\n  Now the `cs_main` and `cs_wallet` locks are held during `CreateTransaction` and `LockCoin`(s). Also added some style nits around the change.\n\nTree-SHA512: ccf383c0c5f6db775655a3e9ccd200c3bd831a83afae2b7c389564c74f7227f5bea86a4775727de2c3603b188f383f8a12d3f9d6d94f7887865c31c94ce95ef6"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4991c0cbb8a5464add1b64268eccdbfd3026d6e", "message": "Merge #11877: Improve createrawtransaction functional tests\n\n88af502 test: Add createrawtransaction functional tests (Jo\u00e3o Barbosa)\n27c6199 test: Add multidict to support dictionary with duplicate key (laanwj) (Jo\u00e3o Barbosa)\n320669a rpc: Validate replaceable type in createrawtransaction (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This was motivated by the `Invalid parameter, duplicated address` test.\n\n  Credit to @laanwj for `multidict` implementation.\n\nTree-SHA512: a87139ae11004b73b467db1e8a072b75e23a0622b173a5668eed383b3575d8abc709817ddd2dfdc53f55afc90750fb61331199ad5de38c1ef6d482f2bc220f74"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68e021e3a35d1e88d6075ea8b05a8e3a40a64e29", "message": "Merge #11558: Minimal code changes to allow msvc compilation\n\nfbf327b Minimal code changes to allow msvc compilation. (Aaron Clauson)\n\nPull request description:\n\n  These changes are required to allow the Bitcoin source to build with Microsoft's C++ compiler (#11562 is also required).\n\n  I looked around for a better place for the typedef of ssize_t which is in random.h. The best candidate looks like src/compat.h but I figured including that header in random.h is a bigger change than the typedef. Note that the same typedef is in at least two other places including the OpenSSL and Berkeley DB headers so some of the Bitcoin code already picks it up.\n\nTree-SHA512: aa6cc6283015e08ab074641f9abdc116c4dc58574dc90f75e7a5af4cc82946d3052370e5cbe855fb6180c00f8dc66997d3724ff0412e4b7417e51b6602154825"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba2f19504c6b1302a93accbb50383f422c54df43", "message": "Merge #11363: net: Split socket create/connect\n\n3830b6e net: use CreateSocket for binds (Cory Fields)\ndf3bcf8 net: pass socket closing responsibility up to caller for outgoing connections (Cory Fields)\n9e3b2f5 net: Move IsSelectableSocket check into socket creation (Cory Fields)\n1729c29 net: split socket creation out of connection (Cory Fields)\n\nPull request description:\n\n  Requirement for #11227.\n\n  We'll need to create sockets and perform the actual connect in separate steps, so break them up.\n\n  #11227 adds an RAII wrapper around connection attempts, as a belt-and-suspenders in case a CloseSocket is missed.\n\nTree-SHA512: de675bb718cc56d68893c303b8057ca062c7431eaa17ae7c4829caed119fa3f15b404d8f52aca22a6bca6e73a26fb79e898b335d090ab015bf6456cf417fc694"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8ba7d73a480197b756fab00126914e49de4e7b", "message": "Merge #11870: wallet: Remove unnecessary mempool lock in ReacceptWalletTransactions\n\n5b25293 wallet: Remove unnecessary mempool lock in ReacceptWalletTransactions (Jo\u00e3o Barbosa)\n\nPull request description:\n\nTree-SHA512: 13b922c6c9b5ca95a77742050f449366b80bdd7819c34e7ca09af8a4bd68085f4d0c6e0cde119c403f661499f97f2c465071a8047a7d794268e8d2dfe909e6d5"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22149540f9e74ddff84973d9818ec9a34a533764", "message": "Merge #11854: Split up key and script metadata for better type safety\n\n9c8eca7 Split up key and script metadata for better type safety (Russell Yanofsky)\n\nPull request description:\n\n  Suggested by @TheBlueMatt\n  https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155599383\n\n  Combining the maps was probably never a good arrangement but is more\n  problematic now in presence of WitnessV0ScriptHash and WitnessV0KeyHash types.\n\nTree-SHA512: 9263e9c01090fb49221e91d88a88241a9691dda3e92d86041c8e284306a64d3af5e2438249f9dcc3e6e4a5c11c1a89f975a86d55690adf95bf2636f15f99f92a"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d132e8b974652d96466a1b73ec1231614719fe2", "message": "Merge #10574: Remove includes in .cpp files for things the corresponding .h file already included\n\na720b92 Remove includes in .cpp files for things the corresponding .h file already included (practicalswift)\n\nPull request description:\n\n  Remove includes in .cpp files for things the corresponding .h file already included.\n\n  Example case:\n  * `addrdb.cpp` includes `addrdb.h` and `fs.h`\n  * `addrdb.h` includes `fs.h`\n\n  Then remove the direct inclusion of `fs.h` in `addrman.cpp` and rely on the indirect inclusion of `fs.h` via the included `addrdb.h`.\n\n  In line with the header include guideline (see #10575).\n\nTree-SHA512: 8704b9de3011a4c234db336a39f7d2c139e741cf0f7aef08a5d3e05197e1e18286b863fdab25ae9638af4ff86b3d52e5cab9eed66bfa2476063aa5c79f9b0346"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/214046f69b1978129030ba1f65007d57b29f0761", "message": "Merge #10279: Add a CChainState class to validation.cpp to take another step towards clarifying internal interfaces\n\n22fddde Avoid calling GetSerializeSize on each tx in a block if !fTxIndex (Matt Corallo)\n2862aca Move some additional variables into CChainState private (Matt Corallo)\nfd4d80a Create initial CChainState to hold chain state information (Matt Corallo)\ne104f0f Move block writing out of AcceptBlock (Matt Corallo)\n50701ba Move txindex/undo data disk location stuff out of ConnectBlock (Matt Corallo)\n93a34cf Make DisconnectBlock unaware of where undo data resides on disk (Matt Corallo)\n\nPull request description:\n\n  CChainState should eventually, essentially, be our exposed \"libconsensus\", but we're probably a few releases away, so the real goal is to clarify our internal interfaces. The main split was a big step, but validation.cpp is still a somewhat ranomly-mixed bag of functions that are pure functions which validate inputs (which should probably either merge with their callers or move into another file in consensus/), read/write data from disk, manipulate our current chain state (which moves into CChainState), and do mempool transaction validation.\n\n  Obviously this is only a small step, but some effort is made to clean up what functions the functions in CChainState call, and obviously as things are added its easy to keep clear \"CChainState::* cannot call anything except via callbacks through CValidationInterface, pure functions, or disk read/write things\". Right now there are some glaring violations in mempool callbacks, and general flushing logic needs cleaning up (FlushStateToDisk maybe shouldnt be called, and there should be an API towards setDirtyBlockIndex, but I'll leave that for after @sipa's current changesets land).\n\nTree-SHA512: 69b8ec191b36b19c9492b4dee74c8057621fb6ec98ad219e8da0b2ed5c3ad711b10b5af9ff1117e8807ccf88918eeeab573be8448baecc9a59f099c53095985b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad1820cbad15c4eb4e2c86ac8032d0fb1b7b7c35", "message": "Merge #11849: [tests] Assert that only one NetworkThread exists\n\n5c8ff26 [tests] Add NetworkThread assertions (John Newbery)\n34e08b3 [tests] Fix network threading in functional tests (John Newbery)\n74e64f2 [tests] Use network_thread_start() in tests. (John Newbery)\n5fc6e71 [tests] Add network_thread_ utility functions. (John Newbery)\n\nPull request description:\n\n  Add assert that only one NetworkThread exists at any time in functional tests, and fix cases where that wasn't true.\n\n  fixes #11776\n\nTree-SHA512: fe5d1c59005f94bf66e11bb23ccf274b1cd9913741b56ea11dbcd21db4cc0b53b4413c0c4c16dbcd6ac611adad5e5cc2baaa39720598ce7b6393889945d06298"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48ab83f00538a5135b2c448809260a9d46ca31c", "message": "Merge #11831: Always return true if AppInitMain got to the end\n\n07c4838 Always return true if AppInitMain got to the end (Matt Corallo)\n\nPull request description:\n\n  This should fix a rare zapwallettxes failure on travis, but also\n  avoids having init operations (re-adding wallet transactions to\n  mempool) running after RPC is free'd.\n\n  I believe this was the failure at https://travis-ci.org/bitcoin/bitcoin/jobs/311747844 (from #11605).\n\nTree-SHA512: f0fea8c1b9265e2eeda57043d541380a3e58e4d9388fa24628a52fd56324257fcd7df0ca02e8f77f66fadd68d951893bab0f610ed9fd0a89b2ccd6bad1efa351"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0902624b0ec6f5fff29eb6e922c58816f395dc8", "message": "Merge #10699: Make all script validation flags backward compatible\n\n01013f5 Simplify tx validation tests (Pieter Wuille)\n2dd6f80 Add a test that all flags are softforks (Pieter Wuille)\n2851b77 Make all script verification flags softforks (Pieter Wuille)\n\nPull request description:\n\n  This change makes `SCRIPT_VERIFY_UPGRADABLE_NOPS` not apply to `OP_CHECKLOCKTIMEVERIFY` and `OP_CHECKSEQUENCEVERIFY`. This is a no-op as `UPGRADABLE_NOPS` is only set for mempool transactions, and those always have `SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY` and `SCRIPT_VERIFY_CHECKSEQUENCEVERIFY` set as well. The advantage is that setting more flags now always results in a reduction in acceptable scripts (=softfork).\n\n  This results in a nice and testable property for validation, for which a new test is added.\n\n  This also means that the introduction of a new definition for a NOP or witness version will likely need the following procedure (example OP_NOP8 here)\n  * Remove OP_NOP8 from being affected by `SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS`.\n  * Add a `SCRIPT_VERIFY_DISCOURAGE_NOP8`, which only applies to `OP_NOP8`.\n  * Add a `SCRIPT_VERIFY_NOP8` which implements the new consensus logic.\n  * Before activation, add `SCRIPT_VERIFY_DISCOURAGE_NOP8` to the mempool flags.\n  * After activation, add `SCRIPT_VERIFY_NOP8` to both the mempool and consensus flags.\n\nTree-SHA512: d3b4538986ecf646aac9dba13a8d89318baf9e308e258547ca3b99e7c0509747f323edac6b1fea4e87e7d3c01b71193794b41679ae4f86f6e11ed6be3fd62c72"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e722e8879a8e1eebe02fd14c70c39346c79f95d", "message": "Merge #11516: crypto: Add test cases covering the relevant HMAC-SHA{256,512} key length boundaries\n\na3f5657 Add test cases covering the relevant key length boundaries: 64 bytes +/- 1 byte for HMAC-SHA256 and 128 bytes +/- 1 byte for HMAC-SHA512 (practicalswift)\n\nPull request description:\n\n  * Add test cases covering the relevant key length boundaries: 64 bytes +/- 1 byte for HMAC-SHA256 and 128 bytes +/- 1 byte for HMAC-SHA512.\n  * ~~Avoid creating a one-past-the-end pointer in the case of key length 64 (HMAC-SHA256) and key length 128 (HMAC-SHA512).~~\n  * ~~Avoid performing a noop memset call (zero length argument) in the case of key length 64 (HMAC-SHA256) and key length 128 (HMAC-SHA512).~~\n\nTree-SHA512: 48ff9ab79d41aab97b5b8f6496cc08a39955a07eb424f74ada6440d3b168b6204d3527fa677e175c47e40142f9d62c7456ae162e5a2f5b557e90fb353beef1d0"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44535d8189ec2f0e77d445804cca60b869b24a1", "message": "Merge #11836: Rename rpcuser.py to rpcauth.py\n\n3121d76 doc: Update release notes for share/rpcauth/rpcauth.py rename (Henrik Jonsson)\n3fdb297 Rename rpcuser.py to rpcauth.py (Henrik Jonsson)\n\nPull request description:\n\n  This script creates `rpcauth` entries for bitcoin.conf, not the deprecated `rpcuser` entry, so this changes the name of the script to match.\n\n  As discussed in #11830.\n\nTree-SHA512: cd71c2a4043ef1381d3810b057cc83be3fac612df576b91b683ef91fdb7998c534b3b97a3313845eb867dc4bf7cc42a1250474d2261ab3f9ed2f884ca8ebd9f4"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37ffa16933953565dcab5c0d7e0ee1ebb6e349c3", "message": "Merge #11583: Do not make it trivial for inbound peers to generate log entries\n\nbe9f38c Do not make it trivial for inbound peers to generate log entries (Matt Corallo)\n\nPull request description:\n\n  Based on #11580 because I'm lazy.\n\n  We should generally avoid writing to debug.log unconditionally for\n  inbound peers which misbehave (the peer being about to be banned\n  being an exception, since they cannot do this twice).\n\nTree-SHA512: 8e59c8d08d00b1527951b30f4842d010a4c2fc440503ade112baa2c1b9afd0e0d1c5c2df83dde25183a242af45089cf9b9f873b71796771232ffb6c5fc6cc0cc"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26", "message": "Merge #11839: don't attempt mempool entry for wallet transactions on startup if alr\u2026\n\n6697a70 add test for unconfirmed balance between restarts (Gregory Sanders)\n6ba8f30 don't attempt mempool entry for wallet transactions on startup if already in mempool (Gregory Sanders)\n\nPull request description:\n\n  \u2026eady in mempool\n\n  Mempool loads first, wallet second. Second attempt fails, marking that transaction !fInMempool. Those funds will disappear until confirmation is reached.\n\nTree-SHA512: 955f0565ec1dc1ba395e0b803a98c07b7cd00c8cac5ec618ed832fed259a856fb7bbbe41310cf6a4e43c0435e09b156109d2a4467d403811dc8379d2caebeede"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d3dc85b698430f71f6e242a01a25a70c9ef397", "message": "Merge #11740: Implement BIP159 NODE_NETWORK_LIMITED (pruned peers) *signaling only*\n\nde74c62 [Doc] Update bip.md, add support for BIP 159 (Jonas Schnelli)\ne054d0e [QA] Add node_network_limited test (Jonas Schnelli)\nbd09416 Avoid leaking the prune height through getdata (fingerprinting countermeasure) (Jonas Schnelli)\n27df193 Always set NODE_NETWORK_LIMITED bit (Jonas Schnelli)\n7caba38 Add NODE_NETWORK_LIMITED flags and min block amount constants (Jonas Schnelli)\n\nPull request description:\n\n  Extracted from #10387.\n  Does implement BIP159, but only the signalling part. No connections are made to NODE_NETWORK_LIMITED in this PR.\n\n  The address relay and connection work (the more complicated part) can then be separated (probably in #10387).\n\nTree-SHA512: e3218eb4789a9320b0f42dc10f62d30c13c49bdef00443fbe653bee22933477adcfc1cf8f6a95269324560b5721203ed41f3c5e2dd8a98ec2791f6a9d8346b1a"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef4dfebbc07d93d72899f60e01ca77a280c9122", "message": "Merge #11847: Make boost::multi_index comparators const\n\n1ec0c0a Make boost::multi_index comparators const (Suhas Daftuar)\n\nPull request description:\n\n  This fixes compatibility with boost 1.66.\n\n  Fixes #11837\n\nTree-SHA512: 3181336fcc159aa7ee70c843d76f2a063e4a401f427c218d7f856a3548ca70eaf8eee9d20abb73be259a5656273d3a65aa748e946e09cf656de5f50e6d4eb880"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f9dad0b79973355623fc075f82f80d6271540c", "message": "Merge #11809: gui: Fix proxy setting options dialog crash\n\nf05d349 gui: Fix proxy setting options dialog crash (Wladimir J. van der Laan)\n\nPull request description:\n\n  This fixes a crash bug when opening the options dialog.\n\n  - Check the return value of split() to avoid segmentation faults due to   out of bounds when the user manages to enter invalid proxy settings.  This is reported resonably often.\n\n  - Move the default proxy/port to a constant instead of hardcoding magic values.\n\n  - Factor out some common code.\n\n  - Revert #11448 because this proves a more robust replacement, it is no longer necessary and didn't generally solve the issue.\n\n  No attempt is made to do full sanity checking on the proxy, so it can still be rejected by the core with an InitError message.\n\nTree-SHA512: 72b700b7d6c4d3e3410f0c60e9e4facf93d7c6c1a1b6b23957c48b074a045970f518166952859d1ebca8620062cb70d222670a7310bbd6fe50550ec6d04417b5"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e500241200282eb475709e9e85c54ebcc92eaf5", "message": "Merge #11838: qa: Add getrawtransaction in_active_chain=False test\n\nfa4c16d qa: Add getrawtransaction in_active_chain=False test (MarcoFalke)\n\nPull request description:\n\n  #10275 accidentally forgot to add a test for `in_active_chain==False`.\n\n  This adds a test and also removes the special casing of `blockhash.IsNull()`, which makes no sense imo.\n\nTree-SHA512: 6c51295820b3dcd53b0b48020ab2b8c8f5864cd5061ddab2b35d35d643eb3e60ef95ff20c06c985a2e47f7080e82f27f3e00ee61c85dce627776d5ea6febee8f"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f05d34988719b22ef5c64888f90b4c8f3a2c7931", "message": "gui: Fix proxy setting options dialog crash\n\nThis fixes a crash bug when opening the options dialog.\n\n- Check the return value of split() to avoid segmentation faults due to\n  out of bounds when the user manages to enter invalid proxy settings.\n  This is reported resonably often.\n\n- Move the default proxy/port to a constant instead of hardcoding magic\n  values.\n\n- Factor out some common code.\n\n- Revert #11448 because this proves a more robust replacement, it is no\n  longer necessary and didn't generally solve the issue.\n\nNo attempt is made to do full sanity checking on the proxy, so it can\nstill be rejected by the core with an InitError message."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7630a1fe9a4c9a38b47fe385afb8d8a1902870d6", "message": "Merge #11829: Test datadir specified in conf file exists\n\n529b866 Test datadir in conf file exists (MeshCollider)\n\nPull request description:\n\n  Provoked by Nick ODell's discovery here: https://bitcoin.stackexchange.com/questions/64189/when-running-bitcoind-i-keep-getting-boostfilesystemspace-operation-not-p/64210#64210\n\n  If a custom data directory is specified using `-datadir` argument, its existence is checked before the conf file is loaded. But if the conf file then specifies a different non-existent `datadir`, that isn't tested, and results in esoteric errors like:\n\n      EXCEPTION: N5boost10filesystem16filesystem_errorE\n      boost::filesystem::space: Operation not permitted\n\n  This just adds a check for the datadir existence at the end of `ReadConfigFile()`\n\nTree-SHA512: e488618c40aa356263f94040ae00aa4be98038abef66e8674b01032d22a5553a7fafcb8fe2d1f095865b39fb138c07b7a94415a00ef837573f92f95af065f712"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497d0e014cc79d46531d570e74e4aeae72db602d", "message": "Merge #10275: [rpc] Allow fetching tx directly from specified block in getrawtransaction\n\n434526a [test] Add tests for getrawtransaction with block hash. (Karl-Johan Alm)\nb167951 [rpc] Allow getrawtransaction to take optional blockhash to fetch transaction from a block directly. (Karl-Johan Alm)\na5f5a2c [rpc] Fix fVerbose parsing (remove excess if cases). (Karl-Johan Alm)\n\nPull request description:\n\n  [Reviewer hint: use [?w=1](https://github.com/bitcoin/bitcoin/pull/10275/files?w=1) to avoid seeing a bunch of indentation changes.]\n\n  Presuming a user knows the block hash of the block containing a given transaction, this PR allows them to fetch the raw transaction, even without `-txindex`. It also enables support for getting transactions that are in orphaned blocks.\n\n  Note that supplying a block hash will override mempool and txindex support in `GetTransaction`. The rationale behind this is that a transaction may be in multiple places (orphaned blocks) and if the user supplies an explicit block hash it should be adhered to.\n\n  ```Bash\n  $ # a41.. is a tx inside an orphan block ..3c6f.. -- first try getting it normally\n  $ ./bitcoin-cli getrawtransaction a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79 1\n  error code: -5\n  error message:\n  No such mempool transaction. Use -txindex to enable blockchain transaction queries. Use gettransaction for wallet transactions.\n  $ # now try with block hash\n  $ ./bitcoin-cli getrawtransaction a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79 1 0000000000000000003c6fe479122bfa4a9187493937af1734e1e5cd9f198ec7\n  {\n    \"hex\": \"01000000014e7e81144e42f6d65550e59b715d470c9301fd7ac189[...]90488ac00000000\",\n    \"inMainChain\": false,\n    \"txid\": \"a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79\",\n    \"hash\": \"a41e66ee1341aa9fb9475b98cfdc1fe1261faa56c0a49254f33065ec90f7cd79\",\n    \"size\": 225,\n  [...]\n  }\n  $ # another tx 6c66... in block 462000\n  $ ./bitcoin-cli getrawtransaction 6c66b98191e9d6cc671f6817142152ebf6c5cab2ef008397b5a71ac13255a735 1 00000000000000000217f2c12922e321f6d4aa933ce88005a9a493c503054a40\n  {\n    \"hex\": \"0200000004d157[...]88acaf0c0700\",\n    \"inMainChain\": true,\n    \"txid\": \"6c66b98191e9d6cc671f6817142152ebf6c5cab2ef008397b5a71ac13255a735\",\n    \"hash\": \"6c66b98191e9d6cc671f6817142152ebf6c5cab2ef008397b5a71ac13255a735\",\n    \"size\": 666,\n  [...]\n  }\n  $\n  ```\n\nTree-SHA512: 279be3818141edd3cc194a9ee65929331920afb30297ab2d6da07293a2d7311afee5c8b00c6457477d9f1f86e86786a9b56878ea3ee19fa2629b829d042d0cda"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13e44385147aa8789a4992fa6d162ffec04c9ae", "message": "Merge #11830: rpcuser.py: Use 'python' not 'python2'\n\n6d2f277 rpcuser.py: Use 'python' not 'python2' (Henrik Jonsson)\n\nPull request description:\n\n  Note that `rpcuser.py` seems to handle either version when called explicitly like `python2 rpcuser.py` / `python3 rpcuser.py`. This change allows the user's `python` to be used to interpret the script.\n\n  There's not always a `python2` installed, e.g. if only Python 3.0+ is installed as `python` / `python3`, like on Arch Linux (https://github.com/hkjn/src/blob/master/bitcoin/Dockerfile#L14) but `python` is almost always present.\n\n  # Tested\n\n  Script is already compatible with both major versions:\n  ```\n  $ python2 share/rpcuser/rpcuser.py foobar\n  String to be appended to bitcoin.conf:\n  rpcauth=foobar:2951d04c215769c8887c1fa4a8f712c$63c9a08e3b69f811e3837c0d5b6a355b7f798afc7094d80008f5c56a056c387f\n  Your password:\n  TV4I54T6W38v1sj3iF4Xsw7A-wYav-Cn8uTr8qv4xZ8=\n\n  $ python3 share/rpcuser/rpcuser.py foobar\n  String to be appended to bitcoin.conf:\n  rpcauth=foobar:129afbbd214c1f85fb6b9941402506f$4c5af73a2f3fd0a1d8232c28bc5c36f9b0cffd62b7b139beb328d089b16028dc\n  Your password:\n  qqbeWrGHqbYL1tUDh1wHKkejzxiGvOa3SPkDbbCwBfs=\n\n  $ python2 --version\n  Python 2.7.12\n\n  $ python3 --version\n  Python 3.5.2\n  ```\n\nTree-SHA512: b5d6de15507cfd8dbb520325cf0b67fa471fa4fe3661de4ea6841fadb6ec9ba65d0c4f545f58578168c9ce9f6e483d613cce31ab3dd28117510bf9cada3b7b91"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24df9af81625122c816a0ae6bb842ea47a4041ff", "message": "Merge #11781: Add `-debuglogfile` option\n\n5a7c09a test: Add tests for `-debuglogfile` with subdirs (Anthony Towns)\n4158734 doc: Update release notes for `-debuglogfile` (Wladimir J. van der Laan)\n2323242 test: Add test for `-debuglogfile` (Wladimir J. van der Laan)\ncf5f432 Add `-debuglogfile` option (Wladimir J. van der Laan)\n\nPull request description:\n\n  This patch adds an option to configure the name and/or directory of the debug log file.\n\n  The user can specify either a relative path, in which case the path is relative to the (network specific) data directory. They can also specify an absolute path to put the log anywhere else in the file system.\n\n  Alternative to #11741 that gets rid of the concept of a \"log directory\" by specifying the path for the specific kind of log, the debug log. Which happens to be the only kind of log we have at this point*, but a hypothetical new kind of log (say, an audit log) would get a new option. This has more flexibility than specifying a directory which has to contain all of them.\n\n  \\* excluding `db.log` which is internally generated by the wallet database library, but that one moves along with `-walletdir`.\n\nTree-SHA512: 4434d0e598dc23504e5c9e67fdbaef56db4f0fd490f9f54fd503e69d4dda9b5b69c539e1794ed841e72161b7b1dc3374d2f1193dd431b057566750e56fd8f24b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d25e90db06149fa456b0a8f15b7b68005ff9c5", "message": "Merge #11804: [docs] Fixed outdated link with archive.is\n\nbf20a7d [docs] Fixed outdated link with archive.is (Tim Shimmin)\n\nTree-SHA512: 7d316aa4c462213578a9a1e71b06a459924ed3bb681a0469cc3719b21a871a6350fff4656696057e362561ee10dc10e933fe1328ef454ab7e133ecf05549ec1c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d7e0a3289baa3b641ca7ab864c5e8af4306f4de", "message": "Merge #11337: Fix code constness in CBlockIndex::GetAncestor() overloads\n\nb4058ed Fix code constness in CBlockIndex::GetAncestor() overloads (Dan Raviv)\n\nPull request description:\n\n  Make the non-const overload of `CBlockIndex::GetAncestor()` reuse the const overload implementation instead of the other way around. This way, the constness of the const overload implementation is guaranteed. The other way around, it was possible to implement the non-const overload in a way which mutates the object, and since that implementation would be called even for const objects (due to the reuse), we would get undefined behavior.\n\nTree-SHA512: 545a8639bc52502ea06dbd924e8fabec6274fa69b43e3b8966a7987ce4dae6fb2498f623730fde7ed0e47478941c7f8baa2e76a12018134ff7c14c0dfa25ba3a"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4158734946eb00a6944244f75a8a5b39e43c302a", "message": "doc: Update release notes for `-debuglogfile`"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23232422e507a90922c0870611cade5c789bb83a", "message": "test: Add test for `-debuglogfile`"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d357447eb8bcc17d4438bc9f4f3a34fac308", "message": "Merge #10874: [RPC] getblockchaininfo: Loop through the bip9 soft fork deployments instead of hard coding\n\ne4d0af4 Loop through the bip9 soft fork deployments instead of hard coding (Andrew Chow)\n\nPull request description:\n\n  Instead of hard coding which deployment statistics should be listed in the `getblockchaininfo` output, loop through the available deployments (except testdummy) when displaying their deployment info.\n\nTree-SHA512: 87e503bcf5e0fd379940d5e53320b9cbb4b47d647c66246d46f47c09a941f135e6ce1e8b75dad441ed4c22c3f41992dfde7717414be1d71c771d4ff8fe0e1936"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60d739eb49478a7d3a3c6def34467ce068580ad7", "message": "Merge #11789: [tests] [travis-ci] Combine logs on failure\n\nff8a9b0 [tests] Add combinedlogslen argument to test_runner.py (John Newbery)\ndba94ea [tests] [travis-ci] Move Travis functional test log post processing to test_runner (John Newbery)\nbba1c54 [tests] Improve logging shutdown and add hint for combine_logs (John Newbery)\n\nPull request description:\n\n  Replaces #11779 . Notes from that PR:\n\n  > Currently, when a functional test fails, the debug logs are printed sequentially to the travis log. This makes debugging race conditions based on the travis log hard. Instead, all logs events should be combined and sorted by their timestamp, then appended to the travis log.\n\n  @MarcoFalke\n\nTree-SHA512: 56c80067d6a2c92f7e6a35e3ae5160637a0de052d9da593c7be6e02233544a93c66d62456f903f85e2edc09e31ab4bdafd1aed1d9897ae48c634f82631f856f7"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd49862a703b69cd4b678977c87c559ddeead139", "message": "Merge #11794: Prefix leveldb debug logging\n\n9b80fc1 Prefix leveldb debug logging (Wladimir J. van der Laan)\n\nPull request description:\n\n  Add leveldb: prefix to leveldb debug logging lines.\n  leveldb debug messages come in various scary flavors such as:\n\n      2017-11-30 08:26:31 leveldb: Recovering log #26\n      2017-11-30 08:26:31 leveldb: Level-0 table #28: started\n      2017-11-30 08:26:31 leveldb: Level-0 table #28: 597 bytes OK\n      2017-11-30 08:26:31 leveldb: Delete type=0 #26\n      2017-11-30 08:26:31 leveldb: Delete type=3 #24\n\n  so it's reasonably important to mark them as coming from leveldb internals and not from consensus validation wallet or such.\n  This is consistent with the `libevent:` prefix for libevent messages.\n\n  (this only affects `-debug=leveldb` or `-debug=1` otherwise you won't see them in the first place)\n\nTree-SHA512: 074eba00d39c6378b9e14d03aa2c551b4e3fc7bffdd5a1a0ba2498b44bcc77071d47735be09493286056053f0cca625c5cbaad7ad1ddb9d902d30e7cd316d9d2"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ff6ff5ec5d787fb805ffc1270aab54214db4539", "message": "Merge #11744: net: Add missing locks in net.{cpp,h}\n\nbfb0c0a Add Clang thread safety analysis annotations (practicalswift)\n63f21d2 net: Add missing locks in net.{cpp,h} (practicalswift)\n\nPull request description:\n\n  Add missing locks in `net.{cpp,h}`:\n  * writing variable `nTotalBytesRecv` requires holding mutex `cs_totalBytesRecv` exclusively\n  * writing variables `nTotalBytesSent`, `nMaxOutboundTotalBytesSentInCycle` and `nMaxOutboundCycleStartTime` require holding mutex `cs_totalBytesSent` exclusively\n  * writing variables `nMaxOutboundTimeframe` and `nMaxOutboundLimit` require holding mutex `cs_totalBytesSent` exclusively\n  * writing variable `vAddedNodes` requires holding mutex `cs_vAddedNodes` exclusively\n\nTree-SHA512: 54a5b4bc6dc6f404dacf403af2ddd7b2214cc0a17d1d32a282def1c6b536105dada56bfabbc8606f56755f2d24874abba09913b51c8d13b0f2b000149551f0b0"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf5f432c69418adb51f0f4a0bdbd6ba3112ee11a", "message": "Add `-debuglogfile` option\n\nThis patch adds an option to configure the name and/or directory of the\ndebug log.\n\nThe user can specify either a relative path, in which case the path\nis relative to the data directory. They can also specify an absolute\npath to put the log anywhere else in the file system."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16fff802574159286e424802442551dc9eba9098", "message": "Merge #11783: Fix shutdown in case of errors during initialization\n\nd31e5c1 Fix shutdown in case of errors during initialization (Wladimir J. van der Laan)\n\nPull request description:\n\n  PR #10286 introduced a few steps which are not robust to early shutdown in initialization.\n\n  Stumbled upon this with #11781, not sure if there are other scenarios that can trigger it, but it's good to harden against this in any case.\n\n  E.g.\n  ```\n  $ src/bitcoind  -debuglogfile=/dfdf\n  Error: Could not open debug log file /dfdf\n  Program received signal SIGSEGV, Segmentation fault.\n  UnregisterValidationInterface (pwalletIn=0x0) at /.../bitcoin/src/validationinterface.cpp:82\n  82          g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n  (gdb) bt\n  #0  UnregisterValidationInterface (pwalletIn=0x0) at /.../bitcoin/src/validationinterface.cpp:82\n  #1  0x00005555555a11fc in Shutdown () at /.../bitcoin/src/init.cpp:196\n  #2  0x00005555555961cc in AppInit (argc=<optimized out>, argv=<optimized out>) at /.../bitcoin/src/bitcoind.cpp:183\n  #3  0x0000555555596249 in main (argc=0, argv=0x555555ecf200) at /.../bitcoin/src/bitcoind.cpp:19\n  ```\n\nTree-SHA512: 7dd9570a9803514a17781bfadf1edde47e96df4e852cce2f423cab422e005fb94d44e777af1a6ea5167b04a4d889e848ae7a61a7e0e94232247ddea32ee70fc8"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8879d50b18891564beebac7c3bc043a8023a4456", "message": "Merge #11793: Docs: Bump OS X version to 10.13\n\n543ab40 Docs: Bump OSX version to 10.13 in build-osx.md (Varunram Ganesh)\n\nPull request description:\n\n  Core works fine on macOS 10.13\n\nTree-SHA512: 44807920e3d5518c98d68191ed614019934bb702df9695389f8178a00a7c5afccd90fad68a07568cdc3e3d04068bddf434942fb81dceb6cbde9bb4ff4e49e425"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef14f2e3ff81c79666fdd5aa3790d1d30f4f81e4", "message": "Merge #11191: RPC: Improve help text and behavior of RPC-logging.\n\nc60c49b Improve help text and behavior of RPC-logging (Akio Nakamura)\n\nPull request description:\n\n  1. It is allowed `libevent` logging to be updated during runtime,\n    but still described that restriction in the help text.\n    So we delete these text.\n  2. Add a descrption about the evaluation order of `<include>` and\n    `<exclude>` to clarify how debug loggig categories to be set.\n  3. Add a description about the available logging category `\"all\"`\n    which is not explained.\n  4. Add `\"optional\"` to the help text of `<include>` and `<exclude>`.\n  5. Add missing new lines before `\"Argument:\"`.\n  6. `\"0\"`,`\"1\"` are allowed in both array of `<include>` and `<exclude>`.\n    `\"0\"` is **ignored** and `\"1\"` is treated **same as** `\"all\"`.\n    It is confusing, so forbid them.\n  7. It always returns all logging categories with status.\n    Fix the help text to match this behavior.\n\nTree-SHA512: c2142da1a9bf714af8ebc38ac0d82394e2073fc0bd56f136372e3db7b2af3b6746f8d6b0241fe66c1698c208c124deb076be83f07dec0d0a180ad150593af415"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b80fc1498d517b67657c4765f889364efabe683", "message": "Prefix leveldb debug logging\n\nAdd leveldb: prefix to leveldb debug logging lines.\nleveldb debug messages come in various scary flavors such as:\n\n    2017-11-30 08:26:31 leveldb: Recovering log #26\n    2017-11-30 08:26:31 leveldb: Level-0 table #28: started\n    2017-11-30 08:26:31 leveldb: Level-0 table #28: 597 bytes OK\n    2017-11-30 08:26:31 leveldb: Delete type=0 #26\n    2017-11-30 08:26:31 leveldb: Delete type=3 #24\n\nso it's reasonably important to mark them as coming from leveldb\ninternals and not from consensus validation wallet or such.\n\n(this only affects `-debug=leveldb` or `-debug=1` otherwise you won't\nsee them in the first place)"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d3dc52b6bad1cdb1c881baf8bb767465a6c2c8d", "message": "Merge #9254: [depends] ZeroMQ 4.2.2\n\n126999d depends: fix zmq build with mingw < 4.0 (Cory Fields)\n387879d [depends] ZeroMQ 4.2.2 (fanquake)\n\nPull request description:\n\n  Update depends ZeroMQ to 4.2.2, the release notes are available [here](https://github.com/zeromq/libzmq/releases).\n\n  We can drop both patches, as they have both been merged upstream (they actually had been for some time but just hadn't yet made it into a release).\n\n  `--without-documentation` is deprecated and has been replaced with `--without-docs`.\n  `--disable-perf` disables building performance measuring tools, which are enabled by default, see the libzmq [configure.ac](https://github.com/zeromq/libzmq/blob/master/configure.ac#L367).\n  Updated dependencies.md.\n  `--disable-curve-keygen` disable building the curve key generation tool. See [here](https://github.com/zeromq/libzmq/blob/master/configure.ac#L405).\n\n  Can someone on windows test that this is still working correctly. Maybe @achow101 ?\n\nTree-SHA512: c6c4b15f545b6de21648f05027b5500fca0e6b5b72e791ac9a0aa523c57f2feb5aae94e42531275dddd922e11e462a52f08be1118ba1629c3cae765b18e5d720"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c9b570fceaad76536a2c881b4dc1d961d9b306", "message": "Merge #11753: clarify abortrescan rpc use\n\n8b2c733 clarify abortrescan rpc use (Gregory Sanders)\n\nPull request description:\n\n  `-rescan` during startup doesn't apply since RPC has not warmed up by that point\n\nTree-SHA512: 0b6738ed9429ca41edbfa23bb3e2da23bb16fed9e55c1803ab140b2efc49ef3295bb8b7eeb8c24df94204c5b3fb25d0d57cbc8d1be11856a5763c9fde71bceba"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d1ebfcf854bf122340a121d668bbfb9e025cf2", "message": "Merge #11737: Document partial validation in ConnectBlock()\n\n9d811dc Document partial validation in ConnectBlock() (Suhas Daftuar)\n\nPull request description:\n\n  `ConnectBlock()` relies on validation that happens in `ContextualCheckBlock()` and\n  `ContextualCheckBlockHeader()`. This has implications for implementing consensus\n  changes and handling software upgrade to ensure that nodes upgrading their\n  software end up enforcing all the consensus rules.\n\nTree-SHA512: 36a252af2221b0e5d5d6f8d5f8b16f8b566ca0db2d56242130a5523302c8757599ac234594a6a946c1689b260d18a32c2c7f8c3831304e78b9832e2ce5ac435a"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e97039605e0de3ba9e2c266b21821e26c2437811", "message": "Merge #11747: Fix: Open files read only if requested\n\ne1a8ec5 Fix: Open files read only if requested (Andras Elso)\n\nTree-SHA512: 047951bf3fa1272764596d2efed0a541105a6d3057789ba4218cd1bbce8a802cab0feac0ed3d28f6eab6b2e54e294d46f729dd0162d6d209e319d716c0567352"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d31e5c1d0f303a8cd97077d425488ed5abdf5345", "message": "Fix shutdown in case of errors during initialization\n\nPR #10286 introduced a few steps which are not robust to early shutdown\nin initialization.\n\nStumbled upon this with #11781, not sure if there are other scenarios\nthat can trigger it, but it's harden against this in any case."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26efc220a13aa3413f6e55e311e8991445104f82", "message": "Merge #11722: Switched sync.{cpp,h} to std threading primitives.\n\nf7f7e2c threads: add a thread_local autoconf check (Cory Fields)\nbba9bd0 Switched sync.{cpp,h} to std threading primitives. (Thomas Snider)\n\nPull request description:\n\n  Replaced boost threading primitives with the std equivalents.\n\nTree-SHA512: 72d10f9e48bfcf1db87e4a88bc698ef98eba0b29fe904570391b34a6ea1ffad474b7f192e70e3588a30e448f70f244eb4ddc5f24412a0bde2b564e76274160a5"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a933cb14c75b9c79a02f8de8397a8eae405a264f", "message": "Merge #11603: Move RPC registration out of AppInitParameterInteraction\n\nabbd230 Move RPC registration out of AppInitParameterInteraction (Russell Yanofsky)\n\nPull request description:\n\n  Move to AppInitServers. This doesn't have any effects on bitcoin behavior. It was just strange to have this unrelated code in the middle of parameter interaction.\n\nTree-SHA512: 373e18f2ef8d21999ad36295d69326128a3086044acfc8ed537abd5497c8d3620b9832f7f6aa87c0c0939bb5e0d92be8a3c006b5997e9e6fa20334f5610c89bc"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fa64598e8b7d6901c546e938fb0eeda625a8e8", "message": "Merge #11755: [Docs] Bump minimum required version of GCC to 4.8\n\nfae98f6 [Docs] Bump minimum required version of GCC to 4.8 (fanquake)\n\nPull request description:\n\n  Make it explicit that the minimum required version of GCC is 4.8. Discussion in #11732.\n\nTree-SHA512: 85ade5a4a63ea1cb6b5e20756bc96f25518c394e00a8d3ed5b9c2927b55ea3155645ca74bb1c7e7eda69d7e42d440a42bde839f281e57fc3e20390b2a19885d6"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12218", "title": "net: Move misbehaving logging to net logging category", "body": "This moves the error messages for misbehavior (when available) into the line that reports the misbehavior, as well as moves the logging to the `net` category.\r\n\r\nThis is a continuation of #11583 and avoids serious-looking errors due to misbehaving peers. As it is impossible to correlate the `peer=X` numbers to specific incoming connections now without enabling the `net` category, it doesn't really help to see these messages by default.\r\n\r\nTo do this, Misbehaving() gains an optional `message` argument.\r\n\r\nE.g. change:\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED\r\n    2018-01-18 16:02:27 ERROR: non-continuous headers sequence\r\n\r\nto\r\n\r\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED: non-continuous headers sequence\r\n\r\nWhen there is a category for \"important\" net messages (see #12219 ), we should move it there.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12197", "title": "Log debug build status and warn when running benchmarks", "body": "Log whether the starting instance of bitcoin core is a debug or release build (--enable-debug).\r\n\r\nAlso warn when running the benchmarks with a debug build, to prevent mistakes comparing debug to non-debug results.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729", "title": "rpc: introduce 'label' API for wallet", "body": "Add label API to wallet RPC.\r\n\r\nThis is one step towards #3816 (\"Remove bolt-on account system\") although it doesn't actually remove anything yet (that would be a follow-up pull).\r\n\r\nThese initially mirror the account functions, with the following differences:\r\n- These functions aren't DEPRECATED in the help\r\n- Help mentions 'label' instead of accounts. In the language used, labels are associated with addresses, instead of addresses associated with labels. (in contrast to accounts.)\r\n- Labels have no balance\r\n  - No `getreceivedbylabel`\r\n  - No balances in `listlabels`\r\n  - `listreceivedbylabel` can show received transactions to addresses with a label, not use the account tally (currently it is removed, but according to discussion that goes too far as this doesn't inherently have to do with balance)\r\n  - `listlabels` has no minconf or watchonly argument\r\n  - Remove `move`\r\n- Like in the GUI, labels can be set on any address, not just receiving addreses\r\n- Unlike accounts, labels can be deleted. Being unable to delete them is a common annoyance (see #1231).  Currently only by reassigning all addresses using `setlabel`, but an explicit call `deletelabel` which assigns all address to the default label may make sense.\r\n- These calls stay the same, with `account` argument renamed to `label`:\r\n  - `importaddress`\r\n  - `importprivkey`\r\n  - `importpubkey`\r\n\r\n## API\r\n\r\nShort description of every RPC call: for detailed information check RPC help. The general idea is to offer the same functionality as the GUI label system. Labels are simply a name for an address, or a group of addresses.\r\n\r\n**Do not use the deprecated account system and the label system with the same wallet at the same time**. These APIs use the same underlying data in the database for (slightly) different purposes, using them interchangeably will give unexpected results. (Just like using the GUI labels and account system at the same time. Using the GUI labels and the label API at the same time, however, is no problem)\r\n- `getlabel`: returns the label (and other address book data) associated with an address\r\n  - This exposes the fields in the CAddressBookData structure, which is currently the 'purpose' (sending address, receiving address) and 'destdata' (used for storing payment requests IIRC)\r\n- `getaddressesbylabel`: get addresses labelled with one label\r\n- `listlabels`: list all labels (or labels with a certain purpose, such as receive/send)\r\n- `setlabel`: assign a label to an address\r\n- `getlabeladdress`: get the 'label address' for the specified label. This gets an unused address with the label, creating one if necessary **should be removed according to discussion**\r\n\r\nThese calls have a deprecated account parameter, which can be turned into a label-parameter as is:\r\n- `listtransactions`\r\n## Open questions\r\n- Should there be such a thing as a 'label address'? My initial feeling about this was\r\n  'no', labels are just a name for one or more addresses, intuitively there is no \"default address\",\r\n  and it also isn't a GUI feature.\r\n  - but at least @luke-jr is relying on this behavior in his miner.\r\n  - this would greatly simplify the code though - it would be impossible to get rid of the `CAccount` structure due to this.\r\n## TODO\r\n- [x] Needs RPC tests (thanks ryanofsky)\r\n- [ ] Needs mention in release notes\r\n- [ ] optional: a flag in the wallet to prevent use of both the account and label API\r\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/622346", "body": "oops, you're right, thanks :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/622346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/644655", "body": "Shouldn't this be \n\n```\noverride USE_UPNP = 1 \n```\n\nOr is the default now `-` to not link again UPNP when the option is not provided?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/644655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/686741", "body": "I could host one, are there instruction somewhere on how to do that?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/686741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/693398", "body": "Seems to be a merge commit generated by git pull (merging back the master branch of bitcoin/bitcoin into bitcoin-qt)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/693398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/694932", "body": "I don't think this is necessarily a git mess-up. If you pull between two\n(or more) streams, you are bound to get the same commits through different\nmerge paths multiple times. The end result will be OK because git is smart\nenough to handle it it just makes the commit graph a bit more complicated\n(that's why for review it is best to look at the overall diff before/after\nthe merge, which is what github shows for the diff of a pull request) .\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/694932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/958947", "body": "bugfix (missing module)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/958947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1083670", "body": "In boost, some shm func, see #879\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1083670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1096742", "body": "It's been fixed\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1096742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1203439", "body": "I think a good case can be made to remove this function.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1203439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1298935", "body": "It's good to support a few versions back for people that want to built it on stable linux distros and in this case, the gitian builder.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1298935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1319440", "body": "Re-run qmake\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1319440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324775", "body": "What sipa means is that when you provide invalid command-line options to bitcoin, it will usually silently ignore some arguments but not others and continue anyway (see #1044). You shouldn't put much value in the fact that the client connects and works, it may well be using default options.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346853", "body": "@Diapolo Don't put this inside #ifndef WIN32\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346881", "body": "it should be in an <b>ifdef WIN32</b>, not an <b>ifndef WIN32</b>\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1566435", "body": "I've re-did the commands in translation process and end up with an empty diff. So everything should be OK.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1566435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1604504", "body": "Yes, this block is needed. It is very possible to change translation files without re-running qmake. This should be picked up by make, not qmake. The system() in the qmake file is a kludge to make sure qmake (which somehow runs qrc) doesn't fail when the .qm files are not yet there.\n\nEdit: So to be clear:\n- the .qm files are built from the .ts files\n- the .qm files are used to build  qrc_bitcoin.cpp using rcc\n- qrc_bitcoin.cpp is compiled to qrc_bitcoin.o\n- qrc_bitcoin.o is linked into the executable\n\nqmake generates the make rules for all of these.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1604504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607660", "body": "I cannot reproduce this problem. I've tried running qmake, then deleting all the .qm files (built by the system command), then running make, and each and every one of the .qm files is rebuilt before following the chain I mentioned above.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607678", "body": "No, I did not remote the system call. I followed exactly the steps in my message above. I cannot remove the system call because missing .qms cause qmake to fail (as I said above, because it tries to call the resource compiler qcc which misses files...). So I did the nearest thing and removed the .qm files generated by qmake before calling make...\n\nThis is with qmake without an IDE. I'm sure it's the same in Qt Creator though as I tested it before committing this.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607855", "body": "Yeah, you're right. It seems that the reason that qmake calls qcc is to determine dependencies. When it gives error such as this:\n\n```\nRCC: Error in '../bitcoin/src/qt/bitcoin.qrc': Cannot find file 'locale/bitcoin_bg.qm'\n```\n\nThey are warnings, not fatal errors. It means that it will not add the .qms to the automatic dependencies. With the system call, the dependencies are generated correctly so it works without `compiler_TQSM_make_all`.\n\nSo indeed, adding `compiler_TSQM_make_all` to the pre-target deps allows building without the system call. However, the 35 \"Errors\" are very ugly and hard to ignore... it might be that there is a way to silence them, dunno.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1608018", "body": "Yes, back then it seemed to cause unneeded rebuilds of the translations, and also isn't \"more correct\" as long as the dependency generation of qcc does its job, which works fine with the current .pro. \n\nIf you find a way to remove the system call without causing QCC errors I'm fine with re-adding PRE_TARGETDEPS. But as of now it is unneeded ballast in the makefile.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1608018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1703254", "body": "This change has been reverted. The error message was incorrectly changed. The \"Account has insufficient funds\" messages refers to the balance of an account, whereas \"Insufficient funds\" refers to the total balance.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1703254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1732460", "body": "I honestly can't tell you. I'm lost in a maze of makefile.XXX, all alike. I suppose it's either makefile.linux-mingw, makefile.mingw, or both.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1732460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759732", "body": "Yes... :s And this time it's not only one function. IMO this should be changed before merge, otherwise we end up with a strange mix.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759987", "body": "Woohoo. ACK\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1786050", "body": "BTW this makes about 800k difference in the static .exe size. This makes sense, as the size of `json_spirit_reader.o` inside the final linked image was ~1Mb (acccording to my makeshift linker map analyzer), which is now gone. Seemingly, the template version uses less space as it pulls only the methods and classes that are actually used. For this reason it did grow `bitcoinrpc.o` from 220 kB  to 295 kB as it could no longer use the pre-defined templates inside the `json_*.o`. In any case, the overall size shrunk which is nice.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1786050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1790275", "body": "Yes, I verified that it works\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1790275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1806413", "body": "The output parameter is not set if !fFileBacked.  But in any case, initializing variables on the stack is good precaution.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1806413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1809478", "body": "It's an unsigned int, so %u would be right. I wonder if we can somehow get the gcc type checks/warnings for printf to work for strprintf.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1809478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1887284", "body": "makes no sense indeed, see commit 3ccbaa56f42d2c6fcb424b641ec84a138f0ee9bc\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1887284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1902837", "body": "Because it doesn't hurt, could always be removed later, and wasn't worth holding up a very important patch for.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1902837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1932777", "body": "Because most of us don't bother counting spaces. When rendering text,\nspaces are collapsed anyway, at least the garden variety 0x20 one.\n\nI fear you're alone in your quest for a more-efficient-with-spaces world :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1932777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371251", "body": "Btw, about consistency: let's add one function in util.cpp to format date times for logging, currently there's a whole bunch of DateTimeStrFormat with the same format string throughout the code, and this updates only one\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2533447", "body": "We all remember that. But the respective pull was closed, without merge.\nPretty strange.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2533447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3342956", "body": "Seems @jonasschnelli did a merge instead of a rebase here, no worries, though we prefer rebases in pull requests. If you look at the overall changes there's nothing weird:\nhttps://github.com/bitcoin/bitcoin/pull/2613/files\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3342956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3346675", "body": "Can't change it anymore now, it's been merged.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3346675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3935882", "body": "Yes, that'd display it in the user's chosen unit instead of always BTC.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3935882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3984829", "body": "I stumbled on this while trying to merge the payment request with the txfee work; reducing the amount of code makes merging a bit easier.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3984829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4020442", "body": "I agree that this commit combines a lot of stuff, maybe too much, but a commit for every small change is something that we don't really encourage.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4020442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4122266", "body": "No changes to bitcoinstrings were there (I verified by removing it).\nWe can do another update after #2991. You asked to see the \"make translate\" result so I pushed this....\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4122266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4385955", "body": "Or use MAX_MONEY / COIN from main.h\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4385955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028", "body": "maybe add 'or a distribution package such as PPA'\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81895028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615", "body": "Indeed. The discussion belongs there, and so does the documentation. Maybe refer to the instructions for reporting security issues on the contact page: https://bitcoincore.org/en/contact/ instead of mentioning the address directly?\nIf we then happen to have GPG set up, it can be mentioned there without having to put everything into this template.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87372615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637", "body": "\"I wanted to do so first, but the URLs are fragile and can change\" so are email addresses.\nIt's not impossible to update this again, it just should be rare.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87394637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536", "body": "Please remove this from the patch.\nYou can define your own local git ignores in `.git/info/exclude` within the repository.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/10507536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626", "body": "> I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n\nYes, those should go too (also as we haven't supported qt creator builds since 0.9).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42482626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409", "body": "In closed-source environments in which everyone uses the same IDE that is common. In open source software, where everyone uses their own editors/IDE/tools, it is less common. Only you know what files your editor produces and this may change from version to version.\nThe canonical way to do this is thus to create your local gitignore. Add this to `~/.gitconfig`:\n\n```\n[core]\n    excludesfile = /home/.../.gitignore_global\n```\n\nThen put your favourite tool's excrement filenames in that file :-)\nAnother option is to use per-project `.git/info/exclude`. These are not committed either.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979", "body": "See #6878\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42851979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/78704137", "body": "Another java leftover, good catch\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/78704137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79392807", "body": "There was a component used for testing that was based on bitcoinj. It was finally removed (in favor of the internal Python based testing framework) in #8504\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79392807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128460722", "body": "Not only that, but we shouldn't be creating a `wallet.backup` file in the src directory at all. It should go in the temporary directory created for the other test files.\r\n\r\nSounds like a really bad thing now, someone could confuse it for a real wallet backup, for one.\r\n\r\nThanks for noticing @eklitzke.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128460722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129408978", "body": "This line can go after\u00a0#10927", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129408978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129820915", "body": "I haven't seen any instances of it being created in new trees, so most probably if you have this, it's a remainder from an old build. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129820915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37851603", "body": "This is changing RUN_TESTS from true to false. Isn't that the wrong way around?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37851603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93391851", "body": "If this takes extra time, we could have only one of the builds do this. The distdir is arch-independent, after all.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93391851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111729170", "body": "My intent was to add it for all the lines that have `RUN_TESTS=true`", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111729170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137648364", "body": "Sigh, rebase fail", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137648364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158229294", "body": "Repeating this condition is a bit ugly. I know every `-` is invoked as a separate script, but as this is YAML, isn't it possible to spread a script over multiple lines?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158229294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40325449", "body": "Absolutely, it must be understandable without referring to them, but please **do** refer to solved github issues in the commit descriptions. This makes it much easier to keep track of what was solved when when browsing history.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40325449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40430703", "body": "I'm sure there are some exceptions, but in general they should aim to be.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40430703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40430873", "body": "absolutely. They are a wholly different animal from normal run-of-the-mill changes, that should be made clear.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40430873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62624409", "body": "> git rebase -i HEAD~<amount of commits to squash>\n\nIt's not the number of commits to squash, but at least that amount +1, as you need a base commit too to squash into.\nUsually more like the total number of commits in someone's PR that they want to edit.\n\nI haven't found a really user friendly way to determine this base commit yet, which is why I usually look it up for people. HEAD~x may be best, but is also something to get wrong easily if you miscount.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62624409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62624448", "body": "After this, they'll get another editor in which they can combine/refine the commit messages.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62624448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79794268", "body": "Well, not in general, but we want to encourage it for people that don't know how to use git. I'd prefer people to learn how to do it themselves, of course, but personally tutoring everyone how to use git (especially those that use the web interface :( ) is a lot of work.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79794268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79817658", "body": "should this be \"several pull requests\"?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79817658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96168522", "body": "I tend to always use `<component>: <title>` as in commit messages of the Linux kernel and many related projects.\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96168522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111739839", "body": "I think 'disregarded' is too strong here. It will be delayed for merge, but there's no rule preventing e.g. discussion or people from testing it.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111739839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111739885", "body": "s/bug reports/bug fixes ?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111739885/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111740310", "body": "Good suggestion.\r\n\r\nIt looks like github also provides reviewer suggestions based on who touched the code before (see e.g. https://github.com/bitcoin/bitcoin/pull/10202, or any pull that hasn't got any reviewers yet)", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111740310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137659817", "body": "s/directly/immediately/ I'd say", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137659817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137660073", "body": "\"Refactoring changes\" maybe, or \"Pull requests that refactor the code\"", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137660073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23912552", "body": "Yes, don't make these kind of pointless changes please.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23912552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15924379", "body": "Whoa this file is out of date. \n- The reference implementation of Bitcoin is now called Bitcoin Core\n- The instructions in doc/build-*.md deal with building the entire project, not just bitcoind\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15924379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120677125", "body": "Right, including a specific commit is id not a good idea because it essentially freezes the build instructions in time.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120677125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30583381", "body": "Agreed @theuni. Let's avoid '-' where possible.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30583381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/80466306", "body": "Now that the manpages have been moved out of `debian`, is there still a reason to include the `debian` directory here? \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/80466306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/80627783", "body": "Thanks, yes, the licensing is still annoying.\n\nWould be easy enough to write our own desktop and protocol file and install them, though OTOH I suppose those things are quite distro specific, at least where to install them.\n\nOut of scope for this pull at least.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/80627783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8397962", "body": "Uh oh, we've run out of '=' characters, if we can't find some additional ones quickly this is clearly the end of the world!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8397962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8398050", "body": "Phew, an emergency fix, update your clients now https://github.com/bitcoin/bitcoin/commit/c8af33aa7568c450edffe15c4863895c20bac54f\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8398050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16650058", "body": "_the_ was left out on purpose here. There are multiple full node implementations.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16650058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17834822", "body": "'multi-machine code that needs to operate across the internet' is one clause, please don't break it with a comma\nAlso splitting the \"If...\" off looks strange here as it raises the expectation that something will follow.\nJust keep this sentence as-is.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17834822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23912336", "body": "NACK on this. Using UTF-8 to pretty up the text is fine in 2015.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23912336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67839233", "body": "Sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67839233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8181058", "body": "Any specific reason for removing the --verbose?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8181058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15921348", "body": "I agree on the idea.\n\nI think strictly spoken what it needs is 'libtoolize' (which either can be in the path or can be overridden with LIBTOOLIZE). See also the statements after it.\n\n@theuni any comments? do you know is there an argument on autoreconf to automagically fail (with a saner message) if we can't libtoolize?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15921348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15940326", "body": "Eh, yes, that message seems to be as clear and in-your-face as error messages get.\n\nI mean why would\n\n```\nLibtool is Missing. Bitcoin Requires Libtool To Compile.\n```\n\nbe better than\n\n```\nautoreconf: libtoolize is needed because this package uses Libtool\n```\n\nClosing this...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15940326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52826193", "body": "`-z` is not the right check here, you probably want `! -x` to check for executableness\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52826193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134662", "body": "It is tri-state:\n\nqmake USE_UPNP=\n-> miniupnpc not linked / compiled in\n\nqmake USE_UPNP=0\n-> miniupnpc is compiled in, but disabled by default (-llibupnpc is linked\nin, USE_UPNP=0 is set)\n\nqmake USE_UPNP=1\n-> miniupnpc is compiled in, and enabled by default (-llibupnpc is linked\nin, USE_UPNP=0 is set)\n\n(as documented in doc/readme-qt.rst)\n\nI've just tested this out, and it works as expected.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134684", "body": "(uh, the last one should say \"...USE_UPNP=1 is set\")\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080461", "body": "Even though there are a lot, at least it makes it possible to see the changes. Now it has to be compared manually.... that's not better than letting github do an half-assed job first\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186157", "body": "What is the -s?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186281", "body": "OK\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1668778", "body": "I'm sure it will not be used. Looking in the generated makefile, CFLAGS is only used for .c -> o compilation.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1668778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835644", "body": "ACK\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1835644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2755088", "body": "This adds a parameter \"--param ssp-buffer-size=1\". How does that help compilation when other params are added?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2755088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2762805", "body": "Ok, if it's already solved then I'm closing this pull\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2762805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2763770", "body": "That's what I understood, as there are no --params in master, they also can't interfere with other options.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2763770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/4475757", "body": "No problem I'll just remove them from this pull\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/4475757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83527315", "body": "concept ACK - though personally I'd prefer passing in this version as a parameter from our configure.ac, if possible, instead of changing this upstream file\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83527315/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33146647", "body": "Why remove the accessability stuff?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33146647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33226133", "body": "OK, fair enough\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33226133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120685449", "body": "Does the first argument here influence anything else besides how it is printed in the logging?\r\nhttps://developer.gnome.org/anjuta-build-tutorial/stable/library-autotools.html.en\r\nSeems to imply `LIB_CFLAGS` and `LIB_LDFLAGS` get defined based on this parameter.\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120685449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "Linrono": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209", "title": "RPCAUTH doesn's seem to be recognized by the client.", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nI was trying to set up a Lightning node and ran into issues with user authentication with cookies. So, as a work around, I ended up setting up a rpcuser and rpcpassword. Looking at my debug.log, I saw the line saying that those options have been superseded by rpcauth since 2015. I looked up how to do this and found and downloaded the rpcuser.py script and ran it and I got a line to put into my config file. It looked like this.\r\n\r\n`rpcauth=linrono:8512a641e39573384c5c321d5d1527a$ab5536ee2244c70ad2efe8d68bd50e3495a7a48656794a094f5b1a2a5a874a4d`\r\n\r\nThis is not what I am using, but what I have was generated the same way. After saving this to my config file and restarting my client, I checked my debug log file and found this line. \r\n\r\n`No rpcpassword set - using random cookie authentication`\r\n\r\nI double checked and there was, indeed, a cookie file generated. \r\n<!--- What behavior did you expect? -->\r\nI thought the rpcauth was replacing the rpcuser and rpcpassword authentication.\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nNo matter what I do, I cannot seem to get the node to accept the rpcauth line in my config file. I did try to run the client with the rpcauth as a command line option. This also did not work.\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nI am using the v0.15.1.0-g7b57bc998f33 client. It is the most up to date version provided by the ArchLinux repositories.\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nI am running ArchLinux and am using a Corei7.\r\n\r\nI'm sorry if this is a known issue or I'm doing something wrong. I did try to search for more information and found comments on this bitcoin Stack Exchange question with the same issue but no resolution. \r\n\r\n`https://bitcoin.stackexchange.com/questions/46782/rpc-cookie-authentication`\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dukeh3": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186", "title": "Debian folder is for 1.4x and does not work for 15.1", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nThe debian file in contrib does not work with latest build. Also if you try to use the latest in debian stable ( build around 15.1 ) fails too. \r\n\r\n\r\n<!--- What behavior did you expect? -->\r\nBuilding a nice debian package\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\nThe build fails with lost of errors\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nEvery time\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n15.1 Tag\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nx86 Debian stable\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dooglus": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179", "title": "\"abandon transaction\" only removed tx from display until client restart", "body": "commit 45cf8a03cb57b8639a8d47323bde46ba22d9eeaf\r\n\r\nI recently made a transaction with too-low fees. I was in a hurry to get it confirmed, so I clicked \"increase transaction fee\" a bunch of times. Each time I clicked it, it added an extra transaction to the transactions tab.\r\n\r\nEventually one of the transactions confirmed, and all the others were marked as \"conflicted\". I right-clicked each of the conflicted transactions in turn and selected \"abandon transaction\". That caused them to disappear from the transactions tab.\r\n\r\nWhen I restarted the client, all the conflicted transactions reappeared. I was hoping they would be gone permanently.\r\n\r\nAm I misunderstanding what \"abandon transaction\" should do, or is it not working correctly?\r\n\r\nEdit: two related points from this experience:\r\n\r\n1) I wanted to double the fee, but \"increase transaction fee\" didn't give me any way to say how much to increase it by, so I had to click it maybe 20 times to get to the fee I wanted.\r\n\r\n2) I was able to select all the conflicted transactions at once, and right-click the group. When I selected \"abandon transaction\" on the group, it only deleted one transaction from the display, not all of them. Why let me select multiple transactions if the right-click menu only operates on one of them anyway?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12038", "title": "deadlock on database corruption", "body": "I'm running the master branch from 23rd November, commit a933cb14c75b9c79a02f8de8397a8eae405a264f.\r\n\r\nAbout 12 hours ago I had a blank \"Bitcoin - Error\" popup appear. It was just a frame of a dialog box which never got painted with content.\r\n\r\n![screenshot_2017-12-27_15-33-01](https://user-images.githubusercontent.com/573356/34396065-4d67fe5c-eb1b-11e7-85e1-0b168c9f7231.png)\r\n\r\nIt seems to be just another leveldb corruption. I see them fairly often, and used to report them in #11355 but that issue seems to have reached a dead end.\r\n\r\nI left the skeletal popup up to see what would happen. Nothing much happened:\r\n\r\n    $ tail -f ~/.bitcoin-prune/debug.log \r\n    2017-12-27 15:13:16 receive version message: /Satoshi:0.15.1/: version 70015, blocks=501285, us=[me]:15118, peer=112\r\n    2017-12-27 15:14:53 connect() to 62.149.29.45:8333 failed after select(): Connection refused (111)\r\n    2017-12-27 15:19:36 UpdateTip: new best=0000000000000000001d7c6a62cbb04dced1cbb020d0fb4bb01c99a8ca397834 height=501286 version=0x20000000 log2_work=87.742837 tx=286436551 date='2017-12-27 15:19:30' progress=1.000000 cache=257.8MiB(1972963txo)\r\n    2017-12-27 15:24:16 receive version message: /Satoshi:0.15.1/: version 70015, blocks=501286, us=[me]:27377, peer=113\r\n    2017-12-27 15:25:55 connect() to [2001:0:4137:9e76:3cdb:2764:b66b:2413]:8333 failed: Network is unreachable (101)\r\n    2017-12-27 15:28:01 connect() to [2001:41d0:1004:20f0::]:8333 failed: Network is unreachable (101)\r\n    2017-12-27 15:28:57 connect() to 176.64.8.246:8333 failed after select(): Connection refused (111)\r\n    2017-12-27 15:31:51 UpdateTip: new best=0000000000000000005574bcf3eb24e5ae00fd5f836e19354be7d71f443e4b39 height=501287 version=0x20000000 log2_work=87.742881 tx=286438910 date='2017-12-27 15:31:48' progress=1.000000 cache=258.6MiB(1979996txo)\r\n    2017-12-27 15:33:59 LevelDB read failure: Corruption: block checksum mismatch\r\n    2017-12-27 15:33:59 Corruption: block checksum mismatch\r\n    2017-12-27 15:53:53 socket sending timeout: 1201s\r\n    2017-12-27 15:53:58 socket sending timeout: 1201s\r\n    2017-12-27 15:53:58 socket sending timeout: 1201s\r\n    2017-12-27 15:53:59 socket sending timeout: 1201s\r\n    2017-12-27 15:53:59 socket sending timeout: 1201s\r\n    2017-12-27 15:53:59 socket sending timeout: 1201s\r\n    2017-12-27 15:53:59 socket sending timeout: 1201s\r\n    2017-12-27 15:53:59 ping timeout: 1200.036574s\r\n\r\nI has been almost 12 hours since anything was written to the debug.log file.\r\n\r\n12 hours later I tried the RPC 'stop' command. It said \"Bitcoin server stopping\" but nothing new appeared in the debug.log, and the process is still running.\r\n\r\nI connected to it with gdb to get stack traces:\r\n\r\n    (gdb) thread apply all where\r\n\r\n    Thread 21 (Thread 0x7f817eee2700 (LWP 12789)):\r\n    #0  0x00007f81d052a6ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007f81cde619f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007f81cde61b0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007f81d2af204f in QEventDispatcherGlib::processEvents (this=0x7f81580008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #4  0x00007f81d2a9b9ca in QEventLoop::exec (this=this@entry=0x7f817eee1cc0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #5  0x00007f81d28c90f3 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:507\r\n    #6  0x00007f81d28cdda8 in QThreadPrivate::start (arg=0x557a083654f0) at thread/qthread_unix.cpp:368\r\n    #7  0x00007f81d1f8b494 in start_thread (arg=0x7f817eee2700) at pthread_create.c:333\r\n    #8  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 20 (Thread 0x7f81777ae700 (LWP 12788)):\r\n    #0  0x00007f81d052a6ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007f81cde619f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007f81cde61b0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007f81d2af204f in QEventDispatcherGlib::processEvents (this=0x7f81540008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #4  0x00007f81d2a9b9ca in QEventLoop::exec (this=this@entry=0x7f81777adcc0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #5  0x00007f81d28c90f3 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:507\r\n    #6  0x00007f81d28cdda8 in QThreadPrivate::start (arg=0x557a075ac800) at thread/qthread_unix.cpp:368\r\n    #7  0x00007f81d1f8b494 in start_thread (arg=0x7f81777ae700) at pthread_create.c:333\r\n    #8  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 19 (Thread 0x7f8177fff700 (LWP 12787)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007f81d28cec6b in QWaitConditionPrivate::wait (time=18446744073709551615, this=0x7f81382f95e0) at thread/qwaitcondition_unix.cpp:143\r\n    #2  QWaitCondition::wait (this=this@entry=0x7f814f9fd548, mutex=mutex@entry=0x7f814f9fd540, time=time@entry=18446744073709551615) at thread/qwaitcondition_unix.cpp:215\r\n    #3  0x00007f81d28c7b33 in QSemaphore::acquire (this=this@entry=0x7f8177ff6630, n=n@entry=1) at thread/qsemaphore.cpp:143\r\n    #4  0x00007f81d2aa88cd in QMetaMethod::invoke (this=this@entry=0x7f8177ff6898, object=object@entry=0x557a077af840, connectionType=Qt::BlockingQueuedConnection, connectionType@entry=2013227296, returnValue=..., val0=..., val1=..., val2=..., val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...) at kernel/qmetaobject.cpp:2279\r\n    #5  0x00007f81d2aae58a in QMetaObject::invokeMethod (obj=0x557a077af840, member=0x557a05ffcbd0 \"message\", type=2013227296, ret=..., val0=..., val1=..., val2=..., val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...) at kernel/qmetaobject.cpp:1489\r\n    #6  0x0000557a05724f0c in QMetaObject::invokeMethod (member=0x80 <error: Cannot access memory at address 0x80>, type=Qt::BlockingQueuedConnection, val0=..., obj=<optimized out>, val1=..., val2=..., val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...) at /usr/include/x86_64-linux-gnu/qt5/QtCore/qobjectdefs.h:460\r\n    #7  ThreadSafeMessageBox (gui=0x557a077af840, message=\"Error reading from database, shutting down.\", caption=..., style=<optimized out>) at qt/bitcoingui.cpp:1172\r\n    #8  0x0000557a057293b7 in boost::_bi::list4<boost::_bi::value<BitcoinGUI*>, boost::arg<1>, boost::arg<2>, boost::arg<3> >::operator()<bool, bool (*)(BitcoinGUI*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::_bi::rrlist3<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int> > (f=<error reading variable>, this=<optimized out>, a=...) at /usr/include/boost/bind/bind.hpp:453\r\n    #9  boost::_bi::bind_t<bool, bool (*)(BitcoinGUI*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::_bi::list4<boost::_bi::value<BitcoinGUI*>, boost::arg<1>, boost::arg<2>, boost::arg<3> > >::operator()<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&&) (a1=<error reading variable: Cannot access memory at address 0x88>, a2=<error reading variable: Cannot access memory at address 0x9>, this=<optimized out>, a3=<optimized out>) at /usr/include/boost/bind/bind.hpp:1330\r\n    #10 boost::detail::function::function_obj_invoker3<boost::_bi::bind_t<bool, bool (*)(BitcoinGUI*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::_bi::list4<boost::_bi::value<BitcoinGUI*>, boost::arg<1>, boost::arg<2>, boost::arg<3> > >, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>::invoke (function_obj_ptr=..., a0=<error reading variable: Cannot access memory at address 0x88>, a1=<error reading variable: Cannot access memory at address 0x9>, a2=3522761055) at /usr/include/boost/function/function_template.hpp:138\r\n    #11 0x0000557a05888a1e in boost::function3<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>::operator() (a0=<error reading variable: Cannot access memory at address 0x88>, a1=<error reading variable: Cannot access memory at address 0x9>, a2=3522761055, this=<optimized out>) at /usr/include/boost/function/function_template.hpp:770\r\n    #12 boost::signals2::detail::call_with_tuple_args<bool>::m_invoke<boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, 0u, 1u, 2u, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&>(boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>&, boost::signals2::detail::unsigned_meta_array<0u, 1u, 2u>, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&> const&, boost::disable_if<boost::is_void<boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>::result_type>, void>::type*) const (this=<optimized out>, func=..., args=...) at /usr/include/boost/signals2/detail/variadic_slot_invoker.hpp:98\r\n    #13 boost::signals2::detail::call_with_tuple_args<bool>::operator()<boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&, 3ul>(boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&> const&, mpl_::size_t<3ul>) const (this=<optimized out>, func=..., args=...) at /usr/include/boost/signals2/detail/variadic_slot_invoker.hpp:90\r\n    #14 boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>::operator()<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >(boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > const&) const (this=<optimized out>, connectionBody=...) at /usr/include/boost/signals2/detail/variadic_slot_invoker.hpp:133\r\n    #15 boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >::dereference() const (this=0x7f8177ff6db0) at /usr/include/boost/signals2/detail/slot_call_iterator.hpp:110\r\n    #16 0x0000557a05887e98 in boost::iterators::iterator_core_access::dereference<boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >(boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > const&) (f=...) at /usr/include/boost/iterator/iterator_facade.hpp:549\r\n    #17 boost::iterators::detail::iterator_facade_base<boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >, bool, boost::iterators::single_pass_traversal_tag, bool&, long, false, false>::operator*() const (this=<optimized out>) at /usr/include/boost/iterator/iterator_facade.hpp:655\r\n    #18 boost::signals2::last_value<bool>::operator()<boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >(boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >, boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >) const (this=<optimized out>, first=..., last=...) at /usr/include/boost/signals2/last_value.hpp:48\r\n    #19 0x0000557a05887b30 in boost::signals2::detail::combiner_invoker<bool>::operator()<boost::signals2::last_value<bool>, boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >(boost::signals2::last_value<bool>&, boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >, boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >) const (combiner=..., this=<optimized out>, first=..., last=...) at /usr/include/boost/signals2/detail/result_type_wrapper.hpp:53\r\n    #20 boost::signals2::detail::signal_impl<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, boost::function<bool (boost::signals2::connection const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, boost::signals2::mutex>::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) (this=0x557a0738a480, args=<optimized out>, args=<optimized out>, args=<optimized out>) at /usr/include/boost/signals2/detail/signal_template.hpp:242\r\n    #21 0x0000557a0588733d in boost::signals2::signal<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, boost::function<bool (boost::signals2::connection const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, boost::signals2::mutex>::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) (args=..., args=..., this=<optimized out>, args=...) at /usr/include/boost/signals2/detail/signal_template.hpp:723\r\n    #22 CCoinsViewErrorCatcher::GetCoin (this=<optimized out>, outpoint=..., coin=...) at init.cpp:143\r\n    #23 0x0000557a05b824c2 in CCoinsViewCache::FetchCoin (this=0x7f818cd73ea0, outpoint=...) at coins.cpp:48\r\n    #24 0x0000557a05b825a9 in CCoinsViewCache::GetCoin (this=0x7f81382f960c, outpoint=..., coin=...) at coins.cpp:61\r\n    #25 0x0000557a059dac84 in CCoinsViewMemPool::GetCoin (this=0x7f8177ff7650, outpoint=..., coin=...) at txmempool.cpp:904\r\n    #26 0x0000557a05b824c2 in CCoinsViewCache::FetchCoin (this=0x7f8177ff82e0, outpoint=...) at coins.cpp:48\r\n    #27 0x0000557a05b82b63 in CCoinsViewCache::HaveCoin (this=0x7f81382f960c, outpoint=...) at coins.cpp:129\r\n    #28 0x0000557a05a1f79a in AcceptToMemoryPoolWorker (chainparams=..., pool=..., state=..., ptx=..., pfMissingInputs=<optimized out>, nAcceptTime=<optimized out>, plTxnReplaced=0x0, bypass_limits=95, nAbsurdFee=@0x557a063d7180: 140194390425248, coins_to_uncache=...) at validation.cpp:568\r\n    #29 0x0000557a059f12b7 in AcceptToMemoryPoolWithTime (chainparams=..., pool=..., state=..., tx=<error reading variable: Cannot access memory at address 0x1be08247c8b50>, pfMissingInputs=0x7f81382f9500, nAcceptTime=0, plTxnReplaced=0x7f8177ffb368, bypass_limits=<optimized out>, nAbsurdFee=0) at validation.cpp:910\r\n    #30 0x0000557a059f0b9b in AcceptToMemoryPool (pool=..., state=..., tx=<error reading variable: Cannot access memory at address 0x1be08247c8b50>, pfMissingInputs=0x7f81382f9500, plTxnReplaced=0x7f8177ffb368, bypass_limits=false, nAbsurdFee=<optimized out>) at validation.cpp:926\r\n    #31 0x0000557a058e58b9 in ProcessMessage (pfrom=<optimized out>, strCommand=..., vRecv=..., nTimeReceived=<optimized out>, chainparams=..., connman=<optimized out>, interruptMsgProc=...) at net_processing.cpp:2104\r\n    #32 0x0000557a058da027 in PeerLogicValidation::ProcessMessages (this=<optimized out>, pfrom=0x7f815c117d10, interruptMsgProc=...) at net_processing.cpp:2927\r\n    #33 0x0000557a059024a7 in non-virtual thunk to PeerLogicValidation::ProcessMessages(CNode*, std::atomic<bool>&) () at net_processing.cpp:2852\r\n    #34 0x0000557a058b54be in CConnman::ThreadMessageHandler (this=<optimized out>) at net.cpp:2013\r\n    #35 0x0000557a058cfd1a in std::__invoke_impl<void, void (CConnman::* const&)(), CConnman*&> (__f=<optimized out>, __t=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #36 std::__invoke<void (CConnman::* const&)(), CConnman*&> (__fn=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #37 std::_Mem_fn_base<void (CConnman::*)(), true>::operator()<CConnman*&> (this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #38 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::__call<void, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) (this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #39 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::operator()<, void>() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #40 std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)> >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #41 0x0000557a0588429d in std::function<void ()>::operator()() const (this=0x7f8177ffed00) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #42 TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #43 0x0000557a058cfedd in std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #44 std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::operator()() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #45 std::thread::_State_impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #46 0x00007f81d0dbee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #47 0x00007f81d1f8b494 in start_thread (arg=0x7f8177fff700) at pthread_create.c:333\r\n    #48 0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 18 (Thread 0x7f817cd9b700 (LWP 12786)):\r\n    #0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\r\n    #1  0x00007f81d1f8dc06 in __GI___pthread_mutex_lock (mutex=0x557a063cd290 <cs_main>) at ../nptl/pthread_mutex_lock.c:115\r\n    #2  0x0000557a058d19e5 in __gthread_mutex_lock (__mutex=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:748\r\n    #3  __gthread_recursive_mutex_lock (__mutex=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:810\r\n    #4  std::recursive_mutex::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:105\r\n    #5  AnnotatedMixin<std::recursive_mutex>::lock (this=<optimized out>) at ./sync.h:61\r\n    #6  std::unique_lock<CCriticalSection>::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/bits/std_mutex.h:267\r\n    #7  CCriticalBlock::Enter (nLine=574, this=<optimized out>, pszName=<optimized out>, pszFile=<optimized out>) at ./sync.h:130\r\n    #8  CCriticalBlock::CCriticalBlock (nLine=574, fTry=false, this=<optimized out>, mutexIn=..., pszName=<optimized out>, pszFile=<optimized out>) at ./sync.h:151\r\n    #9  PeerLogicValidation::InitializeNode (this=0x7f81a4047b00, pnode=0x7f815c45c7c0) at net_processing.cpp:574\r\n    #10 0x0000557a058d3007 in non-virtual thunk to PeerLogicValidation::InitializeNode(CNode*) () at net_processing.cpp:569\r\n    #11 0x0000557a058b1fdc in CConnman::OpenNetworkConnection (this=0x7f81a4572100, addrConnect=..., fCountFailure=<optimized out>, grantOutbound=<optimized out>, pszDest=0x0, fOneShot=<optimized out>, fFeeler=<optimized out>, manual_connection=92) at net.cpp:1983\r\n    #12 0x0000557a058b357d in CConnman::ThreadOpenConnections (this=<optimized out>, connect=...) at net.cpp:1866\r\n    #13 0x0000557a058d00e7 in std::__invoke_impl<void, void (CConnman::* const&)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >), CConnman*&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&> (__f=<optimized out>, __t=<optimized out>, __args=<error reading variable: Cannot access memory at address 0x8>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #14 0x0000557a058cff6e in std::__invoke<void (CConnman::* const&)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >), CConnman*&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&> (__fn=@0x557a063cd290: (void (CConnman::*)(CConnman * const, std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >)) 0x100000002, this adjustment 4294980083, __args=..., __args=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #15 std::_Mem_fn_base<void (CConnman::*)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >), true>::operator()<CConnman*&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&> (__args=..., __args=..., this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #16 std::_Bind<std::_Mem_fn<void (CConnman::*)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)> (CConnman*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)>::__call<void, , 0ul, 1ul>(std::tuple<>&&, std::_Index_tuple<0ul, 1ul>) (this=0x557a063cd290 <cs_main>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #17 std::_Bind<std::_Mem_fn<void (CConnman::*)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)> (CConnman*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)>::operator()<, void>() (this=0x557a063cd290 <cs_main>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #18 std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (CConnman::*)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)> (CConnman*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)> >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #19 0x0000557a0588429d in std::function<void ()>::operator()() const (this=0x7f817cd9ad00) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #20 TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #21 0x0000557a058cfedd in std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #22 std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::operator()() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #23 std::thread::_State_impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #24 0x00007f81d0dbee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #25 0x00007f81d1f8b494 in start_thread (arg=0x7f817cd9b700) at pthread_create.c:333\r\n    #26 0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 17 (Thread 0x7f817d5ec700 (LWP 12785)):\r\n    #0  pthread_cond_timedwait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S:225\r\n    #1  0x0000557a05bafa4e in __gthread_cond_timedwait (__cond=<optimized out>, __mutex=<optimized out>, __abs_timeout=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:871\r\n    #2  std::condition_variable::__wait_until_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> > > (this=<optimized out>, __lock=..., __atime=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/condition_variable:166\r\n    #3  std::condition_variable::wait_until<std::chrono::duration<long, std::ratio<1l, 1000000000l> > > (this=<optimized out>, __lock=..., __atime=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/condition_variable:106\r\n    #4  std::condition_variable::wait_until<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, CThreadInterrupt::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0>(std::unique_lock<std::mutex>&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, CThreadInterrupt::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0) (this=<optimized out>, __lock=..., __atime=..., __p=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/condition_variable:129\r\n    #5  std::condition_variable::wait_for<long, std::ratio<1l, 1000l>, CThreadInterrupt::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0>(std::unique_lock<std::mutex>&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&, CThreadInterrupt::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0) (this=<optimized out>, __lock=..., __rtime=..., __p=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/condition_variable:145\r\n    #6  CThreadInterrupt::sleep_for (this=<optimized out>, rel_time=...) at threadinterrupt.cpp:30\r\n    #7  0x0000557a05bafada in CThreadInterrupt::sleep_for (this=0x7f81a45c256c, rel_time=...) at threadinterrupt.cpp:35\r\n    #8  0x0000557a058b51b4 in CConnman::ThreadOpenAddedConnections (this=<optimized out>) at net.cpp:1945\r\n    #9  0x0000557a058cfd1a in std::__invoke_impl<void, void (CConnman::* const&)(), CConnman*&> (__f=<optimized out>, __t=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #10 std::__invoke<void (CConnman::* const&)(), CConnman*&> (__fn=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #11 std::_Mem_fn_base<void (CConnman::*)(), true>::operator()<CConnman*&> (this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #12 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::__call<void, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) (this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #13 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::operator()<, void>() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #14 std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)> >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #15 0x0000557a0588429d in std::function<void ()>::operator()() const (this=0x7f817d5ebd00) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #16 TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #17 0x0000557a058cfedd in std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #18 std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::operator()() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #19 std::thread::_State_impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #20 0x00007f81d0dbee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #21 0x00007f81d1f8b494 in start_thread (arg=0x7f817d5ec700) at pthread_create.c:333\r\n    #22 0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 16 (Thread 0x7f817e68e700 (LWP 12783)):\r\n    #0  0x00007f81d052c3f3 in select () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x0000557a058ab65c in CConnman::ThreadSocketHandler (this=<optimized out>) at net.cpp:1265\r\n    #2  0x0000557a058cfd1a in std::__invoke_impl<void, void (CConnman::* const&)(), CConnman*&> (__f=<optimized out>, __t=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #3  std::__invoke<void (CConnman::* const&)(), CConnman*&> (__fn=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #4  std::_Mem_fn_base<void (CConnman::*)(), true>::operator()<CConnman*&> (this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #5  std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::__call<void, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) (this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #6  std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::operator()<, void>() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #7  std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)> >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #8  0x0000557a0588429d in std::function<void ()>::operator()() const (this=0x7f817e68dd00) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #9  TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #10 0x0000557a058cfedd in std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #11 std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::operator()() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #12 std::thread::_State_impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #13 0x00007f81d0dbee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #14 0x00007f81d1f8b494 in start_thread (arg=0x7f817e68e700) at pthread_create.c:333\r\n    #15 0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 15 (Thread 0x7f817f733700 (LWP 12782)):\r\n    #0  0x00007f81d05340f3 in epoll_wait () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007f81d10abd98 in ?? () from /usr/lib/x86_64-linux-gnu/libevent-2.0.so.5\r\n    #2  0x00007f81d109607a in event_base_loop () from /usr/lib/x86_64-linux-gnu/libevent-2.0.so.5\r\n    #3  0x0000557a059b7640 in TorControlThread () at torcontrol.cpp:740\r\n    #4  0x0000557a059b84eb in TraceThread<void (*)()> (name=<optimized out>, func=0x557a059b7590 <TorControlThread()>) at ./util.h:309\r\n    #5  0x0000557a059bfb45 in boost::_bi::list2<boost::_bi::value<char const*>, boost::_bi::value<void (*)()> >::operator()<void (*)(char const*, void (*)()), boost::_bi::list0> (this=<optimized out>, f=<optimized out>, a=...) at /usr/include/boost/bind/bind.hpp:319\r\n    #6  boost::_bi::bind_t<void, void (*)(char const*, void (*)()), boost::_bi::list2<boost::_bi::value<char const*>, boost::_bi::value<void (*)()> > >::operator() (this=<optimized out>) at /usr/include/boost/bind/bind.hpp:1294\r\n    #7  boost::detail::thread_data<boost::_bi::bind_t<void, void (*)(char const*, void (*)()), boost::_bi::list2<boost::_bi::value<char const*>, boost::_bi::value<void (*)()> > > >::run (this=0xfffffffffffffffc) at /usr/include/boost/thread/detail/thread.hpp:116\r\n    #8  0x00007f81d3b2f116 in ?? () from /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.62.0\r\n    #9  0x00007f81d1f8b494 in start_thread (arg=0x7f817f733700) at pthread_create.c:333\r\n    #10 0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 14 (Thread 0x7f8192257700 (LWP 12780)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x0000557a05c095fb in leveldb::(anonymous namespace)::PosixEnv::BGThread (this=<optimized out>) at leveldb/util/env_posix.cc:641\r\n    #2  leveldb::(anonymous namespace)::PosixEnv::BGThreadWrapper (arg=<optimized out>) at leveldb/util/env_posix.cc:556\r\n    #3  0x00007f81d1f8b494 in start_thread (arg=0x7f8192257700) at pthread_create.c:333\r\n    #4  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 13 (Thread 0x7f819a70c700 (LWP 12779)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007f81d0db950c in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #2  0x0000557a05a9700a in WorkQueue<HTTPClosure>::Run (this=<optimized out>) at httpserver.cpp:128\r\n    #3  0x0000557a05a90dfa in HTTPWorkQueueRun (queue=0x7f81a404794c) at httpserver.cpp:362\r\n    #4  0x0000557a05a98328 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #5  std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #6  std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0xfffffffffffffe00) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #7  0x00007f81d0dbee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #8  0x00007f81d1f8b494 in start_thread (arg=0x7f819a70c700) at pthread_create.c:333\r\n    #9  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 12 (Thread 0x7f819af5d700 (LWP 12778)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007f81d0db950c in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #2  0x0000557a05a9700a in WorkQueue<HTTPClosure>::Run (this=<optimized out>) at httpserver.cpp:128\r\n    #3  0x0000557a05a90dfa in HTTPWorkQueueRun (queue=0x7f81a404794c) at httpserver.cpp:362\r\n    #4  0x0000557a05a98328 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #5  std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #6  std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0xfffffffffffffe00) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #7  0x00007f81d0dbee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #8  0x00007f81d1f8b494 in start_thread (arg=0x7f819af5d700) at pthread_create.c:333\r\n    #9  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 11 (Thread 0x7f819b7ae700 (LWP 12777)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007f81d0db950c in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #2  0x0000557a05a9700a in WorkQueue<HTTPClosure>::Run (this=<optimized out>) at httpserver.cpp:128\r\n    #3  0x0000557a05a90dfa in HTTPWorkQueueRun (queue=0x7f81a404794c) at httpserver.cpp:362\r\n    #4  0x0000557a05a98328 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #5  std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #6  std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0xfffffffffffffe00) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #7  0x00007f81d0dbee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #8  0x00007f81d1f8b494 in start_thread (arg=0x7f819b7ae700) at pthread_create.c:333\r\n    #9  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 10 (Thread 0x7f819bfff700 (LWP 12776)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007f81d0db950c in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #2  0x0000557a05a9700a in WorkQueue<HTTPClosure>::Run (this=<optimized out>) at httpserver.cpp:128\r\n    #3  0x0000557a05a90dfa in HTTPWorkQueueRun (queue=0x7f81a404794c) at httpserver.cpp:362\r\n    #4  0x0000557a05a98328 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #5  std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #6  std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0xfffffffffffffe00) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #7  0x00007f81d0dbee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #8  0x00007f81d1f8b494 in start_thread (arg=0x7f819bfff700) at pthread_create.c:333\r\n    #9  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 9 (Thread 0x7f81a8925700 (LWP 12775)):\r\n    #0  0x00007f81d05340f3 in epoll_wait () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007f81d10abd98 in ?? () from /usr/lib/x86_64-linux-gnu/libevent-2.0.so.5\r\n    #2  0x00007f81d109607a in event_base_loop () from /usr/lib/x86_64-linux-gnu/libevent-2.0.so.5\r\n    #3  0x0000557a05a9036f in ThreadHTTP (base=0x7f81a4047080, http=<optimized out>) at httpserver.cpp:314\r\n    #4  0x0000557a05a97d3d in std::__invoke_impl<bool, bool (*&)(event_base*, evhttp*), event_base*, evhttp*>(std::__invoke_other, bool (*&)(event_base*, evhttp*), event_base*&&, evhttp*&&) (__f=<optimized out>, __args=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:210\r\n    #5  std::__invoke<bool (*&)(event_base*, evhttp*), event_base*, evhttp*>(bool (*&)(event_base*, evhttp*), event_base*&&, evhttp*&&) (__fn=<optimized out>, __args=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #6  std::reference_wrapper<bool (*)(event_base*, evhttp*)>::operator()<event_base*, evhttp*>(event_base*&&, evhttp*&&) const (__args=<optimized out>, this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:465\r\n    #7  std::_Bind_simple<std::reference_wrapper<bool (*)(event_base*, evhttp*)> (event_base*, evhttp*)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=0x7f81d05340f3 <epoll_wait+51>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #8  std::_Bind_simple<std::reference_wrapper<bool (*)(event_base*, evhttp*)> (event_base*, evhttp*)>::operator()() (this=0x7f81d05340f3 <epoll_wait+51>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #9  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<bool>, std::__future_base::_Result_base::_Deleter>, std::_Bind_simple<std::reference_wrapper<bool (*)(event_base*, evhttp*)> (event_base*, evhttp*)>, bool>::operator()() const (this=0x7f81a8924cd0) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:1325\r\n    #10 0x0000557a05a97c7f in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<bool>, std::__future_base::_Result_base::_Deleter>, std::_Bind_simple<std::reference_wrapper<bool (*)(event_base*, evhttp*)> (event_base*, evhttp*)>, bool> >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1716\r\n    #11 0x0000557a0598befa in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (this=0x7f81a4047330) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #12 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x7f81a4047bb0, __f=0x7f81a4047330, __did_set=0x7f81a8924c8f) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:533\r\n    #13 0x0000557a0598bf96 in std::__invoke_impl<void, void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::__invoke_memfun_deref, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=<optimized out>, __args=<optimized out>, __args=<optimized out>, __t=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #14 std::__invoke<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__fn=<optimized out>, __args=<optimized out>, __args=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #15 void std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&)::{lambda()#1}::operator()() const (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:602\r\n    #16 void std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&)::{lambda()#2}::operator()() const (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:607\r\n    #17 void std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&)::{lambda()#2}::__invoke() () at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:607\r\n    #18 0x00007f81d1f92739 in __pthread_once_slow (once_control=0x7f81a4047bc8, init_routine=0x7f81d0dbe120 <__once_proxy>) at pthread_once.c:116\r\n    #19 0x0000557a0598be79 in __gthread_once (__func=0x7f81a4047330, __once=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:699\r\n    #20 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__args=<optimized out>, __args=<optimized out>, __args=<optimized out>, __once=..., __f=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:614\r\n    #21 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (this=0x7f81a4047bb0, __res=..., __ignore_failure=false) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:392\r\n    #22 0x0000557a05a97821 in std::__future_base::_Task_state<bool (*)(event_base*, evhttp*), std::allocator<int>, bool (event_base*, evhttp*)>::_M_run(event_base*&&, evhttp*&&) (this=0x17, __args=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:1409\r\n    #23 0x0000557a05a982ab in std::packaged_task<bool (event_base*, evhttp*)>::operator()(event_base*, evhttp*) (__args=<error reading variable: Cannot access memory at address 0x20>, __args=<error reading variable: Cannot access memory at address 0x20>, this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:1553\r\n    #24 std::_Bind_simple<std::packaged_task<bool (event_base*, evhttp*)> (event_base*, evhttp*)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #25 std::_Bind_simple<std::packaged_task<bool (event_base*, evhttp*)> (event_base*, evhttp*)>::operator()() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #26 std::thread::_State_impl<std::_Bind_simple<std::packaged_task<bool (event_base*, evhttp*)> (event_base*, evhttp*)> >::_M_run() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #27 0x00007f81d0dbee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #28 0x00007f81d1f8b494 in start_thread (arg=0x7f81a8925700) at pthread_create.c:333\r\n    #29 0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 8 (Thread 0x7f81a9176700 (LWP 12774)):\r\n    #0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\r\n    #1  0x00007f81d1f8dc06 in __GI___pthread_mutex_lock (mutex=0x557a063cd290 <cs_main>) at ../nptl/pthread_mutex_lock.c:115\r\n    #2  0x0000557a058d6e68 in __gthread_mutex_lock (__mutex=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:748\r\n    #3  __gthread_recursive_mutex_lock (__mutex=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:810\r\n    #4  std::recursive_mutex::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:105\r\n    #5  AnnotatedMixin<std::recursive_mutex>::lock (this=<optimized out>) at ./sync.h:61\r\n    #6  std::unique_lock<CCriticalSection>::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/bits/std_mutex.h:267\r\n    #7  CCriticalBlock::Enter (nLine=3089, this=<optimized out>, pszName=<optimized out>, pszFile=<optimized out>) at ./sync.h:130\r\n    #8  CCriticalBlock::CCriticalBlock (nLine=3089, fTry=false, this=<optimized out>, mutexIn=..., pszName=<optimized out>, pszFile=<optimized out>) at ./sync.h:151\r\n    #9  PeerLogicValidation::CheckForStaleTipAndEvictPeers (this=0x7f81a4047b00, consensusParams=...) at net_processing.cpp:3089\r\n    #10 0x0000557a05929581 in std::__invoke_impl<void, void (PeerLogicValidation::* const&)(Consensus::Params const&), PeerLogicValidation*&, Consensus::Params&> (__args=..., __f=<optimized out>, __t=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #11 std::__invoke<void (PeerLogicValidation::* const&)(Consensus::Params const&), PeerLogicValidation*&, Consensus::Params&> (__args=<optimized out>, __fn=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #12 std::_Mem_fn_base<void (PeerLogicValidation::*)(Consensus::Params const&), true>::operator()<PeerLogicValidation*&, Consensus::Params&> (__args=<optimized out>, this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #13 std::_Bind<std::_Mem_fn<void (PeerLogicValidation::*)(Consensus::Params const&)> (PeerLogicValidation*, Consensus::Params)>::__call<void, , 0ul, 1ul>(std::tuple<>&&, std::_Index_tuple<0ul, 1ul>) (this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #14 std::_Bind<std::_Mem_fn<void (PeerLogicValidation::*)(Consensus::Params const&)> (PeerLogicValidation*, Consensus::Params)>::operator()<, void>() (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #15 std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (PeerLogicValidation::*)(Consensus::Params const&)> (PeerLogicValidation*, Consensus::Params)> >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #16 0x0000557a05b9d8c7 in std::function<void ()>::operator()() const (this=0x7f81a9175838) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #17 Repeat(CScheduler*, std::function<void ()>, long) (s=0x557a07c73490, f=..., deltaMilliSeconds=45000) at scheduler.cpp:122\r\n    #18 0x0000557a05b9ea9a in boost::_bi::list3<boost::_bi::value<CScheduler*>, boost::_bi::value<std::function<void ()> >, boost::_bi::value<long> >::operator()<void (*)(CScheduler*, std::function<void ()>, long), boost::_bi::list0>(boost::_bi::type<void>, void (*&)(CScheduler*, std::function<void ()>, long), boost::_bi::list0&, int) (this=0x7f819c000f58, f=<optimized out>, a=...) at /usr/include/boost/bind/bind.hpp:398\r\n    #19 0x0000557a05b9e8f5 in boost::_bi::bind_t<void, void (*)(CScheduler*, std::function<void ()>, long), boost::_bi::list3<boost::_bi::value<CScheduler*>, boost::_bi::value<std::function<void ()> >, boost::_bi::value<long> > >::operator()() (this=0x80) at /usr/include/boost/bind/bind.hpp:1294\r\n    #20 std::_Function_handler<void (), boost::_bi::bind_t<void, void (*)(CScheduler*, std::function<void ()>, long), boost::_bi::list3<boost::_bi::value<CScheduler*>, boost::_bi::value<std::function<void ()> >, boost::_bi::value<long> > > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #21 0x0000557a05b9cf58 in std::function<void ()>::operator()() const (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #22 CScheduler::serviceQueue (this=<optimized out>) at scheduler.cpp:83\r\n    #23 0x0000557a0589273a in boost::_mfi::mf0<void, CScheduler>::operator() (p=<optimized out>, this=<optimized out>) at /usr/include/boost/bind/mem_fn_template.hpp:49\r\n    #24 boost::_bi::list1<boost::_bi::value<CScheduler*> >::operator()<boost::_mfi::mf0<void, CScheduler>, boost::_bi::list0> (this=<optimized out>, f=..., a=...) at /usr/include/boost/bind/bind.hpp:259\r\n    #25 boost::_bi::bind_t<void, boost::_mfi::mf0<void, CScheduler>, boost::_bi::list1<boost::_bi::value<CScheduler*> > >::operator() (this=<optimized out>) at /usr/include/boost/bind/bind.hpp:1294\r\n    #26 std::_Function_handler<void (), boost::_bi::bind_t<void, boost::_mfi::mf0<void, CScheduler>, boost::_bi::list1<boost::_bi::value<CScheduler*> > > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #27 0x0000557a0588429d in std::function<void ()>::operator()() const (this=0x7f81a9175cb8) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #28 TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #29 0x0000557a05892cb6 in boost::_bi::list2<boost::_bi::value<char const*>, boost::_bi::value<std::function<void ()> > >::operator()<void (*)(char const*, std::function<void ()>), boost::_bi::list0>(boost::_bi::type<void>, void (*&)(char const*, std::function<void ()>), boost::_bi::list0&, int) (this=0x7f81a4043110, f=<optimized out>, a=...) at /usr/include/boost/bind/bind.hpp:319\r\n    #30 0x0000557a05892c3f in boost::_bi::bind_t<void, void (*)(char const*, std::function<void ()>), boost::_bi::list2<boost::_bi::value<char const*>, boost::_bi::value<std::function<void ()> > > >::operator()() (this=<optimized out>) at /usr/include/boost/bind/bind.hpp:1294\r\n    #31 boost::detail::thread_data<boost::_bi::bind_t<void, void (*)(char const*, std::function<void ()>), boost::_bi::list2<boost::_bi::value<char const*>, boost::_bi::value<std::function<void ()> > > > >::run() (this=<optimized out>) at /usr/include/boost/thread/detail/thread.hpp:116\r\n    #32 0x00007f81d3b2f116 in ?? () from /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.62.0\r\n    #33 0x00007f81d1f8b494 in start_thread (arg=0x7f81a9176700) at pthread_create.c:333\r\n    #34 0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 7 (Thread 0x7f81a99c7700 (LWP 12773)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x0000557a0570db4b in boost::condition_variable::wait (this=<optimized out>, m=...) at /usr/include/boost/thread/pthread/condition_variable.hpp:77\r\n    #2  0x0000557a05a34c0f in CCheckQueue<CScriptCheck>::Loop (this=<optimized out>, fMaster=<optimized out>) at ./checkqueue.h:102\r\n    #3  0x0000557a059f3d58 in CCheckQueue<CScriptCheck>::Thread (this=0x557a063d727c <scriptcheckqueue+84>) at ./checkqueue.h:139\r\n    #4  ThreadScriptCheck () at validation.cpp:1563\r\n    #5  0x0000557a05892314 in boost::detail::thread_data<void (*)()>::run (this=0x557a063d727c <scriptcheckqueue+84>) at /usr/include/boost/thread/detail/thread.hpp:116\r\n    #6  0x00007f81d3b2f116 in ?? () from /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.62.0\r\n    #7  0x00007f81d1f8b494 in start_thread (arg=0x7f81a99c7700) at pthread_create.c:333\r\n    #8  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 6 (Thread 0x7f81b8c5d700 (LWP 12772)):\r\n    #0  0x00007f81d052a6ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007f81cde619f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007f81cde61b0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007f81d2af204f in QEventDispatcherGlib::processEvents (this=0x7f81a40008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #4  0x00007f81d2a9b9ca in QEventLoop::exec (this=this@entry=0x7f81b8c5ccc0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #5  0x00007f81d28c90f3 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:507\r\n    #6  0x00007f81d28cdda8 in QThreadPrivate::start (arg=0x557a07c723a0) at thread/qthread_unix.cpp:368\r\n    #7  0x00007f81d1f8b494 in start_thread (arg=0x7f81b8c5d700) at pthread_create.c:333\r\n    #8  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 5 (Thread 0x7f81b9502700 (LWP 12767)):\r\n    #0  0x00007f81d052a6ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007f81cde619f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007f81cde61b0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007f81d2af204f in QEventDispatcherGlib::processEvents (this=0x7f81b00008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #4  0x00007f81d2a9b9ca in QEventLoop::exec (this=this@entry=0x7f81b9501c90, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #5  0x00007f81d28c90f3 in QThread::exec (this=this@entry=0x7f81d2d78d60 <(anonymous namespace)::Q_QGS__q_manager::innerFunction()::holder>) at thread/qthread.cpp:507\r\n    #6  0x00007f81d2d036d5 in QDBusConnectionManager::run (this=0x7f81d2d78d60 <(anonymous namespace)::Q_QGS__q_manager::innerFunction()::holder>) at qdbusconnection.cpp:178\r\n    #7  0x00007f81d28cdda8 in QThreadPrivate::start (arg=0x7f81d2d78d60 <(anonymous namespace)::Q_QGS__q_manager::innerFunction()::holder>) at thread/qthread_unix.cpp:368\r\n    #8  0x00007f81d1f8b494 in start_thread (arg=0x7f81b9502700) at pthread_create.c:333\r\n    #9  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 4 (Thread 0x7f81bb6d6700 (LWP 12766)):\r\n    #0  0x00007f81d052a6ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007f81cde619f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007f81cde61d82 in g_main_loop_run () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007f81bde13656 in ?? () from /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0\r\n    #4  0x00007f81cde893d5 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #5  0x00007f81d1f8b494 in start_thread (arg=0x7f81bb6d6700) at pthread_create.c:333\r\n    #6  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 3 (Thread 0x7f81bbf27700 (LWP 12765)):\r\n    #0  0x00007f81d052a6ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007f81cde619f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007f81cde61b0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007f81cde61b51 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #4  0x00007f81cde893d5 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #5  0x00007f81d1f8b494 in start_thread (arg=0x7f81bbf27700) at pthread_create.c:333\r\n    #6  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 2 (Thread 0x7f81c5c0a700 (LWP 12764)):\r\n    #0  0x00007f81d052a6ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007f81cbd2e150 in ?? () from /usr/lib/x86_64-linux-gnu/libxcb.so.1\r\n    #2  0x00007f81cbd2fee9 in xcb_wait_for_event () from /usr/lib/x86_64-linux-gnu/libxcb.so.1\r\n    #3  0x00007f81c836bb69 in QXcbEventReader::run (this=0x557a074c5ec0) at qxcbconnection.cpp:1343\r\n    #4  0x00007f81d28cdda8 in QThreadPrivate::start (arg=0x557a074c5ec0) at thread/qthread_unix.cpp:368\r\n    #5  0x00007f81d1f8b494 in start_thread (arg=0x7f81c5c0a700) at pthread_create.c:333\r\n    #6  0x00007f81d0533aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 1 (Thread 0x7f81d46d2900 (LWP 12763)):\r\n    #0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\r\n    #1  0x00007f81d1f8dc06 in __GI___pthread_mutex_lock (mutex=0x557a063d6ea0 <mempool+56>) at ../nptl/pthread_mutex_lock.c:115\r\n    #2  0x0000557a05730724 in __gthread_mutex_lock (__mutex=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:748\r\n    #3  __gthread_recursive_mutex_lock (__mutex=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:810\r\n    #4  std::recursive_mutex::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:105\r\n    #5  AnnotatedMixin<std::recursive_mutex>::lock (this=<optimized out>) at ./sync.h:61\r\n    #6  std::unique_lock<CCriticalSection>::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/bits/std_mutex.h:267\r\n    #7  CCriticalBlock::Enter (nLine=605, this=<optimized out>, pszName=<optimized out>, pszFile=<optimized out>) at ./sync.h:130\r\n    #8  CCriticalBlock::CCriticalBlock (nLine=605, fTry=false, this=<optimized out>, mutexIn=..., pszName=<optimized out>, pszFile=<optimized out>) at ./sync.h:151\r\n    #9  CTxMemPool::size (this=<optimized out>) at ./txmempool.h:605\r\n    #10 ClientModel::getMempoolSize (this=<optimized out>) at qt/clientmodel.cpp:130\r\n    #11 ClientModel::updateTimer (this=0x557a07397240) at qt/clientmodel.cpp:153\r\n    #12 0x0000557a057c7f99 in ClientModel::qt_static_metacall (_o=0x557a063d6ea0 <mempool+56>, _c=128, _id=<optimized out>, _a=0x7f81d1f93f5c <__lll_lock_wait+28>) at qt/moc_clientmodel.cpp:140\r\n    #13 0x00007f81d2ac95e9 in QMetaObject::activate (sender=sender@entry=0x557a07397b10, signalOffset=<optimized out>, local_signal_index=local_signal_index@entry=0, argv=argv@entry=0x0) at kernel/qobject.cpp:3740\r\n    #14 0x00007f81d2ac9f07 in QMetaObject::activate (sender=sender@entry=0x557a07397b10, m=m@entry=0x7f81d2ce7760 <QTimer::staticMetaObject>, local_signal_index=local_signal_index@entry=0, argv=argv@entry=0x0) at kernel/qobject.cpp:3602\r\n    #15 0x00007f81d2b43780 in QTimer::timeout (this=this@entry=0x557a07397b10) at .moc/moc_qtimer.cpp:198\r\n    #16 0x00007f81d2ad5f78 in QTimer::timerEvent (this=0x557a07397b10, e=<optimized out>) at kernel/qtimer.cpp:254\r\n    #17 0x00007f81d2aca453 in QObject::event (this=0x557a07397b10, e=<optimized out>) at kernel/qobject.cpp:1285\r\n    #18 0x00007f81d340cb8c in QApplicationPrivate::notify_helper (this=<optimized out>, receiver=0x557a07397b10, e=0x7ffcaa60ecc0) at kernel/qapplication.cpp:3799\r\n    #19 0x00007f81d3414341 in QApplication::notify (this=0x7ffcaa60f8f0, receiver=0x557a07397b10, e=0x7ffcaa60ecc0) at kernel/qapplication.cpp:3556\r\n    #20 0x00007f81d2a9d9e0 in QCoreApplication::notifyInternal2 (receiver=0x557a07397b10, event=event@entry=0x7ffcaa60ecc0) at kernel/qcoreapplication.cpp:988\r\n    #21 0x00007f81d2af0fee in QCoreApplication::sendEvent (event=0x7ffcaa60ecc0, receiver=<optimized out>) at ../../include/QtCore/../../src/corelib/kernel/qcoreapplication.h:231\r\n    #22 QTimerInfoList::activateTimers (this=0x557a0754ff50) at kernel/qtimerinfo_unix.cpp:644\r\n    #23 0x00007f81d2af1511 in timerSourceDispatch (source=<optimized out>) at kernel/qeventdispatcher_glib.cpp:182\r\n    #24 0x00007f81cde617f7 in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #25 0x00007f81cde61a60 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #26 0x00007f81cde61b0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #27 0x00007f81d2af204f in QEventDispatcherGlib::processEvents (this=0x557a0754fd30, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #28 0x00007f81d2a9b9ca in QEventLoop::exec (this=this@entry=0x7ffcaa60ef10, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #29 0x00007f81d35fb0e7 in QDialog::exec (this=0x7ffcaa60ef98) at dialogs/qdialog.cpp:552\r\n    #30 0x0000557a05723455 in BitcoinGUI::message (this=0x557a077af840, title=..., message=..., style=<optimized out>, ret=0x7f8177ff6c2b) at qt/bitcoingui.cpp:930\r\n    #31 0x0000557a057c6c63 in BitcoinGUI::qt_static_metacall (_o=0x557a077af840, _c=<optimized out>, _id=<optimized out>, _a=0x7f8177ff66c0) at qt/moc_bitcoingui.cpp:216\r\n    #32 0x00007f81d2aca499 in QObject::event (this=this@entry=0x557a077af840, e=e@entry=0x7f8137652d20) at kernel/qobject.cpp:1263\r\n    #33 0x00007f81d345446b in QWidget::event (this=this@entry=0x557a077af840, event=event@entry=0x7f8137652d20) at kernel/qwidget.cpp:9225\r\n    #34 0x00007f81d355392b in QMainWindow::event (this=0x557a077af840, event=0x7f8137652d20) at widgets/qmainwindow.cpp:1543\r\n    #35 0x00007f81d340cb8c in QApplicationPrivate::notify_helper (this=<optimized out>, receiver=0x557a077af840, e=0x7f8137652d20) at kernel/qapplication.cpp:3799\r\n    #36 0x00007f81d3414341 in QApplication::notify (this=0x7ffcaa60f8f0, receiver=0x557a077af840, e=0x7f8137652d20) at kernel/qapplication.cpp:3556\r\n    #37 0x00007f81d2a9d9e0 in QCoreApplication::notifyInternal2 (receiver=0x557a077af840, event=event@entry=0x7f8137652d20) at kernel/qcoreapplication.cpp:988\r\n    #38 0x00007f81d2aa016d in QCoreApplication::sendEvent (event=0x7f8137652d20, receiver=<optimized out>) at ../../include/QtCore/../../src/corelib/kernel/qcoreapplication.h:231\r\n    #39 QCoreApplicationPrivate::sendPostedEvents (receiver=receiver@entry=0x0, event_type=event_type@entry=0, data=0x557a074ab220) at kernel/qcoreapplication.cpp:1649\r\n    #40 0x00007f81d2aa05d8 in QCoreApplication::sendPostedEvents (receiver=receiver@entry=0x0, event_type=event_type@entry=0) at kernel/qcoreapplication.cpp:1503\r\n    #41 0x00007f81d2af1c43 in postEventSourceDispatch (s=0x557a0754fe00) at kernel/qeventdispatcher_glib.cpp:276\r\n    #42 0x00007f81cde617f7 in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #43 0x00007f81cde61a60 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #44 0x00007f81cde61b0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #45 0x00007f81d2af204f in QEventDispatcherGlib::processEvents (this=0x557a0754fd30, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #46 0x00007f81d2a9b9ca in QEventLoop::exec (this=this@entry=0x7ffcaa60f6e0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #47 0x00007f81d2aa413c in QCoreApplication::exec () at kernel/qcoreapplication.cpp:1261\r\n    #48 0x0000557a05707e79 in main (argc=<optimized out>, argv=<optimized out>) at qt/bitcoin.cpp:714\r\n    (gdb) \r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11608", "title": "\"Potential stale tip detected\" when deliberately not connected to peers", "body": "Running the master branch from yesterday, commit 2f959a58744d42859d74579220922e25ac3d2925, I see these in the logs when I'm running with `-connect=0` and also when I have clicked to disable all network activity in bitcoin-qt:\r\n\r\n    2017-11-04 20:43:43 Potential stale tip detected, will try using extra outbound peer (last tip update: 1846 seconds ago)\r\n    2017-11-04 20:54:13 Potential stale tip detected, will try using extra outbound peer (last tip update: 2476 seconds ago)\r\n\r\nIn both cases it's true that I likely have a stale tip, but that's the way I want it, and I don't want to try using extra outbound peers. In both cases I explicitly *don't* want any peers.\r\n\r\nAs it turns out, no peer seems to actually be added, but the appearance of the debug message itself is disconcerting, and possibly misleading.\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11355", "title": "LevelDB read failure: Corruption: block checksum mismatch", "body": "Build against commit f197a4c515757262eda0accbe762e311335be11b, a small change from master branch 09627b1dd41d1151a709d5ead82a924bf59e3d38 - bitcoin-qt had been running for 12 hours or so without a problem, was fully synced, then suddenly I saw an error frame pop up with no content. Here's a screenshot:\r\n\r\n![screenshot](https://user-images.githubusercontent.com/573356/30515480-47028746-9add-11e7-8970-2b9602dfd291.png)\r\n\r\nThe debug.log shows block 485584 was received, then 36 seconds later db corruption was found:\r\n\r\n    2017-09-16 15:21:03 UpdateTip: new best=000000000000000000f9dec71fb25bda22ba734ad133c24c8553fb66fee2f98e height=485584 version=0x20000000 log2_work=87.116783 tx=254942322 date='2017-09-16 15:20:14' progress=0.999999 cache=65.6MiB(504658txo) warning='5 of last 100 blocks have unexpected version'\r\n    2017-09-16 15:21:39 LevelDB read failure: Corruption: block checksum mismatch\r\n    2017-09-16 15:21:39 Corruption: block checksum mismatch\r\n    2017-09-16 15:22:02 connect() to [2001:0:9d38:90d7:1097:91ba:f1ff:5782]:8333 failed: Network is unreachable (101)\r\n    2017-09-16 15:41:38 socket sending timeout: 1201s\r\n    2017-09-16 15:41:38 socket sending timeout: 1201s\r\n    2017-09-16 15:41:38 socket sending timeout: 1201s\r\n    2017-09-16 15:41:39 socket sending timeout: 1201s\r\n    2017-09-16 15:41:39 socket sending timeout: 1201s\r\n    2017-09-16 15:41:39 socket sending timeout: 1201s\r\n    2017-09-16 15:41:39 socket sending timeout: 1201s\r\n    2017-09-16 15:41:40 socket sending timeout: 1201s\r\n\r\nNothing has been written to the log since then, and neither the main Bitcoin window nor the error popup has been painted since.\r\n\r\nA few weeks ago I saw a similar error, but at that point I was attempting to track down a race condition on startup and so wasn't surprised when I saw some database corruption. But I fixed it by doing a `-reindex-chainstate` and hadn't had a problem since, until now.\r\n\r\nI attached gdb to the frozen bitcoin-qt process to get the stack traces:\r\n\r\n    12:51:18 chris@chris:~/Programs/bitcoin.git/src$ ps -ef | grep bitcoin\r\n    chris    17648 31052  0 Sep15 pts/5    00:03:57 /home/chris/Programs/bitcoin.git/src/qt/bitcoin-qt -datadir=/home/chris/.bitcoin\r\n    chris    23785 31653  0 08:22 pts/7    00:00:00 tail -f /home/chris/.bitcoin/debug.log\r\n    chris    28346 14411  0 12:51 pts/0    00:00:00 grep bitcoin\r\n    12:51:53 chris@chris:~/Programs/bitcoin.git/src$ gdb /home/chris/Programs/bitcoin.git/src/qt/bitcoin-qt 17648\r\n    GNU gdb (Debian 7.12-6) 7.12.0.20161007-git\r\n    Copyright (C) 2016 Free Software Foundation, Inc.\r\n    License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\n    This is free software: you are free to change and redistribute it.\r\n    There is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\r\n    and \"show warranty\" for details.\r\n    This GDB was configured as \"x86_64-linux-gnu\".\r\n    Type \"show configuration\" for configuration details.\r\n    For bug reporting instructions, please see:\r\n    <http://www.gnu.org/software/gdb/bugs/>.\r\n    Find the GDB manual and other documentation resources online at:\r\n    <http://www.gnu.org/software/gdb/documentation/>.\r\n    For help, type \"help\".\r\n    Type \"apropos word\" to search for commands related to \"word\"...\r\n    Reading symbols from /home/chris/Programs/bitcoin.git/src/qt/bitcoin-qt...done.\r\n    Attaching to program: /home/chris/Programs/bitcoin.git/src/qt/bitcoin-qt, process 17648\r\n    [New LWP 17649]\r\n    [New LWP 17650]\r\n    [New LWP 17651]\r\n    [New LWP 17652]\r\n    [New LWP 17653]\r\n    [New LWP 17654]\r\n    [New LWP 17655]\r\n    [New LWP 17656]\r\n    [New LWP 17657]\r\n    [New LWP 17658]\r\n    [New LWP 17659]\r\n    [New LWP 17660]\r\n    [New LWP 17664]\r\n    [New LWP 17671]\r\n    [New LWP 17673]\r\n    [New LWP 17674]\r\n    [New LWP 17675]\r\n    [New LWP 17676]\r\n    [New LWP 17677]\r\n    [Thread debugging using libthread_db enabled]\r\n    Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\n    __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\r\n    135\t../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S: No such file or directory.\r\n    (gdb) thread apply all where\r\n\r\n    Thread 20 (Thread 0x7ff63debb700 (LWP 17677)):\r\n    #0  0x00007ff692d586ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007ff69068f9f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007ff69068fb0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007ff69532004f in QEventDispatcherGlib::processEvents (this=0x7ff6240008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #4  0x00007ff6952c99ca in QEventLoop::exec (this=this@entry=0x7ff63debacc0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #5  0x00007ff6950f70f3 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:507\r\n    #6  0x00007ff6950fbda8 in QThreadPrivate::start (arg=0x56128c7f02a0) at thread/qthread_unix.cpp:368\r\n    #7  0x00007ff6947b9494 in start_thread (arg=0x7ff63debb700) at pthread_create.c:333\r\n    #8  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 19 (Thread 0x7ff63d245700 (LWP 17676)):\r\n    #0  0x00007ff692d586ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007ff69068f9f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007ff69068fb0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007ff69532004f in QEventDispatcherGlib::processEvents (this=0x7ff6200008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #4  0x00007ff6952c99ca in QEventLoop::exec (this=this@entry=0x7ff63d244cc0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #5  0x00007ff6950f70f3 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:507\r\n    #6  0x00007ff6950fbda8 in QThreadPrivate::start (arg=0x56128b923d40) at thread/qthread_unix.cpp:368\r\n    #7  0x00007ff6947b9494 in start_thread (arg=0x7ff63d245700) at pthread_create.c:333\r\n    #8  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 18 (Thread 0x7ff63e70c700 (LWP 17675)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007ff6950fcc6b in QWaitConditionPrivate::wait (time=18446744073709551615, this=0x7ff633dd4480) at thread/qwaitcondition_unix.cpp:143\r\n    #2  QWaitCondition::wait (this=this@entry=0x7ff6154c9468, mutex=mutex@entry=0x7ff6154c9460, time=time@entry=18446744073709551615)\r\n        at thread/qwaitcondition_unix.cpp:215\r\n    #3  0x00007ff6950f5b33 in QSemaphore::acquire (this=this@entry=0x7ff63e702890, n=n@entry=1) at thread/qsemaphore.cpp:143\r\n    #4  0x00007ff6952d68cd in QMetaMethod::invoke (this=this@entry=0x7ff63e702af8, object=object@entry=0x56128b9167c0, connectionType=Qt::BlockingQueuedConnection, \r\n        connectionType@entry=1047538560, returnValue=..., val0=..., val1=..., val2=..., val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...)\r\n        at kernel/qmetaobject.cpp:2279\r\n    #5  0x00007ff6952dc58a in QMetaObject::invokeMethod (obj=0x56128b9167c0, member=0x56128a8e58de \"message\", type=1047538560, ret=..., val0=..., val1=..., val2=..., \r\n        val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...) at kernel/qmetaobject.cpp:1489\r\n    #6  0x000056128a01880c in QMetaObject::invokeMethod (member=0x80 <error: Cannot access memory at address 0x80>, type=Qt::BlockingQueuedConnection, val0=..., \r\n        obj=<optimized out>, val1=..., val2=..., val3=..., val4=..., val5=..., val6=..., val7=..., val8=..., val9=...)\r\n        at /usr/include/x86_64-linux-gnu/qt5/QtCore/qobjectdefs.h:460\r\n    #7  ThreadSafeMessageBox (gui=0x56128b9167c0, message=\"Error reading from database, shutting down.\", caption=..., style=<optimized out>) at qt/bitcoingui.cpp:1167\r\n    #8  0x000056128a01ccb7 in boost::_bi::list4<boost::_bi::value<BitcoinGUI*>, boost::arg<1>, boost::arg<2>, boost::arg<3> >::operator()<bool, bool (*)(BitcoinGUI*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::_bi::rrlist3<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int> > (f=<error reading variable>, this=<optimized out>, a=...)\r\n        at /usr/include/boost/bind/bind.hpp:453\r\n    #9  boost::_bi::bind_t<bool, bool (*)(BitcoinGUI*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::_bi::list4<boost::_bi::value<BitcoinGUI*>, boost::arg<1>, boost::arg<2>, boost::arg<3> > >::operator()<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&&) (a1=<error reading variable: Cannot access memory at address 0x88>, \r\n        a2=<error reading variable: Cannot access memory at address 0x9>, this=<optimized out>, a3=<optimized out>) at /usr/include/boost/bind/bind.hpp:1330\r\n    #10 boost::detail::function::function_obj_invoker3<boost::_bi::bind_t<bool, bool (*)(BitcoinGUI*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::_bi::list4<boost::_bi::value<BitcoinGUI*>, boost::arg<1>, boost::arg<2>, boost::arg<3> > >, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>::invoke (function_obj_ptr=..., \r\n        a0=<error reading variable: Cannot access memory at address 0x88>, a1=<error reading variable: Cannot access memory at address 0x9>, a2=2491150687)\r\n        at /usr/include/boost/function/function_template.hpp:138\r\n    #11 0x000056128a17b81e in boost::function3<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>::operator() (a0=<error reading variable: Cannot access memory at address 0x88>, \r\n        a1=<error reading variable: Cannot access memory at address 0x9>, a2=2491150687, this=<optimized out>) at /usr/include/boost/function/function_template.hpp:770\r\n    #12 boost::signals2::detail::call_with_tuple_args<bool>::m_invoke<boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, 0u, 1u, 2u, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&>(boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>&, boost::signals2::detail::unsigned_meta_array<0u, 1u, 2u>, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&> const&, boost::disable_if<boost::is_void<boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>::result_type>, void>::type*) const (this=<optimized out>, func=..., args=...)\r\n        at /usr/include/boost/signals2/detail/variadic_slot_invoker.hpp:98\r\n    #13 boost::signals2::detail::call_with_tuple_args<bool>::operator()<boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&, 3ul>(boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&> const&, mpl_::size_t<3ul>) const (this=<optimized out>, func=..., args=...)\r\n        at /usr/include/boost/signals2/detail/variadic_slot_invoker.hpp:90\r\n    #14 boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>::operator()<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >(boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > const&) const (\r\n        this=<optimized out>, connectionBody=...) at /usr/include/boost/signals2/detail/variadic_slot_invoker.hpp:133\r\n    #15 boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >::dereference() const (this=0x7ff63e703010) at /usr/include/boost/signals2/detail/slot_call_iterator.hpp:110\r\n    #16 0x000056128a17ac98 in boost::iterators::iterator_core_access::dereference<boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >(boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > const&) (f=...) at /usr/include/boost/iterator/iterator_facade.hpp:549\r\n    #17 boost::iterators::detail::iterator_facade_base<boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >, bool, boost::iterators::single_pass_traversal_tag, bool&, long, false, false>::operator*() const (\r\n        this=<optimized out>) at /usr/include/boost/iterator/iterator_facade.hpp:655\r\n    #18 boost::signals2::last_value<bool>::operator()<boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >(boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >, boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >) const (this=<optimized out>, first=..., last=...) at /usr/include/boost/signals2/last_value.hpp:48\r\n    #19 0x000056128a17a930 in boost::signals2::detail::combiner_invoker<bool>::operator()<boost::signals2::last_value<bool>, boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >(boost::signals2::last_value<bool>&, boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >, boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int>, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)> >, boost::signals2::mutex> >) const (combiner=..., this=<optimized out>, first=..., last=...) at /usr/include/boost/signals2/detail/result_type_wrapper.hpp:53\r\n    #20 boost::signals2::detail::signal_impl<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, boost::function<bool (boost::signals2::connection const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, boost::signals2::mutex>::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) (\r\n        this=0x56128b705d20, args=<optimized out>, args=<optimized out>, args=<optimized out>) at /usr/include/boost/signals2/detail/signal_template.hpp:242\r\n    #21 0x000056128a17a13d in boost::signals2::signal<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, boost::function<bool (boost::signals2::connection const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)>, boost::signals2::mutex>::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) (args=..., args=..., this=<optimized out>, args=...) at /usr/include/boost/signals2/detail/signal_template.hpp:723\r\n    #22 CCoinsViewErrorCatcher::GetCoin (this=<optimized out>, outpoint=..., coin=...) at init.cpp:143\r\n    #23 0x000056128a46e462 in CCoinsViewCache::FetchCoin (this=0x7ff648ab9ee0, outpoint=...) at coins.cpp:48\r\n    #24 0x000056128a46e549 in CCoinsViewCache::GetCoin (this=0x7ff633dd44ac, outpoint=..., coin=...) at coins.cpp:61\r\n    #25 0x000056128a2c8414 in CCoinsViewMemPool::GetCoin (this=0x7ff63e7038a8, outpoint=..., coin=...) at txmempool.cpp:902\r\n    #26 0x000056128a46e462 in CCoinsViewCache::FetchCoin (this=0x7ff63e704530, outpoint=...) at coins.cpp:48\r\n    #27 0x000056128a46eb03 in CCoinsViewCache::HaveCoin (this=0x7ff633dd44ac, outpoint=...) at coins.cpp:129\r\n    #28 0x000056128a30c5cc in AcceptToMemoryPoolWorker (chainparams=..., pool=..., state=..., ptx=..., fLimitFree=<optimized out>, pfMissingInputs=<optimized out>, \r\n        nAcceptTime=140697029833055, plTxnReplaced=0x56128acc70f0 <pcoinsTip>, fOverrideMempoolLimit=false, nAbsurdFee=@0x7ff63e7044d0: -2962908112588391035, \r\n        coins_to_uncache=...) at validation.cpp:547\r\n    #29 0x000056128a2de858 in AcceptToMemoryPoolWithTime (chainparams=..., pool=..., state=..., \r\n        tx=<error reading variable: Cannot access memory at address 0x1be08247c8b50>, fLimitFree=<optimized out>, pfMissingInputs=0x0, nAcceptTime=1505575299, \r\n        plTxnReplaced=0x7ff63e7083a8, fOverrideMempoolLimit=<optimized out>, nAbsurdFee=0) at validation.cpp:886\r\n    #30 0x000056128a2de122 in AcceptToMemoryPool (pool=..., state=..., tx=<error reading variable: Cannot access memory at address 0x1be08247c8b50>, fLimitFree=true, \r\n        pfMissingInputs=0x0, plTxnReplaced=0x7ff63e7083a8, fOverrideMempoolLimit=<optimized out>, nAbsurdFee=<optimized out>) at validation.cpp:902\r\n    #31 0x000056128a1d7266 in ProcessMessage (pfrom=<optimized out>, strCommand=..., vRecv=..., nTimeReceived=<optimized out>, chainparams=..., \r\n        connman=<optimized out>, interruptMsgProc=...) at net_processing.cpp:1791\r\n    #32 0x000056128a1cbf12 in PeerLogicValidation::ProcessMessages (this=0x7ff664046440, pfrom=0x7ff62822f0f0, interruptMsgProc=...) at net_processing.cpp:2718\r\n    #33 0x000056128a1f8037 in non-virtual thunk to PeerLogicValidation::ProcessMessages(CNode*, std::atomic<bool>&) () at net_processing.cpp:2643\r\n    #34 0x000056128a1a767b in CConnman::ThreadMessageHandler (this=<optimized out>) at net.cpp:1995\r\n    #35 0x000056128a1c24ba in std::__invoke_impl<void, void (CConnman::* const&)(), CConnman*&> (__f=<optimized out>, __t=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #36 std::__invoke<void (CConnman::* const&)(), CConnman*&> (__fn=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #37 std::_Mem_fn_base<void (CConnman::*)(), true>::operator()<CConnman*&> (this=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #38 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::__call<void, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) (this=<optimized out>, \r\n        __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #39 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::operator()<, void>() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #40 std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)> >::_M_invoke(std::_Any_data const&) (__functor=...)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #41 0x000056128a176e3d in std::function<void ()>::operator()() const (this=0x7ff63e70bd00)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #42 TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #43 0x000056128a1c267d in std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #44 std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #45 std::thread::_State_impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #46 0x00007ff6935ece6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #47 0x00007ff6947b9494 in start_thread (arg=0x7ff63e70c700) at pthread_create.c:333\r\n    #48 0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 17 (Thread 0x7ff63ef5d700 (LWP 17674)):\r\n    #0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\r\n    #1  0x00007ff6947bbc06 in __GI___pthread_mutex_lock (mutex=0x56128acc6b88 <cs_main>) at ../nptl/pthread_mutex_lock.c:115\r\n    #2  0x000056128a0259d5 in boost::recursive_mutex::lock (this=<optimized out>) at /usr/include/boost/thread/pthread/recursive_mutex.hpp:113\r\n    #3  AnnotatedMixin<boost::recursive_mutex>::lock (this=<optimized out>) at ./sync.h:59\r\n    #4  boost::unique_lock<CCriticalSection>::lock (this=0x7ff63ef5c250) at /usr/include/boost/thread/lock_types.hpp:346\r\n    #5  0x000056128a1c406a in CMutexLock<CCriticalSection>::Enter (this=0x56128acc6b88 <cs_main>, nLine=504, pszName=<optimized out>, pszFile=<optimized out>)\r\n        at ./sync.h:123\r\n    #6  CMutexLock<CCriticalSection>::CMutexLock (this=0x56128acc6b88 <cs_main>, nLine=504, fTry=false, mutexIn=..., pszName=<optimized out>, pszFile=<optimized out>)\r\n        at ./sync.h:144\r\n    #7  PeerLogicValidation::InitializeNode (this=0x7ff664046440, pnode=0x7ff6282bb0d0) at net_processing.cpp:504\r\n    #8  0x000056128a1c5657 in non-virtual thunk to PeerLogicValidation::InitializeNode(CNode*) () at net_processing.cpp:499\r\n    #9  0x000056128a1a4602 in CConnman::OpenNetworkConnection (this=0x7ff66456ad30, addrConnect=..., fCountFailure=<optimized out>, grantOutbound=<optimized out>, \r\n        pszDest=0x0, fOneShot=<optimized out>, fFeeler=<optimized out>, fAddnode=92) at net.cpp:1965\r\n    #10 0x000056128a1a5508 in CConnman::ThreadOpenConnections (this=<optimized out>, connect=...) at net.cpp:1840\r\n    #11 0x000056128a1c2887 in std::__invoke_impl<void, void (CConnman::* const&)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >), CConnman*&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&> (\r\n        __f=<optimized out>, __t=<optimized out>, __args=<error reading variable: Cannot access memory at address 0x8>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #12 0x000056128a1c270e in std::__invoke<void (CConnman::* const&)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >), CConnman*&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&> (__fn=\r\n        @0x56128acc6b88: (void (CConnman::*)(CConnman * const, std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >)) 0x100000002, this adjustment 4294984971, __args=..., __args=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #13 std::_Mem_fn_base<void (CConnman::*)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >), true>::operator()<CConnman*&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&> (__args=..., __args=..., \r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #14 std::_Bind<std::_Mem_fn<void (CConnman::*)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)> (CConnman*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)>::__call<void, , 0ul, 1ul>(std::tuple<>&&, std::_Index_tuple<0ul, 1ul>) (this=0x56128acc6b88 <cs_main>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #15 std::_Bind<std::_Mem_fn<void (CConnman::*)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)> (CConnman*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)>::operator()<, void>() (\r\n        this=0x56128acc6b88 <cs_main>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #16 std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (CConnman::*)(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)> (CConnman*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)> >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #17 0x000056128a176e3d in std::function<void ()>::operator()() const (this=0x7ff63ef5cd00)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #18 TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #19 0x000056128a1c267d in std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #20 std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #21 std::thread::_State_impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #22 0x00007ff6935ece6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #23 0x00007ff6947b9494 in start_thread (arg=0x7ff63ef5d700) at pthread_create.c:333\r\n    #24 0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 16 (Thread 0x7ff63f7ae700 (LWP 17673)):\r\n    #0  pthread_cond_timedwait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S:225\r\n    #1  0x000056128a49b56e in __gthread_cond_timedwait (__cond=<optimized out>, __mutex=<optimized out>, __abs_timeout=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:871\r\n    #2  std::condition_variable::__wait_until_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> > > (this=<optimized out>, __lock=..., __atime=...)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/condition_variable:166\r\n    #3  std::condition_variable::wait_until<std::chrono::duration<long, std::ratio<1l, 1000000000l> > > (this=<optimized out>, __lock=..., __atime=...)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/condition_variable:106\r\n    #4  std::condition_variable::wait_until<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, CThreadInterrupt::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0>(std::unique_lock<std::mutex>&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, CThreadInterrupt::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0) (this=<optimized out>, \r\n        __lock=..., __atime=..., __p=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/condition_variable:129\r\n    #5  std::condition_variable::wait_for<long, std::ratio<1l, 1000l>, CThreadInterrupt::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0>(std::unique_lock<std::mutex>&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&, CThreadInterrupt::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000l> >)::$_0) (this=<optimized out>, __lock=..., __rtime=..., __p=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/condition_variable:145\r\n    #6  CThreadInterrupt::sleep_for (this=<optimized out>, rel_time=...) at threadinterrupt.cpp:30\r\n    #7  0x000056128a49b5fa in CThreadInterrupt::sleep_for (this=0x7ff6645bb1a4, rel_time=...) at threadinterrupt.cpp:35\r\n    #8  0x000056128a1a7316 in CConnman::ThreadOpenAddedConnections (this=<optimized out>) at net.cpp:1927\r\n    #9  0x000056128a1c24ba in std::__invoke_impl<void, void (CConnman::* const&)(), CConnman*&> (__f=<optimized out>, __t=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #10 std::__invoke<void (CConnman::* const&)(), CConnman*&> (__fn=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #11 std::_Mem_fn_base<void (CConnman::*)(), true>::operator()<CConnman*&> (this=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #12 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::__call<void, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) (this=<optimized out>, \r\n        __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #13 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::operator()<, void>() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #14 std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)> >::_M_invoke(std::_Any_data const&) (__functor=...)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #15 0x000056128a176e3d in std::function<void ()>::operator()() const (this=0x7ff63f7add00)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #16 TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #17 0x000056128a1c267d in std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #18 std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #19 std::thread::_State_impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #20 0x00007ff6935ece6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #21 0x00007ff6947b9494 in start_thread (arg=0x7ff63f7ae700) at pthread_create.c:333\r\n    #22 0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 15 (Thread 0x7ff645ec7700 (LWP 17671)):\r\n    #0  0x00007ff692d5a3f3 in select () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x000056128a19da64 in CConnman::ThreadSocketHandler (this=<optimized out>) at net.cpp:1251\r\n    #2  0x000056128a1c24ba in std::__invoke_impl<void, void (CConnman::* const&)(), CConnman*&> (__f=<optimized out>, __t=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #3  std::__invoke<void (CConnman::* const&)(), CConnman*&> (__fn=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #4  std::_Mem_fn_base<void (CConnman::*)(), true>::operator()<CConnman*&> (this=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #5  std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::__call<void, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) (this=<optimized out>, \r\n        __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #6  std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::operator()<, void>() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #7  std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)> >::_M_invoke(std::_Any_data const&) (__functor=...)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #8  0x000056128a176e3d in std::function<void ()>::operator()() const (this=0x7ff645ec6d00)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #9  TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #10 0x000056128a1c267d in std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #11 std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #12 std::thread::_State_impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #13 0x00007ff6935ece6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #14 0x00007ff6947b9494 in start_thread (arg=0x7ff645ec7700) at pthread_create.c:333\r\n    #15 0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 14 (Thread 0x7ff658cf7700 (LWP 17664)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x000056128a4f38ab in leveldb::(anonymous namespace)::PosixEnv::BGThread (this=<optimized out>) at leveldb/util/env_posix.cc:641\r\n    #2  leveldb::(anonymous namespace)::PosixEnv::BGThreadWrapper (arg=<optimized out>) at leveldb/util/env_posix.cc:556\r\n    #3  0x00007ff6947b9494 in start_thread (arg=0x7ff658cf7700) at pthread_create.c:333\r\n    #4  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 13 (Thread 0x7ff668e19700 (LWP 17660)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007ff6935e750c in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #2  0x000056128a381c2a in WorkQueue<HTTPClosure>::Run (this=<optimized out>) at httpserver.cpp:127\r\n    #3  0x000056128a37baca in HTTPWorkQueueRun (queue=0x7ff664044c7c) at httpserver.cpp:351\r\n    #4  0x000056128a383508 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #5  std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #6  std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0xfffffffffffffe00)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #7  0x00007ff6935ece6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #8  0x00007ff6947b9494 in start_thread (arg=0x7ff668e19700) at pthread_create.c:333\r\n    #9  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 12 (Thread 0x7ff66966a700 (LWP 17659)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007ff6935e750c in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #2  0x000056128a381c2a in WorkQueue<HTTPClosure>::Run (this=<optimized out>) at httpserver.cpp:127\r\n    #3  0x000056128a37baca in HTTPWorkQueueRun (queue=0x7ff664044c7c) at httpserver.cpp:351\r\n    #4  0x000056128a383508 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #5  std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #6  std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0xfffffffffffffe00)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #7  0x00007ff6935ece6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #8  0x00007ff6947b9494 in start_thread (arg=0x7ff66966a700) at pthread_create.c:333\r\n    #9  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 11 (Thread 0x7ff669ebb700 (LWP 17658)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007ff6935e750c in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #2  0x000056128a381c2a in WorkQueue<HTTPClosure>::Run (this=<optimized out>) at httpserver.cpp:127\r\n    #3  0x000056128a37baca in HTTPWorkQueueRun (queue=0x7ff664044c7c) at httpserver.cpp:351\r\n    #4  0x000056128a383508 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #5  std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #6  std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0xfffffffffffffe00)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #7  0x00007ff6935ece6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #8  0x00007ff6947b9494 in start_thread (arg=0x7ff669ebb700) at pthread_create.c:333\r\n    #9  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 10 (Thread 0x7ff66a70c700 (LWP 17657)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x00007ff6935e750c in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #2  0x000056128a381c2a in WorkQueue<HTTPClosure>::Run (this=<optimized out>) at httpserver.cpp:127\r\n    #3  0x000056128a37baca in HTTPWorkQueueRun (queue=0x7ff664044c7c) at httpserver.cpp:351\r\n    #4  0x000056128a383508 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #5  std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #6  std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0xfffffffffffffe00)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #7  0x00007ff6935ece6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #8  0x00007ff6947b9494 in start_thread (arg=0x7ff66a70c700) at pthread_create.c:333\r\n    #9  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 9 (Thread 0x7ff66af5d700 (LWP 17656)):\r\n    #0  0x00007ff692d620f3 in epoll_wait () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007ff6938d9d98 in ?? () from /usr/lib/x86_64-linux-gnu/libevent-2.0.so.5\r\n    #2  0x00007ff6938c407a in event_base_loop () from /usr/lib/x86_64-linux-gnu/libevent-2.0.so.5\r\n    #3  0x000056128a37b03f in ThreadHTTP (base=0x7ff6640443d0, http=<optimized out>) at httpserver.cpp:303\r\n    #4  0x000056128a382c4d in std::__invoke_impl<bool, bool (*&)(event_base*, evhttp*), event_base*, evhttp*>(std::__invoke_other, bool (*&)(event_base*, evhttp*), event_base*&&, evhttp*&&) (__f=<optimized out>, __args=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:210\r\n    #5  std::__invoke<bool (*&)(event_base*, evhttp*), event_base*, evhttp*>(bool (*&)(event_base*, evhttp*), event_base*&&, evhttp*&&) (__fn=<optimized out>, \r\n        __args=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #6  std::reference_wrapper<bool (*)(event_base*, evhttp*)>::operator()<event_base*, evhttp*>(event_base*&&, evhttp*&&) const (__args=<optimized out>, \r\n        this=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:465\r\n    #7  std::_Bind_simple<std::reference_wrapper<bool (*)(event_base*, evhttp*)> (event_base*, evhttp*)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (\r\n        this=0x7ff692d620f3 <epoll_wait+51>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #8  std::_Bind_simple<std::reference_wrapper<bool (*)(event_base*, evhttp*)> (event_base*, evhttp*)>::operator()() (this=0x7ff692d620f3 <epoll_wait+51>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #9  std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<bool>, std::__future_base::_Result_base::_Deleter>, std::_Bind_simple<std::reference_wrapper<bool (*)(event_base*, evhttp*)> (event_base*, evhttp*)>, bool>::operator()() const (this=0x7ff66af5ccd0)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:1325\r\n    #10 0x000056128a382b8f in std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<bool>, std::__future_base::_Result_base::_Deleter>, std::_Bind_simple<std::reference_wrapper<bool (*)(event_base*, evhttp*)> (event_base*, evhttp*)>, bool> >::_M_invoke(std::_Any_data const&) (__functor=...)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1716\r\n    #11 0x000056128a382aba in std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>::operator()() const (\r\n        this=0x7ff664044660) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #12 std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (this=0x7ff664044e80, __f=0x7ff664044660, __did_set=0x7ff66af5cc8f) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:533\r\n    #13 0x000056128a382b56 in std::__invoke_impl<void, void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::__invoke_memfun_deref, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__f=<optimized out>, __args=<optimized out>, __args=<optimized out>, __t=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #14 std::__invoke<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__fn=<optimized out>, __args=<optimized out>, __args=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #15 void std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&)::{lambda()#1}::operator()() const (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:602\r\n    #16 void std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&)::{lambda()#2}::operator()() const (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:607\r\n    #17 void std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&)::{lambda()#2}::__invoke() () at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:607\r\n    #18 0x00007ff6947c0739 in __pthread_once_slow (once_control=0x7ff664044e98, init_routine=0x7ff6935ec120 <__once_proxy>) at pthread_once.c:116\r\n    #19 0x000056128a382a39 in __gthread_once (__func=0x7ff664044660, __once=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/gthr-default.h:699\r\n    #20 std::call_once<void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*>(std::once_flag&, void (std::__future_base::_State_baseV2::*&&)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*), std::__future_base::_State_baseV2*&&, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*&&, bool*&&) (__args=<optimized out>, __args=<optimized out>, __args=<optimized out>, __once=..., __f=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/mutex:614\r\n    #21 std::__future_base::_State_baseV2::_M_set_result(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>, bool) (this=0x7ff664044e80, __res=..., __ignore_failure=false) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:392\r\n    #22 0x000056128a382491 in std::__future_base::_Task_state<bool (*)(event_base*, evhttp*), std::allocator<int>, bool (event_base*, evhttp*)>::_M_run(event_base*&&, evhttp*&&) (this=0x17, __args=<optimized out>, __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:1409\r\n    #23 0x000056128a38348b in std::packaged_task<bool (event_base*, evhttp*)>::operator()(event_base*, evhttp*) (\r\n        __args=<error reading variable: Cannot access memory at address 0x20>, __args=<error reading variable: Cannot access memory at address 0x20>, \r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/future:1553\r\n    #24 std::_Bind_simple<std::packaged_task<bool (event_base*, evhttp*)> (event_base*, evhttp*)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #25 std::_Bind_simple<std::packaged_task<bool (event_base*, evhttp*)> (event_base*, evhttp*)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #26 std::thread::_State_impl<std::_Bind_simple<std::packaged_task<bool (event_base*, evhttp*)> (event_base*, evhttp*)> >::_M_run() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #27 0x00007ff6935ece6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #28 0x00007ff6947b9494 in start_thread (arg=0x7ff66af5d700) at pthread_create.c:333\r\n    #29 0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 8 (Thread 0x7ff66b7ae700 (LWP 17655)):\r\n    #0  pthread_cond_timedwait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S:225\r\n    #1  0x000056128a257c82 in boost::condition_variable::do_wait_until (this=0x56128bfebea0, m=..., timeout=...)\r\n        at /usr/include/boost/thread/pthread/condition_variable.hpp:109\r\n    #2  0x000056128a489379 in boost::condition_variable::wait_until (this=<optimized out>, lk=..., tp=...)\r\n        at /usr/include/boost/thread/pthread/condition_variable_fwd.hpp:252\r\n    #3  boost::condition_variable::wait_until<boost::chrono::duration<long, boost::ratio<1l, 1000000000l> > > (this=<optimized out>, lock=..., t=...)\r\n        at /usr/include/boost/thread/pthread/condition_variable_fwd.hpp:209\r\n    #4  CScheduler::serviceQueue (this=<optimized out>) at scheduler.cpp:67\r\n    #5  0x000056128a18553a in boost::_mfi::mf0<void, CScheduler>::operator() (p=<optimized out>, this=<optimized out>) at /usr/include/boost/bind/mem_fn_template.hpp:49\r\n    #6  boost::_bi::list1<boost::_bi::value<CScheduler*> >::operator()<boost::_mfi::mf0<void, CScheduler>, boost::_bi::list0> (this=<optimized out>, f=..., a=...)\r\n        at /usr/include/boost/bind/bind.hpp:259\r\n    #7  boost::_bi::bind_t<void, boost::_mfi::mf0<void, CScheduler>, boost::_bi::list1<boost::_bi::value<CScheduler*> > >::operator() (this=<optimized out>)\r\n        at /usr/include/boost/bind/bind.hpp:1294\r\n    #8  std::_Function_handler<void (), boost::_bi::bind_t<void, boost::_mfi::mf0<void, CScheduler>, boost::_bi::list1<boost::_bi::value<CScheduler*> > > >::_M_invoke(std::_Any_data const&) (__functor=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #9  0x000056128a176e3d in std::function<void ()>::operator()() const (this=0x7ff66b7adcb8)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #10 TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #11 0x000056128a185ab6 in boost::_bi::list2<boost::_bi::value<char const*>, boost::_bi::value<std::function<void ()> > >::operator()<void (*)(char const*, std::function<void ()>), boost::_bi::list0>(boost::_bi::type<void>, void (*&)(char const*, std::function<void ()>), boost::_bi::list0&, int) (this=0x7ff664043100, \r\n        f=<optimized out>, a=...) at /usr/include/boost/bind/bind.hpp:319\r\n    #12 0x000056128a185a3f in boost::_bi::bind_t<void, void (*)(char const*, std::function<void ()>), boost::_bi::list2<boost::_bi::value<char const*>, boost::_bi::value<std::function<void ()> > > >::operator()() (this=<optimized out>) at /usr/include/boost/bind/bind.hpp:1294\r\n    #13 boost::detail::thread_data<boost::_bi::bind_t<void, void (*)(char const*, std::function<void ()>), boost::_bi::list2<boost::_bi::value<char const*>, boost::_bi::value<std::function<void ()> > > > >::run() (this=<optimized out>) at /usr/include/boost/thread/detail/thread.hpp:116\r\n    #14 0x00007ff69635d116 in ?? () from /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.62.0\r\n    #15 0x00007ff6947b9494 in start_thread (arg=0x7ff66b7ae700) at pthread_create.c:333\r\n    #16 0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 7 (Thread 0x7ff66bfff700 (LWP 17654)):\r\n    #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\r\n    #1  0x000056128a0017eb in boost::condition_variable::wait (this=<optimized out>, m=...) at /usr/include/boost/thread/pthread/condition_variable.hpp:77\r\n    #2  0x000056128a3212f2 in CCheckQueue<CScriptCheck>::Loop (this=<optimized out>, fMaster=<optimized out>) at ./checkqueue.h:102\r\n    #3  0x000056128a2e12c8 in CCheckQueue<CScriptCheck>::Thread (this=0x56128acc71ec <scriptcheckqueue+84>) at ./checkqueue.h:139\r\n    #4  ThreadScriptCheck () at validation.cpp:1540\r\n    #5  0x000056128a185114 in boost::detail::thread_data<void (*)()>::run (this=0x56128acc71ec <scriptcheckqueue+84>) at /usr/include/boost/thread/detail/thread.hpp:116\r\n    #6  0x00007ff69635d116 in ?? () from /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.62.0\r\n    #7  0x00007ff6947b9494 in start_thread (arg=0x7ff66bfff700) at pthread_create.c:333\r\n    #8  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 6 (Thread 0x7ff677398700 (LWP 17653)):\r\n    #0  0x00007ff692d586ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007ff69068f9f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007ff69068fb0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007ff69532004f in QEventDispatcherGlib::processEvents (this=0x7ff6640008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #4  0x00007ff6952c99ca in QEventLoop::exec (this=this@entry=0x7ff677397cc0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #5  0x00007ff6950f70f3 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:507\r\n    #6  0x00007ff6950fbda8 in QThreadPrivate::start (arg=0x56128bfe7de0) at thread/qthread_unix.cpp:368\r\n    #7  0x00007ff6947b9494 in start_thread (arg=0x7ff677398700) at pthread_create.c:333\r\n    #8  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 5 (Thread 0x7ff677be9700 (LWP 17652)):\r\n    #0  0x00007ff692d586ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007ff69068f9f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007ff69068fb0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007ff69532004f in QEventDispatcherGlib::processEvents (this=0x7ff66c0008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #4  0x00007ff6952c99ca in QEventLoop::exec (this=this@entry=0x7ff677be8c90, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #5  0x00007ff6950f70f3 in QThread::exec (this=this@entry=0x7ff6955a6d60 <(anonymous namespace)::Q_QGS__q_manager::innerFunction()::holder>)\r\n        at thread/qthread.cpp:507\r\n    #6  0x00007ff6955316d5 in QDBusConnectionManager::run (this=0x7ff6955a6d60 <(anonymous namespace)::Q_QGS__q_manager::innerFunction()::holder>)\r\n        at qdbusconnection.cpp:178\r\n    #7  0x00007ff6950fbda8 in QThreadPrivate::start (arg=0x7ff6955a6d60 <(anonymous namespace)::Q_QGS__q_manager::innerFunction()::holder>)\r\n        at thread/qthread_unix.cpp:368\r\n    #8  0x00007ff6947b9494 in start_thread (arg=0x7ff677be9700) at pthread_create.c:333\r\n    #9  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 4 (Thread 0x7ff67df9e700 (LWP 17651)):\r\n    #0  0x00007ff692d586ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007ff69068f9f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007ff69068fd82 in g_main_loop_run () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007ff68473e656 in ?? () from /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0\r\n    #4  0x00007ff6906b73d5 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #5  0x00007ff6947b9494 in start_thread (arg=0x7ff67df9e700) at pthread_create.c:333\r\n    #6  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 3 (Thread 0x7ff67e7ef700 (LWP 17650)):\r\n    #0  0x00007ff692d586ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007ff69068f9f6 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #2  0x00007ff69068fb0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #3  0x00007ff69068fb51 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #4  0x00007ff6906b73d5 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #5  0x00007ff6947b9494 in start_thread (arg=0x7ff67e7ef700) at pthread_create.c:333\r\n    #6  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 2 (Thread 0x7ff688439700 (LWP 17649)):\r\n    #0  0x00007ff692d586ad in poll () at ../sysdeps/unix/syscall-template.S:84\r\n    #1  0x00007ff68e55c150 in ?? () from /usr/lib/x86_64-linux-gnu/libxcb.so.1\r\n    #2  0x00007ff68e55dee9 in xcb_wait_for_event () from /usr/lib/x86_64-linux-gnu/libxcb.so.1\r\n    #3  0x00007ff68ab9ab69 in QXcbEventReader::run (this=0x56128b83c900) at qxcbconnection.cpp:1343\r\n    #4  0x00007ff6950fbda8 in QThreadPrivate::start (arg=0x56128b83c900) at thread/qthread_unix.cpp:368\r\n    #5  0x00007ff6947b9494 in start_thread (arg=0x7ff688439700) at pthread_create.c:333\r\n    #6  0x00007ff692d61aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n\r\n    Thread 1 (Thread 0x7ff696f01900 (LWP 17648)):\r\n    #0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\r\n    #1  0x00007ff6947bbc06 in __GI___pthread_mutex_lock (mutex=0x56128acc6df0 <mempool+56>) at ../nptl/pthread_mutex_lock.c:115\r\n    #2  0x000056128a0259d5 in boost::recursive_mutex::lock (this=<optimized out>) at /usr/include/boost/thread/pthread/recursive_mutex.hpp:113\r\n    #3  AnnotatedMixin<boost::recursive_mutex>::lock (this=<optimized out>) at ./sync.h:59\r\n    #4  boost::unique_lock<CCriticalSection>::lock (this=0x7fff8192c5e8) at /usr/include/boost/thread/lock_types.hpp:346\r\n    #5  0x000056128a02541e in CMutexLock<CCriticalSection>::Enter (this=0x56128acc6df0 <mempool+56>, nLine=602, pszName=<optimized out>, pszFile=<optimized out>)\r\n        at ./sync.h:123\r\n    #6  CMutexLock<CCriticalSection>::CMutexLock (this=0x56128acc6df0 <mempool+56>, mutexIn=..., nLine=602, fTry=false, pszName=<optimized out>, \r\n        pszFile=<optimized out>) at ./sync.h:144\r\n    #7  CTxMemPool::size (this=0x56128acc6db8 <mempool>) at ./txmempool.h:602\r\n    #8  0x000056128a0240b9 in ClientModel::getMempoolSize (this=<optimized out>) at qt/clientmodel.cpp:130\r\n    #9  ClientModel::updateTimer (this=0x56128b70d6e0) at qt/clientmodel.cpp:153\r\n    #10 0x000056128a0ba739 in ClientModel::qt_static_metacall (_o=0x56128acc6df0 <mempool+56>, _c=128, _id=<optimized out>, _a=0x7ff6947c1f5c <__lll_lock_wait+28>)\r\n        at qt/moc_clientmodel.cpp:140\r\n    #11 0x00007ff6952f75e9 in QMetaObject::activate (sender=sender@entry=0x56128b71a310, signalOffset=<optimized out>, local_signal_index=local_signal_index@entry=0, \r\n        argv=argv@entry=0x0) at kernel/qobject.cpp:3740\r\n    #12 0x00007ff6952f7f07 in QMetaObject::activate (sender=sender@entry=0x56128b71a310, m=m@entry=0x7ff695515760 <QTimer::staticMetaObject>, \r\n        local_signal_index=local_signal_index@entry=0, argv=argv@entry=0x0) at kernel/qobject.cpp:3602\r\n    #13 0x00007ff695371780 in QTimer::timeout (this=this@entry=0x56128b71a310) at .moc/moc_qtimer.cpp:198\r\n    #14 0x00007ff695303f78 in QTimer::timerEvent (this=0x56128b71a310, e=<optimized out>) at kernel/qtimer.cpp:254\r\n    #15 0x00007ff6952f8453 in QObject::event (this=0x56128b71a310, e=<optimized out>) at kernel/qobject.cpp:1285\r\n    #16 0x00007ff695c3ab8c in QApplicationPrivate::notify_helper (this=<optimized out>, receiver=0x56128b71a310, e=0x7fff8192ca80) at kernel/qapplication.cpp:3799\r\n    #17 0x00007ff695c42341 in QApplication::notify (this=0x7fff8192d6b0, receiver=0x56128b71a310, e=0x7fff8192ca80) at kernel/qapplication.cpp:3556\r\n    #18 0x00007ff6952cb9e0 in QCoreApplication::notifyInternal2 (receiver=0x56128b71a310, event=event@entry=0x7fff8192ca80) at kernel/qcoreapplication.cpp:988\r\n    #19 0x00007ff69531efee in QCoreApplication::sendEvent (event=0x7fff8192ca80, receiver=<optimized out>)\r\n        at ../../include/QtCore/../../src/corelib/kernel/qcoreapplication.h:231\r\n    #20 QTimerInfoList::activateTimers (this=0x56128b8c6940) at kernel/qtimerinfo_unix.cpp:644\r\n    #21 0x00007ff69531f511 in timerSourceDispatch (source=<optimized out>) at kernel/qeventdispatcher_glib.cpp:182\r\n    #22 0x00007ff69068f7f7 in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #23 0x00007ff69068fa60 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #24 0x00007ff69068fb0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #25 0x00007ff69532004f in QEventDispatcherGlib::processEvents (this=0x56128b8c6720, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #26 0x00007ff6952c99ca in QEventLoop::exec (this=this@entry=0x7fff8192ccd0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #27 0x00007ff695e290e7 in QDialog::exec (this=0x7fff8192cd58) at dialogs/qdialog.cpp:552\r\n    #28 0x000056128a016d55 in BitcoinGUI::message (this=0x56128b9167c0, title=..., message=..., style=<optimized out>, ret=0x7ff63e702e8b) at qt/bitcoingui.cpp:925\r\n    #29 0x000056128a0b9403 in BitcoinGUI::qt_static_metacall (_o=0x56128b9167c0, _c=<optimized out>, _id=<optimized out>, _a=0x7ff63e702920)\r\n        at qt/moc_bitcoingui.cpp:216\r\n    #30 0x00007ff6952f8499 in QObject::event (this=this@entry=0x56128b9167c0, e=e@entry=0x7ff614534610) at kernel/qobject.cpp:1263\r\n    #31 0x00007ff695c8246b in QWidget::event (this=this@entry=0x56128b9167c0, event=event@entry=0x7ff614534610) at kernel/qwidget.cpp:9225\r\n    #32 0x00007ff695d8192b in QMainWindow::event (this=0x56128b9167c0, event=0x7ff614534610) at widgets/qmainwindow.cpp:1543\r\n    #33 0x00007ff695c3ab8c in QApplicationPrivate::notify_helper (this=<optimized out>, receiver=0x56128b9167c0, e=0x7ff614534610) at kernel/qapplication.cpp:3799\r\n    #34 0x00007ff695c42341 in QApplication::notify (this=0x7fff8192d6b0, receiver=0x56128b9167c0, e=0x7ff614534610) at kernel/qapplication.cpp:3556\r\n    #35 0x00007ff6952cb9e0 in QCoreApplication::notifyInternal2 (receiver=0x56128b9167c0, event=event@entry=0x7ff614534610) at kernel/qcoreapplication.cpp:988\r\n    #36 0x00007ff6952ce16d in QCoreApplication::sendEvent (event=0x7ff614534610, receiver=<optimized out>)\r\n        at ../../include/QtCore/../../src/corelib/kernel/qcoreapplication.h:231\r\n    #37 QCoreApplicationPrivate::sendPostedEvents (receiver=receiver@entry=0x0, event_type=event_type@entry=0, data=0x56128b821ce0) at kernel/qcoreapplication.cpp:1649\r\n    #38 0x00007ff6952ce5d8 in QCoreApplication::sendPostedEvents (receiver=receiver@entry=0x0, event_type=event_type@entry=0) at kernel/qcoreapplication.cpp:1503\r\n    #39 0x00007ff69531fc43 in postEventSourceDispatch (s=0x56128b8c67f0) at kernel/qeventdispatcher_glib.cpp:276\r\n    #40 0x00007ff69068f7f7 in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #41 0x00007ff69068fa60 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #42 0x00007ff69068fb0c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n    #43 0x00007ff69532004f in QEventDispatcherGlib::processEvents (this=0x56128b8c6720, flags=...) at kernel/qeventdispatcher_glib.cpp:423\r\n    #44 0x00007ff6952c99ca in QEventLoop::exec (this=this@entry=0x7fff8192d4a0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212\r\n    #45 0x00007ff6952d213c in QCoreApplication::exec () at kernel/qcoreapplication.cpp:1261\r\n    #46 0x0000561289ffbb19 in main (argc=<optimized out>, argv=<optimized out>) at qt/bitcoin.cpp:714\r\n    (gdb) \r\n\r\nI suppose it's possible that this is corruption in something other than the chainstate db, that I only fixed the chainstate db by reindexing and still have old corruption in another db.\r\n\r\nEither way, bitcoin-qt shouldn't hang like this. It's not responding to requests to \"bitcoin-cli stop\" or any other RPC.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11324", "title": "multiwallet `validateaddress` tells me `ismine: false` without -rpcwallet arg", "body": "In `master` branch, 96ac26e56627f0c24213fcd3a1cce9fc95f1f661:\r\n\r\nI have two wallets loaded. I have the same privkey in both of them, but when I check using `validateaddress` it tells me `\"ismine\": false,`:\r\n\r\n    $ bitcoin-cli validateaddress $addr | grep ismine\r\n      \"ismine\": false,\r\n    $ bitcoin-cli -rpcwallet=wallet.dat validateaddress $addr | grep ismine\r\n      \"ismine\": true,\r\n\r\nPerhaps we shouldn't include `ismine` and `iswatchonly` in the output if we don't know which wallet we're talking about.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11317", "title": "wallet debug messages could name wallet file", "body": "In the log I see things like:\r\n\r\n    2017-09-13 03:54:33 init message: Rescanning...\r\n    2017-09-13 03:54:33 Rescanning last 68616 blocks (from block 416339)...\r\n    2017-09-13 03:54:40 AddToWallet xxxxx  update\r\n    2017-09-13 03:55:33 Still rescanning. At block 418849. Progress=0.549138\r\n\r\nI would be interested to see the wallet file name on each of these log lines.\r\n\r\nWould there be any interest in merging such a PR?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11233", "title": "bumpfee behavior with custom change address", "body": "If I create an RBF transaction using the Qt GUI but specify my own custom change address, bumpfee doesn't work because it claims it can't find the change address:\r\n\r\n    \"Transaction does not have a change output\"\r\n\r\nThis is because none of the outputs satisfy\r\n\r\n    pWallet->IsChange(...)\r\n\r\nI see there's a \"TODO\" commented in `CWallet::IsChange()` in `src/wallet/wallet.cpp`:\r\n\r\n    // TODO: fix handling of 'change' outputs. The assumption is that any\r\n    // payment to a script that is ours, but is not in the address book\r\n    // is change.\r\n\r\nI tend to put all my addresses in the address book whether I'm going to use them as change or not. I guess if the wallet was capable of creating its own SegWit change addresses I'd stop using custom change addresses, but currently it always seems to send change to a legacy address if I don't manually specify a change address.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11233/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11320", "title": "Include the wallet name in log messages relating to wallets", "body": "For #11317.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085", "title": "Add 'sethdseed' RPC to initialize or replace HD seed.", "body": "As mentioned in #11070, I wanted to be able to use HD addresses in my legacy wallet.\r\n\r\nIs a change along these lines acceptable? What needs changing?\r\n\r\nI'm aware it's missing tests. I'll add those if there's a chance this could be merged. If not, my wallet now uses HD addresses, so that's good enough for me.", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693936", "body": "This can be closed because it is the same as issue 35, which has been merged.  I didn't realise that making a pull request automatically made a new issue, so I made this issue first.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697674", "body": "net.cpp uses:\n  addrConnect = CAddress(\"91.198.22.70:80\"); // checkip.dyndns.org\nand\n  addrConnect = CAddress(\"74.208.43.192:80\"); // www.showmyip.com\nif it wasn't able to get the external IP address from IRC within 2 minutes.\n\nNote it hard-codes the IP addresses of those 2 sites too, which is probably not ideal.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704564", "body": "How does Android do it?  Got a reference?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723996", "body": "I'm not able to reproduce this in ubuntu 11.04's development version, but I'm using an English locale.\n\nCould you show me the output of running this in a terminal please, so I can better reproduce your environment?\n\nenv | grep -i -e 'c[sz]' -e lc\n\nremove anything private from the output, should there be something you don't want to post.\n\nThanks.\n\nChris.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723999", "body": "When I try to make a folder like you have, it becomes: /home/chris/Sta\u00been\u00e9/bitcoin/ - the z hacek comes out like a 3/4 on my screen.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724337", "body": "I still can't reproduce it, even with those settings.\n\nAre you using the official build?  32 or 64 bit?  When does it crash; before or after the GUI appears?  What's the last few lines in ~/.bitcoin/debug.log when it crashes?  Can you get a gdb backtrace?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731268", "body": "I think I prefer exactly 1/14th the 2 weeks.  Make it 24h, then we're aiming to change difficulty at the same time each day, and can see whether the actual change times drift forward of backward on the clock.\n\nUnless there's a good reason not to?  24 hours is 144 blocks.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "DrakonAlpha": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176", "title": "Application crashes when the connected hard disk drive gets disconnected", "body": "Application crashes when the connected hard disk drive gets disconnected. Error message would be ok, but crash ist inacceptable.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jappiecr": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170", "title": "Bitcoin core doens't respond", "body": "Hi,\r\n\r\nBitcoin core 0.15.1 get's stuck when I try to open program. Most of the time it goes through the update startup rocess oke and then wehen it starts loading it get's stuck.\r\nI looked in the error.log and this is what it says something like:\r\n2018-01-12 12:08:05 LevelDB read failure: IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\n\r\n2018-01-12 12:08:05 IO error: E:\\BT\\chainstate\\101461.ldb: Can't execute because of an error in I/O-device.\r\n\r\nI have the bitcoin folder on external harddrive. It worked fine a couple of weeks ago when I went to update after a couple of months of not connecting. Everything was updated fine and working properly. Then  I wanted to do a little test and opend an online account on Blockchain and transfered a minimal amount as a test. Test went fine but after that I was no longer able to open my Bitcoin Core wallet because of above descibed error.\r\n\r\nCan anybody help?\r\nThanks in advance!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jtimon": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12142", "title": "RPC: savemempool: Don't write mempool.dat while not having the previous one in memory", "body": "Currently it is possible to stupidly lose mempool data by calling the rpc \"savemempool\" before the previous stored mempool has been read and processed to the memory mempool.\r\n\r\nI haven't looked at the code yet, but at minimum one ugly solution would be to have a global g_is_mempool_read_finished (or something of the short) that starts false and gets sets to true once the reading is reading processing of mempool.dat is successfully finished. The rpc savemempool checks this global on the start and returns a an error while it remains false.\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12172", "title": "Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished", "body": "Fixes https://github.com/bitcoin/bitcoin/issues/12142\r\n\r\nThe tests are a little bit slow, mempool_persist.py goes from about 20 s to about 120 s in my hardware.\r\nPerhaps there's a better way to test this.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12128", "title": "Refactor: One CBaseChainParams should be enough", "body": "There's no need for class hierarchy with CBaseChainParams, it is just a struct with 2 fields.\r\nThis starts as a +10-43 diff\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11869", "title": " QA: segwit.py: s/find_unspent/find_spendable_utxo/", "body": "Separated from #8994 \r\nIt was found out testing that PR but I think this fix should be done even without #8994 the fix is not necessary by luck. Unless I'm missing something.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11426", "title": "BIP90: Make buried deployments slightly more easily extensible", "body": "Also make it more similar to BIP9's implementation.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757", "title": "RPC: Introduce getblockstats to plot things", "body": "It returns per block statistics about several things. It should be easy to add more if people think of other things to add or remove some if I went too far (but once written, why not keep it?).\r\n\r\nThe currently available options are: minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\r\n\r\nFor the x axis, one can use height or block.nTime (I guess I could add mediantime if there's interest).\r\n\r\nTo calculate fees, -txindex is required.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10669", "title": "Pow: Introduce MaybeGenerateProof", "body": "This simplifies generateBlocks and further encapsulates the use of nNonce and nBits inside pow.o by introducing a new function MaybeGenerateProof.\r\n\r\nThis should be helpful for any attempt to support a testnet with signed blocks (see #9177 )", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9608", "title": "Net: Divide ProcessMessage in smaller functions", "body": "As in #9579, indentation and further documentation can be done later to avoid further disruption on the same PR. Maybe at different times for different groups of functions.\r\nThe main goal of this PR ProcessMessage to make it more readable and maintainable (ie, changes to ProcessMessage should in principle be easier to review after this PR). Brings ProcessMessage to 142 lines.\r\n\r\nThis should be relatively easy to review.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8994", "title": "Testchains: Introduce custom chain whose constructor... ", "body": "...reads from runtime params and simplify the creation of partitioned chains by simply generating different gensis block hashes from a given custom name.\r\nDatadir now depends on -chain except for the reserved values.\r\n\r\nTODO:\r\n\r\n- [x] FAIL: conf_args.py\r\n- [ ] FAIL: wallet-dump.py \r\n\r\nDependencies:\r\n\r\n- [x] Use a proper factory for creating chainparams #8855\r\n~~- [ ] Really don't validate genesis block #9102~~\r\n- [x] Introduce an ArgsManager class encapsulating cs_args, mapArgs and mapMultiArgs #9494\r\n- [ ] QA: segwit.py: s/find_unspent/find_spendable_utxo/ #11869\r\n- [ ] Refactor: One CBaseChainParams should be enough #12128\r\n\r\n Other features:\r\n- [x] Uses a custom chain for all python tests.\r\n- [X] Create new testchains with different genesis hashes at will.\r\n- [X] Load chainparams from ~~separated~~ file or command line. (file left for later, see https://github.com/jtimon/bitcoin/tree/b16-new-testnet-file )\r\n- [X] New chains are neither orange, blue nor green: they're purple and have your custom chain petname shown in the GUI.\r\n- Extra context: some people asked for signed blocks but that's way more disruptive and this is already review-thirsty (see #9177 ).\r\n  ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nopara73": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12129", "title": "Implement Confidential Transactions/Bulletproofs", "body": "  Following up on the issue: [Improve transaction privacy / fungibility in Bitcoin Core and the Bitcoin system](https://github.com/bitcoin/bitcoin/issues/6568), this issue may serve as feature request, meta tracking and consensus builder thread on Confidential Transactions/[Bulletproofs](https://eprint.iacr.org/2017/1066.pdf).\r\n\r\n  [Privacy](https://en.wikipedia.org/wiki/Privacy) is a fundamental human right and [fungibility](https://en.wikipedia.org/wiki/Fungibility) is an essential property of good money. Our lack of ability of masking transaction output amounts is the [root of all evil](https://github.com/nopara73/ZeroLink/#transactions-and-transaction-chains) in every Bitcoin privacy scheme, where Confidential Transactions/Bulletproofs tackles this issue.  \r\n\r\n  While the development and research on Confidential Transactions [may or may not be](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-December/015346.html) in early stages, it is not too early to explore how much support and opposition the development community has on this [soft fork](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012194.html).", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "donaloconnor": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12123", "title": "[Performance] LevelDB options.max_open_files = 64 parameter (Windows 10)", "body": "### Observations\r\n\r\nBitcoind startup performance (Fully synced node)\r\n\r\nWhile running procmon when starting bitcoind.exe I noticed millions of file open/read/close events to the chainstate leveldb dir. The high frequency file open/close events occurred during this: (init.cpp)\r\n\r\n`    if (!ActivateBestChain(state, chainparams)) ..`\r\n\r\nInvestigating this further led me to level DB's LRUCache. We use a value of 64 for max_open_files:\r\n\r\n`options.max_open_files = 64;` in `static leveldb::Options GetOptions(size_t nCacheSize)`\r\n\r\nAs far as I know and read online the default for LevelDB is **1000**.\r\n\r\nI've noticed some (I consider significant) performance improvements by increasing the max_open_files var to the default 1000. This avoids the overhead of many thousand (per second) open/close operations on the files in the chainstate dir. This also avoids the unnecessary high frequency allocations created each time on the heap (LevelDB's Win32RandomAccessFile objects).\r\n\r\nI am not a levelDB expert but from what I can gather this value needs to not exceed the maximum number of file handles that the process can have but 64 seems a bit on the low side.\r\n\r\n### Results\r\nHere are some of my results while doing 5 iterations of max_open_files = 64 and 1000. The timings are timing the `ActivateBestChain` function call (Using high resolution timer).\r\n\r\n![image](https://user-images.githubusercontent.com/6394033/34693985-689717b6-f4bd-11e7-87bc-873048ee2024.png)\r\n\r\n\r\n### Questions:\r\n\r\n1) Why did we chose 64 as the fixed global value of max_open_files?\r\n2) Should we expose the max_open_files via a command line option or should we be smarter with this value since it has performance benefits (Perhaps even with initial chain sync?)\r\n\r\nMy system:\r\nDell XPS 17 9560 i7-7700HQ CPU @ 2.8 GHz, 2801 Mhz, 4 Cores. 16GB Ram, 512GB PCIe SSD, Windows 10\r\n\r\nRelease build (MSVC optimizations on /O2)\r\n\r\nIt would be interesting if someone can try some tests on a Linux machine. It could be related to some overhead with Windows' CreateFile while opening the files.\r\n\r\nIf it's accepted that this is a performance bottle neck then I am happy to propose a solution or do more research on this parameter. At the minimum expose it as a setting or command line option.\r\n\r\nThanks,\r\nDonal", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12108", "title": "[Refactor] Remove unused fQuit var from checkqueue.h", "body": "As per PR title, this var is no longer required\r\n\r\nTested by doing a successful compile.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AdvancedStyle": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12115", "title": "RemovePrunedFunds / ImportPrunedFunds with multiple wallet outputs", "body": "**Case:**\r\n\r\nYou have a transaction which has multiple outputs to different addresses in your own wallet (let's say 2 for example).  One of the output has already been spent, and the other is unspent.\r\n\r\nThe problem is that if you import this transaction into your wallet using ImportPrunedFunds it will add both the unspent and spent amounts to your listunspent.\r\n\r\nAnd if you use RemovePrunedFunds it will remove both the unspent and spent amounts.\r\n\r\n**Suggested Handling**\r\n\r\nRemovePrunedFunds / ImportPrunedFunds should accept an additional optional vout parameter, so that you can specify exactly which vout you want to add or remove as a UTXO\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11961", "title": "Node dropping it's own transactions", "body": "Version: 0.15.1 built from source\r\nOS: Debian Jessie\r\n\r\nIssue:\r\nSent a transaction with low fee, and it was stuck in the mempool, after about 4 days and large increase in fees, the node appears to have dropped the transaction out of the listunspent....however it does not add back the original UTXOs to the listunspent...so basically the bitcoins just disappear.  And only way regain visibility is to rescan (pain on pruned node)\r\n\r\nExpected behavior:\r\nNode should either list the original UTXOs and drop the unconfirmed transaction\r\nOr node should remember the new unconfirmed transaction and not drop it\r\n\r\nCertainly the bitcoins shouldn't just disappear from the listunspent...", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jameshilliard": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12091", "title": "Spectre attack mitigation", "body": "It appears the recently disclosed [Spectre attack](https://spectreattack.com/) will require binaries to be recompiled with [mitigations](http://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20180101/513630.html) in place. Do we know yet what the implications are for Bitcoin Core? Will we just need to recompile release binaries with a compiler that supports the mitigations?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9858", "title": "remove TestBlockValidity from CreateNewBlock critical path", "body": "Rational for removal:\r\n\r\n- This is effectively a fatal error to miners regardless, there is no meaningful downside to removing this because getting an invalid template is not practically any worse than getting no template.\r\n\r\n- Due to cs_main locks this causes a large variance in GBT response times and further encourages undesirable workarounds such as validationless mining.\r\n\r\n- Invalid blocks are much more likely to originate from stratum server bugs, something like [this](https://github.com/bitcoin/bitcoin/pull/9000) is probably a better way to test block validity.\r\n\r\nI've been running with this TestBlockValidity call removed in production for a few months at this point.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "achow101": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12084", "title": "`hdMasterKey` and hd`MasterKeyId` do not actually refer to the BIP 32 Master Key", "body": "The actual BIP 32 master key in a wallet (the key which every key is derived from) is not actually the same key that is reported as being the BIP 32 master key by basically everything in the wallet that reports it.\r\n\r\nInstead the key that is reported as being the BIP 32 master key is actually the seed. This seed is hashed according to the BIP 32 specification to become the BIP 32 master key which everything else is then derived from.\r\n\r\nA number of things are wrongly reported and named because of this:\r\n* `hdmasterkeyid` in `validateaddress` and `getwalletinfo`\r\n* The key marked as `hdmaster` with keypath `m` in the `dumpwallet` output\r\n* The extended private masterkey in `dumpwallet` output is the actual master private key and has a different id than `hdmasterkeyid` used elsewhere\r\n* Almost all uses of `masterkey` and `masterkeyid` in the wallet code refer to the seed rather than the actual masterkey.\r\n\r\nWhile this discrepancy does not currently affect usage, it could in the future with possible master key importing or seed importing. With the way that things are currently named, it would be confusing as to whether an import worked properly.\r\n\r\n***\r\n\r\nI found this while implementing BIP 174 and it totally derailed me for 3 hours since it needs the actual master key id", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/134cdc7cee3da7c554e40ad947a9cdcbb3069f13", "message": "Test walletpassphrase timeout bounds and clamping"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b63e3c7b20ea54930de3ec3955406e4d4737e3c", "message": "Clamp walletpassphrase timeout to 2^(30) seconds and check its bounds\n\nClamps the timeout of walletpassphrase to 2^(30) seconds, which is\n~34 years. Any number greater than that will be forced to be\n2^(30). This avoids the sign flipping problem with large values which\ncan result in a negative time used.\n\nAlso perform bounds checks to ensure that the timeout is positive\nto avoid immediate relocking of the wallet."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4d0af4fe1383cf401f8b9cb674845bd083e3234", "message": "Loop through the bip9 soft fork deployments instead of hard coding"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12180", "title": "scripted-diff: change kB to kvB, kilobyte to kilovbyte for transaction fee rate things", "body": "Renames kB and kilobyte to kvB and kilovbyte respectively in order to make clear the fee rates are in virtual bytes rather than actual bytes.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12136", "title": "Implement BIP 174 Partially Signed Bitcoin Transactions", "body": "[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) specifies a binary transaction format which contains the information necessary for a signer to produce signatures for the transaction and holds the signatures for an input while the input does not have a complete set of signatures.\r\n\r\n***\r\n\r\nBIP 174 is fully implemented in this pull request. It contains a struct for the a PSBT, serialization and deserialization functions, and a PSBT specific versions of `ProduceSignature` (`SignPartialTransaction`), `SignStep`(`SignSigsOnly`) and `CombineSignatures`(FinalizePartialTransaction`).\r\n\r\nCurrently PSBT functionality is limited to 4 new RPC calls, `walletupdatepsbt`, `walletcreatepsbt`, `combinepsbt`, and `decodepsbt`.\r\n\r\n`walletupdatepsbt` updates a given PSBT with data from the wallet. For each input, it will attempt to add the proper UTXO, sign for the input, and finalize the input. It will also add any known redeem scripts, witness scripts, and public key derivation paths if they are known to the wallet.\r\n\r\n`walletcreatepsbt` takes a network serialized raw transaction as produced by the `*rawtransaction` commands and converts it to a PSBT. Inputs are filled using information known to the wallet.\r\n\r\n`combinepsbt` combines multiple PSBTs and finalizes them if possible.\r\n\r\n`decodepsbt` decodes a PSBT and into a human readable format in order to more easily examine them. It is analogous to `decoderawtransaction`.\r\n\r\n***\r\n\r\nAll of the test vectors currently in BIP 174 are also implemented.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12024", "title": "Remove most recent transaction timestamp stuff from nTimeSmart", "body": "This will show accurate and correct timestamps for transactions. Order in `listtransactions` is still maintained because that ordering is done separately from the timestamps.\r\n\r\nFixes #11703 and #6662", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11678", "title": "[wallet] Don't shut down after encrypting the wallet", "body": "Instead of shutting down the entire software after encrypting a wallet, instead just stop and close all of the wallets and then reopen them. This will flush the wallets, clear them from memory, and then reopen them to ensure that no unencrypted keys remain after encrypting.\r\n\r\nThis is marked as WIP because there are a few bugs that I am still trying to figure out.  ~~~is a locking bug that I'm still trying to figure out. After encrypting a wallet from the GUI, the GUI freezes. This appears to be a lock contention issue with `cs_KeyStore` at wallet/crypter.cpp:160. However I can't figure out why this is happening.~~~", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11497", "title": "Hide accounts system behind deprecation switch", "body": "Deprecate all accounts functionality and make it only accessible by using `-deprecatedrpc=accounts`.\r\n\r\nAccounts specific RPCs, account arguments, and account related results all require the `-deprecatedrpc=acocunts` startup option now in order to see account things.\r\n\r\nA couple of the tests use the accounts system for labeling things, so instead of changing those, I left them as is and set the tests to start the nodes with `-deprecatedrpc=accounts`. That switch can be removed as those RPCs are replaced with a labels system.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11415", "title": "[RPC] Disallow using addresses in createmultisig", "body": "This PR should be the last part of #7965.\r\n\r\nThis PR makes createmultisig only accept public keys and marks the old functionality of accepting addresses as deprecated.\r\n\r\nIt also splits `_createmultisig_redeemscript` into two functions, `_createmultisig_getpubkeys` and `_createmultisig_getaddr_pubkeys`. `_createmultisig_getpubkeys` retrieves public keys from the RPC parameters and `_createmultisig_getaddr_pubkeys` retrieves addresses' public keys from the wallet. `_createmultisig_getaddr_pubkeys` requires the wallet and is only used by `addwitnessaddress` (except when `createmultisig` is used in deprecated mode).\r\n\r\n`addwitnessaddress`'s API is also changed. Instead of returning just an address, it now returns the same thing as `createmultisig`: a JSON object with two fields, address and redeemscript.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11200", "title": "Allow for aborting rescans and canceling showProgress dialogs", "body": "This PR adds to the `ShowProgress` signal and its related `showProgress` dialogs a `std::function` parameter for a function that can be used to do some action when canceling a `showProgress` dialog.\r\n\r\nA button is now added to the `showProgress` dialogs for canceling if a valid target is contained in the cancel function parameter.\r\n\r\nRescans triggered from the debug console will now be cancelable by clicking the cancel button.\r\n\r\nRescans triggered by a command (e.g. `importmulti`) will now give an error indicating that the rescan was aborted by the user (either by the `abortrescan` command or by clicking cancel).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637", "title": "Coin Selection with Murch's algorithm", "body": "This is an implementation of the [Branch and Bound coin selection algorithm written by Murch](http://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf) (@xekyo). I have it set so this algorithm will run first and if it fails, it will fall back to the current coin selection algorithm. The coin selection algorithms and tests have been refactored to separate files instead of having them all in wallet.cpp.\r\n\r\nI have added some tests for the new algorithm and a test for all of coin selection in general. However, more tests may be needed, but I will need help with coming up with more test cases.\r\n\r\nThis PR uses some code borrowed from #10360 to use effective values when selecting coins.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10583", "title": "[RPC] Split part of validateaddress into getaddressinfo", "body": "This PR makes a new RPC command called `getaddressinfo` which relies on the wallet. It contains all of `validateaddress`'s address info stuff. Those parts in `validateaddress` have been marked as deprecated. The tests have been updated to use `getaddressinfo` except the `disablewallet` test which is the only test that actually uses `validateaddress` to validate an address.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579", "title": "[RPC] Split signrawtransaction into wallet and non-wallet RPC command", "body": "This PR is part of #10570. It also builds on top of #10571.\r\n\r\nThis PR splits `signrawtransaction` into two commands, `signrawtransactionwithkey` and `signrawtransactionwithwallet`. `signrawtransactionwithkey` requires private keys to be passed in and does not use the wallet for any signing. `signrawtransactionwithwallet` uses the wallet to sign a raw transaction and does not have any parameters to take private keys.\r\n\r\nThe `signrawtransaction` RPC has been marked as deprecated and will call the appropriate RPC command based upon the parameters given. A test was added to check this behavior is still consistent with the original behavior.\r\n\r\nAll tests that used `signrawtransaction` have been updated to use one of the two new RPCs. Most uses were changed to `signrawtransactionwithwallet`. These were changed via a scripted diff.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10563", "title": "Remove safe mode", "body": "Rationale:\r\n\r\nSafe mode is useless. It only disables some RPC commands when large work forks are detected. Nothing else is affected by safe mode. It seems that very few people would be affected by safe mode. The people who use Core as a wallet are primarily using it through the GUI, which safe mode does not effect. In the GUI, transactions will still be made as normal; only a warning is displayed. \r\n\r\nI also don't think that we should be disabling RPC commands or any functionality in general. If we do, it should be done consistently, which safe mode is not. If we want to keep the idea of a safe mode around, I think that the current system needs to go first before a new system can be implemented.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10519", "title": "[RPC] Remove waitforblock and waitfornewblock", "body": "Removed because these RPCs are for tests only and are now unused", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9504", "title": "[RPC] dumpmasterprivkey command", "body": "RPC command to export the master private key from a wallet.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121546379", "body": "done", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121546379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "malenchelon": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12066", "title": "Restore Bitcore Transactions", "body": "Foolishly ran bitcoind -zapwallettxes which swiped away all my bitcore transactions i.e send and receive. Even after rescan and reindex didn't gave me luck . is there a way to get back all the transactions happened in my bitcore??", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ZeroGraviti": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12049", "title": "Unable to compile 0.15 on Cygwin", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\n_Issue Description:_ Unable to compile and build bitcoin 0.15\r\n\r\n<!--- What behavior did you expect? -->\r\n_Expected behavior_: Successful build :)\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n_Actual Behavior:_ Build breaks -> ~~https://pastebin.com/GYZtKBNC~~\r\nUpdate #1: https://pastebin.com/9Svrbn8g\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\n_Triage/Reproduce the issue:_ https://pastebin.com/UcWnt8dc\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n_Version of bittcoin core:_ 0.15 (downloaded from github)\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\n_Type of machine on which issue occured:_\r\n`$ uname -a\r\nCYGWIN_NT-6.1-WOW pluto 2.9.0(0.318/5/3) 2017-09-12 10:41 i686 Cygwin`\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n**_Extra information/updates_**\r\nSO question I have created on this -> https://stackoverflow.com/questions/48008080/c-compilation-stuck-with-boost-interprocess-lib-error-ftruncate-has-not/48008425?noredirect=1#comment83027051_48008425\r\n\r\nLatest config.log -> https://pastebin.com/1q4hzeqD\r\nLatest error console output -> https://pastebin.com/9Svrbn8g", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CryptAxe": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12047", "title": "Segmentation fault if configured with incompatible BDB", "body": "Hello, after updating my nodes with Master they will no longer start (segfault). Duplicating this issue requires building --with-incompatible-bdb so I don't think it is super important. Regardless, Here is the segfault:\r\n```\r\nSegmentation fault (core dumped)\r\nuser@computer:~/bitcoin$ valgrind ./src/qt/bitcoin-qt \r\n...\r\n==32418== \r\n==32418== \r\n==32418== Process terminating with default action of signal 11 (SIGSEGV)\r\n==32418==  Access not within mapped region at address 0x0\r\n==32418==    at 0x4C30D22: strlen (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32418==    by 0x76C3331: __os_strdup (in /usr/lib/libdb_cxx-4.8.so)\r\n==32418==    by 0x76959C3: __env_add_data_dir (in /usr/lib/libdb_cxx-4.8.so)\r\n==32418==    by 0x7695A90: __env_set_data_dir (in /usr/lib/libdb_cxx-4.8.so)\r\n==32418==    by 0x75B0B58: DbEnv::set_data_dir(char const*) (in /usr/lib/libdb_cxx-4.8.so)\r\n==32418==    by 0x51C1B7: CDBEnv::Open(boost::filesystem::path const&) (db.cpp:116)\r\n==32418==    by 0x51ED80: CDB::VerifyEnvironment(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::filesystem::path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (db.cpp:272)\r\n==32418==    by 0x49FBB0: VerifyWallets() (init.cpp:230)\r\n==32418==    by 0x2BFA95: AppInitMain(boost::thread_group&, CScheduler&) (init.cpp:1266)\r\n==32418==    by 0x187096: BitcoinCore::initialize() (bitcoin.cpp:303)\r\n==32418==    by 0x6AD6698: QObject::event(QEvent*) (in /usr/lib/x86_64-linux-gnu/libQt5Core.so.5.6.1)\r\n==32418==    by 0x5CE08AB: QApplicationPrivate::notify_helper(QObject*, QEvent*) (in /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5.6.1)\r\n==32418==  If you believe this happened as a result of a stack\r\n==32418==  overflow in your program's main thread (unlikely but\r\n==32418==  possible), you can try to increase the size of the\r\n==32418==  main thread stack using the --main-stacksize= flag.\r\n==32418==  The main thread stack size used in this run was 8388608.\r\n==32418== \r\n==32418== HEAP SUMMARY:\r\n==32418==     in use at exit: 47,372,704 bytes in 44,499 blocks\r\n==32418==   total heap usage: 137,047 allocs, 92,548 frees, 77,215,464 bytes allocated\r\n==32418== \r\n==32418== LEAK SUMMARY:\r\n==32418==    definitely lost: 2,893 bytes in 6 blocks\r\n==32418==    indirectly lost: 14,328 bytes in 610 blocks\r\n==32418==      possibly lost: 16,868 bytes in 212 blocks\r\n==32418==    still reachable: 47,050,655 bytes in 42,427 blocks\r\n==32418==                       of which reachable via heuristic:\r\n==32418==                         length64           : 6,848 bytes in 77 blocks\r\n==32418==                         newarray           : 3,552 bytes in 40 blocks\r\n==32418==                         multipleinheritance: 1,864 bytes in 4 blocks\r\n==32418==         suppressed: 0 bytes in 0 blocks\r\n==32418== Rerun with --leak-check=full to see details of leaked memory\r\n==32418== \r\n==32418== For counts of detected and suppressed errors, rerun with: -v\r\n==32418== Use --track-origins=yes to see where uninitialised values come from\r\n==32418== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)\r\nKilled\r\n```\r\n\r\nThe segfault occurs during startup, the splash screen pops up for a second (if launching the GUI). To replicate, simply build from master (configured with incompatible bdb) and try to launch bitcoin-qt. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dexX7": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12033", "title": "Raise default datacarriersize to 220 byte or higher", "body": "To disincentivize the use of other and more harmful methods to embed data into the chain, in particular via P2SH, the default datacarriersize should be raised from 82 byte to 220 byte, so it becomes the \"cheapest\" way of embedding data into the chain.\r\n\r\nThe following graph shows the relation between transaction sizes and payload sizes:\r\n\r\n![](http://i.imgur.com/VAGZWBK.png)\r\n\r\nEmbedding data with bare-multisig and P2SH can be cheaper in terms of effective transaction size, compared to OP_RETURN with a payload limit of 80 byte. Both methods of embedding data, via bare-multisig and P2SH, were heavily used by the major two meta-protocols on top of Bitcoin: Omni and Counterparty (see [here](https://github.com/OmniLayer/spec#class-b-transactions-also-known-as-the-multisig-method) and [here](https://github.com/CounterpartyXCP/cips/blob/master/cip-0006.md)), but both protocols started to use OP_RETRUN data embedding for a long time.\r\n\r\nHowever, currently token sends are done one by one, each with a single transaction, and this is a heavy burden for the whole network, e.g. when an exchange sends out withdrawals.\r\n\r\nWe have solutions for \"multi-sends with multi-inputs\" and considered moving destinations into the payload for token sends, but we need more space, otherwise this solution is limited to very few recipients.\r\n\r\nI therefore propose to raise the default datacarriersize to 220 byte or higher and I'd be happy to provide a pull request doing so, if this gets positive feedback. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244", "body": "I'm very open to removing it (or other parts), but the precedence was basically the ignore of the Qt Creator project files.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41850244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779", "body": "I'm currently not at home, but later I can edit and remove the lines. But just for my understanding: isn't it pretty common to ignore project/editor specific files via the `.gitignore`?\n\nAs for the change:\n\n``` diff\n- # Qt creator\n- *.pro.user\n- \n- # NetBeans\n- nbproject/\n- \n```\n\nAnything else?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42734779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42938179", "body": "I removed the entry for Netbeans.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42938179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "steevithak": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12031", "title": "GUI not scaling correctly on hi-res / 4k screens", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nWhen running bitcoin-core on a computer with a high resolution 4k screen, the app opens in a very, very tiny window (about the size of a postage stamp). I'm running on Redhat Fedora GNU/Linux v27. All my other programs including web browsers and native GNOME apps scale properly based on the screen resolution but bitcoin-core does not, so it appears there's a scaling bug of some sort in bitcoin-core's GUI code rather than something wrong with my desktop (but I could be wrong - I'm happy to investigate further if you think this is a problem on my end). \r\n\r\n<!--- What behavior did you expect? -->\r\nThe app is tiny and very difficult to read without a magnifying glass. Dialogs with entry fields are too small to contain the text that needs to be entered in them. Some dialogs are too small to contain any visible text. Dragging the window bigger unwraps tangled text but the fonts remain microscopically tiny and hard to see.\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\nGUI window is too small to easily use. I'll attach a screenshot if I can figure out how.\r\n\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nInstall bitcoin-core on typical laptop or desktop with 4k screen, start it.\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nv0.15.1.0-g7b5bc998f3 (64-bit) from ringingliberty.com repo\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nDell XPS 15 9650, Intel Core i7, 4k screen running Redhat Fedora GNU/Linux v27\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\nIn some cases, dragging the windows bigger helps by exposing text which is hidden due to wrapping or going off screen but I don't see any obvious way to scale everything up to human readable size and, in some cases, lines of text overlap each other even if I drag the window bigger.\r\n\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "woeisme": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12030", "title": "rewinding blocks dialogue stays with no progress indicator or further information after hours", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nBitcoin-qt is stuck at rewinding blocks gui\r\n\r\n<!--- What behavior did you expect? -->\r\nprogress after a few hours (ran overnight)\r\nNo relevant info in debug.log except that progress number seems to be increasing vs decreasing\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\nnever fully loaded gui or stopped rewinding blocks dialogue\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nstart bitcoin-qt either from cli or ubuntu dialogue\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n15.0.1 \r\nubuntu launchpad ppa from matt corallo\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nacer ao722 AMD C-60 with 2Gb ram\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "janstary": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12017", "title": "./configure prefers 'g++' to 'c++'", "body": "This is the current git on OpenBSD current/amd64.\r\nThat's a system with clang 5.0.0 as the system compiler.\r\nIn fact,  'c++' is 'clang++':\r\n\r\n```\r\n$ ls -li /usr/bin/c++ /usr/bin/clang++\r\n32869 -r-xr-xr-x  6 root  bin  42331608 Dec 18 18:55 /usr/bin/c++\r\n32869 -r-xr-xr-x  6 root  bin  42331608 Dec 18 18:55 /usr/bin/clang++\r\n```\r\n\r\nIt also has the old GCC 4.2.1 (which used to be the system compiler)\r\ninstalled as `gcc` and `g++`. It seems that `./configure` prefers the name `g++`\r\nbefore `c++`, and `gcc` before `cc` (which might be yet another of its gnuisms).\r\nThat's why `./configure` fails here with\r\n\r\n```\r\nchecking whether g++ supports C++11 features with -h std=c++11... no\r\nconfigure: error: *** A compiler with support for C++11 language features is required.\r\n```\r\n\r\nbut `./configure CC=cc CXX=c++` succeeds.\r\n\r\nI find it strange that I have to explicitly specify `CC=cc` and `CXX=c++`.\r\nShouldn't that be the default, as opposed to `gcc` and `g++`?\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12023", "title": "update the OpenBSD build guide", "body": "This updates the instructions to OpenBSD-current\r\nand slightly tweaks the db48 helper script.\r\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11987", "title": "Docs: tweak the OSX build instructions", "body": "This is a revision of doc/build-osx.md, tested on 10.13.2\r\n\r\n* Don't dictate Homebrew, mention also MacPorts and Fink\r\n* Drop a link to a nonexistent section\r\n* Mention `./configre --prefix`,  `--disable-wallet` and  `--without-gui`\r\n* Include `make install`\r\n* Fix the `bitcoin.conf` instructions (the directory doesn't exist yet)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Leon-Zhang": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12014", "title": "How to  build wallet app with QT creator on MACOSX", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\nI have followed the build-osx.md, build the project with QT creator, but it only generated bitcoind executable file, which is a command line application without any GUI.\r\nI've been use previous version of bitcoin repository, it has .pro file that could be opened directly by QT creator, and build to a \".app\" application which is wallet application with GUI.\r\n<!--- What behavior did you expect? -->\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nI'm using most recent bitcoin repository.\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nMACOSX high Sierra, QT creator 4.5.0\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "philippgille": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12011", "title": "bitcoind writes files to current working dir instead of default data dir when access to other data dir in bitcoin.conf is not permitted", "body": "## Description\r\n\r\nI compiled bitcoin from source (tag v0.15.1), created a `bitcoin.conf` in `/home/myuser/.bitcoin` and in the configuration file I unintentionally configured a `datadir` directory didn't exist and whose parent directory ownership was set to `root:root` because I previously had to mount it with `sudo`.\r\n\r\nWhen running `bitcoind -printtoconsole` an error message was shown similar to https://github.com/bitcoin/bitcoin/issues/11825, basically saying that bitcoind didn't have permissions for the configured directory.\r\n\r\nNow instead of writing the files (`blocks` and `chainstate` directories, as well as the files `db.log`, `debug.log`, `fee_estimates.dat`, `.lock` and `wallet.dat`) to the default data directory (`/home/myuser/.bitcoin`), the files were written to the current working directory.\r\n\r\nI'd expect the files to be written to the default datadir if the configured datadir doesn't have the correct permissions.\r\n\r\n## Further info\r\n\r\n`bitcoin.conf`:\r\n\r\n```\r\nrpcuser=<redacted>\r\nrpcpassword=<redacted>\r\ndatadir=/mnt/path/to/bitcoin\r\ntxindex=1\r\n```\r\n\r\nOutput when running `bitcoind -printtoconsole` while the configured datadir has the wrong permissions (the many newlines are part of the actual output):\r\n\r\n```\r\nmyuser@myhost:~/some/path$ bitcoind -printtoconsole\r\n2017-12-24 18:05:29\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n2017-12-24 18:05:29 Bitcoin version v0.15.1\r\n2017-12-24 18:05:29 InitParameterInteraction: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\r\n2017-12-24 18:05:29 Assuming ancestors of block 0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a have valid signatures.\r\n2017-12-24 18:05:29 Setting nMinimumChainWork=000000000000000000000000000000000000000000723d3581fe1bd55373540a\r\n2017-12-24 18:05:29 Using the 'standard' SHA256 implementation\r\n2017-12-24 18:05:29 Using RdRand as an additional entropy source\r\n2017-12-24 18:05:29 Default data directory /home/myuser/.bitcoin\r\n2017-12-24 18:05:29 Using data directory\r\n2017-12-24 18:05:29 Using config file bitcoin.conf\r\n2017-12-24 18:05:29 Using at most 125 automatic connections (1024 file descriptors available)\r\n2017-12-24 18:05:29 Using 16 MiB out of 32/2 requested for signature cache, able to store 524288 elements\r\n2017-12-24 18:05:29 Using 16 MiB out of 32/2 requested for script execution cache, able to store 524288 elements\r\n2017-12-24 18:05:29 Using 4 threads for script verification\r\n2017-12-24 18:05:29 scheduler thread start\r\n2017-12-24 18:05:29 HTTP: creating work queue of depth 16\r\n2017-12-24 18:05:29 Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcuser for rpcauth auth generation.\r\n2017-12-24 18:05:29 HTTP: starting 4 worker threads\r\n2017-12-24 18:05:29 init message: Verifying wallet(s)...\r\n2017-12-24 18:05:29 Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\r\n2017-12-24 18:05:29 Using wallet wallet.dat\r\n2017-12-24 18:05:29 CDBEnv::Open: LogDir=database ErrorFile=db.log\r\n2017-12-24 18:05:29 Cache configuration:\r\n2017-12-24 18:05:29 * Using 56.2MiB for block index database\r\n2017-12-24 18:05:29 * Using 8.0MiB for chain state database\r\n2017-12-24 18:05:29 * Using 385.8MiB for in-memory UTXO set (plus up to 286.1MiB of unused mempool space)\r\n2017-12-24 18:05:29 init message: Loading block index...\r\n2017-12-24 18:05:29 Opening LevelDB in blocks/index\r\n2017-12-24 18:05:29 Opened LevelDB successfully\r\n2017-12-24 18:05:29 Using obfuscation key for blocks/index: 0000000000000000\r\n2017-12-24 18:05:29 LoadBlockIndexDB: last block file = 0\r\n2017-12-24 18:05:29 LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=0, size=0, heights=0...0, time=1970-01-01...1970-01-01)\r\n2017-12-24 18:05:29 Checking all blk files are present...\r\n2017-12-24 18:05:29 LoadBlockIndexDB: transaction index enabled\r\n2017-12-24 18:05:29 Initializing databases...\r\n2017-12-24 18:05:29 Opening LevelDB in chainstate\r\n2017-12-24 18:05:29 Opened LevelDB successfully\r\n2017-12-24 18:05:29 Using obfuscation key for chainstate: <redacted>\r\n2017-12-24 18:05:29 init message: Rewinding blocks...\r\n2017-12-24 18:05:29  block index               9ms\r\n2017-12-24 18:05:29 init message: Loading wallet...\r\n2017-12-24 18:05:29 nFileVersion = 150100\r\n2017-12-24 18:05:29 Keys: 2002 plaintext, 0 encrypted, 2002 w/ metadata, 2002 total\r\n2017-12-24 18:05:29  wallet                   58ms\r\n2017-12-24 18:05:29 setKeyPool.size() = 2000\r\n2017-12-24 18:05:29 mapWallet.size() = 0\r\n2017-12-24 18:05:29 mapAddressBook.size() = 1\r\n2017-12-24 18:05:29\r\n\r\n************************\r\nEXCEPTION: N5boost10filesystem16filesystem_errorE\r\nboost::filesystem::space: Operation not permitted\r\nbitcoin in AppInit()\r\n\r\n\r\n\r\n************************\r\nEXCEPTION: N5boost10filesystem16filesystem_errorE\r\nboost::filesystem::space: Operation not permitted\r\nbitcoin in AppInit()\r\n\r\n2017-12-24 18:05:29 scheduler thread interrupt\r\n2017-12-24 18:05:29 Shutdown: In progress...\r\n2017-12-24 18:05:29 *** System error while flushing: boost::filesystem::space: Operation not permitted\r\n2017-12-24 18:05:29 Error: Error: A fatal internal error occurred, see debug.log for details\r\nError: Error: A fatal internal error occurred, see debug.log for details\r\n2017-12-24 18:05:29 *** System error while flushing: boost::filesystem::space: Operation not permitted\r\n2017-12-24 18:05:29 Error: Error: A fatal internal error occurred, see debug.log for details\r\nError: Error: A fatal internal error occurred, see debug.log for details\r\n2017-12-24 18:05:29 Shutdown: done\r\n```", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "julien-lecomte": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11999", "title": "warn user if sending an input that costs more to send (fees) than value of input", "body": "It occurred to me that you can create a transaction where the number of bytes an input adds is valued at less than the fee cost it represents.\r\n\r\nLet's say the fees selected are 400 sat/byte, and you add an input with 1200 satoshis but it also adds 4 bytes to the transaction. If this case you should warn the user.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "khelle": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11992", "title": "settxfee strange behaviour", "body": "I don't understand how the `settxfee` works exactly. In documentation it is written that it sets the transaction fee per kB, but I dont' see this to be the case.\r\n\r\nI am using Bitcoin Core 0.15.1, a do the following steps:\r\n\r\n```\r\nbitcoin-cli settxfee 0.003 // returns true\r\nbitcoin-cli sendmany \"\" { ... } // I give few addresses here to transfer\r\n```\r\n\r\nThen the transaction shows on blockchain with following params:\r\nsize: 1109 bytes\r\nfee per Byte: 169.071 sat/B\r\n\r\nHow is it possible? Since I put 0.003 per kB I would expect the \"fee per Byte\" to be ~ 292 sat/B.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11973", "title": "Replace-by-fee via RPC", "body": "Is it possible to replace-by-fee existing transaction in mempool purely using RPC commands? If yes, then how?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amd5": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11982", "title": "Unable to compile and download zeromq v4.2.2", "body": "https://github.com/zeromq/libzmq/releases/download/v4.2.2/\r\n\r\nbitcoin Unable to compile and download\r\n\r\n-----------------------------------------------------------------------------------------------------\r\n===========================================================\r\nCaching libevent...\r\nFetching zeromq-4.2.2.tar.gz from https://github.com/zeromq/libzmq/releases/download/v4.2.2/\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100   607    0   607    0     0    527      0 --:--:--  0:00:01 --:--:--   527\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:12 --:--:--     0\r\nWarning: Transient problem: timeout Will retry in 1 seconds. 3 retries left.\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:10 --:--:--     0\r\nWarning: Transient problem: timeout Will retry in 2 seconds. 2 retries left.\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:10 --:--:--     0\r\nWarning: Transient problem: timeout Will retry in 4 seconds. 1 retries left.\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:10 --:--:--     0\r\ncurl: (28) Connection timed out after 10015 milliseconds\r\nFetching zeromq-4.2.2.tar.gz from https://bitcoincore.org/depends-sources\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0\r\ncurl: (22) The requested URL returned error: 404 Not Found\r\nmake: *** [/home/c32/bitcoin/depends/sources/download-stamps/.stamp_fetched-zeromq-zeromq-4.2.2.tar.gz.hash] \u9519\u8bef 22\r\nroot@c:/home/c32/bitcoin/depends# make HOST=i686-w64-mingw32\r\nChecksum missing or mismatched for zeromq source. Forcing re-download.\r\nFetching zeromq-4.2.2.tar.gz from https://github.com/zeromq/libzmq/releases/download/v4.2.2/\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100   607    0   607    0     0    598      0 --:--:--  0:00:01 --:--:--   599\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:12 --:--:--     0\r\nWarning: Transient problem: timeout Will retry in 1 seconds. 3 retries left.\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:10 --:--:--     0\r\nWarning: Transient problem: timeout Will retry in 2 seconds. 2 retries left.\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:10 --:--:--     0\r\nWarning: Transient problem: timeout Will retry in 4 seconds. 1 retries left.\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:10 --:--:--     0\r\ncurl: (28) Connection timed out after 10002 milliseconds\r\nFetching zeromq-4.2.2.tar.gz from https://bitcoincore.org/depends-sources\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0\r\ncurl: (22) The requested URL returned error: 404 Not Found\r\nmake: *** [/home/c32/bitcoin/depends/sources/download-stamps/.stamp_fetched-zeromq-zeromq-4.2.2.tar.gz.hash] \u9519\u8bef 22\r\nroot@c:/home/c32/bitcoin/depends# ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonasschnelli": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11964", "title": "Avoid \"test_runner.py\" script array", "body": "The current test runner script array tents to generate git conflicts.\r\nIdeally, test scripts would have some metadata while test runner will just read files from the (same?) directory.\r\n\r\nDiscussion on IRC: https://botbot.me/freenode/bitcoin-core-dev/2017-12-20/?msg=94891704&page=6", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11764", "title": "Dumpwallet exports xpriv (in a comment) (==hdmaster) but ignored in importwallet", "body": "Dumpwallet does export hd master keys and I don't see a reason why importwallet should not import that hdmasterkey \u2013 while not using it for new keys but deriving old ones after the HD rescan did detect new receives. Or a simplified implementation where we just generate a bunch of keys from that imported master-key (10'000?) and rescan back from the masters birthday (while using a new seed for security reasons).", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11764/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11477", "title": "[Qt] Tiny balance update bug after importprivkey", "body": "If you import a private key of an address you are already watching and without a rescan, the available balance does not upgrade correctly.\r\n\r\nSteps (regtest):\r\n1. `generate 101`\r\n2. `getnewaddress`, store somewhere\r\n3.  `sendtoaddress <addr-from-2> 10`\r\n4. `dumpprivkey <addr-from-2>`, store somewhere\r\n5. Stop node\r\n6. Remove wallet.dat\r\n7. Start node\r\n8. `importaddress <addr-from-2>` (== triggers rescan) watch only balance should list properly\r\n9. `importprivkey \"<WIF-key-from-4>\" \"test\" false` will lead to available balance of 0 (but should be 10)\r\n\r\nA restart solves the issue.\r\n\r\nBitcoind (listtransactions, getbalance, etc.) is not affected.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10d10d7fadcf5f937c8e782224c5f2b34462856b", "message": "Merge #12211: Avoid potential null dereference in ReceiveCoinsDialog constructor\n\ncc90a4f46 Avoid potential null dereference in ReceiveCoinsDialog constructor (Russell Yanofsky)\n\nPull request description:\n\n  Not a bug in practice because current `WalletModel::getDefaultAddressType()` implementation does not dereference its `this` pointer.\n\n  Encountered issue while rebasing #10244 after #11991 was merged.\n\nTree-SHA512: d76afc410d4a436ec62936196fdac1af89c221d8c0d6e73349024afe55bbf8820f843177a8fe8210aa8021d45a17a0ecd9b6f693381e3edb234d9897cece29d7"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/062c8b69f4ccae323d675685da8cbfcb7ccd0c55", "message": "Merge #11991: [qt] Receive: checkbox for bech32 address\n\n63ac8907c [qt] receive tab: bech32 address opt-in checkbox (Sjors Provoost)\n\nPull request description:\n\n  <img width=\"647\" alt=\"schermafbeelding 2018-01-12 om 18 34 48\" src=\"https://user-images.githubusercontent.com/10217/34887691-a6a796fe-f7c7-11e7-8b89-87ce07c61ce3.png\">\n\n  Checkbox does what you would expect. Press tab from the amount field to get there.\n\n  It's unchecked by default.\n\n  When launched with `-addresstype=bech32` it's checked by default. When launched with `-addresstype=legacy` it unchecked and disabled.\n\n  The change in `receivecoinsdialog.ui` is smaller than it looks, due to the way git handles XML diffs. I had to add a horizontal spacer to make it look decent, see https://github.com/bitcoin/bitcoin/issues/11950#issuecomment-352870909. This causes column numbers to change in the rest of the grid.\n\n  I recommend testing on at least one other OS than OSX to be on the safe side.\n\nTree-SHA512: ec4b733b796d9a94278a5d8040a69d9574ef50021e68f94f61f2da75d1bb57f39272cbc9f1f7d34f733a19640daf666a23844fcd132f83bfdaf327d9d1d6f105"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59f9e2aaf3fe73961cc02042f929b430fee59f9c", "message": "Use flexible font size for QRCode image address"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d889c036cd6f683116e6a27e404be2809d1deb76", "message": "Merge #11403: SegWit wallet support\n\nb224a47a1 Add address_types test (Pieter Wuille)\n7ee54fd7c Support downgrading after recovered keypool witness keys (Pieter Wuille)\n940a21932 SegWit wallet support (Pieter Wuille)\nf37c64e47 Implicitly know about P2WPKH redeemscripts (Pieter Wuille)\n57273f2b3 [test] Serialize CTransaction with witness by default (Pieter Wuille)\ncf2c0b6f5 Support P2WPKH and P2SH-P2WPKH in dumpprivkey (Pieter Wuille)\n37c03d3e0 Support P2WPKH addresses in create/addmultisig (Pieter Wuille)\n3eaa003c8 Extend validateaddress information for P2SH-embedded witness (Pieter Wuille)\n30a27dc5b Expose method to find key for a single-key destination (Pieter Wuille)\n985c79552 Improve witness destination types and use them more (Pieter Wuille)\ncbe197470 [refactor] GetAccount{PubKey,Address} -> GetAccountDestination (Pieter Wuille)\n0c8ea6380 Abstract out IsSolvable from Witnessifier (Pieter Wuille)\n\nPull request description:\n\n  This implements a minimum viable implementation of SegWit wallet support, based on top of #11389, and includes part of the functionality from #11089.\n\n  Two new configuration options are added:\n  * `-addresstype`, with options `legacy`, `p2sh`, and `bech32`. It controls what kind of addresses are produced by `getnewaddress`, `getaccountaddress`, and `createmultisigaddress`.\n  * `-changetype`, with the same options, and by default equal to `-addresstype`, that controls what kind of change is used.\n\n  All wallet private and public keys can be used for any type of address. Support for address types dependent on different derivation paths will need a major overhaul of how our internal detection of outputs work. I expect that that will happen for a next major version.\n\n  The above also applies to imported keys, as having a distinction there but not for normal operations is a disaster for testing, and probably for comprehension of users. This has some ugly effects, like needing to associate the provided label to `importprivkey` with each style address for the corresponding key.\n\n  To deal with witness outputs requiring a corresponding redeemscript in wallet, three approaches are used:\n  * All SegWit addresses created through `getnewaddress` or multisig RPCs explicitly get their redeemscripts added to the wallet file. This means that downgrading after creating a witness address will work, as long as the wallet file is up to date.\n  * All SegWit keys in the wallet get an _implicit_ redeemscript added, without it being written to the file. This means recovery of an old backup will work, as long as you use new software.\n  * All keypool keys that are seen used in transactions explicitly get their redeemscripts added to the wallet files. This means that downgrading after recovering from a backup that includes a witness address will work.\n\n  These approaches correspond to solutions 3a, 1a, and 5a respectively from https://gist.github.com/sipa/125cfa1615946d0c3f3eec2ad7f250a2. As argued there, there is no full solution for dealing with the case where you both downgrade and restore a backup, so that's also not implemented.\n\n  `dumpwallet`, `importwallet`, `importmulti`, `signmessage` and `verifymessage` don't work with SegWit addresses yet. They're remaining TODOs, for this PR or a follow-up. Because of that, several tests unexpectedly run with `-addresstype=legacy` for now.\n\nTree-SHA512: d425dbe517c0422061ab8dacdc3a6ae47da071450932ed992c79559d922dff7b2574a31a8c94feccd3761c1dffb6422c50055e6dca8e3cf94a169bc95e39e959"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0d626d10f78b9bafa28dd6930eee3794a34c162", "message": "Merge #12143: [Doc] Fix link for BIP-159 pull request\n\n91769d6e2 [Doc] Fix link for bip 159 pull request (azuchi)\n\nPull request description:\n\n  The link of the pull request for BIP-159 described in bips.md was a different link.\n\nTree-SHA512: 818ea29259ff84a55282df8b0c59fc4ccd3af08d124a104005ac48e67da4155a8b071b980b1d12c35af3f4a008ba77e5b4ee3242292f6c034cb0006b5532ce69"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56910285fa4a7a0f3b931e7613b9691cee9c13ff", "message": "Merge #12093: Fix incorrect Markdown link\n\n4aa64557b Fix incorrect Markdown link (practicalswift)\n\nPull request description:\n\n  Fix incorrect Markdown link.\n\nTree-SHA512: c6c4e4ddf215fdffa49aa55aed590656356bb7e898b2843a7a6c669eff9f401fe4772a9298893e9fe7f7bc5ea25f7dd87f792241c09e4cd83e7609633556a5bb"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeb6d5271de35c48e4a24698ebe2208506e377f8", "message": "Merge #12035: [qt] change \u00b5BTC to bits\n\nebcee1de2 bips: add bip176 (Bits Denomination) (William Casarin)\n275b2eeed [qt] change \u00b5BTC to bits (William Casarin)\n\nPull request description:\n\n  Now that we have bip176, change \"\u00b5BTC\" to the more colloquial \"bits\"\n\nTree-SHA512: eba5e5f89c392728a4f0a3bd81a9779a117b8d72a490390fd031d4e7cc56c2bfee0016aba7ef9535903e8cf2262ce46497283424e378906d0e3bf5b0d2d981c7"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1136f0cb449122e5591e29a7f71c1ec7dc0937b", "message": "Merge #12074: [qt] Optimizes boolean expression model && model->haveWatchOnly()\n\n6dda059bd [qt] Simplifies boolean expression model && model->haveWatchOnly() (251)\n\nPull request description:\n\n  This PR optimizes the boolean expression `model && model->haveWatchOnly()` to `model->haveWatchOnly()`.\n\n  The boolean expression can be optimized because the method `TransactionView::exportClicked` already guards against a potential dereferenced null pointer by returning early if `model` is null.\n  https://github.com/bitcoin/bitcoin/blob/63a4dc10876bfc61c2e87d35dcf17da2f0f8c316/src/qt/transactionview.cpp#L351-L353\n\nTree-SHA512: 8bdd0d05bf879745fa39d3ca7524471720ae08ceee9427d5a08776e7b56d18542ae87a6991cd6779e232305f504fdfc77223702b72ecbe231f5f5e98453456dd"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f68fd281eecf7e3110033aa3956b2b40ce99d1a", "message": "Merge #11903: [trivial] Add required package dependencies for depends cross compilation\n\n31a013563 Add required package dependencies for depends cross compilation [skip-ci] (Jonas Schnelli)\n\nPull request description:\n\n  Stumbled over this during a setup of a new depends compile system.\n  Related to #8913.\n\nTree-SHA512: 67e2fdf9ca3cbedeb02982fa73771dd36978b319e9291ea5a41ede7fdf772c4505ccc9523b48fe66ead927f141efefbdf1e3eaa19a9d8a1304861a8ede040056"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31a01356338eb5a193ceb27179f87f52567d9f13", "message": "Add required package dependencies for depends cross compilation\n[skip-ci]"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de74c625833bba8d8171a2d0dd6ede2e9d5da88b", "message": "[Doc] Update bip.md, add support for BIP 159"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e054d0e532cdb587193952a629e94c669eff95f5", "message": "[QA] Add node_network_limited test"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0941652444df09c32eb552952fd3705d03fd6a", "message": "Avoid leaking the prune height through getdata (fingerprinting countermeasure)"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27df193efdac8a7c4d3d4bbe8a29c8d79c6ce623", "message": "Always set NODE_NETWORK_LIMITED bit\n\nThe current pruning implementation does ensure to always conform to BIP159"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7caba38568bf13ff898d58662fe7ed72d91ecce3", "message": "Add NODE_NETWORK_LIMITED flags and min block amount constants"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91eeaa03354bbb4ee79d6defaffaef2b32ecbe29", "message": "Merge #11556: [Qt] Improved copy for RBF checkbox and tooltip\n\ndb0b7373f [Qt] Improved copy: RBF checkbox, tooltip and confirmation screen (Sjors Provoost)\n\nPull request description:\n\n  Fixes #11344 and replaces #11428.\n\n  **Before**:\n  <img width=\"588\" alt=\"before\" src=\"https://user-images.githubusercontent.com/10217/31984211-3299e81a-b993-11e7-94e9-bf63d2fed4bd.png\">\n\n  **After**:\n  <img width=\"578\" alt=\"after\" src=\"https://user-images.githubusercontent.com/10217/31984404-11f839da-b994-11e7-86ad-4c17a7d44b86.png\">\n\nTree-SHA512: 04876b2f2eab53c8d4fd4279e8384fd4869af7e15de7648b2689092f800b6ae9c890c01c26c2f7deffe79a1d70c6440d702cbe420e44fe3ded25c5b83d44ecfa"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6816484a02d8cbcb2c9a6357ce708374a7241ce0", "message": "Merge #11792: Trivial: fix comments for ZeroMQ bitcoind args\n\n33698c94b Trivial: fix comments for ZeroMQ bitcoind args (aaron-hanson)\n\nPull request description:\n\n  The ZeroMQ command-line args suggested here had the \"-zmqpubhashblock\" arg duplicated and the \"-zmqpubrawblock\" arg missing.\n\nTree-SHA512: ef3a90f6d82367104aa751778074f6f56d2aaa9cbbf980731f60ee77393db256551423f5414c5b41f09707d08828afc663d06661152ef504a690ceb13c80bc0d"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d31f95d3b5f6e48b819949f2169ab37f76ab0a", "message": "Merge #11395: Qt: Enable searching by transaction id\n\neac2abca0 Qt: Enable searching by transaction id (Luke Dashjr)\nc407c61c5 Qt: Avoid invalidating the search filter, when it doesn't really change (Luke Dashjr)\nb1f634242 Qt: Rename confusingly-named \"address prefix\" to \"search string\" (Luke Dashjr)\n\nPull request description:\n\nTree-SHA512: 1c67037d19689fbaff21d15ed7848ac86188e5de34728312e1f9758dada759cab50d913a5bc09e413ecaa3e07557cf253809b95b5637ff79f2e3cf24d86dd3ed"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196", "title": "Add scantxoutset RPC method", "body": "Alternative to #9152.\r\n\r\nThis takes `<n>` pubkeys and optionally  `<n>` xpubs (together with a definable lookup windows where the default is 0-1000) and looks up common scripts in the UTXO set of all given or derived keys.\r\n\r\nThe output will be an array similar to `listunspent`. That array is compatible with `createrawtransaction` as well as with `signrawtransaction`.\r\n\r\nThis makes it possible to prepare sweeps and have them signed in a secure (cold) space.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12094", "title": "Fix hdmaster-key / seed-key confusion", "body": "Addresses #12084 and #8684\r\n\r\nThis renames a couple of functions and members (no functional changes, expect log prints):\r\n* Rename CKey::SetMaster to CKey::SetSeed\r\n* Rename CHDChain::masterKeyId to CHDChain::seedKeyID\r\n* Rename CHDChain::hdMasterKeyID to CHDChain::hdSeedKeyID\r\n* Rename CWallet::GenerateNewHDMasterKey to CWallet::GenerateNewHDSeedKey\r\n* Rename CWallet::SetHDMasterKey to CWallet::SetHDSeedKey\r\n\r\nAs well it introduces a tiny API change (a649ab2):\r\n* RPC API change: Rename \"hdmasterkeyid\" to \"hdseedkeyid\", rename \"hdmaster\" in wallet-dump output to \"hdseed\"\r\n\r\nFixes also a bug (16d49e1):\r\n* Bugfix: use \"s\" instead of the incorrect \"m\" for the seed-key hd-keypath key metadata", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11892", "title": " [Qt] Warn if fallback fee has been used", "body": "This PR appends a warning at the send coins confirmation text in case the fallback fee was used.\r\n\r\n<img width=\"544\" alt=\"bildschirmfoto 2017-12-13 um 13 13 02\" src=\"https://user-images.githubusercontent.com/178464/33967381-5ec4368a-e007-11e7-9471-5b7ef7a6472c.png\">\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11882", "title": "Disable default fallbackfee on mainnet", "body": "Removes the default fallback fee on mainnet (but keeps it on testnet/regtest).\r\n\r\nTransactions using the fallbackfee in case the fallback fee has not been set are getting rejected.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11471", "title": "[Qt] Optimize SendToSelf rendering with a single non-change output", "body": "Partially fixes #11464\r\n\r\nThis is a simple improvement to render singe non-change output self-to-self transactions with the corresponding output-address/label.\r\nMulti non-change output self-to-self transaction do keep the `(n.a.)` label (we could show all the addresses coma separated).\r\n\r\nScreen:\r\n<img width=\"917\" alt=\"bildschirmfoto 2017-10-09 um 14 18 13\" src=\"https://user-images.githubusercontent.com/178464/31358984-c627acfa-acfc-11e7-990d-8c176c1cb201.png\">\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11281", "title": "Avoid permanent cs_main/cs_wallet lock during RescanFromTime", "body": "Right now, we are holding `cs_main`/`cs_wallet` during the whole rescan process (which can take a couple of hours).\r\nThis was probably only done because of laziness and it is an important show-stopper for #11200 (GUI rescan abort).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10794", "title": "Add simple light-client mode (RPC only)", "body": "This adds a simple light client mode (RPC only, no wallet support).\r\n\r\nWith this PR, It is possible to disable auto-request-blocks by passing in `-autorequestblocks=0`.\r\nIn that mode, one can request out-of-band blocks by calling `requestblock add [\"<blockhash>\", ...]`.\r\nThose blocks will then be requested/downloaded and can be loaded via `getblock` (and they will also be passed through ZMQ).\r\n\r\nThis allows a very simple light-client mode ideally when you already have a validated peer in your trusted network.\r\n\r\nThis is also a reviewable step towards light client mode for the wallet (which will ultimately allow process separation o the wallet).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10387", "title": "Eventually connect to NODE_NETWORK_LIMITED peers", "body": "Eventually connect to peers signalling NODE_NETWORK_LIMITED if we are out of IBD.\r\nAccept and relay NODE_NETWORK_LIMITED peers in addrman.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9662", "title": "Add `-disablehot` mode: a sane mode for watchonly-wallets", "body": "This mode (`-disablehot`) is intended for a sane pure watch-only mode, ideal for a use-case where one likes to use Bitcoin-Core in conjunction with a hardware-wallet or another solutions for cold-stogare.\r\n\r\nSince we have support for custom change addresses in `fundrawtransaction`, pure watch-only wallets including coin-selection are possible and do make sense for some use cases.\r\n\r\nThis new mode disables all forms of private key generation and ensure that no mix between hot and cold keys are possible.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9502", "title": "[Qt] Add option to pause/resume block downloads", "body": "This, almost UI only change, will add a Pause/Resume button to the modal overlay to pause/resume block downloads during IBD.\r\n\r\nThis is an effective way to pause/resume IBD during a time when the computers resources are required somewhere else.\r\n\r\n<img width=\"962\" alt=\"bildschirmfoto 2017-01-10 um 18 34 09\" src=\"https://cloud.githubusercontent.com/assets/178464/21817212/659f314c-d763-11e6-87e2-5b0754d067e0.png\">\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9483", "title": "Complete hybrid full block SPV mode", "body": "This is the complete patch-set for the **hybrid full block SPV mode**.\r\n\r\nIf one enables the SPV mode with `-spv=1` it does...\r\n* ...first sync all headers (no block downloads during that phase)\r\n* ...requests and persist all blocks that are relevant for the wallet (down to the dept of the older wallet key)\r\n* ...scan the block for relevant transactions and flag them with `validated = false` (visible in `listtransactions` etc).\r\n* ... continue with IBD (initial block download) after all wallet relevant blocks have been processed\r\n\r\nPure full block SPV mode is possible by setting `-autorequestblocks=0`, in that mode, no blocks for validating the chain will be downloaded, resulting in a SPV only mode.\r\n\r\nFor better testing, this PR also includes a bump to 0.0005 for the default fallback fee.\r\n\r\nIncluding all required GUI changes and RPC tests:\r\n\r\nScreenshots:\r\n\r\n<img width=\"962\" alt=\"bildschirmfoto 2017-01-06 um 17 21 24\" src=\"https://cloud.githubusercontent.com/assets/178464/21725297/1a101eae-d438-11e6-91c6-04eca0f0a553.png\">\r\n\r\n\r\n![untitled-1](https://cloud.githubusercontent.com/assets/178464/21725116/4fe62b78-d437-11e6-8f1e-80ba02405a64.png)\r\n\r\n<img width=\"732\" alt=\"bildschirmfoto 2017-01-06 um 17 34 09\" src=\"https://cloud.githubusercontent.com/assets/178464/21725281/09088916-d438-11e6-8bf3-390e62ea2648.png\">\r\n\r\n\r\n![untitled-2](https://cloud.githubusercontent.com/assets/178464/21725151/727ec398-d437-11e6-851b-8577df1b6a15.png)\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9298", "title": "[Wallet] use CHDPubKey, don't store child priv keys in db, derive on the fly", "body": "Adds a new database record (`\"hdpubkey\"`) reflected by class `CHDPubKey`.\r\n* Results in no longer storing derived child private keys in the database\r\n* Only the extended child public key will be stored\r\n* If the private key gets requested, it will be derived on the fly\r\n\r\nDump functions are unchanged, will result in deriving the keys on the fly.\r\nNot backward compatible. Ideally combined with HD chain split #9294.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8745", "title": "[PoC] Add wallet inspection and modification tool \"bitcoin-wallet-tool\"", "body": "**WORK IN PROGRESS**\nAdd another bitcoin-tool called `bitcoin-wallet-tool`. Currently it supports creation of wallets (with optional encryption before creating keys), encryption and some info-dumping.\n\nIf we agree on this concept, it could be use for creating a HD wallet with a given xpriv.\nAlso, a such tool would probably be required to properly restore a hd wallet.\nIf we once migrate away from BerkleyDB, this could also be helpful.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8735", "title": "[Wallet] add option for a custom extended master privat key (xpriv)", "body": "At the moment, the HD seed cannot be set by the user. It will always be generated by Bitcoin-Core (`CKey::MakeNewKey()`).\n\nThis PR adds a startup argument `-hdxpriv` where users can set their custom hd extended master private key. The argument takes only affect during the creation of a new `wallet.dat` and there will be a warning if the argument is present during loading an exiting wallet.\n\nIf a custom extended master private key has been set, it will be kept when encrypting the wallet (with log-printing a warning).\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8723", "title": "[Wallet] Add support for flexible BIP32/HD keypath-scheme", "body": "This adds the startup argument `-hdkeypath` which allows to set the BIP32 keypath scheme during the creation of a wallet.\n\nThis PR would allow to use keypath-scheme after BIP44, etc. to be compatible with other wallets.\n\nThis PR does **not** change the keypool mechanism. Even if the keypath would allow public-key-derivation, we still derive all keys with private-key-derivation and fill up the keypool.\nThough, a PR that would enable public-key-derivation would be \"in a reviewable size\" once this gets merged.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8550", "title": "[Qt] Add interactive mempool graph", "body": "Includes #8501\n\nAt the moment, the mempool graph is not very prominently placed (next to the debug window).\n<img width=\"351\" alt=\"bildschirmfoto 2016-08-19 um 21 20 48\" src=\"https://cloud.githubusercontent.com/assets/178464/17821624/e225da0e-6652-11e6-9322-55c918f47012.png\">\n\nFeatures:\n- interactive graph with options for tx count, dynamic memory usage and minRelayFee/KB\n- collects stats in the background, changing the timespan will directly redraw (unlike our bandwidth graph)\n- Dynamic size drawing, window can be resized\n- The mempool graph is a QWidget which means, it could be placed together with other graphs in a combine multi-graph view (screensaver approach)\n\n<img width=\"592\" alt=\"bildschirmfoto 2016-08-19 um 21 28 09\" src=\"https://cloud.githubusercontent.com/assets/178464/17821824/ecb39b72-6653-11e6-87ab-b445556b306a.png\">\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501", "title": "Add mempool statistics collector", "body": "This PR adds a statistics collector class which aims to collect various types of statistics up to the configurable maximum memory target. At the moment, only mempool statistics will be collected.\r\n\r\n### Motivation\r\n\r\nAdding more statistics and visualization to the GUI would leverage its usage. To do so, we need stats that are collected even when the visualization is not visible (example: the GUI network graph will only draw data when it's visible which is kinda unusable)\r\n### How it works\r\n\r\nThis PR adds a simple stats manager that polls stats over a repetitive `CScheduler` task.\r\n\r\n\r\nThe samples are not guaranteed to be const-time. Each sample contains a time delta to the last one (uint16_t).\r\n\r\n### API\r\n- `-statsenable` **default disabled**\r\n- `-statsmaxmemorytarget` **10MB default** maximal memory target to use for statistics.\r\n- RPC: `getmempoolstats`\r\n== \r\n```json\r\n[\r\n  {\r\n    \"percision_interval\": 2,\r\n    \"time_from\": 1494252401,\r\n    \"samples\": [\r\n      [\r\n        11, \r\n        1, \r\n        1008, \r\n        0\r\n      ], ....\r\n   }...\r\n]\r\n```\r\n### Features\r\n\r\n-> CScheduler driven sample collecting (current interval 2000ms)\r\n-> Relevant mempool data (size, memory requirement, minfee) gets written to an atomic cache (no additional locking required)\r\n-> Multiple precision levels (currently three, 2s, 60s, 1800s)\r\n-> Memory target that will calculate how many samples do fit in the given target\r\n-> Sample do only have a 2byte time-delta to the last sample, allowing to save some memory\r\n-> Flexible design, adding more data-points should be simple (bandwidth, utxo-stats, etc.).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949", "title": "[RPC] Add RPC long poll notifications", "body": "#### Reasons for another notification interface\n- Currently there is no interface that could be extended to \"private\" notification secured behind the authorization (like peers connected/disconnected or a new wallet relevant transaction notification)\n- HTTP long poll notifications are very easy to set up and require almost no dependencies\n- HTTP long poll notifications can easily pushed over the internet using httpd reverse proxy together with a popper authentication method (certs or http auth digest) together with TLS.\n- HTTP long poll would allow connecting applications to do all kinds of things with just a single communication channel (currently you need RPC & ZMQ for most use cases which would require VPN or a fancy multi port stunnel connection to broadcast the notification over the internet)\n#### How does it work\n- The listener calls the `pollnotification` RPC command.\n- If no notifications are available, the RPC thread will idle for a given timeout (30s by default)\n- If a notification was fired during the 30 seconds, the longpoll call will be responded with the new notification(s)\n- The client/listener can immediately reconnect and wait again\n- If notifications are already in the queue, the `pollnotification` command will immediately response.\n- Notifications can't get lost (possible to lose them during http transfer and if one exceed the queue limit)\n#### Downsides\n- JSON encoding overhead\n#### New RPC calls\n\n`setregisterednotifications [<notificationtype>]` (possible types are `hashtx` and `hashblock`)\n`getregisterednotifications`\n`pollnotifications`\n#### Missing\n- [ ] More tests\n- [ ] Documentation\n\nI'd like to use a such interface to work on a remote GUI (use case: GUI on your local desktop, node on a VPS).\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2951490", "body": "Yes. Your right. I'll open a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2951490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3342989", "body": "Oops. Sorry! Need to improve my git skills.\nI think i cannot reverse the merge? Can i keep it like this?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3342989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128187105", "body": "`qa/` should no longer be created in current master. If this is still the case, we should rather find the source why this was created then just ignoring it.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128187105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128187296", "body": "I guess this would not hurt, though I think we should cleanup the backup file (unlink them) in `wallet_test.cpp`.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128187296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37854180", "body": "It's half-correct. If `RUN_TESTS` is set to true, not only the unit tests also the rpc test get tested. Because this PR introduces Win32 compatibility of the rpc tests, and they don't run properly on travis/Win32, they need to be disabled. But _only_ the RPC tests (so maybe a new flag in `travis.yml` for RUN_RPC_TESTS).\n\nBut much better it would be, if the RPC test would succeed on Win32/Travis. I'm pretty convinced that there must be a bug somewhere if the RPC tests do not succeed on Win32.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37854180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37861955", "body": "I agree with disabling the _rpc_-tests on travis's windows build (they where never enabled). But **not** the unit tests. `make check` should still run.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37861955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37862781", "body": "Haven't looked at it in detail, but i think adding a variable `RUN_RPC_TESTS` to `travis.yml` and distinct between RPC and Unit Test would be an easy solution.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37862781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48183559", "body": "`[INSERT EMAIL ADDRESS]` -> use `IRC channel #bitcoin-core-dev` or `https://github.com/bitcoin/bitcoin/issues` or `https://bitcoin.org/en/development`?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48183559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40323230", "body": "I'm not sure if this is a good idea. Git and Github are two separate things. I agree with referencing a fix by `fixes #4321` placed in a _Github_ PR description or a _Github_ comment. Placing it in a _git commit_ is not required and not best practice IMO.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40323230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62623145", "body": "Maybe `git rebase -i HEAD~<amount of commits to squash>`\n\nMaybe add something like (please clean/rewrite the english)\n\n```\nUse `p` at the beginning of the line to indicate the commit you wish to use as the base commit\nUse `s` at the beginning of the line for all commits you want to squash into the commit you have marked with `p`.\n```\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62623145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/44795592", "body": "Maybe add something that it's possible and trivial to enable Travis on the users bitcoin-repository fork, so one can test the changes over Travis even before open a PR on bitcoin/bitcoin?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/44795592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30588634", "body": "Agreed. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30588634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/4475694", "body": "oops. These x86 lines are wrong and should be removed. Can i somehow contribute to this pull request? By creating pull request to 2013_05_qt5?\nIf it's more easy, just keep the line28-30 like they are on master.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/4475694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/20492877", "body": "nit: absolute user path\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/20492877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/20492874", "body": "nit: absolute user path\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/20492874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/20492791", "body": "nit: absolute user path\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/20492791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67515314", "body": "IMO this is necessary in non-pkgconfig mode (MinGW). @theuni: thoughts?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67515314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "fresheneesz": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11955", "title": "Improve \"mempool min fee not met\" error to include information on what the min fee is", "body": "<!-- Describe the issue -->\r\nWhen sending a transaction with a low fee, you can sometimes get an error saying \"mempool min fee not met\". \r\n\r\n<!--- What behavior did you expect? -->\r\nI would expect an error like this to include information about what the minimum fee is.\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nI'm using Electrum 3.0.2 in which you can see the raw error from this when you send a low fee transaction when its relayed to an electrum server.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Elbandi": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11938", "title": "reindex reopen readonly blocks to write", "body": "i do a blockchain reindex, and i got issue:\r\n\r\nstrace say, blocks files are reopened for fdatasync:\r\n\r\n... log coming later\r\n\r\nThe only fdatasync call is in FileCommit, here is the callstack:\r\n\r\n    (gdb) bt\r\n    #0  FileCommit (file=0x7fff9f283a10) at util.cpp:686\r\n    #1  0x000000000056129f in FlushBlockFile (fFinalize=<optimized out>) at validation.cpp:1543\r\n    #2  0x00000000005748bf in FindBlockPos (state=..., pos=..., nAddSize=49046, nHeight=nHeight@entry=131237, nTime=1308224251, fKnown=<optimized out>) at validation.cpp:2745\r\n    #3  0x0000000000575427 in AcceptBlock (pblock=..., state=..., chainparams=..., ppindex=ppindex@entry=0x0, fRequested=fRequested@entry=true, dbp=dbp@entry=0x7fffa6ffcdd0, fNewBlock=fNewBlock@entry=0x0) at validation.cpp:3215\r\n    #4  0x0000000000584c26 in LoadExternalBlockFile (chainparams=..., fileIn=fileIn@entry=0x7fff9c000b20, dbp=dbp@entry=0x7fffa6ffcdd0) at validation.cpp:4101\r\n    ....\r\n\r\ni dont know why sould FlushBlockFile called in FindBlockPos, if blocks is readonly.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11750", "title": "Multiselect in coincontrol treewidget and display selected count", "body": "This patch allow multiple out selection in coincontrol dialog.\r\nOnly for changing the checked state, locking need single select.\r\n\r\nusecase: someone gets lost of payments from zpool/miningrigrentals/nicehash/etc, its easy to select inputs for sending (no need to click many times in intems or space-down-space-down-space-down... by keyboard)\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BeRichh": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11934", "title": "Error code -1 need help", "body": "Hello,\r\n\r\nWhen im downloading the blocks of bitcoinrpc on my server, i got this error code: -1\r\n-> http://prntscr.com/hotl1e\r\n\r\nSo i restart the bitcoind, and the block restart downloading, but after x time i got the same error, several time.\r\n\r\nHow can i fix it?\r\nIm on debian, and i have 1TB diskspace\r\n\r\nThanks you!", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "annjieching": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11922", "title": "make: Nothing to be done for 'all' ", "body": "Hi everyone, I am unable to run bitcoind even after running sudo make install. There is nothing in this program even though make install \"completes\". \r\n\r\n```\r\nMaking all in doc/man\r\nmake[1]: Nothing to be done for `all'.\r\nmake[1]: Nothing to be done for `all-am'.\r\n```\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nIt happens every single time. \r\n`  $ ./configure --with-incompatible-bdb --with-protoc-bindir=/usr/local/Cellar/protobuf\r\nI have had other errors and this is the final error I am unable to get rid of. Short of doing a clean reinstall on my Mac I have no idea how to continue. Maybe I just have accumulated too much junk on this through bad practices prior (I am no trained developer, would just install things through brew and ignore any warnings or errors unless I really had to pay attention)\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\nv0.15.0.1\r\nGit clone \r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\nMac OS X with High Sierra \r\nI am running this on an external HDD but writing to /usr/ \r\nhttps://pastebin.com/6kLbPi3u\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maaku": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11901", "title": "Add '--enable-mainnet' configure and bitcoind option", "body": "Feature request: add a configuration option '--enable-mainnet' which defaults to false but is set to true by the gitian builds. When true, behavior is unaffected. When false (the default for someone cloning the repo and building with no configuration options), the resulting binary will require a new 'enablemainnet' option to be set in order to launch the daemon or Qt GUI with main net chain params.\r\n\r\nThis prevents developers or downstream system integrators from accidentally corrupting main net wallets or block chain data when developing new features. It has happened to me multiple times in the past that I've corrupted wallets while implementing and debugging new wallet features. Of course these were either testnet wallets, or I was careful to backup the wallet first. But we should strive to create a development environment without single-point failure potential to prevent fat-finger mistakes if nothing else.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11901/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12167", "title": "Make segwit failure due to CLEANSTACK violation return a SCRIPT_ERR_CLEANSTACK error code", "body": "If a segwit script terminates with a stack size not equal to one, the current error code is EVAL_FALSE. This is semantically wrong, and prevents explicitly checking CLEANSTACK violations in the unit tests. This PR changes the error code (and affected unit tests) to use SCRIPT_ERROR_CLEANSTACK instead of SCRIPT_ERROR_EVAL_FALSE.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fernetmatt": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11896", "title": "macOS: client v0.15.1 still go in App Nap mode", "body": "Currently the Bitcoin Core client, v0.15.1 (64-bit) on macOS Sierra 10.12.6 still go in App Nap mode after being hidden behind other applications or docked in the macOS dock bar. Keeping the app in foreground will obviously avoid the App Nap mode. At the moment it is even impossible to disable per-app Nap Mode via the Get Info dialog because there is no option to do that with the Bitcoin client app.\r\n\r\nThe App Nap issue was already addressed and solved in few previous ticket (#3182, #5041, #5804).\r\n\r\nI don't really know how App Nap can interfere with the client performance, at the moment i'm syncing the whole blockchain and it's taking a lot.\r\n\r\n![screen shot 2017-12-14 at 10 59 56](https://user-images.githubusercontent.com/385030/33986928-6cd532a2-e0bf-11e7-8723-1850cfa56142.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ayms": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11891", "title": "Misleading error/reject message: mandatory-script-verify-flag-failed (Signature must be zero for failed CHECK(MULTI)SIG operation)", "body": "This is very equivalent to https://bitcoin.stackexchange.com/questions/61030/got-64-non-mandatory-script-verify-flag-signature-must-be-zero-for-failed-chec/61040\r\n\r\nWhile implementing multisig for https://github.com/Ayms/bitcoin-transactions and just sending funds to a multisig test address (https://btgexp.com/tx/e2fe7ed1c528986fd30d97dd4bb62cc9c17db94c0753333250dc0c32ab5a8bd8) I got this error\r\n\r\nSimply because prevamount: (0.00460457*100000000)=460456.99999999994 was wrongly rounded to 460456, then the signature was incorrect\r\n\r\n\"Signature must be zero for failed CHECK(MULTI)SIG operation\" is unclear, this probably can be replaced by something more clear like \"Wrong signature\" and why not \"check prevamounts\"", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "morcos": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11887", "title": "Could the wallet count unconfirmed non-mempool change?", "body": "Just writing down some thoughts on this.\r\n\r\nI find it quite counter-intuitive that if you have a 1 BTC output and make a transaction spending 0.01 BTC and sending 0.99 BTC back to yourself in change, that unless that transaction is in your mempool, your balance drops from 1 to 0.   Unconfirmed change in the mempool appears in available balance (assuming we can spend 0-conf change), but if it is not in the mempool it is not reflected at all, but the output spent in the transaction is still spent.\r\n\r\nThis can occur because walletbroadcast=0 and you're delaying broadcast or using another broadcast method or because the initial transaction was evicted.  In either case though it doesn't make sense to count the entire input as spent but not credit the change output.\r\n\r\nI believe it would make sense to include the unconfirmed non-mempool change in the pending balance.\r\n\r\nUnfortunately this is non-trivial.  This can best be seen by the example of two transactions in the wallet that spend the same input.  Naively you'd double count the change, which is clearly wrong.  It's non-obvious which change you should count nor how you would go about implementing that if you did have a plan.  One idea would be if you had a mempool package acceptance test (ala @sdaftuar) you could try to add all non-mempooled wallet transactions incrementally in time order, and take the resulting putative mempool state as what would count.  But its starting to get a bit cumbersome.  Another idea would be to check the unconfirmed non-mempool change for potential conflicts and only count the smallest change.\r\n\r\nThere are other aspects of trickiness such as mixed debit transactions.\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12204", "title": "Fix overly eager BIP30 bypass", "body": "In #6931 we introduced a possible consensus breaking change by misunderstanding how completely BIP 34 obviated the need for BIP 30.  Unfixed, this could break consensus after block height about 1.9M.  Explained in code comment.\r\n\r\nh/t @sdaftuar ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9167", "title": "IsAllFromMe", "body": "Created a new wallet and walletTx function `IsAllFromMe` which correctly computes whether all the inputs to a transaction match the requested IsMine filter.\r\n\r\nOriginal first commit https://github.com/bitcoin/bitcoin/pull/8456/commits/766e8a40b478353a89622f42809ddb11e695a0c9 already merged.\r\n\r\n- Commits 1 and 6 add the new function and remove the old walletTx `IsFromMe`.\r\n- Commit 2 update IsTrusted to use the new function.  No change in behavior as long as vin.size() > 0.  Open question as to whether this should be changed to use ISMINE_ALL?\r\n- Commit 4 remove code that was already redundant because of call to IsTrusted\r\n- Commit 3 make a small change to `SelectCoinsMinConf` to only consider new outputs spendable quickly if all the inputs were ours, not just at least one. \r\n- Commit 5 changes the output in `gettransaction` for mixed debit transactions where some inputs were ours and some weren't.  It'll report the correct fee if possible, otherwise 0.  Note that the fee reported in the details and any other function which depends on `ListTransactions` is not changed as `getbalance(\"*\")` depends on having incorrect negative fees calculated on mixed debit transactions in order to track the right balances.\r\n\r\nNote that there are other places in the code such as `AddToWalletIfInvolvingMe` which ideally would be updated to distinguish between 0 satoshi prevouts that are \"MINE\" and prevouts that aren't \"MINE\".\r\n\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pinheadmz": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11874", "title": "blocknotify fails to execute command, logs \"runCommand error\", continues to fail on every block until restart", "body": "Running:\r\nbitcoin v0.15.0.1\r\nRaspberry Pi 3 (Raspbian Stretch 9)\r\n\r\nI have this blocknotify command in my bitcoin.conf:\r\n`blocknotify=python /home/pi/bin/ClockBlocker/block.py %s`\r\n[...which points to this script](https://github.com/pinheadmz/ClockBlocker/blob/henners-not-adafruit/block.py)\r\n\r\nI've been using this method and python script for years. Every now and then, and more often lately, the `blocknotify` stops working. `blocknotify` fails to run the command, and logs a `runCommand` error. The python script is not run at all, and never will for any future block. After stopping the node and restarting, behavior returns to normal.\r\n\r\nI modified the python script to print the block height and hash when it runs for debugging, and ran `bitcoind` without `-daemon` to print the output of the python script to the console. In this instance, block 498761 is the last block where `blocknotify` runs as expected. Every new block after 498761 returns this \"-1\" error with no output from python, until bitcoind is restarted.\r\n\r\n\r\noutput of `bitcoind` (no `-daemon`):\r\n```\r\n--\r\n(498759, '00000000000000000018e5f8d99dcd94aff8346319939b2800c840156b91a1bc')\r\n--\r\n(498760, '0000000000000000004d5c6ecd33753a2e0cbae60b40d74e26a949a87329f298')\r\n--\r\n(498761, '0000000000000000008263857816e81d68cb9e5e435bf82f1ff0d27af6e0743d')\r\n```\r\n--> output stops here\r\n\r\nrelevant chunk of .bitcoin/debug.log:\r\n```\r\n2017-12-11 16:05:00 UpdateTip: new best=00000000000000000018e5f8d99dcd94aff8346319939b2800c840156b91a1bc height=498759 version=0x20000000 log2_work=87.633707 tx=280733472 date='2017-12-11 16:04:31' progress=1.000000 cache=115.0MiB(1038368txo)\r\n2017-12-11 16:09:17 receive version message: /Satoshi:0.15.1/: version 70015, blocks=498759, us=24.130.115.125:48770, peer=52\r\n2017-12-11 16:12:44 Pre-allocating up to position 0xc00000 in rev01098.dat\r\n2017-12-11 16:12:45 UpdateTip: new best=0000000000000000004d5c6ecd33753a2e0cbae60b40d74e26a949a87329f298 height=498760 version=0x20000000 log2_work=87.633748 tx=280736185 date='2017-12-11 16:12:59' progress=1.000000 cache=115.9MiB(1047092txo)\r\n2017-12-11 16:23:01 receive version message: /Satoshi:0.15.1/: version 70015, blocks=498760, us=24.130.115.125:34049, peer=53\r\n2017-12-11 16:24:13 connect() to 131.113.41.123:8333 failed after select(): Connection refused (111)\r\n2017-12-11 16:26:00 UpdateTip: new best=0000000000000000008263857816e81d68cb9e5e435bf82f1ff0d27af6e0743d height=498761 version=0x20000000 log2_work=87.633789 tx=280738499 date='2017-12-11 16:25:29' progress=1.000000 cache=116.9MiB(1055950txo)\r\n2017-12-11 16:27:56 receive version message: /Satoshi:0.14.2/: version 70015, blocks=498761, us=24.130.115.125:46283, peer=54\r\n2017-12-11 16:29:02 connect() to 89.238.176.102:8333 failed after select(): Connection refused (111)\r\n2017-12-11 16:29:14 UpdateTip: new best=0000000000000000007f7212b500b765878334c924af2bd83fe881ae91671dc2 height=498762 version=0x20000000 log2_work=87.63383 tx=280741423 date='2017-12-11 16:28:44' progress=1.000000 cache=121.5MiB(1060495txo)\r\n2017-12-11 16:29:14 runCommand error: system(python /home/pi/ClockBlocker/block.py 0000000000000000007f7212b500b765878334c924af2bd83fe881ae91671dc2) returned -1\r\n2017-12-11 16:29:23 UpdateTip: new best=00000000000000000045319a9d5a5031160b12b2dcccaf4ea537849440e0a07a height=498763 version=0x20000000 log2_work=87.633871 tx=280744233 date='2017-12-11 16:29:32' progress=1.000000 cache=121.9MiB(1064343txo)\r\n2017-12-11 16:29:23 runCommand error: system(python /home/pi/ClockBlocker/block.py 00000000000000000045319a9d5a5031160b12b2dcccaf4ea537849440e0a07a) returned -1\r\n2017-12-11 16:30:31 UpdateTip: new best=000000000000000000aa68479e13acf3035b0db7581fed7ce7c6304d6432a5f7 height=498764 version=0x20000000 log2_work=87.633912 tx=280746878 date='2017-12-11 16:30:07' progress=1.000000 cache=122.4MiB(1068597txo)\r\n2017-12-11 16:30:31 runCommand error: system(python /home/pi/ClockBlocker/block.py 000000000000000000aa68479e13acf3035b0db7581fed7ce7c6304d6432a5f7) returned -1\r\n2017-12-11 16:38:07 UpdateTip: new best=000000000000000000943e6a69087aa820688b2e188126d88b03972abbc226db height=498765 version=0x20000000 log2_work=87.633953 tx=280749414 date='2017-12-11 16:38:01' progress=1.000000 cache=123.0MiB(1074102txo)\r\n2017-12-11 16:38:07 runCommand error: system(python /home/pi/ClockBlocker/block.py 000000000000000000943e6a69087aa820688b2e188126d88b03972abbc226db) returned -1\r\n2017-12-11 16:38:39 socket send error Invalid argument (22)\r\n2017-12-11 16:38:39 connect() to 104.243.34.58:8333 failed after select(): Connection refused (111)\r\n2017-12-11 16:38:46 receive version message: /Satoshi:0.15.0.1/: version 70015, blocks=498765, us=24.130.115.125:44635, peer=55\r\n2017-12-11 16:42:20 UpdateTip: new best=000000000000000000af50bce86fd0f49dc706a41fcd17d483c906f95490de08 height=498766 version=0x20000000 log2_work=87.633994 tx=280751495 date='2017-12-11 16:41:47' progress=1.000000 cache=123.5MiB(1078913txo)\r\n2017-12-11 16:42:20 runCommand error: system(python /home/pi/ClockBlocker/block.py 000000000000000000af50bce86fd0f49dc706a41fcd17d483c906f95490de08) returned -1\r\n2017-12-11 16:44:06 Pre-allocating up to position 0xd00000 in rev01098.dat\r\n2017-12-11 16:44:06 UpdateTip: new best=00000000000000000018103b5fe48ffd6108f2928322cb555b54e8f2c731a8fc height=498767 version=0x20000000 log2_work=87.634035 tx=280753261 date='2017-12-11 16:44:39' progress=1.000000 cache=123.7MiB(1081313txo)\r\n2017-12-11 16:44:06 runCommand error: system(python /home/pi/ClockBlocker/block.py 00000000000000000018103b5fe48ffd6108f2928322cb555b54e8f2c731a8fc) returned -1\r\n```", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sipsorcery": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11873", "title": "Visual studio Build setup for CI", "body": "Is there a webhook currently set on this repo for Pull Requests that could be used to trigger external builds?\r\n\r\nI've configured an [appveyor Visual Studio 2017 build job](https://ci.appveyor.com/project/sipsorcery/bitcoin) in conjunction with #11526 and it would be nice to trigger it for new commits.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11873/reactions", "total_count": 2, "+1": 1, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11526", "title": "Visual Studio build configuration for Bitcoin Core.", "body": "This PR allows Bitcoin Core to be relatively easily built with Visual Studio 2017. It's anticipated that it could be useful for devs familiar with Visual Studio and Microsoft's tooling. In particular the ability to use the VS debugger is a big benefit.\r\n\r\n~~Caveats:~~\r\n- ~~There are some minor code changes required on Bitcoin Core in order for msvc to be able to successfully compile. I'll submit them in a separate PR, The code changes are available in #11528 #11558 and #11562~~.\r\n- ~~The vcpkg for SECP256K1 has not yet been accepted by Microsoft. The files are available from this [PR](https://github.com/Microsoft/vcpkg/pull/2005) and should be copied into a vcpkg/ports/secp256k1 directory prior to vcpkg install steps.~~\r\n\r\n**Update:** For anyone wishing to test out the Visual Studio build with the various open pull requests the steps are:\r\n\r\n- Clone and build [Vcpkg](https://github.com/Microsoft/vcpkg) (Microsoft's new open source C/C++ package manager)\r\n    - git clone https://github.com/Microsoft/vcpkg\r\n    - .\\bootstrap-vcpkg.bat\r\n- Set up Visual Studio to automatically reference vcpkg installs: .\\vcpkg integrate install\r\n- Install the required packages (replace x86 with x64 as required):\r\n    - vcpkg install boost:x86-windows-static\r\n    - vcpkg install libevent:x86-windows-static\r\n    - vcpkg install openssl:x86-windows-static\r\n    - vcpkg install zeromq:x86-windows-static\r\n    - vcpkg install berkeleydb:x86-windows-static\r\n    - vcpkg install secp256k1:x86-windows-static\r\n    - vcpkg install leveldb:x86-windows-static\r\n- git clone https://github.com/bitcoin/bitcoin.git\r\n- git checkout -b testbuild\r\n- git pull origin pull/11526/head # Visual Studio build configuration for Bitcoin Core\r\n- ~~git pull origin pull/11558/head # Minimal code changes to allow msvc compilation~~\r\n- ~~git pull origin pull/11562/head # bench: use std::chrono rather than gettimeofday~~\r\n- Copy and unzip attached bitcoin-config.h to src/config, edit as required [bitcoin-config.zip](https://github.com/bitcoin/bitcoin/files/1429484/bitcoin-config.zip)\r\n- Build the Visual Studio solution which, if successful, will result in all but the Qt dependent libraries/programs being built. If the build fails please add a comment.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hucste": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11868", "title": "Build into OpenBSD 6.2 ", "body": "<!-- Describe the issue -->\r\nI attempt to build segun \"[OpenBSD build guide](https://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md)\"\r\n \r\nAt the \"Building Berkeley DB\" stage, i've this error: \r\n\r\n```\r\nchecking for a BSD-compatible install... /usr/bin/install -c\r\nchecking whether the C compiler works... no\r\nconfigure: error: in `/home/user/Documents/Dev/NotMine/bitcoin/db4/db-4.8.30.NC/build_unix':\r\nconfigure: error: C compiler cannot create executables\r\nSee `config.log' for more details.\r\n```\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\nas explain on guide: \r\n`./contrib/install_db4.sh $(pwd) CC=egcc CXX=eg++ CPP=ecpp`\r\n\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\nHere, the config log _(pasted for one year)_: \r\nhttps://paste.debian-fr.xyz/?23d2ec6f02f6dff3#6YgqTsh6tPX7BpVFZHjLyBZb/UF7M6cJVvdtjdUQl7E=", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dhurv000077": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11855", "title": "Bitcoin core is not opening", "body": "I downloaded bitcoin core wallet last week, everything was fine but now it won't open properly.\r\n![screenshot from 2017-12-08 23-31-03](https://user-images.githubusercontent.com/18211427/33778729-00d9c4b2-dc70-11e7-8970-7ee1bada3465.png)\r\n\r\nIt's just stuck at this \"Done loading\" window.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TheBlueMatt": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11853", "title": "listsinceblock shows conflicted transactions forever", "body": "Because listsinceblock walks mapWallet and checks only that GetDepthInMainChain() < the depth of the block requested, conflicted transactions (which have negative GetDepthInMainChain()) may be repeatedly included in output forever. This should (hopefully) not break any usage of the API, but some folks appear to rely on listsinceblock not returning things repeatedly.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11522", "title": "Block Re-announcement post-compact-fast-announcement after a GETHEADERS or GETBLOCKS request", "body": "BIP 152, in the \"Pre-Validation Relay and Consistency Considerations\" section, point 3, suggests that nodes \"SHOULD re-announce\" a \"block using the associated announcement methods after validation has completed if it is not included in the original response [to a GETHEADERS/GETBLOCKS message]\". This is a pretty strange requirement that we currently do not meet (it implies that, if you announce a compact block to a peer using HB mode, and it then requests the header/block inv from you, and you do not supply it as you have not yet finished connecting the block, you need to, once you finish connecting the block, send the header/inv. Because this requirement is not there for GETDATA messages directly (BIP 152 instead requires that the message-processing-pipline stall until you've connected the block), this does not effect our usage of compact blocks, but technically we are not faithfully implementing BIP 152.\r\n\r\nAdding a check for this case and handle it explicitly (by watching for GETHEADERS/GETBLOCKS and then setting pindexBestHeaderSent back if we have a most_recent_block which is not included but which has more work than our tip) is doable, but somewhat gross. Personally, I'd prefer that BIP 152 either be changed to drop this SHOULD, or make a note that Bitcoin Core does not meet this SHOULD and implementations SHOULD NOT rely on this behavior.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11242", "title": "verifytxoutproof can return witnesses but cannot verify them", "body": "This is very unexpected and could result in some applications being confused. We should likely provide an option to generatetxoutproof to also provide a witness SPV proof, and remove the witness in verifytxoutproof unless the witness proof is present.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d2b09c124e6e5803f7fd4503348d9710d1260f", "message": "Add helper to wait for validation interface queue to catch up"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36137497f1e2b3324ca84550f4f295dcd605d1fa", "message": "Block ActivateBestChain to empty validationinterface queue"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a933cefcc5e0595a1ec46fc5ea287aa163ecd3f", "message": "Add an interface to get the queue depth out of CValidationInterface"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99b76f26958829c2b9ca4ffa5b1d81912b8acc7", "message": "Require no cs_main lock for ProcessNewBlock/ActivateBestChain\n\nThis requires the removal of some very liberal (incorrect) cs_mains\nsprinkled in some tests. It adds some chainActive.Tip() races, but\nthe tests are all single-threaded anyway."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7348960389af9d86983e767b4aea2c7778ab726", "message": "Avoid cs_main in net_processing ActivateBestChain calls"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66aa1d58a158991a8014a91335b5bc9c00062f56", "message": "Refactor ProcessGetData in anticipation of avoiding cs_main for ABC"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e7c04fb82c1b99ee27b61af17cda343c9f9912", "message": "Remove dead feeest-file read code for old versions\n\n0.15.0 introduced a new feeest file format, and support for parsing\nold versions was never fully added. We now simply fail to read the\nold format, so remove the dead partial-implementation."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/818075adaca9104539f056cdb858e135a49de2ed", "message": "Create new mutex for orphans, no cs_main in PLV::BlockConnected\n\nThis should (marginally) speed up validationinterface queue\ndraining by avoiding a cs_main lock in one client."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c79d73dc94684a43ce9ce98817aa4876db283066", "message": "Clarify getbalance meaning a tiny bit in response to questions."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38686cea035e0d480e4ee953b8e40c7f0fa2118", "message": "[verify-commits] Fix gpg.sh's echoing for commits with '\\n'"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07c483895d219d4c44bd8fec5167a53f4701c364", "message": "Always return true if AppInitMain got to the end\n\nThis should fix a very rare travis failure in zapwallettxes, but\nis also more correct, as you can currently race\nReacceptWalletTransactions with stop RPC calls to get bitcoind to\n(IMO) eroneously return a non-0 exit code."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22fdddeabb17881af2004c45538f91514837d363", "message": "Avoid calling GetSerializeSize on each tx in a block if !fTxIndex"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2862aca40f24acc48d3052d5ba3f639e3fc0a621", "message": "Move some additional variables into CChainState private"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd4d80a2f8d2ced8ffedf46e4a70ff4f7a05663f", "message": "Create initial CChainState to hold chain state information"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e104f0fb7e464f8cadb4cbc99e8329d22c35c36a", "message": "Move block writing out of AcceptBlock"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50701ba5fc6199ee5e95120d5b77bd13e3bbe65c", "message": "Move txindex/undo data disk location stuff out of ConnectBlock"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a34cfeecf51457151183aba7328026dab42dac", "message": "Make DisconnectBlock unaware of where undo data resides on disk"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12138", "title": "Track best-possible-headers", "body": "This adds a setBlockIndexHeaderCandidates which mimics setBlockIndexCandidates and is\r\nThe set of all leaf CBlockIndex entries with BLOCK_VALID_TREE (for itself and all ancestors) and\r\nas good as our current tip or better. Entries here are potential future candidates for insertion\r\ninto setBlockIndexCandidates, once we get all the required block data. Thus, entries here\r\nrepresent chains on which we should be actively downloading block data.\r\n\r\nNote that we define \"as good as our current tip or better\" slightly differently here than in\r\nsetBlockIndexCandidates - we include things which will have a higher nSequence (but have the\r\nsame chain work) here, but do not include such entries in setBlockIndexCandidates. This is\r\nbecause we prefer to also download towards chains which have the same total work as our current\r\nchain (as an optimization since a reorg is very possible in such cases).\r\n\r\nNote that, unlike setBlockIndexCandidates, we only store \"leaf\" entries here, as we are not as\r\naggressively prune-able (setBlockIndexCandidates are things which we can, and usually do, try to\r\nconnect immediately, and thus entries dont stick around for long). Thus, it may be the case that\r\nchainActive.Tip() is NOT in setBlockIndexHeaderCandidates.\r\n\r\nAdditionally, unlike setBlockIndexCandidates, we are happy to store entries which are not\r\nconnectable due to pruning here.\r\n\r\nThis is useful as it (finally) disconnects net_processing logic from the \"store on disk\" logic in validation.cpp. More importantly, it represents what you'd need from the consensus logic to implement a spv-first sync mode, as this provides a best-header which will follow invalidity - always pointing to the best-possible header even after block(s) are found to be invalid.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12120", "title": "Add dev guideline limiting auto usage.", "body": "I'm tired of having an extra level of indirection to review stupid shit like https://github.com/bitcoin/bitcoin/pull/11403/commits/5ae4080cc2c0c50e1093b52005c47cd74bd0261e#diff-ad6efdc354b57bd1fa29fc3abb6e2872R283, it just makes review, scripted-diff and other stuff harder, without materially making the code more flexible (unless we want to do a massive sed to make everything auto, which would be insane).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11913", "title": "Avoid cs_main during ReadBlockFromDisk Calls", "body": "Built on #11281 and one commit from #11824, this removes almost all cs_main holds in ReadBlockFromDisk calls in net_processing/RPC/REST. Only real worry here is if something gets pruned out from under us during reading, so some previously-asserts in net_processing are now LogPrints.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11880", "title": "Stop special-casing phashBlock handling in validation for TBV", "body": "There is no reason to do this, really, we already have \"ignore PoW\" flags. Motivated by https://github.com/bitcoin/bitcoin/pull/11739#discussion_r155841721", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11866", "title": "Do not un-mark fInMempool on wallet txn if ATMP fails.", "body": "Irrespective of the failure reason, un-marking fInMempool\r\nout-of-order is incorrect - it should be unmarked when\r\nTransactionRemovedFromMempool fires.\r\n\r\nClean up of #11839, which I think was the wrong fix.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11856", "title": "[RFC] I Have a Hammer! (Replace parts of ui_interface with validationinterface)", "body": "Look at my pretty harrmer, watch as I make everything into a nail!\r\n\r\nThis de-duplicates the NotifyBlockTip/BlockTipChanged callbacks by removing the NotifyBlockTip callback from ui_interface, cleaning up a few things along the way. It does, however, add a good bit of overhead where there was previously none - instead of a simple boost::signal things are now being called on the scheduler background thread. Still, I think its worth it because a) background-threading this stuff makes us less vulnerable to latency spikes in different subsystems because some other subsystem takes forever (at least once validationitnerface is parallel across different clients) and b) avoids lockorder issues creeping in due to cs_main complexity.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11775", "title": "Move fee estimator into validationinterface/cscheduler thread", "body": "This does a few things in a PR, so I'm happy to split it up if people prefer.\r\n\r\na) It clarifies the validationinterface stuff into a mempoolinterface and the validationinterface, splitting the two up into separate systems with the mempool creating events for mempoolinterface and validationinterface functions coming from validation. They are conjoined in the backend to provide ordering guarantees for listeners which are *both* mempool interfaces and validation interfaces, but are otherwise fully separated. There are a few cleanups that are enabled here, which I went ahead and did.\r\n\r\nb) fee estimator becomes a listener to the mempool interface which provides a bit of additional info about transactions being added more than just the tx (eg feerate, etc)\r\n\r\nc) a few minor edge cases in the fee estimator are handled (witness malleation changing feerate, and handling reorgs better, specifically).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11639", "title": "Rewrite the interface between validation and net_processing wrt DoS", "body": "This cleans up an old main-carryover - it made sense that main could decide what DoS scores to assign things because the DoS scores were handled in a different part of main, but now validation is telling net_processing what DoS scores to assign to different things, which is utter nonsense. Instead, we replace CValidationState's nDoS and CorruptionPossible with a general ValidationInvalidReason, which net_processing can handle as it sees fit. I keep the behavior changes here to a minimum, but in the future we can utilize these changes for other smarter behavior, such as disconnecting/preferring to rotate outbound peers based on them providing things which are invalid due to SOFT_FORK because we shouldn't ban for such cases.\r\n\r\nThis is somewhat complementary with, though obviously conflicts heavily with #11523, which added enums in place of DoS scores, as well as a few other cleanups (which are still relevant).\r\n\r\nCompared with previous bans, the following changes are made:\r\n * Txn with empty vin/vout or null prevouts move from 10 DoS\r\n   points to 100.\r\n * Loose transactions with a dependency loop now result in a ban\r\n   instead of 10 DoS points.\r\n * BIP68-violation no longer results in a ban as it is SOFT_FORK.\r\n * Non-SegWit SigOp violation no longer results in a ban as it\r\n   considers P2SH sigops and is thus SOFT_FORK.\r\n * Any script violation in a block no longer results in a ban as\r\n   it may be the result of a SOFT_FORK. This should likely be\r\n   fixed in the future by differentiating between them.\r\n * Proof of work failure moves from 50 DoS points to a ban.\r\n * Blocks with timestamps under MTP now result in a ban, blocks\r\n   too far in the future continue to *not* result in a ban.\r\n * Inclusion of non-final transactions in a block now results in a\r\n   ban instead of 10 DoS points.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11604", "title": "[net] Remove ForNode/ForEachNode", "body": "They were only used in places where they really should not have been used.\r\n\r\nReplaces #10697.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11512", "title": "Use GetDesireableServiceFlags in seeds, dnsseeds, fixing static seed adding", "body": "4440710 broke inserting entries into addrman from dnsseeds which\r\ndid not support service bits, as well as static seeds. Static seeds\r\nwere already being filtered by UA for 0.13.1+ (ie NODE_WITNESS), so\r\nsimply changing the default service bits to include NODE_WITNESS\r\n(and updating docs appropriately) is sufficient. For DNS Seeds, not\r\nsupporting NODE_WITNESS is no longer useful, so instead use\r\nnon-filtering seeds as oneshot hosts irrespective of named proxy.\r\n\r\nI've set my testnet-seed to also support x9, though because it is simply a static host, it may be useful to leave the support off so that it is used as a oneshot to get addresses from a live node instead. I'm fine with either.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984", "title": "Allow 2 simultaneous (compact-)block downloads", "body": "This is a (somewhat) simpler version of #9447 based on #10652.\r\n\r\nIt allows for up to 2 simultaneous downloads of the same block at once, as long as the second one is using compact blocks and only has up to 10 transactions to request in a getblocktxn (if applicable).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10896", "title": "Optimize compact reconstruction somewhat", "body": "This is some stuff I did for FIBRE a while back (that @rustyrussell cleaned up a lot, thanks!) and figured could get upstreamed. It saves some milliseconds when reconstructing, but for upstream its not all that critical.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10692", "title": "Make mapBlockIndex and chainActive and all CBlockIndex*es const outside of validation/CChainState", "body": "This is based on #10279 and is all just pretty mechanical (largely scripted) changes to make mapBlockIndex/chainActive/CBlockIndex*es const outside of validation.cpp/CChainState!", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844007", "body": "I agree with jgarzik, though most are distributed as chose a version at download.  Should we do that?\nIn any case you should add $@ to the end of the lines which launch bitcoin to pass arguments.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852241", "body": "Brief chat on IRC seemed to indicate that almost everyone is in support of this option, most saying it should also be on by default.  I agree with them.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852247", "body": "Though maybe it could just be included alongside the standard seed node list?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852899", "body": "I agree with jhyslop: https://github.com/TheBlueMatt/bitcoin/commit/fe460d47b06d10095b882d7a9ea8a98ad0079bbd\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853049", "body": "Satoshi was clearly brilliant, but that doesn't mean we have to follow his original intent religiously.  I think this is a good idea, especially as we move towards more clients in more languages, on more devices.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853062", "body": "The client should never end up with 0 connections, as it always tries to keep MAX_OUTBOUT_CONNECTIONS open (8).  In my testing, a dynamic ip change will keep connections open.  However, connections take 90 minutes to timeout, so there is a time where your client thinks its connected, but is actually not.  That should be fixed, but I have never seen a complete silent disconnect.  I might be wrong but please add a test case which always causes this if you do see this often.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853473", "body": "Phantomcircuit started a topic on the forum to discuss Sybil attacks and what, exactly, we should to to prevent them (http://www.bitcoin.org/smf/index.php?topic=4335.0).  I would, however, like to point out that the penalties removed here have nothing to do with incoming connections and the penalties here are really unnecessary as the client only makes one outbound connection per /16.  \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/855259", "body": "jhyslop mentioned that he is doing a full rewrite of logging (separating debug of various parts, etc).  I'd assume wait for him to finish his code before doing anything here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/855259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857022", "body": "After the discussion on IRC and a bit of soul searching, I came to the conclusion that having a -port option is bad for the overall network.  The problem rests with the ability of people to more easily run multiple nodes on the network.  This should be discouraged as it increases load on IRC, etc.  Anyone who has enough ability to want an alternate port for whatever reason can easily do this with firewall rules or with a compilation with the above commits.  \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/861443", "body": "Oops, this breaks makefiles on everything but UNIX.  Will fix later.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/861443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862319", "body": "Again my lacking of understanding of standard policy means this needs closed and resubmitted.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862402", "body": "Oh goddamit, well after today I'm done trying to submit patches.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862552", "body": "Didn't realize Luke added -upnp in his commit, sorry.  The original intention was to have USE_UPNP as a compile option as to whether or not one would compile with UPnP or not and a single -noupnp where UPnP defaults to on.  \nCurrently the Windows makefile doesn't support any UPnP (some have suggested using Window's native UPnP library instead on Windows).  I think it should be always on by default.  In the end that can only be better for the network as it creates more peer diversity (and maybe eventually increasing MAX_OUTBOUND_CONNECTIONS).  I will do that unless you disagree.  \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862766", "body": "Forum thread here: http://www.bitcoin.org/smf/index.php?topic=4392.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/876713", "body": "jeffWelling: according to ArtForz, there is a heartbeat packet sent every 30 minutes (provided no other txes/blocks/etc have been send in the last 30 minutes).  I guess the timeout could reasonably be decreased as content sent by TCP should be reliable.  \n\nmolecular: Odd, I guess this needs more long-term testing (I only tested by artificially setting the timeout to a low value).  Ill try to do this when I get the chance. Can you grep some debug.log stuff out when this happens?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/876713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880293", "body": "That's the interesting thing about UPnP, for an individual, having UPnP on by default is bad - potential security problems down the line, increased traffic, etc.  For the network as a whole, having UPnP on by default is good as it creates more nodes which accept incoming connections ie good for network diversity in the long run.  (maybe even increased MAX_OUTBOUND_CONNECTIONS in the future)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880343", "body": "That would be my fault.  Ill fix it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933275", "body": "jgarzik pointed out that bitcoin used to properly daemonize on 0.3.18 on Windows (only bitcoin -daemon not bitcoind -daemon).  This needs more research.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937508", "body": "Hadn't seen pull 131\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937652", "body": "Although I disagree, UPnP is now set to off by default in all makefiles.  \nfHaveUPnP is used in many places now, however #ifdef USE_UPNP was still used in several.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940269", "body": "Works for me, though isn't the standard to check for **WXMSW** instead of WIN32 even on bitcoind in most of the code?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475036", "body": "Yes, care to write it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475061", "body": "OpenSSL allocates the memory itself, so you have to hack up openssl to make it mlock.  (for some reason the entire openssl source code has no references to mlock()).  There are functions in openssl that allow you to override malloc, though I can't remember what they were and they aren't documented, well unless you count nondescriptive comments.  \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475084", "body": "You never know what other issues might have gotten in the way, this way it captures more errors than just the return value of TopUpKeyPool will.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475117", "body": "In the small amount of research I did when I was looking at doing this, it looked overriding malloc for openssl was the only safe way (note that yours isnt much safer than not because its in the memory un-mlocked during the creation of the key, which probably takes longer than anything using that key.  Its not a matter of modifying openssl, it provides publicly-accessible functions to make it override malloc, so you can use those, but you have to figure out how it works first.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475222", "body": "I was under the impression that there was a function to override malloc for only keying material, but I might be wrong, I didnt do enough research as its not documented and seems too much like a hack for my taste.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562138", "body": "To be safe, it might be a good idea to lock this.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562481", "body": "To be honest, I hadnt thought that through...shouldnt be hard to fix though: #482\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562983", "body": "No way this doesnt need a cs.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562984", "body": "Shouldnt this have a cs?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563007", "body": "Isnt that a bit...overkill?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578510", "body": "60% of listening nodes are 0.3.23 only because 0.3.24 doesnt disconnect you all the time.\nThere are way more 0.3.24 nodes, but they have their connection slots full all the time.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640045", "body": "Are you kidding me?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640235", "body": "I was specifically referring to USE_UPNP= replacement.  It should just be USE_UPNP= on the next line.\nBut updating docs to tell someone to sed the makefile is just wrong, change the makefile and make all of these optional.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640250", "body": "No, Im saying instead of using sed, change make -f makefile.unix to make -f makefile.unix USE_UPNP= as this file already says on line 36.\nI didnt say you should tell people to change the makefile, I'm saying instead of pull requesting a change to the docs, update the makefile so that it is cleaner, bitcoin's source is already a mess, don't make it worse.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640267", "body": "Actually see  #576\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640286", "body": "Luke's pull addresses all three issues.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/686028", "body": "We really need to get more people to host these...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/686028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/687723", "body": "For now, the best way to host one is to run my dnsseed software from https://github.com/TheBlueMatt/dnsseed\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/687723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/693355", "body": "What and why is this commit?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/693355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/693416", "body": "Then why is it in bitcoin/bitcoin?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/693416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/733728", "body": "Can you update in contrib/debian/copyright as well?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/733728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189590", "body": "broke build:\nhttp://jenkins.bluematt.me/job/Bitcoin/273/console\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189704", "body": "Not everyone is on boost 1.47, I believe jenkins compiles against 1.42.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189753", "body": "For the binary windows releases, 1.47 is used, for the binary linux releases 1.40 is used, afaict, for the binary mac releases, 1.49 is used.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189759", "body": "For the ppa linux releases, a bunch of different boost versions are used (from 1.34 to 1.48)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1438746", "body": "Nope, without those lines it didn't compile, with them it did.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1438746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2069444", "body": "You foiled my evil plot to steal everyone's coins... (sad part is, except for one bug in gitian, thats what this change would allow...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2069444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890379", "body": "Doesn't appear to be (mingwthrd is linked)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890467", "body": "Hmm... maybe, it's been a long time since I've looked at this. In any case native building via make file.mingw is largely unsupported.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112368", "body": "The git repo is the master branch, or is that changing?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113403", "body": "I'd suggest\nThe master branch is regularly built and tested, but is not guaranteed to be completely stable.  Tags are regularly created to indicate new official, stable release versions of Bitcoin.  If you would like to help test the Bitcoin core, please contact BitcoinQA@Gmail.com.\nI also like sipa's suggestion of an email that is @bitcoin.org\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134641", "body": "USE_UPNP should be tri-state. ie USE_UPNP=0 is different than USE_UPNP undefined.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134706", "body": "mmm, I guess I just don't know how to read qmake files, or am blind...probably both.  Just wanted to check to make sure.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jadox": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11850", "title": "Failing to compile (qt library)", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\n<!--- What behavior did you expect? -->\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n`make[1]: Entering directory '/media/lolek/Bitcoin-Node/bitcoin/src'\r\nMaking install in .\r\nmake[2]: Entering directory '/media/lolek/Bitcoin-Node/bitcoin/src'\r\nmake[3]: Entering directory '/media/lolek/Bitcoin-Node/bitcoin/src'\r\n /bin/mkdir -p '/usr/local/bin'\r\n  /usr/bin/install -c bitcoind bitcoin-cli '/usr/local/bin'\r\nmake[3]: Nothing to be done for 'install-data-am'.\r\nmake[3]: Leaving directory '/media/lolek/Bitcoin-Node/bitcoin/src'\r\nmake[2]: Leaving directory '/media/lolek/Bitcoin-Node/bitcoin/src'\r\nMaking install in qt\r\nmake[2]: Entering directory '/media/lolek/Bitcoin-Node/bitcoin/src/qt'\r\nmake  install-recursive\r\nmake[3]: Entering directory '/media/lolek/Bitcoin-Node/bitcoin/src/qt'\r\nMaking install in .\r\nmake[4]: Entering directory '/media/lolek/Bitcoin-Node/bitcoin/src/qt'\r\n  CXX      libbitcoinqt_a-bitcoin.o\r\nIn file included from /usr/include/x86_64-linux-gnu/qt5/QtGui/qwindowdefs.h:37:0,\r\n                 from /usr/include/x86_64-linux-gnu/qt5/QtWidgets/qwidget.h:37,\r\n                 from /usr/include/x86_64-linux-gnu/qt5/QtWidgets/qmainwindow.h:37,\r\n                 from /usr/include/x86_64-linux-gnu/qt5/QtWidgets/QMainWindow:1,\r\n                 from bitcoingui.h:12,\r\n                 from bitcoin.cpp:9:\r\n/usr/include/x86_64-linux-gnu/qt5/QtCore/qglobal.h:1067:4: error: #error \"You must build your code with position independent code if Qt was built with -reduce-relocations. \" \"Compile your code with -fPIC (-fPIE is not enough).\"\r\n #  error \"You must build your code with position independent code if Qt was built with -reduce-relocations. \"\\\r\n    ^\r\nMakefile:1232: recipe for target 'libbitcoinqt_a-bitcoin.o' failed\r\nmake[4]: *** [libbitcoinqt_a-bitcoin.o] Error 1\r\nmake[4]: Leaving directory '/media/lolek/Bitcoin-Node/bitcoin/src/qt'\r\nMakefile:2578: recipe for target 'install-recursive' failed\r\nmake[3]: *** [install-recursive] Error 1\r\nmake[3]: Leaving directory '/media/lolek/Bitcoin-Node/bitcoin/src/qt'\r\nMakefile:2735: recipe for target 'install' failed\r\nmake[2]: *** [install] Error 2\r\nmake[2]: Leaving directory '/media/lolek/Bitcoin-Node/bitcoin/src/qt'\r\nMakefile:860: recipe for target 'install-recursive' failed\r\nmake[1]: *** [install-recursive] Error 1\r\nmake[1]: Leaving directory '/media/lolek/Bitcoin-Node/bitcoin/src'\r\nMakefile:509: recipe for target 'install-recursive' failed\r\nmake: *** [install-recursive] Error 1\r\n`\r\nThis error is thrown when trying to compile the Bitcoin Core.\r\nAny ideas what's wrong?\r\n\r\nThanks\r\n\r\nUbuntu 16.04", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "top1st": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11846", "title": "How to add new package for cross compile libcurl", "body": "I added new package for curl.mk\r\n\r\npackage=curl\r\n$(package)_version=7.54.1\r\n$(package)_download_path=http://curl.haxx.se/download\r\n$(package)_file_name=$(package)-$($(package)_version).tar.bz2\r\n$(package)_sha256_hash=fdfc4df2d001ee0c44ec071186e770046249263c491fcae48df0e1a3ca8f25a0\r\n$(package)_dependencies=openssl\r\n\r\ndefine $(package)_set_vars\r\n$(package)_config_opts=--disable-static\r\n$(package)_config_opts+=$($(package)_cflags) $($(package)_cppflags) \r\n$(package)_config_opts_linux=-fPIC -Wa,--noexecstack\r\n$(package)_config_opts_x86_64_linux=linux-x86_64\r\n$(package)_config_opts_i686_linux=linux-generic32\r\n$(package)_config_opts_arm_linux=linux-generic32\r\n$(package)_config_opts_aarch64_linux=linux-generic64\r\n$(package)_config_opts_mipsel_linux=linux-generic32\r\n$(package)_config_opts_mips_linux=linux-generic32\r\n$(package)_config_opts_powerpc_linux=linux-generic32\r\n$(package)_config_opts_x86_64_darwin=darwin64-x86_64-cc\r\n$(package)_config_opts_x86_64_mingw32=mingw64\r\n$(package)_config_opts_i686_mingw32=mingw\r\nendef\r\n\r\ndefine $(package)_preprocess_cmds\r\n  \r\nendef\r\n\r\ndefine $(package)_config_cmds\r\n  ./configure $($(package)_config_opts)\r\nendef\r\n\r\ndefine $(package)_build_cmds\r\n  $(MAKE)\r\nendef\r\n\r\ndefine $(package)_stage_cmds\r\n  $(MAKE) DESTDIR=$($(package)_staging_dir) install\r\nendef\r\n\r\ndefine $(package)_postprocess_cmds\r\n  \r\nendef\r\n\r\nAnd added to package.mk curl\r\n \r\nI cannot compile curl for make HOST=x86_64-w64-mingw32 -j4\r\nPlease help me\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "saleemrashid": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11833", "title": "[Net] WebSocket support", "body": "It would be useful to have WebSocket support to allow JavaScript to connect to the P2P network", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11833/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "IndieRobert": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11827", "title": "Address changes should be visible to the user", "body": "Hi,\r\n\r\nI lost a significant amount of bitcoin because bitcoinqt made transactions I never gave permission to: address changes. I assumed this software was unix-like, that basically it was good software. But because of the address changes, which are not signalled to the user, it is not.\r\n\r\nIssue:\r\n\r\nBitcoin private keys are artefacts of the bitcoin network. This is what the user own and is entitled too when he gets bitcoin.\r\nBitcoin wallets are NOT artefacts of the network, they are not part of the network at all. From the point of view of the network, they are artefact of a 3rd party software. The user may use them, but he doesnt own bitcoin because he owns a wallet, the user owns bitcoins because he owns private keys.\r\n\r\nTherefore, when bitcoinqt makes transaction - address changes - without warning the user, it is a clear breach of unix-like trust - for a lack of better terms.\r\n\r\nBitcoinqt should be unix-like. It should be fully transparent to the user, and not try to appeal to the mass. It should not be up to another software to fulfill that role.\r\n\r\nSolution:\r\n\r\nJust make the address changes visible.\r\n\r\nConclusion:\r\n\r\nI can understand the mistake has been made at the beginning of bitcoin. Bitcoin was supposed to appeal to the mass in order to be used in mass consumption. It is still a mistake, but it is understandable. Today, we know it will never be used to buy a macdonald meal (beside the use of 3rd party software which make you think you do).", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "promag": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11826", "title": "RFC: Activity feature", "body": "This is a RFC regarding adding a new *Activity window* in the UI, which allows to:\r\n - have activity history (truncated, etc);\r\n - pause or cancel tasks if supported individually;\r\n - have multiple progresses concurrently.\r\n\r\nIn terms of patch, `ShowProgress()` signal is removed everywhere and a RAII class is added along with some UI classes:\r\n\r\n```cpp\r\nclass Activity\r\n{\r\n    std::shared_ptr<ActivityData> const d;\r\npublic:\r\n    Activity(const std::string& title);\r\n    ~Activity();\r\n\r\n    void SetTitle(const std::string& title);\r\n    void SetProgress(int progress);\r\n};\r\n```\r\nConsider this the minimal interface for an activity. Some other ideas:\r\n - custom progress range (so the caller doesn't have to calculate percentage)\r\n - add something like `SetPause(bool)`, `IsPaused()`;\r\n - also `Cancel()` and `IsCancelled()`;\r\n - add something like `SetSource(string)` (for instance `SetSource(\"wallet1\")`).\r\n\r\nThe current implementation is thread safe. For now, I've also added a new menu item `Window` where I think we could add `Console` too (another discussion thou).\r\n\r\nPlease see the capture below.\r\n\r\n ![dec-05-2017 02-01-28](https://user-images.githubusercontent.com/3534524/33586256-6b06297e-d960-11e7-9ff4-58b91e1293f2.gif)\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f67dd0aa67ec030d5793dcc69594173d5b69fcc", "message": "[qa] Improve prioritisetransaction functional test"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03a5dc9c3c522c500c77fdecd52d091db048d1b0", "message": "[wallet] Make CWallet::FundTransaction atomic"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d4450a41e9b3f7a739eeefec322bf9366ce824", "message": "[wallet] Tidy up CWallet::FundTransaction"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5", "message": "test: Add createrawtransaction functional tests"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c6199373093bff194f996bca0a85ed52088790", "message": "test: Add multidict to support dictionary with duplicate key (laanwj)"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/320669a363b3674954a08c49541af65f42836b5d", "message": "rpc: Validate replaceable type in createrawtransaction"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b252934362c2971e521df56c26ced56f07deb72", "message": "wallet: Remove unnecessary mempool lock in ReacceptWalletTransactions"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12213", "title": "Add address type to addmultisigaddress and createmultisig", "body": "Adds the option `address_type` to `addmultisigaddress` and `createmultisg` RPC. This also allows to avoid `addwitnessaddress` to obtain an `p2sh-segwit` or `bech32` multsig address.\r\n\r\nRelated to #12210 as this reduces `addwitnessaddress` usage.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12194", "title": "Add change type option to fundrawtransaction", "body": "Adds a new option `change_type` to `fundrawtransaction` RPC. This is useful to override the node `-changetype` argument.\r\n\r\nThe new option is exclusive to `changeAddress` option, setting both raises a RPC error.\r\n\r\nSee also #11403, #12119.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12153", "title": "Avoid permanent cs_main lock in getblockheader", "body": "Based on #12151, this pull reduces the lock scope in `getblockheader` RPC.\r\n\r\nNote, review last commit only.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12151", "title": "Remove cs_main lock from blockToJSON and blockheaderToJSON", "body": "Motivated by https://github.com/bitcoin/bitcoin/pull/11913#discussion_r157798157, this pull makes `blockToJSON` and `blockheaderToJSON` free of `cs_main` locks.\r\n\r\nLocking `cs_main` was required to access `chainActive` in order to check if the block was in the chain and to retrieve the next block index.\r\n\r\nWith the this approach, `CBlockIndex::GetAncestor()` is used in a way to check if the block belongs to the specified chain tip and, at the same time, get the next block index.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12083", "title": "Improve getchaintxstats test coverage", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12080", "title": "Add support to search the address book", "body": "This PR adds support to search the address book for both receiving and sending addresses.\r\n\r\nA specialisation of the `QSortFilterProxyModel` is added to implement the custom filtering.\r\n\r\n<img width=\"757\" alt=\"screen shot 2018-01-03 at 16 05 57\" src=\"https://user-images.githubusercontent.com/3534524/34528196-0347d61e-f0a0-11e7-9bd3-535e9e34ceb8.png\">\r\n<img width=\"759\" alt=\"screen shot 2018-01-03 at 16 00 58\" src=\"https://user-images.githubusercontent.com/3534524/34528202-07c99f24-f0a0-11e7-8e34-cff6a1ba2364.png\">\r\n\r\nCloses #623.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11563", "title": "Improve CheckBlockIndex performance", "body": "This gives a boost to the process as it doesn't make `std::multimap` lookups. Obviously there is a memory tradeoff which I didn't measured yet. However the weight of `CheckBlockIndex` goes from around 9% to 3% (measured in Instruments in regtest with 10000 blocks).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11515", "title": "Assert cs_main is held when retrieving node state", "body": "Replaces a comment with the actual assertion.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11402", "title": "[wallet] Use shared pointer for wallet instances", "body": "This is a small step towards better multi wallet management. Starts by removing the global `vpwallets` and adding an interface to add/remove/retrieve wallets.\r\n\r\nThe way it is now it is possible to have, for instance, `listunspent` RPC and in parallel unload the wallet (once #10740 is merged) without blocking. Once the RPC finishes, the shared pointer will release the wallet.\r\n\r\nIt is also possible to get all existing wallets without blocking because the caller keeps a local list of shared pointers.\r\n\r\nI would like to include either here or in follow ups:\r\n- kind of `WalletManager` class;\r\n- keep a weak pointer so when the app terminates it is possible to gracefully unload the wallet;\r\n- make the new interface thread safe.\r\n\r\nPlease consider this RFC.\r\n\r\nThis is related to #10615, #11383 and #10740.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11041", "title": "Add LookupBlockIndex", "body": "Replace all `mapBlockIndex` lookups with the new `LookupBlockIndex()`. In some cases it avoids a second lookup.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101", "body": "All of these notes can be inside a comment block:\r\n```\r\n<!---\r\nRemove sections that do not apply.\r\n\r\nThis issue tracker is only ...\r\n\r\nGeneral bitcoin questions ...\r\n\r\n...\r\n--->\r\n```\r\nSo that the user can see it when writing but it won't show. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411", "body": "uh, I guess it's what @laanwj suggests above.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151084411/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131948050", "body": "Unrelated change.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131948050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149249866", "body": "Not sure what others think, but since it's markdown, all items can be ` 1. `.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149249866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156708612", "body": "Make the channel name the link instead?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156708612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "LEscobar-Driver": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11825", "title": "When running bitcoind I keep getting - boost::filesystem::space: Operation not permitted       ", "body": "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\n<!--- What behavior did you expect? -->\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n\r\n\r\nBitcoin Client Software and Version Number: Bitcoin Core 0.15.1\r\nOperating System: Ubuntu 16.04\r\nSystem Hardware Specs: 2.4 GHz Intel Core CPU with 16 GB RAM and 750 GB free hard drive space.\r\nDescription of Problem: bitcoind refuses to start up. Keep getting the same error over and over.\r\nScreenshot of the problem: https://imgur.com/pj2KFrh\r\ndebug.log: https://pastebin.com/2LCw5BJt\r\nbitconi.conf: https://pastebin.com/ZsQArYRy\r\n\r\n\r\nI have a 250GB SDD and a 750GB HDD which I use as storage on my ubuntu 16.04. I have been running a full bitcoin node for a few weeks which I just use to practice interacting with the bitcoin client. A few days ago I turned on my node and got this\r\n\r\nEXCEPTION: N5boost10filesystem16filesystem_errorE       \r\nboost::filesystem::space: Operation not permitted       \r\nbitcoin in AppInit()       \r\n\r\nError: Error: A fatal internal error occurred, see debug.log for details\r\nError: Error: A fatal internal error occurred, see debug.log for details\r\n\r\nI have NO idea how to proceed. I have uninstalled bitcoin core from my system, reformatted my storage drive, reinstalled ubuntu, and just spend hours trying to debug this f'ing issue. I have posted on several message boards and have received literally no helpful replies. My storage HDD is located within the media folder, which I changed permissions on for any user to use. Occasionally bitcoind will start and simply just stay at block 0.... Really frustrated and quite frankly im on the verge of moving on to other projects. Any help me would be greatly appreciated. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "unsystemizer": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11819", "title": "Stricter validation for CLI options and syntax", "body": "Using 0.15.1 from BitcoinCore.org:\r\n```\r\n$ bitcoin-qt -rescan 1 -wallet otherWallet.dat \r\nPaymentServer::ipcSendCommandLine: Payment request file does not exist:  \"1\"\r\n\"PaymentServer::verifySize: Payment request too large (720896 bytes, allowed 50000 bytes).\"\r\n```\r\nMaybe this pilot error could be handled better. For example, Bitcoin-Qt (or bitcoind) could refuse to start.\r\n\r\nNote that in the above case Bitcoin-Qt silently ends up using a wrong (default) wallet. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11811", "title": "Bitcoin-Qt Coin Selection window has unnecessary columns \"9\" and \"10\"", "body": "Maybe they have some purpose, but it isn't immediately obvious. I tried Tree & List mode, they're never populated.\r\n\r\n![image](https://user-images.githubusercontent.com/13134193/33488849-04a2c8a6-d6ed-11e7-85c3-5c05f1ec5346.png)\r\n\r\n* Bitcoin-Qt 0.15.1 for Ubuntu 16.04 x64 (from http://ppa.launchpad.net/bitcoin/bitcoin/ubuntu xenial/main amd64)\r\n\r\nNote: I just noticed I'm *not* seeing this on Ubuntu 17.10 x64 with 0.15.1 downloaded from bitcoincore.org. \r\n\r\n![image](https://user-images.githubusercontent.com/13134193/33491553-9584dc62-d6f5-11e7-9ba7-e074e0e36151.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11788", "title": "Bitcoin-Qt (Settings) reports incorrect \"Size of database cache\"", "body": "```\r\n$ ./bitcoin-0.15.1/bin/bitcoind --version\r\nBitcoin Core Daemon version v0.15.1\r\nCopyright (C) 2009-2017 The Bitcoin Core developers\r\n$ cat .bitcoin/bitcoin.conf | grep dbcache\r\ndbcache=8000\r\n```\r\ndebug.log reflects the correct amount:\r\n```\r\n2017-11-29 17:26:04 * Using 7990.0MiB for in-memory UTXO set (plus up to 286.1MiB of unused mempool space)\r\n```\r\nHowever, the UI does not:\r\n\r\n![image](https://user-images.githubusercontent.com/13134193/33389589-50a3fb9c-d56e-11e7-9be5-f4ae82855763.png)\r\n\r\nBoth Bitcoin-Qt and bitcoind log the correct amount, only Bitcoin-Qt UI reports 450 MB instead of 8 GB.\r\nI tried to start it with `-dbcache=8000`, it still shows 450 MB.\r\n\r\n* Ubuntu 17.10 x64\r\n* Bitcoin 0.15.1 downloaded from bitcoincore.org", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11360", "title": "Error: Prune: last wallet synchronisation goes beyond pruned data", "body": "On startup, I get \"Error: Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"\r\n\r\nAs noted below, this message seems wrong as I was able to restart w/o issues - didn't reindex or download the blockchain again.\r\n\r\nI am not asking for help with this. I just wanted to record this incident because #7494 was closed as fixed, but I ran into the same problem with 0.15.\r\n\r\n### Can you reliably reproduce the issue?\r\nNo.\r\n\r\n#### If so, please list the steps to reproduce below:\r\n1. Run 0.14.2 in pruned mode\r\n2. Stop/start/stop 0.14.2 several times\r\n3. Upgrade to 0.15\r\n3. Start 0.15\r\n\r\nI am *not* sure how I might reproduce this, but it's very much like this issue here:\r\nhttps://github.com/bitcoin/bitcoin/issues/7494#issue-132587553\r\n\r\nI *might* have had a power failure or rebooted the host without shutting down this VM, I don't remember now. Today is Sep 18; I see in .bitcoin/chainstate that it seems Sep 10 was the last time I ran, and before that in August. \r\nIt's possible that on Sep 10 I shut down the VM before it finished syncing which is one of possible reasons for this problem, mentioned in issue #7494. \r\n\r\n### What version of bitcoin-core are you using?\r\nv0.15.0 (official binary)\r\n\r\n### Machine specs:\r\n- OS: Ubuntu 16.04 LTS\r\n- CPU: i7\r\n- RAM: 16 G\r\n- Disk size: 200 G\r\n- Disk Type (HD/SDD): SSD\r\n\r\n### Any extra information that might be useful in the debugging process.\r\n\r\nI just restarted. I did delete .lock before that, but I don't think it mattered.\r\n\r\nNext time I started, there was no sign of any trouble. It doesn't look like Bitcoin had to completely resync .\r\nWallet seems to be working OK (I don't have any funds in it, but getbalance and such doesn't give any errors; I never used wallet so it's empty). \r\n\r\nFail log:\r\n\r\n```\r\n# tail -f .bitcoin/debug.log\r\n2017-09-18 12:58:57 init message: Loading block index...\r\n2017-09-18 12:58:57 Opening LevelDB in /root/.bitcoin/blocks/index\r\n2017-09-18 12:58:57 Opened LevelDB successfully\r\n2017-09-18 12:58:57 Using obfuscation key for /root/.bitcoin/blocks/index: 0000000000000000\r\n2017-09-18 12:59:00 LoadBlockIndexDB: last block file = 994\r\n2017-09-18 12:59:00 LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=58, size=46642763, heights=483555...484527, time=2017-09-05...2017-09-10)\r\n2017-09-18 12:59:00 Checking all blk files are present...\r\n2017-09-18 12:59:00 LoadBlockIndexDB(): Block files have previously been pruned\r\n2017-09-18 12:59:00 LoadBlockIndexDB: transaction index disabled\r\n2017-09-18 12:59:00 Opening LevelDB in /root/.bitcoin/chainstate\r\n2017-09-18 12:59:02 Opened LevelDB successfully\r\n2017-09-18 12:59:02 Using obfuscation key for /root/.bitcoin/chainstate: 268af1ce9bee0cb3\r\n2017-09-18 12:59:02 Loaded best chain: hashBestChain=0000000000000000011c5c5d5158781964fa1c62c76436a7c048f3b60bf767ce height=484527 date=2017-09-10 15:00:52 progress=0.991703\r\n2017-09-18 12:59:02 init message: Rewinding blocks...\r\n2017-09-18 12:59:03 init message: Verifying blocks...\r\n2017-09-18 12:59:03 Verifying last 6 blocks at level 3\r\n2017-09-18 12:59:03 [0%]...[16%]...[33%]...[50%]...[66%]...[83%]...[99%]...[DONE].\r\n2017-09-18 12:59:08 No coin database inconsistencies in last 7 blocks (8434 transactions)\r\n2017-09-18 12:59:08  block index           10261ms\r\n2017-09-18 12:59:08 init message: Loading wallet...\r\n2017-09-18 12:59:08 nFileVersion = 140100\r\n2017-09-18 12:59:08 Keys: 102 plaintext, 0 encrypted, 102 w/ metadata, 102 total\r\n2017-09-18 12:59:08  wallet                    6ms\r\n2017-09-18 12:59:08 keypool added 900 keys (0 internal), size=1000 (0 internal)\r\n2017-09-18 12:59:08 Error: Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\r\n2017-09-18 12:59:08 scheduler thread interrupt\r\n2017-09-18 12:59:08 Shutdown: In progress...\r\n2017-09-18 12:59:08 Shutdown: done\r\n2017-09-18 12:59:08 CDBEnv::EnvShutdown: Error 22 shutting down database environment: Invalid argument\r\n^C\r\n```\r\n\r\nAfter that I checked db.log:\r\n\r\n```\r\n# cat db.log\r\nDatabase handles still open at environment close\r\nOpen database handle: wallet.dat/main\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11360/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thunderchart": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11816", "title": "Segmentation fault (core dumped)", "body": "I'm trying to run ./bitcoind on Ubuntu 17\r\n\r\n```\r\nError: Error: A fatal internal error occurred, see debug.log for details\r\nSegmentation fault (core dumped)\r\n\r\n```\r\nIn debug.log\r\n```\r\n2017-12-01 20:18:50 Bitcoin version v0.15.99.0-g9e38d357447\r\n2017-12-01 20:18:50 InitParameterInteraction: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\r\n2017-12-01 20:18:50 Assuming ancestors of block 0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a have valid signatures.\r\n2017-12-01 20:18:50 Setting nMinimumChainWork=000000000000000000000000000000000000000000723d3581fe1bd55373540a\r\n2017-12-01 20:18:50 Using the 'sse4' SHA256 implementation\r\n2017-12-01 20:18:50 Using RdRand as an additional entropy source\r\n2017-12-01 20:18:50 Default data directory /home/home/.bitcoin\r\n2017-12-01 20:18:50 Using data directory /home/home/.bitcoin\r\n2017-12-01 20:18:50 Using config file /home/home/.bitcoin/bitcoin.conf\r\n2017-12-01 20:18:50 Using at most 125 automatic connections (1024 file descriptors available)\r\n2017-12-01 20:18:50 Using 16 MiB out of 32/2 requested for signature cache, able to store 524288 elements\r\n2017-12-01 20:18:50 Using 16 MiB out of 32/2 requested for script execution cache, able to store 524288 elements\r\n2017-12-01 20:18:50 Using 2 threads for script verification\r\n2017-12-01 20:18:50 scheduler thread start\r\n2017-12-01 20:18:50 HTTP: creating work queue of depth 16\r\n2017-12-01 20:18:50 No rpcpassword set - using random cookie authentication\r\n2017-12-01 20:18:50 Generated RPC authentication cookie /home/home/.bitcoin/.cookie\r\n2017-12-01 20:18:50 HTTP: starting 4 worker threads\r\n2017-12-01 20:18:50 Using wallet directory /home/home/.bitcoin/wallets\r\n2017-12-01 20:18:50 init message: Verifying wallet(s)...\r\n2017-12-01 20:18:50 Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\r\n2017-12-01 20:18:50 Using wallet wallet.dat\r\n2017-12-01 20:18:50 CDBEnv::Open: LogDir=/home/home/.bitcoin/wallets/database ErrorFile=/home/home/.bitcoin/wallets/db.log\r\n2017-12-01 20:18:50 Cache configuration:\r\n2017-12-01 20:18:50 * Using 2.0MiB for block index database\r\n2017-12-01 20:18:50 * Using 8.0MiB for chain state database\r\n2017-12-01 20:18:50 * Using 440.0MiB for in-memory UTXO set (plus up to 286.1MiB of unused mempool space)\r\n2017-12-01 20:18:50 init message: Loading block index...\r\n2017-12-01 20:18:50 Opening LevelDB in /home/home/.bitcoin/blocks/index\r\n2017-12-01 20:18:50 Opened LevelDB successfully\r\n2017-12-01 20:18:50 Using obfuscation key for /home/home/.bitcoin/blocks/index: 0000000000000000\r\n2017-12-01 20:18:50 LoadBlockIndexDB: last block file = 0\r\n2017-12-01 20:18:50 LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=0, size=0, heights=0...0, time=1970-01-01...1970-01-01)\r\n2017-12-01 20:18:50 Checking all blk files are present...\r\n2017-12-01 20:18:50 LoadBlockIndexDB: transaction index disabled\r\n2017-12-01 20:18:50 Initializing databases...\r\n2017-12-01 20:18:50 Pre-allocating up to position 0x1000000 in blk00000.dat\r\n2017-12-01 20:18:50 Opening LevelDB in /home/home/.bitcoin/chainstate\r\n2017-12-01 20:18:50 Opened LevelDB successfully\r\n2017-12-01 20:18:50 Wrote new obfuscate key for /home/home/.bitcoin/chainstate: f22764d2d2990e26\r\n2017-12-01 20:18:50 Using obfuscation key for /home/home/.bitcoin/chainstate: f22764d2d2990e26\r\n2017-12-01 20:18:50 init message: Rewinding blocks...\r\n2017-12-01 20:18:50  block index             118ms\r\n2017-12-01 20:18:50 init message: Loading wallet...\r\n2017-12-01 20:18:50 nFileVersion = 159900\r\n2017-12-01 20:18:50 Keys: 0 plaintext, 0 encrypted, 0 w/ metadata, 0 total\r\n2017-12-01 20:18:50 Performing wallet upgrade to 60000\r\n2017-12-01 20:18:51 keypool added 2000 keys (1000 internal), size=2000 (1000 internal)\r\n2017-12-01 20:18:51  wallet                 1388ms\r\n017-12-01 20:18:51 setKeyPool.size() = 2000\r\n2017-12-01 20:18:51 mapWallet.size() = 0\r\n2017-12-01 20:18:51 mapAddressBook.size() = 0\r\n2017-12-01 20:18:51 ERROR: ReadBlockFromDisk: Errors in block header at CBlockDiskPos(nFile=0, nPos=8)\r\n2017-12-01 20:18:51 *** Failed to read block\r\n2017-12-01 20:18:51 Error: Error: A fatal internal error occurred, see debug.log for details\r\n2017-12-02 00:07:28\r\n```\r\nI've tried **./bitcoind -reindex** It's starting now, but not working properly. See debug.log:\r\n\r\n```\r\n2017-12-02 10:38:45 init message: Loading block index...\r\n2017-12-02 10:38:45 Wiping LevelDB in /home/home/.bitcoin/blocks/index\r\n2017-12-02 10:38:45 Opening LevelDB in /home/home/.bitcoin/blocks/index\r\n2017-12-02 10:38:45 Opened LevelDB successfully\r\n2017-12-02 10:38:45 Using obfuscation key for /home/home/.bitcoin/blocks/index: 0000000000000000\r\n2017-12-02 10:38:45 Initializing databases...\r\n2017-12-02 10:38:45 Wiping LevelDB in /home/home/.bitcoin/chainstate\r\n2017-12-02 10:38:45 Opening LevelDB in /home/home/.bitcoin/chainstate\r\n2017-12-02 10:38:45 Opened LevelDB successfully\r\n2017-12-02 10:38:45 Wrote new obfuscate key for /home/home/.bitcoin/chainstate: 5def55d4b4b2f334\r\n2017-12-02 10:38:45 Using obfuscation key for /home/home/.bitcoin/chainstate: 5def55d4b4b2f334\r\n2017-12-02 10:38:45  block index              96ms\r\n2017-12-02 10:38:45 init message: Loading wallet...\r\n2017-12-02 10:38:45 nFileVersion = 159900\r\n2017-12-02 10:38:45 Keys: 2001 plaintext, 0 encrypted, 2001 w/ metadata, 2001 total\r\n2017-12-02 10:38:45  wallet                   45ms\r\n2017-12-02 10:38:45 setKeyPool.size() = 2000\r\n2017-12-02 10:38:45 mapWallet.size() = 0\r\n2017-12-02 10:38:45 mapAddressBook.size() = 0\r\n2017-12-02 10:38:45 Reindexing block file blk00000.dat...\r\n2017-12-02 10:38:45 ERROR: AcceptBlock: high-hash, proof of work failed (code 16)\r\n2017-12-02 10:38:45 Reindexing finished\r\n2017-12-02 10:38:45 Failed to open mempool file from disk. Continuing anyway.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sejanus66": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11812", "title": "MinGW Runtime Assertion - Assertion failed!", "body": "This issue has just popped up on my PC.  I was running 0.15.1 without issue.  Now at startup I get an error.\r\n\r\nMinGW Runtime Assertion\r\n\r\nAssertion failed!\r\n\r\nProgram: D:\\Bitcoin Core (64-bit)\\bitcoin-0.15.1\\bin\\bitcoin-qt.exe\r\nFile: chain.cpp, Line 101\r\n\r\nExpression: pindexWalk->pprev\r\n\r\nAbort\t\tRetry\t\tIgnore\r\n\r\nThe program crashes after that.  Removed and reinstalled with new download, same issue.  Running on Windows 64-bit Pro v.1703, i7-6700 CPU, 32 GB ram\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davimello28": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11810", "title": "Block Explorers should be included (as optional)!", "body": "Before anything, I've read all of the other posts about this topic. It includes \"extra indexes\", \"txIndexes\", \"block explorers\" and some other topics. English is not my native language, but I will try my best. \r\n\r\n**Resume of the issue:** Node software does not contain an alternative to index all the Blockchain data.\r\n**What I think that could solve the issue:** Implement an option to include the extra indexes, and implement new RPC calls in case of this extra indexes exists. Make a RPC Block Explorer.\r\n**Why you should do that instead of others**: Because it would be easier for you to make it and everybody uses your software. \r\n\r\n**Why I think this is important:**\r\n\r\nEvery time a someone sends Bitcoins from one address to another, they take a look at a Block Explorer to see if the transaction has actually worked fine. It does not matter the value of the transaction because it feels like you are getting a \"payment voucher\" (the ticket that you received after paying for something containing some details about the transaction). It happens a lot. \r\n\r\nThe issue is that all of this Block Explorers are \"visions\" of the blockchain. None of them actually IS the blockchain, and none of them should be used like it is blockchain. And unfortunately a huge number of dev's relay on the public APIs from services like Blockchain.info and Blockcypher. They cannot avoid that, since deploying a personal block explorer - even for a independent \"vision\" of the blockchain - requires a lot of work in a lot of different environments. \r\n\r\nIf one of this services lies to us for any reason, we have to believe them. And even if we try to use multiple services, we are restricted to a very feel number of them.\r\n\r\nAnd there is more. \r\n\r\nImagine this: nodes have a very small incentive to keep them running. The blockchain is getting bigger, the number of transactions is exponentially increasing. This \"vision of the truth\" factor sounds pretty seductive (aka lucrative). I'm not saying that this already happened, but I'm afraid that it might happen. Internet hooligans are there, and every developer - especially financial related developers -  should be afraid of them. \r\n\r\nI wrote an article in Portuguese about the risk of a correlation attack to identify a wallet owner, especially on countries that have a \"tuff government\". Most of the people do not run their wallets directly from the node, so we can track down an IP address that has used the block explorer and link it to the owner. I know that Bitcoin is not about privacy (not directly, like Monero, ZCash..), but even this Zero-Knowledge Proofs are tricky if you access them from your PC.  The Onion support is awesome but partially inefficient against this issue.  \r\n\r\nI'm not sure if you guys can understand my concern. We are constantly receiving news about wallets from Blockchain.info being hacked (even if the 2FA is enabled). It makes me worry even more. \r\n\r\nThe solution, in my point of view, is to unleash all the power that the blockchain data already have. I run a full node at home - on a singular blade server for research purpose - and it would be awesome if I can index all the data so that I can see what is going on. And I'm not even saying anything about a Web UI to allow people to publish their nodes (although I can draw a particularly beautiful one for you if you want - I hate Insights). Just the RPC calls would solve most of the problems. \r\n\r\nThanks for your time.\r\n \r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "karel-3d": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11800", "title": "Bitcoin is returning higher fees for 36 block window than 2 block window (on testnet)", "body": "In testnet, right now, `estimatesmartfee` is returning *higher* estimates for 36 block window than 2 block window. The results:\r\n\r\n```\r\nestimatesmartfee 2 ->\r\n{\r\n  \"feerate\": 0.01254483,\r\n  \"blocks\": 2\r\n}\r\n\r\nestimatesmartfee 36 ->\r\n{\r\n  \"feerate\": 0.03863968,\r\n  \"blocks\": 36\r\n}\r\n\r\n\r\nestimaterawfee 2 ->\r\n{\r\n  \"short\": {\r\n    \"decay\": 0.962,\r\n    \"scale\": 1,\r\n    \"fail\": {\r\n      \"startrange\": 490954,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 35,\r\n      \"totalconfirmed\": 35.41,\r\n      \"inmempool\": 165,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"errors\": [\r\n      \"Insufficient data or no feerate found which meets threshold\"\r\n    ]\r\n  },\r\n  \"medium\": {\r\n    \"feerate\": 0.01254483,\r\n    \"decay\": 0.9952,\r\n    \"scale\": 2,\r\n    \"pass\": {\r\n      \"startrange\": 626596,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 38,\r\n      \"totalconfirmed\": 38.96,\r\n      \"inmempool\": 1,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 596758,\r\n      \"endrange\": 626596,\r\n      \"withintarget\": 15.9,\r\n      \"totalconfirmed\": 50.78,\r\n      \"inmempool\": 14,\r\n      \"leftmempool\": 0\r\n    }\r\n  },\r\n  \"long\": {\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"fail\": {\r\n      \"startrange\": 799713,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 138.78,\r\n      \"totalconfirmed\": 147.56,\r\n      \"inmempool\": 1,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"errors\": [\r\n      \"Insufficient data or no feerate found which meets threshold\"\r\n    ]\r\n  }\r\n}\r\n\r\nestimaterawfee 36 ->\r\n{\r\n  \"medium\": {\r\n    \"feerate\": 0.01254483,\r\n    \"decay\": 0.9952,\r\n    \"scale\": 2,\r\n    \"pass\": {\r\n      \"startrange\": 690822,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 37.33,\r\n      \"totalconfirmed\": 38.19,\r\n      \"inmempool\": 1,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 596758,\r\n      \"endrange\": 690822,\r\n      \"withintarget\": 47.22,\r\n      \"totalconfirmed\": 51.99,\r\n      \"inmempool\": 12,\r\n      \"leftmempool\": 0\r\n    }\r\n  },\r\n  \"long\": {\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"fail\": {\r\n      \"startrange\": 799713,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 139.47,\r\n      \"totalconfirmed\": 147.66,\r\n      \"inmempool\": 1,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"errors\": [\r\n      \"Insufficient data or no feerate found which meets threshold\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nI am also attaching fee_estimates.dat\r\n\r\n[fee_estimates.dat.zip](https://github.com/bitcoin/bitcoin/files/1518545/fee_estimates.dat.zip)\r\n\r\nOf course testnet is always \"weird\", but 36 block estimate being higher than 2 block estimate doesn't make sense, even on testnet.\r\n\r\nThe version of bitcoind is v0.15.0.0", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11386", "title": "RPC: Consistently use UniValue.pushKV instead of push_back(Pair())", "body": "As I was poking in the code, I didn't like that at some places, pushKV is being used, and at other places, push_back(Pair()) is being used. So I changed the style to pushKV. (It's done automatically by sed, see the git comment on the first commit)\r\n\r\nI also realized that the Pair Univalue code is not used anymore with this change anymore, and since there is this comment in the source code for about 2 years\r\n\r\n> // Most duplicate other methods, and should be removed\r\n\r\nI went ahead and removed it\r\n\r\nIt's all mostly bikeshed", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajtowns": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11782", "title": "Assertion failure in validation.cpp:4203 (re: pindexFirstNeverProcessed)", "body": "Reported by @rustyrussell on irc:\r\n\r\n    <rusty> Latest master branch, bitcoind in regtest mode:\r\n    bitcoind: validation.cpp:4203: void CheckBlockIndex(const Consensus::Params&): Assertion `(pindexFirstNeverProcessed != nullptr) == (pindex->nChainTx == 0)' failed.\r\n    <rusty> Pretty sure that was a .bitcoind dir from an older bitcoind.\r\n\r\nI can reproduce this error with the following simple test case:\r\n\r\n    class RustyAssertTest(BitcoinTestFramework):\r\n        def set_test_params(self):\r\n            self.num_nodes = 1\r\n            self.setup_clean_chain = True\r\n\r\n        def run_test(self):\r\n            self.log.info(\"initialise chain by activating segwit\")\r\n            self.restart_node(0, [\"-vbparams=segwit:0:999999999999\"])\r\n            self.nodes[0].generate(500)\r\n            assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'active')\r\n\r\n            self.log.info(\"restart with segwit always active\")\r\n            self.restart_node(0)\r\n\r\nor by hand by running:\r\n\r\n    $ rm -rf ~/.bitcoin/regtest\r\n    $ ./bitcoind -regtest -vbparams=segwit:0:999999999999 -daemon\r\n    $ ./bitcoin-cli -regtest generate 500\r\n    $ ./bitcoin-cli -regtest stop\r\n    $ ./bitcoind -regtest\r\n    bitcoind: validation.cpp:4213: void CheckBlockIndex(const Consensus::Params&): Assertion `(pindexFirstNeverProcessed != nullptr) == (pindex->nChainTx == 0)' failed.\r\n    Aborted\r\n\r\nI believe what's happening is:\r\n\r\n * bitcoind is invoking RewindBlockIndex at startup, and seeing that segwit is immediately active (due to #11389), but it doesn't have witness data stored (because the blocks were generated with segwit only activating following bip9)\r\n * so the blocks are disconnected and then their validity is reduced, by setting nTx and nChainTx both to 0\r\n * once that's done, RewindBlockIndex calls CheckBlockIndex which is where the assertion fails\r\n * pindexFirstNeverProcessed gets set quickly, because nTx is mostly 0, and it stays set provided there's a subnode, of which there should be plenty\r\n * the assertion then fails when it hits a block where nChainTx != 0\r\n * and that happens as soon as it gets to a block where segwit had activated under bip9 rules: since segwit had activated, that block was stored with witness data, and the validation reduction didn't occur, leaving nChainTx as whatever it had been -- this should be block 433 on regtest i think (144 blocks of started, 144 blocks active voting, 144 blocks locked in, and 1 block active)\r\n\r\nI don't think this bug can be hit on mainnet or testnet -- running an old client will either not recognise segwit at all and never store any witness data (so nChainTx won't be non-zero), or will see segwit started at the exact same block the current client does (so won't reduce the validation of any blocks). It also shouldn't impact most future bip 9 (or similar) deployments, as most of those presumably won't need to change the storage format.\r\n\r\nSo I think this might just warrant a cleaner error message rather than handling it properly. Perhaps RewindBlockIndex's test should change from:\r\n\r\n    if (IsWitnessEnabled(pprev) && !BLOCK_OPT_WITNESS && !chainActive) { ... }\r\n\r\nto something like:\r\n\r\n    if (IsWitnessEnabled(pprev)) {\r\n        if (!BLOCK_OPT_WITNESS && !chainActive) {\r\n            ...\r\n        } else if (BLOCK_OPT_WITNESS && pprev->nChainTx == 0) {\r\n            LogPrintf(\"segwit activation height has changed, cannot reuse blockchain\");\r\n            return false;\r\n        }\r\n    }\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11782/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c99a3c32c830384a9959a468a13441fcd2e48a72", "message": "[tests] util_tests.cpp: actually check ignored args\n\nAn array with 7 elements was setup for checking argument parsing, but\nwas passed to ParseParamaeters with argc=5, meaning the interpretation\nof the last two arguments was never actually checked."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fecd842a6ff3d094c21f84b81b6cef09787c3b7", "message": "[tests] Remove redundant import in blocktools.py test"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039", "message": "[tests] Check tests conform to naming convention\n\nExtra-Author: John Newbery <john@johnnewbery.com>"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a7c09aebf8b0229e9f320135472275d244a7a35", "message": "test: Add tests for `-debuglogfile` with subdirs"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7250b4e5630ec6e440652855876ba83b0365a15a", "message": "[tests] README.md nit fixes"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862", "title": "[wip] Network specific conf sections", "body": "The weekly meeting on [2017-12-07](http://www.erisian.com.au/meetbot/bitcoin-core-dev/2017/bitcoin-core-dev.2017-12-07-19.00.log.html) discussed allowing options to bitcoin to have some sensitivity to what network is in use. @theuni suggested having sections in the config file:\r\n\r\n    <cfields> an alternative to that would be sections in a config file. and on the\r\n              cmdline they'd look like namespaces. so, [testnet] port=5. or -testnet::port=5.\r\n\r\nThis approach is (more or less) supported by `boost::program_options::detail::config_file_iterator` -- when it sees a `[testnet]` section with `port=5`, it will treat that the same as \"testnet.port=5\". So `[testnet] port=5` (or `testnet.port=5` without the section header) in bitcoin.conf and `-testnet.port=5` on the command line.\r\n\r\nThe other aspect to this question is possibly limiting some options so that there is no possibility of accidental cross-contamination across networks. For example, if you're using a particular wallet.dat on mainnet, you may not want to accidentally use the same wallet on testnet and risk reusing keys.\r\n\r\nI've set this up so that the `-addnode` and `-wallet` options are `NETWORK_ONLY`, so that if you have a bitcoin.conf:\r\n\r\n    wallet=/secret/wallet.dat\r\n    upnp=1\r\n\r\nand you run `bitcoind -testnet` or `bitcoind -regtest`, then the `wallet=` setting will be ignored, and should behave as if your bitcoin.conf had specified:\r\n\r\n    upnp=1\r\n\r\n    [main]\r\n    wallet=/secret/wallet.dat\r\n\r\nFor any `NETWORK_ONLY` options, if you're using `-testnet` or `-regtest`, you'll have to add the prefix to any command line options. This was necessary for `multiwallet.py` for instance.\r\n\r\nI've left the \"default\" options as taking precedence over network specific ones, which might be backwards. So if you have:\r\n\r\n    maxmempool=200\r\n    [regtest]\r\n    maxmempool=100\r\n\r\nyour maxmempool will still be 200 on regtest. The advantage of doing it this way is that if you have `[regtest] maxmempool=100` in bitcoin.conf, and then say `bitcoind -regtest -maxmempool=200`, the same result is probably in line with what you expect...\r\n\r\nThe other thing to note is that I'm using the chain names from `chainparamsbase.cpp` / `ChainNameFromCommandLine`, so the sections are `[main]`, `[test]` and `[regtest]`; not `[mainnet]` or `[testnet]` as might be expected.\r\n\r\nThoughts? Ping @MeshCollider @laanwj @jonasschnelli @morcos ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11774", "title": "[WIP] [tests] Rename functional tests", "body": "Taking over #11047 since @jnewbery doesn't have time for it. Original description:\r\n\r\nThis PR changes the functional tests to have a consistent naming scheme:\r\n\r\n    tests for individual RPC methods are named rpc_...\r\n    tests for interfaces (REST, ZMQ, RPC features) are named interface_...\r\n    tests that explicitly test the p2p interface are named p2p_...\r\n    tests for wallet features are named wallet_...\r\n    tests for mining features are named mining_...\r\n    tests for mempool behaviour are named mempool_...\r\n    tests for full features that aren't wallet/mining/mempool are named feature_...\r\n\r\nRationale: it's sometimes difficult for new contributors to know what's already covered by existing tests and where new tests should be added. Naming in a consistent fashion makes it easier to see what's already covered at a glance.\r\n\r\nChanges since #11047: rebased, nit fixes, swapped old,new to new,old and sorted in the conversion script, and added a check for test cases that don't conform to the naming convention.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11494", "title": "Clarify BIP9 behaviour when nTimeout <= 0", "body": "Adds a comment in the BIP9Deployment class declaration for when to set\r\nnTimeout=0, and changes the checks for (nTimeout!=0) to (nTimeout>0)\r\nfor consistency.\r\n\r\nThe remaining comparison for nTimeout is in rpc/blockchain.cpp:BIP9SoftForkDescPushBack which already checks for >0 rather than !=0.\r\n\r\nCompatible with #11389 which adds another special case behaviour (negative nStartTime) for defining \"BIP9\" deployments.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10996", "title": "Add per-network config file network.conf", "body": "Adds a per-net network.conf as per #9374 ; this is pretty much the same as #9402 which was closed for lack of interest.\r\n\r\nIt's somewhat interesting in the context of #10994 because it provides somewhere to stick the network-specific vbignore settings. Unless I'm missing something, I don't think #10267 provides an easy way of doing per-network config files, so wouldn't work well for that particular use case.\r\n\r\nThis patch doesn't include any tests, so is marked as WIP. There's some test code in #10267 that would presumably be able to be adapted pretty easily.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10994", "title": "Add option to avoid warning on certain network upgrades", "body": "The \"-vbignore=bit:start:end\" option can be used to prevent bitcoin\r\nfrom alerting the user of known but uninteresting proposed upgrades\r\nthat are being signalled via the version field.\r\n\r\nThis hopefully provides the feature requested in issue #8266, allow version bits to have an \"ignore button\". It requires specifying start and end times rather than a final block height, which should map better to BIP 9 implementations. It also allows multiple deployments on a single bit to be ignored independently -- if the bit is used in between any deployments, it will still generate warnings.\r\n\r\nThis setting will also avoid the bit from triggering the \"Unknown block versions being mined\" warning during the set period.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarcoFalke": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11778", "title": "[qa] Net.py fails occasionally", "body": "In net.py we compare the exact number of bytes transmitted or received of two subsequently called rpcs. This fails occasionally. I hypothesise that this might be caused by cross-traffic that happens in between those rpcs, which are obviously not called atomically.\r\n\r\nIf that is the case, we might be able to repeat the calls up to ${n} times and hope that cross-traffic does not happen in all ${n} cases.\r\n\r\nRelevant example log:\r\n* https://travis-ci.org/bitcoin/bitcoin/jobs/305878397", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11777", "title": "[qa] Tests on travis occasionally raise http.client.BadStatusLine: ''", "body": "Unrelated to any specific test, randomly a BadStatusLine might raise when reading the response.\r\n\r\nThis only happens on travis, so assigning low priority.\r\n\r\nRecent examples:\r\n* https://travis-ci.org/bitcoin/bitcoin/jobs/305896233\r\n* https://travis-ci.org/bitcoin/bitcoin/jobs/303959420\r\n* ... I might recall seeing those as far as two months back ...", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11696", "title": "travis failure in p2p-segwit", "body": "Saw this the first time and keeping track of it by filing an issue.\r\n\r\n```\r\nFile \"p2p-segwit.py\", line 1006, in test_block_relay\r\n    assert_equal(wit_block.serialize(True), hex_str_to_bytes(rpc_block))\r\n```\r\nCommit: 927a1d7d088e52aa079682e1d4f514222c0a2069\r\nJob: https://travis-ci.org/bitcoin/bitcoin/jobs/302552842", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e4b9b5100ec15217d43edb5f4149439f4b20a5", "message": "Merge #12187: [Docs] Updating benchmarkmarking.md with an updated sample output\n\nb21244e0be Updating benchmarkmarking.md with an updated sample output and help options (Jeff Rade)\n\nPull request description:\n\n  This PR is just a documentation update for someone (or myself) that looks into finishing up #7883 in the future.\n\n  Looked through #7883 and appears [ryanofsky's PR](https://github.com/bitcoin/bitcoin/pull/8873) setup the benchmarks, but there are `FIXME` comments to pull in data from `test/` to get a larger data set (assuming reason why 7883 is still open).\n\nTree-SHA512: d758efc659c75f2b3ceb376f5a466c4234354077e4671ac3eb901c082c4e519ce5ff592cea4742711050b4ce56a1b65ef69433dd74e7db3eb11a8567d517d9e2"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b987ca4ee495a7fff82f0ac14ef0753bfb7586e2", "message": "Merge #12227: test_runner: Readable output if create_cache.py fails\n\nac96e788fa test_runner: Readable output if create_cache.py fails (Russell Yanofsky)\n\nPull request description:\n\n  Without this change, create_cache.py process output is shown as a byte() object\n  with \\n escapes in a single line that is hard to read.\n\nTree-SHA512: 49cd0fff037c03f558e31a1281712cc4419df6c4ed8b342057a3d54ab6b31180e1a23cb586686952d81b8add5bec07844efa8cdf16ad20f40cc903a19437fda5"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b03013396cb2f4bf25746388b3982a2c3616e16b", "message": "Merge #12241: [trivial][docs] Fix incorrect link in /test/ README.md\n\nbf1897710f [trivial][docs] Fix incorrect link in /test/ README.md (fanquake)\n\nPull request description:\n\nTree-SHA512: f9024a5b6b03c591b9e02057aedd862f479d4b38d293dd04a07e411b877c0fb5b4d95ced7d09190bb8a83078fe8c97db24c5dcdac7cbd59d37b41f614d423026"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a97f39afaa890caa7987c6bc001b9a66e3e74e8", "message": "Merge #12212: Trivial: Fix spelling in zapwallettxes test description\n\n7767842600 Trivial: Fix spelling in zapwallettxes test description (Jeremiah Buddenhagen)\n\nPull request description:\n\nTree-SHA512: 9b7ff6ac75c8cacfa6ebf7992a1688e109643ea6a43cd7977b1d0f0d5e3ca627c0d8aa55f503a1fb492e7da16a8b97621837230ab42af99dcacc28a0a14ecf5c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1e69e52bf8de08b1ce7a774416aa7a8d20068b", "message": "qa: Sync with validationinterface queue in sync_mempools"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad504bf4c302f7a72e0a0e191f3fdbafda7340f", "message": "Merge #12177: trivial: fix address_type help text of getnewaddress and getrawchangeaddress\n\n5f911c5cc2 trivial: fix address_type help text of getnewaddress and getrawchangeaddress (mruddy)\n\nPull request description:\n\n  \"p2sh\" in the help messages should have been \"p2sh-segwit\".\n\n  The messages before this patch:\n\n  `help getnewaddress`\n  \"address_type\"   (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -addresstype.\n\n  `help getrawchangeaddress`\n  \"address_type\"           (string, optional) The address type to use. Options are \"legacy\", \"**p2sh**\", and \"bech32\". Default is set by -changetype.\n\nTree-SHA512: 6dfc0bebe577995f5521b83a12854045ac3eda4e65c9b92fc581da4ee68ab1218e05af82f2154bb2640a0813c5f79e010cd9e5ada449494c8831b3757bda854c"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cf8a03cb57b8639a8d47323bde46ba22d9eeaf", "message": "Merge #12168: Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\n648bdc8cc0 Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/) (Jan Sarenik)\n\nPull request description:\n\n  http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\n  http://man7.org/linux/man-pages/man2/fcntl.2.html\n\nTree-SHA512: 82c7e0aba55f34a6fec60bdecb712b65c84422461454f0ae9eed5e1bb31bf585c5a65f49bbdd5a89feb59140a998ad6fcd5573ede123a12b2ba2ff677d95cc2b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7450cdbd89a1c862f4d4d8bf093f8a0b5448f9c", "message": "Merge #11970: Add test coverage for bitcoin-cli multiwallet calls\n\na14dbff39e Allow multiwallet.py to be used with --usecli (Russell Yanofsky)\nf6ade9ce1a [tests] allow tests to be run with --usecli (John Newbery)\nff9a363ff7 TestNodeCLI batch emulation (Russell Yanofsky)\nca9085afc5 Prevent TestNodeCLI.args mixups (Russell Yanofsky)\nfcfb952bca Improve TestNodeCLI output parsing (Russell Yanofsky)\n\nPull request description:\n\n  Lack of test coverage was pointed out by @jnewbery in https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158133900\n\nTree-SHA512: 5f10e31abad11a5edab0da4e2515e39547adb6ab9e55e50427ab2eb7ec9a43d6b896b579b15863e5edc9beee7d8bf1c84d9dabd247be0760a1b9ae39e1e8ee02"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0910cbe4ef31eb95fd76c7c2f820419fe64a3150", "message": "Merge #12082: Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json\n\n18be3ab139 Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json (Chris Stewart)\n\nPull request description:\n\n  We are missing a test vector for SINGLE|ANYONECANPAY inside of tx_valid.json. This addresses the issue #12060\n\nTree-SHA512: e3526113477dbf575c4a844cf489dcfa2c037c6d928af6f97413edc1a8d29cdf2143da96471cdfd3de08bf5ed178117ed67926fd70fd42ca391ac0bb0d08f3fd"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a810d04b906722c9efe60e3997243c71ff3d4c", "message": "Merge #12150: Fix ListCoins test failure due to unset g_address_type, g_change_type\n\nf765bb3788 Fix ListCoins test failure due to unset g_address_type, g_change_type (Russell Yanofsky)\n\nPull request description:\n\n  New global variables were introduced in #11403 and not setting them causes:\n\n  ```\n  test_bitcoin: wallet/wallet.cpp:4199: CTxDestination GetDestinationForKey(const CPubKey&, OutputType): Assertion `false' failed.\n  unknown location(0): fatal error in \"ListCoins\": signal: SIGABRT (application abort requested)\n  ```\n\n  It's possible to reproduce the failure reliably by running:\n\n  ```\n  src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/ListCoins\n  ```\n\n  Failures happen nondeterministically because boost test framework doesn't run tests in a specified order, and tests that run previously can set the global variables and mask the bug.\n\n  Example travis failure: https://travis-ci.org/bitcoin/bitcoin/builds/327642495\n\nTree-SHA512: 3e0875716f66bc0304cf92a26457e6b54ecfe15ed962f4343577b05fc56bb577554422b7f53949ad6085ac5798ad7816b8176c5b01e050ddbfbb925d2732767a"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45173fa6fca9537abb0a0554f731d14b9f89c456", "message": "Merge #12079: Improve prioritisetransaction test coverage\n\n7f67dd0aa6 [qa] Improve prioritisetransaction functional test (Jo\u00e3o Barbosa)\n\nPull request description:\n\nTree-SHA512: 7a5c446772069cd9ace085ae2635e1f61870c597e2216614628f4b6ebfe209b29f381a182a6f60d09f43f22bb82b59bb573b5441fa8e7b958a5fd0d5aad80d86"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd4ca17360e6fc0c9bb76bf6b5b07c9102c12728", "message": "Merge #12092: [qt] Replaces numbered place marker %2 with %1.\n\n8a93543419 Replaces numbered place marker %2 with %1. (251)\n\nPull request description:\n\n  This PR closes #12015 in which @chen610620 suggests to replace numbered place marker `%2` with `%1`.\n\n  Calling member function`QString::arg()` on a `QString` object with one arbitrary numbered place marker within the range [1,99] works, because `QString::arg()` replaces the _lowest_ numbered place marker in the `QString` object it is called on.\n\n  [QString::arg documentation:](http://doc.qt.io/qt-5/qstring.html#arg)\n  > Returns a copy of this string with the lowest numbered place marker replaced by string a, i.e., %1, %2, ..., %99.\n\n  I suspect that the `%2` marker is just an unfortunate typo or the remainder of a string that used to have multiple numbered place markers.\n\n  This PR replaces the numbered place marker `%2` with `%1` to avoid any confusion in the future.\n\nTree-SHA512: 0bb40cf3b9824e1eeba0a184e72358b30d20e8261e12deb287155b7cc8317ad0b0787ef1d0671325eb8bccc9e51b3037d737015749338c31cf400930840e56b6"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddff3447f29b62d79a33f728791f42fa9436216e", "message": "Merge #11997: [tests] util_tests.cpp: actually check ignored args\n\nc99a3c32c8 [tests] util_tests.cpp: actually check ignored args (Anthony Towns)\n\nPull request description:\n\n  An array with 7 elements was setup for checking argument parsing, but\n  was passed to ParseParamaeters with argc=5, meaning the interpretation\n  of the last two arguments was never actually checked.\n\nTree-SHA512: 7b81fde49742e524f1bb67e2ec084f5909ae36125f237f0210df4587c62e5a5a8f277f13543f0a85ad145c4bb80d62339a7d50d7ed41659df318c8198ea7f428"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a5a4404836da323c755523fbd27563a8e84f94", "message": "Merge #12063: [Trivial] Update license year range to 2018\n\nc9439e735a [Trivial] Update license year range to 2018 (Akira Takizawa)\n\nPull request description:\n\n  The same as #9617.\n\n  Happy new year! :smiley:\n\nTree-SHA512: 4b8fe343bf841da12157595bb51b59ac8e5cfa8ceb5910a499f26cff35c7ef8420dbf3ad8e5dd9f4225441e2fecff7fc6939f1a55f98ea51b57e420d326bda47"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c991b304dee368f506cfee27ddaa333f1f82c518", "message": "Merge #12075: [scripts] Add missing univalue file to copyright_header.py\n\n415f86c6ae [scripts] Add missing univalue file to copyright_header.py (fanquake)\n\nPull request description:\n\n  This needs to be added so that PRs like #12062 don't modify the subtree.\n\nTree-SHA512: 3642bdb0c8271ae700857a79fa5800b0c26c4b3f126d4406f224293817fb74d498fa1fc581d576ae747fbbb6952d4369fc4ab823ab48fd0946c1e8ccbe93cee6"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d38d1a3e75aa97ffa8755ddd431754a6d0942964", "message": "Merge #11965: qa: Note on test order in test_runner\n\nfadf60e381 qa: Note on test order in test_runner (MarcoFalke)\n\nPull request description:\n\n  C.f. #11964\n\nTree-SHA512: 5f087965093722d9e7a3febddcc187e412bd0636a7ed2da60111668fe3bba6668110e25a38ddcccc0d0aae132611c56fa72f3f0c473fb3fb59e38be445edfcd5"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a332a7d5a15214015f9553fdb2bcf80a1a4b8dc0", "message": "Merge #11291: Fix string concatenation to os.path.join and add exception case\n\na3ac7672ed Fix string concatenation to os.path.join and add exception case (dongsamb)\n\nPull request description:\n\n  Solved some warnings for [Python PEP 8 convention](https://www.python.org/dev/peps/pep-0008/)\n\n  - [Method Names and Instance Variables](https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables)\n  lowercase with words separated by underscores as necessary to improve readability.\n\n      - `testDir` to `test_dir`\n      - `inputData` to `input_data`\n      - ...\n\n  - [Blank Lines](https://www.python.org/dev/peps/pep-0008/#blank-lines)\n  Surround top-level function and class definitions with two blank lines.\n\n  - [Exception Names](https://www.python.org/dev/peps/pep-0008/#exception-names)\n\n  and added verification logic about referenced before assignment for `output_type`\n\nTree-SHA512: 346d08799f03077a2b7257ccdca123b4945b89dbf0677dba452d96b81ce186ec7b5dcdb10b8bb59cfce657a7aedbb7df64921036cbd1bf4ad8bd313d40faa796"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadf60e381006aa27689971771e83426fb7c0daa", "message": "qa: Note on test order in test_runner"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/604e08c83cf58ca7e7cda2ab284c1ace7bb12977", "message": "Merge #11726: Cleanups + nit fixes for walletdir PR\n\naac6b3f067 Update files.md for new wallets/ subdirectory (MeshCollider)\nb67342906c Cleanups for walletdir PR (MeshCollider)\n\nPull request description:\n\n  This addresses the remaining nits from https://github.com/bitcoin/bitcoin/pull/11466\n\n  - Updates `doc/files.md` with respect to the new default wallet directory\n  - Fixes @promag and @laanwj's error message nit, and Jonas' release notes nit\n  - ~Addresses @laanwj's net-specific wallet subdirectory concern in the case that a walletdir is specified~\n  - Changes the #includes from \"\" to <> style after #11651\n\nTree-SHA512: b86bf5fdc4de54c1b0f65b60a83af3cf82b35d216ce9c0de724803bfba6934796238b6c412659dcc29ae2e3e856d4eb97ae777c80f36f4089d8acecfddefe9aa"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad349c507a3179fa117ddf3ad6e651609c366cc", "message": "univalue: Bump subtree"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88411e98e50c92f8990733eee0bc353ac8f21a35", "message": "Squashed 'src/univalue/' changes from fe805ea74f..07947ff2da\n\n07947ff2da Merge #9: [tests] Fix BOOST_CHECK_THROW macro\nec849d9a28 [tests] Fix BOOST_CHECK_THROW macro\n31bc9f5a49 Merge #8: Remove unused Homebrew workaround\nfa042093d1 Remove HomeBrew workaround\na523e08ae4 Merge #7: Declare single-argument (non-converting) constructors \"explicit\"\na9e53b38ba Merge #4: Pull upstream\n16a1f7f6e9 Merge #3: Pull upstream\ndaf1285af6 Merge pull request #2 from jgarzik/master\nf32df99e96 Merge branch '2016_04_unicode' into bitcoin\n280b191cb1 Merge remote-tracking branch 'jgarzik/master' into bitcoin\n2740c4f712 Merge branch '2015_11_escape_plan' into bitcoin\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: 07947ff2da9ef02a9dfa13346bc5545708e3ebe7"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18a1bbad98bd4321f15e7921d9aec91661499d90", "message": "Merge #11867: Improve node network test\n\nee5efad6cf [tests] refactor node_network_limited (John Newbery)\nb425131f5a [tests] remove redundant duplicate tests from node_network_limited (John Newbery)\n2e02984591 [tests] node_network_limited - remove race condition (John Newbery)\ndbfe294805 [tests] define NODE_NETWORK_LIMITED in test framework (John Newbery)\n1285312048 [tests] fix flake8 warnings in node_network_limited.py (John Newbery)\n\nPull request description:\n\n  Fixes race condition in the node_network_limited test case introduced in #11740. Also tidies up the test and removes redundant duplicate tests.\n\nTree-SHA512: a5240fe35509d81a47c3d3b141a956378675926093e658d24be43027b20d3b5f0ba7c6017c8208487a1849d4fdfb911a361911d571423db7c50711250aba3011"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8049241e226c16bd07b029c0cb4b62ac40f0c923", "message": "Merge #11946: tests: Remove unused variable (firstAddrnServices)\n\nbdaed47558 tests: Remove unused variable (firstAddrnServices) (practicalswift)\n\nPull request description:\n\n  Remove unused variable (`firstAddrnServices`).\n\nTree-SHA512: 7075952b392227c00fcb22adb1fd3f7ef31d7fd7101fbeff632beeea814c70beaef5c9957736eff2451976c8b43b950fc949642e608b610c5fefd150282eafb0"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/797441ee995aac59f55d59a93ecb55e8ecbe7dbc", "message": "Merge #11947: test: Fix rawtransactions test\n\n4508519250 test: Fix rawtransactions test (Wladimir J. van der Laan)\n\nPull request description:\n\n  Looks like another `assert_raises_jsonrpc` snuck in with #11178. Change it to `assert_raises_rpc_error`.\n\nTree-SHA512: c2c2fb78be5dcc490981896cf60be1fba0b41c385a4f18de084b2e0a042c5b06bf6da617d3bf3b7e585b728554f5c8e1814b85045ba542cca9dfb7b826fda75a"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62fdf9b07087b80d2142799bdd2324f61483359d", "message": "Merge #11916: Typo fix\n\n58c909d8d1 Typo fix (flack)\n\nPull request description:\n\nTree-SHA512: 8ed89086230a257f4e3261972420feef60ceb618bfe75e0392a1c0cef72c20a55259bc9aec4fa79ef27c6ac8e7aec1275ff442efa539c5951b6e7c695883ab1b"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b4ad57912b78a96af08046a503f7905610a8c", "message": "Merge #11835: Add Travis check for unused Python imports\n\nd60b32074 Add Travis check for unused Python imports (practicalswift)\nc7399e708 Remove unused Python imports (practicalswift)\n\nPull request description:\n\n  Add Travis check for unused Python imports.\n\n  ```\n  $ contrib/devtools/lint-python.sh\n  ./test/functional/example_test.py:18:1: F401 'test_framework.mininode.NODE_NETWORK' imported but unused\n  ./test/functional/test_framework/messages.py:27:1: F401 'test_framework.util.wait_until' imported but unused\n  ./test/functional/test_framework/test_framework.py:16:1: F401 'traceback' imported but unused\n  ```\n\nTree-SHA512: 78e50fb1488abe3ebe365e766cb8d6d448cf1bd16c8691e102cb9bf7c202988bdf6e10b25ff772c62e05c72568168462e88cdc7ad98069d9eb3be727735b2d56"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe", "message": "qa: Add getrawtransaction in_active_chain=False test"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13e31dd6548d64a5992f439e74bb424bf88aca04", "message": "Merge #11791: [tests] Rename NodeConn and NodeConnCB\n\n873beca6d [tests] Rename NodeConn and NodeConnCB (John Newbery)\n\nPull request description:\n\n  Final step in #11518\n\n  NodeConn -> P2PConnection\n  NodeConnCB -> P2PInterface\n\n  This is basically just a rename. Should be an easy review.\n\nTree-SHA512: fe1204b2b3d8182c5e324ffa7cb4099a47ef8536380e0bb9d37a5fccf76a24f548d1f1a7988ab8f830986a3058b670696de3fc891af5e5f75dbeb4e3273005d7"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbce66a982679b5409a295be5c99a2eef429cabf", "message": "Merge #10493: Use range-based for loops (C++11) when looping over map elements\n\n680bc2cbb Use range-based for loops (C++11) when looping over map elements (practicalswift)\n\nPull request description:\n\n  Before this commit:\n\n  ```c++\n  for (std::map<T1, T2>::iterator x = y.begin(); x != y.end(); ++x) {\n      T1 z = (*x).first;\n      \u2026\n  }\n  ```\n\n  After this commit:\n\n  ```c++\n  for (auto& x : y) {\n      T1 z = x.first;\n      \u2026\n  }\n  ```\n\nTree-SHA512: 954b136b7f5e6df09f39248a6b530fd9baa9ab59d7c2c7eb369fd4afbb591b7a52c92ee25f87f1745f47b41d6828b7abfd395b43daf84a55b4e6a3d45015e3a0"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2c2dba21855b8cb9b193b1819be73fa4a23a99", "message": "Merge #11712: [tests] Split NodeConn from NodeConnCB\n\ne9dfa9bcc [tests] Move version message sending from NodeConn to NodeConnCB (John Newbery)\ndad596fc3 [tests] Make NodeConnCB a subclass of NodeConn (John Newbery)\ne30d40438 [tests] Move only: move NodeConnCB below NodeConn (John Newbery)\n4d5059856 [tests] Tidy up mininode (John Newbery)\nf2ae6f32a [tests] Remove mininode periodic (half-hour) ping messages (John Newbery)\nec59523c5 [tests] Remove rpc property from TestNode in p2p-segwit.py. (John Newbery)\n\nPull request description:\n\n  This is the final step in #11518, except for possibly renaming - for motivation, please see that PR.\n\n  If this is merged, then migrating the test framework from asyncore to asyncio should be easier (I say should because I haven't dug too deeply into what would be required).\n\n  Requesting review from @ryanofsky , since he always has good feedback on these refactor PRs, and I'd appreciate his take on this refactor. Note particularly that I've reverted the change suggested here: https://github.com/bitcoin/bitcoin/pull/11182#discussion_r148859555 . The idea, as always, is to present a simple interface to the test writer.\n\nTree-SHA512: 94dd467a13ec799b101108cf47d4dccb6f6240b601e375e3d785313333bbb389c26072a50759aca663bbf3d6c8b867b99e36ae8800ab8ea115e0496c151926ce"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a89221873a3ee2451c73b41bbe2d99d36f439d31", "message": "Merge #11683: tests: Remove unused mininode functions {ser,deser}_int_vector(...). Remove unused imports.\n\nf522fb7c9 tests: Remove unused mininode functions deser_int_vector(f) and ser_int_vector(l) (practicalswift)\n0f3b752ec Remove unused imports (practicalswift)\n\nPull request description:\n\n  * Remove unused mininode functions `deser_int_vector(f)` and `ser_int_vector(l)`. Last use removed in 3858aabbd084b2cc4534c40a178bbcc22fb82968. Friendly ping @jnewbery :-)\n  * Remove unused imports.\n\nTree-SHA512: 840c5623eae9f929561f6e86816883c5904ec1af82fc8d5e56dee1c0b1fe22e8600c10f7358ed8b556b3aec8c65c4910f6eee30e8015a573c4df8bef91124d3e"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12217", "title": "qa: Add missing syncwithvalidationinterfacequeue to tests", "body": "Fixes intermittent travis failures with those tests caused by a missing flush of mempool txes to the wallet.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12193", "title": "RPC: Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d)", "body": "Rebased version of  #11386 by karel-3d.\r\n\r\nCloses:  #11386", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12089", "title": "qa: Make TestNodeCLI command optional in send_cli", "body": "Makes the `command` optional, since there are valid bitcoin-cli calls that have no `command`:\r\n\r\n* `bitcoin-cli -?`\r\n* `bitcoin-cli -getinfo`\r\n* ...\r\n\r\nAlso, rename self.args to self.options, since that is the name in the `bitcoin-cli -help` documentation.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12076", "title": "qa: Use node.datadir instead of tmpdir in test framework", "body": "Commit c53c9831eedaf3b311bb942945268830f9ba3abc introduced the utility function `get_datadir_path`, however not all places in the code use this util function. Using the util function everywhere makes it easier to review pull requests related to the datadir.\r\n\r\nThis commit replaces datadir path creation with the `datadir` member of `TestNode`, which itself uses `get_datadir_path`.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12055", "title": "Prepare version scheme for upcoming release [take 2]", "body": "Preface: Obviously, this does *not* mean Bitcoin Core is all of a sudden less experimental than before. This changes only the version string.\r\n\r\nThis prepares the version scheme for the upcoming release. Instead of referring to master as `0.15.99`, we can refer to it as `15.99`. Or `0.17.0` will become `17.0.0`.\r\n\r\nThe current version scheme is `0.MAJOR.MINOR`, c.f. https://bitcoincore.org/en/lifecycle/#versioning.\r\nThe proposed version scheme is `MAJOR.MINOR.0`, i.e. dropping the constant prefix `0.`.\r\n\r\nParticipants of #9653 also proposed other versioning schemes, which come with downsides:\r\n* The version scheme `MAJOR_YEAR.MAJOR_MONTH.MINOR`, where `MAJOR_YEAR` and `MAJOR_MONTH` refer to when the release cycle started. For version numbers to be predictable (like they are for ubuntu), we'd *had to* either prepare a release every 6 months or come up with a name for \"the next version\". Neither solution is feasible for this project.\r\n* The `1.0.0` version scheme. This is also infeasible as outlined in https://github.com/bitcoin/bitcoin/issues/9653#issuecomment-276125338 and subsequent comments.\r\n \r\nSo I'd propose to stick with the existing version scheme or drop the leading zero.\r\n\r\nC.f. #12026", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11909", "title": "contrib: Replace developer keys with list of pgp fingerprints", "body": "Having to host a copy of the keys in this repo was a common source of discussion and distraction, caused by problems such as:\r\n\r\n* Outdated keys. Unclear whether and when to replace by fresh copies.\r\n* Unclear when to add a key of a new developer or Gitian builder.\r\n\r\nThe problems are solved by\r\n* Having no keys but only the fingerprints\r\n* Adding a rule of thumb, when to add a new key\r\n\r\n<strike>Moving the keys to a different repo solves none of these issues, but since the keys are not bound to releases or git branches of Bitcoin Core, they should live somewhere else.\r\n\r\nObviously, all keys are hosted and distributed on key servers, but were added to the repo solely for convenience and redundancy.\r\n\r\nMoving the mirror of those keys to a different repo makes it less distracting to update them -- let's say -- prior to every major release.\r\n\r\nI updated our `doc/release-process.md` to reflect the new location.\r\n\r\nDEPENDS_ON https://github.com/bitcoin-core/gitian.sigs/pull/621\r\n</strike>", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11872", "title": "[rpc] createrawtransaction: Accept sorted outputs", "body": "The second parameter of the `createrawtransaction` is a dictionary of the outputs. This comes with at least two drawbacks:\r\n\r\n* In case of duplicate keys, either of them might silently disappear, with no user feedback at all. A user needs to make other mistakes, but this could eventually lead to abnormal tx fees.\r\n* A dictionary does not guarantee that keys are sorted. Again, a user needs to keep this in mind, as it could eventually lead to excessive tx fees.\r\n\r\nEven though my scenario of loss-of-funds is unlikely to happen, I see it as a inconvenience that should be fixed.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11858", "title": "qa: Prepare tests for Windows (laanwj, MarcoFalke)", "body": "* `p2p-versionbits-warning.py` uses an alertnotify that writes to a file\r\nusing `echo`.\r\n  Windows `echo` doesn't strip quotes.\r\n  So accept the alert message to be surrounded by quotes in the regular\r\n  expression. (laanwj)\r\n* Pass `sys.executable` when calling a python script via the subprocess\r\n  module\r\n* Don't remove the log file while it is still open and written to\r\n* Properly use os.pathsep and os.path.sep when modifying the PATH\r\n  environment variable\r\n\r\nRef:  #8227", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11742", "title": "rpc: Add testmempoolaccept", "body": "To check if a single raw transaction makes it into the current transaction pool, one had to call `sendrawtransaction`. However, on success, this adds the transaction to the mempool with no easy way to undo.\r\n\r\nThe call `testmempoolaccept` is introduced to provide a way to solely check the result without changing the mempool state.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315", "body": "Maybe comment the comments out, so it is not required to delete them?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81920315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352", "body": "I think https://bitcoincore.org/en/contact/ will always be the page for contact, even if there is a subsection with a list of gpg keys.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87377352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060", "body": "```vim\r\ns/and are/are/", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/150910060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60529757", "body": "Mind to share why the py2 and py3 packages of zmq are needed?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60529757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60530349", "body": "@theuni  Jup, let's keep it py2 only for now, if possible.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/60530349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64062710", "body": "I've already merged this, because I am not sure how long this pull will be in the review queue.\n\nYou could try a rebase once travis is running again to get rid of this patch and also trigger a build.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/64062710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/78611089", "body": "Well, I assume the goal was to provide `osx` builds one day...\n\nThough, I am not sure on the eta of this and it can always be added back in later.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/78611089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93356812", "body": "@theuni I'd rather have it build the distributed files, to catch errors like  #9393", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93356812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93357183", "body": "Though, this requires calling configure twice, I assume...", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93357183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93435517", "body": "I think, if I change check to distcheck, it will *compile* twice, which is worse than configure twice? ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93435517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/98871492", "body": "The repo is flattened by distdir a few lines above, so this should not work here...\r\n\r\nYou may want to try to move it up to where it does the check-doc.py, maybe.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/98871492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99017902", "body": "Are you sure this is working. I could imagine gpg needs the keys first. Something like\r\n```sh\r\nwhile read line; do travis_retry gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $line; done < contrib/verify-commits/trusted-keys; fi\r\n```\r\n\r\nwould do it, but it might not be enough. I tried to do this once but I gave up as it was too tricky to get right on travis...", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99017902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111724366", "body": "<strike> functional tests are disabled for windows and no_wallet, so I don't think we need this here.</strike>\r\n\r\nYou probably did this for consistency/simpler code.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111724366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130242406", "body": "No need for the `bc` package. Also, the configure option is called `--with-gui=qt4`.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/130242406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131504348", "body": "I can't figure out why the \"GNU bc arbitrary precision calculator language\" is required. It  is likely an artifact of the days where the functional tests were written in bash.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131504348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131518002", "body": "https://github.com/bitcoin/bitcoin/blob/2191eac812a72fe57167be882bddd2e6a3f0340e/qa/rpc-tests/util.sh#L38", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131518002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134746407", "body": "This change is already in master", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134746407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138240732", "body": "This needs to be guarded by `TRAVIS_COMMIT_RANGE` if you fail on `-z $TRAVIS_COMMIT_RANGE`, no?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138240732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138247472", "body": "Actually this should be fine, as `TRAVIS_COMMIT_RANGE` should never be empty according to the travis doc. (It is only empty for branches with a single commit, which we don't have)", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138247472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155078232", "body": "Possibly this version is too old on travis to actually catch those?\r\n\r\nCould instead install python3-pip and then a few lines below, `pip3 install flake8 --user`", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155078232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159310907", "body": "Jup, that is possible", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159310907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160730632", "body": "That cache should be covered by `.ccache`, no?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160730632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161033992", "body": "Forget what I said. It is probably better to cache the resulting binary than the individual obj files, since we are building specific tags that don't change. For master or other branch build, the commits often only change parts of the code, so the other obj files can be cached and re-used. For tag builds everything is static, so caching the binaries works as well.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161033992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40320891", "body": "Nit: Remove `-`.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40320891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40321045", "body": "Nit: Should \"Nit\" be included in this list?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40321045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40323320", "body": "+1. I prefer to place it somewhere in the GitHub PR description.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40323320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62619937", "body": "What is `commit_shasum`?\n\nMaybe `HEAD~n`?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62619937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62619968", "body": "nit: missing `#` after `-f`. (or leave the comment away)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62619968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62625585", "body": "For me, git will tell me what the commands are when I am doing the rebase:\n\n```\n# Commands: \n# p, pick = use commit \n# r, reword = use commit, but edit the commit message \n# e, edit = use commit, but stop for amending \n# s, squash = use commit, but meld into previous commit \n# f, fixup = like \"squash\", but discard this commit's log message \n# x, exec = run command (the rest of the line) using shell \n```\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62625585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79988920", "body": "``` vim\n:%s/code/work/g\n```\n\nWe also host images.\n\nNit: Can you make this 80 chars wide?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79988920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79989269", "body": "Also append to the last sentence maybe:\n\n```\n..., the original author(s) and source.\n```\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79989269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96114068", "body": "This is still prefixed with a module. E.g. [qt] Wallet refactor\r\n\r\nThe prefix is imo just an indication which folder or file you are touching in that pull.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96114068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137660882", "body": "Maybe add\r\n\r\n```\r\nAny refactoring pull request may be closed when it doesn't attract anyone willing to review.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137660882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120408993", "body": "Please make the link relative to the git root:\r\n\r\n```md\r\n[link](/doc/README.md)", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120408993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/63322759", "body": "We usually put `Fixes #----` in the body of the pull to indicate that an open issue is resolved. Not sure if having a section for this in every pull makes sense.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/63322759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51408743", "body": "Nit: The download URL is https://bitcoin.org/en/download (without the www)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51408743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62644118", "body": "Note: You can toggle the Github rendered diff for .md files\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62644118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67838843", "body": "I am not convinced we should mention the dev chat in the readme...\n\nWe already link to CONTRIBUTING.md just three lines above. Do you mind to move the `Developer IRC can be found on Freenode at #bitcoin-core-dev.` to CONTRIBUTING.md ?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67838843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/98356125", "body": "We are not using jpeg, so this seems unused.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/98356125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "9124": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11769", "title": "Compact Blocks can sometimes take an excruciatingly long time to request transactions", "body": "```Bitcoin version v0.15.99.0-a89221873```\r\n\r\n    2017-11-27 03:00:03 Initialized PartiallyDownloadedBlock for block 0000000000000000000aadcaac65ce76f6d91f15fc15d31795a4616750101564 using a cmpctblock of size 15698\r\n    2017-11-27 03:00:03 Initialized PartiallyDownloadedBlock for block 0000000000000000000aadcaac65ce76f6d91f15fc15d31795a4616750101564 using a cmpctblock of size 15698\r\n    2017-11-27 03:00:07 Initialized PartiallyDownloadedBlock for block 0000000000000000000aadcaac65ce76f6d91f15fc15d31795a4616750101564 using a cmpctblock of size 15698\r\n    2017-11-27 03:00:08 85ec29374f60077d1e2062786d03b156d910bff699ddc768163be2d49fa132d8 from peer=4 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:08 ce31ea70a49a8e788a39dcdde0f605e6a9587f9496ea3daa677077df6ab7e975 from peer=4 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:08 b52c77de5855e4f6bc670f97b51398fd3c2c8863fb4a3cc1af32247b39b6f1a4 from peer=4 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:08 b52c77de5855e4f6bc670f97b51398fd3c2c8863fb4a3cc1af32247b39b6f1a4 from peer=5 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:09 b52c77de5855e4f6bc670f97b51398fd3c2c8863fb4a3cc1af32247b39b6f1a4 from peer=2 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:10 80e514b638181cb70d38412611d4b29b711696565bb33b2bef340471de00d404 from peer=3 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:10 b52c77de5855e4f6bc670f97b51398fd3c2c8863fb4a3cc1af32247b39b6f1a4 from peer=3 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:11 b52c77de5855e4f6bc670f97b51398fd3c2c8863fb4a3cc1af32247b39b6f1a4 from peer=1 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:11 771ec88c7eacaa578b9cf94fac7671498661f038aa73e5ae8626fdd2ecf6eb77 from peer=2 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:12 ecf7a3370ba72e9661947c96b10c251c4e7594e417521b7932d2cbb6c1aa0c47 from peer=1 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:15 b52c77de5855e4f6bc670f97b51398fd3c2c8863fb4a3cc1af32247b39b6f1a4 from peer=0 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:16 b073ba611849d315d3199f485c0ff46ab86ae9275451905929b42d0d8342529f from peer=3 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:18 22deca4b1896e76f84a9c853f740e8cdb513d1a96d1e5a605d71d6578101dcdb from peer=6 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:20 6c9782fc93f9c5a1923731c66660e1b0d4dd3f803a9d30ab4af00add76269fc7 from peer=3 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:22 817d9cf3a8089861402f735dd8279fa11333ba9f5ec1dedcfbd83eaefe4edb98 from peer=6 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:22 02aeb8541a880c901ebc01d800fcf9f6520673aa74204414c72479f5b40e1dd6 from peer=6 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:22 f73f1fa28d3a48352d999826b284a2cec66b2b0dab57f4fbc5e56f77d330b5b5 from peer=6 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:22 d325a493d6b18d9167a5cd8d4f5935ab0463bc9681027869dc387ec194618048 from peer=6 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:25 438644e38b4c7ae3d131c5c95454cc30375cbba0b8879a81b49a3f63d49d5d09 from peer=2 was not accepted: non-final (code 64)\r\n    2017-11-27 03:00:25 Successfully reconstructed block 0000000000000000000aadcaac65ce76f6d91f15fc15d31795a4616750101564 with 1 txn prefilled, 2473 txn from mempool (incl at least 24 from extra pool) and 85 txn requested\r\n    2017-11-27 03:00:25   - Load block from disk: 0.00ms [0.00s]\r\n    2017-11-27 03:00:25     - Sanity checks: 0.00ms [0.01s (0.49ms/blk)]\r\n    2017-11-27 03:00:25     - Fork checks: 0.04ms [0.00s (0.04ms/blk)]\r\n    2017-11-27 03:00:25       - Connect 2559 transactions: 27.19ms (0.011ms/tx, 0.005ms/txin) [0.35s (11.97ms/blk)]\r\n    2017-11-27 03:00:25     - Verify 4986 txins: 27.32ms (0.005ms/txin) [0.35s (12.03ms/blk)]\r\n    2017-11-27 03:00:25     - Index writing: 15.77ms [0.08s (2.80ms/blk)]\r\n    2017-11-27 03:00:25     - Callbacks: 0.07ms [0.00s (0.01ms/blk)]\r\n    2017-11-27 03:00:25   - Connect total: 43.79ms [0.21s (7.14ms/blk)]\r\n    2017-11-27 03:00:25   - Flush: 9.26ms [0.04s (1.45ms/blk)]\r\n    2017-11-27 03:00:25   - Writing chainstate: 0.04ms [0.00s (0.01ms/blk)]\r\n    2017-11-27 03:00:25 UpdateTip: new best=0000000000000000000aadcaac65ce76f6d91f15fc15d31795a4616750101564 height=496284 version=0x20000000 log2_work=87.539574 tx=275165181 date='2017-11-27 02:59:12' progress=0.999999 cache=33.2MiB(246275txo)\r\n    2017-11-27 03:00:25   - Connect postprocess: 30.21ms [1.55s (53.44ms/blk)]\r\n    2017-11-27 03:00:25 - Connect block: 83.30ms [1.80s (62.04ms/blk)]```\r\n\r\nThe rejections are for transactions which were not contained in the block reconstruction, but seem to be related. ", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "loudthunder": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11768", "title": "Passphrase not working since update to 0.15.1", "body": "Can not send BTC or change passphrase since updating\r\nUtilizing Bitcoin Core .0.15.1, but also reverted back to 0.15.0.1", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11768/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gmaxwell": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11756", "title": "Multiwallet rescan sequentially scans multiple wallets instead of in parallel", "body": "If you start up with a collection of N out of sync wallets bitcoin will perform N interdependent rescans; this can be rather slow e.g. if they're all at height 200k.\r\n\r\nThis should be fixed, or we should offer suicide counseling at a minimum.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11315", "title": "Prune undermines the dbcache.", "body": "\r\n17:13:01 < esotericnonsense> Aaaaand: in particular what was happening for me was that the utxo cache seemingly was being dropped on every   prune event\r\n17:13:18 < esotericnonsense> so with prune off, it'd build up to 2-3GB or more, with it on, it'd never go above 300mb or so\r\n\r\nWe should probably add the dbcache size to the amount of extra blockdata that prune lets the blocks and disk take up over the pruning size... so that pruning doesn't undermine the user's dbcache settings.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11249", "title": "Rescan for encrypted HDwallets", "body": "Right now to recover from a backup with an encrypted HD wallet the user must do something like unlock the wallet with a really long time out and manually trigger a rescan,  otherwise they risk missing some keys when auto-topup cannot run.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294002", "body": "rebroad, Did you read the commit message?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294285", "body": "I ask because it explains very clearly what this patch is doing and why.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294488", "body": "Ah\u2014 I'm sorry I misunderstood you. I thought you were pointing out that it would be ignored when the getdata result (block message) came back. Indeed, this looks problematic to me.  Thanks for your patience.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759793", "body": "Well, what do you want\u2014 you wait three months on the pull request and then only comment hours after it was merged. :)  I'll fix it or make sure luke does. :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759876", "body": "Fixed, as well as a number of other cases.   And no offense taken. I'm glad you read through it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3191600", "body": "@luke-jr   bleh.  And then a 20 page essay on safely configuring it? :P \n\n@mtparet  \"Non-standard\" is perhaps a unenlightening name for the functionality, but it was added back in 2010 and so we're probably stuck with it now. :)  It just refers to transactions which a node itself won't process unless they're included in a block by another node which, presumably, knows something this one doesn't about the correctness and usefulness of of a transaction.  Because Bitcoin is a flooding network with no central authority its useful for nodes to be at least a bit skeptical by default for activity which isn't clearly virtuous, as various odd transaction types have been used to flood the network and exploit vulnerabilities in the past. It's not an outright prohibition, however, as these transactions are still happily accepted in blocks. \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3191600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4030432", "body": "The command-line parameter already points this out.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4030432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/840057", "body": "More.  \"-Wno-\"  deactivates a warning (e.g. for ones which are otherwise turned on by -Wextra or -Wall)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/840057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mrqc": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11736", "title": "blk file error when reading - did something change in the format?", "body": "I am reading blkXXX.dat files. I am facing the problem that in my blk00970.dat I can read at some position the magicNumber of the block. but the block is empty because after that the magicNumber is again contained in the file which should be the version.\r\n\r\nworkaround: if version == MAGICNUMBER: new block starts here, this stupid workaround works until blk00976.dat where somwhere the script signature length data entry of an input is suddenly 3052914961......\r\n\r\ndoes somebody know why?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11736/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ankarrr": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11731", "title": "'make check' fails on OSX 10.13.1", "body": "### Describe the issue\r\n\r\n```\r\nMaking check in src\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  check-TESTS check-local\r\nFAIL: test/test_bitcoin\r\nPASS: qt/test/test_bitcoin-qt\r\n============================================================================\r\nTestsuite summary for Bitcoin Core 0.15.99\r\n============================================================================\r\n# TOTAL: 2\r\n# PASS:  1\r\n# SKIP:  0\r\n# XFAIL: 0\r\n# FAIL:  1\r\n# XPASS: 0\r\n# ERROR: 0\r\n============================================================================\r\nSee src/test-suite.log\r\nPlease report to https://github.com/bitcoin/bitcoin/issues\r\n============================================================================\r\nmake[4]: *** [test-suite.log] Error 1\r\nmake[3]: *** [check-TESTS] Error 2\r\nmake[2]: *** [check-am] Error 2\r\nmake[1]: *** [check-recursive] Error 1\r\nmake: *** [check-recursive] Error 1\r\n```\r\n### What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)?\r\n\r\nMaster branch at 7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc\r\n\r\n### What type of machine are you observing the error on (OS/CPU and disk type)?\r\n\r\nOSX 10.13.1\r\nXcode 9.1\r\n\r\n### Attach test-suite.log\r\n\r\n[test-suite.log](https://github.com/bitcoin/bitcoin/files/1489808/test-suite.log)\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "borriej": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11725", "title": "Extreme slow sync speed MacBook Pro 2.7GHZ", "body": "Hi,\r\n\r\n- I'm on a MacBook Pro Retina 2.7Ghz I7, 8GB RAM.\r\n- High Sierra OSX 10.13.1\r\n- Internet speed is 84 Mbits..  so I download 10-11MB/s. \r\n- Downloaded Bitcoin Core (latest stable from the website) 0.15.1,\r\n- Im on a mac, so limited HDD.. so I've set-up blockchain on external USB 3.0 2TB external disk with speeds up to 120 MB/s\r\n- I expected Bitcoin Core to download + sync within 24 hours\r\n- But it's taking ages, as in: Im just over 50% within 48 hours.. progress per hour is 0.10% \r\n\r\n- EDIT: another interesting fact.. CPU usage of Bitcoin-Qt was around 3-6%.. memory aroundd 200-400MB.\r\n\r\n1) Im on a fast computer, with great internet.. so what is causing this?\r\n2) How do you launch with other config settings to test? like dbcache=4000?\r\n3) What should I do?\r\n4) Is this a software thing?\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "laudaa": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11723", "title": "[Wallet Feature] Spend unconfirmed output", "body": "Currently the wallet has an expert option that allows us to spend unconfirmed change. This does not allow us to spend unconfirmed outputs coming from elsewhere. It is my strong belief that another option should be added that allows us to spend any unconfirmed output.\r\nAn example use case would be moving funds between multiple owns wallets; as it currently stands, you have to wait for confirmations at each stop.\r\nAdditionally, with the introduction of multi-wallet support this kind of behavior is going to become more likely and thus is another reason for the addition of such feature.\r\n\r\nThoughts? \r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d3e58e46c484085900dbbe03517c6c44c55aca3", "message": "[Doc] Fix link to installation script"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12124", "title": "[wallet] Remove segwit status check", "body": "This is #11400 based on the current master.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124523190", "body": "'Tests' is plural. Why are you changing from 'are' to 'is'?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124523190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "kollokollo": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11703", "title": "Strange state (Timestamps wrong) after importing a priv key.", "body": "### Describe the issue\r\nAfter importing a private key from an old wallet, the rescan tool a long time, but after completion all Timestams belonging to transactions related to the newly imported key are wrong.\r\n#### What behavior did you expect?\r\nShow the correct timestamps of all trasactions, corresponding to the block the transaction took place.\r\n#### What was the actual behavior (provide screenshots if the issue is GUI-related)?\r\nsee screenshots. The newly imported key has the label \"ehemals\", The big number for confirmations (in the tooltip) seems to be correct, but the timestamps all show the time of the latest transaction (lieferando) which was there at the time of import.\r\n#### How reliably can you reproduce the issue, what are the steps to do so?\r\nHave not reproduced this issue yet (because it takes sooo long). But I have observed other strange things before (data curruption, see: Issue https://github.com/bitcoin/bitcoin/issues/11627).\r\n### What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)?\r\nBitcoin core from the ppa used on Ubuntu 17.4 (most recent, I think) Bitcoin core version: v0.15.0.0-g3751912e8e (64-Bit)\r\n### What type of machine are you observing the error on (OS/CPU and disk type)?\r\nUbuntu 17.04 64 bit, Quadcore CPU, 2GB RAM, HDD and SSD (for chainstate).\r\n### Any extra information that might be useful in the debugging process.\r\nEverything else seems normal. The blockchain was freshly reindexed the 3 days before the import.(to cure the data corruption). The former issue \"data corruption\" was observed on a different computer, I then used a desktop computer. But I use the same (extermal) HDD.\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kgcorps": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11693", "title": "Signing raw transaction that has p2sh-p2wsh input", "body": "### Description:\r\nI am trying to sign an input that was sent to a p2sh-p2wsh address, but signrawtransaction RPC method returns an error stating = Witness program was passed an empty witness.\r\nAll the data can be seen through pastebin \r\n\r\n\r\n### Reproduction\r\nReproducible by following these actions (note that wallet does NOT know anything about address/private keys used):\r\nRelated address info (2of2 P2SH-P2WSH address): https://pastebin.com/TE1LrR44\r\n\r\n1) Raw transaction request/response:\r\nhttps://pastebin.com/r6HdMwsy\r\n\r\n2) SignRaw transaction request/response:\r\n1. - https://pastebin.com/2apuckBk\r\n2. - https://pastebin.com/SsszYS2w\r\n\r\n### Expected behavior\r\nI'd expect for it to sign a transaction just as if spendable input was inside wallet. Which I tested works just fine. I imported the address using import priv key->add multisig address->addwitnessaddress\r\nthen created a deposit to it and then spent it, transaction went through without a hitch.\r\n\r\n### Actual behaviour\r\nYou can see the result in step 2.2. \r\n\r\n### Additional info\r\nI talked about it at IRC bitcoin-core-dev channel with meshcollider. He said there might be an issue where I would need to pass in witness program as well to the signrawtransaction method and that it should add witness object if it is required since createrawtransaction method can't possibly know if output is plain p2sh or a segwit wrapper.\r\n\r\n### What version of bitcoin-core are you using?\r\nI am running v0.15.1.0-g7b57bc998f retrieved through Ubuntu PPA.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ekerstein": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11668", "title": "Datadir file permissions issue gives confusing error on Windows", "body": "I installed the latest version of Bitcoin on a new computer, everything started up normally and it started synchronizing. I closed the program (waited for it to finish) and reopened. When I did that it now says \"Cannot obtain a lock on data directory C:\\Program Files\\Bitcoin. Bitcoin Core is probably already running. Access is denied\".\r\n\r\nI've googled the issue, tried deleting the LOCK file, tried uninstalling/reinstalling, and can't get it to work.\r\n\r\nThere is one thing I changed during the initial installation. When it asked me where I wanted the blockchain data, I changed it to the Program Files\\Bitcoin directory instead of the default user App Data directory. I'm not sure if this is bad or messed something up. \r\n\r\nAfter I uninstalled and reinstalled, it no longer asks me where I want the blockchain data so I don't know how to change that.\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "streamofstars": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11661", "title": "Display fee per bytes instead of kilobytes or allow customizing this", "body": "I believe the transaction fee section of the Send window should display fees in BTC per byte (B) not per kilobyte (kB). Most fee calculator websites provide data in Bytes not in kilobytes (eg. https://bitcoinfees.earn.com/). Currently users can change currency units (BTC, mBTC, uBTC) but not data units. Recalculating automatically from kB to B is simple. Manually, it is easy to make a stupid mistake and either pay terribly too much fee or far below the required amount. If developers have their reasons to keep data units in kB please at least allow users to customize that in Settings as it has been done for Bitcoin units.\r\n\r\nAs of 2017-11-11 I am using Bitcoin Core version v0.15.0.0-g3751912e8e (64-bit) from official PPA for Ubuntu.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11661/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rebroad": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11657", "title": "config.status --recheck does not reuse previously configured environment", "body": "This is an issue for anyone currently developing on windows. i.e. when making (e.g. after a git checkout), make will reconfigure but for the linux environment, rather than the windows environment (even if this was what has only been done so far).\r\n\r\nA fix would be to store the configuration of the relevant variables that influence the ./configure so that these are re-used each time.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11600", "title": "\"Rolling forward\" at startup can take a long time, and is not interruptible", "body": "bitcond is spending hours \"Rolling forward\" upon startup, seemingly reprocessing blocks that were previously processed. There have been reports of this happening since July on stackexchange and reddit, so I thought it time an issue was raised, given it's still happening in V0.15.1.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11600/reactions", "total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9719", "title": "Allow abort of ConnectBlock() when shutdown requested.", "body": "Fixes one of the issues mentioned in #9668 - i.e. speeds up shutdown (can save over 30 seconds in some cases), which can cause shutdown to be aborted on some operating systems (if the OS does not allow as much time as bitcoind was requiring).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1121701", "body": "Is this no longer the case?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1121701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1121710", "body": "What was this...?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1121710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1280221", "body": "tut tut tut....\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1280221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1293970", "body": "The problem with just rejecting it here is that AlreadyHave will continue to return false, causing the client to continually getdata the same transaction over and over again. Is it worth adding a mapIgnoreTransaction feature to avoid this perhaps?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1293970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1293974", "body": "Hope it's ok to ask this here, but why does this bit of code need to be thread safe please?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1293974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1293988", "body": "What is the point in AskForing something that AlreadyHave returns true for? It will just be ignored when the getdata code deals with it, won't it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1293988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294163", "body": "@gmaxwell, yes, why do you ask?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294322", "body": "@gmaxwell. It's not clear to me what the description means. And whatever the description, it's largely irrelevant, given that the change to the code, from what I can tell, and based on my tests, makes no difference to the behaviour. If the AlreadyHave returns true at the askfor stage, it will still return true at the getdata stage, where the item is erased from the list without being actioned.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1294322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1295532", "body": "Does this mean the nodes can't accept transactions from inputs that aren't confirmed yet? If so, does this mean that if a node wanted to allow these it would get disconnected from the nodes that DoS(100) such transactions as soon as it forwards them on?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1295532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1295551", "body": "Glad to be of help!  12hyfHPvYQDCaHiSKKuZAKaFNpRBmBCvfJ  :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1295551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398023", "body": "Is this line still needed?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398095", "body": "what does the vGetData do...?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398099", "body": "Perhaps add a condition so that it only runs this if CaughtUp() is false?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398108", "body": "I never quite worked out what this GetBlocks was for either.... It runs against all orphan blocks that have already been downloaded, but seems superfluous also as in my testing, the parents blocks are always already in the AskFor queue.\n\nWhen might they not be?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398179", "body": "Yes, I know that's what the code below does, but what about the line above? When is that needed?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398591", "body": "I think this code doesn't quite work as intended. When the node sees the tx, it downloads it, and then discards it in such a way that when it is seem again it downloads it again, etc, etc. It can end up causing significant increase in bandwidth, rather than reducing it.\n\nWould a better way be to download the tx, but instead of discarding it, keeping a record of its hash, so that it isn't downloaded again?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2917640", "body": "I would prefer to see this default to false.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2917640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420", "body": "it's not.. I've removed this and made a new fixup commit now. Just need to squash(?) the commits together now.. @sipa, can you remind me the git command please?\n\n(the /build/ line is needed though, right? without it, git status reports on the contents of the build directory...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160", "body": "out of interest, how come I needed to add this line, but no one else seems to need it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/818160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004", "body": "If i don't add this line, git complains. How do you manage without git wanting this directory added or ignored?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081", "body": "Strangely, i can't add .gitignore to .gitignore. It ignores that line! \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839787", "body": "Is this making the compiler or strict, or less...?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Victorsueca": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11642", "title": "Visual Hashes for Bitcoin Addresses", "body": "This is a feature request to add visual hashes for bitcoin addresses wherever it feels needed (Address input fields, list of receiving addresses etc...).\r\n\r\nThe idea is to implement a small identificative image that is deterministically generated using the data (the address in this case) as a seed. Similar to [https://github.com/luxcem/vizhash](https://github.com/luxcem/vizhash)\r\n\r\nThis would solve an issue that has been long around with bitcoin addresses, which is that most users do not fully check (or don't check at all) the address they're pasting into a field hence allowing manipulations to the address by external factors to go easily unnoticed.\r\n\r\nWith a visual hash, the slightiest change to the address would change it's resulting image radically in unpredictable ways. If web services and apps implement the same procedure, this would allow users to spot when the address they wrote is different by quickly comparing the hash image.\r\n\r\nDownside would be that images give a false sense of security, when lots of hashing algorithms are known to be vulnerable to collisions and it's not safe to assume there are no more vulnerabilities yet unknown. It is important to choose the algorithm to generate the images wisely to reduce collisions.\r\n\r\nEven with that in mind, in my opinion, the overall security is increased. Those who never check the addresses would have a fairly secure way of quickly doing it, and those who have been fully checking the addresses until now and are wise enough to understand the risks of not checking the address are probably wise enough to understand the risk of collision too.\r\n\r\nWhat is your opinion on this? Did I miss anything? Is it reasonable to implement this on core?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11642/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fanquake": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11632", "title": "p2p-fullblocktest.py fails occasionally", "body": "Occasionally I see p2pblocktest.py failing when running the full test suite on master. Here is the log output from one such run at https://github.com/bitcoin/bitcoin/commit/dd561667cb7ccbbfed3134b05a565971ef6f5873.\r\n\r\n```\r\n2017-11-08 05:21:23.349000 TestFramework.mininode (DEBUG): Send message to 127.0.0.1:15360: msg_generic()\r\n2017-11-08 05:21:23.353000 TestFramework.mininode (DEBUG): Received message from 127.0.0.1:15360: msg_getdata(inv=[CInv(type=WitnessBlock hash=7a5f81e8313467d8da722212207f35e0bcff96b4a3d6e1cebe5ccfb482db087f)])\r\n2017-11-08 05:21:23.353000 TestFramework.mininode (DEBUG): Send message to 127.0.0.1:15360: msg_generic()\r\n2017-11-08 05:21:24.178000 TestFramework.mininode (DEBUG): Send message to 127.0.0.1:15360: msg_getheaders(locator=CBlockLocator(nVersion=70014 vHave=[33173860673120626974204943459578886554419646910719604625846583459047057165823, 52157530850984047832996077923584578103692798581921566502174761457904424775340, 55771744249389265034119257773627890252119103790626904495918282008316386578353, 40290229870805499894305341831791586089287558798738487092320053131961894901286, 37760069128212280825591083525569990527938311412737803690734490477686551632842, 2599600305764309661780695053387170433851388736... (msg truncated)\r\n2017-11-08 05:21:24.178000 TestFramework.mininode (DEBUG): Send message to 127.0.0.1:15360: msg_ping(nonce=00000060)\r\n2017-11-08 05:21:24.179000 TestFramework.mininode (DEBUG): Received message from 127.0.0.1:15360: msg_headers(headers=[CBlockHeader(nVersion=1 hashPrevBlock=4957bd6082037ffe6281f5682a4d12c0b5d1a9e47204df4688a8e0841dec8dff hashMerkleRoot=66e51352dee323b53d2c35154943cd4391a831b6984315be8754a28144884771 nTime=Wed Nov  8 13:31:25 2017 nBits=207fffff nNonce=00000000)])\r\n2017-11-08 05:21:24.179000 TestFramework.mininode (DEBUG): Received message from 127.0.0.1:15360: msg_pong(nonce=00000060)\r\n2017-11-08 05:21:24.229000 TestFramework.comptool (INFO): Test 96: PASS\r\n2017-11-08 05:21:24.230000 TestFramework.mininode (DEBUG): Send message to 127.0.0.1:15360: msg_inv(inv=[CInv(type=Block hash=20b90caf62293ca0d8ce43c540fd259d58cf86e0ddc337cb6bfba7f5d22d303e)])\r\n2017-11-08 05:21:24.231000 TestFramework.mininode (DEBUG): Received message from 127.0.0.1:15360: msg_getheaders(locator=CBlockLocator(nVersion=70014 vHave=[46904847670625905688023635754964878807294805301808802967599765639267425940817, 33173860673120626974204943459578886554419646910719604625846583459047057165823, 52157530850984047832996077923584578103692798581921566502174761457904424775340, 55771744249389265034119257773627890252119103790626904495918282008316386578353, 40290229870805499894305341831791586089287558798738487092320053131961894901286, 3776006912821228082559108352556999052793831141... (msg truncated)\r\n2017-11-08 05:21:24.239000 TestFramework.mininode (DEBUG): Send message to 127.0.0.1:15360: msg_headers(headers=[CBlockHeader(nVersion=1 hashPrevBlock=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206 hashMerkleRoot=185c284f92ef22630b0514f2752250acafe69429c2ac6b7ef40cb36e05bf30fb nTime=Wed Nov  8 13:11:11 2017 nBits=207fffff nNonce=00000000), CBlockHeader(nVersion=1 hashPrevBlock=07c4a08273b99a25dcd79b931e8b94292dafe9b6eb9136cd1f4d527f43ab366b hashMerkleRoot=fad67e50ef2d86063d3cbe9b019a458a70856defa66f0eb7da8cb553dca2b6f8 nTime=Wed Nov  8 13:11:12 2017 nBits=207fffff nNo... (msg truncated)\r\n2017-11-08 05:21:24.271000 TestFramework.mininode (DEBUG): Received message from 127.0.0.1:15360: msg_getdata(inv=[CInv(type=WitnessBlock hash=20b90caf62293ca0d8ce43c540fd259d58cf86e0ddc337cb6bfba7f5d22d303e)])\r\n2017-11-08 05:21:24.271000 TestFramework.mininode (DEBUG): Send message to 127.0.0.1:15360: msg_generic()\r\n2017-11-08 05:21:25.026000 TestFramework.mininode (DEBUG): Send message to 127.0.0.1:15360: msg_getheaders(locator=CBlockLocator(nVersion=70014 vHave=[33173860673120626974204943459578886554419646910719604625846583459047057165823, 52157530850984047832996077923584578103692798581921566502174761457904424775340, 55771744249389265034119257773627890252119103790626904495918282008316386578353, 40290229870805499894305341831791586089287558798738487092320053131961894901286, 37760069128212280825591083525569990527938311412737803690734490477686551632842, 2599600305764309661780695053387170433851388736... (msg truncated)\r\n2017-11-08 05:21:25.026000 TestFramework.mininode (DEBUG): Send message to 127.0.0.1:15360: msg_ping(nonce=00000061)\r\n2017-11-08 05:22:25.065000 TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/bitcoin/test/functional/test_framework/test_framework.py\", line 120, in main\r\n    self.run_test()\r\n  File \"/bitcoin/test/functional/p2p-fullblocktest.py\", line 72, in run_test\r\n    self.test.run()\r\n  File \"/bitcoin/test/functional/test_framework/comptool.py\", line 347, in run\r\n    self.sync_blocks(block.sha256, 1)\r\n  File \"/bitcoin/test/functional/test_framework/comptool.py\", line 220, in sync_blocks\r\n    self.wait_for_pings(self.ping_counter)\r\n  File \"/bitcoin/test/functional/test_framework/comptool.py\", line 200, in wait_for_pings\r\n    wait_until(received_pongs, lock=mininode_lock)\r\n  File \"/bitcoin/test/functional/test_framework/util.py\", line 222, in wait_until\r\n    assert_greater_than(timeout, time.time())\r\n  File \"/bitcoin/test/functional/test_framework/util.py\", line 42, in assert_greater_than\r\n    raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\r\nAssertionError: 1510118545.0264661 <= 1510118545.065086\r\n2017-11-08 05:22:25.068000 TestFramework (INFO): Stopping nodes\r\n2017-11-08 05:22:25.068000 TestFramework.node0 (DEBUG): Stopping node\r\n2017-11-08 05:23:05.775000 TestFramework.mininode (DEBUG): Closing connection to: 127.0.0.1:15360\r\n2017-11-08 05:23:05.776000 TestFramework.mininode (DEBUG): Closing connection to: 127.0.0.1:15360\r\n2017-11-08 05:23:05.776000 TestFramework.mininode (DEBUG): Network thread closing\r\n2017-11-08 05:23:06.087000 TestFramework.node0 (DEBUG): Node stopped\r\n```\r\n\r\n@achow101 also mentioned that he has seen the same test fail, possibly continually. IRC discussion here: https://botbot.me/freenode/bitcoin-core-dev/2017-11-08/?msg=93258444&page=1", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11461", "title": "[depends] Qt build broken with latest Xcode", "body": "Building Qt in depends is broken on macOS (10.12.6) with the latest Xcode.\r\n\r\n```\r\ncompiling main.mm\r\ncompiling qcocoahelpers.mm\r\nqcocoahelpers.mm:658:39: error: use of undeclared identifier 'InvalidContext'\r\n    require_action(inContext != NULL, InvalidContext, err = paramErr);\r\n                                      ^\r\nqcocoahelpers.mm:659:38: error: use of undeclared identifier 'InvalidBounds'\r\n    require_action(inBounds != NULL, InvalidBounds, err = paramErr);\r\n                                     ^\r\nqcocoahelpers.mm:660:37: error: use of undeclared identifier 'InvalidImage'\r\n    require_action(inImage != NULL, InvalidImage, err = paramErr);\r\n                                    ^\r\nqcocoahelpers.mm:702:20: warning: 'OpenDefaultComponent' is deprecated: first deprecated in macOS 10.8 [-Wdeprecated-declarations]\r\n    theComponent = OpenDefaultComponent(kOSAComponentType, typeAppleScript);\r\n                   ^\r\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Components.h:1004:1: note: \r\n      'OpenDefaultComponent' has been explicitly marked deprecated here\r\nOpenDefaultComponent(\r\n^\r\nqcocoahelpers.mm:736:9: warning: 'CloseComponent' is deprecated: first deprecated in macOS 10.8 [-Wdeprecated-declarations]\r\n        CloseComponent(theComponent);\r\n        ^\r\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Components.h:593:1: note: \r\n      'CloseComponent' has been explicitly marked deprecated here\r\nCloseComponent(ComponentInstance aComponentInstance)          __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);\r\n^\r\n2 warnings and 3 errors generated.\r\nmake[4]: *** [.obj/qcocoahelpers.o] Error 1\r\n```\r\n\r\nUpstream issues here:\r\n[5.6 branch](https://bugreports.qt.io/browse/QTBUG-63401)\r\n[5.9 branch](https://bugreports.qt.io/browse/QTBUG-62266)", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf1897710f6252b00533fcb61c71df1253340ebc", "message": "[trivial][docs] Fix incorrect link in /test/ README.md"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/415f86c6ae05a4d1d8160048e5fee19ed759ca39", "message": "[scripts] Add missing univalue file to copyright_header.py"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/387879dd4cbecd4d39bcf691bfe910047e5ed85c", "message": "[depends] ZeroMQ 4.2.2"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12095", "title": "[contrib] Use BDB_LIBS/CFLAGS and pass --disable-replication", "body": "Switch install_db4 to use BDB_LIBS/BDB_CFLAGS, mentioned [here](https://github.com/bitcoin/bitcoin/pull/12041/files#r159616003).\r\n\r\nPass ```--disable-replication``` to configure to match what we do in [depends](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/bdb.mk#L9).\r\n\r\nDocumentation about --disable-replication is available [here](https://docs.oracle.com/cd/E17275_01/html/programmer_reference/build_unix_small.html).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11995", "title": "[depends] Fix Qt build with Xcode 9", "body": "Building Qt in depends is currently broken with versions of Xcode > 9.0 (on both 10.12.x and 10.13.x). We'll bump our Clang/Qt/SDK again soon, however this fixes building in the interim.\r\n\r\nFixes #11461\r\nRelated upstream issues: https://bugreports.qt.io/browse/QTBUG-63401, https://bugreports.qt.io/browse/QTBUG-62266.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11986", "title": "[depends] zeromq 4.2.3", "body": "This is a followup to #9254 and #11981. Zeromq 4.2.3 was released just after #9254 was merged, and contains a years worth of improvements/bug fixes. See the release notes [here](https://github.com/zeromq/libzmq/releases/tag/v4.2.3).\r\n\r\nTodo:\r\n- [ ] Add zeromq-4.2.3.tar.gz to /depends-sources on bitcoincore.org\r\n- [ ] Verify gitian builds are still OK\r\n- [ ] Check: https://github.com/zeromq/libzmq/pull/2787", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11711", "title": "bitcoin_qt.m4: Minor fixes and clean-ups.", "body": "Replaces #11222.\r\n\r\nDropped the last commit, and converted e90d91c (now 06abcbf) into a scripted-diff using @theuni's suggestion.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10271", "title": "Use std::thread::hardware_concurrency, instead of Boost, to determine available cores", "body": "Following discussion on IRC about replacing Boost usage for detecting available system cores, I've opened this to collect some benchmarks + further discussion.\r\n\r\nThe current method for detecting available cores was introduced in #6361.\r\n\r\nRecap of the IRC chat:\r\n```\r\n21:14:08 fanquake: Since we seem to be giving Boost removal a good shot for 0.15, does anyone have suggestions for replacing GetNumCores?\r\n21:14:26 fanquake: There is std::thread::hardware_concurrency(), but that seems to count virtual cores, which I don't think we want.\r\n21:14:51 BlueMatt: fanquake: I doubt we'll do boost removal for 0.15\r\n21:14:58 BlueMatt: shit like BOOST_FOREACH, sure\r\n21:15:07 BlueMatt: but all of boost? doubtful, there are still things we need\r\n21:16:36 fanquake: Yea sorry, not the whole lot, but we can remove a decent chunk. Just looking into what else needs to be done to replace some of the less involved Boost usage.\r\n21:16:43 BlueMatt: fair\r\n21:17:14 wumpus: yes, it makes sense to plan ahead a bit, without immediately doing it\r\n21:18:12 wumpus: right, don't count virtual cores, that used to be the case but it makes no sense for our usage\r\n21:19:15 wumpus: it'd create a swarm of threads overwhelming any machine with hyperthreading (+accompanying thread stack overhead), for script validation, and there was no gain at all for that\r\n21:20:03 sipa: BlueMatt: don't worry, there is no hurry\r\n21:59:10 morcos: wumpus: i don't think that is correct\r\n21:59:24 morcos: suppose you have 4 cores (8 virtual cores)\r\n21:59:24 wumpus: fanquake: indeed seems that std has no equivalent to physical_concurrency, on any standard. That's annoying as it is non-trivial to implement\r\n21:59:35 morcos: i think running par=8 (if it let you) would be notably faster\r\n21:59:59 morcos: jeremyrubin and i discussed this at length a while back... i think i commented about it on irc at the time\r\n22:00:21 wumpus: morcos: I think the conclusion at the time was that it made no difference, but sure would make sense to benchmark\r\n22:00:39 morcos: perhaps historical testing on the virtual vs actual cores was polluted by concurrency issues that have now improved\r\n22:00:47 wumpus: I think there are not more ALUs, so there is not really a point in having more threads\r\n22:01:40 wumpus: hyperthreads are basically just a stored register state right?\r\n22:02:23 sipa: wumpus: yes but it helps the scheduler\r\n22:02:27 wumpus: in which case the only speedup using \"number of cores\" threads would give you is, possibly, excluding other software from running on the cores on the same time\r\n22:02:37 morcos: well this is where i get out of my depth\r\n22:02:50 sipa: if one of the threads is waiting on a read from ram, the other can use the arithmetic unit for example\r\n22:02:54 morcos: wumpus: i'm pretty sure though that the speed up is considerably more than what you might expect from that\r\n22:02:59 wumpus: sipa: ok, I back down, I didn't want to argue this at all\r\n22:03:35 morcos: the reason i haven't tested it myself, is the machine i usually use has 16 cores... so not easy due to remaining concurrency issues to get much more speedup\r\n22:03:36 wumpus: I'm fine with restoring it to number of virtual threads if that's faster\r\n22:03:54 morcos: we should have somene with 4 cores (and \ufffc actually test it though, i agree\r\n22:03:58 sipa: i would expect (but we should benchmark...) that if 8 scriot validation threads instead of 4 on a quadcore hyperthreading is not faster, it's due to lock contention\r\n22:04:20 morcos: sipa: yeah thats my point, i think lock contention isn't that bad with 8 now\r\n22:04:22 wumpus: on 64-bit systems the additional thread overhead wouldn't be important at least\r\n22:04:23 gmaxwell: I previously benchmarked, a long time ago, it was faster.\r\n22:04:33 gmaxwell: (to use the HT core count)\r\n22:04:44 wumpus: why was this changed at all then?\r\n22:04:47 wumpus: I'm confused\r\n22:05:04 sipa: good question!\r\n22:05:06 gmaxwell: I had no idea we changed it.\r\n22:05:25 wumpus: sigh \ufffc\r\n22:05:54 gmaxwell: What PR changed it?\r\n22:06:51 gmaxwell: In any case, on 32-bit it's probably a good tradeoff... the extra ram overhead is worth avoiding.\r\n22:07:22 wumpus: https://github.com/bitcoin/bitcoin/pull/6361\r\n22:07:28 gmaxwell: PR 6461 btw.\r\n22:07:37 gmaxwell: er lol at least you got it right.\r\n22:07:45 wumpus: the complaint was that systems became unsuably slow when using that many thread\r\n22:07:51 wumpus: so at least I got one thing right, woohoo\r\n22:07:55 sipa: seems i even acked it!\r\n22:07:57 BlueMatt: wumpus: there are more alus\r\n22:08:38 BlueMatt: but we need to improve lock contention first\r\n22:08:40 morcos: anywya, i think in the past the lock contention made 8 threads regardless of cores a bit dicey.. now that is much better (although more still to be done)\r\n22:09:01 BlueMatt: or we can just merge #10192, thats fee\r\n22:09:04 gribble: https://github.com/bitcoin/bitcoin/issues/10192 | Cache full script execution results in addition to signatures by TheBlueMatt \u00b7 Pull Request #10192 \u00b7 bitcoin/bitcoin \u00b7 GitHub\r\n22:09:11 BlueMatt: s/fee/free/\r\n22:09:21 morcos: no, we do not need to improve lock contention first.   but we should probably do that before we increase the max beyond 16\r\n22:09:26 BlueMatt: then we can toss concurrency issues out the window and get more speedup anyway\r\n22:09:35 gmaxwell: wumpus: yea, well in QT I thought we also diminished the count by 1 or something?  but yes, if the motivation was to reduce how heavily the machine was used, thats fair.\r\n22:09:56 sipa: the benefit of using HT cores is certainly not a factor 2\r\n22:09:58 wumpus: gmaxwell: for the default I think this makes a lot of sense, yes\r\n22:10:10 gmaxwell: morcos: right now on my 24/28 physical core hosts going beyond 16 still reduces performance.\r\n22:10:11 wumpus: gmaxwell: do we also restrict the maximum par using this? that'd make less sense\r\n22:10:51 wumpus: if someone *wants* to use the virtual cores they should be able to by setting -par=\r\n22:10:51 sipa: *flies to US*\r\n22:10:52 BlueMatt: sipa: sure, but the shared cache helps us get more out of it than some others, as morcos points out\r\n22:11:30 BlueMatt: (because it means our thread contention issues are less)\r\n22:12:05 morcos: gmaxwell: yeah i've been bogged down in fee estimation as well (and the rest of life) for a while now.. otherwise i would have put more effort into jeremy's checkqueue\r\n22:12:36 BlueMatt: morcos: heh, well now you can do other stuff while the rest of us get bogged down in understanding fee estimation enough to review it \ufffc\r\n22:12:37 wumpus: [to answer my own question: no, the limit for par is MAX_SCRIPTCHECK_THREADS, or 16]\r\n22:12:54 morcos: but to me optimizing for more than 16 cores is pretty valuable as miners could use beefy machines and be less concerned by block validation time\r\n22:14:38 BlueMatt: morcos: i think you may be surprised by the number of mining pools that are on VPSes that do not have 16 cores \ufffc\r\n22:15:34 gmaxwell: I assume right now most of the time block validation is bogged in the parts that are not as concurrent. simple because caching makes the concurrent parts so fast. (and soon to hopefully increase with bluematt's patch)\r\n22:17:55 gmaxwell: improving sha2 speed, or transaction malloc overhead are probably bigger wins now for connection at the tip than parallelism beyond 16 (though I'd like that too).\r\n22:18:21 BlueMatt: sha2 speed is big\r\n22:18:27 morcos: yeah lots of things to do actually... \r\n22:18:57 gmaxwell: BlueMatt: might be a tiny bit less big if we didn't hash the block header 8 times for every block. \ufffc \r\n22:21:27 BlueMatt: ehh, probably, but I'm less rushed there\r\n22:21:43 BlueMatt: my new cache thing is about to add a bunch of hashing\r\n22:21:50 BlueMatt: 1 sha round per tx\r\n22:22:25 BlueMatt: and sigcache is obviously a ton\r\n```", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1523554", "body": "heh, how did this go unnoticed.. :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1523554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/81896071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82111720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480", "body": "Ideally this should be ignored on the dev machine.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/41837480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40328338", "body": "s/proposal/proposals\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40328338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40328381", "body": "s/diff/diffs\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40328381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40328740", "body": "Should \"fixed spelling\" be the example we give as a good simple commit message? Maybe \"Correct typo in xx.cpp\", or something similar?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40328740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40328990", "body": "s/markdown to the /markdown in the/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40328990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40329134", "body": "s/time for required/time required/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40329134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40329623", "body": "Suggest rewriting this slightly\n*that the quality of the patch meets the minimum standards for inclusion, as well as\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40329623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40329746", "body": "s/be unit test/be a unit test/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40329746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40329934", "body": "s/peer review is/peer review which is/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40329934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153056511", "body": "If we're touching this please make this link https", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153056511/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23911522", "body": "What exactly does this fix?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23911522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16025304", "body": "@Diapolo It's whitespace\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16025304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109305733", "body": "Should `functional/test_framework/__pycache__` and `util/__pycache__` be included here?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109305733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2601622", "body": "*produced, save someone creating a pull for that.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2601622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151698186", "body": "Did you still want to delete this test @theuni ?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151698186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "RHavar": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11613", "title": "rpc listunspent should expose \"is_mine\" and \"replaceable\"", "body": "Currently `listunspent` only exposes a `safe` which is coded roughly as `confirmations > 0 || (is_mine && !replaceable)` however a consumer very well might want to distinguish between when it's \"mine\" and when it's not (as I presently need to).\r\n\r\nThis ideally would be extended to listunspent, gettransaction and listtransactions. \r\n\r\n(The `listtransactions` already exposes a \"trusted\" which is basically \"is_mine\" but also uses the spendZeroConf  configuration, which is imho rather confusing. So my suggestion would be that all apis expose a consistent set of \"is_mine\", \"replaceable\" and \"confirmations\" (which is already always exposed) and RPC consumers can use these primitives to make decisions.\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11613/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11278", "title": "Core should never source uneconomical outputs", "body": "I've noticed a big uptick in the last couple weeks of transactions I believe are created for the purpose of tracking.\r\n\r\nA recent example is this:\r\nhttps://blockchain.info/tx/ea4491d4335572e3b4aa37d5760dcc1aa718832442cd435c804c2609b12ba8ef\r\n\r\nSending 649 satoshis to my address. In this particular case it's a change-address of mine. I suspect the intention of the transaction is to find out information on  tracking service is interested in information about the transaction \"ae0d2736eacd78d97f8328cac4e4b9a8c7517b01c9df8c9a4628ac9cc21e25b9\" or \"d75534aff5b21aa279a6410594661bfd0ceb5711df005827f25ddd97510e25da\" and hoping I spend-link their dust.\r\n\r\nI believe there should be a comprehensive solution to prevent this \"forcible address reuse\" problem (and would be happy to throw a bitcoin or so to sponsoring its development) but a quick-fix to making this harder is for core to simply stop ever spending uneconomical outputs.\r\n\r\nPros:\r\n* Makes tracking significantly more expensive to do reliably (and thus stopping a lot of it)\r\n* Makes sure users don't lose money when sending\r\n\r\nCons:\r\n* Not great for bitcoins utxo :'(\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flack": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11606", "title": "Improve layout of transaction confirmation dialog", "body": "The dialog currently looks like this (taken from #11556):\r\n\r\n<img width=\"439\" alt=\"32405190-8027db44-c160-11e7-84af-a137da9ea47d\" src=\"https://user-images.githubusercontent.com/425166/32405638-95c0ff90-c169-11e7-8445-ec8676613c28.png\">\r\n\r\nThe layout is quite messy, which makes it ahrd to see what's going on (and thus easy to overlook some problem). IMHO it would be a lot easier to comprehend if the information was structured like this:\r\n\r\n![dialog](https://user-images.githubusercontent.com/425166/32405650-cb5c592e-c169-11e7-8c25-d3d22601fa6a.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58c909d8d118989efd4afea16a3856934268e77b", "message": "Typo fix"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "azavalla": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11601", "title": "Compilation fails on Arch Linux", "body": "### Describe the issue\r\nCompilation of v0.15.0.1 fails on Archlinux.\r\n \r\n#### To reproduce the issue:\r\n1. $ git checkout v0.15.0.1\r\n2. $ ./autogen.sh\r\n3. $ ./configure\r\n4. $ make\r\n\r\n### Behavior \r\n```\r\n$ make\r\nMaking all in src\r\n [ ... ]\r\n  CXX      libbitcoin_util_a-util.o\r\nutil.cpp: In function \u2018void locking_callback(int, int, const char*, int)\u2019:\r\nutil.cpp:110:16: error: \u2018CRYPTO_LOCK\u2019 was not declared in this scope\r\n     if (mode & CRYPTO_LOCK) {\r\n                ^~~~~~~~~~~\r\nutil.cpp:110:16: note: suggested alternative: \u2018CRYPTO_RWLOCK\u2019\r\n     if (mode & CRYPTO_LOCK) {\r\n                ^~~~~~~~~~~\r\n                CRYPTO_RWLOCK\r\nmake[2]: *** [Makefile:6087: libbitcoin_util_a-util.o] Error 1\r\n```\r\n\r\n### What version of bitcoin-core are you using?\r\nVersion v0.15.0.1, commit fb7b52938\r\n\r\n### Machine specs:\r\n- OS:\r\n        Archlinux  4.13.11-1-ARCH\r\n        LSB Version:\t1.4\r\n        Release:\trolling\r\n\r\n### Any extra information that might be useful in the debugging process.\r\nopenssl version:  openssl-1.1.0.f-2\r\nboost-libs version:  boost-libs-1.65.1-1", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ruimarinho": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11589", "title": "Moving listwallets out of the wallet category on rpc help", "body": "### Expected behaviour\r\n[listwallets](https://github.com/bitcoin/bitcoin/blob/2c66cea2d18682de1eef544fc3b74a1487a1741c/src/wallet/rpcwallet.cpp#L2621-L2636) is currently [the only command](https://github.com/bitcoin/bitcoin/blob/2c66cea2d18682de1eef544fc3b74a1487a1741c/src/wallet/rpcwallet.cpp#L3302) under the `wallet` category which is not wallet-specific. In other words, it operates at the global level.\r\n\r\n### Actual behaviour\r\nAdding support for this feature on the [bitcoin-core](https://github.com/ruimarinho/bitcoin-core) js client is more complicated as there is no way to automatically detect which commands require a wallet to be set. Moving this out of the `wallet` category would be a plus (e.g. over to `control`). Another option could be listing a command's support for multiwallet on the help output or providing an rpc with command definitions.\r\n\r\n### What version of bitcoin-core are you using?\r\n0.15.0.1", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wodry": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11581", "title": "[GUI] Transaction confirmation counter \"clock\" symbol does not visualize proportional", "body": "### Transaction confirmation counter \"clock\" symbol does not visualize proportional\r\n\r\n- I would expect the clock/progress meter not to show zero, when there is 1 confirmation, but to show/visualize more than zero (I would expect to see a progress of 1/6 <=> 10/60 \"mins\")\r\n- with \"min\" here, I do not mean real time minutes, but shares of 60 \"min\" on a clock (full circle).\r\n\r\n### Expected behaviour\r\n\r\nWhen less than six, the transaction confirmation counter \"clock\" symbol should show the proportional share of 60 min:\r\n0 confirmations: Question sign\r\n1 confirmation:   Clock \"10 min\" past\r\n2 confirmations: Clock \"20 min\" past\r\n4 confirmations: Clock \"40 min\" past\r\n5 confirmations: Clock \"50 min\" past\r\n6 confirmations: Check sign\r\n\r\n### Actual behaviour what clock symbol shows:\r\n0 confirmations: Question sign\r\n1 confirmation:   Empty (white) clock, with a black line showing north (I would interpret that normally as zero, like on a analog speed meter)\r\n2 confirmations: Clock \"15 min\" past (quarter of the clock black)\r\n3 confirmations: Clock \"30 min\" past (that is correct)\r\n4 confirmations: Clock \"45 min\" past, see screenshot\r\n5 confirmations: Clock \"60 min\" past\r\n6 confirmations: Check sign\r\n\r\n### Screenshots\r\nHere a screenshot of the clock symbol for a transaction that got 4 confirmations\r\n![bildschirmfoto](https://user-images.githubusercontent.com/8447873/32188205-778c003a-bda7-11e7-97c4-b16055fcfc67.png)\r\n\r\n### Version 0.15.0.1\r\n\r\n### Some additional words\r\nI admit, that this is really a nit, nevertheless maybe someone thinks, that this could be improved, too (and has capacity to do that). I know, contributors have really more significant work to do, and I appreciate Your work very much!\r\n\r\nEdit: Tried to make my (really trivial?) point more clear, hopefully", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11581/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbdeadka": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11561", "title": "Negative version of transaction using json-rpc", "body": "Hi!\r\n\r\nI have to ask about the strange transaction version, I get this data using bitcoin json-rpc API.\r\nIf I posted this issue in another project, navigate me please certain url where I have to post my issue.\r\n\r\nBitcoin-core version:\r\nbitcoind@machinename:/home/username$ bitcoin-cli -version\r\nBitcoin Core RPC client version v0.14.2.0-gfc61c83\r\n\r\nOS version: Linux Ubuntu 16.04\r\n\r\nProblem:\r\nI try to get version of transaction with hash \"c659729a7fea5071361c2c1a68551ca2bf77679b27086cc415adeeb03852e369\"\r\n\r\nSee the curl output below:\r\n\r\nroot@machinename:/tmp# curl --data-binary '{\"method\":\"getrawtransaction\",\"id\":\"a2e8f6b0-5c03-4315-a067-050a9adb6dfc\",\"params\":[\"c659729a7fea5071361c2c1a68551ca2bf77679b27086cc415adeeb03852e369\",1]}' \"http://name==@127.0.0.1:18833\"\r\n{\"result\":{\"hex\":\"f0b47b9a01ecf5e5c3bbf2cf1f71ecdc7f708b0b222432e914b394e24aad1494a42990ddfc000000008b483045022100852744642305a99ad74354e9495bf43a1f96ded470c256cd32e129290f1fa191022030c11d294af6a61b3da6ed2c0c296251d21d113cfd71ec11126517034b0dcb70014104a0fe6e4a600f859a0932f701d3af8e0ecd4be886d91045f06a5a6b931b95873aea1df61da281ba29cadb560dad4fc047cf47b4f7f2570da4c0b810b3dfa7e500ffffffff0240420f00000000001976a9147eeacb8a9265cd68c92806611f704fc55a21e1f588ac05f00d00000000001976a914eb3bd8ccd3ba6f1570f844b59ba3e0a667024a6a88acff7f0000\",\"txid\":\"c659729a7fea5071361c2c1a68551ca2bf77679b27086cc415adeeb03852e369\",\"hash\":\"c659729a7fea5071361c2c1a68551ca2bf77679b27086cc415adeeb03852e369\",\"size\":258,\"vsize\":258,\"version\":-1703168784,\"locktime\":32767,\"vin\":[{\"txid\":\"fcdd9029a49414ad4ae294b314e93224220b8b707fdcec711fcff2bbc3e5f5ec\",\"vout\":0,\"scriptSig\":{\"asm\":\"3045022100852744642305a99ad74354e9495bf43a1f96ded470c256cd32e129290f1fa191022030c11d294af6a61b3da6ed2c0c296251d21d113cfd71ec11126517034b0dcb70[ALL] 04a0fe6e4a600f859a0932f701d3af8e0ecd4be886d91045f06a5a6b931b95873aea1df61da281ba29cadb560dad4fc047cf47b4f7f2570da4c0b810b3dfa7e500\",\"hex\":\"483045022100852744642305a99ad74354e9495bf43a1f96ded470c256cd32e129290f1fa191022030c11d294af6a61b3da6ed2c0c296251d21d113cfd71ec11126517034b0dcb70014104a0fe6e4a600f859a0932f701d3af8e0ecd4be886d91045f06a5a6b931b95873aea1df61da281ba29cadb560dad4fc047cf47b4f7f2570da4c0b810b3dfa7e500\"},\"sequence\":4294967295}],\"vout\":[{\"value\":0.01000000,\"n\":0,\"scriptPubKey\":{\"asm\":\"OP_DUP OP_HASH160 7eeacb8a9265cd68c92806611f704fc55a21e1f5 OP_EQUALVERIFY OP_CHECKSIG\",\"hex\":\"76a9147eeacb8a9265cd68c92806611f704fc55a21e1f588ac\",\"reqSigs\":1,\"type\":\"pubkeyhash\",\"addresses\":[\"1Ca5R26xpiQCwjz3aFq1fuCR3fuEe8tmjE\"]}},{\"value\":0.00913413,\"n\":1,\"scriptPubKey\":{\"asm\":\"OP_DUP OP_HASH160 eb3bd8ccd3ba6f1570f844b59ba3e0a667024a6a OP_EQUALVERIFY OP_CHECKSIG\",\"hex\":\"76a914eb3bd8ccd3ba6f1570f844b59ba3e0a667024a6a88ac\",\"reqSigs\":1,\"type\":\"pubkeyhash\",\"addresses\":[\"1NSoVKD8ciGUUQE5rN4AMbKSg9SEXb34Q3\"]}}],\"blockhash\":\"0000000000000007bed1f8466a98c8bc483369ba611c59443895348a1f7ef8ce\",\"confirmations\":234887,\"time\":1378684263,\"blocktime\":1378684263},\"error\":null,\"id\":\"a2e8f6b0-5c03-4315-a067-050a9adb6dfc\"}\r\n\r\nNotice: \"version\":-1703168784\r\nnegative version.\r\n\r\n\r\n### Expected behaviour\r\npositive version of transaction\r\n\r\n### Actual behaviour\r\nnegative version of transaction\r\n\r\n\r\n\r\n### What version of bitcoin-core are you using?\r\nBitcoin Core RPC client version v0.14.2.0-gfc61c83\r\n\r\n### Machine specs:\r\n- OS: Linux Ubuntu 16.04\r\n- CPU: 8\r\n- RAM: 8 GB\r\n- Disk size: 800 gb\r\n- Disk Type (HD/SDD): SSD", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11561/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msxmine": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11537", "title": "Add an option for evenly connecting to nodes on different types of networks", "body": "### FEATURE REQUEST\r\n\r\nCurrently, when a bitcoin node is set up with a connection to both TOR and normal IPv4/6 internet, the 8 outbound-only connection slots, almost always get filled with nodes connecting over IP.\r\nAdding a config option, which would try to ballance these connections based on what kind of network they go through, would be benefficial in many ways:\r\n\r\n1. It would add edges between bitcoin network on TOR and normal internet, reducing delays, and the risks associated with an attacker isolating a part of TOR-bitcoin-network from the rest of the world\r\n(Or an ISP/government man-in-the-middling all the normal IP connections)\r\n\r\n2. It would help hide/annonymise normal user's transactions from his/her ISP, by mixing them with TOR-outbound ones\r\n\r\n3. It would reduce the stress on normal general purpose TOR exit nodes, as users would more likely/reliably connect to TOR-IPv4/6 bitcoin nodes instead of exiting into normal internet first, and then connecting to default IPv4/6-only bitcoin nodes\r\n\r\nI understand it is possible to create such bridges already, by forcing connections to TOR-only nodes, or by just running a node with lots of inbound slots, but I think the proposed option, would greatly increase the number of such relays, and remove the need for user to maintain a TOR-node whitelist, by handing this work off to normal bitcoind connection finding algorithm.\r\n\r\nThis could be implemented as a minimum number of connections for each network, or just a simple evening boolean switch. (Which could be enabled by default for bitcoind installs with TOR connectivity)\r\n\r\nIn the future, if bitcoin was to support a new network type (for example cjdns/I2P/GNUnet), this option would help establish a presence on the new network faster\r\n\r\nbitcoind: 0.15", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coinsmith": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11464", "title": "Payment to yourself shows no address in Qt client", "body": "## Issue\r\nWhen transacting unspent inputs to a new address in own wallet, the qt registers it as 'payment to yourself' without showing the receiving address. That can only be seen in the details or via 'listunspent' command\r\n\r\n## Can you reliably reproduce the issue?\r\nYes\r\n\r\n## If so, please list the steps to reproduce below:\r\n1. create raw transaction to own address with multiple inputs\r\n2. send the raw transaction with a miner fee\r\n3. overall balance stays the same minus miner fee, in the transactions tab shows 'payment to yourself' without the receiving address\r\n\r\n## Expected behaviour\r\nI'd expect the payment to show up as a received payment with (my own) recipient address and 'payment to self' tag.\r\n\r\n## Actual behaviour\r\nQt client only shows miner fee as 'transacted' and shows what seems to be an empty transaction without a receiving address in the transactions tab.\r\n\r\n## Screenshots.\r\n\r\n![qtweird](https://user-images.githubusercontent.com/11705841/31320956-d335c23a-ac7d-11e7-99f8-c696437c7f99.png)\r\n\r\n### What version of bitcoin-core are you using?\r\nList the version number/commit ID, and if it is an official binary, self compiled or a distribution package such as PPA.\r\n\r\nCore 14.02\r\n\r\n### Machine specs:\r\n- OS: Ubuntu 14.04\r\n- CPU: amd\r\n- RAM: 8G\r\n- Disk size: 360Gb\r\n- Disk Type (HD/SDD):Sata\r\n\r\n### Any extra information that might be useful in the debugging process.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnewbery": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11450", "title": "ScanForWalletTransactions return value is incorrectly documented", "body": "`ScanForWalletTransactions()` has the following comment about its return value:\r\n\r\n```\r\n * Returns null if scan was successful. Otherwise, if a complete rescan was not\r\n * possible (due to pruning or corruption), returns pointer to the most recent\r\n * block that could not be scanned.\r\n```\r\n\r\nThis is not strictly true. If `abortrescan` is called, then `ScanForWalletTransactions()` will return `nullptr`, even though the scan wasn't successful to the tip.\r\n\r\nThis in turn causes a minor bug in `importmulti`, where the call doesn't return the correct error and warning about potentially not finding transactions if `abortrescan` was called.\r\n\r\nI think the correct fix is for `ScanForWalletTransactions()` to inform the caller that the rescan was aborted.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97c3cada9266e0aebd0f97c5e9de09a7d10456fa", "message": "[docs] Clarify -walletdir usage"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ade9ce1a679a026c84e5baa9f8595fa2be78a5", "message": "[tests] allow tests to be run with --usecli\n\ntest_framework accepts a new --usecli parameter. Running the test with\nthis parameter will cause all RPCs to be sent through bitcoin-cli rather\nthan directly over http. By default, individual test cases do not\nsupport --usecli, and self.supports_cli must be set to True in the\nset_test_params method.\n\nWe can make supports_cli default to True in future once we know which\ntests will fail with use_cli."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5efad6cfb60d8efe678b1a9285a73d265ea79b", "message": "[tests] refactor node_network_limited"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b425131f5ace294f0d8be579f5ef596907cf1e16", "message": "[tests] remove redundant duplicate tests from node_network_limited"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e029845919eedcb4c4ff5f951cc85d95da68ad1", "message": "[tests] node_network_limited - remove race condition\n\nnode_network_limited had a race condition, since wait_for_block()\ndoesn't do what you might expect. It only checks the most recent block\nreceived over the P2P interface (perhaps we should rename the method\nwait_for_most_recent_block() to avoid future confusion). The test can\nfail if the node sends us invs for other blocks, we respond with a\ngetdata, and the node sends us one of those blocks in the 0.05 second\nwait_until loop window.\n\nFix this by not responding to inv messages with getdata messages."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfe294805a094ba4ed6178a56d0a7588fcd8c27", "message": "[tests] define NODE_NETWORK_LIMITED in test framework"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12853120484e19bbd9cf90574d5eaa9cb46255a5", "message": "[tests] fix flake8 warnings in node_network_limited.py"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2862b562cc17f9d4507dab3b9281bf066b093e16", "message": "[tests] remove redundant univalue_tests.cpp"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678", "message": "[tests] Add NetworkThread assertions\n\nCheck that P2PConnections aren't created after the NetworkThread\nhas started and that at any time only one NetworkThread is running."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e08b3510c64e35fc51327562d15d938f4b656e", "message": "[tests] Fix network threading in functional tests\n\nassumevalid.py, example_test.py and p2p-acceptblocks.py add\np2p_connections after the NetworkThread has been started. This isn't\npermitted. Fix test to restart the network thread when adding new\nconnections.\n\np2p-leaktest.py had a potential race condition if the NetworkThread\nhadn't terminated by the time we tried to restart it."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74e64f24b8cb701379b34442f21332361dcc91f9", "message": "[tests] Use network_thread_start() in tests."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fc6e71d1994d58c25edebd8063555998752349a", "message": "[tests] Add network_thread_ utility functions.\n\nAdd network thread_start(), network_thread_running() and\nnetwork_thread_join() utility functions in mininode.py and use\nnetwork_thread_running() in network thread assertions."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/873beca6deda119077f53921f0d19c3ebfc7cc44", "message": "[tests] Rename NodeConn and NodeConnCB\n\nNodeConn -> P2PConnection\nNodeConnCB -> P2PInterface"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff8a9b068ae15c569ce66abb58bf6f909b879a7d", "message": "[tests] Add combinedlogslen argument to test_runner.py\n\nInstead of calling combine_logs from test_runner when the environment variable\nPYTHON_DEBUG is set, add a combinedlogslen argument. This makes it easier\nto call when running locally, and allows a different length of combined logs\nto be printed."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886", "message": "[tests] [travis-ci] Move Travis functional test log post processing to test_runner"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba1c54edd73406e66ddae5ae2ac90183c3582bf", "message": "[tests] Improve logging shutdown and add hint for combine_logs"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9dfa9bccc5cbb6096c60498651b451297f0a931", "message": "[tests] Move version message sending from NodeConn to NodeConnCB\n\nThis commit moves the logic that sends a version message\non connection from NodeConn to NodeConnCB. NodeConn should\nnot be aware of the semantics or meaning of the P2P payloads."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad596fc37c8733ab806a0aa4224ac437d37aee5", "message": "[tests] Make NodeConnCB a subclass of NodeConn\n\nThis makes NodeConnCB a subclass of NodeConn, and\nremoves the need for the client code to know\nanything about the implementation details of NodeConnCB.\n\nNodeConn can now be swapped out for any other implementation\nof a low-level connection without changing client code."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d404385f46811eeeea05c55ef786bc4adcb77", "message": "[tests] Move only: move NodeConnCB below NodeConn\n\nThis is required since NodeConnCB will inherit from NodeConn\nafter the next commit."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d50598569fec0a4be4adef978a593aa71e87d02", "message": "[tests] Tidy up mininode\n\nAdd docstrings and renames some methods.\nAlso removes the redundant NodeConn.readable() method override."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2ae6f32a6e3e90d77564758383b9afbbac890b7", "message": "[tests] Remove mininode periodic (half-hour) ping messages"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11881", "title": "[WIP] [concept] Remove Python2 support", "body": "Following discussion here: https://github.com/bitcoin/bitcoin/pull/11843#issuecomment-351033742\r\n\r\nIt's easier for maintainers if all python tools/scripts support only a single version of Python. There are only a few scripts that aren't explicitly python3 at this point, so this PR changes those remaining scripts to explicitly require python3.\r\n\r\nStill a WIP, and all of these changes need to be reviewed/tested thoroughly. Looking for high-level feedback on whether this is wanted.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11818", "title": "I accidentally [deliberately] killed it [the ComparisonTestFramework]", "body": "Builds on #11771, #11772, #11773 and #11817. Please review those PRs first.\r\n\r\nFinal step in #10603.\r\n\r\n- First commit removes bip9-softforks.py.  bip9-sofforks.py was intended to be a generic test for versionbits deployments. However, it only tests CSV activation and was not updated to test segwit activation. CSV activation is tested by bip68-112-113-p2p.py, so this test is duplicated effort. Rather than try to update it to use the BitcoinTestFramework, just remove it. (see https://github.com/btcdrak/bitcoin/pull/8 for previous discussion around the redundancy of bip9-softforks.py)\r\n- Second commit removes the now unused BitcoinComparisonFramework class and the comptool and blockstore modules.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817", "title": "[tests] Change bip68-112-113-p2p to use BitcoinTestFramework", "body": "Builds on #11771. Please review that PR first.\r\n\r\nNext step in #10603.\r\n\r\n- first four commits tidy up bip68-112-113-p2p.py\r\n- fifth commit removes usage of ComparisonTestFramework", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11773", "title": " [tests] Change p2p-fullblocktest to use BitcoinTestFramework", "body": "Builds on #11771. Please review that PR first.\r\n\r\nNext step in #10603.\r\n\r\n- first three commits tidy up p2p-fullblocktests.py\r\n- fourth commit removes usage of ComparisonTestFramework\r\n\r\nLonger term, it would be better to separate net_processing testing from validation testing, but I think this is still a useful PR, since it moves us away from the comparison test framework.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11772", "title": " [tests] Change invalidblockrequest to use BitcoinTestFramework", "body": "Builds on #11771. Please review that PR first\r\n\r\nNext step in #10603.\r\n\r\n- first commit tidies up invalidblockrequest.py\r\n- second commit removes usage of ComparisonTestFramework", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771", "title": " [tests] Change invalidtxrequest to use BitcoinTestFramework", "body": "Next step in #10603\r\n\r\n- first commit changes log level for an internal log from INFO to DEBUG. (Not really related, but I started finding the INFO level logging annoying when debuging test failures)\r\n- second commit introduces a `P2PStub` class - a subclass of `NodeConnCB` which has its own block and tx store and responds appropriately to getdata requests. Not all the functionality is used in `invalidtxrequest.py`, but will be used in `invalidblockrequest.py` and `p2p-fullblocktest` when those are changed to use `BitcoinTestFramework`\r\n- third commit tidies up `invalidtxrequest.py`\r\n- fourth commit removes usage of `ComparisonTestFramework`", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10762", "title": "[WIP] [wallet] Remove Wallet dependencies from init.cpp", "body": "This continues the work of #7965. This PR, along with several others, would remove the remaining dependencies from libbitcoin_server.a on libbitcoin_wallet.a.\r\n\r\nI've used the same `boost::signal` approach that is used in the validationinterface. bitcoind.cpp and qt/bitcoin.cpp register wallet initialization/destruction callbacks as slots in a `WalletInitInterface`, and init.cpp emits those signals during startup/shutdown. This could potentially be extended in future to allow multiple wallets or other modules to register.\r\n\r\nTo create the interface, I've just translated all the old init.cpp wallet function calls into signals. I've not done any thinking about whether it makes sense to change that interface by combining/splitting those calls. This is a purely internal interface, so there's no problem in changing it later.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10740", "title": "[WIP] [wallet] dynamic loading/unloading of wallets", "body": "Adds `openwallet` and `closewallet` RPCs. This allows wallets to be loaded and unloaded dynamically during runtime without having to stop-start the node with new `-wallet` params.\r\n\r\nMain motivation for this was the fact that several wallet parameters are actions for individual wallet load/creation, rather than properties of the wallet component. Examples are `-salvagewallet`, `-rescan`, `-usehd` and `-upgradewallet`. Continuing with that config/loading model is difficult in a multi-wallet world - how can users run those actions on individual wallets when loading multiple wallets? This PR offers a solution: individual wallets can be loaded at run-time, and RPC parameters can be passed in to carry out the various wallet-loading actions. Note that none of those load actions are yet implemented in this PR, but can easily be added.\r\n\r\nThe `openwallet` RPC also takes a passphrase argument, so the wallet can be unlocked on opening. This is a solution to some of the edge-cases in #10882 (where we could make a wallet unusable if its best block was behind the tip).\r\n\r\nIncludes functional test.\r\n\r\nOpen questions:\r\n\r\n- [ ] Should there be a separate RPC for creating a new wallet or should that be done using `openwallet`? (my initial thoughts are that there should be a separate RPC)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160", "title": "Add updatepeer RPC", "body": "Adds an `updatepeer` RPC to update peer config and carry out actions on the peer by NodeId. At the moment, the actions are just changing whether the peer is whitelisted and whether the peer is a manual_connection (previously called an addnode). Future possible actions would be changing banscore, banning, and so on.\r\n\r\nThis is designed to be called using named arguments, but due to the RPC infrastructure can also be called with positional arguments (although doing so would be very fiddly).\r\n\r\nI've set the category to hidden for now. We may want to make the whitelisting behaviour more granular in future and I don't want to commit us to a public API that we can't then change.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137648066", "body": "Is this removal intended? How is it related to this PR?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137648066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96075349", "body": "yep - labels can be used by maintainers to correctly categorize the issues/PRs (and contain many other categories such as 'Questions and Help', 'Upstream', etc). This advice is for individual contributors to mark their own PRs with the component or area they're touching.\r\n\r\nLooking at the open PRs, there doesn't seem to be overwhelming consensus one way or the other for square brackets, so I've left the examples below as they were.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96075349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96667794", "body": "ok, removed *Refactor*", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96667794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109411761", "body": "Yes, I think you're right. Thanks.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109411761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "danra": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11425", "title": "mempool_reorg.py test failure on Travis", "body": "See here https://travis-ci.org/bitcoin/bitcoin/jobs/281606174\r\n\r\n### Describe the issue\r\nmempool_reorg.py test fails\r\n\r\n### Can you reliably reproduce the issue?\r\nNo, this is just a spurious (but suspicious) error I've seen while trying to get my scripted-diff to work (the test error is on a Travis host which doesn't run the scripted diff)\r\n\r\n### What version of bitcoin-core are you using?\r\nCommit 512530b106c9cc9a1b0973f889d12a37aa4fe81b in my own refactor/dry-config branch, which is just two commits above the recent bbc901d3a683c92438a6b28dca50b956decc4433 on master. My changes are unrelated to any memory pool functionality.\r\n\r\n### Machine specs:\r\nSee on Travis.\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11425/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11165", "title": "Bug: Possible overflow calling CTxMemPoolEntry::UpdateAncestorState()", "body": "### Describe the issue\r\n`CTxMemPoolEntry::UpdateAncestorState()` `modifySigOps` parameter type is `int`, which doesn't match `update_ancestor_state`'s `modifySigOpsCost` member type which is `int64_t`.\r\n\r\nThis seems to be unintentional, since the only use `update_ancestor_state` has is for calling `CTxMemPoolEntry::UpdateAncestorState()`. Therefore, either its member's type is too wide for no reason, since it is always cast to `int` when the function called (possibly causing an overflow!), and therefore it should be changed to be an `int` as well; or, `CTxMemPoolEntry::UpdateAncestorState()` should have its parameter type changed to `int64_t` to match the member.\r\n\r\n### What version of bitcoin-core are you using?\r\ncommit 7fd49d01dc2ea444ba4d81d0cfa17486b03c8515\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11342", "title": "Sanity assert GetAncestor() != nullptr where appropriate", "body": "Add sanity asserts for return value of `CBlockIndex::GetAncestor()` where appropriate.\r\n\r\nIn validation.cpp `CheckSequenceLocks`, check the return value of `tip->GetAncestor(maxInputHeight)` stored into `lp->maxInputBlock`. If it ever returns `nullptr` because the ancestor isn't found, it's going to be a bad bug to keep going, since a `LockPoints` object with the `maxInputBlock` member set to `nullptr` signifies no relative lock time.\r\n\r\nIn the other places, the added asserts would prevent accidental dereferencing of a null pointer which is UB.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11231", "title": "Improve netaddress implementation", "body": "Making most of the implementation simpler and safer.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luke-jr": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11396", "title": "Payment request labels don't correspond with address labels?", "body": "For some reason, editing the label of an address does not update the corresponding payment request. There is also no way to edit the label of a payment request.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11396/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12208", "title": "GUI: Rephrase Bech32 checkbox texts, and enable it with legacy address default", "body": "- \"Bech32\" isn't very user-friendly; used \"native segwit\" as in #11937.\r\n- You don't spend from addresses.\r\n- No reason to block off Bech32 access with legacy address default.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12146", "title": "Wallet: Support disabling implicit Segwit operation", "body": "This optional feature (disabled by default) leaves Segwit wallet support mostly as-is, except:\r\n\r\n1. It disables automatic implied Segwit recognition for keys not explicitly generated as Segwit. This means each Segwit address generated needs a new backup, same as previous versions.\r\n2. Default address/change type is legacy.\r\n\r\n`OUTPUT_TYPE_DEFAULT` is changed to an actual `OutputType` value, in expectation of reuse by #12119 as well as enabling the possibility of having the implicit segwit flag be set per-wallet once we have runtime wallet loading.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11966", "title": "clientversion: Use full commit hash for commit-based version descriptions", "body": "git keeps changing the number of digits in abbreviated hashes, resulting in the GitHub archive hash changing because we include it here.\r\nTo workaround this and avoid hashes that become increasingly ambiguous later on, just include the full commit hash when building from git.\r\nThis has no effect on tagged releases.\r\n\r\n(Cleanly mergable back to 0.10 without backport)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11803", "title": "Bugfix: RPC/Wallet: Include HD key metadata in dumpwallet", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11802", "title": "RPC/Wallet: Refuse to dumpprivkey for derived addresses", "body": "The specific ECDSA \"private key\" of a derived key is merely a midstate of the signature algorithm. It doesn't really make sense to dump it.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11660", "title": "RPC: Internal named params", "body": "This allows RPC code to use named parameters internally, greatly increasing readability, as well as helping avoid behaviour tied to param count rather than the presence of specific parameters.\r\n\r\nObject type checking is expanded to support multiple allowed types, making param and type-checking clean.\r\n\r\nTemporarily, a boolean is added to the end of CRPCCommand to indicate whether the function expects named params. Once all RPC functions have been converted, we can drop it (as well as old internal-positional-param code).\r\n\r\nAlternative to #11441 ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11658", "title": "During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after", "body": "Pruning forces a chainstate flush, which can defeat the dbcache and harm performance significantly.\r\n\r\nAlternative to #11359", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11383", "title": "Basic Multiwallet GUI support", "body": "This adds a combobox to the GUI main window and debug window to select the wallet being viewed/used.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11089", "title": "Enable various p2sh-p2wpkh functionality", "body": "A subset of #9017", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082", "title": "Add new bitcoin_rw.conf file that is used for settings modified by this software itself", "body": "This is part of #7510, without the new GUI settings (ie, just the minimal framework for the RW conf file).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10730", "title": "Move script flag to/from-string logic from tests to script/interpreter", "body": "When we last discussed making scripts debuggable (sometime after #3901), the plan was to instead trace execution rather than single-step through it.\r\n\r\nThis is a dependency step toward that, and is eventually used for the RPC `verifyscript` to parse its `\"flags\"` option.\r\n\r\nSee also #10729 ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10729", "title": "Wrap EvalScript in a ScriptExecution class", "body": "When we last discussed making scripts debuggable (sometime after #3901), the plan was to instead trace execution rather than single-step through it.\r\n\r\nThis is the first step toward that goal. The full implementation can be found on my `script_debugger` branch.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10615", "title": "RPC: Allow rpcauth configs to specify a 4th parameter naming a specific wallet (multiwallet RPC support)", "body": "Simple rebase of current RPC stuff. No endpoints yet.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10595", "title": "Bugfix: RPC/Mining: Use pre-segwit sigops and limits, when working with non-segwit GBT clients", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10594", "title": "Bugfix: net: Apply whitelisting criteria to outgoing connections", "body": "Whitelisting currently only works for inbound connections, but would be useful for outgoing just as well.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10593", "title": "Relax punishment for peers relaying invalid blocks and headers", "body": "Supercedes #10512 by simply restricting punishments to our outgoing non-feeler connections, and only punishing with a disconnect, not a ban.\r\n\r\nThis is necessary to avoid banning peers that merely run old formerly-full nodes, after a softfork. We disconnect primary peers because we want compatible full nodes for that role, but allow non-full nodes to remain connected to inbound slots so they can sync the correct chain from us.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10353", "title": "Refactor script interpreter flags to use new CScriptFlags class for stricter checking", "body": "I noticed that we've run out of bits in script flags, so I refactored the code so flags are an explicit class and cause compile failures instead of silent bugs, and can be safely extended to larger sizes. IMO it is also more readable, especially in regard to `IsAtLeastOneSet`.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9849", "title": "Qt: Network Watch tool", "body": "Simple realtime log of p2p network activity (blocks and transactions only)\r\n\r\n- Doesn't begin logging until opened; limited to 0x400 entries (outputs)\r\n- Automatically scrolls if left at the bottom of the log; maintains position if left elsewhere\r\n- Memory-efficient circular buffer; CTransaction references become weak after they're 0x200 entries back in the log\r\n- Search function that selects all matching log entries, including ongoing", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9749", "title": "If -spkreuse=0, ensure transactions in mempool always have unique scriptPubKeys", "body": "Exceptions:\r\n- Multiple inputs in the same transaction are allowed to spend against the same scriptPubKey\r\n- The same scriptPubKey may be used in the mempool as both first an output, and then spent in a later transaction's input\r\n\r\nChanges since original 2013 patch (pre-squashed):\r\n- Refactor: Move CScript::ScriptPubkeyReuseHash to ScriptHashkey(CScript) in txmempool\r\n- Update mempool duplicate-scriptPubKey limiting with C++11 and misc formatting improvements\r\n- Bugfix: Use bitwise operators for mempool SPK states\r\n- Use CValidationState for SPK reuse rejections\r\n- Move mapTxSPK to CTxMemPoolEntry.mapSPK\r\n- Make SPK reuse filtering optional (use -spkreuse)\r\n\r\nKnown issues:\r\n- ~~This breaks RBF in most usage scenarios.~~\r\n- ~~Someone could watch for transactions and spam dust to block them on nodes using this.~~", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9537", "title": "Wallet: Refactor ReserveKeyFromKeyPool for safety", "body": "ReserveKeyFromKeyPool's previous behaviour is to set nIndex to -1 if the keypool is empty, OR throw an exception for technical failures.\r\nInstead, we now return nIndex (always >= 0) and throw a keypool_empty exception if the keypool is empty.\r\n\r\nThis is to ensure calling code must handle the empty case, and so the compiler can provide use-without-assignment warnings when appropriate.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9422", "title": "Refactor mempool.dat to be extensible, and store missing info", "body": "Should fix #9103 ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9245", "title": "Drop IO priority to idle while reading blocks for getblock requests", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152", "title": "Wallet/RPC: sweepprivkeys method to scan UTXO set and send to local wallet", "body": "Does this look like a good approach?\r\n\r\nTODO:\r\n\r\n* rawtransaction sweep functionality\r\n* GUI sweep (Receive tab?)\r\n* abstract shared sweep logic\r\n* ~~RPC tests~~", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8471", "title": "Key origin metadata, with HD wallet support", "body": "This upgrades #5916/#8132 to support HD wallets by adding a map<string,string> at the end of CKeyMetadata which can be used to store future-proof data, similar to CWalletTx's mapValue.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7533", "title": "RPC: sendrawtransaction: Allow the user to ignore/override specific rejections", "body": "Replace boolean allowhighfees with an Array of rejections to ignore (in a backward compatible manner)\n\nThis is useful for node operators who wish to manually accept transactions that don't meet their typical policies, yet don't necessarily want to override all the policies.\n\nIt's a bit ugly internally - suggestions on improving that are welcome.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/958325", "body": "Is this a bugfix, or new feature?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/958325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1083588", "body": "What do we actually use in librt? I don't see a single librt symbol in the source...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1083588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1083758", "body": "boost/interprocess, so new in 0.6\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1083758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759932", "body": "Sorry guys. I really should break that particular habit everywhere: I do it so that diffs are easier to read, but it occurs to me that I also intentionally change symbol names when their behaviours change... even if the behaviour is strictly return types <.<\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1975640", "body": "0.7.1rc1 is tagged\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1975640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3191575", "body": "@gavinandresen Maybe emphasize that the actual value is configurable here?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3191575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4012545", "body": "@Diapolo Could you please make each change a single commit in the future?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4012545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047", "body": "My directory is so cluttered that I use \"git status -uno\" ;)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47948611", "body": "How is host==OSX determined here, besides OSX_SDK availability?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47948611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131452934", "body": "Why is `bc` not needed here? Other builds need it...?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131452934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40348637", "body": "s/hierarchy/roles/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40348637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40348949", "body": "Prefer colon format (and seems to be more common):\n\n```\np2p: Add ZMQ message support\nconsensus: Add new opcode for BIP-XXXX\nqt/wallet: Refactor send code\n```\n\n(also note ZMQ really has nothing to do with p2p..)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40348949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349117", "body": "Should I reopen TBC support? ;)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349180", "body": "libsecp256k1*\n\nAlthough I'm not sure this document should apply to it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349302", "body": "This doesn't belong under \"must\".\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349390", "body": "Also needs non-trivial miner support (for new rules) or community consensus (for removed/changed rules).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349459", "body": "Not all good NACK reasons are technical.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40349459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46903548", "body": "commit hash*\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46903548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46919806", "body": "How about this dot: \u18df\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46919806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79793873", "body": "Not sure this is something we want to encourage...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79793873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79793927", "body": "\"same change\"?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79793927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2831673", "body": "Maybe all the source files (or those changed this year) should have this bumped too?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2831673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/44841995", "body": "I don't think we need a mailing list post for every merge request... especially considering the ML is for Bitcoin, not Bitcoin Core.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/44841995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/44842076", "body": "Qt is not uppercased.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/44842076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2838397", "body": "10 minutes to an hour isn't _quite_ instant.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2838397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2838402", "body": "No, there are multiple clients. This particular one is called \"Satoshi\" (core codebase), \"bitcoind\", and \"Bitcoin-Qt\".\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2838402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5867096", "body": "Does markdown not infer URLs?\n\nWith this amount of ugliness, might as well use straight HTML... the point of markdown is to still look nice as plain text, right?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5867096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657494", "body": "Shouldn't this be conditional on !windows?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666059", "body": "Why should IPv6 be disabled by default for Bitcoin-Qt? :/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666076", "body": "Also, note that USE_\\* flags currently represent optional dependencies. I'm not sure IPv6 is a dependency, just a feature?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996036", "body": "I think messagepage is still a better name for this. :p\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996276", "body": "Renaming it will let GitHub show the changes properly too ;)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2762816", "body": "So master does NOT have the overall problem, correct?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2762816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3039855", "body": "relro at least is an ELF feature, so it doesn't make sense for Mac (Mach) or Windows (PE).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3039855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5547428", "body": "This mixes space-delimited and comma-delimited.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5547428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rustyrussell": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11379", "title": "getblocktemplate fails for regtest mode.", "body": "### Describe the issue\r\n\r\nIn the lightning tests, we run bitcoind in regtest mode.  ~~~We started seeing intermittent test failures, caused by `generate` not including transactions we had just `sendrawtransaction`ed; this delay is noticeable when there are multiple submitted txs.~~~ (Edit: my test harness fail).  I tried to work around it by polling `getblocktemplate` to see when our txs are included, only to run into this bug :(\r\n\r\n1. bitcoind -regtest -testnet=0 &\r\n2. bitcoin-cli -regtest -testnet=0 getblocktemplate\r\n\r\n\r\n### Expected behaviour\r\n\r\nI should get the block template.\r\n\r\n### Actual behaviour\r\nerror code: -9\r\nerror message:\r\nBitcoin is not connected!\r\n\r\n### What version of bitcoin-core are you using?\r\nv0.14.2.0-gfc61c83\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HamishMacEwan": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11371", "title": "Bitcoin 0.15.0 repeatedly bans only connect peer", "body": "### Describe the issue\r\n\r\nAfter installing Bitcoin Core 0.15.0 I inadvertently ran an earlier version which corrupted the block database.  Stopped 0.13.2 and ran 0.15.0, it crashed without indicating an error.  Deleted the three directories (blocks, chainstate, database) and ran 0.15.0, it crashed.  Ran 0.15.0 again and it began an initial block download from a LAN instance of Bitcoin-QT 0.15.0  Later progress stopped.  As the log indicates it seems to have had a problem with its single LAN peer:\r\n\r\n2017-09-19 20:44:48 UpdateTip: new best=00000000000000002b63d17164cde033e40254991a151ed8846233583d9c8035 height=312807 version=0x00000002 log2_work=79.925576 tx=43365575 date='2014-07-28 04:54:42' progress=0.169187 cache=479.3MiB(3351479txo)\r\n2017-09-19 20:44:48 Pre-allocating up to position 0xb00000 in rev00160.dat\r\n2017-09-19 20:44:48 UpdateTip: new best=000000000000000024cef26cfacce582e67132e741891d69c9b50f1e8b532754 height=312808 version=0x00000002 log2_work=79.925677 tx=43366011 date='2014-07-28 05:10:43' progress=0.169189 cache=479.4MiB(3351684txo)\r\n2017-09-19 20:44:48 Misbehaving: 192.168.1.71 peer=0 (0 -> 100) BAN THRESHOLD EXCEEDED\r\n2017-09-19 20:44:48 ERROR: ProcessNewBlock: AcceptBlock FAILED\r\n2017-09-19 20:44:58 receive version message: /Satoshi:0.15.0/: version 70015, blocks=486071, us=[::]:0, peer=1\r\n2017-09-19 20:44:58 Misbehaving: 192.168.1.71 peer=1 (0 -> 100) BAN THRESHOLD EXCEEDED\r\n2017-09-19 20:44:58 ERROR: ProcessNewBlock: AcceptBlock FAILED\r\n2017-09-19 20:45:14 receive version message: /Satoshi:0.15.0/: version 70015, blocks=486071, us=[::]:0, peer=2\r\n\r\nThis behaviour continues until Bitcoin-QT is exited.\r\n\r\n### Can you reliably reproduce the issue?\r\n\r\nYes.\r\n\r\n#### If so, please list the steps to reproduce below:\r\n\r\n1. Run Bitcoin-QT 0.15.0\r\n\r\n### Expected behaviour\r\n\r\nShould continue the initial block download.\r\n\r\n### Actual behaviour\r\n\r\nPerforms no block download activity\r\n\r\n### Screenshots.\r\n\r\n\r\n### What version of bitcoin-core are you using?\r\n\r\nBitcoin Core version v0.15.0 (64-bit)\r\n94d0626426810db85b342dbf801681752e474ff0aff726783cb5297b70999a45  bitcoin-0.15.0-win64-setup.exe\r\n\r\n### Machine specs:\r\n- OS: Windows 10 Home\r\n- CPU: i7-4790K\r\n- RAM: 32.0 GB\r\n- Disk size: 931 GB\r\n- Disk Type: HD (Drive E:)\r\n\r\n### Any extra information that might be useful in the debugging process.\r\n\r\nI use:\r\n\r\n connect=192.168.1.71\r\n\r\nin bitcoin.conf to limit connection to the single LAN peer.\r\n\r\nRemoved that connect, and the IBD resumed without problems.\r\n\r\nStopped Bitcoin-QT, restored the single connect, and IBD resumed without issue.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KanoczTomas": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11368", "title": "bitcoin core crashes when too many rpc calls are made", "body": "### Describe the issue\r\nbitcoin-core crashes after too many rpc calls done.\r\n### Can you reliably reproduce the issue?\r\n#### If so, please list the steps to reproduce below:\r\n1. listen on zeromq 'rawtx' event.\r\n2. make an rpc request (getrawtransaction) for every transactions input\r\n3. wait a while\r\n4. when a new block comes bitcoin-core crashes with database IO failure. \r\n\r\nIncreasing the rpcqueue in config does not solve the issue, but delays crash\r\nWhen bitcoin-core's nofiles limit (increased with prlimit) got increased to 8192 it seems to be stable, but maybe it is just a function of time to make it crash.\r\n\r\n### Expected behaviour\r\nI would expect I get a queue full error (as I get), but core will not crash, just my requests will time out\r\n\r\n### Actual behaviour\r\ncore crashes with IO database error when a new block arrives. When checking fd's for bitcoin it is normaly aroun 300, after a while it spikes to more than 1000 and bitcoind crashes. If the rpc gets queried while bitcoind is starting and is not in sync, or a new block arrives it crashes almost immediately.\r\n\r\n### What version of bitcoin-core are you using?\r\nhappened on 0.14.2, 0.15.0.rc3, 0.15.0, 0.15.0.1 - did not test others\r\n\r\n### Machine specs:\r\ntrid on 2 computers a laptop and armhf based odroid xu4 , runing linux. Happened on both. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11368/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NicolasDorier": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11327", "title": "Deadlock detection bogus", "body": "At startup, seems to happen when rebroadcasting wallet's transactions, running 0.15 rc3: (enable-debug)\r\n\r\n```\r\n2017-09-14 13:17:09 POTENTIAL DEADLOCK DETECTED\r\n2017-09-14 13:17:09 Previous lock order was:\r\n2017-09-14 13:17:09  cs_main  wallet/wallet.cpp:1655\r\n2017-09-14 13:17:09  cs_wallet  wallet/wallet.cpp:1655\r\n2017-09-14 13:17:09  (1) mempool.cs  wallet/wallet.cpp:1677\r\n2017-09-14 13:17:09  cs_main  wallet/wallet.cpp:1233\r\n2017-09-14 13:17:09  (2) cs_wallet  wallet/wallet.cpp:1233\r\n2017-09-14 13:17:09 Current lock order is:\r\n2017-09-14 13:17:09  cs_main  wallet/wallet.cpp:1655\r\n2017-09-14 13:17:09  (2) cs_wallet  wallet/wallet.cpp:1655\r\n2017-09-14 13:17:09  (1) mempool.cs  wallet/wallet.cpp:1677\r\nAssertion failed!\r\n\r\nProgram: C:\\Program Files\\Bitcoin-0.15.0\\bin\\bitcoind.exe\r\n```\r\n\r\n~Tried with https://github.com/bitcoin/bitcoin/pull/11126 but no improvement.~ (I screwed up the deployement so I have not tried actually, but the error seems to be different lock path)\r\n\r\nI am unsure if the problem is in the lock detection (obviously no deadlock possible here), or in the actual code using an unsafe construct.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11666", "title": "[RPC] Add utility signinput", "body": "An alternative to https://github.com/bitcoin/bitcoin/pull/11653 , an utility to sign an input. This is very useful when dealing with several bitcoin-based crypto currencies (typically a cross chain swap tool), as several crypto currencies signs in different ways.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11653", "title": "[RPC] Add utility getsignaturehash", "body": "Add an utility to get the signature hash in a generic way.\r\n`signrawtransaction` can't create a signature for an arbitrary scriptCode, as it is using `ProduceSignature` internally. This make it impossible to create complex scripts without a library.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10980", "title": "[Refactor] Decouple CKeyStore from CWatchOnlyStore", "body": "Breaking `CKeyStore` into two parts, one being the `CKeyStore`, the other `CWatchOnlyStore`.\r\n\r\nThe future `externalhd` would then just have to implement a new CKeyStore.\r\n\r\nSee https://github.com/bitcoin/bitcoin/pull/9728#issuecomment-322953243", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10216", "title": "[Wallet] FundRawTransaction can accept pre-set inputs whose parent is not yet broadcasted", "body": "This PR is based on https://github.com/bitcoin/bitcoin/pull/10202, it allows the user to pre fund a transaction with inputs which have not yet been broadcasted.\r\nPlease, review and ACK the first one independently from this PR.\r\n\r\nThis is useful for second layer payment protocol which regularly build transaction on top of unbroadcasted transaction.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10202", "title": "[Wallet] FundRawTransaction can fund a transaction with preset inputs found in the CoinView", "body": "This PR makes it possible to call FundRawTransaction with pre filled inputs not belonging to the wallet.\r\nThis is very useful for AnyOneCanPay scenario, where one of a third party only cover part of a transaction.\r\n\r\nThe necessary information to complete the transaction is taken from of the mempool and coinview.\r\n\r\nA typical example would involves Alice and Bob wanting to fund 0.5 each to the payment channel. Alice would give her input, and Bob would be able to complete the missing amount via FundRawTransaction.\r\n\r\nA follow up PR will allow the client `fundrawtransaction` to pass previous TxOuts corresponding to the inputs. This is necessary for filling transaction in some 2nd layer protocols, where the the inputs's of the transaction to fund have not yet been broadcasted.\r\n\r\nThis supersede my previous attempt at https://github.com/bitcoin/bitcoin/pull/10068 which I closed, as it was harder to review.\r\n\r\nThe first two commits are strict refactoring.\r\nThe third is the one checking information in the coinview.\r\nRest is about tests.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9991", "title": "listreceivedbyaddress Filter Address", "body": "Supersede https://github.com/bitcoin/bitcoin/pull/9503 created by @JeremyRubin , I will maintain it.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728", "title": "Can create External HD wallet with -externalhd", "body": "The user creates a new wallet by running `./bitcoind -externalhd=[ExtPubKey base58]`.\r\n\r\nThis make it possible to use methods like `getnewaddress`, `fundrawtransaction` and all normal wallet operations on a HD pubkey.\r\n\r\nSoftware built on top of core which need to delegate signing operations to hardware wallet will have almost the same code as if signing was done by Core.\r\n\r\nWith the introduction of a standard for dealing with hardware wallet signing in the future, I expect that `signrawtransaction` will just delegate the signing to the hardware wallet.\r\n\r\nIn this way, there will be no code difference between software using third party solution for signing, and those just using core for signing.\r\n\r\nI will use it in my own projects. My HW is giving me the ExtPubKey, and I want to use bitcoin core just for coin selection and tracking. I also did not wanted to break bunch of old code. Ping @jonasschnelli \r\n\r\nEDIT: @saleemrashid built HW support for Bitcoin Core on https://github.com/saleemrashid/bitcoin/tree/hardware-wallet based on this PR", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "esotericnonsense": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11322", "title": "bitcoind crashes if RPC is spammed", "body": "bitcoind v0.15.0rc3 (signed binaries), Arch Linux rolling amd64 with 16GB RAM\r\n\r\nUpon attempting to connect to the JSON-RPC mechanism using the Python requests library, bitcoind dies unexpectedly;\r\n```\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n```\r\n\r\ndebug.log\r\n```\r\n2017-09-13 16:50:28 libevent: evhttp_read_cb: illegal connection state 7\r\n```\r\n\r\n(no other relevant entries).\r\n\r\nI cannot reproduce this at the moment, if I manage it I will update this issue.\r\n\r\nedit: Reproduction steps as follows:\r\n\r\n```\r\nwhile True:\r\n    r = requests.get(\"http://localhost:8332\", data=json.dumps({}))\r\n```\r\n\r\nAny payload passed seems to trigger it, passing no payload does not trigger the crash.\r\n\r\nObviously, spamming it in a while loop is an extreme case, but I'm curious as to why this happens. It is pretty much immediate.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11359", "title": "Add a pruning 'high water mark' to reduce the frequency of pruning events", "body": "Partial fix for issue #11315.\r\n\r\nEvery prune event flushes the dbcache to disk.\r\nBy default this happens approximately every ~160MiB so high dbcache values are negated and IBD takes far longer than without pruning enabled.\r\n\r\nThis change allows a 'high water mark' for pruning such that the actual size of blk/rev on disk can increase a reasonable amount before flushing.\r\n\r\nOn a machine with prune=550 and dbcache=3000:\r\n```\r\n2017-09-17 22:04:56 Prune: target=550MiB hwm=3540MiB actual=3510MiB diff=-2960MiB max_prune_height=292477 removed 0 blk/rev pairs\r\n2017-09-17 22:04:56 Prune: target=550MiB hwm=3540MiB actual=3516MiB diff=-2966MiB max_prune_height=292499 removed 0 blk/rev pairs\r\n2017-09-17 22:04:57 Prune: target=550MiB hwm=3540MiB actual=468MiB diff=81MiB max_prune_height=292537 removed 21 blk/rev pairs\r\n2017-09-17 22:04:57 Prune: UnlinkPrunedFiles deleted blk/rev (00103)\r\n...\r\n```\r\n\r\nI haven't changed the 'diff' column in debug log (it could perhaps be hwm - actual rather than target - actual).\r\n\r\nNot sure if this could potentially increase disk space requirements in some cases - may need documentation. With a very high dbcache value, if say 10GiB of blocks come in that only produce 2GiB of chainstate then you'd overshoot quite a bit, I think. It's a tradeoff - more frequent flushing = slower IBD.\r\n\r\nThanks to sipa and gmaxwell for helping out on IRC.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11256", "title": "RPC: add weight to mempool entry output", "body": "Tested against master using the REST api (/rest/mempool/contents), simple addition of a field.\r\n\r\nPersonal use case is for fee analysis software.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sdaftuar": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11240", "title": "Wallet should be able to store multiple transactions with same txid", "body": "Pre-segwit, malleated transactions would have a different txid and therefore be accepted and stored by the wallet when seen on the network.\r\n\r\nPost-segwit, it's possible for a malleated transaction that is seen on the network to be ignored by the wallet, because we index the wallet db by txid, and we are currently only able to store one entry for a given txid (and I have no idea whether this assumption is easy to change).  This means that if a malleated transaction were mined on the network, we would only store the original version of the transaction.  While this doesn't appear to have any direct impact on our wallet's behavior, this could frustrate wallet users who expect the stored transaction to be the same as the one mined.\r\n\r\nWithin the current paradigm (of storing a single transaction per txid), we could instead store the latest seen version of any transaction, so that if a malleated version of a transaction is mined, that will get stored in our wallet and we'd forget about any previous version.  However, that isn't an ideal solution either: suppose the malleated version of the transaction violates local mempool policy, and the block containing the malleated transaction gets reorged out.  If the wallet would replace the non-malleated transaction with the malleated one when it was received, we'd have no way to rebroadcast the transaction again after such a reorg.  And since I think losing a signed transaction (which we may not be able to reproduce) is a terrible outcome, I think we should for now continue to keep whatever original signed version of a transaction that we see, and not replace.\r\n\r\nSlightly relevant to this: #11225 adds the ability to replace a transaction that has no witness with one that has a witness, under the reasoning that this is only possible if we have upgraded a wallet that was pre-segwit, and are now receiving the full transaction post-upgrade.  Since any transaction that is valid with a witness must be invalid under segwit's rules without the witness, doing this specific replacement should put the wallet in a strictly better position (where it might now be storing a valid transaction, which is possibly the same as the version of the transaction which was/will be mined).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a22a52918ad5af6d105b4f5ae9dd6c52199f0e8", "message": "Use mempool's ancestor sort in transaction selection\n\nTransaction selection for mining tracks ancestor feerates that are\nmodified based on transactions that have already been selected.  This\ncommit de-duplicates the code so that the ancestor feerate sorting used\nby the mempool can also be directly applied to the miner."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abfa538b5a4508e0cf0589ae3ac0620b2188912", "message": "Add test for new ancestor feerate sort behavior"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35c2b1fe3b1a046bbd1bfaf1c178e838d047277a", "message": "Fix rare failure in p2p-segwit.py\n\nAvoid creating very small utxos that would violate an assumption in\ntest_non_standard_witness."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a51319578091234fdd218a1eb144d517ea82b85", "message": "Sort mempool by min(feerate, ancestor_feerate)\n\nThis more closely approximates the desirability of a given transaction for\nmining."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6773f92b302915b75db4ded9814563d42de3d489", "message": "Refactor CompareTxMemPoolEntryByDescendantScore"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e617e3708e0e4d42d586531450a21ae70aecf63", "message": "Remove unused mempool index"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec0c0a01c316146434642ab2f14a7367306dbec", "message": "Make boost::multi_index comparators const\n\nThis fixes compatibility with boost 1.66"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12225", "title": "Mempool cleanups", "body": "Following up on #12127 and #12118, this cleans up a comment that was left incorrect in txmempool.h, and addresses a couple of the observations @TheBlueMatt made about an unnecessary use of `queryHashes()` and a small information leak when prioritizing transactions.\r\n\r\nLeft undone is nuking queryHashes altogether; that would require changing the behavior of the `getrawmempool` rpc call, which I think I might be in favor of doing, but wanted to save for its own PR.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11739", "title": "RFC: Enforce SCRIPT_VERIFY_P2SH and SCRIPT_VERIFY_WITNESS from genesis", "body": "As discussed at the IRC meeting back in October (https://botbot.me/freenode/bitcoin-core-dev/2017-10-12/?msg=92231929&page=2), I had looked into the feasibility of enforcing P2SH and SCRIPT_VERIFY_WITNESS back to the genesis block.\r\n\r\nThe P2SH change is pretty straightforward -- there was only one historical block on mainnet that violated the rule, so I carved out an exception to it, similar to the way we have exceptions for the BIP30 violators.\r\n\r\nThe segwit change is not entirely as clear.  The code changes themselves are relatively straightforward: we can just always turn on SCRIPT_VERIFY_WITNESS whenever P2SH is active.  However conceptually, this amounts to splitting up BIP141 into two parts, the part that implements new script rules, and the part that handles witness commitments in blocks.  \r\n\r\nArguably though the script rules are really defined in BIP 143 anyway, and so this really amounts to backdating BIP 143 -- script rules for v0 segwit outputs -- back to genesis.  So maybe conceptually this isn't so bad...\r\n\r\nI don't feel strongly about this change in either direction; I started working on it because I was searching for a way to simplify the way we understand and implement the consensus rules around segwit, but I'm not yet sure whether I think this achieves anything toward that goal.\r\n\r\nping @TheBlueMatt ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "i-rme": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11223", "title": "(Suggestion) Choose lower fee if the amount to be sent is small", "body": "I'll be brief, suppose this case:\r\n\r\nBob wants to send 10 USD to Alice. (2.2 mBTC)\r\nBitcoin Core estimates fee in 2.5mBTC/kB to be confirmed in the next 2 blocks. (That is 3.80 USD for 300 bytes).\r\n**As fee is more than 10% of the sent amount, Bitcoin Core should choose a lower fee for this single transaction.**\r\nBitcoin Core chooses the 11 block fee, that is 0.6mBTC/kB to be confirmed in the next 11 blocks (That is 0.93 USD for 300 bytes).\r\nBitcoin Core displays a warning to Bob explaining the situation.\r\n\r\n**Bob pays lower transaction fee** (9% fee Vs 38% fee). Bob is happy.\r\n\r\nThis should be the default behaviour, the user can later change the fee if he wants to.\r\n\r\n### TL;DR: Make Bitcoin Core aware of the amount sent and lower the fees if it is more than 10% of sent amount. \r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11223/reactions", "total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "junderw": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11218", "title": "getrawmempool verbose mode should return \"size\" and \"disksize\" for segwit transactions", "body": "### Describe the issue\r\n\r\ngetrawmempool verbose mode only returns \"size\" rather than \"size\" and \"disksize\" (the size on disk for segwit transactions)\r\n\r\n### Can you reliably reproduce the issue?\r\n#### If so, please list the steps to reproduce below:\r\n1. Run getrawmempool with verbose set to true\r\n2. Notice it only gives size\r\n\r\n### Expected behaviour\r\nIt should show:\r\n1. effective feerate \"size\" (ceil(weight/4))\r\n2. disk size \"disksize\" (total number of bytes in the serialized segwit transaction. (since \"disksize\" and \"size\" will be equal for non-segwit transactions, \"disksize\" should only appear for segwit transactions)\r\n\r\n### Actual behaviour\r\nIt shows size only (effective size for fees ceil(weight/4))\r\n\r\n### Screenshots.\r\nIf the issue is related to the GUI, screenshots can be added to this issue via drag & drop.\r\n\r\n### What version of bitcoin-core are you using?\r\n0.14.2", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cryptogenesis": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11134", "title": "Sendtoaddress flag for sending change to a segwit address?", "body": "Hi all,\r\n\r\nCongratulations and fantastic work with segwit!\r\n\r\nI believe uptake would be much faster if there was a possibility of flagging the sendtoaddress call to send change to a segwit address. Currently the only way to accomplish this is to use raw transactions which makes it quite a bit more complicated for the average user/business owner.\r\n\r\nThank you all for the continued efforts,\r\n\r\nEvan", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11134/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "raedah": {"issues": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11122", "title": "bumpfee behavior with \"Subtract fee from amount\"", "body": "When using the bumpfee command on a tx that was sent using \"Subtract fee from amount\", the current response is this error. \"Transaction does not have a change output (code -1)\". Since \"Subtract fee from amount\" was specified, the expected behavior would be to subtract the fee from the sent amount which would not require a change output.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11122/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanofsky": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac96e788faa33d9bf52ea0ecefa5e168f5ae326a", "message": "test_runner: Readable output if create_cache.py fails\n\nWithout this change, create_cache.py process output is shown as a byte() object\nwith \\n escapes in a single line that is hard to read."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b", "message": "Don't allow relative -walletdir paths\n\nAlso warn if bitcoind is configured to use a relative -datadir path.\n\nSpecifying paths relative to the current working directory in a daemon process\ncan be dangerous, because files can fail to be located even if the\nconfiguration doesn't change, but the daemon is started up differently.\n\nSpecifying a relative -datadir now adds a warning to the debug log. It would\nnot be backwards-compatible to forbid relative -datadir paths entirely, and it\ncould also be also inconvenient for command line testing.\n\nSpecifying a relative -walletdir now results in a startup error. But since the\n-walletdir option is new in 0.16.0, there should be no compatibility issues.\nAnother reason not to use working directory paths for -walletdir specifically\nis that the default -walletdir is a \"wallets\" subdirectory inside the datadir,\nso it could be surprising that setting -walletdir manually would choose a\ndirectory rooted in a completely different location."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc90a4f46bfff17ca358eedf29d2b77117ad4465", "message": "Avoid potential null dereference in ReceiveCoinsDialog constructor\n\nNot a bug in practice because current WalletModel::getDefaultAddressType()\nimplementation does not dereference its `this` pointer."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f765bb37880443061eb5f0a9cd5897e33732182d", "message": "Fix ListCoins test failure due to unset g_address_type, g_change_type\n\nNew global variables were introduced in #11403 and not setting them causes:\n\n    test_bitcoin: wallet/wallet.cpp:4199: CTxDestination GetDestinationForKey(const CPubKey&, OutputType): Assertion `false' failed.\n    unknown location(0): fatal error in \"ListCoins\": signal: SIGABRT (application abort requested)\n\nIt's possible to reproduce the failure reliably by running:\n\n    src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/ListCoins\n\nFailures happen nondeterministically because boost test framework doesn't run\ntests in a specified order, and tests that run previously can set the global\nvariables and mask the bug."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a14dbff39ea050b74b32bb0f4cbb59f4a9ad3865", "message": "Allow multiwallet.py to be used with --usecli\n\nAdd test coverage for bitcoin-cli multiwallet calls."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9a363ff70e1b72a1283098e69bbe14d1c16bcc", "message": "TestNodeCLI batch emulation\n\nSupport same get_request and batch methods as AuthServiceProxy"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9085afc53eb20c1fc745ae469e9587a05b7f24", "message": "Prevent TestNodeCLI.args mixups\n\nChange TestNodeCLI.__call__() to return a new instance instead of modifying the\nexisting instance. This way, it's possible to create different cli objects that\nhave their own options (for example -rpcwallet options to connect to different\nwallets), and options set for a single call (`node.cli(options).method(args)`)\nwill no longer leak into future calls."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcfb952bca922682e61c77e59a59f4e7fa6619c7", "message": "Improve TestNodeCLI output parsing\n\nParse JSONRPCException errors, and avoid JSON decode exception if RPC method\nreturns a plain string."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5", "message": "Split up key and script metadata for better type safety\n\nSuggested by Matt Corallo <git@bluematt.me>\nhttps://github.com/bitcoin/bitcoin/pull/11403#discussion_r155599383\n\nCombining the maps was probably never a good arrangement but is more\nproblematic now in presence of WitnessV0ScriptHash and WitnessV0KeyHash types."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11911", "title": "Free CDBEnv instances when not in use", "body": "**This is based on #11687.** The non-base commits are:\r\n\r\n- [`e7c003e289` Free CDBEnv instances when not in use](https://github.com/bitcoin/bitcoin/pull/11911/commits/e7c003e289ee70d06ff72609bcd4afe739356191)\r\n \r\n---\r\n\r\nInstead of adding CDBEnv objects permanently to the g_dbenvs map, use reference counted shared pointers and remove map entries when the last CDBEnv reference goes out of scope.\r\n\r\nThis change was requested by @TheBlueMatt and makes code that sets up mock databases cleaner. The mock database environment will now go out of scope and be reset on destruction so there is no need to call CDBEnv::Reset() during wallet construction to clear out prior state.\r\n\r\nThis change does affect bitcoin behavior slightly. On startup, instead of same wallet environments staying open throughout VerifyWallets() and OpenWallets() calls, VerifyWallets() will open and close an environment once for each wallet, and OpenWallets() will create its own environment(s) later.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11889", "title": "Drop extra script variable in ProduceSignature", "body": "Was slightly confusing.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11851", "title": "scripted-diff: Rename wallet database classes", "body": "Scripted diff to rename some wallet classes. Motivated by discussion in https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155354119\r\n\r\n| Current          | New                 |\r\n| ---------------- | ------------------- |\r\n| CDBEnv           | BerkeleyEnvironment |\r\n| CDB              | BerkeleyBatch       |\r\n| CWalletDBWrapper | WalletDatabase      |\r\n| CWalletDB        | WalletBatch         |\r\n\r\nThis can be starting point to discuss other wallet database code cleanups.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11687", "title": "External wallet files", "body": "This change consists of three commits:\r\n\r\n* The first commit is a pure refactoring that removes the restriction that two wallets can only be opened at the same time if they are contained in the same directory.\r\n* The second commit removes the restriction that `-wallet` filenames can only refer to files in the `-walletdir` directory.\r\n* The third commit makes second commit a little safer by changing bitcoin to create wallet databases as directories rather than files, so they can be safely backed up.\r\n\r\nAll three commits should be straightforward:\r\n\r\n*  The first commit adds around 20 lines of new code and then updates a bunch of function signatures (generally updating them to take plain fs::path parameters, instead of combinations of strings, fs::paths, and objects like CDBEnv and CWalletDBWrapper).\r\n* The second commit removes two `-wallet` filename checks and adds some test cases to the multiwallet unit test.\r\n* The third commit just changes the mapping from specified wallet paths to bdb environment & data paths.\r\n\r\n  ---\r\n\r\n**Note:** For anybody looking at this PR for the first time, I think you can skip the comments before _20 Nov_ and start reading at https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-345625565. Comments before  _20 Nov_ were about an earlier version of the PR that didn't include the third commit, and then confusion from not seeing the first commit.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11640", "title": "Make LOCK, LOCK2, TRY_LOCK work with CWaitableCriticalSection", "body": "Make LOCK macros work with non-recursive mutexes, and use wherever possible for better deadlock detection.\r\n\r\nAlso add unit test for DEBUG_LOCKORDER code.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625", "title": "Add BitcoinApplication & RPCConsole tests", "body": "Add test coverage for Qt initialization code & basic RPC console functionality\r\n\r\nMotivation for this change was a bug in #11603 which existing tests failed to catch.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11599", "title": "scripted-diff: Small locking rename", "body": "Call sync.h primitives \"locks\" and \"mutexes\" instead of \"blocks\" and \"waitable critical sections\" to match current coding conventions and c++11 standard names.\r\n\r\nThis PR does not rename the \"CCriticalSection\" class (though this could be done as a followup) because it's used everywhere and would swamp the other changes in this PR. Plain mutexes should mostly be preferred instead of recursive mutexes in new code anyway.\r\n\r\n**This is based on #11640.** The non-base commits are:\r\n\r\n- [`6cf6e51d6f` scripted-diff: Small locking rename](https://github.com/bitcoin/bitcoin/pull/11599/commits/6cf6e51d6fc3906bb7b9b29b35b9847c50d7f19b)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11536", "title": "Rename account to label where appropriate", "body": "Rename account to label where appropriate\r\n\r\nThis change only updates strings and adds RPC aliases, but should simplify the implementation of address labels in https://github.com/bitcoin/bitcoin/pull/7729, by getting renaming out of the way and letting that change focus on semantics.\r\n\r\nThe difference between accounts and labels is that labels apply only to addresses, while accounts apply to both addresses and transactions (transactions have \"from\" and \"to\" accounts). The code associating accounts with transactions is clumsy and unreliable so we would like get rid of it.\r\n\r\n---\r\n\r\nThere is a rebased version of #7729 atop this PR at https://github.com/ryanofsky/bitcoin/commits/pr/label, see https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338417139.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10973", "title": "Refactor: separate wallet from node", "body": "This is a refactoring PR that does not change behavior in any way. This change:\r\n\r\n1. Creates an abstract [`Chain`](https://github.com/ryanofsky/bitcoin/blob/pr/wipc-sep/src/interface/chain.h) interface in [`src/interface/`](https://github.com/ryanofsky/bitcoin/tree/pr/wipc-sep/src/interface).\r\n1. Updates wallet code to call the new interface. This largely consists of diffs of the form:\r\n\r\n```diff\r\n-    wtx.nTimeReceived = GetAdjustedTime();\r\n+    wtx.nTimeReceived = m_chain->getAdjustedTime();\r\n```\r\n\r\nThe main exception being commit [`90fb140320` Remove uses of chainActive and mapBlockIndex in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/90fb14032043007d35e6f9a689367c39bd5ead60), which is also largely mechanical, but is more complicated because it involves getting rid of `CBlockIndex` pointers and replacing them with block heights and hashes.\r\n\r\nThis change allows followup PR #10102 (multiprocess gui & wallet PR) to work without any significant updates to wallet code. Additionally:\r\n\r\n* It provides a single place to describe the interface between wallet and node code.\r\n* It can make better wallet testing possible, because the Chain object consists of virtual methods that can be overloaded for mocking.\r\n\r\nCommits:\r\n\r\n- [`7f654bdeab` Add src/interface/README.md](https://github.com/bitcoin/bitcoin/pull/10973/commits/7f654bdeab60e88c24cbabb03c738f1b3c5b5ca6)\r\n- [`b1d76aca6b` Add skeleton chain and client classes](https://github.com/bitcoin/bitcoin/pull/10973/commits/b1d76aca6be3bc9f578217cfd231624a2f6cb275)\r\n- [`d9020023e6` Pass chain and client variables where needed](https://github.com/bitcoin/bitcoin/pull/10973/commits/d9020023e625fb2055d3851357324e06406a7315)\r\n- [`818ebb4c8f` Remove uses of wallet functions in init.cpp](https://github.com/bitcoin/bitcoin/pull/10973/commits/818ebb4c8f6133f3b630f211bb2a5b43a49a396b)\r\n- [`7673f456cb` Remove uses of cs_main in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/7673f456cb2f8537b9e4c2cea47889cc27a56111)\r\n- [`327bbe47e3` Pass chain locked variables where needed](https://github.com/bitcoin/bitcoin/pull/10973/commits/327bbe47e39b7b79512d0ac8c87c9756c3b2b596)\r\n- [`90fb140320` Remove uses of chainActive and mapBlockIndex in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/90fb14032043007d35e6f9a689367c39bd5ead60)\r\n- [`fea015c3dd` Remove uses of CheckFinalTx in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/fea015c3dda9f31a30b909bcf69a3616ea84611e)\r\n- [`30307e2698` Remove use of IsWitnessEnabled in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/30307e2698e852522a8fb98306882238c29ea764)\r\n- [`42de526d3c` Remove use of AcceptToMemoryPool in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/42de526d3c8161d9d6ea56bab40d73ec17ceb53b)\r\n- [`ddb369c0f8` Remove uses of GetVirtualTransactionSize in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/ddb369c0f8e88c5bc8cad788ed60ace17c19f58e)\r\n- [`4f3203e665` Remove use of IsRBFOptIn in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/4f3203e665abd7e2d459d913c2ceaab58f8203b0)\r\n- [`40bf227221` Remove use of GetCountWithDescendants in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/40bf22722174464f59b453b8fb3be113302fb2b6)\r\n- [`a6cc6fea4d` Remove use of g_connman / PushInventory in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/a6cc6fea4d3a5e71ae0b83f0244dfde9110e4114)\r\n- [`2165a86574` Remove use of TransactionWithinChainLimit in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/2165a86574ccc5a1cd7cc35abcd4660c45607b9b)\r\n- [`cfbbddd0e1` Remove use of CalculateMemPoolAncestors in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/cfbbddd0e1d67288e1216aac4e4efc845b136f43)\r\n- [`b45724e6b9` Remove uses of fee globals in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/b45724e6b9fde3d9f886ae24cf45c8df97e305fb)\r\n- [`d9366b3ed1` Remove uses of fPruneMode in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/d9366b3ed11f9e89b5aab56b01a072c0d6568340)\r\n- [`dfb2221036` Remove uses of g_connman in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/dfb22210365c5d904ae304b51cf81ffd43a8184a)\r\n- [`f2041fcabd` Remove uses of GetAdjustedTime in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/f2041fcabd60ea55c9335025d753c6727c7e2f24)\r\n- [`505df6ce93` Remove uses of InitMessage/Warning/Error in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/505df6ce93194351683e2cd060d7065419eade5d)\r\n- [`669d876109` Remove use CValidationInterface in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/669d876109bb641a86acf72ba57af3d669d01093)\r\n- [`49affa0032` Remove use of CRPCTable::appendCommand in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/49affa00328690d0060d8389832c2d954086cf10)\r\n- [`36b2fe991f` Remove use of generateBlocks in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/36b2fe991f9c19cd6e9d345abf44af18ee91c388)\r\n- [`d7b0adc159` Remove uses of ParseConfirmTarget in wallet code](https://github.com/bitcoin/bitcoin/pull/10973/commits/d7b0adc159668bf419701f0133519ca140548a72)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10605", "title": "[dotnotmerge] Add AssertLockHeld assertions in CWallet::ListCoins", "body": "**This depends on #10244**\r\n\r\n(#10244 fixes broken Qt code that didn't acquire the `cs_wallet` lock before calling `CWallet::ListCoins` and also failed to hold the `cs_wallet` lock while accessing pointers to `CWallet::mapWallet` entries returned by `CWallet::ListCoins`.)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443", "title": "Add fee_est tool for debugging fee estimation code", "body": "This PR adds an `-estlog` option for saving live fee estimation data from a bitcoin node, and a `fee_est` command line tool for processing the data and testing fee estimation code.\r\n\r\nThe idea is to make it easier to test improvements to fee estimation like https://github.com/bitcoin/bitcoin/pull/10199 in a more systematic and reproducible way.\r\n\r\nSome documentation is in [`src/test/fee_est/README.md`](https://github.com/ryanofsky/bitcoin/blob/pr/fee/src/test/fee_est/README.md)\r\n\r\nSample log file: [`est.log.xz`](https://storage.googleapis.com/ryanofsky/est.log.xz) (65M)\r\n\r\nSample [`fee_est.cpp`](https://github.com/ryanofsky/bitcoin/blob/pr/fee/src/test/fee_est/fee_est.cpp)  graph output: \r\n\r\n![graph](https://cloud.githubusercontent.com/assets/7133040/26331057/f2de8d0c-3f1c-11e7-99ea-de1801d13b05.png)\r\n\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244", "title": "Refactor: separate gui from wallet and node", "body": "This is a refactoring PR that does not change behavior in any way. This change:\r\n\r\n1. Creates abstract [`Node`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/interface/node.h) and [`Wallet`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/interface/wallet.h) interfaces in [`src/interface/`](https://github.com/ryanofsky/bitcoin/tree/pr/ipc-local/src/interface)\r\n1. Updates Qt code to call the new interfaces. This largely consists of diffs of the form:\r\n\r\n```diff\r\n-    InitLogging();\r\n-    InitParameterInteraction();\r\n+    node.initLogging();\r\n+    node.initParameterInteraction();\r\n```\r\n\r\nThis change allows followup PR #10102 (makes `bitcoin-qt` control `bitcoind` over an IPC socket) to work without any significant updates to Qt code. Additionally:\r\n\r\n* It provides a single place to describe the interface between GUI and daemon code.\r\n* It can make better GUI testing possible, because Node and Wallet objects have virtual methods that can be overloaded for mocking.\r\n* It can be used to help make the GUI more responsive (see https://github.com/bitcoin/bitcoin/issues/10504)\r\n\r\nOther notes:\r\n\r\n* I used python scripts [hide-globals.py](https://github.com/ryanofsky/home/blob/master/src/2017/hide-globals/hide-globals.py) and [replace-syms.py](https://github.com/ryanofsky/home/blob/master/src/2017/hide-globals/replace-syms.py) to identify all the places where Qt code was accessing libbitcoin global variables and calling functions accessing those global variables.\r\n* These changes were originally part of #10102. Thanks to @JeremyRubin for the suggestion of splitting them out.\r\n\r\nCommits:\r\n\r\n- [`c9ab1051ab` Add src/interface/README.md](https://github.com/bitcoin/bitcoin/pull/10244/commits/c9ab1051aba34bd550758e86b45ccee11eaba3f9)\r\n- [`d99ee76c2f` Remove direct bitcoin calls from qt/bitcoin.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/d99ee76c2fc27033729c4de99f5ec34b5f8cda80)\r\n- [`e4eddc1282` Remove direct bitcoin calls from qt/optionsmodel.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/e4eddc12825ec49979bf2bf3cb6214166c06ca44)\r\n- [`5cff35ebd7` Remove direct bitcoin calls from qt/bitcoingui.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/5cff35ebd720dfb93c79d4761d31c93f273103e9)\r\n- [`0f0a787c58` Remove direct bitcoin calls from qt/utilitydialog.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/0f0a787c58ffc0425443376ca5b8c10a9b2f9721)\r\n- [`41f6a465d0` Remove direct bitcoin calls from qt/splashscreen.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/41f6a465d039bd12ff927deecc0cd12c76a66fd0)\r\n- [`6ba6ef7d57` Remove direct bitcoin calls from qt/clientmodel.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/6ba6ef7d57adf9c37e6cc35b1894887dcf51e4f5)\r\n- [`e121b95717` Remove direct bitcoin calls from qt/intro.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/e121b957177234159b140d77aef051f0c708a760)\r\n- [`b73c11bc04` Remove direct bitcoin calls from qt/peertablemodel.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/b73c11bc04d999e7cbf817d339f5b054624a50f1)\r\n- [`c41f8bb4f4` Remove direct bitcoin calls from qt/bantablemodel.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/c41f8bb4f4a8ce0371930607787aad63be1613a9)\r\n- [`822e5b3bd6` Remove direct bitcoin calls from qt/rpcconsole.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/822e5b3bd612da47ae5b2397b0f6d1ae446cbd51)\r\n- [`8d0a3ce46e` Remove direct bitcoin calls from qt/optionsdialog.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/8d0a3ce46e7b8d19f43266d8251ed3e124790e26)\r\n- [`cf572af4c2` Remove most direct bitcoin calls from qt/walletmodel.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/cf572af4c23bf8bccaf696eb98b9dfc0c0d11995)\r\n- [`2bc14bfc06` Remove direct bitcoin calls from qt/coincontroldialog.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/2bc14bfc06ecd3f5ff4f6610d9cae5c32dfb3e8a)\r\n- [`aa225dbd23` Remove direct bitcoin calls from qt/addresstablemodel.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/aa225dbd23d832365fef3509fd9f9dd48053c47e)\r\n- [`da6b33b12a` Remove direct bitcoin calls from qt/paymentserver.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/da6b33b12a412bc7581a33ddfd29ae8f8b59ed30)\r\n- [`f025c2c750` Remove direct bitcoin calls from qt transaction table files](https://github.com/bitcoin/bitcoin/pull/10244/commits/f025c2c750e16238055440d3f3d1cc429062ccdd)\r\n- [`15aa81280e` Remove direct bitcoin access from qt/guiutil.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/15aa81280ec1e4a55a2197445d82661c7b72fdad)\r\n- [`19a3a554be` Remove direct bitcoin calls from qt/sendcoinsdialog.cpp](https://github.com/bitcoin/bitcoin/pull/10244/commits/19a3a554be91477f035245ee29a99586e2494ceb)\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102", "title": "bitcoin-qt: spawn bitcoind and communicate over pipe (Experimental, WIP, Depends on #10244)", "body": "**This is based on #10600 + #10244.** The non-base commits are:\r\n\r\n- [`a733ca22ba` Add support for Cap'n Proto in autotools build setup](https://github.com/bitcoin/bitcoin/pull/10102/commits/a733ca22ba07d79af71a40c3504759cea575c2c2)\r\n- [`c41f41062f` [qt] Make bitcoin-qt control bitcoind over socket](https://github.com/bitcoin/bitcoin/pull/10102/commits/c41f41062f61fc3f26044f7762ca2daa1bee93af)\r\n\r\nThis change is mostly complete, but doesn't run on windows yet. It adds some IPC functions and classes in [src/ipc/](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/ipc) that let the `bitcoin-qt` process fork a `bitcoind` process and communicate with it over a socketpair. (You can see the IPC messages going back and forth by setting environment variable `IPC_DEBUG=1` before running `bitcoin-qt`.)\r\n\r\nThe IPC protocol used is Cap'n Proto, but this could be swapped out for another protocol. Cap'n Proto types and libraries are only accessed in the [src/ipc/capnp/](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/ipc/capnp) directory, and not in any public headers or other parts of bitcoin code.\r\n\r\nThe motivation behind this change is to be able to start moving bitcoin from a monolithic architecture where UI, P2P, wallet, consensus, and database code all runs in a single process, to a more modular design. Splitting the `bitcoin-qt` code from the bitcoin node and wallet code seemed like a logical place to start because we already have separate `bitcoin-qt` and `bitcoind` binaries, and because the Qt code is already somewhat modularized thanks to various model classes.\r\n\r\n**Review suggestion:** It'd make sense to start by looking at the [src/ipc/README.md](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/ipc/README.md) and [src/ipc/capnp/README.md](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/ipc/capnp/README.md) files, and then begin to look at the new source files in the order they're listed in the latter readme.\r\n\r\n**Current status:** This PR is mostly complete, but not very well tested yet. Major todo items for this PR are porting to windows, adding unit tests, and maybe reducing capnp boilerplate. Major todo items for future PRs are adding new options for users to stop & start `bitcoind` and `bitcoin-qt` independently (by setting up listening sockets), and adding more IPC interfaces to enable new multiprocess splits like Node/Wallet separation.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9753", "title": "Add static_assert to prevent VARINT(<signed value>)", "body": "Using VARINT with signed types is dangerous because negative values will appear to serialize correctly, but then deserialize as positive values mod 128.\r\n\r\nThis commit changes the VARINT macro to trigger a compile error by default if called with an signed value, and it updates existing broken uses of VARINT to pass a special flag that lets them keep working with no changes in behavior.\r\n\r\nThere is some discussion about this issue here: https://github.com/bitcoin/bitcoin/pull/9693#issuecomment-278701473. I think another good change along these lines would be to make `GetSizeOfVarInt` and `WriteVarInt` throw exceptions if they are passed numbers less than 0 to serialize. But unlike this change, that would be a change in runtime behavior, and need more consideration.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9680", "title": "Unify CWalletTx construction", "body": "Two commits:\r\n\r\n- `Construct CWalletTx objects in CommitTransaction` moves a bunch of CWalletTx initialization into CWallet::CommitTransaction to dedup some code and avoid future inconsistencies in how wallet transactions are created.\r\n- `Get rid of CWalletTx default constructor` does what is described and eliminates the possibility of empty transaction entries being inadvertently created by mapWallet[hash] accesses.\r\n\r\nBoth of these changes were originally part of #9381\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9384", "title": "CCoinsViewCache code cleanup & deduplication", "body": "CCoinsViewCache code cleanup & deduplication\r\n\r\nThe change moves code responsible for updating the cache out of various\r\nCCoinsViewCache methods and into a Modifier class. This way the cache update\r\ncode is just written once in a general way instead of being duplicated and\r\nsplit up to handle various special cases.\r\n\r\nThis is a refactoring, with changes to cache behavior only in 2 corner cases\r\n(with corresponding tests in coins_test.cpp) which don't affect the meaning of\r\ndata stored in the cache:\r\n\r\n* In BatchWrite, overwriting a non-dirty pruned cache entry with a fresh pruned\r\n  cache entry now deletes the cache entry instead of leaving behind a dirty\r\n  pruned entry that will trigger an unnecessary database write later.\r\n\r\n* In BatchWrite, overwriting a dirty pruned fresh cache entry with a nonpruned\r\n  entry updates the entry without dropping the fresh flag. There's no reason to\r\n  drop the fresh flag in this case because the flag accurately describes the\r\n  state of the base view and could prevent unnecessary database writes in the\r\n  future if the utxo is spent later.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9381", "title": "Remove CWalletTx merging logic from AddToWallet", "body": "**This is based on #9680.** The non-base commits are:\r\n- [`6cbf42a1ae` Remove CWalletTx merging logic from AddToWallet](https://github.com/bitcoin/bitcoin/pull/9381/commits/6cbf42a1ae33948b87c19733ed559e9bf94e9d15)\r\n- [`eb1567eb8e` Avoid copying CWalletTx in LoadToWallet](https://github.com/bitcoin/bitcoin/pull/9381/commits/eb1567eb8e4c234e0c98c15c258d269a165b4836)\r\n- [`b9bc9a0ade` Disable CWalletTx copy constructor](https://github.com/bitcoin/bitcoin/pull/9381/commits/b9bc9a0ade067a764203739584ce638529d7d72a)\r\n- [`fea17c239d` Get rid of BindWallet](https://github.com/bitcoin/bitcoin/pull/9381/commits/fea17c239d253275aba385736a132b90ddbe419b)\r\n\r\n---\r\n\r\nThis is a pure refactoring, no behavior is changing.\r\n\r\nInstead of AddToWallet taking a temporary CWalletTx object and then potentially merging it with a pre-existing CWalletTx, have it take a callback so callers can update the pre-existing CWalletTx directly.\r\n\r\nThis makes AddToWallet simpler because now it is only has to be concerned with saving CWalletTx objects and not merging them.\r\n\r\nThis makes AddToWallet calls clearer because they can now make direct updates to CWalletTx entries without having to make temporary objects and then worry about how they will be merged.\r\n\r\nMotivation for this change came from the bumpfee PR #8456 where we wanted to be able to call AddToWallet to make a simple update to an existing transaction, but were reluctant to, because the existing CWalletTx merging logic did not apply and seemed dangerous try to update as part of that PR. After this refactoring, the bumpfee PR could call AddToWallet safely instead of implementing a duplicate AddToWallet function.\r\n\r\nThis also allows getting rid of the CWalletTx copy constructor to prevent unintentional copying.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9332", "title": "Let wallet importmulti RPC accept labels for standard scriptPubKeys", "body": "Allow importmulti RPC to apply address labels when importing standard scriptPubKeys. This makes the importmulti RPC less finnicky about import formats and also simpler internally.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110243271", "body": "> We need to make it so that this doesn't signal failed qt detection if libqminimal isn't found.\r\n\r\nWhat should happen if minimal isn't found, and why we can't just make it a requirement? I looked into trying making it make it optional, but it seemed like a mess, see my comment https://github.com/bitcoin/bitcoin/pull/10117#issuecomment-291175634", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110243271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jeffrade": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b21244e0be5727f8c4e8c5de0a9aa2c597ae8ed2", "message": "Updating benchmarkmarking.md with an updated sample output and help options"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aad309065d38613a7e98aba39d947ca215b7c2f7", "message": "[rpc] Adding ::minRelayTxFee amount to getmempoolinfo and updating mempoolminfee help description"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bitspill": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77678426000b88834ca0beb4353f20730b0f5510", "message": "Trivial: Fix spelling in zapwallettxes test description\n\n[skip ci]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MeshCollider": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f3bd47d44634cfc0a4261e64af178407ce2869c", "message": "Abstract directory locking into util.cpp"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5260a4aca1e6c11e1dbca9d3390c0dc739e81204", "message": "Make .walletlock distinct from .lock"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64226de908c76997fadf147342c494ad0662fa43", "message": "Generalise walletdir lock error message for correctness"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ed4bd58cac05b355ab103476ff29ecd10ce263", "message": "Add a test for wallet directory locking"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60cb99c580a602a83856769ad2ac882d3cdfcb5", "message": "Add a lock to the wallet directory"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/656fde53a3a0d88a1e3c1aef7ae99083e4b06a7d", "message": "Add script birthtime metadata to dump and import wallet"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bab9b23af95986f9452d468257cc34d2c5017b2", "message": "Add script dump note to RPC help text and release notes"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68c1e00a002dd2c5982105a6fae59eac2d2ce97b", "message": "Add test for importwallet"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1184dd54d4b2a1d2ae590207ee5beec0d15b38", "message": "Add dumpwallet scripts test"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c73022061cae00f9e978b04f3fd0cce8d627d", "message": "Add scripts to importwallet RPC"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b702ae812c88fb6ccc4b5163383d96997004c3c8", "message": "Add CScripts to dumpwallet RPC"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdc260afd530165a3167e049b630bc177a1398f9", "message": "Add GetCScripts to CBasicKeyStore"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9a13c8a0f149ac219934b515399cca60bf2123", "message": "Add configuration/argument testing"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac6b3f06717626b88cdfd140f2cc1a3f2dde4be", "message": "Update files.md for new wallets/ subdirectory"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b67342906ced2353d378f4369c8d8a979d525fee", "message": "Cleanups for walletdir PR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/529b8667599ad74f6dae639b889d22e907353070", "message": "Test datadir in conf file exists"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11708", "title": "Add P2SH-P2WSH support to signrawtransaction and listunspent RPC", "body": "Currently `signrawtransaction` works with P2SH-P2WSH which are already in wallet (e.g. `addmultisigaddress` -> `addwitnessaddress`). But when using signrawtransaction with keys which aren't in the wallet, there is currently only a `redeemScript` key so you cannot enter both the P2SH redeemScript and the witness script. There is an undocumented workaround by including the same input twice (suggested on StackExchange [here](https://bitcoin.stackexchange.com/a/62746/51948)), once with each script, but that is unnecessary and hacky. \r\n\r\nThis simply allows the optional inclusion of a witnessScript key in the JSON input to `signrawtransaction`. Because it uses JSON, this is a non-breaking change.\r\n\r\nAlso, as discussed on IRC ([see here](https://botbot.me/freenode/bitcoin-core-dev/2017-11-16/?msg=93580994&page=1)), we add a `witnessScript` output to the listunspent RPC for P2SH-P2WSH addresses because gmaxwell pointed out signrawtransaction should be able to get most of the needed info from listunspent.\r\n\r\nCloses https://github.com/bitcoin/bitcoin/issues/11693 \r\n\r\nTODO: \r\n- ~Needs tests + release notes~", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11485", "title": "Add `available` field to listwallets RPC", "body": "Modifies `listwallets` to return a list of 'available' wallets in the wallet directory, by looking for the BDB magic bytes (`0x00053162` source: https://github.com/file/file/blob/master/magic/Magdir/database) . \r\n\r\nThis is a breaking change to listwallets, but multiwallet RPC calls are experimental in 0.15 so shouldn't be a big concern to change it. c.f. @jnewbery's comment [here](https://github.com/bitcoin/bitcoin/pull/11466#discussion_r143791327). Split from #11466.\r\n\r\nWould be great if someone could confirm if this is endianness independent too :)", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138243673", "body": "I'm not even sure if I should have changed it to fail, should it just exit quietly if there's no commit range?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138243673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151882649", "body": "Nit: functional tests not function tests", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/151882649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mruddy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f911c5cc2f60859cf3d5553d35c1160bd264cc0", "message": "trivial: fix address_type help text of getnewaddress and getrawchangeaddress"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsarenik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/648bdc8cc09c85748967b86347bbc7825e339d5f", "message": "Trivial: Fix #include sys/fcntl.h to just fcntl.h (without sys/)\n\nhttp://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html\nhttp://man7.org/linux/man-pages/man2/fcntl.2.html"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11759", "title": "Docs: reflow the text and add better markup", "body": "Here are some very uninportant fixes that just make the modified files look a bit more professional (one in rendered output, the other in terminal as plain-text).\r\n\r\nNo changes to the text were done here. Just markup (monospace, multi-line links) and `fmt`.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153064569", "body": "Thanks for suggestion. As the https link works, there it is now.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153064569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "azuchi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91769d6e288891cbfebcfe7ad71968de58315574", "message": "[Doc] Fix link for bip 159 pull request"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sipa": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b224a47a1a5feac380506abff63fae91d7a93b39", "message": "Add address_types test\n\nImprovements and cleanups by John Newbery"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ee54fd7c7fa31e3cec382651dd373f7ef2d7327", "message": "Support downgrading after recovered keypool witness keys"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/940a21932ba769ba5829cba713579db84f96d2f8", "message": "SegWit wallet support\n\nThis introduces two command line flags (-addresstype and -changetype) which control\nthe type of addresses/outputs created by the GUI and RPCs. Certain RPCs allow\noverriding these (`getnewaddress` and `getrawchangeaddress`). Supported types\nare \"legacy\" (P2PKH and P2SH-multisig), \"p2sh-segwit\" (P2SH-P2WPKH and P2SH-P2WSH-multisig),\nand \"bech32\" (P2WPKH and P2WSH-multisig).\n\nA few utility functions are added to the wallet to construct different address type\nand to add the necessary entries to the wallet file to be compatible with earlier\nversions (see `CWallet::LearnRelatedScripts`, `GetDestinationForKey`,\n`GetAllDestinationsForKey`, `CWallet::AddAndGetDestinationForScript`)."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37c64e477d679853a4076f2f7888568bb034e90", "message": "Implicitly know about P2WPKH redeemscripts\n\nMake CKeyStore automatically known about the redeemscripts necessary for P2SH-P2WPKH\n(and due to the extra checks in IsMine, also P2WPKH) spending."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57273f2b302949d4ca3511f703627b5d717be40c", "message": "[test] Serialize CTransaction with witness by default"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b", "message": "Support P2WPKH and P2SH-P2WPKH in dumpprivkey"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37c03d3e05713e14458ca2867e442926f165afea", "message": "Support P2WPKH addresses in create/addmultisig"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ecb7bab6074377d87c700bf0c5d351e5d3174f", "message": "Merge #10677: RPC Docs: addmultisigaddress is intended for non-watchonly addresses\n\n73041c3c99 RPC Docs: addmultisigaddress is intended for non-watchonly addresses (Gregory Sanders)\n\nPull request description:\n\n  Spent a couple hours debugging why my p2sh watchonly funds were not appearing in various accounting calls when address was imported via `addmultisigaddress`.\n\nTree-SHA512: 0673e276e5ca8cdc4c9357bd835a29bd5a994520a78179600944932c700917142930288bf179f5e89b0874beaf1a88bd70129f3a297a46df42a10bab847017bb"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa003c888f80207e8ff132f78417ff373ddfa3", "message": "Extend validateaddress information for P2SH-embedded witness\n\nThis adds new fields 'pubkeys' and 'embedded' to the RPC's output, and improves the\ndocumentation for previously added 'witness_version' and 'witness_program' fields."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a27dc5b18a3ab82a9768710b24d4e7e9661658", "message": "Expose method to find key for a single-key destination"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d", "message": "Improve witness destination types and use them more"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbe197470ecc1f7b48771c4e7b654ab030af4c9e", "message": "[refactor] GetAccount{PubKey,Address} -> GetAccountDestination"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c8ea6380c9f402ed9777fd015b117ba13125a35", "message": "Abstract out IsSolvable from Witnessifier"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9fdac130a5ed1d96fcac6bb87c10bec9d596b17", "message": "Merge #11824: Block ActivateBestChain to empty validationinterface queue\n\n97d2b09c12 Add helper to wait for validation interface queue to catch up (Matt Corallo)\n36137497f1 Block ActivateBestChain to empty validationinterface queue (Matt Corallo)\n5a933cefcc Add an interface to get the queue depth out of CValidationInterface (Matt Corallo)\na99b76f269 Require no cs_main lock for ProcessNewBlock/ActivateBestChain (Matt Corallo)\na734896038 Avoid cs_main in net_processing ActivateBestChain calls (Matt Corallo)\n66aa1d58a1 Refactor ProcessGetData in anticipation of avoiding cs_main for ABC (Matt Corallo)\n818075adac Create new mutex for orphans, no cs_main in PLV::BlockConnected (Matt Corallo)\n\nPull request description:\n\n  This should fix #11822.\n\n  It ended up bigger than I hoped for, but its not too gnarly. Note that \"\n  Require no cs_main lock for ProcessNewBlock/ActivateBestChain\" is mostly pure code-movement.\n\nTree-SHA512: 1127688545926f6099449dca6a4e6609eefc3abbd72f1c66e03d32bd8c7b31e82097d8307822cfd1dec0321703579cfdd82069cab6e17b1024e75eac694122cb"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bea05bc1d17aa43cbdf3a3413241f8132790d93", "message": "Merge #11834: [verify-commits] Fix gpg.sh's echoing for commits with '\\n'\n\na38686cea [verify-commits] Fix gpg.sh's echoing for commits with '\\n' (Matt Corallo)\n\nPull request description:\n\n  Should fix master travis failures\n\nTree-SHA512: 1e96476e4db0474f1dc2c6973cdb1154316b7cec13d3fe46f3383cfe4f1ed30c2eee08a0d047931f20b2fa83baaacb4687f39e1cab6f264009cd0292134facdd"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c17f11f7b43ad3bd9e242c67db1f3679558a0581", "message": "Merge #10773: Shell script cleanups\n\n13a81b19d Add quotes to variable assignment (as requested by @TheBlueMatt) (practicalswift)\n683b9d280 Fix valid path output (practicalswift)\n193c2fb4c Use bash instead of POSIX sh. POSIX sh does not support arrays. (practicalswift)\n80f5f28d3 Fix incorrect quoting of quotes (the previous quotes had no effect beyond unquoting) (practicalswift)\n564a172df Add required space to [[ -n \"$1\" ]] (previously [[ -n\"$1\" ]]) (practicalswift)\n1e44ae0e1 Add error handling: exit if cd fails (practicalswift)\nb9e79ab41 Remove \"\\n\" from echo argument. echo does not support escape sequences. (practicalswift)\nf6b3382fa Remove unused variables (practicalswift)\n\nPull request description:\n\n  Shell script cleanups:\n  * Add required space to `[ -n ]`.\n  * Avoid quote within quote.\n  * Exit if `cd` fails.\n  * Remove `\\n` which is not handled by `echo`.\n  * ~~Remove redundant `$` in arithmetic variable expression.~~\n  * ~~Use `$(command)` instead of legacy form `` `command` ``.~~\n  * Arrays are not supported in POSIX `sh`. Use `bash` when arrays are used.\n  * ~~`[ foo -a bar ]` is not well defined, use `[ foo ] && [ bar ]` instead.~~\n  * ~~`[ foo -o bar ]` is not well defined, use `[ foo ] || [ bar ]` instead.~~\n\nTree-SHA512: 80f6ded58bce625b15b4da30d69d2714c633e184e62b21ed67d2c58e2ebaa08b4147593324012694d02bf4f1f252844cdff2fd1cf5e817ddb07e2777db7a6390"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11630", "title": "Simplify Base32 and Base64 conversions", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11372", "title": "Address encoding cleanup", "body": "This PR contains some of the changes left as TODO in #11167 (and built on top of that PR). They are not intended for backporting.\r\n\r\nThis removes the `CBase58`, `CBitcoinSecret`, `CBitcoinExtKey`, and `CBitcoinExtPubKey` classes, in favor of simple `Encode`/`Decode` functions. Furthermore, all Bitcoin-specific logic (addresses, WIF, BIP32) is moved to `key_io.{h,cpp}`, leaving `base58.{h,cpp}` as a pure utility that implements the base58 encoding/decoding logic.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785", "title": "Serialization improvements", "body": "This PR improves correctness (removing potentially unsafe `const_cast`s) and flexibility of the serialization code.\r\n\r\nThe main issue is that use of the current `ADD_SERIALIZE_METHODS` macro (which is the only way to not duplicate serialization and deserialization code) only expands to a single class method, and thus can only be qualified as either const or non-const - not both. In many cases, serialization needs to work on const objects however, and preferably that is done without casts that could hide const-correctness bugs.\r\n\r\nTo deal with that, this PR introduces a new approach that includes a `SERIALIZE_METHODS(obj)` macro, where `obj` is a variable name. It expands to some boilerplate and a static method to which the object itself is an argument. The advantage is that its type can be templated, and be `const` when serializing.\r\n\r\nAnother issue is the various serialization-wrapping macros (`VARINT`, `COMPACTSIZE`, `FLATDATA` and `LIMITED_STRING`). They all `const_cast` their argument in order to construct a wrapper object, which supports both serialization and deserialization. This PR makes them templated in the underlying data type (for example, `CompactSizeWrapper<uint64_t>`). This has the advantage that we can make the template type `const` when invoked on a `const` variable (so it would be `CompactSizeWrapper<const uint64_t>` in that case).\r\n\r\nA last issue is the persistent use of the `REF` macro to deal with temporary expressions being passed in. Since C++11, this is not needed anymore as temporaries are explicitly represented as rvalue references. Thus we can remove `REF` invocations and instead just make the various classes and helper functions deal correctly with references.\r\n\r\nThe above changes permit a fully const-correct version of all serialization code. However, it is cumbersome. Any existing `ADD_SERIALIZE_METHODS` instances in the code that do more than just (conditionally) serializing/deserializing some fields (in particular, it contains branches that assign to some of the variables) need to be split up into an explicit `Serialize` and `Unserialize` method instead. In some cases this is inevitable (wallet serializers do some crazy transformations while serializing!), but in many cases it is just annoying duplication.\r\n\r\nTo improve upon this, a few more primitives that are currently inlined are turned into serialization wrappers:\r\n* `BigEndianWrapper`: Serializes/deserializes an integer as big endian rather than little endian (only for 16-bit). This permits the CService serialization to become a oneliner.\r\n* `Uint48Wrapper`: Serializes/deserializes only the lower 48 bits of an integer (used in BIP152 code).\r\n* `VectorApplyWrapper`: Serializes/deserializes a vector while using a custom serializer for its elements. This simplifies the undo and blockencoding serializers a lot.\r\n\r\nBest of all, it removes 147 lines of while code adding a bunch of comments (though the increased use of vararg `READWRITE` is probably cheating a bit).\r\n\r\nThe commits are ordered into 3 sections:\r\n* First, introduce new classes that permit const-correct serialization.\r\n* Then one by one transform the various files to use the new serializers.\r\n* Finally, remove the old serializers.\r\n\r\nThis may be too much to go in at once. I'm happy to split things up as needed.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10434", "title": "[WIP] 3072-bit MuHash based hash_serialized", "body": "This implements a 3072-bit MuHash discussed on https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html as a replacement for the hash_serialized field in `gettxoutsetinfo`.\r\n\r\nThis is an order-independent hash, allowing it to be computed either by iterating over the UTXO set in non-sorted order. It also supports incremental addition and deletion of entries from the hash, allowing it to be updated on the fly for each block. Neither of these approaches is currently implemented.", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864570", "body": "I'm currently working on a patch that will allow export and import of wallets in a human readable form.\n\nThe format i've been using currently has lines of this form:\n[privatekey] [block nr of earlest unredeemed output to this key] # [address] [available BTC]\n\nThe part after the # is optional, since only the private key suffices, the rest can be derived, The block number was suggested by Gavin on the forum somewhere, as an optimization.\n\nMaybe adding address labels is useful as well.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864958", "body": "Sure, that thread is where i got the idea, i couldn't remember where it was. The code for importing and exporting private keys also already exists, see http://www.bitcoin.org/smf/index.php?topic=3906. The hard part is keeping the data structures in bitcoind intact and up to date when importing things.\n\nThe precise formatting is only a detail that can easily be changed. Clearly, the importer will ignore everything after a #, as the address and available BTC to an address can be derived from the private key and the block chain, but still useful for human readers, so the exporter will put them in comments.\n\nMaybe we should start the format discussion again, since there are additional useful things to put in such a file, it seems. Whether or not the key is only a reserve key, a possible label for a key, ...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887133", "body": "Resubmitting with longer commit messages\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896714", "body": "That's certainly a possibility, which may be useful in the future, but it's not really necessary now. The old format used a dedicated byte for specifying spentness, while the new code uses a key-value entry (using the dedicated byte if not present) and keeps the spent-byte updated as well.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896839", "body": "Don't get me wrong - I merely mean that for this particular issue there shouldn't be a problem.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905767", "body": "My walletdump branch (https://github.com/sipa/bitcoin/tree/walletdump) should contain a fix for this. But there are still a lot of edge cases that need to be tested.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964462", "body": "Sounds like you have a lot of (used) high-value transactions whose output is yourself, but are for some reason not marked spent. I'm not sure how that is possible but I'll check the wallet in that zip file.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/966761", "body": "See the dumpprivkey and importprivkey rpc calls in this branch: https://github.com/sipa/bitcoin/tree/walletdump\n\nDisclaimer: not ready for production use :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/966761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/346324", "body": "This seems strange to me. If a single dependency of an own transaction is in the block chain, the transaction as a whole will be considered confirmed?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/346324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/474782", "body": "Why not return enum DBErrors?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/474782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564402", "body": "They both call IncrementExtraNonce... which resets the extra nonce every second after overflowing. This guarantees unique block candidates, but not unique coinbase transactions. When an infinite supply of pubkeys are available, this isn't a problem, because after creating a block, the previous default pubkey will be in use, and a new one will be used.\n\nMy suggestion: add the current timestamp to the coinbase when no fresh pubkeys are available.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189058", "body": "Is this call even necessary? GetDataDir() should return something sensible for your platform, and the / operator will result in the platform-specific path separator.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189059", "body": "Same here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189067", "body": "This should use filesystem::path::operator/ for building the directory path.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189069", "body": "same here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189646", "body": "No idea what causes the error, but I've started looking at this, and cleaning up some related filesystem-handling code as well. Can you wait a bit, maybe it won't be necessary anymore.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1261426", "body": "This change causes #1148\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1261426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1295209", "body": "This fix was never tested, and also never observed to function. Seems you found out why. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1295209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1295651", "body": "No, this is about coinbases transactions being sent as individual transactions. They are only (and have always been) valid inside a block. Not sure where you see any relation to 0-confirm transactions. This is not about the inputs of transactions being sent (which can be coinbase transactions just fine, by the way), this is about transactions themselves .\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1295651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1323703", "body": "fix pushed\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1323703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324310", "body": "If the IPv6 address fails to parse, it may get silently ignored. Some extra error reporting is certainly useful (as well as warnings when detecting meaningless combinations of command-line options). Can you show the exact command line?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324742", "body": "Drop the \"/64\".\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324777", "body": "Exactly, it's just ignoring the -externalip you provided, because it doesn't understand it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324794", "body": "See #1285.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324990", "body": "You need a way for finding IPv6 peers as well (and as you probably don't have any such addresses, you'll need to use -addnode or -connect). I expect your node is just looping over its address database, trying to find an IPv6 address to connect to.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1325180", "body": "Port is not necessary (8333 is default). Which version of the code are you using? Can you put your debug.log somewhere?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1325180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1365337", "body": "That shouldn't ever happen.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1365337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398091", "body": "Yes, but it's being executed too often. \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398132", "body": "Assume you have been running faulty code, and blocks from the longest chain were downloaded, but not considered valid, so they never got considered to be the current best chain. This continues for a while, until 500 blocks have been downloaded, connected to the block tree, but didn't become the best chain.\nThis was common around the time of 0.6.0rc1.\n\nNow you upgrade to a more recent version with correct block validity rules. It will request blocks from its current best (500 blocks before the last block it knows about) until the tip of the chain. The peer will answer with an \"inv\" sequence of 500 blocks... 500 blocks we already have. The other side uses the last block of this sequence as trigger to send 500 more block invs. However, as the last block in that sequence is already known to us, it is never requested.\n\nThe code below tries to detect this case (somewhat over-eagerly) and requests a getblocks instead, when the last block from an inv sequence is not being downloaded and it not an orphan.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398230", "body": "Ah, the previous one. That's for requesting the blocks preceeding an orphan, when you receive them, in orde to connect them to the tree you already have.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1398230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1887260", "body": "\"its\" is the correct possessive form for \"it\" in English, despite the majority of the Internet using \"it's\" (which is an abbreviation for \"it is\").\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1887260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371161", "body": "We had a short discussion on IRC, and consensus was to remove the T, as it's easier to read if they are separate. I merged this as I thought there was consensus about it, and it was certainly already an improvement, but despite being not ISO 8601, I certainly prefer a space to a 'T' as well here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371178", "body": "As long as it's consistent, I don't really care about that. It's not like it's harder to select (or drop) two space-separated values instead of one when parsing log files (and I've done so many times). Then again, this is a bike-shedding discussion, and I don't care enough about it to oppose any usage that people have consensus about.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371187", "body": "This line is confusing. If used, it should be GetSigOpCount(false), as sigops in non-bip16 txouts are counted using the inaccurate legacy way. However, this code isn't used at all for non-bip16 code, so it could just as well be an assert(IsPayToScriptHash()).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371246", "body": "@Diapolo Of course - consistency is more important than the format itself.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2524947", "body": "You better sort on the monthly%, as that is the best predictor for long-term connectability.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2524947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3392773", "body": "Yes, he commented on it before.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3392773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3485134", "body": "@Diapolo There is no reason to change that, as it is here intentionally (as\nopposed to fTestnet, which is now gone), as it needs to make this decision\nbefore the configuration is available.\n\nMaybe reordering things can change that, but that's a larger modification\nin any case.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3485134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4377279", "body": "What is wrong with wtxNew.vin?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4377279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418", "body": "That doesn't seem very necessary.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558", "body": "gen.cpp?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16333558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16681817", "body": "All .o files in my local installation together is a multiple of 100M already. Does it help at all if it can't even cache one full build's results?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16681817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16683454", "body": "ACK\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16683454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40323631", "body": "Agree, to the extent possible you should be able to read and understand the\ncommits without needing access to the github repository or its PRs/issues.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40323631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40358524", "body": "s/repositories/repository/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/40358524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8381255", "body": "What language is this, and why is specifically that one included?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8381255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121542143", "body": "Perhaps abstract out the list of things to filter into a variable, as it's used more than once?", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121542143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8397050", "body": "Very big problem! The underlining doesn't match now!!!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8397050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657558", "body": "Oh yes, indeed. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666218", "body": "I intended it to be disabled by default everywhere, but at least it should be consistent.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823611", "body": "Yes, though the BDB version most likely doesn't compile anymore. This was converted from Mike's code which tried to keep compatibility, but that's just an unneccessary burden.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2525710", "body": "I forgot removing it from the Qt makefile.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2525710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2555172", "body": "It's there to be sure shlwapi ends up in the linker command line after libleveldb.a, as that depends on shlwapi itself. It's possible it's right by default, but it won't hurt.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2555172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2560547", "body": "It's already inside a windows {} block, so that would be redundant.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2560547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2630132", "body": "Can you please make this -static windows-only?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2630132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "jackycjh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2be2b5d58a972b0ae1a63ffaadd50f69ce65d831", "message": "Remove the ending slashes from RPC URI format."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "practicalswift": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4aa64557b57ff7b2b2e0cc06fcd7b94b2a08fe66", "message": "Fix incorrect Markdown link"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdaed4755846e8b1e533c14485faa5f9fd1cf18b", "message": "tests: Remove unused variable (firstAddrnServices)"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60b32074098d50b04e408c1304dd6f6120654ed", "message": "Add Travis check for unused Python imports"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7399e7082805de6d04e9bf2e8bacd49e3adaae5", "message": "Remove unused Python imports"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11878", "title": "Add Travis check for duplicate includes", "body": "This enforces parts of the project header include guidelines (added by @sipa in #10575).\r\n\r\nExample output:\r\n\r\n```\r\nDuplicate include(s) in src/warnings.h:\r\n#include <stdlib.h>\r\n\r\nInclude(s) from src/warnings.h duplicated in src/warnings.cpp:\r\n#include <string>\r\n\r\nDuplicate include(s) in src/warnings.cpp:\r\n#include <util.h>\r\n```\r\n\r\nExample run:\r\n\r\n```\r\n$ git diff\r\ndiff --git a/src/warnings.cpp b/src/warnings.cpp\r\nindex c52a1fd..d8994dd 100644\r\n--- a/src/warnings.cpp\r\n+++ b/src/warnings.cpp\r\n@@ -5,6 +5,8 @@\r\n\r\n #include <sync.h>\r\n #include <clientversion.h>\r\n+#include <string>\r\n #include <util.h>\r\n #include <warnings.h>\r\n+#include <util.h>\r\n\r\ndiff --git a/src/warnings.h b/src/warnings.h\r\nindex e8e982c..8d2252e 100644\r\n--- a/src/warnings.h\r\n+++ b/src/warnings.h\r\n@@ -7,6 +7,7 @@\r\n #define BITCOIN_WARNINGS_H\r\n\r\n #include <stdlib.h>\r\n #include <string>\r\n+#include <stdlib.h>\r\n\r\n void SetMiscWarning(const std::string& strWarning);\r\n$ contrib/devtools/lint-includes.sh\r\nDuplicate include(s) in src/warnings.h:\r\n#include <stdlib.h>\r\n\r\nInclude(s) from src/warnings.h duplicated in src/warnings.cpp:\r\n#include <string>\r\n\r\nDuplicate include(s) in src/warnings.cpp:\r\n#include <util.h>\r\n$ echo $?\r\n1\r\n$ git checkout .\r\n$ contrib/devtools/lint-includes.sh\r\n$ echo $?\r\n0\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11795", "title": "net: Avoid locking cs_vNodes twice when calling FindNode(...). Add NodeExists(...).", "body": "Prior to this commit callers of `FindNode(...)` were required to be holding `cs_vNodes` in the cases where they used the returned `CNode*` for anything aside from existence-checking (see #9626).\r\n\r\nThis resulted in locking `cs_vNodes` twice since `FindNode(...)` had a `LOCK(cs_vNodes);`.\r\n\r\nTo solve this and to make the locking requirements more explicit this commit does the following:\r\n* Add explicit locking requirements for `FindNode(...)` using `EXCLUSIVE_LOCKS_REQUIRED(cs_vNodes)`.\r\n* Remove the now redundant `LOCK(cs_vNodes)` in `FindNode(...)`.\r\n* Add a method `CConnman::NodeExists(...)` for existence-checking. Calling this method does not require holding `cs_vNodes`.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11762", "title": "Avoid locking mutexes that are already held by the same thread", "body": "Avoid locking mutexes that are already held by the same thread. These are reentrant mutexes, but still no need to lock them more than once per thread :-)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11754", "title": "wallet: Add missing cs_wallet locks when accessing m_last_block_processed", "body": "Add missing `cs_wallet` locks when accessing `m_last_block_processed`.\r\n\r\n`m_last_block_processed` is guarded by `cs_wallet`.\r\n\r\nThese changes are required to get the Travis CI build (the build job with Clang's thread safety analysis enabled) to pass when the following locking annotation (see #11226) is added:\r\n\r\n```\r\nconst CBlockIndex* m_last_block_processed GUARDED_BY(cs_wallet);\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11733", "title": "qt: Remove redundant locks", "body": "Remove redundant locks:\r\n* ~~`FindNode(...)` is locking `cs_vNodes` internally~~\r\n* `SetAddressBook(...)` is locking `cs_wallet` internally\r\n* `DelAddressBook(...)` is locking `cs_wallet` internally\r\n\r\n**Note to reviewers:** From what I can tell these locks are redundantly held from a data integrity perspective (guarding specific variables), and they do not appear to be needed from a data consistency perspective (ensuring a consistent state at the right points). Review thoroughly and please let me know if I'm mistaken :-)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11694", "title": "rpc: Add missing cs_main lock in getblocktemplate(...)", "body": "Reading the variable `chainActive` requires holding the mutex `cs_main`.\r\n\r\nPrior to this commit the `cs_main` mutex was not held when accessing `chainActive` in:\r\n\r\n```\r\nwhile (chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning())\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11689", "title": "mempool: Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026)", "body": "Fix missing locking in `CTxMemPool::check(const CCoinsViewCache *pcoins)`:\r\n* reading variable `mapTx` requires holding mutex `cs`\r\n* reading variable `mapNextTx` requires holding mutex `cs`\r\n* reading variable `nCheckFrequency` requires holding mutex `cs`\r\n\r\nFix missing locking in `CTxMemPool::setSanityCheck(double dFrequency)`:\r\n* writing variable `nCheckFrequency` requires holding mutex `cs`\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11652", "title": "Add missing locks to init.cpp (in AppInitMain + ThreadImport) and validation.cpp", "body": "Locks added to `init.cpp` due to the following locking requirements (needed for #11226):\r\n1. reading the value pointed to by `pblocktree` requires holding mutex `cs_main`\r\n1. reading the value pointed to by `pblocktree` requires holding mutex `cs_main`\r\n1. reading variable `mapBlockIndex` requires holding mutex `cs_main`\r\n1. reading the value pointed to by `pcoinsdbview` requires holding mutex `cs_main`\r\n1. reading the value pointed to by `pcoinsTip` requires holding mutex `cs_main`\r\n1. reading variable `chainActive` requires holding mutex `cs_main`\r\n1. reading variable `chainActive` requires holding mutex `cs_main`\r\n1. reading variable `chainActive` requires holding mutex `cs_main`\r\n1. reading variables `mapBlockIndex` and `chainActive` require holding mutex `cs_main`\r\n\r\nLocks added to `validation.cpp` due to the following locking requirements:\r\n1. reading variable `scriptExecutionCache` requires holding mutex `cs_main`\r\n1. writing variable `fCheckForPruning` requires holding mutex `cs_LastBlockFile` exclusively\r\n1. reading variable `mapBlockIndex` requires holding mutex `cs_main`\r\n1. reading variable `nLastBlockFile` requires holding mutex `cs_LastBlockFile`\r\n1. reading variables `mapBlockIndex` and `chainActive` require holding mutex `cs_main`\r\n1. writing variable `nLastBlockFile` requires holding mutex `cs_LastBlockFile` exclusively\r\n1. writing variable `nBlockSequenceId` requires holding mutex `cs_nBlockSequenceId` exclusively", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11634", "title": "wallet: Add missing cs_wallet/cs_KeyStore locks to wallet", "body": "Add missing `cs_wallet`/`cs_KeyStore` locks to wallet:\r\n1. Reading the variables `mapTxSpends` and `mapWallet` (via the `IsSpent(...)` call) require holding the mutex `cs_wallet`.\r\n1. Reading the variables `mapKeys` and `mapCryptedKeys` require holding the mutex `cs_KeyStore`.\r\n1. Reading the variable `nTimeFirstKey` requires holding the mutex `cs_wallet`.\r\n1. Reading the variable `mapWallet` requires holding the mutex `cs_wallet`.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11617", "title": "Call FlushStateToDisk(...) regardless of fCheckForPruning", "body": "The variable `fCheckForPruning` is guarded by the mutex `cs_LastBlockFile`.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11596", "title": "Add missing cs_main locks when accessing chainActive", "body": "Add missing `cs_main` locks when accessing `chainActive`.\r\n\r\nThe variable `chainActive` is guarded by the mutex `cs_main`.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11577", "title": "Fix warnings (-Wsign-compare) when building with DEBUG_ADDRMAN", "body": "Fix warnings when building with `DEBUG_ADDRMAN`.\r\n\r\nWarnings prior to this commit:\r\n\r\n```\r\naddrman.cpp:390:24: warning: comparison of integers of different signs: 'size_type' (aka 'unsigned long') and 'int' [-Wsign-compare]\r\n    if (vRandom.size() != nTried + nNew)\r\n        ~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~\r\naddrman.cpp:411:52: warning: comparison of integers of different signs: 'int' and 'size_type' (aka 'unsigned long') [-Wsign-compare]\r\n        if (info.nRandomPos < 0 || info.nRandomPos >= vRandom.size() || vRandom[info.nRandomPos] != n)\r\n                                   ~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~\r\naddrman.cpp:419:25: warning: comparison of integers of different signs: 'size_type' (aka 'unsigned long') and 'int' [-Wsign-compare]\r\n    if (setTried.size() != nTried)\r\n        ~~~~~~~~~~~~~~~ ^  ~~~~~~\r\naddrman.cpp:421:23: warning: comparison of integers of different signs: 'size_type' (aka 'unsigned long') and 'int' [-Wsign-compare]\r\n    if (mapNew.size() != nNew)\r\n        ~~~~~~~~~~~~~ ^  ~~~~\r\n4 warnings generated.\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11551", "title": "Fix unsigned integer wrap-around in GetBlockProofEquivalentTime", "body": "Fix likely unintentional unsigned integer wrap-around in `GetBlockProofEquivalentTime(...)` when `to.nChainWork <= from.nChainWork`.\r\n\r\n**Description:**\r\n\r\n`int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, \u2026)`\r\ncontains the following code:\r\n\r\n```\r\nint sign = 1;\r\nif (to.nChainWork > from.nChainWork) {\r\n\u2026\r\n} else {\r\n    \u2026\r\n    sign = -1;\r\n}\r\n\u2026\r\nreturn sign * r.GetLow64();\r\n```\r\n\r\n`r.GetLow64()` is of type `uint64_t`.\r\n\r\nNote that the types of the two operands in `sign * r.GetLow64()` differ in signedness.\r\n\r\nSince `uint64_t` is wider than `int` the signed operand (`sign`) is converted to the unsigned type.\r\n\r\nIn the case of `sign == -1` (`to.nChainWork <= from.nChainWork`) we wrap around and end up with `18446744073709551615 * r.GetLow64()` (`std::numeric_limits<uint64_t>::max() * r.GetLow64()`) instead of the intended `-1 * r.GetLow64()`.\r\n\r\nNote however that another conversion takes place when the result is converted into the return type \r\n(`int64_t`), so the resulting value should be the expected one (equivalent to `-1 * r.GetLow64()`).\r\n\r\nIn the case that this behaviour (wrap-around + relying on return type to fix) is intentional a comment should probably be added to indicate so :-)\r\n\r\n`GetBlockProofEquivalentTime(\u2026)` was introduced in f7303f97933be33e34d482cf8348d180c8da2a26. Friendly ping @sipa - intentional or not? :-)\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11535", "title": "Avoid unintentional unsigned integer wraparounds", "body": "Avoid unintentional unsigned integer wraparounds.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11226", "title": "[WIP] Add Clang thread safety analysis annotations: GUARDED_BY(lock) / EXCLUSIVE_LOCKS_REQUIRED(lock)", "body": "Add additional Clang thread safety analysis annotations as discussed with @sipa (https://github.com/bitcoin/bitcoin/pull/10866#issuecomment-316238630) and others.\r\n\r\nThis is a follow-up to #10866 ~~which this PR is rebased upon (awaiting merge of #10866). The first three commits (8a1dc09, e022990 and cbae151) can be reviewed in #10866.~~\r\n\r\nThis PR contains three types of changes:\r\n1. Add missing locks (based on the `GUARDED_BY(...)` analysis below). Please review thoroughly.\r\n2. Add `GUARDED_BY(...)` annotations to allow for Clang's thread safety analysis at compile-time. Does not change run-time behaviour.\r\n3. Add `EXCLUSIVE_LOCKS_REQUIRED(...)` annotations to allow for Clang's thread safety analysis at compile-time. Does not change run-time behaviour.\r\n\r\nBackground reading: The [\"C/C++ Thread Safety Analysis\"](https://research.google.com/pubs/archive/42958.pdf) paper (Hutchins, Ballman & Sutherland, 2014) paper describing Clang thread safety analysis and how it is used for the Google C++ codebase:\r\n\r\n> They essentially provide a static type system for threads, and can detect potential race conditions and deadlocks. This paper describes Clang Thread Safety Analysis, a tool which uses annotations to declare and enforce thread safety policies in C and C++ programs.\r\n> [\u2026]\r\n> It has been deployed on a large scale at Google; all C++ code at Google is now compiled with thread safety analysis enabled by default.\r\n> [\u2026]\r\n> The `GUARDED_BY` attribute declares that a thread must lock `mu` before it can read or write to `balance`, thus ensuring that the increment and decrement operations are atomic. Similarly, `REQUIRES` declares that the calling thread must lock mu before calling `withdrawImpl`. Because the caller is assumed to have locked `mu,` it is safe to modify `balance` within the body of the method.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10975", "title": "[script] Return early if no valid opcodes found in CountWitnessSigOps(...)", "body": "Return early if no valid opcodes found in `CountWitnessSigOps(...)`.\r\n\r\nPrior to this commit this was the only place in the codebase where `GetOp(...)` was called without checking the return value.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10742", "title": "scripted-diff: Use scoped enumerations (C++11, \"enum class\")", "body": "Rationale (from Bjarne Stroustrup's [\"C++11 FAQ\"](http://www.stroustrup.com/C++11FAQ.html#enum)):\r\n\r\n> \r\n> The enum classes (\"new enums\", \"strong enums\") address three problems with traditional C++ enumerations:\r\n> \r\n> * conventional enums implicitly convert to int, causing errors when someone does not want an enumeration to act as an integer.\r\n> * conventional enums export their enumerators to the surrounding scope, causing name clashes.\r\n> * the underlying type of an enum cannot be specified, causing confusion, compatibility problems, and makes forward declaration impossible.\r\n>\r\n> The new enums are \"enum class\" because they combine aspects of traditional enumerations (names values) with aspects of classes (scoped members and absence of conversions).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10694", "title": "Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&)", "body": "Remove redundant code in `MutateTxSign(CMutableTransaction&, const std::string&)`.\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10638", "title": "[rpc] Clarify pblock assumption via an assertion", "body": "`pblock->nNonce = 0` will result in a `nullptr` dereference if the added assertion does not hold true.\r\n\r\n`pblock != nullptr` is not obvious from reading the code - hence the need for stating this assumption explicitly via an assertion. This has the added benefit getting rid of the following `clang-tidy` warning:\r\n\r\n```\r\nrpc/mining.cpp:560:20: note: Access to field 'nNonce' results in\r\n  a dereference of a null pointer (loaded from variable 'pblock')\r\n    pblock->nNonce = 0;\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10498", "title": "Use static_cast instead of C-style casts for non-fundamental types", "body": "A C-style cast is equivalent to try casting in the following order:\r\n\r\n1. `const_cast(...)`\r\n2. `static_cast(...)`\r\n3. `const_cast(static_cast(...))`\r\n4. `reinterpret_cast(...)`\r\n5. `const_cast(reinterpret_cast(...))`\r\n\r\nBy using `static_cast<T>(...)` explicitly we avoid the possibility of an unintentional and dangerous `reinterpret_cast`. Furthermore `static_cast<T>(...)` allows for easier grepping of casts.\r\n\r\nFor a more thorough discussion, see [\"ES.49: If you must use a cast, use a named cast\"](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast) in the C++ Core Guidelines (Stroustrup & Sutter).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9598", "title": "Improve readability by removing redundant casts to same type (on all platforms)", "body": "Same binaries check under Linux:\r\n\r\n```\r\n$ ../bitcoin-maintainer-tools/build-for-compare.py 874f13821f4193bd037cd37d005ee76b5a849398 82274c02ed2d82537dc55f008a29edb1bc09bbc4 --executables \"src/bitcoind,src/bitcoin-cli,src/bitcoin-tx\"\r\n\r\n$ sha256sum /tmp/compare/*.stripped\r\n1fe1a8827474f7f24475ce3dc851e7ac658d4ed0ae38d11e67f5a810671eaa15  /tmp/compare/bitcoin-cli.82274c02ed2d82537dc55f008a29edb1bc09bbc4.stripped\r\n1fe1a8827474f7f24475ce3dc851e7ac658d4ed0ae38d11e67f5a810671eaa15  /tmp/compare/bitcoin-cli.874f13821f4193bd037cd37d005ee76b5a849398.stripped\r\n342c2ed0e60b60990a58cbf5845b256a4f9e3baff9db074baba5e34a620a60ea  /tmp/compare/bitcoind.82274c02ed2d82537dc55f008a29edb1bc09bbc4.stripped\r\n342c2ed0e60b60990a58cbf5845b256a4f9e3baff9db074baba5e34a620a60ea  /tmp/compare/bitcoind.874f13821f4193bd037cd37d005ee76b5a849398.stripped\r\ne4b2a80b2361d5cefd67a47eeb9298b8b712c26c7779d979348be8b2c7e3ec93  /tmp/compare/bitcoin-tx.82274c02ed2d82537dc55f008a29edb1bc09bbc4.stripped\r\ne4b2a80b2361d5cefd67a47eeb9298b8b712c26c7779d979348be8b2c7e3ec93  /tmp/compare/bitcoin-tx.874f13821f4193bd037cd37d005ee76b5a849398.stripped\r\n\r\n$ git diff -W --word-diff /tmp/compare/874f13821f4193bd037cd37d005ee76b5a849398 /tmp/compare/82274c02ed2d82537dc55f008a29edb1bc09bbc4\r\n\r\n$\r\n```\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "251Labs": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a93543419300bd78e189429e003c8b17c1b983a", "message": "Replaces numbered place marker %2 with %1.\n\nReplaces numbered place marker %2 with %1, because the QString::arg() member function is called once on the string used to create the QString object."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d663f81977dbb83d12a1cbc970a13f41771605f", "message": "Fixes issue #12067 `sendmany` curl example is wrong.\n\nThis commit removes the escaped backslash and quote characters from the keys in the JSON object to make it a plain JSON object."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dda059bde0798f54626108beab29d9d3834769c", "message": "[qt] Simplifies boolean expression model && model->haveWatchOnly()\n\nThe boolean expression model && model->haveWatchOnly() can be simplified to model->haveWatchOnly(), because if (!model || !model->getOptionsModel()) { return; } guards against a potential dereferenced null pointer."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12050", "title": "[trivial] Implements a virtual destructor on the BaseRequestHandler class.", "body": "Granted that there is no undefined behavior in the current implementation, this PR implements a virtual destructor on the BaseRequestHandler class to protect against undefined behavior in the event that an object of a potential future derived BaseRequestHandler class with a destructor is destroyed through a pointer to this base class.\r\n\r\nThis PR also fixes \"_warning: delete called on 'BaseRequestHandler' that is abstract but has non-virtual destructor [-Wdelete-non-virtual-dtor]_\" warnings in environments where the project is built with the `-Wsystem-headers` flag; or environments where the `-Wdelete-non-virtual-dtor` diagnostics flag fires from system headers.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Christewart": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18be3ab13964ebdc0bbaf739b2b29aa34de53dc5", "message": "Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8469", "title": "[POC] Introducing property based testing to Core", "body": "This pull request is a proof of concept for introducting [property based testing](https://en.wikipedia.org/wiki/QuickCheck) into Bitcoin Core\n\n> In QuickCheck the programmer writes assertions about logical properties that a function should fulfill. Then QuickCheck attempts to generate a test case that falsifies these assertions. Once such a test case is found, QuickCheck tries to reduce it to a minimal failing subset by removing or simplifying input data that are not needed to make the test fail.\n\nThis has been very useful for a Bitcoin library I've been working on and thought it would be worthwhile to develop a POC for Bitcoin Core. The property based library I am using for C++ is called [rapidcheck](https://github.com/emil-e/rapidcheck). Here are the [docs](https://github.com/emil-e/rapidcheck/tree/master/doc). \n\nThis pull request currently contains [two properties](https://github.com/Christewart/bitcoin/blob/rapidcheck/src/test/key_properties.cpp#L34-L46), one testing `CKey` generation and the other testing serialization symmetry for `CKey` and `CBitcoinSecret`. These are rather trivial properties, but useful for illustrating the power of property based testing if there was a bug inside of Core.\n\nI want to solicit some feedback from developers if this is something that would actually be merged into Core. Eventually we could have a large library of [generators](https://github.com/emil-e/rapidcheck/blob/master/doc/generators.md) that would allow us to quickly prototype, test, and reason about the behavior of new code added to Core. Here is an example of a [library of generators](https://github.com/bitcoin-s/bitcoin-s-core/blob/master/src/main/scala/org/bitcoins/core/gen/TransactionGenerators.scala#L70-L117) (in Scala) that could give you a little more of an idea of what I am talking about. \n\nThoughts?\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akx20000a": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/595a7bab23bc21049526229054ea1fff1a29c0bf", "message": "Increment MIT Licence copyright header year on files modified in 2017"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9439e735a6659b59bdcb8cc70342a8fe8c9a9b7", "message": "[Trivial] Update license year range to 2018"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jb55": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebcee1de263ea21acfd79e92dc874de65c9bae9b", "message": "bips: add bip176 (Bits Denomination)\n\nFor the implementation in #12035.\nNote that this only applies to the QT GUI at this time.\n\nSigned-off-by: William Casarin <jb55@jb55.com>"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/275b2eeed4050d8797bf127e5abf171c050e182a", "message": "[qt] change \u00b5BTC to bits\n\n* Now that we have bip176, change \"\u00b5BTC\" to the more colloquial \"bits\"\n\n* We retain the `\u00b5BTC (bits)` description in dropdowns and status bars.\n  The more concise \"bits\" is used when appended to numbers.\n\nSigned-off-by: William Casarin <jb55@jb55.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fernandezpablo85": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ec3eae393a272433e020e1c37d5b07e7789da6c", "message": "remove brew c++ flag\n\nthe c++ is not needed since the listed brew formulas no longer have this option. It also raises a warning that may generate confusion."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martinus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/760af84072408ba53d009e868fccc25fb186d40c", "message": "Removed CCheckQueueSpeed benchmark\n\nThis benchmark's runtime was rather unpredictive on different machines, not really a useful benchmark."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00721e69f8280f8bc59bede43b335ecc347d4fdf", "message": "Improved microbenchmarking with multiple features.\n\n* inline performance critical code\n* Average runtime is specified and used to calculate iterations.\n* Console: show median of multiple runs\n* plot: show box plot\n* filter benchmarks\n* specify scaling factor\n* ignore src/test and src/bench in command line check script\n* number of iterations instead of time\n* Replaced runtime in BENCHMARK makro number of iterations.\n* Added -? to bench_bitcoin\n* Benchmark plotly.js URL, width, height can be customized\n* Fixed incorrect precision warning"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12048", "title": "Use best-fit strategy in Arena, now O(log(n)) instead O(n)", "body": "This replaces the first-fit algorithm used in the Arena with a best-fit. According to \"Dynamic Storage Allocation: A Survey and Critical Review\", Wilson et. al. 1995, http://www.scs.stanford.edu/14wi-cs140/sched/readings/wilson.pdf, both startegies work well in practice.\r\n\r\nThe advantage of using best-fit is that we can switch the O(n) allocation to O(log(n)). Additionally, some previously O(log(n)) operations are now O(1) operations by using hash maps. The end effect is that the benchmark runs about 2.5 times faster on my machine:\r\n\r\n    # Benchmark, evals, iterations, total, min, max, median\r\n    old: BenchLockedPool, 5, 530, 5.25749, 0.00196938, 0.00199755, 0.00198172\r\n    new: BenchLockedPool, 5, 1300, 5.11313, 0.000781493, 0.000793314, 0.00078606\r\n\r\nI've run all unit tests and benchmarks, and increased the number of iterations so that BenchLockedPool takes about 5 seconds again.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Varunram": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eb4d4595c69ac5885fb4a144e48e9a884f0186f", "message": "[build] Warn that only libconsensus can be built without boost"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543ab40a44d32cccbdc309fe184660f726c034d2", "message": "Docs: Bump OSX version to 10.13 in build-osx.md"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11971", "title": "[docs]: include README with binary releases", "body": "Intended as a fix for: #8160 \r\nSuggestions welcome for a better file name, I couldn't think of any better ones, so went ahead with this. This file is more like a combination of the main readme at `doc/README` and some dev docs.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11969", "title": "logs: Improve \"mempool min fee not met\" error", "body": "Intended as a fix for #11955. \r\nI'm pretty new here, so apologies if this isn't the intended fix. Thanks!", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PierreRochard": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecf9b25a03d8a29f16005ca4485b6533db6efc82", "message": "remove unused fNoncriticalErrors variable from CWalletDB::FindWalletTx"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kallewoof": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f09e03e0f2ddbcd7ccaa9d21062be97dab2883a", "message": "Remove unused include in hash.cpp"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3411435ae47246d64360f66a6b16f9a2d9f0c73", "message": "[build] Add missing stuff to clean-local\n- test/functional/test_framework/__pycache__\n- test/cache"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434526aba680cb73208e018a02827d51a71cfff6", "message": "[test] Add tests for getrawtransaction with block hash."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16795167704687d908f881dacf04d388db28cb3", "message": "[rpc] Allow getrawtransaction to take optional blockhash to fetch transaction from a block directly."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5a2ce53622b8d2e3fda659e497d47c5d164b0", "message": "[rpc] Fix fVerbose parsing (remove excess if cases)."}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12132", "title": "[BIP-117] Tail call semantics", "body": "Implements BIP [117](https://github.com/bitcoin/bips/blob/master/bip-0117.mediawiki) as policy rules for transaction relay, causing transactions which violate the new tail-call semantics to be treated as non-standard. This is not the soft-fork activation logic needed to use tail-call scripts in production.\r\n\r\nTail-call semantics is a sort of user-programmable P2SH which combines well with BIP 116's MERKLEBRANCHVERIFY to allows for a script to commit to a practically unbounded number of code pathways, and then reveal the actual code pathway used at spend time, achieving a form of generalized MAST.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12131", "title": "[BIP-98 + BIP-116] MERKLEBRANCHVERIFY", "body": "Implements BIPs [98](https://github.com/bitcoin/bips/blob/master/bip-0098.mediawiki) and [116](https://github.com/bitcoin/bips/blob/master/bip-0116.mediawiki) as policy rules for transaction relay, causing transactions which use NOP4 for things other than Merkle branch verification to be treated as non-standard. This is not the soft-fork activation logic needed to use MERKLEBRANCHVERIFY in production.\r\n\r\nMERKLEBRANCHVERIFY is a soft-fork upgradeable opcode that allows script writers to commit to a set of data elements and have one or more of these elements be provided at redemption without having to reveal the entire set. As these data elements can be used to encode policy, such as public keys or validation subscripts, the MERKLEBRANCHVERIFY opcode can be used to overcome size limitation of existing bitcoin script, and combines with tail-call semantics to provide a minimal implementation of the Merkelized Abstract Syntax Tree concept.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12096", "title": "[rpc] [wallet] Allow specifying the output index when using bumpfee", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11413", "title": "[wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option", "body": "This lets users pick their own fees when using `sendtoaddress` if they prefer this over the estimators.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11020", "title": "[wallet] getbalance: Add option to include non-mempool UTXOs", "body": "Currently, if the wallet generates a transaction that cannot currently go into the mempool (e.g. due to too-long-mempool-chain), the wallet UTXOs related to this will vanish from `getbalance`, giving the appearance that the user has less funds than they actually do.\r\n\r\nFrom a \"get spendable balance\" perspective, this is perfectly valid, but users may sometimes want to see their actual balance, regardless of whether they can spend it or not at that time.\r\n\r\nThis PR adds an `include_unspendable` option (default=false) to `getbalance` which, when `true`, will consider non-mempool transactions as trusted, and thus display these in the tally.\r\n\r\nNote: this flag does nothing when a user specifies an account (i.e. `GetLegacyBalance`), and the legacy balance in fact already does what `include_unspendable=true` does, given the right arguments.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11019", "title": "[wallet] Abandon transactions that fail to go into the mempool", "body": "This PR addresses the case where a wallet transaction fails to be accepted to the mempool when committed. This would keep the transaction in the wallet, to be rebroadcast at some undetermined time in the future, with the consequence that the change output would be cloaked. Even adding the mempool transactions into a new block will not immediately resolve the problem, due to the wallet not rebroadcasting the transaction immediately (even to itself) for (I think) privacy reasons.\r\n\r\nAlthough there is a `walletrejectlongchain` option, the behavior when this is turned off is confusing and unpredictable, as noted above, and the `CommitTransaction` code will do the exact same thing for other mempool add failures, whichever those may be.\r\n\r\nEdit: ~~~open question and currently investigating: will the coin selection algorithm inadvertently pick UTXOs that would result in a rejection of the transaction even if the user has other UTXOs available that wouldn't result in a too long chain? I have tried to trigger this case but the coin select is always picking the \"right\" UTXO that won't result in failure.~~~\r\n\r\nEdit 2: In https://github.com/bitcoin/bitcoin/blame/master/src/wallet/wallet.cpp#L2457 the very last attempt to select coins increases the ancestor cap to num max, so above concern about coin select sometimes inadvertently picking an unspendable-due-to-chain-length tx is not a problem.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10877", "title": "[rpc] Verbose flags for chaining and scripting", "body": "[Reviewer hint: use [?w=1](https://github.com/bitcoin/bitcoin/pull/10877/files?w=1) to avoid seeing a bunch of indentation changes.]\r\n\r\nRight now, some RPC commands return JSON data along with transaction hex strings, which means scripting and/or chaining needs to do JSON processing before being able to use the resulting transaction data. For use cases where you don't need the extra info, this PR adds a verbose=false mode (default true) which returns only the transaction hex string.\r\n\r\nThis means you can now do things like this:\r\n```Bash\r\n./bitcoin-cli -regtest -named signrawtransaction hexstring=$(\r\n    ./bitcoin-cli -regtest -named fundrawtransaction hexstring=$(\r\n        ./bitcoin-cli -regtest createrawtransaction \"[]\" \"{\\\"$(\r\n            ./bitcoin-cli -regtest getnewaddress)\\\": 10.0}\") verbose=false) verbose=false\r\n```\r\n\r\nThis is also useful in scripts, where you perform some operation on a transaction and store the tx itself in a variable. Before you would need e.g. `jq` or some other tool to do this.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10585", "title": "[WIP] PoW connection slots", "body": "This is a design idea for the PoW connection slots ([BIP-154](https://github.com/bitcoin/bips/blob/master/bip-0154.mediawiki)).\r\n\r\nI am mostly looking for feedback on the approach, and not so much on the quality of the code itself, at this point (but code feedback is of course also appreciated).\r\n\r\nDoes this seem like a reasonable approach?\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10386", "title": "[wallet] Optional '-avoidreuse' flag which defaults to not reusing addresses in sends", "body": "#10065 brings up a privacy issue where a user can send a bunch of near-dust transactions to an address, which would be picked up by the coin select code when the owner funded transactions, connecting multiple transactions and addresses to the same user.\r\n\r\nThis adds a (by default turned off) flag `-avoidreuse`. When enabled, the wallet will mark any addresses that were used to fund a transaction as \"dirty\" and will avoid using them in funding additional transactions, unless an \"allow dirty\" flag is set.\r\n\r\nIt also adds support to allow dirty addresses in `sendtoaddress`. More tweaks to other RPC commands is necessary but I wanted to keep the PR as small as possible.\r\n\r\nRetroactive flagging of dirty addresses can be done by rescanning the chain.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10367", "title": "[test] Test abortrescan command.", "body": "Replaces #10225 as it caused intermittent failures for some users.\r\n\r\nDifference: gave up on making a \"fast running\" test and upped the blockchain size and spam count to avoid the scan finishing before the abort call. Moved test down to extended tests.\r\n\r\nTest runs in roughly 2 minutes on my local machine. The blockchain generation part takes roughly 1m20s.\r\n\r\n@jnewbery Does this work on your end?", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10366", "title": "[test] Remove all * imports", "body": "Another take at #9876 (I didn't realize it existed, but it's closed and I really do think we should get rid of `import *`s if possible!).\r\n\r\nMain difference that I can see: each commit corresponds to one file.\r\n\r\nI attempted to pull imported imports out as much as possible, e.g. instead of importing `Decimal` from `util.py`, it is now imported directly from `decimal`. I may have missed some of these.\r\n\r\nOptions, please advice:\r\n1. Discard this PR as redundant in favor of outcome in discussion in #9876 (`__all__`) -- personally I don't think this approach is ideal, as it breeds bad behavior from example (`import *` *is* considered bad behavior, even if `__all__` makes it more controllable) -- or in favor of reopening #9876.\r\n2. Split into multiple PR's to spread impact out over time, e.g. \"`p2p-*`, `mempool_*`, ...\".\r\n3. Take as is or squashed in some fashion (`p2p-*`, `mempool_*`, ...)\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267", "title": "New -includeconf argument for including external configuration files", "body": "Fixes: #10071.\r\n\r\nDone:\r\n- adds `-includeconf=<path>`, where `<path>` is relative to `datadir` or to the path of the file being read, if in a file\r\n- protects against circular includes\r\n- updates help docs\r\n\r\n~~~Thoughts:~~~\r\n- ~~~I am not sure how to test this in a neat manner. Feedback on this would be nice. Will dig/think though.~~~", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111741718", "body": "Makes sense. Changing to \"will not be prioritized\".", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111741718/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111741877", "body": "That may be for members only. I don't see any suggestions on that PR but I've seen suggestions on PR's on repos to which I have merge access.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111741877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "dongsam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3ac7672ed9c63b954d3f368a90616448d31b4c3", "message": "Fix string concatenation to os.path.join and add exception case"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hkjn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3121d76ba11043ea5c4e957ac0c3edbf21d1e84d", "message": "doc: Update release notes for share/rpcauth/rpcauth.py rename"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fdb29778a0b598d4ddf05ec5ed4593641d0da6e", "message": "Rename rpcuser.py to rpcauth.py\n\nThis script creates `rpcauth` entries for bitcoin.conf,\nnot the deprecated `rpcuser` entry, so this changes the name\nof the script to match."}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2f277b1905de93bade8e589895403b13b30c5c", "message": "rpcuser.py: Use 'python' not 'python2'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TimothyShimmin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf20a7d6404e92efed07f81b4ffd3eab406d2526", "message": "[docs] Fixed outdated link with archive.is\n\nThe listed link is directing to an empty page, at least content-wise. I found the same page on archive.is and linked to that instead."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aaron-hanson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33698c94bec993bd744536e15252fbf562f93f7f", "message": "Trivial: fix comments for ZeroMQ bitcoind args"}], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11765", "title": "[REST] added blockhash api, tests and documentation", "body": "Added a /rest/blockhash/<HEIGHT>.json endpoint, so that the user can fetch a block hash by height via REST (analogous to the 'getblockhash' RPC method).\r\n\r\nFor someone wanting to gather block or header data via REST only, there was no way to begin fetching blocks/headers at specific heights without knowing the block hashes at those heights.  This endpoint might also come in handy for someone wanting to quickly verify a block existing at a specific height in the active chain.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mryandao": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12240", "title": "changed fee to be in sats instead of btc", "body": "the denomination for `fee` is current in btc while the other such as `decendentFee` and `ancestorFee` are in satoshis.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MCFX2": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12232", "title": "Improve \"Turn Windows Features On or Off\" step", "body": "Originally, this readme suggests searching for 'turn' to open this dialog but this will not necessarily work on all windows 10 PCs. It's better to use the executable name instead, which is consistent across installations.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fwolfst": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12192", "title": "Trivial: Update http URL of MIT license to use https", "body": "In two steps, update the links as described in the issue.\r\n\r\nFirst commit: `sed` everything.\r\nSecond commit: Fix whitespace syntactic sugar that got bitter due to different length of URLs.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericallam": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12189", "title": "[Qt] Display transaction fee with sat/vbyte value in SendCoinsDialog", "body": "Related to issue #11564, this PR designed to provide feedback to the user about their relative transaction fee before they finish broadcasting their tx to the bitcoin network. \r\n\r\nDisplaying the sat/vbyte is useful for knowing how likely their tx will be included in an upcoming block when using public fee estimation tools like https://jochen-hoenicke.de/queue/#24h, https://estimatefee.com, and https://bitcoinfees.earn.com.\r\n\r\nThis updates the SendCoinsDialog to look like this:\r\n\r\n<img width=\"838\" alt=\"screen shot 2018-01-15 at 12 46 14\" src=\"https://user-images.githubusercontent.com/534/34943625-4f0037a6-f9f4-11e7-8a77-49d35df34c76.png\">", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kekimusmaximus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12184", "title": "[TRIVIAL] Drop C headers in favour of C++-compatibility headers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12183", "title": "Make use of emplace in nonassociative containers.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12182", "title": "[TRIVIAL] Remove useless string initialization.", "body": "", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12169", "title": "Avoid temporary copies in C++11 ranged-based for loops.", "body": "The ::value_type of the std::map/std::unordered_map containers is\r\nstd::pair<const Key, T>.\r\n\r\nCurrently a lot of loops drop the const from the iterator which forces\r\nthe compiler to create a copy, this should be avoided by using the auto\r\nkeyword.\r\n\r\nA better explanation can be found in Meyer's Effective Modern C++.\r\n\r\nhttps://books.google.de/books?id=rjhIBQAAQBAJ&lpg=PA41&ots=FmZL15vynY&pg=PA41#v=onepage&q&f=false", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12159", "title": "Use the character based overload for std::string::find.", "body": "std::string::find has a character based overload as can be seen here\r\n(4th oveload): http://www.cplusplus.com/reference/string/string/find/\r\n\r\nUse that instead of constantly allocating temporary strings.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12158", "title": "Avoid unnecessary copy of objects.", "body": "* removed unnecessary value arguments.\r\n* removed unnecessary copy initialization.\r\n* removed unnecessary for range copy.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "randolf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12125", "title": "[Docs] Create NetBSD build instructions and fix compilation.", "body": "This change makes it possible to build/compile Bitcoin on NetBSD (specifically, NetBSD 7.0, and very likely other recent versions too).  One .m4 file has one minor change so that ./configure can find Berkeley DB 4.8, and one .md file was created that provides instructions for NetBSD users.\r\n\r\nThank you to the many helpful people in the #netbsd and #bitcoin-core-dev channels on irc.freenode.net for your help with this.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Flowdalic": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12102", "title": "Apply hardening measurements in bitcoind systemd service file", "body": "Adds typical systemd hardening measurements for network services.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "puchu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12051", "title": "add missing debian contrib files to tarball", "body": "the current release is missing the debian contrib folder, add it", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeromer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12042", "title": "Add hdenabled flag in getwalletinfo", "body": "When running `bitcoin-cli getwalletinfo` we can see a new flag called `hdenabled` which is either `true` or `false`. This replicates the behaviour we see in `bitcoin-qt` which displays a \"HD Enabled\" logo in `BitcoinGUI::setHDStatus()`\r\n\r\nThe help now look like this:\r\n\r\n    bitcoin-cli getwalletinfo help\r\n    error code: -1\r\n    error message:\r\n    getwalletinfo\r\n    Returns an object containing various wallet state info.\r\n\r\n    Result:\r\n    {\r\n      \"walletname\": xxxxx,             (string) the wallet name\r\n      \"walletversion\": xxxxx,          (numeric) the wallet version\r\n      \"balance\": xxxxxxx,              (numeric) the total confirmed balance of the wallet in BTC\r\n      \"unconfirmed_balance\": xxx,      (numeric) the total unconfirmed balance of the wallet in BTC\r\n      \"immature_balance\": xxxxxx,      (numeric) the total immature balance of the wallet in BTC\r\n      \"txcount\": xxxxxxx,              (numeric) the total number of transactions in the wallet\r\n      \"keypoololdest\": xxxxxx,         (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\r\n      \"keypoolsize\": xxxx,             (numeric) how many new keys are pre-generated (only counts external keys)\r\n      \"keypoolsize_hd_internal\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\r\n      \"unlocked_until\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\r\n      \"paytxfee\": x.xxxx,              (numeric) the transaction fee configuration, set in BTC/kB\r\n      \"hdmasterkeyid\": \"<hash160>\",    (string) the Hash160 of the HD master pubkey\r\n      \"hdenabled\": true|false          (boolean) true if HD is enabled, false otherwise\r\n    }\r\n\r\n    Examples:\r\n    > bitcoin-cli getwalletinfo\r\n    > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n\r\nAnd the command output:\r\n\r\n\r\n    bitcoin-cli getwalletinfo\r\n    {\r\n      \"walletname\": \"wallet.dat\",\r\n      \"walletversion\": 139900,\r\n      \"balance\": 0.00999772,\r\n      \"unconfirmed_balance\": 0.00000000,\r\n      \"immature_balance\": 0.00000000,\r\n      \"txcount\": 7,\r\n      \"keypoololdest\": 1514388183,\r\n      \"keypoolsize\": 1000,\r\n      \"keypoolsize_hd_internal\": 1000,\r\n      \"paytxfee\": 0.00000000,\r\n      \"hdmasterkeyid\": \"ad304ceaa7bf2bf0a3543526968ee958fb94c847\",\r\n      \"hdenabled\": true\r\n    }", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Zelest": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12041", "title": "doc: OpenBSD build instructions revamp", "body": "I've rewritten most parts of the OpenBSD build instructions to make\r\nit shorter and more straight forward.  I've also added instructions\r\non how to build with GUI/Qt 5 support, as some of us actually use\r\nOpenBSD as a desktop system. ;-)\r\n\r\n- Remove the GCC section as OpenBSD now ships with LLVM as of 6.2.\r\n- Remove the Resources section as it only applied to GCC.\r\n- Add instructions for building with Qt 5 support.\r\n- Change the Berkeley DB section to not mention Boost and instead\r\n  explain that the packages version is too old.\r\n- Add a 'gmake install' at the end of the build section.\r\n\r\nTested on a fresh install of both OpenBSD 6.2 and the -current.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lionello": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12040", "title": "fix: add support for CORS headers and pre-flight request", "body": "This PR implements basic Cross-Origin Resource Sharing (CORS) support to the RPC server, as per the spec at https://www.w3.org/TR/cors/#resource-requests . The spec has been quoted verbatim in the source code for easier validation and maintenance of the code.\r\n\r\n* added support for OPTIONS HTTP method\r\n* interpret CORS request headers for pre-flight requests\r\n* set CORS response headers\r\n* two test cases: standard CORS request, and pre-flight request\r\n\r\nIn practice this PR allows the REST interface to be used directly from a browser. \r\n\r\nAll the existing restrictions to the REST interface still apply: IP subnet, port, username, password. For this reason this PR doesn't explicitly check the request's `Origin` with a whitelist.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ov3rlo4d": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12029", "title": "Build: Add a makefile target for Doxygen documentation", "body": "You can now build the doxygen documentation with `make docs` and clean it with `make clean-docs`.\r\n\r\nFixes: #11949", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "honzik666": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12007", "title": "[Doc] Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC", "body": "Hi,\r\n\r\nI have faced some confusion among our developers considering this being a fee rate. Would you consider including this tiny doc update?\r\n\r\nBest regards,\r\n\r\nJan Capek", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AkioNak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11988", "title": "Reduce redundant code of prevector and speed it up", "body": "In prevector.h, the code which like ```item_ptr(size())``` apears in the loop.\r\nBoth ```item_ptr()``` and ```size()``` judge whether values are held directly or\r\nindirectly, but in most cases it is sufficient to make that judgement\r\nonce outside the loop.\r\n\r\nThis PR adds 2 private function ```fill()``` which has the loop to initialize\r\nby specified value (or iterator of the other prevector's element),\r\nbut don't call ```item_ptr()``` in their loop.\r\nOther functions(```assign()```, ```constructor```, ```operator=()```, ```insert()```)\r\nthat has similar loop, call ```fill()``` instead of original loop.\r\n\r\nAlso, ```resize()``` was changed like ```fill()```, but it calls the default\r\nconstructor for that element each time.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hsjoberg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11937", "title": "Qt: Setting for deciding address type (legacy, p2sh or bech32) ", "body": "Related PR #11403, needs to be merged first. I'll rebase this PR to be up to date with #11403, and rebase it to master once it has been merged.\r\n\r\nExposes the `addresstype` parameter through the GUI.\r\nCurrently directly changes the `g_address_type` global variable instead of requiring an application restart, I'm not sure if this is good practice, but could easily be changed if needed.\r\n\r\nRadio buttons seem to be acting a bit different compared to other GUI elements, so that's why the code is somewhat different than for other settings.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "valentinewallace": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11915", "title": "Qt: Reflect correct dbcache value in options panel.", "body": "Fixes: #11788\r\nShows correct value according to command line override or value in bitcoin.conf.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vajdaz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11859", "title": "Qt: Fixing restore from system tray behaviour of main window", "body": "When restoring the main window from the system tray, it always was in minimized state (at least on Windows). This patch should fix this. The window should restore to the same state as it was  at the moment of minimizing it into the tray.\r\n\r\nMay be related to issue #8225 \r\n\r\nTo reproduce the bug do following under Windows:\r\n* In Options->Window enable \"Minimize to the tray instead of the taskbar\"\r\n* Optionally enable \"Minimize on close\", too\r\n* Minimize the main window\r\n* Klick on the tray icon (or right click on the tray icon and select Show/Hide)\r\n\r\nThe main window's taskbar icon appears, but the window itself is not restored to its original size.\r\n\r\nExpected behaviour: the window should appear.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jimpo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857", "title": "Build tx index in parallel with validation", "body": "This refactors the tx index code to be in it's own class and get built concurrently with validation code. The main benefit is decoupling and moving the txindex into a separate DB. The primary motivation is to lay the groundwork for other indexers that might be desired (such as the [compact filters](https://github.com/bitcoin/bips/pull/636)).\r\n\r\nThe basic idea is that the TxIndex spins up its own thread, which first syncs the txindex to the current block index, then once in sync the BlockConnected ValidationInterface hook writes new blocks. The real goal is to lay the groundwork for other indexers that might be desired (such as the [compact filters](https://github.com/bitcoin/bips/pull/636)).\r\n\r\n### DB changes\r\n\r\nAt the suggestion of some other developers, the txindex has been split out into a separate database. A data migration runs at startup on any nodes with a legacy txindex. Currently the migration blocks node initialization until complete.\r\n\r\n### Open questions\r\n\r\n- Should the migration of txindex data from the old DB to the new DB block in init or should it happen in a background thread? The downside to backgrounding it is that `getrawtransaction` would return an error message saying the txindex is syncing while the migration is running.\r\n\r\n### Impact\r\n\r\nIn a sample size n=1 test where I synced nodes from scratch, the average time [Index writing](https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L1903) was 3.36ms in master and 1.72ms in this branch. The average time between `UpdateTip` log lines for sequential blocks between 400,000 and IBD end on mainnet was 0.297204s in master and 0.286134s in this branch. Most likely this is just variance in IBD times, but I can try with some more trials if people want.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eklitzke": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11790", "title": "Add pixmaps for testnet and regtest", "body": "I am trying to build an RPM that ships .desktop files to run bitcoin-qt in testnet and regtest modes, respectively. This requires color shifted pixmaps to get the green/blue logos for testnet and regtest, respectively. These pixmaps are used by GNOME, KDE, and other Linux WMs to provide an actual application launcher icon.\r\n\r\nThis PR includes the pixmaps I generated, as well as the script I used to create the pixmaps. The script requires the `convert` command provided by GraphicsMagick. I think it makes sense to check these assets in for ease of distribution.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/132025389", "body": "My editor auto-trims whitespace; I'll undo this.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/132025389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "vii": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11785", "title": "Raise the open fd limit to the maximum allowed", "body": "As noted in https://github.com/bitcoin/bitcoin/issues/11368 if too many connections are made to the RPC interface, then other code will fail on open(2) syscalls with EMFILE. The result can be that the block database gets into an inconsistent state.\r\n\r\nOn many Linux distributions, by default, each process has 1024 file descriptors; these are shared between open files and network connections. The main init code attempts to apportion them between uses, but neglects to constrain the RPC layer: https://github.com/bitcoin/bitcoin/blob/master/src/init.cpp#L907\r\n\r\nUnfortunately, libevent does not allow a natural way to bound the number of file-descriptors used by the evhttp server. Therefore, we have to resort to requesting to stop new connections by disabling the accept listener in the epoll event structure. This is not a good way to control load, and more connections are accepted until the next epoll cycle is triggered, but it does stop an unbounded number of connections from being created, and does prevent a high number of connections to the RPC layer from damaging the rest of the system.\r\n\r\nTo avoid problems of a similar nature, the second patch additionally raises the rlimit of number of file descriptors as high as it can go.\r\n\r\nTo repro the database crash and validate the fix, the following node.js fragment:\r\n```\r\nvar uri = 'http://127.0.0.1:8332/rest/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f.json'\r\nfor (var message = 0; message < 10000; message++) {\r\n    request(uri)\r\n}\r\n```\r\n\r\nThe messages around the database crash due to open(2) failing due to too many open files\r\n \r\n> 2017-11-26 19:35:55 libevent: Error from accept() call: Too many open files\r\n> 2017-11-26 19:35:55 ERROR: WriteBlockToDisk: OpenBlockFile failed\r\n> 2017-11-26 19:35:55 libevent: timeout_next: event: 0x7f59001dcef0, in 15 seconds, 475453 useconds\r\n> 2017-11-26 19:35:55 *** Failed to write block\r\n> 2017-11-26 19:35:55 libevent: epoll_dispatch: epoll_wait reports 1\r\n> 2017-11-26 19:35:55 Error: Error: A fatal internal error occurred, see debug.log for details\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joemphilips": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11770", "title": "[REST] add a rest endpoint for estimatesmartfee, docs, and test", "body": "This could be useful if other clients want to use the core's fee estimation logic via REST.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "astanway": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11614", "title": "ZMQ: Add decodedtx topic for JSON tx publishing", "body": "- Adds a new ZMQ topic called `decodedtx` that uses `TxToUniv` to decode all newly arrived transaction into JSON and publish them over ZMQ.\r\n\r\n- Includes functional tests", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JeremyRubin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11523", "title": "[Refactor] CValidation State", "body": "This PR is a refactor only (i.e., any functional changes should be reported in review) which does the following:\r\n\r\n- Replace `state.DoS` with more descriptive calls where straightforward.  Rather than just call DoS or Invalid, different causes of invalidity have different functions. This makes it easier to quickly find all related causes of that class of error.\r\n- Convert all `nDoS` usage to an enum class with named levels (none 0, low 1, medium 10, elevated 20, high 50, and critical 100)\r\n- Use a custom enum class for reporting corruption to make it more clear where corruption occurs\r\n- return false directly from `CValidtationState` update call sites. state.DoS never returns true, so it makes it easier to see that the return value is not dependent on the call.\r\n- Don't pass `error()` as an argument to a function in DoS. error always returns false, and this is confusing for readers/reviewers.\r\n\r\n\r\nIf anyone is interested, there's an unsquashed version too, but I figured this is simple enough to review squashed. \r\n\r\nThe only code quality 'decrease' is that some reject codes move from `validation.h` to `consensus/validation.h`. This abstraction barrier violation is already present (the `CValidationState` class is expected to handle those reject codes appropriately) so I think that this change is a lesser evil.\r\n\r\n\r\n\r\n\r\nMotivation \r\n===\r\nI'm currently working on reworking the separation between reporting errors and DoS. As a first step in this process, I've cleaned up the interface without making any functional changes or major architecture changes. The resulting code should be easier to read and review changes to. The future plan to split `CValidationState` up into ~3 different subclasses (one to handle DoS, one to handle consensus correctness, and one to handle system errors) and then migrate the DoS completely to `net_processing.cpp`. This is a superior architecture because it better respects the boundaries between events on the network and faults in validation. I decided to start with this PR because I think it is an low hanging fruit immediate improvement independent of further modularization efforts.\r\n\r\n\r\n\r\nThanks to @ryanofsky and @TheBlueMatt for feedback on an earlier version of this PR.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10145", "title": "Separate Contextual checks and handling & switch on enum in net_processing.cpp ", "body": "edit 0: Updated to reflect updates mentioned in https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291632820\r\n\r\nThis PR separates ProcessMessage into two functions, ContextualProcessMessage and ~ProcessMessage~ _Process*Message_. This helps with readability, verifiability, and maintainability of the code.\r\n\r\nContextualProcessMessage generates a list of context dependent \"whitelists\", all of which must pass for the incoming message before a call to ProcessMessage may be made. If the whitelists fail, the code that follows should be identical to the previous behavior. The choice of whitelists over blacklists is because it is better to explicitly enable the behaviors desired, rather than to try to block the potential bad features (e.g., adding something unsafe and new won't be permitted in unstudied contexts). This design should be extensible for adding new features (~up to 64 netmsgs total~ unlimited network messages) as well as new contexts (easy to add new whitelists). There should be very little overhead to check these whitelists as it is all ~bitwise~ _bool array lookups_.\r\n\r\n~ProcessMessage now uses an enum to switch to~ _Dispatch is now done using a std::map lookup to get_ the appropriate handler, and is semi \"stateless\" _(the map is const)_. This makes it easier to verify the code and make dispatch more modular.\r\n\r\n\r\nI haven't benchmarked that the conversion from string->~enum~_std::pair<handler_t, whitelist_index>_ has any performance implication, negative or positive. In theory this code could be faster given fewer branch mispredictions due to the ~switch~_function pointer call_. Another PR could improve the lookup algorithm ~(trivially, inlining getAllNetMessageTypes might help the compiler a lot)~, but unless it is exotic it should be compatible with this design _by replacing the map with the desired scheme_. ~I didn't think there was something obviously faster than the linear lookup, because n is small.~ _A std::map lookup should be fairly fast, but perhaps a custom map could be faster._\r\n\r\n~The correctness of this code is dependent on NetMsgTypeEnum::tag and allNetMessageTypes having the same index order. It would be nice to verify this property at compile time, which should be possible with some recursive constexpr static_assert magic. The default return of ProcessNewMessage is now also false, because the last return is unreachable.~\r\n\r\nSee #9608 and https://github.com/theuni/bitcoin/commit/f1e4e281e3f1eb884f8010ac941c82752174bdbe for related work/alternatives.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9938", "title": "Lock-Free CheckQueue", "body": "TL;DR: This PR introduces a new hopefully easy-to-review Lock-Free CheckQueue algorithm. It's really fast!\r\n\r\n## Summary & Problem Statement\r\n\r\nIn Bitcoin-Qt 0.8, parallel script validation was introduced to improve the speed at which a block could be validated. The basic way in which this worked is that the master thread creates a task for every script of each input in a transaction being checked, and enqueues it to a work queue. After adding all tasks, the master also becomes a worker. Each worker thread claims a number of tasks from the queue (based on how many tasks are available and how many workers are available) and then runs each task, reporting if any errors were encountered. The core approach has not changed significantly since 0.8. The current approach is deficient for four main reasons which these changes address over 2 major commits (and 1 minor one introducing API change only, and 2 others covered in previous PRs).\r\n\r\n## Deficiencies in Current CheckQueue & Solutions\r\n\r\n### 1. Memory Instability: \r\nEach task must be moved to three different memory locations during its lifetime:\r\n1) the place where the master creates the task.\r\n2) the shared work queue.\r\n3) the worker-local work queue.\r\nThis also makes it difficult to write multithreaded code, because memory is modified more than once during validation.\r\n#### Solution:\r\nThe new algorithm uses stable memory: during block validation, enough memory for the worst case number of checks is allocated, and then tasks are directly placed and read out of that memory. Instead, each worker thread claims a pointer to the task. See 89a1f93\r\n### 2. Lock-Heavy algorithm: \r\nIn the original algorithm, each worker thread and the master contend for a single lock for enqueuing and dequeuing tasks. This is highly inefficient, each worker spends significant amount of time acquiring the lock to be able to dequeue a task, and the master spends time waiting to enqueue tasks. \r\n#### Solution:\r\nThe new algorithm is Lock-Free; during block validation no locks are taken for enqueuing or dequeuing tasks, only atomic memory is read or written. The use of a different piece of atomic memory for enqueuing and most dequeuing operations means that the master and worker threads infrequently interact during validation, meaning low contention. See 6e24aa8\r\n### 3. Sleeping during validation:\r\nIn the original algorithm, while waiting for a task to be enqueued by the master, each thread sleeps. This means that the OS\u2019s scheduler might choose to pre-empt the thread, thrashing it\u2019s cache with another process\u2019s memory. Furthermore, the latency for a wake up operation is high, as it requires the operating system to awaken a thread.\r\n#### Solution:\r\nthe new algorithm only sleeps before and after block validation, and busy-spins waiting for tasks until the master joins and there are no more tasks available (then sleeps). See 6e24aa8\r\n### 4. Arbitrary batch size selection: \r\nThe original batch size algorithm was selected as an experimental tuning for reasonable performance. If the batch size is too small, workers spend too much time getting a new task and not enough time running the tasks. The problem with any form of batching is that you may run into an imbalanced case where one worker has a batch (say of size five) and another worker has no tasks. In order to improve that, a batch size of one is optimal.\r\n#### Solution:\r\nThe new algorithm uses a batch size of one, so that all threads finish their work at as close to the same time as possible. See 6e24aa8.\r\n\r\n## Reviewing this PR\r\n\r\n### Code Organization\r\nIn writing this PR, I used many small-step iterations to get to the final design. While I am fairly confident that the commits in this PR should be easily reviewable, I have left the unsquashed version available here for anyone to reference\r\nhttps://github.com/JeremyRubin/bitcoin/tree/PR-lockfree-checkqueue-unsquashed\r\n\r\n### Testing\r\n\r\n#9497 introduces a fairly comprehensive set of tests, which these changes pass, as well as the earlier CheckQueue. See #9497 for details on the conditions tested.\r\n\r\n### Performance\r\n Test results are from a 2011 MacBook Pro 13\", 2.7 GHz Intel Core i7, 8 GB 1333 MHz DDR3.\r\n#### MicroBenchmark Performance (2.9 to 5.7X faster)\r\n#9498 introduced two new microbenchmarks for the CheckQueue. One which tests tasks which are empty, and another which tests tasks that do a little bit of work. These are microbenchmarks, so they need to be taken with a grain of salt.\r\n\r\n```\r\n#Before (7ff4a538a8682cdf02a4bcd6f15499c841001b73)\r\n#Benchmark,count,min,max,average,min_cycles,max_cycles,average_cycles\r\nCCheckQueueSpeed,896,0.001128047704697,0.001315370202065,0.001167648338846,3038807,3543440,3145483\r\nCCheckQueueSpeedPrevectorJob,320,0.002763845026493,0.003494121134281,0.003255434334278,7445473,9415834,8770003\r\n\r\n#After (6e24aa818be4b494fc1809a7ca3ee568e253deb6)\r\n#Benchmark,count,min,max,average,min_cycles,max_cycles,average_cycles\r\nCCheckQueueSpeed,5120,0.000198634807020,0.000226773321629,0.000202708039433,535092,610897,546067\r\nCCheckQueueSpeedPrevectorJob,896,0.000990316271782,0.001982234418392,0.001142452071820,2667680,5339862,3077721\r\n```\r\n\r\nSo we see for trivial jobs, it's about 5.7X faster, and for more involved jobs, about 2.9X faster. \r\n\r\n#### Test Performance (10X faster)\r\nI have observed very nice performance improvements when it comes to how long it takes to run the checkqueue_tests.\r\n\r\n```\r\n#before (08e4e1ea89427a2594415d0b37011692a5109c39)\r\n$ time ./test_bitcoin -t checkqueue_tests\r\n./test/test_bitcoin -t checkqueue_tests  12.39s user 58.12s system 116% cpu 1:00.31 total\r\n#after (6e24aa818be4b494fc1809a7ca3ee568e253deb6)\r\n$ time ./test_bitcoin -t checkqueue_tests\r\n./test/test_bitcoin -t checkqueue_tests  3.43s user 1.40s system 78% cpu 6.180 total\r\n```\r\nSo we see about a 10x performance improvement here.\r\n\r\n#### Cross Platform\r\nIt would be good to have reviewers comment with cross platform performance testing, as some of the lock free instructions may be slower on some platforms than others, and I don't have access to a large enough swath of machines. If you're reviewing performance, you may find the benchdiff.py tool I wrote useful https://github.com/JeremyRubin/bitcoin/commit/14aa19a35cbf0cff742f36a2c9ca00af162918ee.\r\n\r\n#### Real World/Simulated Numbers\r\n\r\nI don't have great real-world-node numbers yet for these changes, but I'll wait for others (e.g., @morcos) to report back on those.\r\n\r\n_edit: I have run a simulation on a month of block validation on a 4-core machine and seen no difference in aggregate performance. I'll poke around to see if the design can be tweaked a little bit for some advantage with fewer cores, but the more important simulations are for machines with >7 cores or multiple cpus, where the contention relieved by this PR becomes more significant._\r\n\r\n### Notes\r\n\r\nThis builds on #9497 (and #9495). There were a couple minor nits on those PR's outstanding, but I figure they can be addressed here later with a squashme (rather than having to squash those, get them re-reviewed, and then issue this PR). An earlier (and worse) attempt at a similar design can be seen here for comparison https://github.com/bitcoin/bitcoin/pull/8464.\r\n\r\n\r\n## Acknowledgements\r\n\r\nThanks to @morcos and @sdaftuar for supporting and helping in the development of this work, and to various others (@TheBlueMatt, @theuni, and others) for review in feedback at various stages of this project.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mess110": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11491", "title": "[gui] Add proxy icon in statusbar", "body": "Relates to #7734\r\n\r\n![image](https://user-images.githubusercontent.com/226170/33406640-8ea700c6-d576-11e7-9d69-fde9a696c219.png)\r\n\r\nPlease ignore the wrong alpha in the screenshot, I couldn't get the screenshot alpha right :(\r\n\r\nI plan to extend this feature in future PRs to include:\r\n\r\n- custom Tor icon\r\n- clickable icon which opens network settings\r\n\r\nOld proposals, dropped in favor of current\r\n\r\n![image](https://user-images.githubusercontent.com/226170/32688635-979ef690-c6dd-11e7-8869-49da7e0f0a11.png)\r\n![proxy_preview](https://user-images.githubusercontent.com/226170/31521305-99c43f22-afb1-11e7-9daf-d1ed6347daa8.png)\r\n![image](https://user-images.githubusercontent.com/226170/31680585-72706098-b37d-11e7-88ad-028c4c723f42.png)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pedrobranco": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11484", "title": "Optional update rescan option in importmulti RPC", "body": "This PR adds a new option `rescanUpdate` in `importmulti` RPC method to optionally do not rescan transactions that already exist in the wallet. \r\n\r\nThis is very important for large wallets when importing a single address with a old timestamp, which in this moment triggers a rescan to the whole wallet, replaying several already known wallet events (via notify-wallet). ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jl2012": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11423", "title": "[Policy] Make OP_CODESEPARATOR and FindAndDelete in non-segwit scripts non-std", "body": "This disables `OP_CODESEPARATOR` in non-segwit scripts (even in an unexecuted branch), and makes a positive `FindAndDelete` result invalid. This ensures that the `scriptCode` serialized in `SignatureHash` is always the same as the script passing to the `EvalScript`.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11398", "title": "Hardcode CSV and SEGWIT deployment", "body": "Similar to BIP90, this hardcode the deployment of CSV softfork, which has been active for over a year.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9443", "title": "Repairing the large-work fork warning system", "body": "The large-work fork warning system is broken under header first validation. This should fix it by storing all valid headers, even if the block contents or the previous blocks are invalid.\r\n\r\nIt also stores invalid-version-but-otherwise-valid headers. This allows a potential planned hardfork to be followed by the client (a simplified version of the hardfork bit and hardfork warning system I proposed: https://github.com/bitcoin/bips/pull/317 and https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-December/013332.html )", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8755", "title": "Implement excessive sighashing protection policy with tight sighash estimation", "body": "This implements a static estimation of sighash size for a transaction. A transaction with more than 90bytes of sighash per weight is non-standard. This is equivalent to 36MB for an 100kB non-segwit transaction, or 360MB for a block in the worst case. All transactions below 100kB with legitimate use of CHECK(MULTI)SIG should remain standard with this limit.\n\nThe estimation of sighash is based on the following 3 assumptions:\n a. OP_CODESEPARATOR and FindAndDelete are disabled by SCRIPT_VERIFY_CONST_SCRIPTCODE. This ensures that the scriptCode serialized in SignatureHash is always the same as the original script passing to the EvalScript. (part of this PR)\n b. SignatureHash is performed once only for each SIGHASH type. (#8654)\n c. Only 6 sighash types are allowed: ALL, NONE, SINGLE, and combinations with ANYONECANPAY (already enforced as policy with STRICTENC)\n\nTodo: unit tests\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8654", "title": "Reuse sighash computations across evaluation (rebase of #4562)", "body": "Rebase of #4562 by @sipa \n\nThe effect of doing this would not be very obvious in normal use, but could have >10x improvement for a O(n^2) hashing attack\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jimhashhq": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10922", "title": "New file-partition.md doc describing how to partition files to ensure fast initial blockchain synchronization..", "body": "After native build from source on Mac OS, my initial attempts to synchronize the blockchain were very very slow.  Upon finding [Issue Sync Taking Too Long](https://github.com/bitcoin/bitcoin/issues/10647), I found discussion by all and comments by @sipa in particular to be very useful, and reorganized $datadir folders on my local macOS build/install and summarized steps taken in file-partition.md doc.  These comments might find their audience more appropriately elsewhere, please feel free to suggest, thank you very much.\r\n-jimhash\r\nNote: This looks to be logged as issue: https://github.com/bitcoin/bitcoin/issues/10736", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "greenaddress": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10823", "title": "Allow all mempool txs to be replaced after a configurable timeout (default 6h)", "body": "This PR' aim is to improve user experience around stuck transactions without\r\naffecting users of zero conf transactions.\r\n\r\ntldr: Allow transaction replacement for transactions sitting in mempool for\r\nlonger than timeout (default 6h configurable) regardless of opt-in replacement\r\nflag.\r\n\r\nThis PR affects policy/relay only.\r\n\r\nStuck transactions have been a problem for users recently. While wallets\r\nare improving (opt in replacement, Child Pays For Parent, etc) there are some\r\ncases which find users with transactions stuck for days that can't be solved\r\neasily/reliably by wallet developers, especially when the user creates the\r\nstuck transaction with old software or for some reason disabled available\r\nfeatures countering stuck transactions.\r\n\r\nFor the purpose of the below I will ignore transactions created by the core\r\nwallet when talking about transaction expiration/eviction and focus on policy.\r\n\r\nBitcoin 0.12 introduced (or in a way re-introduced) opt-in transaction\r\nreplacement (BIP125), allowing people to more explicitly flag that their\r\ntransaction can be replaced (such that users of zero conf transactions can\r\nimmediately recognize them).\r\n\r\nAt the same time mempool limiting (configurable) was introduced, making the\r\nindividual mempool drop transactions at the bottom (low fee) when full.\r\n\r\nBoth before and after these changes any transaction in mempool would be\r\nautomatically evicted after 72 hours (configurable).\r\n\r\nRecently 0.14.0 increased the eviction from 72 hours to 2 weeks. These changes\r\nallows users of the system to aim for lower fees but at the same time makes it\r\nfrustrating for users that disable opt-in transaction replacement or that use\r\nsoftware that doesn't support it in first place to bump the fee at a later time\r\nor to revert the payment as they have to wait for a while or use ad-hoc\r\nsoftware.\r\n\r\nA number of miners will mine transactions regardless of opt-in flags (5-10%\r\nmaybe) and while core nodes won't propagate those transactions, a well\r\nconnected user can generally get replacement transactions mined within a\r\nreasonable amount of time without opt-in transaction replacement flags set.\r\n\r\nThis may be convenient for attackers or ad-hoc expert use but\r\nnot ideal for wallet developers, or at least until core merges full transaction\r\nreplacement because using this functionality would requires wallets to use\r\npreferential peering and/or forks of bitcoin core.\r\n\r\nUntil then a compromise solution that doesn't impact zero conf use and that\r\nimproves user experience would be to allow transactions to be replaced after\r\nsitting for a timeout in mempool (thus unconfirmed).\r\n\r\nThe timeout should be high enough that allows current use of zero conf and at\r\nthe same time allows same working day solution for users.\r\nI suggest a 6 hours timeout and to have it configurable for testing and ability\r\nfor user to change.\r\n\r\nThe changes continue to support disabling entirely transaction replacement\r\n(-mempoolreplacement) and introduces a new command line parameter\r\n(-mempoolreplacementtimeout) which allows to pass the number of seconds after\r\nwhich a transaction can be unconditionally replaced and setting this parameter\r\nto two weeks will keep the original behavior.\r\n\r\nIf you want to test the changes using @petertodd Replace-by-Fee tools build\r\ncore with this PR applied and wallet enabled and run with\r\n-mempoolreplacementtimeout=10 and use doublespend.py (with and without\r\n -b 1) from https://github.com/petertodd/replace-by-fee-tools", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "narula": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10708", "title": "Connecttrace fewer blocks", "body": "During a large reorg, the number of blocks kept in memory could grow to be very large.  This change makes it so that only the last 10 blocks are kept in memory, and if necessary, older blocks are re-read from disk.\r\n\r\nAlso introduce a parameter to FlushStateToDisk to ensure that we do not try to prune during the life of a ConnectTrace, because we might need to re-read the block from disk.\r\n\r\nAddresses https://github.com/bitcoin/bitcoin/issues/9027", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pavlosantoniou": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10619", "title": "[rpc]Avoid possibility of NULL pointer dereference in getblockchaininfo(...)", "body": "The variable `block` is initialized by the return value of Tip() which may be NULL.\r\nThe while loop condition takes this into account and checks for nullness before dereferencing.\r\nIf Tip() returns null, the while loop is never executed and the null pointer is dereferenced right after ( `block->nHeight`)\r\n\r\nWith this fix, there is a single check for nullness of `block`.\r\nA `JSONRPCError` is thrown in this case.\r\nAfter that, `block` is only assigned non-null values. \r\n\r\nThe code `block->nHeight` is never executed if block is NULL.\r\nThe while loop condition is also simplified.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "somdoron": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10554", "title": "ZMQ: add publishers for wallet transactions.", "body": "There is no way to only get real time notifications of transaction that affect the wallet.\r\nYou have to do that manually by enabling zmqrawtx and filter out transactions.\r\n\r\nI'm suggesting adding two new publisers, both for hash and raw wallet transactions.\r\n\r\nAlso topic will indicate if transaction came from mempool or block so developers can handle the transaction accordingly without a RPC round trip to bitcoind.\r\n\r\nTests and documentation are updated.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mchrostowski": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10470", "title": "Fix for listsinceblock not filtering conflicted transactions", "body": "Fix for issue #8752 which, if merged, replaces PR #8757 \r\n\r\nI prepped functional/listsinceblock.py for additional tests.\r\nWrote a test for the above issue.\r\nMade a fix to rpcwallet.cpp:listsinceblock(...).\r\n\r\nThe fix takes advantage of CMerkleTx::GetDepthInMainChain() returning a negative value for conflicted transactions. The negative value represents the depth of the transaction with which it is conflicted. Taking abs(...) of this lets us use the same logic for filtering un-conflicted transactions to filter the conflicted ones.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CodeShark": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10350", "title": "Added support for MSG_FILTERED_WITNESS_BLOCK messages.", "body": "After much deliberation and a few attempts at other approaches to provide a workable near-term sync mechanism for thin clients that require witness data, I decided to just go with the simplest short-term path with the least amount of complications expecting BIP37 to be completely replaced eventually - hopefully in the not-very-distant future.\r\n\r\nI believe the approach of filtering blocks on the client is a simpler and superior approach for most use cases than requiring the server to perform the filtering. I believe @Roasbeef has something written up for this that he's using for lnd. I would love to see that approach used in Bitcoin Core as well.\r\n\r\nBut given the good likelihood of nearterm SegWit activation on the Bitcoin mainnet, I believe this solution will suffice for all essential use cases of BIP37 for now - and I don't believe it's worth the effort to try to make more complex additions to BIP37 since it will eventually be entirely replaced.\r\n\r\nPeers can request MSG_FILTERED_WITNESS_BLOCK and will receive a merkleblock structure with transactions serialized with witnesses. The merkle proof for the witnesses is not supplied. This means that the client cannot verify that the witness data is what's actually in the block. However, the attack vectors here given the actual intended use cases seem extremely slim for several reasons:\r\n\r\n1) The witness data contains signatures which the client can still verify. Spoofing the witness would require supplying signatures that still redeem the output, meaning that only parties that can sign for the output could produce false witness data.\r\n\r\n2) In order to use BIP37 with any real degree of privacy and security, you need to connect to a trusted node. If this is your setup, adding merkle proofs for witnesses is an unnecessary complication.\r\n\r\n3) The foreseen intended use cases here are wallets that support multisignature scripts or scripts with multiple execution paths where you want to be able to check which signatures are provided or which execution path has been taken. In anticipated use cases, there is not much an attacker could gain from a transaction being signed in two different ways - and typically, the attacker would be easily identifiable.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2704969", "body": "I added this because of build issues I was having on Mountain Lion.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2704969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "JohnDolittle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10040", "title": "wallet: use headers chain for anti fee sniping", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "droark": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806", "title": "txoutsbyaddress index (take 3)", "body": "This is an attempt to revive PR #8660 (and, by extension, PR #5048). For now, this PR simply compiles without fresh warnings or errors. Once it is confirmed that no more conflicts exist, the remaining comments/requests from #8660 will be fully addressed.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EthanHeilman": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9037", "title": "net: Add test-before-evict discipline to addrman", "body": "This change implement countermeasures 3 (test-before-evict) suggested in our paper: [\"Eclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network\"](http://cs-people.bu.edu/heilman/eclipse/).\n# Design:\n\nA collision occurs when an address, addr1, is being moved to the tried table from the new table, but maps to a position in the tried table which already contains an address (addr2). The current behavior is that addr1 would evict addr2 from the tried table.\n\nThis change ensures that during a collision, addr1 is not inserted into tried but instead inserted into a buffer (setTriedCollisions). The to-be-evicted address, addr2, is then tested by [a feeler connection](https://github.com/bitcoin/bitcoin/pull/8282). If addr2 is found to be online, we remove addr1 from the buffer and addr2 is not evicted, on the other hand if addr2 is found be offline it is replaced by addr1.\n\nAn additional small advantage of this change is that, as no more than ten addresses can be in the test buffer at once, and addresses are only cleared one at a time from the test buffer (at 2 minute intervals), thus an attacker is forced to wait at least two minutes to insert a new address into tried after filling up the test buffer. This rate limits an attacker attempting to launch an eclipse attack.\n# Risk mitigation:\n- To prevent this functionality from being used as a DoS vector, we limit the number of addresses which are to be tested to ten. If we have more than ten addresses to test, we drop new addresses being added to tried if they would evict an address. Since the feeler thread only creates one new connection every 2 minutes the additional network overhead is limited.\n- An address in tried gains immunity from tests for 4 hours after it has been tested or successfully connected to.\n# Tests:\n\nThis change includes additional addrman unittests which test this behavior.\n\nI ran an instance of this change with a much smaller tried table (2 buckets of 64 addresses) so that collisions were much more likely and observed evictions.\n\n```\n2016-10-27 07:20:26 Swapping 208.12.64.252:8333 for 68.62.95.247:8333 in tried table\n2016-10-27 07:20:26 Moving 208.12.64.252:8333 to tried\n```\n\nI documented tests we ran against similar earlier versions of this change in #6355.\n# Security Benefit\n\nThis is was originally posted in PR #8282 see [this comment for full details](https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-237255215).\n\nTo determine the security benefit of these larger numbers of IPs in the tried table I modeled the attack presented in [Eclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network](https://eprint.iacr.org/2015/263).\n\n![attackergraph40000-10-1000short-line](https://cloud.githubusercontent.com/assets/274814/17366828/372af458-595b-11e6-81e5-2c9f97282305.png)\n\n**Default node:** 595 attacker IPs for ~50% attack success.\n**Default node + test-before-evict:** 620 attacker IPs for ~50% attack success.\n**Feeler node:** 5540 attacker IPs for ~50% attack success.\n**Feeler node + test-before-evict:** 8600 attacker IPs for ~50% attack success.\n\nThe node running feeler connections has 10 times as many online IP addresses in its tried table making an attack 10 times harder (i.e. requiring the an attacker require 10 times as many IP addresses in different /16s). Adding test-before-evict increases resistance of the node by an additional 3000 attacker IP addresses. \n\nBelow I graph the attack over even greater attacker resources (i.e. more attacker controled IP addresses). Note that test-before-evict maintains some security far longer even against an attacker with 50,000 IPs. If this node had a larger tried table test-before-evict could greatly boost a nodes resistance to eclipse attacks.\n\n![attacker graph long view](https://cloud.githubusercontent.com/assets/274814/17367108/96f46d64-595c-11e6-91cd-edba160598e7.png)\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "afk11": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8751", "title": "RPC: Add parameter to addmultisigaddress / createmultisig to sort public keys", "body": "I figured it may be useful for these RPC methods to allow sorting public keys (BIP67) The PR adds a new boolean to createmultisig / addmultisigaddress at the end of their parameter list. By default, this is set to false to avoid a BC break. \n\nI added a RPC test file `sort_multisig.py` for testing createmultisig. Tests for addmultisigaddress went in `wallet-accounts.py`.\n\nNote: Code to check whether sorting is desired had to be replicated in both RPC methods (not in _createmultisig_redeemScript) because addmultisigaddress already takes a parameter at position 3.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pstratem": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8695", "title": "[Net] Retry feeler connection if OpenNetworkConnection fails in under 1ms.", "body": "Avoids issues with feelers to ip space we don't know how to route.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cdecker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388", "body": "We already have generic keystores on Linux machines, why not adapt Bitcoin to use them and provide a really simple one for systems that do not provide their own?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421", "body": "Just delete all the block data and redownload the block chain.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454", "body": "Seems to me as trying to fix an intermediate problem, I'd much rather see a patch adding the ability to specify a listen port. But the patch to disable IRC bootstrapping seems nice.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743634", "body": "Well we do have 4 upvotes, so it is something that has some interest. Generally we should distinguish better between the Protocol and Satoshis client.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744041", "body": "It's not really something you can \"patch\", it's all about not increasing the version number in the version message if the update does not break backward compatibility. instead of using the version number use the version string to identify the client and client version.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744074", "body": "I'll look into it ^^\nHow should I submit it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760089", "body": "Ok, submitted the pull request. Please review :D It's not much but this is more of a design change than a code change ^^\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767223", "body": "And what would the motivation be? It would allow others to be compatible with the mainline client, without having to create a new version each time the mainline is updated, just to ensure compatibility? It won't be the last change conflicting with Satoshi's original intents.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767224", "body": "Comments moved to pull request.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863971", "body": "Just to respond to the criticism on the patch. I myself found it strange to ask for a patch for a thing that isn't solvable with a patch, but I was asked to do it. It is not difficult to add protocol extensibility, as discussed on the Forum, it just needs either a new message (capabilities?) or an extension to the version message (variable list of strings each denoting capability support). But it's not the goal of this pull request. This one is just to say \"please, please don't increment the proto version with each client release\", if that point comes through I don't care what happens to this pull request.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864193", "body": "True, I had forgotten about the nServices bitmask, my bad. I have a few criticisms about that too, but I'll create a new Forum thread for them, since this is only to decouple protocol versioning from client versioning. Estensibility should be left for a broader discussion.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864497", "body": "Ok, I think we aren't thinking about the same kind of extensibility. My goal basically is to have a minimal protocol that is standardized (let's say the current protocol), it is simple and easy to understand. The protocol version should indicate that if a client supports the protocol version it'll understand the messages that are going to be sent. Where up until now the protocol version was being incremented every time a new version of the client was released, and you'd have to reverse engineer all changes (if any) from the main client. Extensibility doesn't really come into play at this point (not as I think of it anyway). Extensibility is another dimension where, while maintaining the basic protocol as is to avoid forcing others to upgrade, additional functionality can be built on top.\n\nI just want to make sure that alternative clients don't have to release a dummy update each time the main client updates just to say \"yeah, well nothing changed in the protocol, we still support it\".\n\nChanges to the protocol need to be explicit, rare and publicly announced. Most changes can be implemented by adding simple extensions, without breaking compatibility with alternative clients.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864558", "body": "Anyway, to get back on track with this pull request: jgarzik, if I understand you correctly you agree with my point, right? Keeping the protocol version distinct from the client version allows us to differentiate the implementations and thus grow and secure the network. I don't care if this pull request makes it into the main trunk, as long as we alternative developers get a commitment from the main client developers that they won't increment the version number if no protocol changes have been made (or even better if breaking changes are reduced to a bare minimum).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864657", "body": "Sorry you feel that way. I see that there is no point in continuing this conversation, consider the pull request withdrawn. Although I maintain that my points are still valid. You were the one who brought up extensibility, whereas I maintain that protocol evolution is different than protocol extension.\n\nThe need to separate protocol development from client development is felt by many of us, and if I got that point through, it is a huge victory.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gavinandresen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408", "body": "See my python bitcointools for code that can read and write the key/value pairs in wallet.dat (fixwallet.py reads the wallet and writes out a new wallet, leaving out any keys that seem to be mis-formatted).\n\nMerging wallets is hard because you have to teach bitcoin to re-scan the block chain for transactions to or from keys you just imported.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435", "body": "Is this useful at all if there is no matching import?\n(export is pretty easy, the import is what is hard...)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002", "body": "See the blockheaders feature branch here for initial work on this.  Notes from Satoshi:\n\nCBlockIndex contains all the information of the block header, so to operate with headers only, I just maintain the CBlockIndex structure as usual.  The nFile/nBlockPos are null, since the full block is not recorded on disk.\n\nThe code to gracefully switch between client-mode on/off without deleting blk*.dat in between is not implemented yet.  It would mostly be a matter of having non-client LoadBlockIndex ignore block index entries with null block pos.  That would make it re-download those as full blocks.  Switching back to client-mode is no problem, it doesn't mind if the full blocks are there.\n\nIf the initial block download becomes too long, we'll want client mode as an option so new users can get running quickly.  With graceful switch-off of client mode, they can later turn off client mode and have it download the full blocks if they want to start generating.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035", "body": "Small, correct, if it breaks on Windows I'll be extremely surprised (and will back it out).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871", "body": "Could you post a [PULL REQUEST] about this on the Dev&Tech forum: http://www.bitcoin.org/smf/index.php?board=6.0\n\nUntil we figure out where we want to discuss pull requests (on the forum or maybe directly here), I figure it is best to do both.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251", "body": "I'm a little worried that if this feature gets popular the IRC channel and the 'addr' messages flying across the network might be overwhelmed with the IP addresses of clients that aren't listening.  New nodes joining might then spend a long time trying and failing to connect.\n\nI'd be more comfortable if the patch also taught the client NOT to advertise its own IP:port on the IRC channel or via 'addr' broadcasts.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279", "body": "minconf=N only credits coins received that have N or more confirmations.\n\nIt still debits all sent coins, regardless of how many confirmations they have.\n\nThe reasoning is:  you can't be 100% sure that coins you are receiving are single-spent.  But you CAN be 100% sure that YOU are not trying to double-spend coins.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074", "body": "What happened:\n\nSend 50.006... was rounded to 50.01 (amounts get rounded to two decimals).  Causing insufficient funds message.\n\nSend 50  ran into special-case code for micropayments; if making change would result in less than 0.01 coins (which would trigger the you-must-pay-a-0.01-fee transaction spam prevention code), then the sub-cent amount is sent along as a transaction fee.\n\nAt the very least, the RPC code should put the amount being sent in the insufficient funds message.\n\nDoing something more with sub-cent transactions needs more careful thought...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512", "body": "Discussion here: http://www.bitcoin.org/smf/index.php?topic=2647.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519", "body": "I'm proposing a simpler api; see http://www.bitcoin.org/smf/index.php?topic=2647.0\n\nI believe you can build what you want on top of the lower-level \"tell me when there are new blocks and transactions\".\n\nFor example, note the transaction ID when you get notified of a new transaction.  Then when you get notified of new blocks, call gettransaction <txid> to get the status of transactions that had fewer than $minconf confirmations.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336", "body": "You could replace polling every N minutes with a monitorblocks callback that did what you are doing now-- because you know that transactions won't get more confirmations unless new blocks have been received.  You should end up with more accurate results (you'll update as soon as bitcoind sees a new block) with less polling.\n\nYou would probably ignore the transactions in the block, unless you want to do something with 1-confirmation transactions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975", "body": "I submitted a pull request today to add \"details\" to gettransaction output.  You'll get one or more objects that give category (send or receive), account, and address.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439", "body": "Before I lose them:\n  http://pastebin.com/evGiRVw2\nand\n  http://pastebin.com/wxCnw5SF\n... are listaccounts and gettransactions '*' output.  getbalance returns 850.05, sum(accounts) is 853.05...  I'll be debugging this more tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666759", "body": "Thanks, mike, it looks like that is the source of the bug.  There is 3BTC in \"change\" that is being miscounted, because the 'change' address was assigned to an account (using setaccount <change address> \"\", I assume).\n\nThe good news is that unless you dig out change addresses from block explorer this bug won't affect you.  It still needs fixing, though...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668912", "body": "Lets continue this discussion on the forums: http://www.bitcoin.org/smf/index.php?topic=2672.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673548", "body": "You were right, I was wrong-- listaccounts N was completely broken.\n\nI've got a PULL request that fixes it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674754", "body": "After looking more at this, I'm puzzled.  The 3BTC transaction is definitely weird, but I don't think that is the cause-- the accounts code thinks it is a multi-send-to-self, and it doesn't affect the account's total balance (it is +400 in, -400 out).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676231", "body": "I asked Satoshi, and he has a very good theory and what happened:\n\nWallet clone \"A\" spends some coins.\n\nWallet clone \"B\" (this is the one I'm debugging) comes online, runs ReacceptWalletTransactions, sees the spend, and marks the previous transaction (where it got the coins) as spent.  HOWEVER, it does NOT add the spend transaction to the wallet.  That is the bug, it should.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676234", "body": "This may be caused by the same bug as the \"sum(accounts) != getbalance\" bug.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676428", "body": "Pull request is: https://github.com/bitcoin/bitcoin/issues#issue/27\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680612", "body": "Returning from a CRITICAL_BLOCK is OK.  CRITICAL_BLOCK uses local C++ objects to do the locking, which are guaranteed to be properly destructed no matter how the block is exited.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693764", "body": "Fixed: https://github.com/bitcoin/bitcoin/commit/1aefe491fb1b1311973c9561493d201c7504a120\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693781", "body": "Fixed.\nhttps://github.com/bitcoin/bitcoin/commit/1d23c7436164faa0b1822acf5ce9507bf6ff257a\nhttps://github.com/bitcoin/bitcoin/commit/d9574c2f14028297ad5121695a0c10e517bf638e\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694043", "body": "This is related the the other bug.\nThey are both symptoms of having a wallet with private keys in it that the bitcoin client thinks haven't been used yet, but that actually _were_ used.\n\nI just committed a new command-line flag:  -rescan  ... that scans all previous transactions, looking for any that match private keys in the wallet.  Running the test wallet with -rescan Does the Right Thing:\n\n```\nlisttransactions '*'\n[\n{\n    \"account\" : \"\",\n    \"address\" : \"1CuUymfzaqgLm3c9YoN9fUK7Uyk6ZiGipG\",\n    \"category\" : \"receive\",\n    \"amount\" : 0.03000000,\n    \"confirmations\" : 1795,\n    \"txid\" : \"04299797da34d01ea8f000be656535cea16ca0aa1f385f416b1c3f11811d1f6f\",\n    \"time\" : 1294647952\n},\n{\n    \"account\" : \"\",\n    \"address\" : \"1CuUymfzaqgLm3c9YoN9fUK7Uyk6ZiGipG\",\n    \"category\" : \"receive\",\n    \"amount\" : 0.02000000,\n    \"confirmations\" : 1795,\n    \"txid\" : \"585cb6493aa6b67364d6816062248d51b33738a28675ac70f4eb2daaad1433d0\",\n    \"time\" : 1294647952\n},\n{\n    \"account\" : \"\",\n    \"address\" : \"16W7FAZ8tcX1gDLgDupfAKfpGLYd7XcPRe\",\n    \"category\" : \"send\",\n    \"amount\" : -0.05000000,\n    \"fee\" : 0.00000000,\n    \"confirmations\" : 1792,\n    \"txid\" : \"3d1c7534d993629bb43c9676abb9250f01bd006bf272f39337a1cb29b1eb9d37\",\n    \"time\" : 1294649139\n}\n]\n```\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694049", "body": "Thanks for the fix.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696234", "body": "Not enough support for this right now... and there are SSL issues, too...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/718248", "body": "The target is 'bitcoind'; I added comments to build-unix.txt about that.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/718248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719158", "body": "From http://www.bitcoin.org/smf/index.php?topic=2698.msg36793#msg36793\n\nFirst, unless I'm reading the bdb docs wrong, you specify a password at database creation time.  And then can't change it.\n\nSo, at the very least, somebody would have to write code that (safely) rewrote wallet.dat when you set or unset or changed the password.\n\nSecond, encrypting everything in wallet.dat means you'd have to enter your wallet password as soon as you started bitcoin (because user preference are stored in there right now), when ideally you should only enter the password as you're sending coins.\n\nAnd third, there are all sorts of usability issues with passwords.  Users forget their passwords.  They mis-type them.  I wouldn't be terribly surprised if doing the simple thing and just encrypting the whole wallet with one password resulted in more lost bitcoins due to forgotten passwords than wallets stolen by trojans.\n\nI think creating a safe, useful wallet protection feature isn't easy, and there a lot of wrong ways to do it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719177", "body": "Gnonthgol: if you're motivated to solve this right, please jump onto the forums and work out a good approach; I think this is a very important feature to get right.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722969", "body": "I jotted down some thoughts here:\n https://gist.github.com/803170\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724712", "body": "Nice!  I'd like to make this part of a set of changes for the 0.3.21 release to deal with sub-bitcent amounts consistently across all the RPC methods and in the GUI.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726926", "body": "Did I get the difficulty adjustment backwards? D'oh!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726938", "body": "Why 21 hours:  it is exactly 1/16th the 2 weeks/2016 blocks of the main chain, and is more than 120 blocks (seemed like a good idea to allow blocks to mature and get spent before difficulty adjusts).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736135", "body": "There's no consensus on changing the difficulty rules, so I'm closing this and will pull davouts just-change-the-genesis-block patch.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736228", "body": "Lets pull this for the 0.3.21 release-- I want to get 0.3.20 out, and don't want to pull anything that has even a slight chance of causing problems.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746469", "body": "Rewriting user-created config files is always error-prone and tricky (you don't want to overwrite a user's carefully crafted bitcoin.conf).\n\nAnd it seems like the desire to do this is really some other feature in disguise (like backing up and encrypting private keys).\n\nI do like the idea of RPC to change bitcoin settings.  Although some of the settings are only currently set-able on startup.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771725", "body": "RE: add address:  Adding a sending address to your address book you have to paste the address that you're sending to.\n\nIf you click on the Receiving address tab you don't specify the new address, bitcoin generates it for you.\n\nOrganizing would be a new feature.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/772743", "body": "What version of bitcoin ?   I compiled the windows 0.3.20 bitcoin with boost 1.45.0...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/772743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/772753", "body": "0.3.20 listtransactions returns time (unix timestamp).\n\nGenerated blocks during maturation is a good idea-- maybe reported as category \"generate\" with a negative value for number of confirmations (e.g. newly generated == -100  ... or would it be -99... anwyay)\n\nEvery transaction has a unique txid.\nOne transaction may put multiple entries in the listtransactions output, however...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/772753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780320", "body": "Tested by re-downloading entire block chain with -maxreceivebuffer=500 -maxsendbuffer=100  (no issues), after trying with even smaller limits (there were issues-- disconnections due to running out of receivebuffer space-- but no crashes, it handled the disconnect then find another peer gracefully).\n\nTest and regular faucets are now running with this patch.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788315", "body": "Please try 0.3.20.01 (binaries at SourceForge, replaces the first candidate 0.3.20 release).  It is built with the mingw toolchain, we I hope fixes these issues.\nLet us know if it works for you.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788325", "body": "Done; thanks m0mchil.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788326", "body": "More info:  m0mchil couldn't compile boost 1.45 with mingw, he downgraded to 1.43 for the windows bitcoin 0.3.20.01 release.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788340", "body": "Need to be very careful about accidentally corrupting the wallet.dat file by pointing two running bitcoins at the same wallet.dat file.  Berkeley db doesn't do any automatic multi-process locking.\n\nRight now, a lock file is created in the -datadir Bitcoin is using, but if we allow the wallet to be anywhere in the filesystem that protection wouldn't work.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788350", "body": "The account commands manipulate the same internal data structures as the GUI's address book.\n\ne.g. listaccounts  shows you all the address book names.  setaccount  assigns a bitcoin address to an account (== address book name), etc.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788353", "body": "More data: there have been a couple more reports of bitcoind crashing under heavy RPC load, although nobody has been able to reproduce.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799174", "body": "Rendering issues went away compiling with the mingw toolchain.\n\nGo figure.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799178", "body": "Rendering issues were resolved by building with the mingw toolchain.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799236", "body": "Good Idea.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801526", "body": "The error message needs fixing-- having the bitcoin.conf file in the main datadir (not in the testnet subdir) is the way it is supposed to work.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801726", "body": "Right, you need to specify a different -datadir.\n\nChanging the default -rpcport if running -testnet is a change that should be made, so you CAN just run bitcoin -testnet without messing with other confusing options.\n\nSo proposed fix would be:\n- change error message\n- change default -testnet rpcport\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803266", "body": "Forum thread to discuss:  http://www.bitcoin.org/smf/index.php?topic=3786.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803274", "body": "See: https://github.com/bitcoin/bitcoin/pull/79\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820806", "body": "Looks good at first glance.  Can we brainstorm test cases that we think might cause problems?\n\nE.g. Wallet with (only) available transactions of +1  +2.0001 +3  :  Send 6 bitcoins; what happens?\n\nSame wallet, send 2 (I think you'll get a 2.0001+1 spend with 1.0001 change)...\n\nAny other tricky edge cases?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822490", "body": "Lets discuss on the forum:  http://www.bitcoin.org/smf/index.php?topic=4009.msg57469\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828751", "body": "Danger! Danger!\n\nThe close and re-open will cause core dump because it's not thread-safe.  I went down that rabbit-hole, and it's not pretty (don't be tempted to just wrap the printf in a CRITICAL_SECTION, because that causes issues during shutdown).\n\nI like the timestamping, though.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828754", "body": "I pulled the more generic rounding patch.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837716", "body": "Good idea.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837930", "body": "CBlockLocator Does The Right Thing.  Good idea to test that, though:\n- Test wallet.dat points to orphan block that IS in blkindex\n  (should rescan starting at block split)\n- Test wallet.dat points to orphan block that IS NOT in blkindex\n  (should do full rescan)\n\nNow we just need a good way of forcing chain splits / orphan blocks on the testnet...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837957", "body": "See https://github.com/bitcoin/bitcoin/pull/95\nCherry-picked and released as bitcoin v0.3.20.2\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840168", "body": "I like the idea of popping up a dialog box the first time they turn on generation, explaining what their chances of generating any coins is.\n\nAlthough the right time to do that might be when 'headers only' mode is implemented, because the first time you turn on generate the client will have to download the whole block chain, and it would be nice to explain that, too.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840712", "body": "I don't see how this erodes anonymity if you don't use it.\n\nAnd being able to prove that you own a given bitcoin address can be used for all sorts of interesting things for cases where you specifically do NOT want to be anonymous.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840714", "body": "See my bitcointools tree for a (python) tool that dumps out the information in the wallet in a human-readable form.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843692", "body": "I agree this isn't necessary and encourages anti-social behavior (transmitting fee-less transactions and hoping that either you'll generate a block to include them or somebody else will accept them).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845440", "body": "Forum discussion at:  http://www.bitcoin.org/smf/index.php?topic=4254.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/854099", "body": "jhyslop: bitcoind crashing/hanging reports were from other people (slush was one, I believe).\n\nI still haven't seen it, running 3 or 4 instances of bitcoind on 2 or 3 different machines (Mac and Debian Linux).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/854099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862393", "body": "Is github broken?  The diff/commit looks completely messed up to me...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862497", "body": "Cool!  Thanks for being persistent.\n\nTwo comments:\n\nThe appropriate copyright notice should be added to uiproject.fbp and uibase.cpp; I think building the next release with UpNP support compiled in would be a good idea.\n\nHaving both -noupnp and -upnp options (and tri-state USE_UPNP) is confusing and will cause problems if bitcoin.conf files are copied around.  I'd suggest something like (assuming we want upnp on by default for Windows):\n\n```\nbool fUseUpnp = GetBoolArg(\"-upnp\");\n#ifdef _WINDOWS\nif (mapArgs.count(\"-upnp\") == 0)\n    fUseUpnp = true;  // upnp on if not explicitly turned off\n#endif\n```\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862722", "body": "Please start a discussion on the forums about whether or not UpNP should be on or off by default; I think you will find strong feelings that it should be off by default among Linux folks.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/870132", "body": "Deployed clients behave just fine-- they just wait for the connecting node to send a version message first, instead of both ends sending a version message right away.\n\nI'm going to run this (along with several other patches) on the Faucet machines, then plan on pulling it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/870132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/915417", "body": "The receiver address is a hash of the public key; you don't see the full public key until the transaction is spent.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/915417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922752", "body": "The built-in miner is darn useful for -testnet (and testnet-in-a-box) testing.\n\nBefore removing it or hiding it in the client, content on the wiki and website needs to be updated, too.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922780", "body": "My first reaction:  this violates the KISS principle.\nMy second reaction:  if the consensus is that more complicated logging is needed, then why not use boost::log?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923431", "body": "Can I remove commits from a pull request?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923937", "body": "Forum discussion here:\n  http://www.bitcoin.org/smf/index.php?topic=4828.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928245", "body": "FYI:  stress-testing bitcoind with this patch using a testnet-in-a-box I managed to hang one RPC server thread.  What I done did:\n\nIn one shell window:\nfor i in 1 2 3 4 5 6 7 8 9 10 11; do ~/src/integration_btc/bitcoind -datadir=/Users/gavin/testnet-box/2 sendfrom \"\" $(~/src/integration_btc/bitcoind -datadir=/Users/gavin/testnet-box/1 getaccountaddress \"\")  $i; done\n\nAnd in the other:\nfor i in 1 2 3 4 5 6 7 8 9 10 11; do ~/src/integration_btc/bitcoind -datadir=/Users/gavin/testnet-box/1 sendfrom \"\" $(~/src/integration_btc/bitcoind -datadir=/Users/gavin/testnet-box/2 getaccountaddress \"\") $i; done\n\nI'm working on modifying the CRITICAL_BLOCK macros to get more information about what is locked, when...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928505", "body": "Update:  yeah, definitely CRITICAL_BLOCK deadlock.  Reproduced  with a hacked CCritcalSection that spits out its name as it waits/locks/unlocks, and hung process is waiting on sequence cs_main / cs_mapWallet, and I see lots of the other order.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928637", "body": "Definitely missed a few-- see https://gist.github.com/891544\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/961888", "body": "I combined the two commits and merged into master.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/961888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/961905", "body": "BlueMatt is right-- #ifndef **WXMSW** would be more consistent with the rest of the code.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/961905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/962237", "body": "I pulled this and ran it against a testnet-in-a-box, and there's something seriously wrong-- look at this getinfo output:\n{\n    \"version\" : 32100,\n    \"balance\" : 103514.73287496,\n    \"blocks\" : 1479,\n    \"connections\" : 1,\n    \"proxy\" : \"\",\n    \"generate\" : false,\n    \"genproclimit\" : 3,\n    \"difficulty\" : 1.00000000,\n    \"hashespersec\" : 0,\n    \"testnet\" : true,\n    \"keypoololdest\" : 1302017341,\n    \"paytxfee\" : 0.00000000,\n    \"errors\" : \"\"\n}\n\nbalance is greater than 50*blocks, which should be impossible!\n\nI uploaded the pre-conversion -testnet wallet and block index to: \n   http://www.skypaint.com/bitcoin/spentpertxout.zip\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/962237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/966022", "body": "FYI:  Wallet is from a 3-node \"testnet-in-a-box\" that I ran a bunch of ClearCoin escrow unit tests against.  Typical use was  Sending wallet -> escrow wallet -> receiver wallet, then between tests send coins from receiver wallet back to sending wallet.  Sending wallet is the one I posted.\n\nI haven't tried the much simpler test of just taking a testnet-in-a-box wallet and running it against your patch; that might be a good place to start (see if balance is correct to start).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/966022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/367326", "body": "That'll teach me to pull without sanity-check compiling first...\nThis breaks the GUI build:  CMainFrame::OnMenuOptionsGenerate(wxCommandEvent&)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/367326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562179", "body": "I think the right place for a CRITICAL_BLOCK is SetCrypted()...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563002", "body": "See line 2163 of rpc.cpp.  The cs_main and cs_wallet mutex are grabbed before making RPC calls.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563024", "body": "Yes, it is overkill, but until we have a sane locking scheme I'm not\ngoing to spend the time required analyzing every new RPC method (or\nevery change to the existing RPC methods) to figure out whether\nthey're locking the right stuff in the right order. And I don't trust\nthat anybody else will, either.\n## \n## \n\nGavin Andresen\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/563024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564265", "body": "I commented in the issue Matt opened:\n\nCan somebody double-check to see if I'm reading the code correctly?\n\nLooks like both BitcoinMiner and getwork() call IncrementExtraNonce()\nto create unique coinbase transactions, so I don't think this is an\nissue.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/564265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578381", "body": "Could... although as 0.4 rolls out there will be more and more non-0.3 nodes to talk to.\nThis change is because downloading from a 0.3.20-0.0.23 client is broken (you'll get disconnected repeatedly).\n\nIf it becomes a big problem, we could ask the broken versions to upgrade using the alert mechanism.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/693423", "body": "Yup, I probably should've cherry-picked instead of merged Patrick's\nmacdeployqt changes, git did something funky.\n\nAll is well, though-- git diff with the pre-merge commit (434a48) to\nsee the differences merged.\n## \n## \n\nGavin Andresen\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/693423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1203018", "body": "FYI: you missed a call to openBitcoinAction that was inside an #ifdef MAC_OSX  and broke the OSX build. Not a big deal, but if you can search for methods that you remove next time for used-on-other-platforms cases it'd be appreciated.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1203018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1649879", "body": "Good idea.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1649879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1902828", "body": "Because it is harmless, and might prevent harm if we ever have C source code in the tree.\n\n(I think the C compiler is actually used, but only the preprocessor to do something I don't understand with .moc files or something)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1902828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3039496", "body": "They're definitely not OSX. I don't know if the mingw linker supports them-- can you find out please?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3039496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "davout": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966", "body": "Deletion is not necessary,\ndoesn't it already happen anyway when wallet is replaced ?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969", "body": "Yes, I forgot that\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250", "body": "File should be human-readable\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251", "body": "Duplicate of #2\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117", "body": "Wow, I just sent 50 BTC, and now the client is reporting zero balance...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668598", "body": "I think this needs to be explicitly allowed from the bitcoin client side, otherwise any website could start quietly bruteforcing the username/password out of a client.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723290", "body": "Duplicate of #51\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724848", "body": "Would it be possible to pull it in for 0.3.20 ?\nI'd really like that in order to keep the double balance check that occurs on BC before any transfer.\n\nAlso is there a way to manually fiddle with account balances other than moving bitcoins around until achievement of desired accounts statuses ?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521", "body": "I had originally made a forum post, with the patch attached, but the forum decided to eat it due to (invalid attachment type .patch). Then I found out about this feature :) But I'll make a new post and simply link here.\n\nValid issue about the IRC channel. I had considered that, and was under the impression that this if clause in net.cpp handled it (as in case of proxy or -connect, also no IRC connection should be made):\n\n```\nif (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n```\n\nSeems I was wrong.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522", "body": "Ah, I see the new commit (don't connect to IRC on -nolisten) was automatically added here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766047", "body": "May I suggest operating Bitcoin from the command line? The documentation on this topic is somewhat sparse, but a reasonable summary may be obtained by typing 'bitcoin help' or at https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/774815", "body": "I'm seeing something that's probably related. When Bitcoin is underneath a window, and then brought to the top, the background of the tool strip appears to not get repainted. See this screenshot: http://i.imgur.com/uSkud.png\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/774815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/804745", "body": "Suppose we encrypt keys with the public key of a separate private key. That private key is encrypted with a symmetric algorithm, whose key is derived from the passphrase. I believe this is how GnuPG works. When we store this encrypted key in the wallet, we also store a reference to the associated private key. (Or, perhaps have it elsewhere on the file system... usb drive? smart card? keyring?) With this functionality, we could prompt the user for a password once and decrypt multiple keys. It also means that a wallet could be separated into virtual partitions with different encryption keys. I think it would allow a smooth transition, but would it be backwards compatible?[1]\n\nHere's the way I imagine interacting with this. I would keep a small amount of bitcoin in the clear. This allows me to easily spend the small amount while assuring I won't lose much if my device is compromised (good for mobile devices). I can easily encrypt/decrypt keys by entering a target amount to \"transfer\". The actual amount is determined by picking keys with transactions (outputs?) summing to approximately the target. In order to spend more than is in the clear, I must enter one (or more) passphrases, but the rest is automated.\n\n[1]Can the structure of the wallet be modified for encrypted keys and a reference to the encrypting private key without causing a breaking change?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/804745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mikegogulski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419", "body": "Forum references for URI scheme discussion:\n- http://www.bitcoin.org/smf/index.php?topic=1877.0\n- http://www.bitcoin.org/smf/index.php?topic=1840.msg24927#msg24927\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540", "body": "Hey Gavin,\n\nI can see there would be applications for what you're doing with that API.\n\nSeems like it would be painful to work with for e-commerce, though. Right now I can just poll an account/label linked to an open purchase order to check the balance and confirmations. Using this API would require (I think) responding to the JSON-RPC callback POST by sending a flurry of RPC calls to check on the each of the transactions in the new block. Given the complexity and traffic involved in that, I'd probably just continue to use periodic polling.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367", "body": "I see how it could work, sure. But the sample JSON output you provided on the forum post showed the callback passing some general block info and then simply a list of transaction IDs.\n\nFor each transaction ID, I would have to determine if it's relevant to my open orders, then check each relevant transaction for the number of confirmations and the balance on the associated account/address in the wallet. Right now that would mean one RPC method call per transaction in the block. \n\nUnless monitorblocks is going to cough up some per-transaction data correlating transactions with accounts/addresses, I can't see an advantage to using it over polling.\n\nActually, maybe I'm totally missing something. The current implementation of gettransaction returns something like:\n\n```\n$ bitcoind gettransaction 270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\n{\n\"amount\" : -0.02000000,\n\"fee\" : 0.00000000,\n\"confirmations\" : 248,\n\"txid\" : \"270d70635927aac5ec9b42fda27e539ae50a7a06bc3bb2fb98e086e11446a3e6\",\n\"message\" : \"comment\",\n\"to\" : \"comment-to\"\n}\n```\n\nHow do I associate this with an account or address?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395", "body": "There's definitely something to this.\n\nI think the spam potential of your first use case is too nasty to contemplate. I'd be satisfied with commerce systems including a business rule which says \"if you want further notifications, attach an email address to your order\". The spam problem is already addressed broadly in the email domain, and email addresses can be rather anonymous.\n\nSigning an email with the bitcoin key is a neat idea, but there's a lack of symmetry in the typical commerce application. Customer learns a bitcoin address for vendor, so vendor can later sign messages back to customer using that address's private key. Not so in the reverse, unless the customer provides an address of their own as part of the exchange.\n\nWhat I would like to see is the ability to attach a small, optional data field to a transaction. For example, here in Slovakia, the banking system provides for the attachment of several fields to an electronic payment: constant symbol (4), variable symbol (10), specific symbol (16?), note (32?). The constant symbol is used for tax accounting purposes, and the rest are used to correlate payments with accounts, similar to \"please be sure to include your account/invoice number on your check\".\n\nI'm guessing this is already provided for in the protocol, though I'm not familiar with that part of the implementation. Also, it's arguable that it's not necessary if a merchant generates a new bitcoin address for each payment. Not a big priority, really.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307", "body": "Hooray!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433", "body": "Eek!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453", "body": "txid 22c1af3bc7f21a1ee74fbe63fcc58d0433ce2c574cf042a8f9129f989ebac68d has two entries associated with it, one of which is for BTC 3, and this is the only BTC 3 transaction in what you pastebinned. Maybe a place to look.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674782", "body": "Wishing I had the stones for c++ anymore... still, some thoughts:\n- maybe that tx isn't to blame.\n- does the bitcoin wallet implement a proper semblance of a double-entry ledger? If not, that's an enhancement request. (the pastebin records sure look like one, but i'm no accountant)\n- is there cause here to create an in-the-field assert which would trigger a client alert and prompt to submit tx data for fault analysis, in the event of such a disagreement?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tcatm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666836", "body": "I never used setaccount so something else must have caused it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673555", "body": "possibly in other RPC methods, too. It died with getaccountaddress in debug.log, but didn't get glibc message as the terminal was closed.\n\nVersion: 009d5fb41f3aa39baeeb3f72454cdc14459fc67e (Merge branch 'listaddresses' into integration) with CORS patch (shouldn't cause it, though)\n\nbitcoind: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676280", "body": "I just noticed the following (line numbers might not match, I discovered this while re-ordering some code):\n\nIn getaccountaddress()\nrpc.cpp:361: warning: control reaches end of non-void function\n\nedit: ArtForz and lfm on IRC said, that code should never return inside a CRITICAL_BLOCK()\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/718700", "body": "I think encryption should be limited to wallet.dat, so one could have multiple wallets with different passwords. This patch seems to encrypt blkindex.dat and addr.dat, too.\n\nAlso, a GUI prompt to enter the password would be useful.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/718700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719183", "body": "Also, database encryption can currently be accomplished using something like encfs or Truecrypt to encrypt the whole .bitcoin directory. That's probably a better workaround until we know how to get this right.\n\nClosed. Further discussion should happen on the forums as Gavin suggested.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724215", "body": "You should use $(...) instead of `` (like it's done in makefile.osx), also see http://www.electric-cloud.com/blog/2009/03/23/makefile-performance-shell/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/735161", "body": "Why add CUDA and OpenCL stuff to bitcoin?\nWe decided (on IRC at least) to use autotools in the future. I think jgarzik is working on that.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/735161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742723", "body": "This issue seems to be resolved. If not, re-open it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742740", "body": "Anyone thoughts on this? It's now one month old. I'll close it in a few days if no one comments on this.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744034", "body": "Can you make a patch?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744050", "body": "Well, a patch would at least add a constant PROTOCOL_VERSION = xyz, wouldn't it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744096", "body": "pull request :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745863", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799936", "body": "This patch works great for GUI builds but outputs annoying errors (wx-config not found) when building bitcoind. Can you fix that?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809553", "body": "There's already a very similar pull request: https://github.com/bitcoin/bitcoin/pull/52\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816832", "body": "What you are describing is exactly what bitcoin transactions are for. It's impossible to break a coin into two smaller ones without making a transaction.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831940", "body": "bugfix: https://github.com/bitcoin/bitcoin/pull/96\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837721", "body": "Shouldn't it throw JSONRPCError(-5, \"Invalid bitcoin address\") like getreceivedbyaddress does?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837865", "body": "Good idea. What happens when wallet's block is from an orphaned chain (chainsplit while wallet was closed)?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/838011", "body": "Forcing chain splits with two GPUs and -addnode/-connect/-nolisten magic should be easy. I can do that once we have a patch.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/838011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842329", "body": "The script doesn't seem to care about arguments or bitcoind.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847429", "body": "This seems to be a duplicate of https://github.com/bitcoin/bitcoin/issues/99\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fabianhjr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676264", "body": "I think we can be creative about the way to input the password. IMHO it should be similar to the Android. It is really awesome and forces you into thinking about something more abstract. :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "j16sdiz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676534", "body": "Does bitcoin use whatismyip.com ?\nI have read some code, it seems to be using the external address reported by IRC, which should be quite reliable. \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Gnonthgol": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/718831", "body": "It is not possible to selectively encrypt parts of the database environment with Berkeley DB. There is several possible solutions but the best long term is to encrypt everything and add a export/import wallet feature.\n\nThe gui prompt was a good idea, remember to add a non-GUI prompt for running headless.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/718831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "slush0": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724235", "body": "LANG=cs_CZ.utf8\nGDM_LANG=cs_CZ.utf8\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ojab": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724602", "body": "Ok, rewrited.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nanotube": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744304", "body": "updated with a list of 320 fresh seed nodes, and made a pull request.\nguess this should be closed any day now. :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rasos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745944", "body": "Yes, very important. If we enable mobile devices, pocket wallets will be soon obsolete ;-) GUI for smart-phones should include some QR reader, such as portapayment.com \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jgarzik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746504", "body": "Be careful of the downgrade + upgrade scenario.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/758186", "body": "Suggested monitorblocks API posted to forum.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/758186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767124", "body": "no objection\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767127", "body": "This seems to be opposite of satoshi's intent.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767128", "body": "I understand the motivation, but this seems contrary to satoshi's original intent.  Recommend deferring this for a year or three :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779241", "body": "ACK, thanks\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779244", "body": "Does this really need its own, single-file directory?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779246", "body": "ACK\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780866", "body": "From bitcoin's perspective, we don't want to end up with 10 files for 10 different systems (gitian, debian, fedora, ...) each in their own directory.  Having bitcoin/contrib/gitian.yml seems preferable to bitcoin/gitian/just_this_one_file.yml.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/789972", "body": "updated pull looks OK to me, but I'd like to poll gavin's opinion on contrib/ top-level dir as a place to throw things like this\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/789972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828831", "body": "See pull request at https://github.com/bitcoin/bitcoin/pull/88\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828982", "body": "timestamping moved to https://github.com/bitcoin/bitcoin/pull/91\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841178", "body": "This seems quite unlike how other Linux apps are distributed, and function.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853125", "body": "I agree with the intent -- differentiate client & proto version -- but not the implementation in this pull request.\n\nAnd in general, the current protocol does permit some flag-based extensibility beyond simple protocol versioning.  We could simply freeze the as-exported proto version, and add flags where necessary to indicate new feature[set]s.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853259", "body": "Given that -port is oft-requested and oft-implemented, and a standard option on other servers, I think we should include that.\n\nHowever, I am not sure we should be removing penalties until things like ensuring diversity of incoming connections is handled.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853266", "body": "How do deployed clients behave, in reaction to this behavior change?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853270", "body": "Same comments as with https://github.com/bitcoin/bitcoin/pull/104\n\nI agree with the recommendation about bitcoin (recommended) and bitcoin (64-bit).  Maybe open an issue for that?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853273", "body": "That's fine with me.  I'll close this pull request, and hope that someone submits the human-readable timestamp patch instead.\n\nAlso:  there was a privacy concern related to universal timestamps, so maybe add an option -logtimestamp, thereby defaulting the timestamps /off/ by default.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856894", "body": "pulled\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857264", "body": "Things are fine as-is\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857270", "body": "code looks good to me\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857291", "body": "pulled\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857321", "body": "looks OK to me\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/861685", "body": "Plus, I would rather not import a lib wholesale into bitcoin without decent justification\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/861685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864056", "body": "The \"nServices\" bitmask is sent with each version message, at the beginning of each TCP connection between two P2P nodes.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864225", "body": "The two issues are coupled, as I indicated in my original reply.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864575", "body": "Alternative clients, nor mainline clients, have -never- had to release a dummy update, due to the current release scheme.  That's a red herring, and an invalid justification.  The network protocol has always been backwards compatible, even way back to ancient client versions.\n\nI understand the desire to separate the two versions, but beyond that point you're making up nonsensical justifications for problems that don't exist.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864823", "body": "To use an absurd example, it is trivial to see how we can create a flag \"use a totally different protocol.\"  There is no limit to extensibility through flags.  We could simply freeze currently reported protocol version, while still incrementing client version.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867066", "body": "Quote from IRC,\n<gavinandresen> Concern was from satoshi... I shouldn't try to read his mind, but I THINK what he was thinking is somebody subpoena's N bitcoin services for their debug.logs to try to figure out where transactions were originating\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867276", "body": "In general, incremental approaches tend to work better than grand rewrites, so I would rather test the waters with BlueMatt's patch.  Then, we can look into something more invasive if the community is happy with the general direction.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/877908", "body": "Consensus seems to be \"off by default\"\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/877908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879270", "body": "Opened an issue related to this patch: https://github.com/bitcoin/bitcoin/issues/119\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/882085", "body": "Please resubmit, changing only the *.po file.  We will merge your change rapidly, after that!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/882085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886184", "body": "We definitely want this change -- but can you please resubmit a rebase against latest upstream, giving us one (or a few) clean commits?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896250", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/908667", "body": "We should keep the miner, as a reference.  People might start their own block chain, or perform research.  BitcoinMiner() provides all that in a self-contained package.\n\nJust hide it from the user in the GUI and command line help, IMO.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/908667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/908671", "body": "Sorry, didn't mean to close the pull request, just comment.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/908671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910089", "body": "pulled\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910090", "body": "pulled\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928313", "body": "Your hang is verified to be a CRITICAL_BLOCK deadlock?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933163", "body": "IMHO: remove 4way code, hide miner from GUI, leave reference miner in codebase.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933178", "body": "Comments:\n\n1) The community poll and I seem to agree, upnp should be disabled by default (USE_UPNP==0)\n\n2) Rather than all those ifdefs, it would be nice to define  'static const fHaveUPNP' and test that where possible.  The compiler will optimize out code that is known never to be called.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/942713", "body": "IMO, cs_main should always be acquired before cs_mapWallet, as it is the \"bigger\" lock.  I'll look at how difficult it is to change the code to follow that ordering.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/942713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949465", "body": "I like the idea of writing a PID file.  It is good practice, at least on *nix.  I also like that you made the default the bitcoin data directory.\n\nReview comments:\n1) pid file should include a newline\n2) have you verified the PID written is post-daemonize?  I am too lazy to check right now, and it is unclear from the patch.\n3) the PID file should be removed on shutdown.  stale PID files are undesirable.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949670", "body": "Check the boost docs... boost does everything :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951626", "body": "Forum thread: http://www.bitcoin.org/smf/index.php?topic=5351.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951660", "body": "Forum thread: http://www.bitcoin.org/smf/index.php?topic=5353.0\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/957134", "body": "closing, superceded.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/957134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/960699", "body": "Added sendmany fix, spotted by Gavin.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/960699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976672", "body": "Pulled, after testing on multiple machines.\n\nAlso, I modded the commit slightly, to call setsid() inside ui.cpp, which is a second Daemonize site.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/977911", "body": "Testing is a good thing, absolutely.  Picking a unit test framework, and figuring out how to best integrate that into the tree, is best left to a forum discussion post, IMO.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/977911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1310584", "body": "IPv6 support is not yet merged upstream.  see pull #1021\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1310584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1323675", "body": "Try:\n\n  struct in_addr inaddr_any = { };\n  inaddr_any.s_addr = INADDR_ANY;\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1323675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371382", "body": "Remaining 'T's removed from the codebase's date/time format strings.  Let me know if I missing some.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371816", "body": "@Diapolo: updated\n\n@freewil: it is a useful choice for people actually reading debug.log files.  it is a poor choice for those who pointlessly follow standards simply because they are standards.  Some standards are more work, for reduced utility.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943", "body": "No, gen.cpp is not a generated file to be ignored.  It definitely should be checked into git.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16335943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mndrix": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754604", "body": "Easy import and export of keys would make it easier for trusted vendors to sell Bitcoin stored-value cards (USB sticks, mini CDs, etc) with a private key on them.  The buyer then just imports the private key from the card.\n\nEasy import/export also addresses parts of issue #2\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754635", "body": "If `debug.log` showed full transaction IDs in the \"got inventory\" line, one could do:\n\n```\ntail -F debug.log | grep \"got inventory.*new\" | my-script\n```\n\nto monitor for new transactions and then run `gettransaction` to see the details.  For some projects, this would be easier since no HTTP server is required.  As it is, only partial transaction IDs are visible in `debug.log` so this doesn't work.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "RytisLT": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762047", "body": "I think this is a key feature. Manually backing up and securing your wallet really sucks, I think this keeps a lot of users from using BitCoin. Also there should be possible to specify wallet location. This way I would keep my wallet in my dropbox and therefore would take care of backing up.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jeffWelling": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769319", "body": "The Andriod way of inputting your passcode (assuming you mean what you think I mean) is kind of a 'connect the dot' system, where you slide your finger from the first digit directly to the second.  This has the implication of actually being less secure than using the traditional tap per digit system, because it limits the number of neighboring digits to 8 as opposed to the full 10.\nWith the andriod way, if the first digit for your password is 5, then your possible choices for a second digit are 1,2,3, 4 and 6, and 7,8,9.  However, consider what happens when your starting digit is 1, your next available digits become 2, 4 and 5. With the traditional method, no matter what key you start on, you may choose any other 0-9 number.\nI do applaud the creativity and innovation, but I think the security implications need to be pointed out.\n\nI would like if my wallet was encrypted taking advantage of my already existing GnuPG key. :)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769328", "body": "Considering how prevalent dynamic IPs are, I would consider this bug to be of a high priority.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839377", "body": "jhyslop, but many of us already use GnuPG with public key cryptography, so we're already storing private keys which we use for other purposes. Adding one more key is trivial. \n\nI see no reason why both symmetric and public key cryptography couldn't be available as an option.  Aside from the obvious \"who will program it\" part.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/865447", "body": "Is 90 _minutes_ really a reasonable period to wait before timing out a connection?  That's an hour and a half... I suppose there is no kind of heartbeat packet to help speed the timeout?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/865447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "larsig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770933", "body": "I would also suggest unique IDs per transaction\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "devrandom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780838", "body": "I'm thinking there should be a standard directory structure, similar to the debian packaging conventions, that would make it easy and predictable to build a package given its source tree.\n\nSince bitcoin is the first project that is interested in adding this to the source tree, you are free to set the standard by choosing where to put it.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780958", "body": "Sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mgiuca": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780992", "body": "Seconded. I have been using Bitcoin for a couple of days, and while many users will not care about the details, I want to know (at least during my initial testing of the system) exactly how it works. This will help me, and other tech-savvy users understand the security implications.\n\nTo me, the biggest \"black box\" of the whole system is the wallet. It's a binary blob which I am told to keep backed up or else. It's unclear to me how I would restore it without erasing recent transactions. I'm not sure which data is stored in it and which is not -- from the look of some other bugs here, it seems to store more data than just the public/private keys (such as config data). Does it store the names I have associated with the addresses? (I wouldn't want to lose my PC, restore my wallet.dat, and discover I can't tell who sent me what, so I'd hope it does store those names.) Does it store sending addresses? (I don't think it should, as that's more of an address book than a crucial wallet.) And it isn't encrypted with a password.\n\nI'm not asking for answers to these questions -- I can find them out if I really want to. I'm saying that these answers should be immediately obvious from inspecting the wallet file. There should be nothing \"magical\" about this file, for an advanced user.\n\nI would like to see a transition to a \"Wallet 2.0\" file format, which is simply a PGP-encrypted text file (so, binary, but a simple gpg -d will get the text out). I should be able to encrypt it with either a symmetric or public key.\n\nInside the file, there would be a simple ASCII format, such as:\n&lt;address&gt; (active|inactive) [name] &lt;pub-key&gt; &lt;priv-key&gt;\n\nwith one address per line (or split into \"sections\" if the pub-key and priv-key are too long to put on a single line). The active|inactive determines whether the address shows up as a receive address in the GUI (so when it pre-generates 100 addresses, they all show up here, and are all marked inactive until the user presses \"New Address\" in the UI).\n\nThis would only contain receiving addresses. Sending addresses would be in a separate address book file, which would hopefully also be a text file, and I could back up too if I wanted to but isn't critical.\n\nNow, at a glance, I (as a technical user) can tell exactly what data is stored in the wallet. And it should be significantly easier to write tools for listing all the money associated with each account in the wallet, splitting up a wallet into separate files, and so on.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/811432", "body": "The problem is that the makefile is using \":=\" instead of \"=\" to assign those WXINCLUDEPATHS/WXLIBS variables. This calls wx-config whether it uses it or not. But even fixing that is insufficient.\n\nI have put up a [new pull request](https://github.com/bitcoin/bitcoin/pull/82) which fixes this issue.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/811432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864895", "body": "There has been some discussion relating to a so-called \".bitkeys\" format, which would be a standardised human-readable text file format for storing Bitcoin private key data. It seems to have been suggested here by [mike]:\n[http://www.bitcoin.org/smf/index.php?topic=3638.40](http://www.bitcoin.org/smf/index.php?topic=3638.40)\n\nI don't know if the format discussion has moved elsewhere, but you should try to be compatible with this format.\n\nBasically, this means your file should start with v=1 (version, I assume). Exporter should write v=1, importer should check for v=1.\n\nOtherwise, what you suggest is almost right, but the private key and block number should be comma-separated:\nbase58 encoded privkey,block number  # comment\n\nEverything after the hash is a comment. You said it was \"optional\" but that sort of implies that your software will possibly be looking for an address and available BTC. It should not, since the format should allow arbitrary machine-ignored text after the #. So your exporter should write # [address] [available BTC] or whatever you want, but your importer should completely ignore everything after the comment and just use the privatekey to derive the public key and address.\n\nAlso note, if you haven't written the code for this already, that I already implemented, in C using OpenSSL, the code to take a 32-byte private key and generate the full 279-byte DER key (which Bitcoin internally calls the \"private key\") and 65-byte public key. My intention was for my code to eventually be used inside Bitcoin itself, so please use it if you can:\n- [bitcoin-import Bazaar branch](https://code.launchpad.net/~mgiuca/+junk/bitcoin-import)\n- [priv_der.c](http://bazaar.launchpad.net/~mgiuca/+junk/bitcoin-import/view/head:/priv_der.c)\n\nIt is currently a command-line program which takes the private key as input and produces the DER key (of which the public key is a substring), but it is very well documented and could easily be adapted into a bitkeys file reader.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "molecular": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801607", "body": "ok, but then you can't put rpcport=xzy in bitcoin.conf and run two clients in parallel, right?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822157", "body": "afaik, there is currently no mechanism that would drop transactions from local cache. They just stay there until found in a block.\n\nIt's been suggested to do that, though (like limit local cache to 5MB), in order to avoid DoS attack. It's probably not that simple, though.\n\nDon't know if there's a github issue for this, if not, it certainly deserves one.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/876616", "body": "TheBlueMatt: what you're saying does not hold true for me... I started a 0.3.20.1 beta node on testnet about 3 days ago. It got stuck at 10870 blocks (that block was mined 2 days ago). It says \"0 connections\" and does not reconnect.\nWhile this is not \"silent\" (assuming after 90 minutes it shows 0 connections), it's a complete disconnect (persisting for probably 2 days now) and should not happen, as most will agree.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/876616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/877092", "body": "testing the whole thing once more:\n1.) start 0.3.20.1 beta -testnet (wait to sync blockchain to block 10882)\n2.) mine a block (block now 10883)\n3.) switch IP\n4.) observe a new block arriving (block 10884): so in fact at least one connection survived the IP switch! I did not expect this.\n5.) mine 3 more blocks\n6.) notice something very strange: it says \"2/offline? - generated - warning: this block was not received by any other nodes and will probably not be accepted!\" on newly (after IP switch) mined blocks, \"2 connections\". I still received other blocks after IP switch, though.\n\nhere's a screenshot to illustrate the situation: http://i.imgur.com/xlzY1.jpg\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/877092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/877654", "body": "to complete above test report:\n\n7.) went to eat, came back, found this: \"0 connections, 10893 blocks\", the block generation(s) shown as \"2/offline?\" in 6.), now show as \"7 confirmations\". I don't seem to receive new blocks any more, stuck at 10893, blockexplorer: 10898\n8.) concluding that the node is disconnected for real, the IP switch was more than 3 hours ago.\n\nhere's a slightly grepped version of the debug.log (I marked the point where the IP changed, line 123): http://pastebin.com/rmSEcAXA\n\nnote: it seems from the debug.log I didn't wait for the blockchain to sync before I switched the IP address. This, I think, explains the \"2/offline?\"-stuff.\n\nSummary: this is now an example of a \"non-silent complete disconnect\".\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/877654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gasteve": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816760", "body": "I successfully compiled with boost_1_46_0 on my Mac (OSX 10.6.6).  I suggest trying with that and if it works for you, maybe it could be added to the Mac build instructions that version 1_45_0 may not work.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816774", "body": "Easy import/export is an important feature for the day when transactions are no longer free on the network.  People won't want to pay transaction fees when consolidating or moving btc value between different wallets they own.  Also, easy import/export should be treated like moving (rather than copying) to prevent keys from ending up in multiple, concurrently active wallets (backup should be used for ensuring you don't lose keys).\n\nI think I'll create a separate issue for this (since it is straying from this topic).\n\nAs for treating the wallet as a generic key store or using existing key store solutions, I think it's better to stay away from that in the short term.  That could pose quite a few technical and integration challenges, and if not done very carefully, could pose a security risk (you would be putting bitcoin users at the mercy of third party key storage solutions that may or may not be very well implemented). \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816783", "body": "It's important for this to be a \"move\" operation rather than a copy or export/import.  For the user, it should feel like moving value between wallets (like a transaction, but without the need for it to enter the block chain and possibly incur fees).  The wallets should be both presumed to be active, hence you would only want a given key to exist in one active wallet at a time.  This feature should not be viewed as a backup mechanism.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816796", "body": "I think the conclusion of these discussions is:\n1) for smaller transactions, the financial incentive for double spending is not there (the control of a substantial portion of the network needed to pull it out would be expensive to accomplish)\n2) for larger transactions, it will likely be permissible to wait for confirmation to finalize the transaction\n3) a trusted third party could be employed for instant clearing (payer would have trust, credit or deposit with the 3rd party and payee would trust the 3rd party to not double spend)\n\nI think the problem is either a non issue, or can be adequately solved on top of the current infrastructure (without changing the current infrastructure).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816993", "body": "Except that transactions will eventually cost money...I'm talking about moving private keys between wallets in order to consolidate bitcoins into a wallet without having to use a transaction and potentially incur a transaction fee.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820868", "body": "Is there another potential issue here?  For transactions that, for one reason or another, don't get into a block in a reasonable amount of time, is there some criteria for which the network will drop (and thereby cancel) such transactions?  (like a certain amount of time passing without being included in a block)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zde": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822083", "body": "I have confirmed the bug on Ubuntu 10.04.2 LTS.  It's triggered when /proc/self/exe links to a UTF-8 path.  Behavior differs depending on LANG setting.\n- LANG=C: bitcoin runs just fine\n- LANG=DE: assertion fails../src/common/intl.cpp(2554): assert \"!m_strShort.empty()\" failed in AddCatalog(): must initialize catalog first\n- LANG=cs_CZ.utf8: bitcoin silently segfaults, gdb shows corrupted stack trace.  \n\nstrace suggests it happens during or right after this line, I think it's a wxLocale bug.\n\nsrc/ui.cpp:    g_locale.AddCatalog(\"wxstd\"); // wxWidgets standard translations, if any\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "midnightmagic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831764", "body": "Since that commit stripped out the inclusion of WXINCLUDEPATHS in the defs and moved it to the obj/%.o location instead. This means the nogui option compilation doesn't receive the **WXGTK** define, which is #ifdef'ing out the daemonizing fork() call. (Which itself is probably the genesis of this bug.)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tril0byte": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837834", "body": "This is a documentation terminology issue. I was confused too.  We now have three terms for the same thing.  1. Address Book Sending tab uses \"Name.\"  2. Address Book Receiving tab uses \"Label.\"  3. Documentation Wiki and API method calls use \n\"account\"  to mean both.  The term \"Address Book\" does not appear anywhere on this page: https://en.bitcoin.it/wiki/Accounts_explained \n\nWhile we're at it the \"Sending\" tab of Address Book confuses me every time I look at it, it implies a list of my accounts to use to send from, but it's actually a list of recipient addresses.  Maybe we should change Sending to say Contacts, and change Receiving to say My Accounts.  \n\nSuggestion: Change Address Book field names \"Name\" and \"Label\" to \"Account Name\" for consistency.  \n\nSuggest editing https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list to add hyperlinks for each occurrence of \"account\" to https://en.bitcoin.it/wiki/Accounts_explained\n\nAfter client field changes above, edit https://en.bitcoin.it/wiki/Accounts_explained to include language clarifying that the account API covers both tabs of the Address Book and the client separates them based on whether it has the private key.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837910", "body": "I suggest generalizing this to a much more useful feature, the ability to create a bearer transaction that includes the private key (no need to mention amount), and obviously a text box to copy the transaction from instead of broadcasting it to the network.  We'd need an input field to paste in the transaction (which is really just a key pair).  It's really just export/import with the official client by default deleting the private key on export (possibly with a huge warning to make sure you copied the text somewhere safe).  It makes sense to work on this feature after a mechanism for controlling which coins get included in a transaction, since the user will want to know how many coins are at a specific address before sending off the private key (to another wallet or another person).\n\nAppropriate new API calls should be created too.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837920", "body": "Your first paragraph seems to duplicate https://github.com/bitcoin/bitcoin/issues/#issue/71\n\nTransferring your address book for outgoing can already be done through RPC: do  listaccounts on the source, then setaccount in a loop on the destination.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837935", "body": "Consider using an existing configuration repository like gconf.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837941", "body": "how do we know this isn't a hardware problem?  does bitcoin check the consistency of its files and repair them automatically?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Kiv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/838824", "body": "Agree about human readable, I would love to actually understand the contents of my wallet. \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/838824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jhyslop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839223", "body": "I think this proposal has merit.\n\nI was quite surprised to find, from reading the source code, that the wallet contains both money and configuration data. Keeping the two sets of data separate makes much more sense than lumping them together into a single file.\n\nIf it's implemented correctly, there should be no issues with overwriting any of the users' changes.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839225", "body": "I disagree with this. Bitcoin keys should be used for one purpose only - creating bitcoins. Any other use will erode the anonymity that the system can afford.\n\nSounds like what you really want is GPG.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839229", "body": "I second cdecker's question - what is satoshi's original intent? Is his intent that there shall be One True Client?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839314", "body": "There are a couple of major problems with this change - which isn't necessary in the first place.\n\nFirst off, the transaction will not get accepted into the memory pool, because AcceptToMemoryPool verifies that the transaction has enough fees embedded in it to satisfy GetMinFee(). But when you created the transaction, you suppressed those fees.\n\nEven if you applied similar modifications to AcceptToMemoryPool, no other node will accept your transaction, because the other nodes will <i>not</i> suppress the calculation of GetMinFee(). That means that only your node will attempt to put the transaction into a block. Unless you're running one of those multi-GH/s nodes, it could be months before you win the crap shoot and generate the block. And that's assuming that the node even generates blocks to begin with. You can't assume that every node will be generating blocks - I turn off coin generation on my MacBook because I don't want to overstress the CPU if I can help it.\n\nIn any case, the code change is not necessary. If you do happen to be the lucky guy who generates the block containing your own transactions, then the transaction fees all go into your wallet, making your own transactions free.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839341", "body": "Fnordsoft, I hope the GPG mechanism is simpler - the pass phrase is hashed into a symmetric key, and that key is used to encrypt the sensitive data in the wallet. Much simpler, and you don't have to worry about storing a private key anywhere. The user enters the pass phrase, and the program checks it by encrypting something with the public key, then decrypting it with the private key, and ensuring that the resulting 'something' matches the original 'something'.\n\nAs for the input, keep it simple: there's nothing wrong with the plain ol' keyboard. The Android style may work well on a mobile device, but would be a royal pain in the **\\* anywhere else.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840031", "body": "OK, I see what you're getting at, Jeff. Yeah, that could be an option. The default, I think, should be to use the hashed pass phrase as a symmetric key, with an option to allow advanced users to provide a public key.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840093", "body": "By the way, just to clarify - when I said \"the default should be to use the hashed pass phrase as a symmetric key\" (HPPASK) I wasn't necessarily pushing HPPASK as The Solution. To generalize my statement, what I meant was \"the default should be some password mechanism that keeps the wallet self-contained, and by the way the HPPASK seems to me a simple solution that meets the needs.\"\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841329", "body": "OK, I'll go along with that.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845223", "body": "I like the idea of timestamping log entries. Personally, though, I'd rather see a human-readable timestamp.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845259", "body": "I've been thinking about this some more. Rather than sign an arbitrary message (which is generally frowned on by those smarter than me at cryptography; as I recall, a carefully-crafted message can make it easier to perform certain types of known-plaintext attacks)... um, where was I? Oh, yeah, what about adding specific RPC commands to issue a specific message? For example, if you want to prove you own(ed) a particular coin, you could issue a command something like \"getproofofownership <address>\". Of course, under the hood that would be implemented using a routine that signs a message string, but the contents of the message string would be under the program's control.\n\nThat would also force us to think through the specific use-cases for which this feature is needed.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845313", "body": "gavinandresen, were those reports from different people, or from one person? If they were from different people I'd push hardware problems further down the list of suspects. I wouldn't rule out hardware problems, of course.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/854558", "body": "Actually, I plan to rework the logging slightly, so I'll add the optional timestamp when I do that. And since I'm adding a flag, there's no reason it can't be '-logtimestamp=<off | numeric | human-readable>'.\n\nWhat was the privacy concern, do you remember?\n\nMy plan is to modify OutputDebugStringF to accept two parameters, one indicating the verbosity level (off, critical error, error, warning, info, debug, verbose) and the other a bitmask enum indicating the area the log entry relates to, such as Mining, Transactions, Blocks, etc. (I got tired of wading through quite literally thousands of IRC log messages, and generating a log file around 1.2M per day). Oh, and then change all 'printf' statements to OutputDebugStringF( x, y where x and y make sense given the context.\n\nI already have that code in my local source, but it's based on the previous release and it's currently hard-coded to Debug, Mining.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/854558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863899", "body": "Can you elaborate on the flags? I don't think I've come across the code you're talking about.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867037", "body": "Jeff, I've been working on the code as mentioned. Can you elaborate on the privacy concerns? I don't really see how the timestamps in the log could be a privacy concern.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867270", "body": "I wondered it might be something along those lines. As a side note, it would be an interesting challenge to figure out how many nodes you'd have to subpoena in order to determine with any degree of certainty the origin of a coin.\n\nMy revisions to OutputDebugStringF will, by default, NOT log anything to do with individual transactions. Basically, only infrequent status messages such as the hash rate, warnings, errors and critical errors will be logged by default.\n\nActually, before I go too far down the road with it, I think I'll open a discussion on the Bitcoin forums to get feedback on my ideas. Maybe someone there might have some additional thoughts on privacy issues.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867714", "body": "OK. My changes are orthogonal to BlueMatt's, so it will be simple to merge.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896691", "body": "I haven't reviewed the code thoroughly, but it looks reasonable.\n\nIn order to ease future changes to the wallet format, how about adding a key/value pair into the wallet indicating its data format version number?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896757", "body": "Well, I mildly disagree that it's not necessary now. The time to implement versioning is now, before it's needed, so that when it is needed clients will have the version-checking code in place. But on reflection, that's what the nVersion parameter to the Serialize family of functions is for, isn't it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922811", "body": "I forgot to write my motivation for the patch. I wrote it because I got tired of having to sift through hundreds of \"IRC got xxx\" messages while I was trying to debug some other changes I was making. Plus I was concerned about the size of the debug.log file - after running for only 12 hours, the file was hundreds of megabytes. The file only gets truncated on startup, and then only if you specify the -debug flag - which increases the log activity.\n\nI haven't looked at boost::log, but how easy is it to incorporate into the existing code? One of the big advantages (IMO) of this patch is the fact that it fits into the existing code, which makes it less of a pain to migrate to the new logging system.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922824", "body": "I pretty much agree with removing the miner from the client. Before mining gets removed, though, we should have a separate stand-alone miner as a reference implementation.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "grebulon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841031", "body": "I second that. There should be an option to set the location via GUI.\nIt would also be nice to be able to specify a secondary location, where a mirror of the wallet could be saved, possibly on a network path.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "genjix": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847320", "body": "Tested this. It works well.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/850304", "body": "Couldn't find how to assign myself tickets, but I'm working on this. So give me a couple of weeks (focus on other issues) if possible ;)  (don't like duplicating work). BTW I'm using a symmetric key (AES now, but easy to switch to blowfish .etc) with the passphrase hashed with RSA using OpenSSL. If you're interested then run 'man evp_sealinit' or man evp_openinit.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/850304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lachesis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896498", "body": "Submitted pull request: https://github.com/bitcoin/bitcoin/pull/126\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "thiloplanz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911394", "body": "An alternative (or stop-gap measure) to encrypting the wallet could be to allow the user to specify where the file should be. This way, he can place it on an encrypted volume (that he may already have for other important documents).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/915124", "body": "Is the bitcoin receiver address equivalent to a public key? If so, it could be used to encrypt a message that only the recipient could read. Together with the ability to sign the message with the sender's bitcoing address this could be the basis for a very simple (but secure) out-of-band messaging system:\n\nIf you happen to know a way to contact the recipient, you just send him a signed message (you yourself can even stay anonymous, but the message can be reliable attributed to your sender bitcoin address).\n\nIf you do not know a way (or do not trust the transportation channel), an encrypted message could be posted on a public board where the recipient could eventually pick it up. Notifications/polling could be integrated into the GUI application.\n\nAgain, everything out-of-band (not messing with the existing payment infrastructure), and it depends (at least for the encryption part) on a bitcoin receiver address functioning as an encryption key (does it?).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/915124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/915438", "body": "\"The receiver address is a hash of the public key; you don't see the full public key until the transaction is spent.\"\n\nIn this case, we can still sign messages regarding any payments we made, but we can only encrypt them, after the recipient has made any payment himself (at any time, potentially even before we made our payment, in case the \"account number\" has been used before)\n\nI think that is already enough to get some useful functionality going. This does not have even have to happen within the bitcoin. Are there tools to export private keys from your wallet and extract public keys from the block chain into standard formats for systems like openssl or PGP to use?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/915438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/968450", "body": "\"The receiver address is a hash of the public key; you don't see the full public key until the transaction is spent.\"\n\nSo one thing that you could always do is to send an encrypted thank you message to someone who has sent you bitcoins (send = broadcast in case you don't know who that is)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/968450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/968464", "body": "\"Submit signed transactions to the network\"\n\nI want that as well, for Google App Engine, where you cannot participate in the regular peer-to-peer protocol, because you cannot open sockets. Having something like an XMPP proxy that pushes signed transactions into the peer network would be cool. Maybe the existing IRC channel can also be used for that.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/968464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Zammy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926153", "body": "Crash on startup log:\n\nProcess:         bitcoin [5818]\nPath:            /Users/evgenipetrov/Downloads/bitcoin-0.3.20.01/Bitcoin.app/Contents/MacOS/bitcoin\nIdentifier:      org.bitcoin.bitcoin\nVersion:         0.3.19 (320)\nCode Type:       X86-64 (Native)\nParent Process:  launchd [104]\n\nDate/Time:       2011-03-28 17:14:01.203 +0300\nOS Version:      Mac OS X 10.6.6 (10J567)\nReport Version:  6\n\nInterval Since Last Report:          476872 sec\nCrashes Since Last Report:           5\nPer-App Interval Since Last Report:  51157 sec\nPer-App Crashes Since Last Report:   2\nAnonymous UUID:                      B3715EC3-473C-466C-9248-2C3184DF4EE7\n\nException Type:  EXC_BAD_ACCESS (SIGSEGV)\nException Codes: KERN_INVALID_ADDRESS at 0x0000000100f06138\nCrashed Thread:  7\n\nThread 0:  Dispatch queue: com.apple.main-thread\n0   libSystem.B.dylib               0x00007fff84456372 munmap + 10\n1   org.bitcoin.bitcoin             0x0000000100527473 DbTxn::set_parent(DbTxn_) + 1674379\n2   org.bitcoin.bitcoin             0x00000001004e8899 DbTxn::set_parent(DbTxn_) + 1417393\n3   org.bitcoin.bitcoin             0x00000001004e86c7 DbTxn::set_parent(DbTxn_) + 1416927\n4   org.bitcoin.bitcoin             0x000000010053e191 DbTxn::set_parent(DbTxn_) + 1767849\n5   org.bitcoin.bitcoin             0x00000001004e33b7 DbTxn::set_parent(DbTxn_) + 1395663\n6   org.bitcoin.bitcoin             0x00000001004e31c7 DbTxn::set_parent(DbTxn_) + 1395167\n7   org.bitcoin.bitcoin             0x00000001004e3129 DbTxn::set_parent(DbTxn_) + 1395009\n8   org.bitcoin.bitcoin             0x000000010038d072 **db_dbt::__db_dbt() + 19084\n9   org.bitcoin.bitcoin             0x00000001005e1b9c boost::condition_variable::timed_wait(boost::unique_lockboost::mutex&, boost::posix_time::ptime const&) + 617740\n10  libSystem.B.dylib               0x00007fff844638d4 __cxa_finalize + 203\n11  libSystem.B.dylib               0x00007fff844637ec exit + 18\n12  com.apple.AppKit                0x00007fff855e6582 -[NSApplication terminate:] + 769\n13  com.apple.AppKit                0x00007fff8561696e -[NSApplication _terminateSendShould:] + 55\n14  com.apple.CoreFoundation        0x00007fff808e196c __invoking_** + 140\n15  com.apple.CoreFoundation        0x00007fff808e183d -[NSInvocation invoke] + 141\n16  com.apple.Foundation            0x00007fff846848f5 __NSFireTimer + 114\n17  com.apple.CoreFoundation        0x00007fff808a8be8 __CFRunLoopRun + 6488\n18  com.apple.CoreFoundation        0x00007fff808a6dbf CFRunLoopRunSpecific + 575\n19  com.apple.HIToolbox             0x00007fff82c1493a RunCurrentEventLoopInMode + 333\n20  com.apple.HIToolbox             0x00007fff82c1473f ReceiveNextEventCommon + 310\n21  com.apple.HIToolbox             0x00007fff82c145f8 BlockUntilNextEventMatchingListInMode + 59\n22  com.apple.AppKit                0x00007fff853bde64 _DPSNextEvent + 718\n23  com.apple.AppKit                0x00007fff853bd7a9 -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 155\n24  com.apple.AppKit                0x00007fff8538348b -[NSApplication run] + 395\n25  org.bitcoin.bitcoin             0x00000001001e71d3 wxDisclosureTriangleCocoaImpl::~wxDisclosureTriangleCocoaImpl() + 3667\n26  org.bitcoin.bitcoin             0x0000000100357061 wxMimeTypesManagerImpl::UtiMap::operator[](wxString const&) + 8865\n27  org.bitcoin.bitcoin             0x00000001002aabc8 wxAnyValueTypeImplwxString::ConvertValue(wxAnyValueBuffer const&, wxAnyValueType_, wxAnyValueBuffer&) const + 1784\n28  org.bitcoin.bitcoin             0x00000001001b9cf7 wxICONResourceHandler::~wxICONResourceHandler() + 1575\n29  org.bitcoin.bitcoin             0x0000000100308cad wxHashTable::~wxHashTable() + 7485\n30  org.bitcoin.bitcoin             0x00000001000f6824 ExitThread(unsigned int) + 30692\n31  org.bitcoin.bitcoin             0x0000000100035c34 std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::lessstd::string, std::allocatorstd::string >::_M_erase(std::_Rb_tree_nodestd::string*) + 26100\n\nThread 1:  Dispatch queue: com.apple.libdispatch-manager\n0   libSystem.B.dylib               0x00007fff8446a16a kevent + 10\n1   libSystem.B.dylib               0x00007fff8446c03d _dispatch_mgr_invoke + 154\n2   libSystem.B.dylib               0x00007fff8446bd14 _dispatch_queue_invoke + 185\n3   libSystem.B.dylib               0x00007fff8446b83e _dispatch_worker_thread2 + 252\n4   libSystem.B.dylib               0x00007fff8446b168 _pthread_wqthread + 353\n5   libSystem.B.dylib               0x00007fff8446b005 start_wqthread + 13\n\nThread 2:\n0   libSystem.B.dylib               0x00007fff8446af8a __workq_kernreturn + 10\n1   libSystem.B.dylib               0x00007fff8446b39c _pthread_wqthread + 917\n2   libSystem.B.dylib               0x00007fff8446b005 start_wqthread + 13\n\nThread 3:\n0   libSystem.B.dylib               0x00007fff8448bfca __semwait_signal + 10\n1   libSystem.B.dylib               0x00007fff8448be59 nanosleep + 148\n2   org.bitcoin.bitcoin             0x00000001005486bb boost::program_options::detail::utf8_codecvt_facet::~utf8_codecvt_facet() + 3499\n3   org.bitcoin.bitcoin             0x00000001000f72c1 ExitThread(unsigned int) + 33409\n4   libSystem.B.dylib               0x00007fff8448a536 _pthread_start + 331\n5   libSystem.B.dylib               0x00007fff8448a3e9 thread_start + 13\n\nThread 4:\n0   libSystem.B.dylib               0x00007fff8448bfca __semwait_signal + 10\n1   libSystem.B.dylib               0x00007fff8448be59 nanosleep + 148\n2   org.bitcoin.bitcoin             0x00000001005486bb boost::program_options::detail::utf8_codecvt_facet::~utf8_codecvt_facet() + 3499\n3   org.bitcoin.bitcoin             0x0000000100064f07 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 4353\n4   libSystem.B.dylib               0x00007fff8448a536 _pthread_start + 331\n5   libSystem.B.dylib               0x00007fff8448a3e9 thread_start + 13\n\nThread 5:\n0   libSystem.B.dylib               0x00007fff8446a16a kevent + 10\n1   libSystem.B.dylib               0x00007fff844a8f23 _mdns_query_mDNSResponder + 1075\n2   libSystem.B.dylib               0x00007fff844a81c6 _mdns_search + 1152\n3   libSystem.B.dylib               0x00007fff844ac884 _mdns_hostbyname + 292\n4   libSystem.B.dylib               0x00007fff844ac585 search_host_byname + 139\n5   libSystem.B.dylib               0x00007fff844ac49e gethostbyname + 98\n6   org.bitcoin.bitcoin             0x000000010006fc2e CDB::~CDB() + 4302\n7   org.bitcoin.bitcoin             0x0000000100070e50 CDB::~CDB() + 8944\n8   libSystem.B.dylib               0x00007fff8448a536 _pthread_start + 331\n9   libSystem.B.dylib               0x00007fff8448a3e9 thread_start + 13\n\nThread 6:\n0   libSystem.B.dylib               0x00007fff8448bfca __semwait_signal + 10\n1   libSystem.B.dylib               0x00007fff8448be59 nanosleep + 148\n2   org.bitcoin.bitcoin             0x00000001005486bb boost::program_options::detail::utf8_codecvt_facet::~utf8_codecvt_facet() + 3499\n3   org.bitcoin.bitcoin             0x0000000100069696 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 22672\n4   org.bitcoin.bitcoin             0x0000000100065356 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 5456\n5   libSystem.B.dylib               0x00007fff8448a536 _pthread_start + 331\n6   libSystem.B.dylib               0x00007fff8448a3e9 thread_start + 13\n\nThread 7 Crashed:\n0   org.bitcoin.bitcoin             0x000000010053b271 DbTxn::set_parent(DbTxn_) + 1755785\n1   org.bitcoin.bitcoin             0x000000010053af52 DbTxn::set_parent(DbTxn_) + 1754986\n2   org.bitcoin.bitcoin             0x000000010053a8f7 DbTxn::set_parent(DbTxn*) + 1753359\n3   org.bitcoin.bitcoin             0x0000000100389e98 __db_dbt::__db_dbt() + 6322\n4   org.bitcoin.bitcoin             0x000000010004fedb operator-(CBigNum const&, CBigNum const&) + 23307\n5   org.bitcoin.bitcoin             0x00000001000ee4ff CBigNum::operator<<=(unsigned int) + 23371\n6   libSystem.B.dylib               0x00007fff8448a536 _pthread_start + 331\n7   libSystem.B.dylib               0x00007fff8448a3e9 thread_start + 13\n\nThread 7 crashed with X86 Thread State (64-bit):\n  rax: 0x0000000100f06138  rbx: 0x0000000100b58530  rcx: 0x00007fff707ba630  rdx: 0x00000000002f4180\n  rdi: 0x0000000100b125e0  rsi: 0x0000000117ac7db0  rbp: 0x0000000117ac7d20  rsp: 0x0000000117ac7cf0\n   r8: 0x0000000000000001   r9: 0x0000000101816e70  r10: 0x00000001018fc0a4  r11: 0x00000000000016e0\n  r12: 0x0000000117ac7e80  r13: 0x0000000000000000  r14: 0x000000010088b348  r15: 0x0000000100890de0\n  rip: 0x000000010053b271  rfl: 0x0000000000010206  cr2: 0x0000000100f06138\n\nBinary Images:\n       0x100000000 -        0x100802fdf +org.bitcoin.bitcoin 0.3.19 (320) <BB066DE7-CAE7-42EA-631C-2D91954FB3A3> /Users/evgenipetrov/Downloads/bitcoin-0.3.20.01/Bitcoin.app/Contents/MacOS/bitcoin\n    0x7fff5fc00000 -     0x7fff5fc3bdef  dyld 132.1 (???) <B536F2F1-9DF1-3B6C-1C2C-9075EA219A06> /usr/lib/dyld\n    0x7fff80107000 -     0x7fff801a7fff  com.apple.LaunchServices 362.2 (362.2) <A8EDC37C-1D40-5ED0-49BE-90EF110A6B3A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices\n    0x7fff801a8000 -     0x7fff80226fff  com.apple.CoreText 3.5.0 (???) <4D5C7932-293B-17FF-7309-B580BB1953EA> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreText.framework/Versions/A/CoreText\n    0x7fff80272000 -     0x7fff804f8fff  com.apple.security 6.1.1 (37594) <1B4E1ABD-1BB3-DA49-F574-0EEB23E73C6A> /System/Library/Frameworks/Security.framework/Versions/A/Security\n    0x7fff804f9000 -     0x7fff8051ffe7  libJPEG.dylib ??? (???) <6690F15D-E970-2678-430E-590A94F5C8E9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib\n    0x7fff80600000 -     0x7fff8067dfef  libstdc++.6.dylib 7.9.0 (compatibility 7.0.0) <35ECA411-2C08-FD7D-11B1-1B7A04921A5C> /usr/lib/libstdc++.6.dylib\n    0x7fff80717000 -     0x7fff80766fef  libTIFF.dylib ??? (???) <AE9DC484-1382-F7AD-FE25-C28082FCB5D9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib\n    0x7fff80767000 -     0x7fff807b0fef  libGLU.dylib ??? (???) <CCE779A9-2467-A5AA-A558-691E43A1105F> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib\n    0x7fff807b1000 -     0x7fff80841fff  com.apple.SearchKit 1.3.0 (1.3.0) <A710A552-4343-3811-94DA-04F0E8A2AD93> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit\n    0x7fff8085b000 -     0x7fff809d2fe7  com.apple.CoreFoundation 6.6.4 (550.42) <770C572A-CF70-168F-F43C-242B9114FCB5> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n    0x7fff809fb000 -     0x7fff80a20ff7  com.apple.CoreVideo 1.6.2 (45.6) <E138C8E7-3CB6-55A9-0A2C-B73FE63EA288> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo\n    0x7fff80a21000 -     0x7fff80a42fff  libresolv.9.dylib 41.0.0 (compatibility 1.0.0) <6993F348-428F-C97E-7A84-7BD2EDC46A62> /usr/lib/libresolv.9.dylib\n    0x7fff80a89000 -     0x7fff80ba2fef  libGLProgrammability.dylib ??? (???) <4F2DC233-7DD2-1204-CAA5-3E6524F0AB75> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLProgrammability.dylib\n    0x7fff80cab000 -     0x7fff80ce6fff  com.apple.AE 496.4 (496.4) <CBEDB6A1-FD85-F842-4EB8-CC289FAE0F24> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE\n    0x7fff80ce7000 -     0x7fff80da0fff  libsqlite3.dylib 9.6.0 (compatibility 9.0.0) <2C5ED312-E646-9ADE-73A9-6199A2A43150> /usr/lib/libsqlite3.dylib\n    0x7fff812a6000 -     0x7fff812bffff  com.apple.CFOpenDirectory 10.6 (10.6) <CCF79716-7CC6-2520-C6EB-A4F56AD0A207> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory\n    0x7fff81343000 -     0x7fff81386ff7  libRIP.A.dylib 545.0.0 (compatibility 64.0.0) <7E30B5F6-99FD-C716-8670-5DD4B4BAED72> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libRIP.A.dylib\n    0x7fff81417000 -     0x7fff8142dfff  com.apple.ImageCapture 6.0.1 (6.0.1) <09ABF2E9-D110-71A9-4A6F-8A61B683E936> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture\n    0x7fff81639000 -     0x7fff81685fff  libauto.dylib ??? (???) <F7221B46-DC4F-3153-CE61-7F52C8C293CF> /usr/lib/libauto.dylib\n    0x7fff81686000 -     0x7fff8169cfef  libbsm.0.dylib ??? (???) <37BFB2A4-EBD3-ACBB-89F2-3C158B262A72> /usr/lib/libbsm.0.dylib\n    0x7fff816b3000 -     0x7fff816d3ff7  com.apple.DirectoryService.Framework 3.6 (621.9) <FF6567B5-56BD-F3EC-E59D-1EC583C3CF73> /System/Library/Frameworks/DirectoryService.framework/Versions/A/DirectoryService\n    0x7fff8179a000 -     0x7fff8179bfff  liblangid.dylib ??? (???) <EA4D1607-2BD5-2EE2-2A3B-632EEE5A444D> /usr/lib/liblangid.dylib\n    0x7fff817dc000 -     0x7fff817dcff7  com.apple.vecLib 3.6 (vecLib 3.6) <08D3D45D-908B-B86A-00BA-0F978D2702A7> /System/Library/Frameworks/vecLib.framework/Versions/A/vecLib\n    0x7fff817dd000 -     0x7fff817deff7  com.apple.TrustEvaluationAgent 1.1 (1) <51867586-1C71-AE37-EAAD-535A58DD3550> /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent\n    0x7fff81930000 -     0x7fff81961fff  libGLImage.dylib ??? (???) <1A8E58CF-FA2F-14F7-A097-D34EEA8A7D03> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib\n    0x7fff81ae0000 -     0x7fff81ae5fff  libGFXShared.dylib ??? (???) <991F8197-FD06-2AF1-F99B-E448ED4FB2AC> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib\n    0x7fff81ae6000 -     0x7fff821e306f  com.apple.CoreGraphics 1.545.0 (???) <356D59D6-1DD1-8BFF-F9B3-1CE51D2F1EC7> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\n    0x7fff821e4000 -     0x7fff8222cff7  libvDSP.dylib 268.0.1 (compatibility 1.0.0) <170DE04F-89AB-E295-0880-D69CAFBD7979> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib\n    0x7fff8227d000 -     0x7fff8227dff7  com.apple.Accelerate 1.6 (Accelerate 1.6) <2BB7D669-4B40-6A52-ADBD-DA4DB3BC0B1B> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate\n    0x7fff8227e000 -     0x7fff82280fff  com.apple.print.framework.Print 6.1 (237.1) <CA8564FB-B366-7413-B12E-9892DA3C6157> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print\n    0x7fff82281000 -     0x7fff822ebfe7  libvMisc.dylib 268.0.1 (compatibility 1.0.0) <75A8D840-4ACE-6560-0889-2AFB6BE08E59> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib\n    0x7fff822ec000 -     0x7fff8234cfe7  com.apple.framework.IOKit 2.0 (???) <D107CB8A-5182-3AC4-35D0-07068A695C05> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n    0x7fff8234d000 -     0x7fff82350fff  com.apple.help 1.3.1 (41) <E72514A1-B253-4CB6-5B69-E922F119AB08> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help\n    0x7fff8236c000 -     0x7fff8236fff7  com.apple.securityhi 4.0 (36638) <38935851-09E4-DDAB-DB1D-30ADC39F7ED0> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI\n    0x7fff82370000 -     0x7fff82375ff7  com.apple.CommonPanels 1.2.4 (91) <4D84803B-BD06-D80E-15AE-EFBE43F93605> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels\n    0x7fff82403000 -     0x7fff824c4fe7  libFontParser.dylib ??? (???) <8B12D37E-3A95-5A73-509C-3AA991E0C546> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib\n    0x7fff8250b000 -     0x7fff8250eff7  libCoreVMClient.dylib ??? (???) <609598E6-195D-E5D4-3B92-AE8D9768829C> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib\n    0x7fff8250f000 -     0x7fff826c6fef  com.apple.ImageIO.framework 3.0.4 (3.0.4) <2CB9997A-A28D-80BC-5921-E7D50BBCACA7> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/ImageIO\n    0x7fff826c7000 -     0x7fff82704ff7  libFontRegistry.dylib ??? (???) <8C69F685-3507-1B8F-51AD-6183D5E88979> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib\n    0x7fff82705000 -     0x7fff82784fe7  com.apple.audio.CoreAudio 3.2.6 (3.2.6) <1DD64A62-0DE4-223F-F781-B272FECF80F0> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\n    0x7fff82792000 -     0x7fff827a6fff  libGL.dylib ??? (???) <1EB1BD0F-C17F-55DF-B8B4-8E9CF99359D4> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib\n    0x7fff827a7000 -     0x7fff82856fff  edu.mit.Kerberos 6.5.10 (6.5.10) <F3F76EDF-5660-78F0-FE6E-33B6174F55A4> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos\n    0x7fff82930000 -     0x7fff82aaeff7  com.apple.WebKit 6533.20 (6533.20.25) <7AFA5FA8-C044-A000-B666-59DAF1CCFF90> /System/Library/Frameworks/WebKit.framework/Versions/A/WebKit\n    0x7fff82abf000 -     0x7fff82be5fff  com.apple.audio.toolbox.AudioToolbox 1.6.5 (1.6.5) <B51023BB-A5C9-3C65-268B-6B86B901BB2C> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox\n    0x7fff82be6000 -     0x7fff82ee4fe7  com.apple.HIToolbox 1.6.4 (???) <263AD497-F4CC-9610-E7D3-B95CF6F02030> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox\n    0x7fff82ee5000 -     0x7fff82f02ff7  libPng.dylib ??? (???) <14043CBC-329F-4009-299E-DEE411E16134> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib\n    0x7fff82f03000 -     0x7fff82fb8fe7  com.apple.ink.framework 1.3.3 (107) <FFC46EE0-3544-A459-2AB9-94778A75E3D4> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink\n    0x7fff830ff000 -     0x7fff83122fff  com.apple.opencl 12.3 (12.3) <D30A45FC-4520-45AF-3CA5-092313DB5D54> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL\n    0x7fff83123000 -     0x7fff83208fef  com.apple.DesktopServices 1.5.9 (1.5.9) <27890B2C-0CD2-7C27-9D0C-D5952C5E8438> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv\n    0x7fff83209000 -     0x7fff8320efff  libGIF.dylib ??? (???) <9A2723D8-61F9-6D65-D254-4F9273CDA54A> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\n    0x7fff8320f000 -     0x7fff83250fff  com.apple.SystemConfiguration 1.10.5 (1.10.2) <FB39F09C-57BB-D8CC-348D-93E00C602F7D> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\n    0x7fff83251000 -     0x7fff83279fff  com.apple.DictionaryServices 1.1.2 (1.1.2) <E9269069-93FA-2B71-F9BA-FDDD23C4A65E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices\n    0x7fff8327a000 -     0x7fff8327aff7  com.apple.Carbon 150 (152) <19B37B7B-1594-AD0A-7F14-FA2F85AD7241> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon\n    0x7fff8327b000 -     0x7fff83331fff  libobjc.A.dylib 227.0.0 (compatibility 1.0.0) <F206BE6D-8777-AE6C-B367-7BEA76C14241> /usr/lib/libobjc.A.dylib\n    0x7fff83332000 -     0x7fff83336ff7  libCGXType.A.dylib 545.0.0 (compatibility 64.0.0) <63F77AC8-84CB-0C2F-8D2B-190EE5CCDB45> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXType.A.dylib\n    0x7fff83337000 -     0x7fff8333dff7  com.apple.CommerceCore 1.0 (6) <E8A1144C-5666-9840-4729-256FE69CDBDB> /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Frameworks/CommerceCore.framework/Versions/A/CommerceCore\n    0x7fff8333e000 -     0x7fff83353ff7  com.apple.LangAnalysis 1.6.6 (1.6.6) <DC999B32-BF41-94C8-0583-27D9AB463E8B> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis\n    0x7fff83394000 -     0x7fff834d2fff  com.apple.CoreData 102.1 (251) <32233D4D-00B7-CE14-C881-6BF19FD05A03> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData\n    0x7fff834d8000 -     0x7fff834e6ff7  libkxld.dylib ??? (???) <4016E9E6-0645-5384-A697-2775B5228113> /usr/lib/system/libkxld.dylib\n    0x7fff834e7000 -     0x7fff8381bfff  com.apple.CoreServices.CarbonCore 861.23 (861.23) <08F360FA-1771-4F0B-F356-BEF68BB9D421> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore\n    0x7fff83b68000 -     0x7fff83c3afe7  com.apple.CFNetwork 454.11.5 (454.11.5) <B3E2BE12-D7AA-5940-632A-1E5E7BF8E6E3> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\n    0x7fff84064000 -     0x7fff840aeff7  com.apple.Metadata 10.6.3 (507.15) <5170FCE0-ED6C-2E3E-AB28-1DDE3F628FC5> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata\n    0x7fff841ec000 -     0x7fff84217ff7  libxslt.1.dylib 3.24.0 (compatibility 3.0.0) <87A0B228-B24A-C426-C3FB-B40D7258DD49> /usr/lib/libxslt.1.dylib\n    0x7fff84218000 -     0x7fff84225fe7  libCSync.A.dylib 545.0.0 (compatibility 64.0.0) <397B9057-5CDF-3B19-4E61-9DFD49369375> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCSync.A.dylib\n    0x7fff84226000 -     0x7fff84228fff  libRadiance.dylib ??? (???) <76438F90-DD4B-9941-9367-F2DFDF927876> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib\n    0x7fff84229000 -     0x7fff8426afef  com.apple.QD 3.36 (???) <5DC41E81-32C9-65B2-5528-B33E934D5BB4> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD\n    0x7fff84449000 -     0x7fff8444fff7  com.apple.DiskArbitration 2.3 (2.3) <857F6E43-1EF4-7D53-351B-10DE0A8F992A> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\n    0x7fff84450000 -     0x7fff84611fff  libSystem.B.dylib 125.2.1 (compatibility 1.0.0) <71E6D4C9-F945-6EC2-998C-D61AD590DAB6> /usr/lib/libSystem.B.dylib\n    0x7fff8461e000 -     0x7fff848a1ff7  com.apple.Foundation 6.6.4 (751.42) <9A99D378-E97A-8C0F-3857-D0FAA30FCDD5> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\n    0x7fff848a2000 -     0x7fff84c3ffe7  com.apple.QuartzCore 1.6.3 (227.34) <215222AF-B30A-7CE5-C46C-1A766C1D1D2E> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore\n    0x7fff84c40000 -     0x7fff84cccfef  SecurityFoundation ??? (???) <6860DE26-0D42-D1E8-CD7C-5B42D78C1E1D> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation\n    0x7fff84ccd000 -     0x7fff84ccdff7  com.apple.Cocoa 6.6 (???) <68B0BE46-6E24-C96F-B341-054CF9E8F3B6> /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa\n    0x7fff84cce000 -     0x7fff84ce2ff7  com.apple.speech.synthesis.framework 3.10.35 (3.10.35) <B932F6B1-38D0-A864-1CC5-ABC77E653F91> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis\n    0x7fff84ce3000 -     0x7fff84ceafff  com.apple.OpenDirectory 10.6 (10.6) <4200CFB0-DBA1-62B8-7C7C-91446D89551F> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory\n    0x7fff84d9d000 -     0x7fff851e1fef  libLAPACK.dylib 219.0.0 (compatibility 1.0.0) <E14EC4C6-B055-A4AC-B971-42AB644E4A7C> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\n    0x7fff851e2000 -     0x7fff8527cfff  com.apple.ApplicationServices.ATS 4.4 (???) <395849EE-244A-7323-6CBA-E71E3B722984> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS\n    0x7fff8527d000 -     0x7fff8527dff7  com.apple.ApplicationServices 38 (38) <10A0B9E9-4988-03D4-FC56-DDE231A02C63> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\n    0x7fff8527e000 -     0x7fff8528dfff  com.apple.NetFS 3.2.1 (3.2.1) <FF21DB1E-F425-1005-FB70-BC19CAF4006E> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS\n    0x7fff8528e000 -     0x7fff852a4fe7  com.apple.MultitouchSupport.framework 207.10 (207.10) <1828C264-A54A-7FDD-FE1B-49DDE3F50779> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport\n    0x7fff852a5000 -     0x7fff852a5ff7  com.apple.CoreServices 44 (44) <DC7400FB-851E-7B8A-5BF6-6F50094302FB> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\n    0x7fff852a6000 -     0x7fff85363ff7  com.apple.CoreServices.OSServices 357 (357) <718F0719-DC9F-E392-7C64-9D7DFE3D02E2> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices\n    0x7fff85366000 -     0x7fff85378fe7  libsasl2.2.dylib 3.15.0 (compatibility 3.0.0) <76B83C8D-8EFE-4467-0F75-275648AFED97> /usr/lib/libsasl2.2.dylib\n    0x7fff8537a000 -     0x7fff85d70fff  com.apple.AppKit 6.6.7 (1038.35) <9F4DF818-9DB9-98DA-490C-EF29EA757A97> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n    0x7fff85d71000 -     0x7fff85d8cff7  com.apple.openscripting 1.3.1 (???) <FD46A0FE-AC79-3EF7-AB4F-396D376DDE71> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting\n    0x7fff85eff000 -     0x7fff85f03ff7  libmathCommon.A.dylib 315.0.0 (compatibility 1.0.0) <95718673-FEEE-B6ED-B127-BCDBDB60D4E5> /usr/lib/system/libmathCommon.A.dylib\n    0x7fff861a0000 -     0x7fff861a1ff7  com.apple.audio.units.AudioUnit 1.6.5 (1.6.5) <14F14B5E-9287-BC36-0C3F-6592E6696CD4> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit\n    0x7fff861a2000 -     0x7fff86360fff  libicucore.A.dylib 40.0.0 (compatibility 1.0.0) <781E7B63-2AD0-E9BA-927C-4521DB616D02> /usr/lib/libicucore.A.dylib\n    0x7fff86361000 -     0x7fff86361ff7  com.apple.Accelerate.vecLib 3.6 (vecLib 3.6) <DA9BFF01-40DF-EBD5-ABB7-787DAF2D77CF> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib\n    0x7fff863ac000 -     0x7fff863e5fef  libcups.2.dylib 2.8.0 (compatibility 2.0.0) <561D0DCB-47AD-A12C-9066-70E4CBAD331C> /usr/lib/libcups.2.dylib\n    0x7fff869ef000 -     0x7fff86a3eff7  com.apple.DirectoryService.PasswordServerFramework 6.0 (6.0) <EC285E85-51EF-7977-7D7A-0FB4BC645E8B> /System/Library/PrivateFrameworks/PasswordServer.framework/Versions/A/PasswordServer\n    0x7fff86a46000 -     0x7fff86afbfe7  com.apple.ColorSync 4.6.3 (4.6.3) <AA93AD96-6974-9104-BF55-AF7A813C8A1B> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync\n    0x7fff86afc000 -     0x7fff86b07ff7  com.apple.speech.recognition.framework 3.11.1 (3.11.1) <F0DDF27E-DB55-07CE-E548-C62095BE8167> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition\n    0x7fff86b08000 -     0x7fff86b19ff7  libz.1.dylib 1.2.3 (compatibility 1.0.0) <FB5EE53A-0534-0FFA-B2ED-486609433717> /usr/lib/libz.1.dylib\n    0x7fff86b1a000 -     0x7fff86b20ff7  IOSurface ??? (???) <04EDCEDE-E36F-15F8-DC67-E61E149D2C9A> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface\n    0x7fff86b21000 -     0x7fff86b73ff7  com.apple.HIServices 1.8.2 (???) <7C91D07D-FA20-0882-632F-0CAE4FAC2B79> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices\n    0x7fff86b74000 -     0x7fff86f4efff  com.apple.RawCamera.bundle 3.4.1 (546) <F7865FD2-4869-AB19-10AA-EFF1B3BC4178> /System/Library/CoreServices/RawCamera.bundle/Contents/MacOS/RawCamera\n    0x7fff86f93000 -     0x7fff86fdaff7  com.apple.coreui 2 (114) <D7645B59-0431-6283-7322-957D944DAB21> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI\n    0x7fff86fdb000 -     0x7fff870fcfe7  libcrypto.0.9.8.dylib 0.9.8 (compatibility 0.9.8) <48AEAFE1-21F4-B3C8-4199-35AD5E8D0613> /usr/lib/libcrypto.0.9.8.dylib\n    0x7fff870fd000 -     0x7fff872edfef  com.apple.JavaScriptCore 6533.20 (6533.20.20) <0AA8B101-C02C-0858-84BC-4E4D397E0231> /System/Library/Frameworks/JavaScriptCore.framework/Versions/A/JavaScriptCore\n    0x7fff873d8000 -     0x7fff8740afff  libTrueTypeScaler.dylib ??? (???) <B9ECE1BD-A716-9F65-6466-4444D641F584> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libTrueTypeScaler.dylib\n    0x7fff87534000 -     0x7fff8760eff7  com.apple.vImage 4.0 (4.0) <354F34BF-B221-A3C9-2CA7-9BE5E14AD5AD> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage\n    0x7fff8760f000 -     0x7fff87694ff7  com.apple.print.framework.PrintCore 6.3 (312.7) <CDFE82DD-D811-A091-179F-6E76069B432D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore\n    0x7fff876e2000 -     0x7fff87eecfe7  libBLAS.dylib 219.0.0 (compatibility 1.0.0) <EEE5CE62-9155-6559-2AEA-05CED0F5B0F1> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\n    0x7fff87f22000 -     0x7fff8801aff7  libiconv.2.dylib 7.0.0 (compatibility 7.0.0) <7E4ADB5A-CC77-DCFD-3E54-2F35A2C8D95A> /usr/lib/libiconv.2.dylib\n    0x7fff88084000 -     0x7fff88cfffef  com.apple.WebCore 6533.20 (6533.20.24) <D2474418-DABB-7604-D3B9-FE1E03207765> /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore\n    0x7fff88d00000 -     0x7fff88d55ff7  com.apple.framework.familycontrols 2.0.2 (2020) <A3CFF697-B9DB-A7E5-3B39-9DA9B34F0595> /System/Library/PrivateFrameworks/FamilyControls.framework/Versions/A/FamilyControls\n    0x7fff88d56000 -     0x7fff88e6dfef  libxml2.2.dylib 10.3.0 (compatibility 10.0.0) <EE067D7E-15B3-F043-6FBD-10BA31FE76C7> /usr/lib/libxml2.2.dylib\n    0x7fff88e6e000 -     0x7fff88e7dfff  com.apple.opengl 1.6.12 (1.6.12) <DE3F0528-7759-CDFD-A2CF-C51D3C9C8B39> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\n    0x7fffffe00000 -     0x7fffffe01fff  libSystem.B.dylib ??? (???) <71E6D4C9-F945-6EC2-998C-D61AD590DAB6> /usr/lib/libSystem.B.dylib\n\nModel: MacBook6,1, BootROM MB61.00C8.B00, 2 processors, Intel Core 2 Duo, 2.26 GHz, 4 GB, SMC 1.51f53\nGraphics: NVIDIA GeForce 9400M, NVIDIA GeForce 9400M, PCI, 256 MB\nMemory Module: global_name\nAirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x93), Broadcom BCM43xx 1.0 (5.10.131.36.1)\nBluetooth: Version 2.3.8f7, 2 service, 19 devices, 1 incoming serial ports\nNetwork Service: Ethernet, Ethernet, en0\nSerial ATA Device: Hitachi HTS545025B9SA02, 232.89 GB\nSerial ATA Device: MATSHITADVD-R   UJ-898\nUSB Device: iPod, 0x05ac  (Apple Inc.), 0x1299, 0x24100000\nUSB Device: Built-in iSight, 0x05ac  (Apple Inc.), 0x8507, 0x24400000\nUSB Device: USB2.0 Hub, 0x05e3  (Genesys Logic, Inc.), 0x0608, 0x26200000\nUSB Device: USB Device, 0x09da  (A-FOUR TECH CO., LTD.), 0x9090, 0x26240000\nUSB Device: Composite Device, 0x04f3  (ELAN Microelectronics Corportation), 0x0103, 0x26210000\nUSB Device: BRCM2070 Hub, 0x0a5c  (Broadcom Corp.), 0x4500, 0x06100000\nUSB Device: Bluetooth Module, 0x05ac  (Apple Inc.), 0x8218, 0x06130000\nUSB Device: Apple Internal Keyboard / Trackpad, 0x05ac  (Apple Inc.), 0x0237, 0x04600000\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "burdges": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/936829", "body": "There is also a slight issue that hide window does not hide the window when first pressed on the keyboard or clicked on the dock, instead the window's elevation is altered.  If the hide button has previously been pressed, then pressing it again successfully hides the window.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/936829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Natanael90": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937950", "body": "You might want to include various options.\n\nExample mailto: URL:\nmailto: astark1@ unl.edu?subject=MailTo%20Comments&cc=ASTARK1@UNL.EDU&bcc=id@internet.node\n(From http://www.ianr.unl.edu/internet/mailto.html, spaces inserted to not be interpreted as link)\n\nPossible bitcoin URL scheme:\nbitcoin:1GJKkkdc6cnriW6CFsi2gxrTME1CJzcfpo?btc=10.5&msg=Test%20transfer&randomwhatever=something\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mburns": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940365", "body": "You can get Bitcoin.app to load by deleting the Bitcoin folder in ~/Library/Application Support/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gjs278": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949658", "body": "1. newline is fine idea, I'll throw in a \\n\n2. the pid always seems to match the bitcoind -server process for me so I believe it is accurate\n3. this I realized as soon as I did the pull request. do you know a crossplatform method I should use to delete the file? I always run into trouble with unlink and stuff when I hit win32 platforms. thanks.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rkfg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/967532", "body": "Wow, glad you're working on it. Do you plan to release it for 0.3.21?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/967532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hbons": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398363", "body": "typo: 'antwoord'\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398365", "body": "Portefeuille isn't capitalised elsewhere...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/398365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "andyparkins": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475010", "body": "Does the key memory allocated in key.h by OpenSSL in EC_KEY_generate_key() need mlock()ing too?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475050", "body": "I'll have a go.  I'm not entirely clear on which call triggers the memory allocation though.  Is it in MakeNewKey() or CKey(); does EC_regenerate_key() allocate new memory?  The OpenSSL documentation is seemingly non-existent for EC_xxx functions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475093", "body": "I wasn't thinking of altering OpenSSL; more like calling mlock() in a CKey member.\n\n```\nCKey()\n{\n    pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n    if (pkey == NULL)\n        throw key_error(\"CKey::CKey() : EC_KEY_new_by_curve_name failed\");\n    mlock( pkey, sizeof( *pkey ) );\n    fSet = false;\n}\n```\n\nBut that's not going to work because EC_KEY isn't an exported structure, so sizeof() won't work; nor is there any way to see what internal memory structures in EC_KEY have been allocated.\n\nBah.\n\nSomeone else must have solved this already.  I'll have a search.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475142", "body": "A bit of poking and I've found `CRYPTO_malloc_locked()` in `crypto/mem.c`. It looks like its only called for RSA though.\n\nChanging plain `malloc()` for the whole of OpenSSL seems like a mistake as it would make every single byte of memory allocated by OpenSSL locked.  That doesn't seem wise.  It looks like the EC allocation is done in `EC_GROUP_new()` with `OPENSSL_malloc()`.  I have no idea what part of that structure even holds the private key.\n\nOkay; I'm giving up now.  OpenSSL is making my brain hurt.\n\nThe private key will have to be swappable, through no fault of bitcoin's.\n\nSorry to have wasted your time.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sgimenez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475074", "body": "I think this GetArg is not appropriate here, the return value from TopUpKeyPool() should be used instead.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475113", "body": "Then, add this test at the end of TopUpKeyPool.\nIntruding CWallet internals from rpc.cpp is just bad, IMHO.\n\nPublic interfaces between pieces of code are so blurry in bitcoin code...\nThis is just one more example.\n(But maybe C++ is the one to blame here)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/475113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "casascius": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562434", "body": "This edit states that the \"default key\" will be used as the target for payouts for mining.  If this is correct, then it might be problematic and could result in a loss of funds to miners.  When miners mine more than one block using the same payout address, the coinbase transactions in each block are identical, which results in them having an identical sha256 hash, which results in all but the first one being unidentifiable and hence unspendable.  I suppose you might be aware of that, but wanted to point this out just to prevent the possibility of it being an expensive consequence for somebody else.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/562434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "n1bor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578270", "body": "Careful with this one as 60% of listening servers are 3.23 - http://bitcoinstatus.rowit.co.uk/versionsDay.png, so could overload others?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/578270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "prusnak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/622342", "body": "should be USE_SSL instead of USE_DBUS\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/622342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "globalcitizen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640232", "body": "Hey, it works - why not include relevant info in the docs? If you had a ./configure it wouldn't be necessary. As it stands, apt-get information is useless for users of other distributions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640239", "body": "Let me see if I understood you. First, you are suggesting that:\nUSE_UPNP:=0\n\nShould become:\nUSE_UPNP:=0\nUSE_UPNP:=\n\nInstead of:\nUSE_UPNP:=\n\nIf I understood you right, I don't think that really makes any difference.\n\nSecondly, updating the docs to tell someone to sed the makefile is quicker than explaining in human language that they need to change a certain line a certain way. As they stand, the sed lines are both a clear explanation and a copy-pastable script for executing the required changes. In my case, I had to trawl the internet to figure out that changing -Bstatic to -Bdynamic was probably necessary in my case.\n\nFinally, the reason for the UPnP change is that I was unable to figure out how to get bitcoind to build against gentoo's miniupnpc library at all. So I just threw it in there. In my case, I don't care about UPnP anyway. I'm sure that in due course someone will provide a fix. But the first step is helping people to build, and in my view having _some_ documentation that is relevant to people's environment is a lot better than having _none_.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640265", "body": "OK I will try to change the makefile to enable dynamic/static selection as an option at the top of the file, and include a reference in the Gentoo section of the documentation to using that feature.\n\nHowever, I am not sure how to make the path change in the makefile alone to have the include of db4.8/db_cxx.h succeed in order to replace that sed line. If you give me an explanation of that part I'll add it too (in a generic way) and also include a reference to that in the Gentoo section.\n\nEnd result: improved makefile, no 'sed' magic in the docs. OK?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640277", "body": "OK so that solves static/dynamic. What about the other requirements: miniupnpc doesn't seem to build (though I have found a possible resource for resolving that now), and the BDB 'db4.8' path issue?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640288", "body": "OK perfect.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/640288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Rooke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/946571", "body": "You left the Satoshi copyright intact in all the files save this one. I'm going to guess this was a mistake.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/946571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "xanatos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/946893", "body": "There are three 20011 (one too much zero)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/946893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Diapolo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1096726", "body": "Does this mean -server is not usable for bitcoin-qt.exe and is disabled in RC4 or that it got fixed and will work? Sorry for the dumb question, but the merge description is a bit unclear to me :D.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1096726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1117394", "body": "I found that one two, during my tests to get it compile on Windows ;).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1117394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1122522", "body": "The removal of an untranslated and conflicting translation file.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1122522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1188551", "body": "I can't reproduce this error http://jenkins.bluematt.me/job/Bitcoin/273/console is this happening for someone else, too?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1188551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189512", "body": "From http://www.boost.org/doc/libs/1_45_0/libs/filesystem/v3/doc/tutorial.html#Class-path-formats:\n\nClass path uses / and /= operators to append elements. That's a reminder that these operations append the operating system's preferred directory separator if needed. The preferred directory separator is a slash on POSIX-like systems, and a backslash on Windows-like systems.\n\nSo yes, I will create a new pull request to change this! Thank you sipa.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189623", "body": "I know, Gavin told me ... but .make_preferred() is definately in boost 1.47 and compiles just fine on Windows. I'm currently updating as sipa had some further suggestions. Have you got an idea what causes that strange error?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189663", "body": "I already startet and have some fs code in the pipe, too ^^ ... damn.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189713", "body": "Alright, but I'm sure for the official releases boost 1.47 is used ... why is this not even?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189784", "body": "That makes it not easier in the end ;).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1189784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1199602", "body": "Yeah my prayer was heard, thanks so much :). How little things can make me happy ^^.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1199602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1203386", "body": "Even if this is whole mining code is currently unused, why is there a dwPrev1 and dwPrev2? dwPrev1 is reported as unused var, if I enable this type of compiler warning.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1203386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1203530", "body": "That was fast, wow :D.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1203530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1240628", "body": "Why the change to static here? This seems to generate a lot of \"boost::filesystem3::path StartupShortcutPath(bool)' declared 'static' but never defined [-Wunused-function]\" warnings.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1240628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1241285", "body": "After that change the en master lang file needs an update (as this removes the old translations for that string), so I suggest to push another lang update to Transifex during the 0.6.1 RC phase!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1241285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1298795", "body": "@laanwj I really dislike support for older Qt versions, what reason have we to support such old versions (4.8.1 is the latest)? No offence, you were right to revert the change, just want to understand :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1298795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1299301", "body": "Understood!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1299301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1303905", "body": "https://github.com/bitcoin/bitcoin/blob/1f7e0e51aa2ae6e1aafed52731a4a0fe714a3657/src/qt/optionsdialog.cpp#L216\nThat line has 2 unneded spaces in it, while this one was correct ;). Currently the correct translation is in the .ts files, so I suggest to change Line216 to the removed string.\n\nCreated a pull for this:\nhttps://github.com/bitcoin/bitcoin/pull/1221\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1303905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1307401", "body": "First look ... it rocks! Guess it will mature and get better even more ... that's the way I as Windows user want to use the RPC part ^^. Great @laanwj!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1307401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1308966", "body": "Do I need to compile with USE_IPV6=1 to enable IPv6 support or is it active per default?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1308966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1319285", "body": "I get a strange error when I merge this to my local build:\nguiutil.o:guiutil.cpp:(.text+0x5a): undefined reference to 'vtable for GUIUtil::ToolTipToRichTextFilter'\nguiutil.o:guiutil.cpp:(.text+0xa2): undefined reference to 'vtable for GUIUtil::ToolTipToRichTextFilter'\n\n@laanwj Any idea for this?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1319285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1319521", "body": "OMFG ... yes that helped.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1319521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1320946", "body": "Nice, for own builds this makes me getting a nice version string :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1320946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1321532", "body": "Some tabs jumped into this commit, see:\nhttps://github.com/bitcoin/bitcoin/blob/b34c5f3c0f4b37335e27bd67f554cf4df6976116/src/bitcoinrpc.cpp#L119\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1321532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1323272", "body": "This line does not compile on Windows in Qt Creator :-/.\n\n<pre>\nsrc\\init.cpp: In function 'bool AppInit2(int, char**)':\nsrc\\init.cpp:617: error: 'S_un' was not declared in this scope\nsrc\\init.cpp:617: error: expected '}' before ':' token\nsrc\\init.cpp:617: error: expected ',' or ';' before ':' token\nsrc\\init.cpp:617: warning: unused variable 'inaddr_any' [-Wunused-variable]\nsrc\\init.cpp:618: error: 'inaddr_any' was not declared in this scope\nsrc\\init.cpp: At global scope:\nsrc\\init.cpp:627: error: expected unqualified-id before 'if'\n</pre>\n\n\n@sipa: Any idea for this?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1323272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324301", "body": "What are the steps to setup an IPv6 node with a 6to4 address? I tried using -externalip=\"IPv6_address\", but the address doesn't even show up in the log for AddLocal(). I compiled with USE_IPV6=1.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324729", "body": "@sipa: I used \"bitcoin-qt.exe -port=8333 -externalip=\"2002:b0c7:eeee:dddd:aaaa:zzzz:yyyy:xxxx/64\" -blocknet=\"IPv4\" -discover=0\". And I agree, there should be some logging of whats going on network-wise in terms of chosen protocoll and all that.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324772", "body": "@sipa: Is port even used or needed in my case? The weird thing is, that with the above posted command-line the client connects and works. But the log only shows IPv4 addresses ... (that was with master from yesterday, didn't yet try the latest updates).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324792", "body": "@laanwj I remember you complained about this fact some time ago ... I'm doing the same now, the client should not silently ignore passed arguments :D.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324985", "body": "I'm now using latest master and \"-port=8333 -externalip=\"2002:...IPv6_addr\" -blocknet=\"IPv4\" -discover=0\" but still no sign of IPv6 usage in the log. What switches do I need to force IPv6 usage and how can I verify if all is setup correctly?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324996", "body": "But tell me, if is use  -blocknet=\"IPv4\", why does the client work? I understand this option as completely disable IPv4 usage. Have you got an IPv6 address I can try a connection with?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1324996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1325487", "body": "This line gives me: Warning:dereferencing pointer 'sockaddr.1545' does break strict-aliasing rules [-Wstrict-aliasing]!\nIs it in general a good idea to cast sockaddr_storage to sockaddr when using IPv6?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1325487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1343791", "body": "You need to move this from main.h for _commit() to work:\n\n<pre>\n#ifdef WIN32\n#include <io.h> /* for _commit */\n#endif\n</pre>\n\n\nCan pe placed here: https://github.com/bitcoin/bitcoin/blob/768e5d52fb295b000940f6a806c3d4bfc3e4f54d/src/util.cpp#L49\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1343791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1343802", "body": "This should be MoveFileExA() (ANSI) or it wont compile.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1343802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346878", "body": "What wonders me is, that it was inside an #ifdef in bitcoin.cpp, too ... only change is that I use the _strnicmp version here.\nShould that #define in bitcoin.cpp be out of the WIN32 #ifdef, too? Can you verify this fixes compilation before I re-open the pull?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346910", "body": "OMG what a bug ... you are right. Seems it was too late yesterday.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346941", "body": "Problem detected, thanks @laanwj opened a fixed pull.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1346941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1365198", "body": "What about adding this when serializing? Can this be not a cause for errors, too?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1365198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1380641", "body": "In my oppinion it's bad that such \"big\" changes are not better commented or documented.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1380641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1381513", "body": "This line was not there before, was the former code bugged  /was that missing?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1381513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1438703", "body": "I'm sure there is another place in the code, where this would be needed then ...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1438703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1438751", "body": "In util.cpp we include \"shlobj.h\", too ... I wonder why your changes are not needed there, too?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1438751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1566391", "body": "Could it be you created the new en master file before doing the bitcoinstrings.cpp update? Seems some strings are missing in the master file ... well not a problem, as most likely we have to update it at least once more before 0.7 get's final in the near future ^^.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1566391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1566442", "body": "You are right, my fault here, sorry!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1566442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1590529", "body": "Sorry to mention this late, but this thread is NOT the message handling thread :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1590529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1604481", "body": "Damn, I searched half an hour to find the commit, who removed this one :D.\n\nI observed, when this is not present and the system() call in the last line is removed, no *.qm files are generated when doing a full deployment in Qt Creator. This leads me to the question, if this whole block is needed anyway? Seems we build our .qm files at the end when qmake parses our project file.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1604481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1604795", "body": "I want to clarify, too :).\n\nWhen you comment out `system($$QMAKE_LRELEASE -silent $$_PRO_FILE_)` and let Qt Creator do the `qmake.exe` pass followed by (on Windows for me) `mingw32-make.exe` there are NO .qm files generated.\n\nWhen you re-add `PRE_TARGETDEPS += compiler_TSQM_make_all` into the .pro file and do `qmake.exe` followed by `mingw32-make.exe`, then the .qm files ARE generated (but not by qmake, as the system-call is commented out).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1604795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607662", "body": "@laanwj You removed the system call and get .qm files? Now that is strange ... what IDE / Qt / compiler are you using?\n\nEdit:\n <pre>If you leave out the PRE_TARGETDEPS = ..., the target you defined will not be automatically execute during builds. But you will be able to type in your shell: make xyz</pre>\nhttp://dev.modmancer.com/index.php/2010/11/14/qmake-building-dependencies/\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607724", "body": "But that is what I'm trying to tell you :-D.\n\n<pre>\nTSQM.name = lrelease ${QMAKE_FILE_IN}\nTSQM.input = TRANSLATIONS\nTSQM.output = $$QM_DIR/${QMAKE_FILE_BASE}.qm\nTSQM.commands = $$QMAKE_LRELEASE ${QMAKE_FILE_IN} -qm ${QMAKE_FILE_OUT}\nTSQM.CONFIG = no_link\nQMAKE_EXTRA_COMPILERS += TSQM\n</pre>\n\n\nThis whole block, does nothing for me, without the `PRE_TARGETDEPS += compiler_TSQM_make_all` line, WHEN the system call would be removed. I did the same steps you did:\n\nqmake -> remove .qm files -> mingw32-make.exe -> .qm files re-appear\n\nwithout the system-call:\nqmake -> warnings -> no .qm files -> mingw32-make.exe -> still no .qm files\n\nNow, when adding the `PRE_TARGETDEPS += compiler_TSQM_make_all` to the .pro (still without system-call):\nqmake -> warnings -> no .qm files -> mingw32-make.exe -> .qm files are generated\n\nI just wanted to mention I think this is a weird behaviour in the end. Would be nice, if we did not have to rely on that system-call, as this always produces a warning on Windows, saying `Der Verzeichnisname ist ung\u0081ltig.`.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607903", "body": "Yeah, the warnings are damn ugly and suck ... but when parsing our Qt resource-file, while the .qm files are missing seems to always lead to this error. But it's kinda bumpy the way we need to handle the .qm generation. Currently I have no better way too ... does re-adding `PRE_TARGETDEPS += compiler_TSQM_make_all` slow down build process in the end? It seems a bit more correct to have it in.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1607903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1636350", "body": "Sorry to ask, but what does this do? I see a single comment in the non-test code ;).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1636350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1732458", "body": "@laanwj If we want this for bitcoind.exe on Windows, where do we need to add the linker flags?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1732458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1758119", "body": "That's a nice thing, I had the same idea earlier today ^^.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1758119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1758141", "body": "I'm not able to follow all the code here, but is that TODO a problem here and needs to be looked at?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1758141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1758145", "body": "And this ugly format is here too ... just wanted to mention.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1758145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759749", "body": "Problem here is that it GOT merged -_-.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759810", "body": "I'm sorry and that was no offence, I just don't look into every core related pull, as I often don't have a clue what is happening there ;).\nBut when merging new commits I take a look at it and that is why I saw this in here... would be great if you / Luke can change that!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759894", "body": "Thank you so much!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1759894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1780127", "body": "I like that new comment ^^ and still hope we can update the used compiler :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1780127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1786082", "body": "Small change with a great result :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1786082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1790239", "body": "As you merged it, I assume you are sure it works :)? Nice one for Windows IMO.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1790239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1806381", "body": "@jgarzik\nThis seems still faulty, as we now have 2x `printf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());`\nThe above occurance can now be removed.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1806381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1806390", "body": "Why init this one (with true)? The next call `pwalletMain->LoadWallet(fFirstRun);` set's it to false after a check anyway?\nForget that one, seems true is the correct init value here :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1806390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1809444", "body": "1. I found it nice to have it to be `blk%04u.dat`, just in case.\n2. We have <b>Get</b>DataDir(), so why did you chose to name it <b>BlockFilePath()</b>?\n   ... some nit-picking as you ignored my pull :-D.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1809444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1874318", "body": "I love you ^^!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1874318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1902817", "body": "Why did this get in?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1902817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1908103", "body": "@laanwj Are you already looking into fixing the -Wformat errors or what do you suggest to do about them?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1908103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1932649", "body": "Really, why do people use 2 spaces in such strings? At least this does not move into a translation.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1932649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1975538", "body": "@gavinandresen Will there be a RC-phase or is this preparing the final release without?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1975538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2069408", "body": " I overlooked this one, sorry. Is it an intended change? \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2069408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2071841", "body": "All your coins are belong to us :-P!?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2071841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2091687", "body": "Nice, this should fix the 2 remaining compiler warnings I got :), will test!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2091687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2370785", "body": "@jgarzik There are many more occurances in the code, where a recent commit added that T. Did you intend to remove the T only here?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2370785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371238", "body": "@sipa I like the removal of T, but I also think it should be changed everywhere in the code, like the mentioned commit https://github.com/bitcoin/bitcoin/commit/33766c9557586c508d4239126a61a4b3b460ce1d did.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371258", "body": "@laanwj ACK and welcome back :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371502", "body": "@jgarzik Seems you missed the ones in src/test/util_tests.cpp otherwise looks good.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2507467", "body": "@gavinandresen My compiler is warning me, that now bool static IsFromMe(CTransaction& tx) in main.cpp is unused, that's correct?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2507467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2533429", "body": "How did this sneak in yesterday, I was sure it got merged weeks ago?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2533429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2533643", "body": "Very weird, but thanks for clarification...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2533643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2919068", "body": "@sipa What about the values in `void CDBEnv::MakeMock()`?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2919068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2919122", "body": "@laanwj I'm not sure, but it seems here happened, what should not have happened. Is it still possible to use context menu in the address book to directly access the send coins with the selected address entered?\n\nEdit: Working on a fix :) - see #2437.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2919122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2927846", "body": "@laanwj I'm sorry, but these 2 should then also be the static method still, right :)? I'll create a quick fix if you want.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2927846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2942361", "body": "limitedmap.h is missing in the bitcoin-qt.pro file ;).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2942361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2942404", "body": "@gavinandresen Perhaps I asked that already, but this leads to generating coins, while IBD is in progress, was that intended?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2942404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2942721", "body": "Futher small comment, this patch requires us to keep Boost chrono lib even with versions > 1.50 because the new thread code uses a function of it. No problem, as we already have it in :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2942721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2951462", "body": "Seems the src/qt/res/icons/bitcoin.psd is missing but mentioned in assets-attribution.txt ;).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2951462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3008895", "body": "That commit description will make @jgarzik scream for sure ^^.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3008895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3342231", "body": "That one seems a little weird or missplaced...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3342231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3362367", "body": "AFAIK this is not needed here and seems to have sneaked back in by the Qt5 pull?\nIt's below in macx:HEADERS in my local build?\n\n@jonasschnelli Can you take a look?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3362367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3362578", "body": "Either I did something wrong, or my own Bitcoin-Qt build is currently not starting after this patch and doesn't even create any debug.log. It compiles fine, can't tell what happened yet...\n\nEdit: Sorry, my fault... I wanted to be able to see bitcoind.cpp in Qt Creator IDE and added it into `SOURCES`, which was causing the problem. Removed it and it's working again! Still I would like to see the file in my IDE, so perhaps we should place it under `OTHER_FILES` (@laanwj)?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3362578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3391743", "body": "This is missing a comment what it does :), as we've added this for all other main functions.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3391743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3391748", "body": "Same here...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3391748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3391826", "body": "Was that removal intended?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3391826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3484962", "body": "Seems you included chainparams.h twice...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3484962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3485101", "body": "@mhearn Seems this is too late for Bitcoin-Qt, as we have some checks that rely on testnet for GUI stuff, which break, when I use `TestNet()` over `GetBoolArg(\"-testnet\", false)`.\n\nI think it would better be placed after `ParseParameters(argc, argv);` in bitcoin.cpp?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3485101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3485148", "body": "Can you take a look at #2788, which allows to use TestNet() for Bitcoin-Qt stuff and hopefully doesn't break bitcoind. Perhaps I was not clear enough, what I meant.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3485148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3724003", "body": "That string causes an error when trying to translate it on Transifex, I guess because of the code tag. Can you suggest a re-phrase of it? I'm fine with creating a pull if you are busy :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3724003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3764202", "body": "Thanks for still giving some love to our miner :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3764202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3764219", "body": "@jgarzik Can you add a comment to these 2 functions, as this is IMHO a nice thing in main.h and to match the other comments above function declarations.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3764219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3898976", "body": "@phelixbtc Does this also require changes in bitcoin-qt.pro file for Bitcoin-Qt?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3898976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3930055", "body": "@gavinandresen @laanwj Shouldn't we use `model->getOptionsModel()->getDisplayUnit()` here?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3930055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3984764", "body": "Nice catch, didn't know we have such a function, while working on the Qt5 patch :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3984764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4030291", "body": "I learned that most core devs love short pull-requests with as little commits as possible or valuable. I'm sure I can do better, but to be honest my real problem is I don't know how to rebase a pull when it contains multiple commits and I want to edit/change the first one ^^.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4030291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4030304", "body": "Does this require a clarification for the command-line parameter also?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4030304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4121489", "body": "I do a manual edit of the translation file with Qt Linguist, so that no `unfinished` tags are present.\nYou open the .ts file and use Ctrl + B to insert the original string.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4121489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4121529", "body": "IMHO you should take a look at #2991 and merge that before merging this pull-request, as that would be easier for translators.\nThere were no changes to bitcoinstrings.cpp or is there a problem with the .py script?\n\nGeneral ACK to this pull, sure.\n\nEdit: Didn't see you already merged this, too bad...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4121529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4129635", "body": "No offense, thanks for this pull anyway :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4129635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4131186", "body": "@theuni Any idea for a script or command, to add newly added Transifex translations into `src\\qt\\Makefile.am` to `QT_TS =` section automatically?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4131186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4135748", "body": "So to understand, new translations need to be added to the .qrc and to `src\\qt\\Makefile.am` to `QT_TS =` section? Is this already in the translations doc?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4135748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4195141", "body": "Is such a thing perhaps related to your pruning patches? I recently got 2 of them with builds of latest master one before this patch was merged and now one after...\n\n2013-09-27 07:09:54 ERROR: VerifyDB() : **\\* coin database inconsistencies found (last 162 blocks, 29571 good transactions before that)\n2013-09-27 07:09:57 Aborted block database rebuild. Exiting.\n2013-09-27 07:09:57 StopNode()\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4195141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4257695", "body": "@theuni This seems wrong, to supply `--enable-hardening` when we want do disable it? Can you take a quick look?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4257695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4332835", "body": "@sipa This is now only a LogPrintf(), so that comment is missleading?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4332835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4333978", "body": "@Krellan\nThis generates 2 compiler warnings for me:\nWarning:unknown conversion type character 'z' in format [-Wformat=]\nWarning:too many arguments for format [-Wformat-extra-args]\n\nPatch is #3093\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4333978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976", "body": "That should not be here I guess.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/838976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063", "body": "Sorry, I'm no GIT master :-/. But I never had a pull or commit, where I needed to include .gitignore.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/839063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32378518", "body": "What the hell is that?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32378518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2832316", "body": "@luke-jr See #2217 ^^ someone just needs to do this.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2832316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16025299", "body": "Where is the difference here?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16025299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5807987", "body": "That space seems unneeded and rather ugly ^^.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5807987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8792658", "body": "This seems unwanted...\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8792658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996139", "body": "It is possible to rename this, sure, so I'll count your +1 and will wait for other comments :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996288", "body": "That's one thing I didn't want, as I find it very hard to read if you change that much.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080499", "body": "Sorry guys for the inconvenience, how could I have just renamed the file without replacing it?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186166", "body": "The Boost libs built with `link=static runtime-link=static` specified.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1666076", "body": "Update: Is this one ever used? I asked because we use the C++ compiler only, no?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1666076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1668746", "body": "Just want a yes or no here, as all other compiler flags in the pro-file are `CXX` ones and I want to avoid to add something we don't need here!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1668746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1668803", "body": "And that is, why I vote for removing it :).\n@gavinandresen Would you remove that line from your patch then?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1668803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823288", "body": "So this still includes legacy BDB support? Means we need to keep 2 code-bases up to date.\nWhat was the intention to keep it to be able to revert, just wanna know :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826779", "body": "Thanks, so it would be nice to remove that burden entirely from this pull and the code. If this is a one way ticket there is no need to keep BDB compatibility code in.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827843", "body": "I'm fine with removing that later as long as you / sipa keep track of that.\nThat whole block of commands in the pro-file looks like Vodoo to me anyway :-D.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2525374", "body": "I had to remove the `-ldbghelp` in order to get it compile.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2525374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2551515", "body": "One comment, see line 388, where we also add `shlwapi`. Isn't that a pure Windows thing, where we can use `win32.LIBS += -lshlwapi` here and remove that library from line 388 below?\n\nEdit: I made some tests and could remove that line here and it still links fine, because of line 388 I think :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2551515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2551618", "body": "After `OS_WINDOWS_CROSSCOMPILE` we have an `\"`, I'm not sure this should be in there :).\n\n@sipa Can you remove that?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2551618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2559901", "body": "It' won't hurt, but IMO it would be cleaner to use win32.LIBS.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2559901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2672228", "body": "Is this related to Qt wallets?\n@gavinandresen Should take a look at this changes. I thought we still are after 10.5 compatibility.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2672228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2755314", "body": "Some time ago I wanted to add this switch, but Gavin told me the -all includes this. Perhaps this pull is based on an old version of my pull-request?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2755314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3039127", "body": "Are you sure all these are Linux only?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3039127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3047345", "body": "@gavinandresen \n\nI tried `ld -z,relro`, which leads to:\nld: unrecognized option '-z,relro'\nand `ld -z,now`, which leads to:\nld: unrecognized option '-z,now'\n\nSo these seem to be non present with MinGW. But before these were a QMAKE_CXXFLAGS and now you are using these with LIBS, which is correct? Just asking, as I don't know better :).\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3047345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3047369", "body": "From what I read after a quick websearch, this seems to be available to MinGW, as other projects are using that one also with MinGW.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3047369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3057397", "body": "@gavinandresen What was the reason to not consider or comment my comment above?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3057397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3712443", "body": "We have that dependency in for Windows :D. You need to remove this one then, if the lib should be available for all OSes.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/3712443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "mikehearn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1649123", "body": "You could log the hash of the bad tx here.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1649123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827587", "body": "The original idea was to reduce the risk of merging the code, in case there were issues with LevelDB [on some specific platform] we don't want to hold up the release or do a potentially messy revert.\n\nI agree it's irritating and a burden, but it'd suck if all of ultraprune ended up getting reverted due to unanticipated issues with LevelDB. Once 0.8 has been successfully rolled out to the userbase and things are quiet it could be deleted at that time?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "burger2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1891232", "body": "Good change!\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/1891232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "freewil": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371093", "body": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)? I say keep the T\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371103", "body": "This commit should probably be reverted as it is in direct conflict with commit 33766c9557586c508d4239126a61a4b3b460ce1d\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371578", "body": "Well I don't really want to make this a big deal, but I think abandoning a technical standard because \"it's easier on the eyes\" is a poor choice.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "schildbach": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371166", "body": "Did you talk about time zones as well? ISO 8601 appends a 'Z' for UTC.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371170", "body": "While I admit it's easier for humans to read, it's actually more difficult for machines to parse. This is because time and date are one value, split into two fields in this patch. The 'T' glues both parts together so that only one field is used.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2371170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "petertodd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2562854", "body": "What happened here? I thought I saw this patch as a pull request before.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/2562854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83272863", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83272863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5867166", "body": "Gah, I'd much rather live with having to cut-n-paste in the extremely unlikely chance i actually want to click on bitcoin.org...\n\nIMO just leave it as \"http://www.bitcoin.org\", who cares if some readers don't see the URL?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5867166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5868062", "body": "Yeah, I'd change them back - on most browsers you can select text and right-click to open the link anyway.\n\nI'd guess people reading it on github vs. people reading it in an editor is about 50:50, so don't optimize one at the expense of another. That's why we're using markdown after all.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5868062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mtparet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3191542", "body": "How could you consider something \"non-standard\" ? Where is the p2p economy and the open market ?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3191542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3194767", "body": "@gmaxwell thanks for the explanation :) Since this commit https://github.com/bitcoin/bitcoin/commit/000dc55181f77cd96076c76b2cc13f8bcbe4146e we can set-up different minimal fees and this is well. However it is still weird for me to define these default values in the code because these change in function of the current usage of the Bitcoin. (which is presumably not linked now to the evolution of the source code of this project)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3194767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "TierNolan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3734251", "body": "Another one that might be worth adding is minus zero checks.\n\n```\nnum.SetCompact(0x01800000);\nBOOST_CHECK_EQUAL(num.GetHex(), \"0\");\nBOOST_CHECK_EQUAL(num.GetCompact(), 0); \n```\n\nThis one confirms that the sign bit is ignored for zero length arrays.\n\n```\nnum.SetCompact(0x00800000);\nBOOST_CHECK_EQUAL(num.GetHex(), \"0\");\nBOOST_CHECK_EQUAL(num.GetCompact(), 0); \n```\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3734251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3885149", "body": "I had some problems getting this to work on VirtualBox (Windows 7 home) and I thought it might be helpful to post my workarounds for others.\n\nLxc creates its own bridge (lxcbr0), so I just reconfigured that, rather than setting up br0.\n\nI forced the ip addresses of the bridge to match the expected values.  I set the bridge to 10.0.2.2, as that seems hardcoded as the expected apt cache location.\n\n```\nsudo ifconfig lxcbr0 up 10.0.2.2/29\n```\n\nVirtualBox assigns eth0 an IP of 10.0.2.15 (in NAT mode).  Using the /29 network mask for lxcbr0 means that lxcbr0 doesn't collide with eth0's ip (but the guest's ip of 10.0.2.5 is still part of the subnet).  \n\nIn the end, I set VirtualBox to bridge mode networking, so eth0 got a 192.168.x.y address, so there was no chance of a collision anyway.\n\nI updated gitian-builder/etc/lxc.config.in to use lxcbr0 instead of br0\n\n```\nlxc.network.link = lxcbr0\n```\n\nLater in the build process, the make-base-vm command resets USE_LXC back to zero for the script.  The --lxc flag is needed when running these 2 commands.\n\n```\nbin/make-base-vm --arch amd64 --lxc\nbin/make-base-vm --arch i386 --lxc\n```\n\nI had to delete \"DEBIAN_NONINTERACTIVE\" from gitian-builder/bin/gbuild to get things to work.  I am not sure if that could cause problems.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3885149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3885611", "body": "The qt file for 4.8.3 is at a different location.\n\nhttp://download.qt-project.org/archive/qt/4.8/4.8.3/qt-everywhere-opensource-src-4.8.3.tar.gz\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3885611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "phelixnmc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890179", "body": "Is it possible this bug is still present in makefile.mingw?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "phelixbtc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890446", "body": "I see it in https://github.com/bitcoin/bitcoin/blob/master/src/makefile.linux-mingw but \nnot in https://github.com/bitcoin/bitcoin/blob/master/src/makefile.mingw \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890540", "body": "Unfortunately... I think there are a couple of native win builders around now. IMHO, things should either be fixed or marked as outdated. Will test and create a pull request for makefile.mingw according to your fix.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3890540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3899181", "body": "No, it has them already, this is just a port. As Gavin put it: \"makefile.mingw-linux already has these fixes, just porting them to makefile.mingw.\" (sorry for the double post, noticed just now there are different comments for pull requests and commits)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/3899181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Krellan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4338745", "body": "Thanks Diapolo.  Good catch on the printf arguments.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4338745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "super3": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4385448", "body": "Lots of magic ints here. Might this be better?\n\n```\n int max_btc = 21000000;\n case BTC:  return Q_INT64_C(max_btc);\n case mBTC: return Q_INT64_C(max_btc * 1000);\n case uBTC: return Q_INT64_C(max_btc * 1000000);\n```\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/comments/4385448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5867482", "body": "Unfortunately not. I don't think its too bad, but then again I'm writing it\nso I come with a bias. You are kinda right. It would be nice to have some\nSphinx like docs.\n\nOn Tue, Aug 20, 2013 at 8:41 AM, Luke-Jr notifications@github.com wrote:\n\n> In README.md:\n> \n> > @@ -1,7 +1,7 @@\n> >  Bitcoin integration/staging tree\n> >  ================================\n> > \n> > -http://www.bitcoin.org\n> > +[http://www.bitcoin.org](http://www.bitcoin.org)\n> \n> Does markdown not infer URLs?\n> \n> With this amount of ugliness, might as well use straight HTML... the point\n> of markdown is to still look nice as plain text, right?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/bitcoin/bitcoin/pull/2902/files#r5867096\n> .\n\n## \n\nShawn Wilkinson\nStudent, Morehouse College\nIndependent Web Developer\nme@super3.org\nhttp://super3.org\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5867482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5867672", "body": "I linkified that stuff more for the people who are browsing through on\nGithub. Should I change the external links back? The relative repo links\nare fine, but you and @Luke-Jr don't seems to like the external ones.\n\nWish I knew more about usage of the actual docs, so I know if I need to\ncater to nice Github renderings of markdown, or people actually loading up\nthe raw file in an editor.\n\nOn Tue, Aug 20, 2013 at 8:45 AM, Peter Todd notifications@github.comwrote:\n\n> In README.md:\n> \n> > @@ -1,7 +1,7 @@\n> >  Bitcoin integration/staging tree\n> >  ================================\n> > \n> > -http://www.bitcoin.org\n> > +[http://www.bitcoin.org](http://www.bitcoin.org)\n> \n> Gah, I'd much rather live with having to cut-n-paste in the extremely\n> unlikely chance i actually want to click on bitcoin.org...\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/bitcoin/bitcoin/pull/2902/files#r5867166\n> .\n\n## \n\nShawn Wilkinson\nStudent, Morehouse College\nIndependent Web Developer\nme@super3.org\nhttp://super3.org\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5867672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5868945", "body": "Fair enough. Probably need to poll some devs at some point for future reference. \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/5868945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "paveljanik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848", "body": "micro-nit: DBL space\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/82020848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853", "body": "I wanted to do so first, but the URLs are fragile and can change. And when the separate \"Report security issues\" page happens at bitcoincore.org, we will have to change URL here. Mail will probably be the same.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87373853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621", "body": "How can you predict it will be a subsection? What if en-GB speakers will ask for en-GB and en-US page?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87382621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46918026", "body": "And a dot at the end of the sentence.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46918026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46922612", "body": "I do not see any dot there Luke 8)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46922612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/54899069", "body": "Can you please also change OSX -> OS X when you are touching this file?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/54899069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62642254", "body": "Can you at least use shorter line? I somehow missed the difference in the second part of the sentence while reading the diff ;-)\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62642254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/69269432", "body": "Missing dot at the end of sentence.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/69269432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92871657", "body": "I'm not native language speaker, but the word 'useable' is strange.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92871657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83364261", "body": "Eh?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83364261/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83364410", "body": "The serial should reflect the original version used as a base - coming from https://www.gnu.org/software/autoconf-archive/ax_boost_base.html\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83364410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95469486", "body": "Please report this upstream and remove it from here.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95469486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Mendeleyef": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79392061", "body": "@laanwj Did Bitcoin Core use to use Java?\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79392061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "ptschip": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37861777", "body": "Wladimir,\n\nThe underlying problem there is that due to issue #6554 the Travis build\nwill timeout before the Windows tests can finish...(the nodes will not\nsync and will hang for anywhere between 15 to 20 minutes before the\ntests will continue).  We can either disable the running of the windows\ntests  in Travis or we can add the code back into the rpc-tests.sh to\ndisable the windows tests by default but then the end users will have to\nedit rpc-tests.sh to re-enable to run the windows tests.  The first\nmethod is not ideal but the second is a bit messy.\n\nOn 25/08/2015 3:26 AM, Wladimir J. van der Laan wrote:\n\n> In .travis.yml\n> https://github.com/bitcoin/bitcoin/pull/6548#discussion_r37851603:\n> \n> > @@ -30,11 +30,11 @@ matrix:\n> >      - compiler: \": ARM\"\n> >        env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n> >      - compiler: \": Win32\"\n> > -      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n> > -      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=false GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n> \n> This is changing RUN_TESTS from true to false. Isn't that the wrong\n> way around?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/bitcoin/bitcoin/pull/6548/files#r37851603.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37861777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37862368", "body": "Oh i see, so it also disables the Unit Tests?  That's not good.\n\nWhat about if I just add an option to rpc-tests.sh, so that we can keep\nthe Windows regression tests diabled by default so they pass the Travis\nbuild, but can then enable them by the end user by passing a \"-win\"\nparameter?  That gets around the problem of the Travis build failing and\nalso means the end users doesn't have to edit the shell script to get\nthe tests to work...\n\nOn 25/08/2015 4:19 AM, Jonas Schnelli wrote:\n\n> In .travis.yml\n> https://github.com/bitcoin/bitcoin/pull/6548#discussion_r37854180:\n> \n> > @@ -30,11 +30,11 @@ matrix:\n> >      - compiler: \": ARM\"\n> >        env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n> >      - compiler: \": Win32\"\n> > -      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n> > -      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=false GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n> \n> It's half-correct. If |RUN_TESTS| is set to true, not only the unit\n> tests also the rpc test get tested. Because this PR introduces Win32\n> compatibility of the rpc tests, and they don't run properly on\n> travis/Win32, they need to be disabled. But /only/ the RPC tests (so\n> maybe a new flag in |travis.yml| for RUN_RPC_TESTS).\n> \n> But much better it would be, if the RPC test would succeed on\n> Win32/Travis. I'm pretty convinced that there must be a bug somewhere\n> if the RPC tests do not succeed on Win32.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/bitcoin/bitcoin/pull/6548/files#r37854180.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37862368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37868660", "body": "Jonas,\n\nI added RUN_RPC_TESTS to travis.yml...that addition worked quite well.\n\nOn 25/08/2015 6:15 AM, Jonas Schnelli wrote:\n\n> In .travis.yml\n> https://github.com/bitcoin/bitcoin/pull/6548#discussion_r37862781:\n> \n> > @@ -30,11 +30,11 @@ matrix:\n> >      - compiler: \": ARM\"\n> >        env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n> >      - compiler: \": Win32\"\n> > -      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n> > -      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=false GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n> \n> Haven't looked at it in detail, but i think adding a variable\n> |RUN_RPC_TESTS| to |travis.yml| and distinct between RPC and Unit Test\n> would be an easy solution.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/bitcoin/bitcoin/pull/6548/files#r37862781.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/37868660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "snuggs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160906896", "body": "Nice nit @MarcoFalke!", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160906896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jrmithdobbs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48184019", "body": "whoops.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48184019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "btcdrak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83272192", "body": "add `/licensing` because patches may also be unable to be included if the licensing is incompatible with the project.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83272192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96009138", "body": "We also have repository tags for this level of detail. Also the habit so far has been to enclose things in square brackets.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96009138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96115583", "body": "That's not entirely correct, where they are prefixed, it is usually with brackets, it's just that mostly people dont bother adding prefixes.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96115583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "vivganes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149425499", "body": "@promag Thanks for the suggestion! I just changed the same to suggested markdown format.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149425499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "emanuelb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128890971", "body": "1. it better to use https link with --no-check-certificate option (until download.oracle.com have valid SSL cert)\r\n2. it better to use -O parameter to specify filename of downloaded file (there was issues in filename auto-detection of wget in the past)\r\n3. use environment variable for 'db-4.8.30.NC' string and use it instead below (can be updated easily in future)", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128890971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128891155", "body": "1. remove the 'db-4.8.30.NC.tar.gz' file after extract operation.\r\n2. grep command is unneeded.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128891155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128891205", "body": "use && instead of multiple RUN commands to avoid unneeded layers.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128891205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "stevendlander": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128896848", "body": "Unnecessary `ls` on the BDB directory.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128896848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128896925", "body": "This should also be rolled up with the above apt install block, with the comment above it.\r\n\r\n```docker\r\nRUN apt-get update && apt-get install -y \\\r\n    libboost-system-dev \\\r\n    ...\r\n    miniupnpc \\\r\n    # Install clang for potential use over g++.\r\n    clang\r\n```", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128896925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lucayepa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23934708", "body": "It is not a pointless change. That file is used by sysadmin to install the software. And when you are a sysadmin and \"cat INSTALL.md\" does not bring you on the same line, you think you missed something of the original package.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23934708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23937528", "body": "This file is used on servers as well. You \"cat\", \"less\" or \"view\" it. A lot of servers are set on ASCII-only in order to be less buggy while editing configuration files. Call it UX for sysadmin, but all the servers I work with display those chars as spurious chars. If you browse projects as gcc, libc and a lot of others, you find that they are in 2015 too, but they care about the \"sysadmin UX\" more than we do.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/23937528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ABISprotocol": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121590777", "body": "Thanks, am correcting.", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121590777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "nomnombtc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/80602589", "body": "There is still a `bitcoin-qt.desktop` file and a `bitcoin-qt.protocol` file in there (makes it open bitcoin-qt when clicking a bitcoin: url in kde apps like kmail for example) but I could live without it... Problem is still apparently everything in `debian/` is GPL2 according to the copyright file in that folder:\n\n> Files: debian/*\n> Copyright: 2010-2011, Jonas Smedegaard dr@jones.dk\n>            2011, Matt Corallo matt@bluematt.me\n> License: GPL-2+\n\nSo I guess it makes sense to remove it for now, until someone has a better idea because of the licensing.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/80602589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bitcoinsSG": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16652345", "body": "I changed it back to \"the network\" \n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16652345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "elliotolds": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/54959185", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/54959185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "s-matthew-english": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92919330", "body": "The text as is seems to be copied from [bitcoin.org](https://bitcoin.org/en/), for instance: \r\n\r\n    Bitcoin uses peer-to-peer technology to operate with no central authority or banks;\r\n    managing transactions and the issuing of bitcoins is carried out collectively by the \r\n    network.\r\n\r\nYeah, I see what you mean- how about `immediately useful`?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92919330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "joshtriplett": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8181596", "body": "As mentioned in https://github.com/joshtriplett/bitcoin/commit/82ccb05b07c111223adbbf54e9da7c2a4a185562 , \"This quiets down the autotools build, making warnings much more visible.\"\n\nWith --verbose, autoreconf is quite chatty, printing several lines for each tool it runs, including the entirely successful ones.  Without --verbose, it shuts up unless an error occurs, and the only lines printed are warnings or errors.  That nicely highlights the several warnings that do occur in autoreconf, which got lost in the noise with --verbose.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8181596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nuggetbram": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15921509", "body": "I did this after trying to install this on my ubuntu - it crashed for some reason, looked it up, installed libtool and now it works. Would it be possible to include libtool in-tree? Seems like it's confused a few people as it was never there before\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15921509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "tomboy-64": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2762240", "body": "It's based on 0.7.2, not git. in current HEAD the option is not there. The error I described occurs with 0.7.2 and probably other older releases.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2762240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "welshjf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33163449", "body": "The plugin no longer exists; it was moved to the base library. theuni wants all this conditional though, to support static builds with either version.\n", "reactions": {"url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33163449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}