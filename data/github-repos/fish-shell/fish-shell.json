{"_default": {"1": {"thomcc": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4678", "title": "Fish segfaults on launch (parsing builtin config.fish) when built from HEAD with homebrew", "body": "I've updated my local install of fish using homebrew to 020fe5ccdfbbc147977ae11803816475e9fef763, and it segfaults at launch, while reading `config.fish`. \r\n\r\nHere's what I see when running it in lldb and when running it with a high --debug-level: https://gist.github.com/thomcc/4bda5472facccd4c93884df3e3e50044 (actually, it now includes function disassemblies too).\r\n\r\nFrom the disassemblies, it looks like the compiler is dropping the test for `child` here: https://github.com/fish-shell/fish-shell/blob/master/src/tnode.h#L147, since it's assuming a that a reference can never be nullptr, since that's UB (note that it rewrites the function a bit so that it skips to the end when `nodeptr` is nullptr, so it knows `child` couldn't be null for that reason).\r\n\r\nThere could be other issues as well, of course, especially if other code has the same problem (e.g. assumes a reference could be nullptr).\r\n\r\nUnfortunately, this sort of issue is very tricky to repro, and I can't actually get it to happen on a build *outside* of installing from homebrew, even though everything else should be the same (I guess it's possible that it has a different path and is finding a different `clang`? I don't know).\r\n\r\nIt's reliable for me inside homebrew, though.\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7b88187310f2e9204a07724d3456c6c58e1923c6", "message": "Add ability to autosave functions at the end of funced"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/42fa8415736d8a7108f59e791085f99831402b1a", "message": "Fix #4480 by using a temporary file with a redirect to the correct location."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7dae40a240f1fbf284ac97adf933de3b3798be18", "message": "Revert \"Work around OS X issue with dropped #fragment in launched URLs\"\n\nThis reverts commit 80b658e2474a96e92eccc510506818a197fc9fa1."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hamon-e": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4674", "title": "Abbreviations and colors", "body": "I have an abbreviations sl which lead to ls\r\n\r\nBut when i type \\sl fish color it like it was a valid command", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4669", "title": "Tab Completion", "body": "Hello,\r\n\r\nSeems that last update (2.7.1) broke circular tab completions\r\n\r\nSee this example,\r\n(first command pressing lot of TAB)\r\n(second command pressiong lot of SHIFT-TAB)\r\nhttps://asciinema.org/a/bShqIYrla3TCMwILAyAZShYRs\r\n\r\nAs we can see the first completion doesn't return to the beginning", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kamik423": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4666", "title": "iTerm window launches twice", "body": "fish, version 2.7.1\r\n\r\nI am using iTerm2 on MacOS.\r\nI had a working Automator AppleScript program for opening an iTerm window at the current finder window on Mac. Worked fine for bash.\r\n\r\n```\r\non run {input, parameters}\r\n\ttell application \"Finder\"\r\n\t\tif exists Finder window 1 then\r\n\t\t\tset dir_path to target of Finder window 1 as alias\r\n\t\telse\r\n\t\t\tset dir_path to desktop as alias\r\n\t\tend if\r\n\tend tell\r\n\tCD_to(quoted form of (POSIX path of (dir_path)))\r\nend run\r\n\r\non CD_to(theDir)\r\n\ttell application \"iTerm\"\r\n\t\ttry\r\n\t\t\tset newWindow to current window\r\n\t\t\t\r\n\t\t\tset sesh to current session\r\n\t\t\ttell newWindow\r\n\t\t\t\tcreate tab with default profile\r\n\t\t\t\tset sesh to current session\r\n\t\t\tend tell\r\n\t\ton error\r\n\t\t\tset newWindow to (create window with default profile)\r\n\t\t\ttell newWindow\r\n\t\t\t\tset sesh to current session\r\n\t\t\tend tell\r\n\t\tend try\r\n\t\t\r\n\t\ttell sesh\r\n\t\t\twrite text \"cd \" & theDir & \"&& clear\"\r\n\t\tend tell\r\n\tend tell\r\nend CD_to\r\n```\r\n\r\nWhen I switched to `fish` this broke, I replaced the `&&` with a `;`. This works, if there already is an iTerm window, but if there is none it opens one which still displays my greeting (so no command was run) and one which correctly changed to the directory and cleared. What is going on\u203d \r\n\r\n(EDITED) Sometimes if I launch iTerm by clicking the icon I can (sometimes) see a second window appear and then vanish immediately. It then gives me a popup `Session #1 just terminated`. I think this is also related.\r\n\r\nThis might also be related to [this](https://github.com/oh-my-fish/oh-my-fish/issues/258) omf issue.\r\n\r\nNot sure if I was supposed to report it here, or to iTerm, but I think this is the right place, because it worked with bash, and seems to be a fish initiation issue.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dieggsy": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4656", "title": "Using block cursor only for normal state?", "body": "|             |          | \r\n|-----------------|---------|\r\n|fish version | `2.7.0`|\r\n|uname -a | `Linux Ragnarok 4.14.12-1-ARCH #1 SMP PREEMPT Fri Jan 5 18:19:34 UTC 2018 x86_64 GNU/Linux`|\r\n| TERM |   `xterm-termite` or `xterm-256color` (happens with both) | \r\n| `sh -c 'env HOME=$(mktemp -d) fish'` | behavior persists |\r\n\r\nBasically, I use `fish_vi_key_bindings` along with:\r\n```fish\r\nset -U fish_cursor_insert line\r\nset -U fish_cursor_replace_one underscore\r\n```\r\nHowever, when running a repl program like `python` (or really anything else where my cursor is visible, like `pacman -S` and other password prompting programs), the cursor I get is a block (normal mode) cursor. Is there a way for the default cursor in all instances/programs to be a line cursor, and only switch to a bar cursor when explicitly switching to normal mode?", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zx8": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4650", "title": "Improve $history lookup times", "body": "Since the solution in https://github.com/fish-shell/fish-shell/pull/4461 was rejected, it would be great to have an alternative/performant way of referencing history items, at the least for the \"most recent history item\" (which is certainly the most common use case).\r\n\r\nFor example, I have the following setup (to mimic [bash's `!!` functionality](https://stackoverflow.com/a/15137462)):\r\n\r\n```fish\r\nfunction bind_bang\r\n  switch (commandline -t)\r\n  case \"!\"\r\n    commandline -t $history[1]; commandline -f repaint\r\n  case \"*\"\r\n    commandline -i !\r\n  end\r\nend\r\n\r\nbind ! bind_bang\r\n```\r\n\r\nAnd it's noticeably slower than @krader1961's alternative (i.e. using `history item 1` rather than `$history[1]`), to the point it actually interrupts my thought process while I wait for it to complete the previous command.\r\n  ", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "italomaia": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4635", "title": "Problems with fish and docker", "body": "fish, version 2.6.0\r\n\r\nWhen I attach to a docker container with fish, I get the message below:\r\n\r\n```\r\nWelcome to fish, the friendly interactive shell\r\n<W> fish: Current terminal parameters have rows and/or columns set to zero.\r\n<W> fish: The stty command can be used to correct this (e.g., stty rows 80 columns 24).\r\n```\r\n\r\nWhen using the console under this circunstance, the text breaks quite badly. To reproduce, run a ubuntu docker, install fish and, from another terminal, docker exec -it into it running the fish command. ", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "faho": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4633", "title": "cmake/ninja build does not update test files", "body": "When the test files (in tests/) are updated, the cmake build does not get them, so another `ninja test` run will still run the old tests.\r\n\r\nThis just bit me again in #4632.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4255", "title": "`commandline --selection` option is undocumented and only prints", "body": "As I found out when I checked the vi-bindings, `commandline` has a `-s` or `--selection` option to print the current selection. This has a number of problems:\r\n\r\n- [ ] It's \"--selection\" when it should be \"--current-selection\" for consistency\r\n\r\n- [ ] It only prints, combinations like `commandline -rs` don't work (at least that's what the code looks like to me)\r\n\r\n- [ ] It's undocumented\r\n\r\nBecause the first is backwards-incompatible (even though it's unlikely to break since it's undocumented), we should probably only add this to 3.0. Unless we want to document it as-is for 2.7.0.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4255/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4249", "title": "Test completion scripts?", "body": "As discussed in #4241, it would be nice if we could test completion scripts.\r\n\r\nThe problems I see are:\r\n\r\n>- We cannot guarantee that every single tool for every single completion is installed, so we need to allow for skipping tests (which we currently don't)\r\n>\r\n>- Completions often depend on a bunch of data (in fact that's the most interesting ones), so we'd need to ship that (e.g. a fake git repository for the git completions)\r\n>\r\n>- Tools often change their output based on configuration (which is generally okay), so we'd need to override that\r\n\r\n@thalesmello suggested using docker as a dependency to set up containers with the tools installed. I don't have much experience with docker (about 15 minutes of mucking around with it), but that does seem like overkill to me. In particular AFAIK it requires root to run a service. But it's also possible my inner beard is too grey.\r\n\r\nI also don't feel like skipping some tests depending on what is available is too much of a problem - these tests are going to have the most impact when someone is working on a completion script. Changes in the completion _system_ are bound to cause changes in a bunch of scripts, so it's likely to be caught even if not all scripts are tested.\r\n\r\nThen again, deliberate changes in the completion system might cause us to need to rewrite all the script tests - imagine we change the ordering to be the other way around.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4230", "title": "Remove or improve process expansion (`%something`)", "body": "As [discussed on gitter](https://gitter.im/fish-shell/fish-shell?at=5970c69119147ac323143dcf) by @floam, @krader1961 and me:\r\n\r\nWe should either improve process expansion so that it is usable, or remove it (\"juice it or lose it\").\r\n\r\nImproving it would entail:\r\n\r\n- Add some way to silence the error when no matching process is found (maybe the same as with globs - only allow with `for`, `set` and `count`)\r\n\r\n- Add some way to use it as part of a word (this would be a big incompatible change)\r\n\r\nRemoving it would remove a bunch of code. Note that there is also \"job expansion\", which isn't quite the same thing. E.g. `%1` expands not to a process with \"1\" in its name, but the job with id 1. If that is to be removed as well, this would free up \"%\" as a special character.\r\n\r\nBecause of the annoying error, process expansion remains basically unused in fish scripts with one exception: `%self`. This should be replaced with a variable (see #1202).\r\n\r\nIn case we consider the POSIX standard way to get a PID from a part of a process COMM to be too odious (as far as I can tell it requires scraping `ps` output), it would be possible to provide a `pidof` command instead.\r\n\r\nNow ~~fight~~ discuss.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4183", "title": "glibc deprecated some stuff, leading to warnings", "body": "In glibc 2.25, a few things we use are marked as deprecated. On my system, this leads to the only remaining compiler warnings.\r\n\r\nThe full list:\r\n\r\n- `readdir_r` (recommending plain `readdir`, which is apparently thread-safe as long as no two threads access the same directory stream simultaneously on glibc and solaris - see e.g. https://github.com/rust-lang/rust/issues/34668)\r\n\r\n- `sys_errlist` and `sys_nerr` (recommending `strerror` or `strerror_r`)", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4074", "title": "Completing \"~\" does not offer \"~/\"", "body": "As mentioned in #4061, completing `somecommand ~` does not offer the obvious `~/` (i.e. the current user's home directory).\r\n\r\nI don't think it ever did, which is why I'm filing this as an enhancement.\r\n\r\nAlso, since these are directories, it might be better to complete _all_ of these with a trailing \"/\" (like we do for directories in general), since there's no valid suffix otherwise (though tilde-expansion passes through the literal if it doesn't expand - e.g. `~nonexistentuser` expands to `~nonexistentuser`).\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3632", "title": "{beginning,end}-of-buffer functions need to be documented, used", "body": "In https://github.com/fish-shell/fish-shell/pull/3627#discussion_r91266793 I lamented that we currently do `commandline -C $BIGNUMBER` in a few places to put the cursor at the end of the \"buffer\" (not a term we use in many places IIRC).\r\n\r\nSo I thought I'd see how this would have to be implemented, only to stumble over the fact that we already have that. It's the `end-of-buffer` commandline/bind function that also shows up in `bind --function-names`, but it's not used with `commandline` anywhere (though it is bound in both default and vi-mode), and not documented in `bind --help`.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3623", "title": "Cursor not changed on tmux window change", "body": "See https://github.com/fish-shell/fish-shell/issues/3429#issuecomment-264756649.\r\n\r\nTmux sends a sequence on window change that we ignore. We should use it to change the cursor again.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3084", "title": "`if` and `while` accept paths as argument", "body": "(Mentioned by @brj on gitter)\n\nApparently \n\n``` fish\nif /bin/\n   echo true\nelse\n    echo false\nend\n```\n\nis valid fish. This also applies to at least while-loops (though there it of course results in an infinite loop).\n\nI think this should be a syntax error.\n\nI could also reproduce on 2.2.0.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3042", "title": "switch gives unhelpful error with a multi-element list argument", "body": "From #3041:\n\n``` fish\nswitch a b\n```\n\nwill produce this error:\n\n> Expected end of the statement, but instead found a string\n\n(which itself isn't fantastic)\n\nBut \n\n``` fish\nset -l var a b\nswitch $var\n```\n\nwon't, and no case will match (not even `'*'`).\n\nThis is most likely because the error is generated before the variable is expanded.\n\nThis should produce an error.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3042/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3018", "title": "Add a notion of modifier keys to bind", "body": "This is related to #3017, in that it is also needed to allow cross-terminal bindings without accidentally hardcoding something.\n\nI can bind something to \"down\" (`\\e[B` here) with `bind -k down something`, but when I want to bind something to alt+down, I need to bind the sequence (`\\e[1;3B` in my case).\n\nIt would be nice if it were possible to say e.g. `bind --modifier alt -k down something` (though of course there's the issue of alt vs escape).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3018/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3017", "title": "Add additional sequences to key names", "body": "As mentioned in #2139, it would be nice to bind more sequences to key names so we can simplify the key binding functions (and users are more likely to create bindings that work across terminal emulators).\n\nI'm not sure how exactly this should work, so proposals welcome!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3017/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2791", "title": "Set status to 124 also for `set` with unmatched globs", "body": "It might be nice to have `set foo *.foo` return failure if the glob is unmatched to make\n\n``` fish\nif set -l foo *.foo\n    # something\nelse\n   # something else\nend\n```\n\nwork.\n\n(Note that currently `set foo (command1) (command2)` will return command2's status, so it should work that way for the globs as well or be changed for everything)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2645", "title": "Named arguments (function -a) are always set", "body": "When working on __fish_git_prompt, I wanted to use function's \"-a\"/\"--argument-names\" option, but I noticed that I then can't actually check if an argument has been given.\n\nSee:\n\n``` fish\nfunction t --argument a b\n    echo $a $b\n    set -q b; and echo \"b is set: $b\"; or echo \"b is unset\"\n    set -q argv[2]; and echo \"argv[2] is set: $argv[2]\"; or echo \"argv[2] is unset\"\nend\nt foo\nt foo bar\n```\n\nThe output is:\n\n> foo\n> b is set: \n> argv[2] is unset\n> \n> foo bar\n> b is set: bar\n> argv[2] is set: bar\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2645/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2440", "title": "Retcon __fish_complete_* to mean \"completes current commandline\"", "body": "We have a number of __fish_complete_\\* and __fish_print_\\* functions. The current definition (that doesn't quite hold, see #747) from [the docs](http://fishshell.com/docs/current/index.html#completion) is\n\n> Functions beginning with the string __fish_print_ print a newline separated list of strings. For example, __fish_print_filesystems prints a list of all known file systems. Functions beginning with __fish_complete_ print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.\n\nHowever, I don't see the use of that - the only thing that says is you need to cut it on a tab character if you're doing something other than completion, and you should check the output format of anything you use in a function anyway.\n\nWhat I believe would be more helpful and more in line with naive expectations would be to take __fish_complete to mean \"this acts on the current commandline and generates completion options for it\".\n\nThere are of course other options:\n- Invent a new convention for when a function has descriptions - this can also be used with the retcon (\"__fish_complete_described_*\")\n- Make all functions that act on the commandline also have a mode where they don't, maybe via a standard option (\"-c $INVENTEDCOMMANDLINE\" or so)\n- Do nothing - this is, as always, the easiest option\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2382", "title": "Better document differences from bash", "body": "We should better document fish's differences with bash (and to a lesser degree zsh, because knowledge of bash is common even among zsh users), maybe even to the point of having an entire section in our documentation dedicated to it.\n\nSome of this is already in the FAQ (\"!!\"), but some isn't.\n\nIn #2379 we see that process expansion is one thing (an equivalent to \"$!\").\n\nThere's of course more, but a slight difficulty here is deciding what goes into \"different from bash\", and what goes into \"general tutorial\" (which is already geared at converts) - where does \"set X Y\" vs \"X=Y\" go? Both? One of them? What about \"$argv\"?\n\nSo the questions are (in a somewhat overlapping manner):\n- Which differences haven't we adequately covered?\n\nand\n- How do we better draw attention to the fact which of fish's slightly different constructs is an equivalent to bash's $thing?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2356", "title": "fish_postexec and fish_prompt don't emit when command is aborted (e.g. with ctrl-c)", "body": "As mentioned in #2139, try the following:\n\n``` fish\nfunction postexec --on-event fish_postexec\n    echo postexec\nend\nfunction prompt --on-event fish_prompt\n    echo prompt\nend\nsleep 5 # Press ctrl-c to abort\n```\n\nNeither event will fire. When the sleep runs to completion both will.\n\nThis completely precludes a fishscript solution to #2139 because every command could disable the keypad again (i.e. be equivalent to `tput rmkx; sleep 5`)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2350", "title": "fish_config (webconfig) doesn't install fish_right_prompt", "body": "The sorin theme has a fish_right_prompt function that is not installed if selected via fish_config (see #2100).\nThis is because webconfig.py only does a `funcsave fish_prompt`.\n\nOf course it'd be easy to add `funcsave fish_right_prompt`, but I'm not convinced something as simple is the right thing to do. This is because the prompt selector only shows the left prompt, so there's no preview for the user, and not even a way of knowing if a theme has a right prompt (short of looking at the source). This might result in surprised users who didn't backup their hand-rolled right prompts (I for one have such a thing).\n\nI see a few viable courses of action:\n1. Disallow right prompts in themes\n2. Also show the right prompt, always install it along with the left one\n3. Also show the right prompt, add a checkbox to install it\n4. Make right prompts completely separate\n\nNow, the drawbacks and advantages for 1 are obvious - no nice right sample prompts shipping with fish (i.e. fish is less cool), but also no work.\n\n2 is a little more work (especially the preview part) and always results in a consistent prompt-style. However users can't then easily pick and choose (that would involve copying fish_right_prompt, setting the prompt and copying it back).\n\n3 means users get to keep their right prompts if they wish, but doesn't make it easy to choose a different one\n\n4 could be a lot of work - I haven't dug too deep into the source - but also carries the most payoff.\n\nThere's also the five-minute hack of adding something like \n\n``` fish\nfunctions -q fish_right_prompt; or function fish_right_prompt [...]\n```\n\nto the sorin prompt since that's the only fish_right_prompt currently in the repo.\n\nEdit: #736 is also related, but that deals with the even more general problem of more functions in sample prompts.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2201", "title": "Feature request: \"Argument hints\"", "body": "Hi,\n\nI've been working on some more completions, and I noticed that sometimes we can't offer a reasonably complete list of options, so I'd like to be able to offer hints instead.\n\nImagine a program to set your network address, like `ifconfig` or `ip`.\n\nWhen you enter `ip address add`, you _need_ to enter a valid IP/Netmask after that, and fish/a completion script can know that. What it can't (within reason) is offer all possible addresses with all possible notations. So what it should do instead is just offer the user a hint that an ip address and a netmask are expected.\n\nWhat I'd like this to look like on the completion script side is an additional option \"-H\" or \"--hint\", so that this works:\n\n```\ncomplete -c ip -n \"__fish_seen_subcommand_from addr; and __fish_seen_subcommand_from add\" -H \"IP Address/Netmask\"\n```\n\nOn the UI side, I'm not sure. Like a suggestion, but with a different color? Triggered only after TAB is pressed?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2201/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/56604f598e02daefb38e9702121fc4019d3ee9ef", "message": "[Tests] Add more slack to the bind tests\n\nSome of these were failing on Travis quite often, and this is probably\nthe result of too tight a window.\n\nE.g. one emacs test (transpose words, default timeout, short delay)\nwaited 250ms to enter something else, with a timeout of 300ms. That\nmeant a window of 50ms."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d67b4d6ca71ada3c5cf92f62fe1e8de3730efa09", "message": "Fix {,,,} tests\n\nThere was an additional line in the output"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/aa58cae6014582e19a6b52db8d0865ae81771b3b", "message": "Don't count successive \",\" as literal in brace expansion\n\nThis was highly surprising.\n\nFixes #3002."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/55ebf4430f19207f24bcee55249bfabc5c46c7de", "message": "Make literal \"{}\" expand to itself\n\nThis caused major annoyances with e.g. `find -exec`, and it's utterly\nuseless - \"{}\" expands to nothing, so why have it at all?\n\nFixes #1109."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3650712ff29e26c6b34af0fc1bff50a47088d038", "message": "python completions: Disable file completion\n\nOtherwise the prior commit was pointless."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/66f181499b7961615cd0d72d7a8c8081751da303", "message": "Strip quotes in __fish_complete_suffix\n\nFixes #4481."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/75ac482cec7d73964e56c91fdcea6c138f3252a8", "message": "Don't crash when setting fish_history before reader is initialized\n\nNot crashing is just soo much nicer.\n\nFixes #4619."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/585321181d1f7573813ed8083a06118ab1d6a6a2", "message": "[cmake] Remove build_fish_pc target\n\nThe dependency on fish.pc just does not work.\n\nThis still installs the pc file with the proper version, so it should work."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4096a7fda9300a884b7dc1c096410ab03c99957d", "message": "Revert \"Fix \"Unknown argument -s\" error in fish_vi_key_bindings\"\n\nUnfortunately this made tests on travis fail - for some reason I still need to figure out.\n\nThis reverts commit 5acbd32c2ee6a5b2f75c3a04b402368b035280f3."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/5acbd32c2ee6a5b2f75c3a04b402368b035280f3", "message": "Fix \"Unknown argument -s\" error in fish_vi_key_bindings\n\nThis was caused by it prepending \"-s\" to argv always,\nand later checking $argv[1].\n\nAs it turns out, that is kinda superfluous, so we can just add \"-s\" to\nthe `bind` calls.\n\nAlso adjust the tests so the vi-bindings are enabled via the function,\nwhich would have caught this.\n\nFixes #4494."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/884092d13baa6151a52a2e1625fa7b76647f7746", "message": "CHANGELOG 4610"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f9d883dd745064650669ea48d6520c48b54537d6", "message": "Add and use str2wcstring(string, size_t)\n\nThis is just for convenience."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/2de38ef7bfd8569a6876d8b8ffbe748eec1b3c43", "message": "[string] Chunk reads\n\nProfiling with callgrind revealed that about 60% of the time in a `something | string match` call\nwas actually spent in `string_get_arg_stdin()`,\nbecause it was calling `read` one byte at a time.\n\nThis makes it read in chunks similar to builtin read.\n\nThis increases performance for `getent hosts | string match -v '0.0.0.0*'` from about 300ms to about 30ms (i.e. 90%).\nAt that point it's _actually_ quicker than `grep`.\n\nTo improve performance even more, we'd have to cut down on str2wcstring.\n\nFixes #4604."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/edcf9ebc129da9f23d552684c40e8442e35ae3de", "message": "[git completions] Remove staged_files function\n\nTurns out \"__fish_git_staged_files\" does the same thing as \"__fish_git_modified_files --staged\".\n\nAlso use \"--staged\" instead of \"--cached\", which is a more\nunderstandable synonym.\n\nMany thanks to @thomcc on gitter."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4553a74933f3bb4203c14cdd3da30b40e43e31ed", "message": "Clarify CHANGELOG RE bracketed paste and iTerm"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4ca995311460bf41e0fc06690f5770f61d5d5c02", "message": "Skip unusable paths in __fish_print_hostnames\n\nSee\nhttps://github.com/fish-shell/fish-shell/issues/4511#issuecomment-343022740.\n\nThis would try to `cd` to ~/.ssh even if it didn't exist. That's\nclearly bogus."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/60248e895f92a37d61fde60feba63fe01f1ef112", "message": "Use __fish_complete_user_at_hosts\n\nfor various completions.\n\nThis makes the code a bit nicer, removes one of the\n__fish_print_hostnames calls (which are slow) and a sed call, thereby\nimproving performance by about 33% (600ms to 400ms).\n\nFixes #4511."}], "pull_requests": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/4673", "title": "git completions: Parse git status --porcelain", "body": "## Description\r\n\r\nThis is much faster on large repositories, as it allows us to do a lot\r\nmore with a single git call.\r\n\r\nIt also makes it easy to add descriptions to distinguish modified\r\nfiles from untracked ones.\r\n\r\nTBD is if all commands now have the right kinds of files.\r\n\r\n## TODOs:\r\n<!-- Just check off what what we know been done so far. We can help you with this stuff. -->\r\n- [N/A] Changes to fish usage are reflected in user documentation/manpages.\r\n- [N/A] Tests have been added for regressions fixed\r\n- [ ] User-visible changes noted in CHANGELOG.md\r\n\r\n@thomcc: How does this work for you?", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/4653", "title": "Don't start keepalive process if the first or last process is internal", "body": "## Description\r\n\r\nCurrently, fish spawns a keepalive process when a non-external\r\nprocess (a block/builtin/function) is inside a pipeline.\r\n\r\nThis keepalive process is then made the process group leader, which\r\ntheoretically stops the process group from being coopted by PID\r\nreuse (which I'm still not sure can actually happen).\r\n\r\nBut if a non-external process is first or last in the pipeline, then\r\nfish itself needs to read/write to the terminal, so it should remain\r\npgroup leader, and therefore the keepalive process is not needed.\r\n\r\nFixes #4540.\r\n\r\n## TODOs:\r\n<!-- Just check off what what we know been done so far. We can help you with this stuff. -->\r\n- [N/A] Changes to fish usage are reflected in user documentation/manpages.\r\n- [ ] Tests have been added for regressions fixed\r\n- [ ] User-visible changes noted in CHANGELOG.md\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/4624", "title": "Split command substitutions on NUL if one is found", "body": "## Description:\r\n\r\nCurrently, there is no easy way to use e.g. `find -print0` in command substitutions.\r\n\r\nWhat this does is check if a NUL is in the comsub output and then split on that instead of newline,\r\nwhich makes `something (find -print0)` just work.\r\n\r\nThe one fly in the ointment is if there is a command that uses NULs to separate its output,\r\nbut doesn't print a trailing NUL if there is just one \"thing\" to print.\r\nThat would cause us to fall back to splitting on newlines, which might do the wrong thing.\r\n\r\nSo far, everything I've tested (`find`, `git config -z`) seemed to print a trailing NUL.\r\n\r\nThis implements a proposal by @cben.\r\n\r\nFixes #3164.\r\n\r\n## TODOs:\r\n<!-- Just check off what what we know been done so far. We can help you with this stuff. -->\r\n- [ ] Changes to fish usage are reflected in user documentation/manpages.\r\n- [x] Tests have been added for regressions fixed\r\n- [ ] User-visible changes noted in CHANGELOG.md\r\n\r\n\r\n----\r\n\r\nThis does one extra `memchr` per command substitution, which is probably not significant. But maybe there's an easy way to use that result if there is a NUL?", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/4554", "title": "Disable HAVE_BROKEN_WCWIDTH", "body": "## Description\r\n\r\nAs talked about in #4539, this disables HAVE_BROKEN_WCWIDTH.\r\n\r\nIt does not remove fish_wcwidth because I'm assuming that we need to reenable it in a bunch of cases, but I'm assuming the default should be to rely on the OSs implementation\r\n\r\nFixes issue #4539 (and possibly a bunch of others, e.g. #4306).\r\n\r\nThis is probably not something to merge, it's just to allow testing on common ground.\r\n\r\n## TODOs:\r\n<!-- Just check off what what we know been done so far. We can help you with this stuff. -->\r\n- [N/A] Changes to fish usage are reflected in user documentation/manpages.\r\n- [N/A] Tests have been added for regressions fixed\r\n- [ ] User-visible changes noted in CHANGELOG.md\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12357393", "body": "Waaaaaaaaah! Please see https://github.com/faho/fish-shell/commit/015d2a0f1c200b6ac0a38906a6100fb3ccc2142c.\n\n(Now if only it had thrown that error in my testing....)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12357393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12732197", "body": "That can be fixed by simply using a UTF-8 locale, which on linux is heavily recommended anyway.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12732197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12732520", "body": "Weird - for me it simply prints a bunch of colored boxes with question marks in them.\n\nCan you open an issue about this so we can take a look and solve it for more than one prompt?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12732520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13086194", "body": "Thanks, fixed in bd3b4e03e9.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13086194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13244834", "body": "You can put multiple matches on the same line if they lead to the same code, i.e.\n\n``` fish\nswitch $cmd[2]\n  case '--color' '--no-color' 'help'\n    return 0\n  case '*'\n    return 1\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13244834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13244841", "body": "This seems to be broken - it's `case '*'`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13244841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13259920", "body": "You're missing a \"*\" at the end - with this, it'll skip the next arg for \"--rootdir=/path/to/dir\". (Sorry, didn't know that was also an option\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13259920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13260514", "body": "\"--=\" is very likely to be invalid, and I'm of the opinion that completions shouldn't _offer_ invalid arguments, but can do whatever they want when the user enters some manually - the program will then error out anyway. So... meh.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13260514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13273999", "body": "> I don't mean to be picky or critical, just some feedback for thought:\n\nNo worries, I appreciate both picky and critical, as long as it's not too extreme and civil.\n\n> When you say, \"append a list to a string,\" what comes to mind for me is array operations, like:\n\nYeah, I wasn't too happy with that wording. Can't say I'm in love with your wording either (it _is_ appending or concatenation, it just doesn't require a dedicated operator or function because this is shell, not java). It would also be nice to mention that this does the same thing brace expansion would (`echo {1,2,3}{a,b,c}` produces the same output).\n\nAnother thing that's bugged me is the term \"cross-product\" - because [that](https://en.wikipedia.org/wiki/Cross_product) is not what this is, it's the [cartesian product](https://en.wikipedia.org/wiki/Cartesian_product). But as far as I can tell, we've always called it \"cross-product\".\n\nI'll think some more about this. If you're confident with your wording, feel free to file a PR or Issue (PR preferred obviously because I'm lazy). Thanks for your suggestions!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13273999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13285334", "body": "b13ee9da2aff4fa104185e0050697204d4fa6742 should improve it a bit.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13285334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13337761", "body": "@ridiculousfish: I'm not sure I understand this - it affects \"\\cw\" i.e. Ctrl+w bindings, not meta-backspace (and I can't get meta-backspace to do _anything_, neither in fish nor in bash).\n\n\\cw is also bound to backward-kill-word above, which matches the documentation, but then re-bound here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13337761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13459784", "body": "Typo\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13459784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13790768", "body": "This is exactly what \\cx did before - it goes to the end of the line, whihc means it will accept suggestions. If you want something different, please open an issue and make your case.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13790768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13791629", "body": "It works just like it did before the change. Everything else is a different thing. We can of course think about that, but my first concern was to make sure that the inheritance didn't _change_ any bindings, only add them.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13791629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13798650", "body": "Make sure you have this commit - `echo $FISH_VERSION` is your friend.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13798650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13816405", "body": "Urgh... I've been really confused about this - it used to be set in insert mode, not normal mode. Now it's set without an explicit mode, which means it will only work in normal mode (or \"default\" as fish calls it).\n\nSo the question is: Should we go back to _just_ insert mode, or add it to all modes? @pickfire? @terlar?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13816405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13819422", "body": "Good catch, thanks. Fixed by df3da55.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13819422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13850525", "body": "@pickfire: In which mode? Can you open an issue about that? The comment thread here is already rather long and much of it is unrelated to the change. Any requests here might be missed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13850525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15220424", "body": "Why didn't anyone tell me prompts were slow?\n\nI'd just forgotten to merge this and was just doing the work again when I noticed I had it lying around in a branch... :dizzy_face:\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15220424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15494597", "body": "> The URL for the gitter.im channel is incorrect.\n\nUrgh, yeah, sorry.... copy-paste error.\n\n> http://stackoverflow.com/questions/ask?tags=shell+fish\n\nUnfortunately, that link doesn't really make it clear how to read _previous_ questions, so it's possible we'd get a lot of duplicates that way.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15494597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15516481", "body": "What is? No behavior changed - the `status -i` is always true since this entire file is only executed when fish is interactive, and stopping the fork isn't necessary anymore because there's no fork.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15516481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15516701", "body": "Or do you mean the newline in the empty variable case?\n\nOkay, fixed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15516701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15759814", "body": "No. The issue is `abbr` is a function that needs to check if a particular abbr is already defined, and because of how we store abbrs that's rather slow. You'll probably not notice it with two or three abbrs, but some people translate their hundreds of aliases from bash/zsh to fish via abbrs, which you would notice.\n\nThere's also absolutely no benefit to adding and readding them.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15759814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16016390", "body": "@alphapapa: For now, guard them with a universal variable like\n\n``` fish\nif not set -q fish_initialized\n    # All your abbrs\n    set -U fish_initialized\nend\n```\n\nI'm looking into more optimizations. I think I've got it down quite a bit, but I'll need to test it extensively.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16016390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16115115", "body": "@floam: Does this still occur with the newest version of this file? It doesn't for me, but I'm not actually running OSX and don't have brew installed, so I can just dry-run the completions a bit.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16115115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16367838", "body": "@sean-smith: The web page has the docs of the last release, so this'll be fixed once we make a release (which shouldn't be that long anymore).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16367838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16667610", "body": "And the only way to recognize that it's NetBSD's uniq is to know that you're on NetBSD, right, or does `uniq -i </dev/null` exit non-null?\n\nI've thought about executing `uname` once at start and then use that to check for various completions, but that would cost a bit of startup-time always and would ruin it if you install different tools (e.g. you replace your uniq with the GNU one).\n\nAnyway it's not too bad here since you're only missing one option.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16667610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16748140", "body": "This should be documented.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16748140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17134159", "body": "@onodera-punpun: In a kernel-VT, we override `set_color` to explicitly only allow a certain set of colors (because we had issues with that previously). We should probably check if they can do the bright colors and maybe think about removing the error message (though I kinda like that it makes it explicit to the user that this won't work).\n\nOr maybe the override is unnecessary now.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17134159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17134208", "body": "Okay, the bright sequences are a no-op here, so\n\n``` fish\necho (set_color yellow)a(set_color bryellow)a\n```\n\nwill print two yellow \"a\"s, but `echo (set_color bryellow)a(set_color yellow)a` will print a white \"a\" and then a yellow \"a\". Better than showing the raw sequence on screen, but not by much.\n\nWe should possibly print the non-bright sequences when asked for a bright one here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17134208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17593491", "body": "@zanchey: b984853 should do just that. I don't really see _how_ this would have issues (mktemp would need to be totally borked), but better safe than sorry.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17593491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17656215", "body": "@Freso: This one's  simply been rebased. It's what we usually do with simple PRs like yours - it's a simple fix, there wasn't any discussion, so losing the connection to the PR doesn't matter. The commit signature also doesn't really matter as it doesn't sign much - the fix is just obviously correct.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17656215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17656343", "body": "Just committed d79a5a3, which should incorporate all of this with one small twist - only try `rmdir` if `rm` succeeded. There's no point in showing two errors here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17656343/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35482281", "body": "Then shouldn't that be tested via \"test $TERM = Linux\"?\n\nLogin shells can also be used in other contexts, and there can also be non-login shells in a framebuffer VT.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35482281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36592146", "body": "I'm pretty sure we should rename that parameter - I'm guessing this was supposed to be a poor man's hint. Still unfortunate fish_indent breaks (assuming the completion works at all).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36592146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36592197", "body": "Yeah - how about only breaking to achieve line length? With the possible exception of \"if; begin; a; and; b; end;\" blocks.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36592197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38272996", "body": "This was fixed in 6157a9a85890d79521e77cb4e51d4d52793ac516.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38272996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38293192", "body": "There probably should be. The default happens to not break, though.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38293192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38293290", "body": "This is more to inform the user - set_color won't _set_ the color (try it with purple), but it won't exit with an error status or print any error message.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38293290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38986831", "body": "Oh, wait a minute... I don't think that works like you think.\n\nThat `command npm run | ...` stuff will be executed _once_, when the completion is auto-loaded! (Append `echo \"npm completions loaded\" >&2` to npm.fish to see it)\n\nNow, if I understand correctly, `npm run` is dependent on the current directory, so it'll trim and complete only the first directory you call the completion in (for a given shell instance).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38986831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38989502", "body": "Should be something like\n\n``` fish\nfunction __fish_npm_run\n    command npm run | command tail -n +2 | command sed \"s/^ *//\" | while read -l name\n        set -l trim 20\n        read -l value\n        echo \"$value\" | cut -c1-$trim | read -l value\n        printf \"%s\\t%s\\n\" $name $value\n    end\nend\n\nfor c in run run-script\n    complete -f -c npm -n \"__fish_npm_using_command $c\" -a \"(__fish_npm_run)\"\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38989502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39147871", "body": "Typo: Partial\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39147871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39148179", "body": "This could be ellipsized with something like `sed \"s/\\(.\\{$trim\\}\\).*/\\1\\.\\.\\./\"`. This is still a bit naive because it may cause a string to get longer - it causes the string to be at most $trim + 3 characters long, but at least it offers some feedback that something was cut.\n\nOr make a case to add it to fish proper.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39148179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39254238", "body": "I'm stealing that, thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39254238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/37567267", "body": "\"read from standard input one STRING per line\" or similar?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/37567267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39571265", "body": "I would have probably split ...config_args into two functions - __fish_apm_config_{needs_command,_using_command_from}.\n\nWhat you could do is `contains -- (commandline -opc)[3] edit list` instead of the tests. That'd be a tiny bit shorter and more easily extensible. (Of course this is all assuming that config has no options that can appear before the subcommand - if there are and you missed them or if it ever changes, this code will stop being correct)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39571265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40545204", "body": "Weird whitespace here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40545204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40545335", "body": "The slice is actually unnecessary - it'll always expand to the full array anyway.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40545335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40545680", "body": "Why continue? Why not \"return 0\"? You've seen a command, the next word is presumably the argument for that command.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40545680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40574308", "body": "That would mean there can't be a package called \"stars\", \"install\", \"docs\", \"home\" or \"open\".\n\nAnd the \"benefit\" you mention is that fish won't complete - it's not hooked up to syntax highlighting (that would require using `complete`s \"-A\" option) and doesn't allow the user to undo the error. It's not really a good experience if I'm mashing the TAB key and all I get is that limp blink once. Or even worse, if it decides to complete files again.\n\nAnyway, this is your completion - I don't use apm, so I don't have a stake in this (apart from wanting fish to be great) or expert knowledge of the tool. If you insist, we can keep it that way.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40574308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44385631", "body": "This probably deserves a comment - you're ungrouping here, right?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44385631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44385777", "body": "This can be done with our (new and awesome) `string` utility - something like `string sub -s 2 $argv[1] | string split \"\"`. Unfortunately string isn't in a release yet. If you don't want to install git fish, we can also do it later.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44385777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44386001", "body": "This $suffix needs to be quoted, otherwise the cartesian product kicks in and nixes the entire filename if $suffix is empty!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44386001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44454849", "body": "It has to be empty in a list-sense, not a string sense:\n\n``` fish\nset suffix\necho /tmp/psub.fifo$suffix\n```\n\n(btw, by starting a codeblock with ```fish you get nice fish highlighting on the github web interface)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44454849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/46123000", "body": "No, it's okay. These completions are in a constant state of TODO since git has sooooo many options and adds new ones anyway.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/46123000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47235083", "body": "Why not add \"--on-variable PWD\" then?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47235083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47106639", "body": "If these aren't supposed to be changed, why are they variables?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47106639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47107476", "body": "Why not just iterate over __fish_svn_prompt_flag_names directly? The index is only used to access that.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47107476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47111245", "body": "Use `printf \"%s\\n\" $svn_status_lines` and you can nix replacing the newlines.\n\nWhat happens is that fish will split command substitutions on newlines, making every line one argument, which then leads to svn_status_lines becoming a list with each line as one element. When you then hand it to `echo`, it'll read the arguments and echo them out separated by spaces. printf won't do that, instead using the format string once per argument.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47111245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47114038", "body": "Hurray for localization - this won't work if your language isn't english. A simple workaround is of course to ~~`set -lx LC_ALL C`~~ `set -lx LANGUAGE en` (it seems svn will read that, ignoring existing conventions) here, though I'd rather have a less hackish solution.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47114038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47114403", "body": "Would `svnversion` work here?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47114403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47119065", "body": "> I did notice there seems to be a function in fish shell for fetching the revision number\n\n__fish_print_svn_rev? That has the same issue as it does basically the same thing.\n\n> As for the grep strings, I was basing this off the source of the svn command printing out what appear to be english strings.\n\nThey are english strings if your locale is english. Mine is german, so it'll print german strings (e.g. \"Letzte ge\u00e4nderte Rev\").\n\nI'm trying to find a portable way to get svn information (i.e. the svn counterpart to `git rev-parse` or `hg status`), but I'm not coming up with much. `svnversion` might fit the bill, but I'm not sure if it prints everything you want here, `svnlook` is another, but it works only with repositories, not working copies.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47119065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47123742", "body": "> I'm ok with removing that second sed expression, if you think that would be locale agnostic.\n\nI'm not sure why it wouldn't be - `svnversion` for me outputs \"255122M\", though that's on a fresh checkout of llvm (I don't use svn). It doesn't seem to distinguish between \"object modified\" and \"object missing\" (ie. deleted) like `svnstatus` does, though, and that's localized as well.\n\nIf you'd like to use string, it'd look like `svnversion | string replace -r '([0-9]*).*' '$1'`.\n\nEdit: Another way to get the revision seems to be `svn info --show-item last-changed-revision`, which seems to purely output the number.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47123742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47217353", "body": "> As for the localized status of svn status the code I looked at from the build of svn apple ships has hardcoded text strings in english for the bits of the output i am attempting to remove.\n\nI haven't actually gotten any localized output from `svn status` - maybe that's not a thing anymore? (It looks like \"!       CODE_OWNERS.TXT\" because I've removed that file to test)\n\nI'm not quite sure how to cause a conflict to happen which might trigger some actual language.\n\nDid you see the suggestion about `svn info --show-item last-changed-revision`? (There's also the option of getting xml output, but parsing that in shell is not an enviable task)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47217353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47238044", "body": "How about either adding them as local variables to the function they are used in or doing a switch/case there? Or make a list of these characters, another of the names and then map them via index:\n\n``` fish\nset __fish_svn_status_chars A C D I M N R # ...\nset __fish_svn_statuses added conflicted deleted ignored modified replaced # ...\necho $__fish_svn_prompt_char_{$__fish_svn_statuses(contains -i -- $status $__fish_svn_status_chars)}\n```\n\n(untested, the parser might barf on that) \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47238044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47238358", "body": "I don't think setting them as local variables is going to take that much time. In my experience most fishscript is taking the most time in calls to external tools (the hg_prompt was particularly bad about that, to the point that we've added custom code to find the .hg directory). Even though svn seems reasonably quick, it's still a few forks.\n\nMy gut tells me that optimization here is achieved by replacing `grep` or `math` (which forks to `bc`), not via defining variables.\n\nIf you wish to measure, fish has a nice \"-p\" option to output profiling data (though do keep in mind that even non-interactive fish will still read all config files).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47238358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47245543", "body": "Since you're not using $index inside the loop, you can just do `seq $last_column $col`. Or am I missing anything?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47245543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47444105", "body": "xword yword zword, no?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47444105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48091234", "body": "I still think having \"number\\t$name\" and \"$name\" (without description) to be the way to go. The names are sort of descriptive (and we don't have a way to generate better descriptions) while the numbers aren't descriptive at all.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48091234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48091248", "body": "Typo - \"--version\", not \"--verison\".\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48091248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48091278", "body": "Also, @zanchey mentioned in #2587 that calling `killall` on Solaris wasn't safe (there, `killall` just kills all processes on the system, so you don't want to execute it or it executes you).\n\nSo we should probably guard this with `uname`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48091278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/49215662", "body": "If it's a deprecated no-op, there's no need to complete it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/49215662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50637757", "body": "This sed should either be `string -a \" \" \\n` (no quoting for the latter) or `tr \" \" \\n` (here the quoting doesn't matter)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50637757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50637795", "body": "This sed could be (untested) `string replace -r '^\\s*([0-9]+).\\s+([\\w\\.]+).?+' '$1\\t$2'` - though I'm not sure what the `.?+` is supposed to do - isn't that just `.*`?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50637795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50638551", "body": "> I didn't manage to build fish from git, it just breaks.\n\nWhat breaks, what OS are you on? You should be doing `autoreconf; ./configure; make; make install` - I think the dependencies only changed in version (though you can use a system-provided pcre2, we'll default to a bundled version).\n\n> The one with the star is the selected version.\n\nThat might be nice to add to the description, though it might need some more advanced regex-foo.\n\n> I just put a commit in with sed since I can't get the git version to behave so I can't test it.\n\nIt's not critical, we can replace it later.\n\nI'll now try to get a gentoo install working (though I find the install process quite tedious and have gotten a few rather weird errors) to confirm this works.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50638551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50639269", "body": "> I'm on Archlinux at the moment, that's a bit of the thing. I tend to not want to do make install to get files spread around my filesystem, so I try to run it directly after make which sometimes break ;D\n\nIn that case, there's [an AUR package](https://aur.archlinux.org/packages/fish-git/) (which I adapted to my local use to build from my local clone). I've also noticed that it doesn't play great when run directly from the repo directory. I assume it's because it relies on paths supplied by configure, and those are /usr/local and friends by default.\n\n> Installing Gentoo is easy\n\nIt's not that I can't follow instructions, it's that\n- I find the instructions tedious - all the `mount` boilerplate to setup the chroot (which arch supplies a script for - `arch-chroot`), the bad shell setup (not even bash-completions and only nano) they have....\n- I've had weird issues in virtualbox (like the webrsync stuff complaining about a read-only filesystem _after_ it already did half of its stuff)\n- It takes ages - I've now been compiling the kernel for half an hour, and it's just gotten to the modules (and configuring the kernel is not something I actually want to do nor would I save much time - though I'm not actually a gentoo user)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50639269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50640327", "body": "> The AUR thingy seems handy for testing this.\n\nYes, it is. Very, very handy. I've also written a stupid wrapper script\nto allow me to build from a named branch, called [mkfish](https://github.com/faho/config/blob/master/fish/.config/fish/functions/mkfish.fish).\n\n> Why the kernel btw, I skipped that and tested it directly in the chroot. Much faster :)\n\nWell, I've wanted to see what the fuss about Gentoo was about for a\nwhile, so I've wanted to go through a full install, with a typical-ish\nsystem (that also means openrc instead of systemd).\n\nI feel like this should also help me see where our completions are\nlacking.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50640327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/51858873", "body": "You're no longer escaping the dir - any potential issues with that? If it's okay, the \"escaped_dir\" is now unused and should be removed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/51858873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52278189", "body": "@jrobeson: This actually works in that case because the glob currently expands to nothing (try `echo /arglbargl/*` in a script - interactively it'll warn, but in a script it'll work). With #2719 as solution to #2394 it will continue to work. Yes, if we go with something else it might need to be revisited.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52278189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52338237", "body": "In current ToT, the begin/end is unnecessary here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52338237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52373612", "body": "We don't currently have backports, so the cygwin people will have to pick this one up themselves.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52373612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52908546", "body": "The test is actually unnecessary - count will return 1 if given no arguments (and 0 otherwise), so `if count $foos >/dev/null` works just as well. As would `if set -q foos[1]`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52908546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53304111", "body": "Or remove the fork entirely by using builtins. Would something like `string replace -r '^.*/' '' -- /dev/disk*/*` work? Or how is the structure here? I'm assuming there's directories named \"disk*\"?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53304111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53304193", "body": "This could be `string replace '/Volumes/' '' -- /Volumes/*`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53304193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54312642", "body": "Why sed and not grep (`grep -v '^0.0.0.0'`)?\n\nAlso, on my system the `getent` path also prints these.\n\nAnd while you are at it, you might also replace some of these commands with `string`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54312642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/56653059", "body": "\"from ABS or AUR\"?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/56653059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58258236", "body": "Typo: apt?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58258236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58259381", "body": "What's the sed for? With my git, it seems to do nothing. If the intention is to strip whitespace, you could also do `string trim`. Alternatively, it's probably more stable to use `git status --porcelain` (which is guaranteed stable and ignores a few configuration options) and strip everything up to and including the first space.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58259381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58259497", "body": "`string match -r '.*.c(pp)? -- $files`?\n\nEdit: urgh, yeah, the capturing-group stuff - `string match -r '.*\\.c(?:pp)?$' -- $files`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58259497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58259932", "body": "You might want `type -q cppcheck` here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58259932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55121593", "body": "Shouldn't this return 1 or not return?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55121593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55121672", "body": "If opts.invert_match is set, you'll need to return 0 (i.e. no match) here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55121672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55384876", "body": "@floam: If I add `if (opts.invert_match) return 0;` directly above this loop it seems to fix the return value for `-rv`, and my internal logic also says that should be okay - if we have a match, we want to ignore it. We already added any non-match above.\n\nThe below `if (!opts.quiet && !opts.invert_match)` can probably be reverted to `if (!opts.quiet)` then.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55384876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55937598", "body": "Doesn't this return 0 (i.e. no match) with \"-vq\"?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55937598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55937701", "body": "This might be why `string match -rvq` seems to always return 1 - without non-matches, with just non-matches and with one non-match and a match.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55937701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58545854", "body": "Why not just do the unmatch and then `string replace -r '\\s*=\\s*' '\\t'`? I.e. what's the `tr` still there for?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58545854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58546455", "body": "I think the intention here is to remove \"functionally empty\" lines, i.e. those that don't contain usable information - only comments or whitespace. So shouldn't it unmatch `^\\s*#` (ie. whitespace instead of word characters)?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58546455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58547120", "body": "Sure you want to have the `*` escaped? In glob mode that now matches a literal `*` character, so only the line `*\\[Dialer\\*` will be matched here. (And the \"-a\" is probably unnecessary). How about `string match '_[Dialer]_' - the \"[\" don't have special meaning in glob mode.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58547120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58548578", "body": "`string trim` instead of replace.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58548578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58743014", "body": "These are conflict markers that need to be removed (the \"====\" in line 124 and \">>>>\" in 182 as well).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58743014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58743354", "body": "The `cat` could be converted to stdin redirection (though it then needs an existence/readability test first). The `cut` could be a replace.\n\nThis is not important and can be done later.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58743354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59691120", "body": "From the pacman completion: \n\n``` fish\ncomplete -c $progname -n \"$sync; and not __fish_contains_opt -s u sysupgrade\" -s u -l sysupgrade -d 'Upgrade all packages that are out of date'\ncomplete -c $progname -n \"$sync; and __fish_contains_opt -s u sysupgrade\" -s u -l sysupgrade -d 'Also downgrade packages'\n```\n\nUnfortunately that seems to not generate `-Suu` properly, only `-Su -u` and the long variant work.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59691120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59972257", "body": "My idea was that we mention it when a variable _can't_ be universal, i.e. that the default is that it can. But then we'd need to check which can't - $PWD is one, I guess.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59972257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "wilhelmy": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4630", "title": "Add dedicated section about array variables, generated commands and argv handling to documentation", "body": "Any opinions?\r\n\r\nPersonally, I think the documentation could be more extensive in this area and it's something I fumble around with clumsily.\r\n\r\nI might write one given positive resonance (if I write it, I want to know I'm not wasting my time and see it merged and I will keep working on it until it meets the demands of any possible criticism) and enough time in the weeks to come.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4543", "title": "Add support for recovery of stale mount-points to cd.fish", "body": "I propose the following change for cd.fish:\r\n\r\n```\r\n--- /usr/share/fish/functions/cd.fish\t2017-10-12 08:34:42.000000000 +0200\r\n+++ .config/fish/functions/cd.fish\t2017-11-19 02:08:40.773047643 +0100\r\n@@ -27,6 +25,12 @@\r\n         return $status\r\n     end\r\n \r\n+    # allow explicit \"cd .\" if the mount-point became stale in the meantime\r\n+    if test \"$argv\" = \".\"\r\n+\tcd \"$PWD\"\r\n+\treturn $status\r\n+    end\r\n+\r\n     builtin cd $argv\r\n     set -l cd_status $status\r\n```\r\n\r\nwhich can help recycling windows where the mountpoint has disappeared and reappeared since. (e.g. stale sshfs mountpoint, which becomes unreachable in case you suspend your machine, which you can recover by rerunning sshfs and then doing another \"cd .\" in all affected fish shells.)", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dwt": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4627", "title": "Allow to wrap argparse call", "body": "## Environment\r\n```\r\n(virtualfish) dwt@crest ~/C/P/fish> fish --version\r\nfish, version 2.7.0\r\n(virtualfish) dwt@crest ~/C/P/fish>   echo $version\r\n2.7.0\r\n(virtualfish) dwt@crest ~/C/P/fish> uname -a\r\nDarwin crest.fritz.box 17.3.0 Darwin Kernel Version 17.3.0: Thu Nov  9 18:09:22 PST 2017; root:xnu-4570.31.3~1/RELEASE_X86_64 x86_64\r\n(virtualfish) dwt@crest ~/C/P/fish> echo $TERM\r\nxterm-256color\r\n```\r\n# Problem\r\n\r\nI want to wrap a function call, which does it's own argument parsing via `argparse`. My problem is, that there seems to be no way, to tell `argparse` that I only care for my additional argument, and that it shouldn't raise an error for all the other arguments that I don't care for.\r\n\r\nSo, what I'm searching for is a way to tell `argparse` that it should ignore all other arguments, except the one I'm specifying, and especially shall not consume them, but only what was specified.\r\n\r\nThis seems not to be possible.\r\n\r\n# Workaround\r\nI'm currently using this technique to work around the problem\r\n\r\n```fish\r\nfunctions --copy __vf_new __vf__new_projects_original\r\nfunction __vf_new --wraps=__vf_new\r\n    set -l options (fish_opt --short a --required)\r\n    argparse --name 'vf new' $options -- $argv ^/dev/null\r\n    if __vf__new_projects_original $argv; and test -n $_flag_a\r\n        cd $_flag_a\r\n        and pwd >?$VIRTUAL_ENV/.project\r\n    end\r\nend\r\n```\r\n\r\nThis seems to work, but only at the price, that I don't see any error messages from argparse anymore. So I'm searching for a better way.\r\n\r\nIs there an extension of the c-implemented argparse possible, or is there a better workaround? I think that being able to wrap shell commands or fish functions with another function by enhancing the supported arguments is n important and very powerful use case.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LandonSchropp": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4620", "title": "Add support for && and ||", "body": "Thanks for creating such an awesome shell! I've been enjoying using it, especially when scripting.\r\n\r\nI'm using Fish 2.7.0 on macOS 10.13.2 inside of a [custom tmux terminal profile](https://github.com/LandonSchropp/dotfiles/blob/master/tmux-256color-italic.terminfo).\r\n\r\nI'd like to request you guys add support for the `&&` and `||` operators. I know fish supports `and` and `or`, but using them feels a bit awkward, especially with the required semicolon.\r\n\r\nGoing off of the [Fish Design Document](https://fishshell.com/docs/current/design.html):\r\n\r\n* *The law of orthogonality*: My suggestion is a violation of this rule. There's no way around that other than the idea that it's syntactic sugar.\r\n* *The law of user focus*: I don't know about anyone else, but I expected these operators to exist when I first used Fish. They're almost universal across other languages and shells, and they're the first thing I reached for. I realized that's a sample size of one, but I wonder if other people expect the same thing. The use of `;` also requires the user to understand that `and` is a command, which adds a bit of cognitive load.\r\n* *The law of discoverability*: When I type `&&` in a command, Fish prints out an error message telling me what I should have used `and` instead. However, I wish would just do what I wanted instead. This feels like when I type `brew update <app>`, and it tells me I should have typed in `brew upgrade <app>`.\r\n\r\nI realize this is a small thing, but it's something I've missed from zsh.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cben": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4605", "title": "string escape drops NUL and following text", "body": "fish, version 2.7.0-513-g81dd4a45\r\nLinux, Fedora 27, gnome-terminal (TERM=xterm-256cotor).\r\nConfirmed without customization (`sh -c 'env HOME=$(mktemp -d) fish'`).\r\n\r\nActual behavior: `string escape` doesn't handle NUL:\r\n```\r\n/h/b/fish-shell> printf 'foo\\0bar' | cat -A\r\nfoo^@bar\u23ce\r\n/h/b/fish-shell> printf 'foo\\0bar' | string escape\r\nfoo\r\n```\r\nand `string unescape` has similar problem:\r\n```\r\n/h/b/fish-shell> printf 'escaped\\\\0text' | string unescape\r\nescaped\r\n```\r\n\r\nExpected behavior:\r\n```\r\n/h/b/fish-shell> printf 'foo\\0bar' | string escape\r\nfoo\\0bar\r\n/h/b/fish-shell> printf 'escaped\\\\0text' | string unescape | cat -A\r\nescaped^@text\u23ce\r\n```\r\n\r\nGenerally, it should be possible to round-trip any binary data through `| string escape | string unescape |`.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sanjibukai": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4603", "title": "Description of command in suggestion list not showing", "body": "Hello,\r\n\r\nI made some custom aliases (using `function` not `alias`) and I tried the complete feature that fish shell provide.\r\nAnd I noticed two problems:\r\n- Command description is not displayed at all in autocomplete suggestions list\r\n- Argument description is displayed sometimes in autocomplete suggestions list\r\n\r\nAs suggested I recorded the behavior https://asciinema.org/a/ykzBJHPSnKlYv1Z0g7QV4JJyx\r\n\r\nHere you can see (at the beginning) that the description of my commands (for example **`g`** and **`ga`** in the first screen) are not showing.\r\nThen you can see (from 0:26) that some arguments descriptions is displayed but not all.\r\nBut in the end (from 0:52) those descriptions are displayed.\r\n\r\nIn order to have some descriptions, I \"tricked\" my aliases so that I defined a main alias (for example here **`g`** for git) and I defined all the aliases (related with git) as argument for this pseudo-command:\r\n\r\nHere is my `g.fish` file including all the `complete` commands:\r\n\r\n    function g\r\n      eval $argv[1]\r\n    end\r\n\r\n    complete -xc g -d \"Git Main Alias file\"\r\n    complete -xc g -a \"gst glg ga ga. gau gco gci gcim gac gacm grls grao gpush\"\r\n    complete -xc g -a gst -d \"Status Short\"\r\n    complete -xc g -a glg -d \"Log Graph Short\"\r\n    complete -xc g -a ga -d \"Add\"\r\n    complete -xc g -a ga. -d \"Add ALL\"\r\n    complete -xc g -a gau -d \"Add Untracked\"\r\n    complete -xc g -a gco -d \"Git checkout\"\r\n    complete -xc g -a gci -d \"Commit Verbose\"\r\n    complete -xc g -a gcim -d \"Commit with CLI Message\"\r\n    complete -xc g -a gac -d \"Add ALL AND Commit Verbose\"\r\n    complete -xc g -a gacm -d \"Add ALL AND Commit with CLI Message\"\r\n    complete -xc g -a grls -d \"List remotes\"\r\n    complete -xc g -a grao -d \"Remote Add Origin\"\r\n    complete -xc g -a gpush -d \"Push Master to Origin\"\r\n\r\nCan anyone confirm if this is a bug or if I misused the `complete` feature?\r\n\r\nFish Version: fish, version 2.6.0\r\nOS: Linux manjaro-vm 4.13.2-1-MANJARO\r\nTerminal: xterm-256color\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sarum9in": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4582", "title": "Bracketed paste mode causes fish to hang on WSL if started as PID=2", "body": "## Environment\r\n$ fish --version\r\nfish, version 2.7.0\r\n$ uname -a\r\n// Note: this is [WSL Ubuntu](https://docs.microsoft.com/en-us/windows/wsl/reference)\r\nLinux XXX 4.4.0-43-Microsoft #1-Microsoft Wed Dec 31 14:42:53 PST 2014 x86_64 x86_64 x86_64 GNU/Linux\r\nTested on terminal emulators:\r\ncmder.exe\r\ncmd.exe\r\n\r\n## strace output (this is infinite loop)\r\n```\r\nwrite(1, \"\\33[?2004l\", 8)               = 8\r\ntime(NULL)                              = 1512877281\r\ntime(NULL)                              = 1512877281\r\nwrite(1, \"\\33[?2004l\", 8)               = 8\r\ntime(NULL)                              = 1512877281\r\ntime(NULL)                              = 1512877281\r\nwrite(1, \"\\33[?2004l\", 8)               = 8\r\n```\r\n## Issue\r\nIf fish is started with pid=2 on WSL it gets stuck inside `__fish_config_interactive`. Printf debugging suggests that stuckness happens on `if not type -q __fish_command_not_found_handler` line, inside `__fish_disable_bracketed_paste` handler. Commenting-out `printf` inside that handler mitigates the issue.\r\n\r\n## Steps to reproduce\r\n\r\n### Naive way in line how issue was noticed\r\n1. From cmd.exe run bash\r\n2. Verify that pid=2 via `echo $$`\r\n3. From bash run `exec fish`\r\n4. At this point fish hangs and terminal is unresponsive.\r\n5. Start another terminal emulator and perform steps 1 and 2.\r\n6. In 2nd terminal emulator you have working fish instance.\r\n7. Run `pkill fish` to kill all running fish instances. Go to step 1 to reproduce again.\r\n\r\n### Another way to reproduce proving that it is related to pid=2\r\n1. From cmd.exe run `bash`\r\n2. From another cmd.exe run `bash`\r\n3. Run `echo $$` in both terminals\r\n4. Run `exec fish` in a terminal where pid!=2, this starts fish just fine\r\n5. Run `exec fish` in a terminal where pid==2, this instance hangs\r\n\r\n4 and 5 can be reordered.\r\n\r\n## Further actions\r\nI am open to debug this further but I am not sure what to look for.\r\n\r\n## Use case\r\nThis is useful if you want to run fish as your main shell in WSL. fish can replace bash on startup via ~/.bashrc. Bash normally starts as pid=2 so as I would expect any other default shell to:\r\n![image](https://user-images.githubusercontent.com/1058248/33801875-258125ac-dd61-11e7-991a-39a75bc3d799.png)\r\n\r\n\r\n## Possible mitigations\r\nMake it possible to disable [bracketed paste mode](https://github.com/fish-shell/fish-shell/pull/3871#issuecomment-321034918). Currently this can be done by either overriding __fish_config_interactive or setting FISH_UNIT_TESTS_RUNNING.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4582/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4bcd0413f8a64bbd5d4924a162d346111a644fe9", "message": "do not execute external command in pkill completions (#4586)\n\nRunning \"cut\" multiple times in a loop has an adverse performance\r\nimpact on first use, especially on slow systems. Using builtin \"read\"\r\nfor the same purpose is faster and cleaner."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erszk": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4578", "title": "Easier access to the directory stack", "body": "In bash, `~-` expands to the last directory you were in (essentially the same as `$OLDPWD`), and `~n` expands to the nth directory in the stack as referenced by the output of `dirs -v`, where 0 is the top of stack, i.e. the current working directory. So, in `fish` terms, `~1` is the same as `$dirstack[1]`.\r\n\r\nThis is one of the most little-known but killer features of bash's `pushd`/`popd`, and in my eyes one of the major reasons they are currently superior to fish's implementation.\r\n\r\nThis allows you, for instance, to quickly look at the output of `dirs -v` if necessary, and then do things like `cp foo.txt ~1/bar` or `mv foo.txt ~-`, with tab completion working etc.\r\n\r\n```fish\r\n$ echo $FISH_VERSION\r\n2.7.0\r\n$ uname -a | sed \"s/\"(hostname)\"/hostname/\"\r\nDarwin hostname 17.2.0 Darwin Kernel Version 17.2.0: Fri Sep 29 18:27:05 PDT 2017; root:xnu-4570.20.62~3/RELEASE_X86_64 x86_64\r\n$ echo $TERM\r\nxterm-256color\r\n```", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pfgithub": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4572", "title": "ctrl-c does not clear blank lines", "body": "<!--\r\nPlease tell us which fish version you are using by executing the following:\r\n\r\n  fish --version\r\n  echo $version\r\n\r\nPlease tell us which operating system and terminal you are using. The output of `uname -a` and `echo $TERM` may be helpful in this regard although other commands might be relevant in your specific situation.\r\n\r\nPlease tell us if you tried fish without third-party customizations by executing this command and whether it affected the behavior you are reporting:\r\n\r\n  sh -c 'env HOME=$(mktemp -d) fish'\r\n\r\nTell us how to reproduce the problem. Including an asciinema.org recording is useful for problems that involve the visual display of fish output such as its prompt.\r\n-->\r\n\r\n> `fish --version`\r\nfish, version 2.7.0\r\n> `echo $version`\r\n2.7.0\r\n> `uname -a`\r\nDarwin pfgs-MacBook-Pro.local 17.2.0 Darwin Kernel Version 17.2.0: Fri Sep 29 18:27:05 PDT 2017; root:xnu-4570.20.62~3/RELEASE_X86_64 x86_64\r\n> `echo $TERM`\r\nxterm-256color\r\n\r\nProblem still occurs with `sh -c 'env HOME=$(mktemp -d) fish'`\r\n\r\n**Steps to reproduce:**\r\nOpen a terminal window\r\nType nothing\r\nPress control-c\r\n\r\n**What I expected**\r\nSimilar to the functionality of bash and zsh, the current line would be cleared and a new terminal line would appear\r\n\r\n    pfg@pfgs-MacBook-Pro /U/p/D/N/clipass> ^C\r\n    pfg@pfgs-MacBook-Pro /U/p/D/N/clipass> \r\n    \r\n**What Happened**\r\nNothing happened, nothing was outputted, and no new line appeared", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4572/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msteed": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4570", "title": "tilde characters in cdh tab completions are escaped (sometimes)", "body": "```sh\r\nmsteed@bones:~> fish --version\r\nfish, version 2.7.0\r\nmsteed@bones:~> echo $version\r\n2.7.0\r\nmsteed@bones:~> uname -a\r\nLinux bones 4.13.12-1-ARCH #1 SMP PREEMPT Wed Nov 8 11:54:06 CET 2017 x86_64 GNU/Linux\r\nmsteed@bones:~> echo $TERM\r\ntmux-256color\r\nmsteed@bones:~>\r\n\r\n```\r\n\r\nThe problem:\r\n```sh\r\nmsteed@bones:~> sh -c 'env HOME=$(mktemp -d) fish'\r\nWelcome to fish, the friendly interactive shell\r\nmsteed@bones /h/msteed> cd\r\nmsteed@bones ~> mkdir -p a/b\r\nmsteed@bones ~> cd a/b\r\nmsteed@bones ~/a/b> cd\r\nmsteed@bones ~> cdh a<TAB>\r\n```\r\nWhen I hit <kbd>Tab</kbd>, fish supplies this completion:\r\n```sh\r\nmsteed@bones ~> cdh \\~/a/b\r\n```\r\nIf I accept that, fish (correctly) complains:\r\n```sh\r\ncd: The directory \u201c~/a/b\u201d does not exist\r\n```\r\n\r\nIf I hit <kbd>Tab</kbd> with an empty directory name, i.e., `cdh <TAB>`, fish lists the completions with the `~` characters escaped, but selecting a completion un-escapes the string so the command line is formatted correctly.\r\n\r\nEdit: this may be the problem reported in https://github.com/fish-shell/fish-shell/issues/4566", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13230705", "body": "You've made some nice improvements here.\n\nI know you've reworked some of my code but it would have been nice to be retained as the original author.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13230705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13236640", "body": "No worries here about copyright but I would like to appear as an author in the git history (log/blame/etc). It's one of the currencies of open source :grin:\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13236640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/60838790", "body": "No reason except that I am an autotools newbie :-)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/60838790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Estirp": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4566", "title": "fail to change to a directory setted with read", "body": "fish, version 2.7.0\r\n\r\nFish fail to change to a directory setted with read.\r\n\r\n```\r\nbug> ls\r\n' b'/\r\nbug> read --shell dir\r\nread> \\ b/ (tab pressed)\r\nbug> cd $dir\r\ncd: La fonction '\\ b/' n'existe pas (function '\\b/' does not exists)\r\nbug> echo $dir\r\n\\ b/\r\nbug> cd \\ b/\r\nb/ b> \r\n```\r\n\r\nIt seems about the escape char :\r\n```\r\nbug> read  dir\r\nread>  b\r\nbug> cd $dir\r\nb/ b> \r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rltbennett": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4555", "title": "In fish_config, allow choosing any color for syntax highlighting", "body": "Fish version: 2.7.0\r\n\r\nIt would be ideal if the fish_config portal allowed choosing arbitrary colors (by RGB, HSB, CMYK etc) for syntax highlighting. Currently it limits the choices to a fairly limited color palette.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "seagreen": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4542", "title": "Allow disabling universal variables", "body": "First, I apologize for opening such a large issue as my first issue. I just read the Design Principles document today and that alone convinced me to switch to Fish. The switch has gone swimmingly so far -- Fish is completely living up to its \"Configurability is the root of all evil\" principle.\r\n\r\nI have run into one moderate problem. I already have a way to manage configuration state between machines (I use version controlled dotfiles, but the particulars of my solution aren't important here -- lots of other people use different ways). This makes Universal Variables a \"Law of Orthogonality\" violation for me. I'd like for my `~/.config/fish/config.fish` file to describe the entire state of Fish configuration on my machine, but now I also have to think about a second mechanism that also has its own way of storing state.\r\n\r\nThe few problems I've had so far have had to do with this issue, for instance not realizing I was setting a Universal Variables in my `config.fish` file, so when I removed it the setting still persisted. Persistent, mutable state on a machine is an easy way to create user confusion, and if we can get away without it (and the `config.fish` file already provides a great way of doing so) I think it's worth considering.\r\n\r\nAlso, thanks for Fish!", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4542/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JohnMH": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4540", "title": "`read | cat` crashes fish", "body": "fish 2.3.1\r\noperating system: Irrelevant, running under Linux kernel (Also tested on FreeBSD with unknown fish version)\r\nterm: xterm-256color", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4540/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paulswartz": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4539", "title": "OS X High Sierra: unicode in `fish_prompt` gets wrong length calculated", "body": "fish version: 2.6.0 and fa57565\r\nOS: OS X High Sierra, 10.13.1\r\n\r\nAfter upgrading, having a unicode character in my prompt (along with a right prompt) has the size calculated incorrectly.\r\n\r\n<img width=\"374\" alt=\"screenshot 2017-11-15 15 29 48\" src=\"https://user-images.githubusercontent.com/214921/32858656-31e45652-ca1a-11e7-9f76-d9944e4a382a.png\">\r\n\r\nIn the above screenshot, everything is normal when I have a fully ASCII prompt. When I source my `fish_prompt` to re-add the Unicode character, the cursor is positioned on the next line.\r\n\r\nEverything was working normally before the update to High Sierra. It's not working in either iTerm or Terminal.\r\n\r\nHappy to get any other debugging information.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PenegalECI": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4537", "title": "Take into account variables when trying to automatically add fuzzy translations", "body": "Hello, there.\r\n\r\nWorking on PR #4470, there is something that bothers me a lot: when using `make po/$LANG.po`, for any language, `make` tries to create fuzzy translations for untranslated items, by searching close ones in the existing translations. Currently, it does not take into account the number of variables, but, this way, you get many translations with different number of variables compared to the original string, and Travis does not like that. Could the Makefile be corrected to prevent auto-translating with variable number mismatches?\r\n\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4520", "title": "Reconsider removing '?' wildcard", "body": "Hello, there.\r\n\r\nUsing fish 2.4.0 as packaged by Debian Stretch, I noticed that `zpool`'s `-?` makes fish prompt an error message:\r\n```\r\nroot@Alioth ~ {\u23170/\u2b1354}[1]\uaa5c# zpool -?\r\nNo matches for wildcard '-?'.  (Tip: empty matches are allowed in 'set', 'count', 'for'.)\r\nfish: zpool -?\r\n            ^\r\n```\r\n\r\nIt looks like fish tries to interpret the interrogation mark, whereas it's a legitimate switch of `zpool`:\r\n```\r\nzpool -?                    \r\n                            \r\n    Displays a help message.\r\n```\r\n\r\nSuch a bug seems beyond my development knowledge, so I opened this issue.\r\n\r\n```\r\nroot@Alioth ~ {\u23170/\u2b1354}[0]\uaa5c# fish --version\r\nfish, version 2.4.0\r\nroot@Alioth ~ {\u23170/\u2b1354}[0]\uaa5c# uname -a\r\nLinux Alioth 4.9.0-4-amd64 #1 SMP Debian 4.9.51-1 (2017-09-28) x86_64 GNU/Linux\r\nroot@Alioth ~ {\u23170/\u2b1354}[0]\uaa5c# echo $TERM\r\nscreen\r\n```\r\n\r\nFWIW, fish executes in a tmux session, though I don't think it matters. If you need more data, feel free to ask it.\r\n\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4191", "title": "rename public interfaces to not begin with a double underscore", "body": "Hello, there.\r\n\r\nI'm using fish 2.4.0, and working on completions for `mdadm`, which pull I will eventually request. I'm puzzled with the builtins for options tests: there is `__fish_contains_opt`, to test if an option has already been selected, and `__fish_not_contain_opt`, to test if an option has not been already tested. What puzzles me here is the difference between these names: the first one has the 3rd-person 's', whereas the second one does not have it. Once you got it, you deal with it easily, but it looks like a useless idiosyncrasy; `__fish_not_contain_opt` should be renamed to `__fish_not_contains_opt`, or does the 's' disappeared with the implied 'does'?\r\n\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/dcf9ce6fc5ba802876b3bdda44d3563f2ac51e9f", "message": "Added completions/translations for zfs and zpool"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/0f587320edfa41a7c83f336ede9fcb5224077865", "message": "Added translations for mdadm completions (#4587)"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4ab922fc7c2d8cbe79ef6b53eec83303d3173ab8", "message": "Corrected variables mismatches in translations"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/9a873f149538d538fcb01e5593d99e7a176cc83c", "message": "Tried bugfix for Travis build"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/bcbb4cc9388de4847b2c2ab3eec971be58791865", "message": "Corrected translations mismatches failing Travis"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/97e446b7879a9e5f1589fabcb3e71e9da20ec405", "message": "Upgraded .po files"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/b917f168d39909661c179bab8457effe72e8d90c", "message": "Improved french translations; minor completion corrections"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timofonic": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4531", "title": "(ncurses-git? related error when compiling fish-git from Archlinux AUR", "body": "*  fish --version: fish, version 2.6.0-750-ged0a57ff\r\n\r\nPlease tell us which operating system and terminal you are using. The output of \r\n* `uname -a` : Linux timolaptop 4.13.0-1035f22af3e97 #1 SMP PREEMPT Fri Sep 1 06:05:09 CEST 2017 x86_64 GNU/Linux\r\n* `echo $TERM` : xterm-256color (I use Terminology)\r\n\r\nI installed fish-git successfully, but this error appeared while compiling it. I use ncurses-git.\r\n\r\n```\r\nrm -f lib/libmuparser.a\r\nar rcu lib/libmuparser.a muParser_lib_muParser.o muParser_lib_muParserBase.o muP\r\narser_lib_muParserBytecode.o muParser_lib_muParserCallback.o muParser_lib_muPars\r\nerDLL.o muParser_lib_muParserError.o muParser_lib_muParserInt.o muParser_lib_muP\r\narserTest.o muParser_lib_muParserTokenReader.o\r\nar: `u' modifier ignored since `D' is the default (see `U')\r\nar: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nar: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nar: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nar: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nar: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nar: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nar: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nar: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nar: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nranlib lib/libmuparser.a\r\nranlib: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nranlib: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nranlib: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nranlib: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nranlib: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nranlib: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nranlib: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nranlib: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n\r\nranlib: libtinfo.so.6: cannot open shared object file: No such file or directory\r\n```", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rocketraman": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4519", "title": "COLUMNS seems incorrect for powerline-go", "body": "# Meta-data:\r\n\r\n```\r\n# fish --version\r\nfish, version 2.3.1\r\n\r\n# uname -a\r\nLinux edison 4.13.5-200.fc26.x86_64 #1 SMP Thu Oct 5 16:53:13 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n# echo $TERM\r\nxterm-256color\r\n```\r\n\r\nTried without third-party customizations and still have the same issue.\r\n\r\n# Problem:\r\n\r\nI am attempting to use powerline-go. For some reason, my prompt is truncated. In discussion in a powerline-go issue, the claim by the author is that fish is not reporting COLUMNS correctly, which is causing the prompt truncation. See https://github.com/justjanne/powerline-go/issues/46#issuecomment-341641769 and the previous few comments.\r\n\r\nIs it possible to confirm somehow whether the problem is definitely in `fish` or in `powerline-go`?", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3954", "title": "support bash style git completion for git command aliases containing a \"null command\"", "body": "```\r\n~ fish --version\r\nfish, version 2.3.1\r\n~ echo $version\r\n2.3.1\r\n```\r\n\r\nGit completion for bash has a very useful feature in which a null command can be used to assign the completion command for an alias. Here is the description: https://github.com/git/git/blob/master/contrib/completion/git-completion.bash#L26.\r\n\r\nIt would be great if the git completion built in to fish would support this as well.\r\n\r\nNote that, for some reason, I can't get this to work with bash, so I suppose its possible that my aliases are not set up correctly and fish already supports this, but I don't think that's the case.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3136", "title": "Allow more complex interactive search of history, history command with regex", "body": "It would be nice if when doing a history search, I could start from a regex. For example, if my history contained:\n\n`foo bar baz`\n\nI should be able to type:\n\n`foo.*baz` with an `Alt-Up` [1] and find `foo bar baz`.\n\nOn a related note, even `history --search` doesn't seem to work with regexes -- one has to `grep` it for equivalent behavior.\n\n[1] I'm not sure if this should be the default behavior or gated behind a separate key combo from a regular history traversal. Perhaps Ctrl-Alt-Up or something like that.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gotjoshua": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4507", "title": "Named Function Arguments with defaults and - Feature Proposal", "body": "This feature request is continuing a discussion here:\r\nhttps://github.com/fish-shell/fish-shell/issues/2645#issuecomment-340210168\r\n\r\nI feel that the current way to define named arguments and give them defaults, could use some improvement, so I offer a proposal here to discuss some possibilities. I'd like it to work as close to ECMA as possible:\r\n\r\n[11.1.1 Default parameter values ](http://exploringjs.com/es6/ch_parameter-handling.html#sec_overview-parameter-handling)\r\n\r\n```js\r\nfunction func(x, y=0) {\r\n    return [x, y];\r\n}\r\nfunc(1, 2); // [1, 2]\r\nfunc(1); // [1, 0]\r\nfunc(); // [undefined, 0]\r\n```\r\n\r\nI know this precise syntax won't work in fish, but perhaps something like this:\r\n```\r\nfunction func -a x, y=0\r\n    return [x, y];\r\nend;\r\n```\r\n\r\nI also thought about making required or optional explicit could be handy (and fish could offer automatic errors when the func is called without required params, eg:\r\n```\r\nfunction func --argument-required x --argument-optional y=0\r\n    return [x, y];\r\nend;\r\nfunc 1 2; // [1, 2]\r\nfunc 1; // [1, 0]\r\nfunc null 1; // [null,1]  *does fish understand 'null'?\r\nfunc; // error: argument x is required\r\n```\r\nPerhaps it could have a short-form like:\r\n```\r\nfunction func -ar x -ao y=0\r\n    return [x, y];\r\nend;\r\n```\r\n-o and -r would be irrelevant if used without -a\r\n\r\nI have zero experience with C code, so I doubt it is me to set up a dev and build environment to play with this, but I am very happy to discuss the details of how we may like the feature to function, and to come in contact with the project maintainers. I think Fish Shell seriously rocks, and I'm happy to help make it better.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4507/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "teresaejunior": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4506", "title": "Implement `history insert`", "body": "I have created two functions that would be interesting to have ported as plugins. One is a precision calculator directly from the prompt (ex. running `3*(1/2)` returns `1.5` instead of expanding globbing and command substitution, and the other runs [thefuck](https://github.com/nvbn/thefuck) automatically on the fish_command_not_found event.\r\n\r\nNow, both of them write to the history file, and would benefit greatly from a `history insert` command. I'm currently using the following:\r\n\r\n    if set -q fish_history\r\n        set __fish_history $fish_history\r\n    else if set -q XDG_DATA_HOME\r\n        set __fish_history $XDG_DATA_HOME/fish/fish_history\r\n    else\r\n        set __fish_history ~/.local/share/fish/fish_history\r\n    end\r\n\r\n    echo -e '- cmd: '(commandline)'\\n  when: '(date +%s) >>$__fish_history\r\n    history --merge\r\n\r\nThe problem with this approach is that `commandline` is written to the history file as is (without considering newlines, without escaping special characters, etc.) and, of course, `history --merge` brings the undesired side-effect of merging history from all other sessions.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nbuwe": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4505", "title": "Terminal mode confusion", "body": "From source code inspection:\r\n\r\nhttps://github.com/fish-shell/fish-shell/blob/798ad363baa084b619b5cad6faae9d79dc4811da/src/screen.cpp#L521-L524\r\n\r\nThe comment is demonstrably false:\r\n```\r\nstty -onlcr; printf '123\\n456\\r7\\r\\n'; stty onlcr\r\n```\r\nThe problem it seems is that fish doesn't turn off `ONLCR`.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8f0f05ca44fdb3eff4a92b001d3d7ebbf08ff642", "message": "Rewrite tparm_solaris_kludge to call tparm with default parameters\n\nCloses #4502."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mqudsi": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4503", "title": "cmake build broken on solaris", "body": "cmake searches for (and finds) `wcsdup`, but the subsequent build is broken. For reference, a clean autotools build works fine by comparison.\r\n\r\nAlso, pcre2's cmake script is doing something that the autotools build script doesn't, as it throws errors about incorrect flags (`-f`, `-F`, `-x) to `grep`.\r\n\r\n\r\n```\r\nmqudsi@solaris ~/f/build> cmake ..\r\n-- The C compiler identification is GNU 5.2.0\r\n-- The CXX compiler identification is GNU 5.2.0\r\n-- Check for working C compiler: /opt/csw/bin/gcc\r\n-- Check for working C compiler: /opt/csw/bin/gcc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /opt/csw/bin/c++\r\n-- Check for working CXX compiler: /opt/csw/bin/c++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Found Curses: /usr/lib/libcurses.so\r\n-- Looking for pthread.h\r\n-- Looking for pthread.h - found\r\n-- Looking for pthread_create\r\n-- Looking for pthread_create - found\r\n-- Found Threads: TRUE\r\n-- Looking for backtrace_symbols\r\n-- Looking for backtrace_symbols - found\r\n-- Looking for clock_gettime\r\n-- Looking for clock_gettime - found\r\n-- Looking for ctermid_r\r\n-- Looking for ctermid_r - found\r\n-- Looking for include file curses.h\r\n-- Looking for include file curses.h - found\r\n-- Performing Test HAVE_STRUCT_DIRENT_D_TYPE\r\n-- Performing Test HAVE_STRUCT_DIRENT_D_TYPE - Failed\r\n-- Looking for dirfd\r\n-- Looking for dirfd - found\r\n-- Looking for include file execinfo.h\r\n-- Looking for include file execinfo.h - found\r\n-- Looking for flock\r\n-- Looking for flock - not found\r\n-- Looking for futimens\r\n-- Looking for futimens - found\r\n-- Looking for futimes\r\n-- Looking for futimes - not found\r\n-- Looking for getifaddrs\r\n-- Looking for getifaddrs - not found\r\n-- Looking for include file getopt.h\r\n-- Looking for include file getopt.h - found\r\n-- Looking for getpwent\r\n-- Looking for getpwent - found\r\n-- Looking for gettext\r\n-- Looking for gettext - found\r\n-- Looking for include file inttypes.h\r\n-- Looking for include file inttypes.h - found\r\n-- Looking for killpg\r\n-- Looking for killpg - found\r\n-- Looking for include file libintl.h\r\n-- Looking for include file libintl.h - found\r\n-- Looking for lrand48_r\r\n-- Looking for lrand48_r - not found\r\n-- Looking for include file memory.h\r\n-- Looking for include file memory.h - found\r\n-- Looking for mkostemp\r\n-- Looking for mkostemp - not found\r\n-- Looking for include file ncurses/term.h\r\n-- Looking for include file ncurses/term.h - found\r\n-- Looking for DIR\r\n-- Looking for DIR - not found\r\n-- Looking for shm_open\r\n-- Looking for shm_open - found\r\n-- Looking for include file siginfo.h\r\n-- Looking for include file siginfo.h - found\r\n-- Looking for include file spawn.h\r\n-- Looking for include file spawn.h - found\r\n-- Looking for include file stdint.h\r\n-- Looking for include file stdint.h - found\r\n-- Looking for include file stdlib.h\r\n-- Looking for include file stdlib.h - found\r\n-- Looking for std::wcscasecmp\r\n-- Looking for std::wcscasecmp - not found\r\n-- Looking for std::wcsdup\r\n-- Looking for std::wcsdup - not found\r\n-- Looking for std::wcsncasecmp\r\n-- Looking for std::wcsncasecmp - not found\r\n-- Looking for include file strings.h\r\n-- Looking for include file strings.h - found\r\n-- Looking for include file string.h\r\n-- Looking for include file string.h - found\r\n-- Looking for include file stropts.h\r\n-- Looking for include file stropts.h - found\r\n-- Looking for struct\r\n-- Looking for struct - not found\r\n-- Looking for struct\r\n-- Looking for struct - not found\r\n-- Looking for sys_errlist\r\n-- Looking for sys_errlist - not found\r\n-- Looking for include file sys/ioctl.h\r\n-- Looking for include file sys/ioctl.h - found\r\n-- Looking for include file sys/resource.h\r\n-- Looking for include file sys/resource.h - found\r\n-- Looking for include file sys/select.h\r\n-- Looking for include file sys/select.h - found\r\n-- Looking for include file sys/stat.h\r\n-- Looking for include file sys/stat.h - found\r\n-- Looking for include file sys/sysctl.h\r\n-- Looking for include file sys/sysctl.h - not found\r\n-- Looking for include file sys/types.h\r\n-- Looking for include file sys/types.h - found\r\n-- Looking for include file termios.h\r\n-- Looking for include file termios.h - found\r\n-- Looking for include file term.h\r\n-- Looking for include file term.h - not found\r\n-- Looking for include file unistd.h\r\n-- Looking for include file unistd.h - found\r\n-- Looking for wcscasecmp\r\n-- Looking for wcscasecmp - found\r\n-- Looking for wcsdup\r\n-- Looking for wcsdup - found\r\n-- Looking for wcslcpy\r\n-- Looking for wcslcpy - not found\r\n-- Looking for wcsncasecmp\r\n-- Looking for wcsncasecmp - found\r\n-- Looking for wcsndup\r\n-- Looking for wcsndup - not found\r\n-- Looking for _nl_msg_cat_cntr\r\n-- Looking for _nl_msg_cat_cntr - not found\r\n-- Looking for _sys_errs\r\n-- Looking for _sys_errs - not found\r\n-- Looking for stddef.h\r\n-- Looking for stddef.h - found\r\n-- Check size of struct winsize\r\n-- Check size of struct winsize - done\r\n-- Looking for TIOCGWINSZ\r\n-- Looking for TIOCGWINSZ - not found\r\n-- Check size of wchar_t[8]\r\n-- Check size of wchar_t[8] - done\r\n-- Using bundled PCRE2 library\r\n-- Found BZip2: /usr/lib/libbz2.so (found version \"1.0.6\")\r\n-- Looking for BZ2_bzCompressInit\r\n-- Looking for BZ2_bzCompressInit - found\r\n-- Found ZLIB: /usr/lib/libz.so (found version \"1.2.8\")\r\n-- Found Readline: /usr/include\r\n-- Found Editline: /usr/include/editline\r\n-- Looking for dirent.h\r\n-- Looking for dirent.h - found\r\n-- Looking for windows.h\r\n-- Looking for windows.h - not found\r\n-- Looking for bcopy\r\n-- Looking for bcopy - found\r\n-- Looking for memmove\r\n-- Looking for memmove - found\r\n-- Looking for strerror\r\n-- Looking for strerror - found\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /export/home/mqudsi/fish-shell/build\r\nmqudsi@solaris ~/f/build> make -j12\r\nScanning dependencies of target CHECK-FISH-BUILD-VERSION-FILE\r\nScanning dependencies of target muparser_project\r\nScanning dependencies of target pcre2-32\r\n[  1%] Creating directories for 'muparser_project'\r\n[  2%] No download step for 'muparser_project'\r\n[  2%] No update step for 'muparser_project'\r\n[  3%] No patch step for 'muparser_project'\r\n[  4%] Performing configure step for 'muparser_project'\r\n[  4%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_auto_possess.c.o\r\n[  5%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_compile.c.o\r\n[  6%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/pcre2_chartables.c.o\r\nFISH_BUILD_VERSION=2.6.0-727-g798ad36\r\n[  7%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_config.c.o\r\n[  7%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_context.c.o\r\n[  7%] Built target CHECK-FISH-BUILD-VERSION-FILE\r\n[  8%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_dfa_match.c.o\r\nScanning dependencies of target build_fish_pc\r\n[  9%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_error.c.o\r\nScanning dependencies of target BUILD_MANUALS\r\n[ 10%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_find_bracket.c.o\r\n[ 12%] Generating fish.pc\r\n[ 12%] Generating doc_src/commands.hdr\r\n[ 12%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_jit_compile.c.o\r\n[ 13%] Built target build_fish_pc\r\n[ 14%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_maketables.c.o\r\n[ 14%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_match_data.c.o\r\n[ 15%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_match.c.o\r\n[ 16%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_newline.c.o\r\n[ 17%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_ord2utf.c.o\r\n[ 18%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_pattern_info.c.o\r\n[ 18%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_serialize.c.o\r\n[ 19%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_string_utils.c.o\r\n[ 20%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_study.c.o\r\n[ 21%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_substitute.c.o\r\n[ 21%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_substring.c.o\r\n[ 24%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_tables.c.o\r\n[ 24%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_ucd.c.o\r\n[ 25%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_valid_utf.c.o\r\n[ 25%] Building C object pcre2-10.22/CMakeFiles/pcre2-32.dir/src/pcre2_xclass.c.o\r\n[ 26%] Generating lexicon_filter\r\ngrep: illegal option -- F\r\ngrep: illegal option -- x\r\ngrep: illegal option -- f\r\nUsage: grep [-c|-l|-q] -bhinsvw pattern file . . .\r\ngrep: illegal option -- F\r\ngrep: illegal option -- x\r\ngrep: illegal option -- f\r\nUsage: grep [-c|-l|-q] -bhinsvw pattern file . . .\r\n[ 26%] Generating share/man\r\n      doxygen file: /export/home/mqudsi/fish-shell/Doxyfile.help\r\n   input directory: /export/home/mqudsi/fish-shell/build/doc_src\r\n      input filter: /export/home/mqudsi/fish-shell/build/lexicon_filter\r\n  output directory: /export/home/mqudsi/fish-shell/build/share\r\n          skipping:\r\n\u000fdoxygen is not installed, so documentation will not be built.\r\n[ 27%] Built target BUILD_MANUALS\r\n[ 28%] Linking C static library libpcre2-32.a\r\n[ 28%] Built target pcre2-32\r\n[ 29%] Performing build step for 'muparser_project'\r\nmake: Warning: Ignoring DistributedMake -j option\r\nmake: Warning: Ignoring DistributedMake -j option\r\nmake: Warning: Ignoring DistributedMake -j option\r\n/export/home/mqudsi/fish-shell/build/muparser-build/obj/bk-deps g++ -c -o muParser_lib_muParser.o -DNDEBUG    -I/export/home/mqudsi/fish-shell/muparser-2.2.5/include -D_UNICODE=1 -Wno-switch -O2 /export/home/mqudsi/fish-shell/muparser-2.2.5/src/muParser.cpp\r\n/export/home/mqudsi/fish-shell/build/muparser-build/obj/bk-deps g++ -c -o muParser_lib_muParserBase.o -DNDEBUG    -I/export/home/mqudsi/fish-shell/muparser-2.2.5/include -D_UNICODE=1 -Wno-switch -O2 /export/home/mqudsi/fish-shell/muparser-2.2.5/src/muParserBase.cpp\r\n/export/home/mqudsi/fish-shell/build/muparser-build/obj/bk-deps g++ -c -o muParser_lib_muParserBytecode.o -DNDEBUG    -I/export/home/mqudsi/fish-shell/muparser-2.2.5/include -D_UNICODE=1 -Wno-switch -O2 /export/home/mqudsi/fish-shell/muparser-2.2.5/src/muParserBytecode.cpp\r\n/export/home/mqudsi/fish-shell/build/muparser-build/obj/bk-deps g++ -c -o muParser_lib_muParserCallback.o -DNDEBUG    -I/export/home/mqudsi/fish-shell/muparser-2.2.5/include -D_UNICODE=1 -Wno-switch -O2 /export/home/mqudsi/fish-shell/muparser-2.2.5/src/muParserCallback.cpp\r\n/export/home/mqudsi/fish-shell/build/muparser-build/obj/bk-deps g++ -c -o muParser_lib_muParserDLL.o -DNDEBUG    -I/export/home/mqudsi/fish-shell/muparser-2.2.5/include -D_UNICODE=1 -Wno-switch -O2 /export/home/mqudsi/fish-shell/muparser-2.2.5/src/muParserDLL.cpp\r\n/export/home/mqudsi/fish-shell/build/muparser-build/obj/bk-deps g++ -c -o muParser_lib_muParserError.o -DNDEBUG    -I/export/home/mqudsi/fish-shell/muparser-2.2.5/include -D_UNICODE=1 -Wno-switch -O2 /export/home/mqudsi/fish-shell/muparser-2.2.5/src/muParserError.cpp\r\n/export/home/mqudsi/fish-shell/build/muparser-build/obj/bk-deps g++ -c -o muParser_lib_muParserInt.o -DNDEBUG    -I/export/home/mqudsi/fish-shell/muparser-2.2.5/include -D_UNICODE=1 -Wno-switch -O2 /export/home/mqudsi/fish-shell/muparser-2.2.5/src/muParserInt.cpp\r\n/export/home/mqudsi/fish-shell/build/muparser-build/obj/bk-deps g++ -c -o muParser_lib_muParserTest.o -DNDEBUG    -I/export/home/mqudsi/fish-shell/muparser-2.2.5/include -D_UNICODE=1 -Wno-switch -O2 /export/home/mqudsi/fish-shell/muparser-2.2.5/src/muParserTest.cpp\r\n/export/home/mqudsi/fish-shell/build/muparser-build/obj/bk-deps g++ -c -o muParser_lib_muParserTokenReader.o -DNDEBUG    -I/export/home/mqudsi/fish-shell/muparser-2.2.5/include -D_UNICODE=1 -Wno-switch -O2 /export/home/mqudsi/fish-shell/muparser-2.2.5/src/muParserTokenReader.cpp\r\nrm -f lib/libmuparser.a\r\nar rcu lib/libmuparser.a muParser_lib_muParser.o  muParser_lib_muParserBase.o  muParser_lib_muParserBytecode.o  muParser_lib_muParserCallback.o  muParser_lib_muParserDLL.o  muParser_lib_muParserError.o  muParser_lib_muParserInt.o  muParser_lib_muParserTest.o  muParser_lib_muParserTokenReader.o\r\nranlib lib/libmuparser.a\r\n[ 29%] Performing install step for 'muparser_project'\r\nmake: Warning: Ignoring DistributedMake -j option\r\nmake: Warning: Ignoring DistributedMake -j option\r\n/opt/csw/bin/ginstall -c -d /export/home/mqudsi/fish-shell/build/muparser-build/dst/lib\r\n/opt/csw/bin/ginstall -c -m 644 ./lib/libmuparser.a /export/home/mqudsi/fish-shell/build/muparser-build/dst/lib\r\n/opt/csw/bin/ginstall -c -d /export/home/mqudsi/fish-shell/build/muparser-build/dst\r\nfor f in include/muParser.h  include/muParserBase.h  include/muParserBytecode.h  include/muParserCallback.h  include/muParserDLL.h  include/muParserDef.h  include/muParserError.h  include/muParserFixes.h  include/muParserInt.h  include/muParserStack.h  include/muParserTemplateMagic.h  include/muParserTest.h  include/muParserToken.h  include/muParserTokenReader.h; do \\\r\nif test ! -d /export/home/mqudsi/fish-shell/build/muparser-build/dst/`dirname $f` ; then \\\r\n/opt/csw/bin/ginstall -c -d /export/home/mqudsi/fish-shell/build/muparser-build/dst/`dirname $f`; \\\r\nfi; \\\r\n/opt/csw/bin/ginstall -c -m 644 /export/home/mqudsi/fish-shell/muparser-2.2.5/$f /export/home/mqudsi/fish-shell/build/muparser-build/dst/$f; \\\r\ndone\r\n/opt/csw/bin/ginstall -c -d /export/home/mqudsi/fish-shell/build/muparser-build/dst/lib/pkgconfig\r\n/opt/csw/bin/ginstall -c -m 644 build/autoconf/muparser.pc /export/home/mqudsi/fish-shell/build/muparser-build/dst/lib/pkgconfig\r\n[ 30%] Completed 'muparser_project'\r\n[ 30%] Built target muparser_project\r\nScanning dependencies of target fishlib\r\n[ 31%] Building CXX object CMakeFiles/fishlib.dir/src/autoload.cpp.o\r\n[ 34%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_bind.cpp.o\r\n[ 34%] Building CXX object CMakeFiles/fishlib.dir/src/builtin.cpp.o\r\n[ 35%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_block.cpp.o\r\n[ 36%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_builtin.cpp.o\r\n[ 36%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_bg.cpp.o\r\n[ 36%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_cd.cpp.o\r\n[ 37%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_command.cpp.o\r\n[ 38%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_commandline.cpp.o\r\n[ 39%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_complete.cpp.o\r\n[ 39%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_contains.cpp.o\r\n[ 40%] Building CXX object CMakeFiles/fishlib.dir/src/builtin_disown.cpp.o\r\n/export/home/mqudsi/fish-shell/src/builtin.cpp: In function \u2018void builtin_print_help(parser_t&, io_streams_t&, const wchar_t*, output_stream_t&)\u2019:\r\n/export/home/mqudsi/fish-shell/src/builtin.cpp:203:36: error: \u2018wcsdup\u2019 was not declared in this scope\r\n     wchar_t *str = wcsdup(h.c_str());\r\n                                    ^\r\ngmake[2]: *** [CMakeFiles/fishlib.dir/build.make:87: CMakeFiles/fishlib.dir/src/builtin.cpp.o] Error 1\r\ngmake[2]: *** Waiting for unfinished jobs....\r\ngmake[1]: *** [CMakeFiles/Makefile2:391: CMakeFiles/fishlib.dir/all] Error 2\r\ngmake: *** [Makefile:128: all] Error 2\r\n```", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4490", "title": "Replace `read -i` with `read -s`", "body": "`read`'s support for `--silent` [came late in the game](https://github.com/fish-shell/fish-shell/issues/838) and `-s` was already being used for `--shell`.\r\n\r\nHow does everyone feel about making `-s` for `--silent/--secure` similar to bash and others, and changing `--shell` to something else? It seems the only place `read -s` is currently used in our code is just in `funced.fish`.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4490/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4443", "title": "eval scope", "body": "Is the following a bug or a feature?\r\n\r\n```fish\r\neval set -l foo bar\r\nif not echo \"bar\" | string match -q $foo\r\n    echo Assertion failed!\r\nend\r\n```\r\n\r\n`eval` isn't explicitly documented as creating a scope.\r\n\r\n(note that this \"feature\" caused some consternation in the implementing of #4442)", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4440", "title": "FIGNORE-like support", "body": "Bash and ZSH support `$FIGNORE` and `$fignore` respectively, [which lists patterns that should not be included in autocomplete suggestions](https://docstore.mik.ua/orelly/unix3/upt/ch28_07.htm). The exact behavior differs depending on the shell, but this can be used to manipulate both head and tail autocompletions (i.e. command name and arguments), blocking files that match these patterns from being suggested (unless they are the only match).\r\n\r\nI'm sure I don't agree with merging both head and tail autocomplete ignore patterns into the same list like bash/zsh do, but is having two separate blacklists overkill?\r\n\r\nNote that this (in the form of head pattern block lists) is required to work around PATH pollution, [such as this bug (IMHO, at any rate) in WSL](https://github.com/Microsoft/BashOnWindows/issues/2515) that imports _all_ dll files in the system32 directory as executable, meaning trying to autocomplete command names in fish becomes useless:\r\n\r\n![image](https://user-images.githubusercontent.com/606923/31074785-8da97942-a772-11e7-8ded-f4f2e5e5ab47.png)\r\n\r\n\r\nTail pattern blacklisting is useful for blocking `~`, `.swp` temporary/swap files on a global level (vs setting up, say, a vim completion rule that provides files that aren't `.bak` or `.swp` from being suggested). This would address #985, among others.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4429", "title": "Make fish special variable names more consistent", "body": "Apart from the debate about uppercase vs lowercase, I think we need to take advantage of fish 3.0 to rename some variables. I didn't look into it at depth, but I just ran into `$__fish_datadir` and co vs `$__fish_help_dir`.  These should probably all have an `_` before `dir` because that makes intelligent completion work (`~> $_dir<TAB>`) but either way works, so long as we stick to it.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4429/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4425", "title": "Completions pager down arrow bug on odd-numbered lists", "body": "Where an odd number of completions consuming multiple lines are available, navigating the completions via the down arrow results in a loop at the end, where fish jumps between the last two columns.\r\n\r\nFor example, after running this script:\r\n\r\n```fish\r\nmkdir completions_test\r\ncd completions_test\r\n\r\nfor i in (seq 3 11)\r\n    set fname \"\"\r\n    for j in (seq 0 $i)\r\n        set fname {$fname}a\r\n    end\r\n    echo $fname\r\n    touch $fname\r\nend\r\n```\r\n\r\nand then typing in `touch ./a<TAB><TAB>` in the resulting directory, the following list of completions appears (presuming your terminal is sized so that the results appear over two lines):\r\n\r\n```fish\r\nmqudsi@ZBook ~/r/f/completions_test> cat ./aaaa\r\n         ./aaaaaa   ./aaaaaaaa   ./aaaaaaaaaa   ./aaaaaaaaaaaa\r\n./aaaaa  ./aaaaaaa  ./aaaaaaaaa  ./aaaaaaaaaaa\r\n```\r\n\r\nIf you press the down arrow until the last item in the list is selected, pressing the down arrow should either wrap to the start of the list or do nothing (since the end of the list has been reached). However, since in this case the last item in the list is on a higher screen line than the second-to-last item in the list, pressing the down arrow actually goes to the second entry of the second to last column (i.e. the second to last entry in the list). Since pressing the down arrow again would go to the next entry (the last entry), this continues _ad infinitum_.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4422", "title": "Merge system utilities list in README?", "body": "Currently, README has two separate lists of fish dependencies on \"system utilities\" (not including optional features):\r\n\r\n> * basic system utilities including `basename`, `cat`, `cut`, `date`, `dircolors`, `dirname`, `ls`,\r\n>   `mkdir`, `mkfifo`, `mktemp`, `rm`, `seq`, `sort`, `stat`, `stty`, `tail`, `tr`, `tty`, `uname`,\r\n>   `uniq`, `wc`, and `whoami`\r\n> * a number of common UNIX utilities:\r\n>     * `awk`\r\n>     * `find`\r\n>     * `grep`\r\n>     * `hostname`\r\n>     * `kill`\r\n>     * `ps`\r\n>     * `sed`\r\n\r\nWhat's the distinction between a \"basic system utility\" and a \"common UNIX utility\"? In the latter list, all are POSIX utilities except `hostname` and in the first list, all but `dircolors`, `mktemp`, `seq`, and `stat` are standard POSIX utilities.\r\n\r\nEither the two lists should be merged or replaced with a list of POSIX and a list of non-POSIX but fairly common utilities (even better would be to drop the dependencies on non-posix utilities for posterity's sake).", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4420", "title": "muparser has taken over ./configure output", "body": "In fish 3.0, `/.configure` configures the muparser sources as the final step. muparser has a very visible message in its output that provides instructions on the next steps to build and install muparser. After that prompt, we post a short message saying fish has been configured.\r\n\r\n```\r\n...\r\nchecking for nm... nm\r\nchecking for command to install directories... /usr/bin/install -c -d\r\nchecking if make is GNU make... yes\r\nchecking for dependency tracking method... gcc\r\nconfigure: creating ./config.status\r\nconfig.status: creating Makefile\r\nconfig.status: creating build/autoconf/muparser.pc\r\n\r\n ----------------------------------------------------------------\r\n  Configuration for muparser 2.2.4 successfully completed.\r\n  Summary of main configuration settings for muparser:\r\n  - STATIC mode\r\n  - RELEASE build\r\n  - SAMPLES disabled\r\n  Now, just run make.\r\n ----------------------------------------------------------------\r\n\r\nfish is now configured.\r\nmqudsi@ZBook ~/r/fish-shell>\r\n```\r\n\r\nUsers could be forgiven for thinking the instructions in muparser's configuration output are instructions for building fish (not that they're not more or less correct)", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4416", "title": "Parsing of multiple stream redirections leads to unexpected results", "body": "Using both `1>|` and `2>|` in the same command results breaks redirections:\r\n\r\n```fish\r\n~> fish -c \"echo stdout; echo stderr 1>&2\"\r\nstdout\r\nstderr\r\n\r\n~> fish -c \"echo stdout; echo stderr 1>&2\" 1>| egrep nostdout\r\nstderr\r\n\r\n~> fish -c \"echo stdout; echo stderr 1>&2\" 2>| egrep nostderr\r\nstdout\r\n\r\n~> fish -c \"echo stdout; echo stderr 1>&2\" 1>| egrep nostdout 2>| egrep nostderr\r\nstderr\r\n```\r\n\r\nI think everything after the first `1>|` is considered part of the redirection of stdout and not parsed as belonging to the original command.\r\n\r\nAttempts at reordering the redirections are futile:\r\n\r\n```fish\r\n~> fish -c \"echo stdout; echo stderr 1>&2\" | egrep nostdout 2>| egrep nostderr\r\nstderr\r\n\r\n~> fish -c \"echo stdout; echo stderr 1>&2\" 2>| egrep nostderr | egrep nostdout\r\nstdout\r\n```", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4344", "title": "Allow a command to include history as a completion source", "body": "Perhaps for fish 3.0 we can include support for a completion script to indicate that its completions should come from fish's history file, so that tabbing would provide a list of matches from history. A lot of commands do not have local file completions, but are often used and reused from within a certain set of arguments, this would be a huge convenience for such commands.\r\n\r\nTo illustrate with a real-life example, I use `autojump` religiously (aliased to `j` as their setup routine does automatically under all supported shells). `j` watches your directory changes and learns what directories you use, so that when you type in - from any CWD - `j foo` it will take you to the directory you use most often that matches search pattern `foo` (even if foo is misspelled, an abbreviation, etc). \r\n\r\nWhat would be amazingly convenient is if my previous usage of `j` were to be considered potential completions. So when I type in `j f<TAB>`, history entries such as `j fish` and `j fish-shell` could provide completions for the current command line, and the completions suggestions would list `fish` and `fish-shell` as options.\r\n\r\nOther commands that I feel might benefit from this are `ssh`, `ping`, and other similar commands that are a) run often against the same targets, b) don't have \"tangible\" completions.\r\n\r\nAdditionally, any command that does not have completions but has history entries (basically while you are typing you get the ghost completion) can use this to complete from history, too.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4344/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4314", "title": "`make install` does not nuke existing completions", "body": "0ebff8c516c9755d6d7da60067f8d13013018a40 removes the custom completion for the `source` builtin, but it turns out that `make install` over an existing fish installation does not remove the existing completions. Would this be considered a bug or do we expect users to first run `make uninstall` before running `make install`?\r\n\r\nIs there a point in trying to sync the two directories instead of nuking the existing completions directory and copying everything over (for installation speed purposes)? (I wouldn't spend much brain power over this one, just `rsync` if `rsync` exists or nuke and copy.)", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4312", "title": "Elegant way of suppressing error output in completion argument subshells?", "body": "Every once in awhile, a completion script tries to call something incorrectly and the invoked command fails and throws an error. To the end user, it looks like this:\r\n\r\n```fish\r\n$ command --ar<TAB>ERROR: --arg requires foo and bar\r\nPlease see man page for more info.\r\ng\r\n```\r\n\r\nBasically, error output from the subshell gets sent to the terminal. Apart from a needless error message being generated and displayed to the user in response to something he or she didn't invoke and possibly didn't even know was being run, the cursor position is lost and it's hard to tell what the user had typed vs what the command had generated.\r\n\r\nWhat would be an elegant way of automatically doing the equivalent of \r\n\r\n`complete ... -a (subcommand .... 2>/dev/null)`\r\n\r\nto at least redirect stderr output (for commands that put argument errors on stderr instead of stdout)?\r\n\r\nI'm wondering if there's anything we can do in the code to automatically ignore stderr when the command is called by the `complete` builtin (which isn't as easy as it sounds since the parser kicks in first and presumably the subshell would be invoked before the `complete` builtin is even evaluated).\r\n\r\n(If the answer is that the most elegant way is to actually just add `2> /dev/null` to all completions, that's fine too, if we're willing to adopt that as our official recommendation.)", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4312/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4299", "title": "fish_config web url unreachable under WSL", "body": "When `fish_config` is run under WSL, the URL is inaccessible (hangs indefinitely) both from within WSL and from a web browser running in the Win32 environment.\r\n\r\nI'm not a pythonista by any means, but I'm willing to debug the issue if anyone has some pointers on where to start. I'm not sure what the correct approach would be to capturing packets here, I'd have to dig into the WSL networking implementation to see how localhost is exposed and how packets can be intercepted (WinPCap doesn't capture localhost, and even if it did, I'm not sure how that plays with WSL).\r\n\r\nAs a quick test to see if it's a problem with binding to a port from WSL, I ran the following:\r\n\r\n```\r\nnc.traditional -l -p 5432 -c 'echo -e \"HTTP/1.1 200 OK\\r\\n$(date)\\r\\n\\r\\n\";echo \"<p>Hello world.</p>\"'\r\n```\r\n\r\nBut that works fine when accessed from a web browser in Windows.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4298", "title": "completions at blank prompt should disappear on interrupt", "body": "Scenario:\r\n\r\n```\r\n$ <tab> <Ctrl+C>\r\n```\r\n\r\nAt the first `<tab>` the completions prompt appears, but at `<ctrl+c>` (any number thereof) the completions persist. Following the principle of least surprise, I propose that if `<ctrl+c>` when no command is running resets the prompt, then it should accordingly also close the completions dialog.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4298/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4272", "title": "Completions for misspelled variables show escape characters", "body": "Under `fish, version 2.6.0-304-g1169b8e`, completions for misspelled variables show escape characters, while normally they wouldn't.\r\n\r\nTo illustrate with an example:\r\n\r\n```fish\r\nmqudsi@Blitzkrieg /m/c/U/Mahmoud> echo $fish_<TAB>\r\n$fish_bind_mode                                                                                                     (Variable: default)\r\n$fish_color_autosuggestion                                                                                   (Variable: '555' 'yellow')\r\n$fish_color_command                                                                                       (Variable: '005fd7' 'purple')\r\n$fish_color_comment                                                                                                     (Variable: red)\r\n\u2026and 26 more rows\r\n```\r\n\r\nWhereas:\r\n\r\n```fish\r\nmqudsi@Blitzkrieg /m/c/U/Mahmoud> echo $bin<TAB>\r\n\\$__fish_active_key_bindings  (Variable: fish_default_key_bindings)  \\$fish_bind_mode                       (Variable: default)\r\n\\$__fish_bin_dir                         (Variable: /usr/local/bin)  \\$fish_key_bindings  (Variable: fish_default_key_bindings)\r\n```\r\n\r\nThe second time around all the `$` completions are prefixed with an escape.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3802", "title": "Using a space within curly braces results in 'mismatched brackets' error", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [ ] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*:\r\nfish, version 2.4.0-472-gf48291b\r\n\r\n**OS/terminal used**:\r\nBash on Linux, FreeBSD 10\r\n\r\n## Reproduction steps\r\n1. execute the following:\r\n`echo {hi, hello} world`\r\n\r\n## Results\r\n```\r\nmqudsi@ZBook /m/c/U/M/g/easyre> echo {hi, hello} world\r\nMismatched brackets\r\n```\r\n\r\nRe-running without the space after the comma proceeds OK:\r\n\r\n```\r\nmqudsi@ZBook /m/c/U/M/g/easyre> echo {hi,hello} world\r\nhi hello world\r\n```\r\n\r\nThe same happens for spaces within a word (i.e. not immediately after or next to a comma within the braces).", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3299", "title": "fish_vi_mode $ command issues with autosuggestions", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\n- [x] Have you checked if problem occurs with [fish 2.3.1](/fish-shell/fish-shell/releases/tag/2.3.1)?\n- [x] Tried fish without third-party customizations _(check `sh -c 'env HOME=$(mktemp -d) fish'`)_?\n\n**fish version installed** _(`fish --version`)_:\ngit f3e93f06669dc36c68dd86573b4ca7caf59db63a\n\n**OS/terminal used**: \nfreebsd via putty, $TERM=xterm\n## Reproduction steps\n1. Launch fish\n2. Type something matching the history so that an autocomplete suggestion comes up\n3. Press Esc to leave insert mode\n4. Press $ to jump to end of line\n## Expected results\n\nFish should jump to end of line\n## Actual results\n\nThe first time `$` is pressed, the cursor is moved by one character. Pressing `$` again jumps to the end of line.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d31be65a30a12fabfaf89b5481e7ac5869b31054", "message": "Don't add FISH_BUILD_VERSION to the C++ defines\n\nIncluding it as -DFISH_BUILD_VERSION causes a full re-compile as ninja\ndetects that the C++ compiler parameters have changed."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/25839b8c361e1dcd5f96a5e05bb48616c5531061", "message": "Generate FISH_BUILD_VERSION info for cmake builds\n\nCorrectly generate FISH_BUILD_VERSION for use in fish_version.h/cpp and\nfish.pc to allow `fish --version` and `echo $version` to work again.\n\nNot needing the same convoluted measures used by Makefile builds to\nprevent the regeneration of the fish version file when it hasn't\nchanged.\n\nPurposely created a new `cmake_git_version_gen.sh` file so that the old\n`git_version_gen.sh` remains compatible with the existing Makefile build\nscript. Same reason why `fish.pc.in` was not modified to use a lowercase\nvariable name to match the CMAKE variable of the same name.\n\nCloses #4626"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/87f7cd0370f67c867998d0f0662629516b4c67ce", "message": "Fix `make install` failure on missing man pages\n\nIf `doxygen` isn't installed, the man files aren't built and that's\nquite ok. The cmake `install` target was presuming the man files would\nalways be present and the install stage was failing if they weren't\nbuilt."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/36a2f2cc01c2a04b240819884f41174cf56f79a6", "message": "Work around cmake/ninja bug that leads to installation failure\n\nCMake originally links build artifacts/results so that they can run from\nthe target directory. As a result, it must first relink the binaries\nbefore installation so that they can run from the installation target\ndirectory, typically done in the preinstall stage. Ninja does not have a\npreinstall stage, and the CMake code that generates the build.ninja file\ndoes not take that into account [0].\n\nSetting `CMAKE_BUILD_WITH_INSTALL_RPATH` [1] makes it originally link\nthe files with the RPATH settings for the final destination directory,\nmeaning that relinking is no longer needed.\n\nTechnically setting the RPATH is not required for the `fish` binary as\nwe do not have any relative dependencies; this is the output of\n`ldd ./build/fish`:\n\n```\nlinux-vdso.so.1 =>  (0x00007ffffacdc000)\nlibncurses.so.5 => /lib/x86_64-linux-gnu/libncurses.so.5\n(0x00007f6632350000)\nlibtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5\n(0x00007f6632120000)\nlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2\n(0x00007f6631f00000)\nlibstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n(0x00007f6631b70000)\nlibm.so.6 => /lib/x86_64-linux-gnu/libm.so.6\n(0x00007f6631860000)\nlibgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1\n(0x00007f6631630000)\nlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0\n(0x00007f6631410000)\nlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6\n(0x00007f6631040000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f6632600000)\n```\n\nHowever, since the bug only exists when the build generator is set to\nninja, the workaround is only activated for that specific build\ngenerator to prevent any future problems.\n\n[0]: https://cmake.org/Bug/print_bug_page.php?bug_id=13934\n[1]: https://cmake.org/cmake/help/v3.0/variable/CMAKE_BUILD_WITH_INSTALL_RPATH.html"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/0aa4c4a4836f22061e09eb2dc4f3eaf0b0ea7406", "message": "Add git completions for `git push REMOTE :BRANCH`\n\n`git push REMOTE :BRANCH` deletes remote branch BRANCH from remote\nREMOTE. Should only kick in when the pattern matches, hopefully didn't\nbreak anything else!"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/ae700c870716972a28a9ea5a0542f4e18a88065c", "message": "Merge pull request #4581 from mqudsi/help_section_workaround\n\nWork around OS X issue with dropped #fragment in launched URLs"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/798ad363baa084b619b5cad6faae9d79dc4811da", "message": "Fix extra ../ in figurig out GIT_DIR in build script"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7a49583f279ae1337bf00660d4304babe0cf7b1d", "message": "Add instructions on appending to /etc/shells\n\nPrint the command to append safely to /etc/shells with sudo and tee upon\ncompletion of `make install`.\n\n(cherry picked from commit 47993b48b65f3a22bc5e9a63177b7438b1a51568)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "extrowerk": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4501", "title": "Muparser provides too old configure, config.guess and config.sub", "body": "They don't know about Haiku. Is it possible to update them?\r\nautoreconf 2.69 cannot update them because:\r\n\r\n> \"configure.ac:16: error: possibly undefined macro: m4 include\"\r\n\r\nand\r\n\r\n> \"configure.ac:60: error: possibly undefined macro: AC_BAKEFILE\"\r\n\r\nTested with the current git version.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4099", "title": "Haiku OS: fish crashes when closing Terminal", "body": "Fish version: fish, version 2.6.0\r\nOS: Haiku x86_64 hrev51178\r\necho $TERM : xterm (Haiku standard Terminal application)\r\n\r\nTested without third-party mods, with clean settings. Reproducible.\r\n\r\nSteps to reproduce:\r\n- open Terminal (i suppose fish is he default shell, you can set it in  /boot/system/settings/etc/passwd , it requires reboot)\r\n- close Terminal\r\n- profit :(\r\n\r\nScreenshot:\r\n![6ek](https://cloud.githubusercontent.com/assets/5569059/26764743/4c9e7fe6-496d-11e7-9dfa-19ceb6e04cfd.png)\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3646", "title": "Fish garbage output during command line editing in Haiku", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [ ] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*:\r\nfish, version unknown\r\nit is 2.4.0 with Haiku specific patches, not in mainline yet.\r\nCurrent recipe: https://github.com/haikuports/haikuports/pull/928\r\nPatchset: https://github.com/miqlas/haikuports/blob/b34ed504a7925d53e4be384ecad3b235fbb9d0e4/app-shells/fish/patches/fish-2.4.0.patchset\r\n**OS/terminal used**: \r\nHaiku hrev 50762 x86_64, Terminal\r\n\r\nTalk about the the issue here.\r\nBTW, the problem can lie in ncursesw Haiku port, and in Haiku's Terminal too. My current Fish config is here: https://github.com/miqlas/dotfiles/tree/master/config/settings/fish.\r\nI would like to try it later without custom prompt and clean settings. This aren't exactly a new bug, i had it all the time with earlkier Fish versions too.\r\nI can test it trough ssh from OSX box with iTerm, if it helps.\r\n\r\n## Reproduction steps\r\n1. type a long command with `/`, for example, paths and so on\r\n2. navigate with the cursor keys and edit some parts of the command\r\n3. Fish shows unnecessary characters here and there. I see double `//` and extra characters. Ctrl+L helps.\r\n\r\n<!-- Hard to explain? Post a screen recording on asciinema.org then link it here -->\r\nWill do screenshots later.\r\n\r\n## Results\r\n```console\r\n~ $ math 2 + 2\r\n4\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oschrenk": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4494", "title": "`Unknown command -s` when upgrading from 2.6 to 2.6.0-720-g720f4ad7", "body": "```\r\n  fish, version 2.6.0-720-g720f4ad7\r\n  Darwin OlschBook 17.2.0 Darwin Kernel Version 17.2.0: Sun Oct  1 00:46:50 PDT 2017; root:xnu-4570.20.62~10/RELEASE_X86_64 x86_64\r\n  screen-256color\r\n```\r\n\r\nUsing `sh -c 'env HOME=$(mktemp -d) fish'` solves issue.\r\n\r\nNoticed a problem with auto completion with ssh hosts and saw a fix in master branch, so I did `brew reinstall --HEAD fish`. Then every new terminal greeted me with \r\n\r\n```\r\nUnknown command -s\r\n```\r\n\r\nI upgraded 2.6 to HEAD ( 2.6.0-720-g720f4ad7) and had existing configuration bringing in `fish_vi_key_bindings`\r\n\r\nThe fix (for me) was to remove the reference to `fish_vi_key_bindings` from my `fish_user_key_bindings.fish`.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "David-A-RogersHS2": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4484", "title": "CDPATH should implicitly include $PWD/\".\"", "body": "macOS Sierra/iterm\r\n\r\nFor testing purposes, I moved my fish directory elsewhere.  If I set CDPATH to ~/mydirs, then if I am in my home dir, attempting to cd to any subdir fails. Note that ~/mydirs is empty at this point.\r\n\r\nThis terminal listing shows the issue.\r\n\r\n```\r\nWelcome to fish, the friendly interactive shell\r\ndavid@Davids-MacBook-Pro ~> cd bin\r\ndavid@Davids-MacBook-Pro ~/bin> ..\r\ndavid@Davids-MacBook-Pro ~> set -x CDPATH /Users/david/mydirs/\r\ndavid@Davids-MacBook-Pro ~> cd bin\r\ncd: The directory 'bin' does not exist\r\ndavid@Davids-MacBook-Pro ~> fish --version\r\nfish, version 2.6.0\r\ndavid@Davids-MacBook-Pro ~> echo $version\r\n2.6.0\r\ndavid@Davids-MacBook-Pro ~>\r\n```\r\n\r\nIf I unset CDPATH, I can cd to subdirs of $HOME again.\r\n\r\nI thought it might be something I did, but I removed my .config/fish directory and it still happens.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "floam": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4479", "title": "builtin math shouldn't quietly overflow", "body": "```\r\n$ math 10^19\r\n-9223372036854775808\r\n$ echo $status\r\n0\r\n```\r\n\r\nWe should print an error message, or at least give a bad exit status when we wrap around `LLONG_MAX`.\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4478", "title": "builtin math shouldn't require a `--scale` argument for floating point math.", "body": "The old `math` function wouldn't do this (we cast to an integer in builtin_math.cpp):\r\n\r\n```\r\n~ $ math '3.5*3'\r\n10\r\n```\r\n\r\n`bc` would print `10.5`.\r\n\r\nThe only way to coax out the right answer is to use `--scale`, which I consider something kind of unpleasant from our old math function that was an artifact of `bc`, not something we should want to encourage let alone require. Ideally we could have a nice default where `5.0` printed `5` and `5.0010` printed `5.001` (roughly %g without the exponent stuff). ", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4478/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3589", "title": "Extend 'test' with non-POSIX file time comparison extensions", "body": "These non-POSIX extensions are pretty popular and commonly used. I can't see the harm in making it easier to do file date comparisons with fish using `test`.\r\n\r\n```man\r\n     file1 -nt file2\r\n                   True if file1 exists and is newer than file2.\r\n     file1 -ot file2\r\n                   True if file1 exists and is older than file2.\r\n```\r\n\r\nAt least on OS X, these are the other operations the system `test` can do that aren't POSIX, according to the manpage. Fish already supports `-O` and `-G`.\r\n\r\n```\r\n     file1 -ef file2\r\n                   True if file1 and file2 exist and refer to the same file.\r\n\r\n     -O file       True if file exists and its owner matches the effective user id of this process.\r\n\r\n     -G file       True if file exists and its group matches the effective group id of this process.\r\n```", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3589/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3542", "title": "`set` output should indicate if variables are local, universal, exported, etc.", "body": "I think typing `set` without arguments ought to indicate the nature of various variables. \r\n\r\nAn obvious way to do this would be for it to simply output commands that could recreate them.\r\n\r\ne.g..\r\n```\r\n$ set\r\nset -x LANG en_US.UTF-8\r\nset -U fish_color_autosuggestion 333\r\nset -Ux TERMINFO /usr/local/Cellar/ncurses/6.0_2/share/terminfo/\r\n...\r\n```\r\n\r\nOr: \r\n```\r\n$ set\r\nLANG 'en_US.UTF-8' (exported)\r\nfish_color_autosuggestion '333' (universal)\r\nTERMINFO '/usr/local/Cellar/ncurses/6.0_2/share/terminfo/' (universal, exported)\r\n...\r\n```", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3542/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3507", "title": "Pager strangeness with certain items not bolding only when selecting by up/left arrow.", "body": "This is a strange one that's been around for a while that I haven't reported until now.\n\nSee the screen recording, keep eye on \"autoscan.log\" for example: https://drive.google.com/file/d/0B9nS3wSv15QjNEduMDhTbUJfc2c/view\n\nCertain filename completions (always the same ones?) will not bold when traversing back up the list through up arrow or when moving leftwards through the list with the left arrow. They highlight correctly when traversing forwards with the down/right arrows.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3404", "title": "builtins should not print entire usage summary on invalid use", "body": "Consider\n\n``` console\n~ $ bind \\e\\c foo\nInvalid token '\\e\\c'\nfish: bind \\e\\c foo\n           ^\n```\n\nThis seems like it ought to be:\n\n``` console\n~ $ bind \\e\\c foo\nfish: bind \\e\\c foo\n           ^\nInvalid token '\\e\\c'\n```\n\nFurther: \n\n``` console\n~ $ functions -x\nfunctions: Unknown option '-x'\n\n       functions \u2010\u2010 print or erase functions\n\n   Synopsis\n       functions [ \u2010a | \u2010\u2010all ] [ \u2010n | \u2010\u2010names ]\n       functions \u2010c OLDNAME NEWNAME\n       functions \u2010d DESCRIPTION FUNCTION\n       functions [ \u2010e | \u2010q ] FUNCTIONS...\n\nfunctions: Type 'help functions' for related documentation\n```\n\nWe should place the error _after_ the usage information. Sometimes it can be long and the error, far away. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3381", "title": "string replace -r x \\\\c locks up fish", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\n- [x] Have you checked if problem occurs with [fish 2.3.1](/fish-shell/fish-shell/releases/tag/2.3.1)?\n- [x] Tried fish without third-party customizations _(check `sh -c 'env HOME=$(mktemp -d) fish'`)_?\n\nThis happens in master and 2.3.0, 2.3.1 on OS X 10.12 for me. The process seems to lock up as soon as you press enter when doing a regex replacement when ~~--all is specified and~~ the second string argument is `\\\\c`. There needs to not be another argument after.\n\n**Reproduction Steps**\n1. Enter as a command:`string replace -ra x \\\\c` - `x` can be anything.\n2. Hit enter.\n\nIt looks like it's looping in `read_unquoted_escape` called from string_replace:\n\n```\n frame #0: 0x000000010c1c3047 fish`read_unquoted_escape(wchar_t const*, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >*, bool, bool) + 551\n    frame #1: 0x000000010c1b8452 fish`string_replace(parser_t&, io_streams_t&, int, wchar_t**) + 722\n    frame #2: 0x000000010c1a5d9c fish`builtin_run(parser_t&, wchar_t const* const*, io_streams_t&) + 508\n    frame #3: 0x000000010c1ddb1d fish`exec_job(parser_t&, job_t*) + 4013\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3308", "title": "Code-sign OS X binaries before 10.12 is released", "body": "There have been requests before for us to code sign our binaries from security-minded users. But there will be more practical complications caused by our unsigned binaries sometime soon.\n\nApplications and installers quarantined by GateKeeper (anything downloaded from the Internet, basically) in MacOS Sierra will refuse to run, and the system preference that enables one to bypass this requirement is gone. An identified developer registered with Apple's Developer program needs to code sign the binaries.\n\n<img width=\"377\" alt=\"screenshot 2016-08-18 at 12 13 51 am\" src=\"https://cloud.githubusercontent.com/assets/291142/17765152/f25fc00e-64d8-11e6-82af-97032567d5d3.png\">\n\nIt's possible to work around - it isn't to the point where the kernel is enforcing signatures across the board,  so one can remove the Quarantine bit in the xattrs, or signal intent by right clicking and doing an \"Open\" in Finder, or executing through Terminal.app after downloading, but I think we don't want that kind of experience for our users. \n\nThere are good reasons to sign the binaries anyhow. Particularly if we're advocating adding to `/etc/shells`. It's a real benefit to our users for us to get this figured out, aside from saving them time during installation. \n\nI'm not sure who all on the team has a Developer ID from Apple and can sign binaries for distribution, but I can do it. I've been registered since 2007 or so. \n\n<img width=\"690\" alt=\"screenshot 2016-08-18 at 12 13 05 am\" src=\"https://cloud.githubusercontent.com/assets/291142/17765102/91d4deae-64d8-11e6-8ffb-c4ffce62046e.png\">\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3303", "title": "redirecting >&4 sends data to iothread_service_completion()", "body": "Should this happen? \n\n``` fish\n~ > echo foo >&4\n~ > Unknown wakeup byte 66 in iothread_service_completion\nUnknown wakeup byte 6f in iothread_service_completion\nUnknown wakeup byte 6f in iothread_service_completion\nUnknown wakeup byte 0a in iothread_service_completion\n```\n\nif not interactive, does what other fds do:\n\n```\nAn error occurred while redirecting file descriptor 1\ndup2: Bad file descriptor\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2963", "title": "Fish .pkg installer does not clean up old installations", "body": "Installing fish over an existing installation of fish on OS X gives no indication to the user that they may be messing up an existing installation (perhaps from homebrew) and give them the ability to bail.\n\nAlso, even if the the last version was installed with our installer, a new version blasts whatever it has onto / without cleaning up after the old installation. There is no uninstall option if you relaunch the .pkg installer. \n\nThe OS X package system isn't providing any obstacles here, the receipts are in place and OS X knows what files we own, but the installer doesn't have any scripts it runs to check anything. It may be wiser to simply point a user at Homebrew than provide an iffy installer. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2915", "title": "pthread_mutex_unlock crash on Fish on Bash on Ubuntu on Windows ", "body": "I've now experienced this crash over 10 times on Fish on Bash on Ubuntu on Windows.\r\n\r\nHappens (rare-ish, but not super rare!) while piping:\r\n\r\n```\r\npthread_mutex_unlock(lock_obj) failed on line 2243 in file src/common.cpp:\r\nAborted (core dumped)\r\n```\r\n\r\n![http://i.imgur.com/GuVKiAO.png](http://i.imgur.com/GuVKiAO.png)\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2915/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2913", "title": "fish_config doesn't work on Fish on Bash on Ubuntu on Windows", "body": "The Windows 10 Linux subsystem is not allowed to interact with the desktop environment or Win32 processes. `fish_config` thus will be a challenge. The security redirect requires you pull up another console and find the web server address inside the `.cache/fish/web_config-XXXXXXX.html` file to find the URL, then manually copy and paste that into a browser. It doesn't seem to work with the only browser I have on the machine, which is Edge. Not sure if it's something going wrong on the Linux/webconfig end or just the js/whatever not quite being compatible.\n\nThis would be a better experience if there was simply a way to preview and set prompts in-shell without a web browser as a fallback for this platform and situations where one is on a remote server.\n![Screenshot of two terminal windows and Edge](http://i.imgur.com/LOClKGe.png)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2913/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2815", "title": "Referring to characters with values of HIGH/LOW SURROGATES (not printing them) causes Wide character ... has no narrow representation in all locales", "body": "Going through the character width numbers in the attachment I posted as an attachment on https://github.com/fish-shell/fish-shell/issues/2484#issuecomment-195464283, I was curious to see that one chunk of the output the script was suggesting the Terminal had moved the cursor 3 columns over for them, which was pretty curious. Actually it was probably just what it recorded after having caused a problem for fish.\n\nIt's the group starting at U+D800, HIGH and LOW SURROGATES ending at U+DFFF. They have no narrow representations, that is _true_.\n\nJust typing \\UD800 in to the terminal causes a number of error messages. Until a user hits enter there shouldn't be dangerous numbers or things they need to be concerned with, and operations like just piping the data to a file could work.\n\n<img width=\"572\" alt=\"screenshot 2016-03-11 at 6 06 02 pm\" src=\"https://cloud.githubusercontent.com/assets/291142/13720030/fa30a656-e7b3-11e5-8063-b1908b4f9d80.png\">\n\nNot sure if this is hitting a sanity check or if got handled somewhere and may place it in an inconsistent state. Based on the number of outputs I guess the former. Only source code referring to these numbers specifically is in PCRE2 test code, where it appears to be checking for ranges of acceptable output.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c67d9195eb413cee57f394a7ab2f38de796f798b", "message": "Fix `fish_opt --help` showing nextd manpage."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/fa57565c4286776896afd7b2322d347654d311ee", "message": "Fix `fish_opt --help` showing nextd manpage."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16109797", "body": "On a Mac for instance, fish will be more wanting to complete brew d<tab> to \"brew Desktop\" because of the Desktop dir in ~. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16109797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16134818", "body": "Huh. I think I must just be mistaken as I can't get it to occur as I described now. Perhaps the autosuggestion was all I hit and the cases changing spooked me. A little jarring but If I hit tab it will still indeed cycle to `desc`, from `Desktop` after trying `brew de` or `brew des`. Of course `desc` is a better suggestion than a file in the same dir as far as being helpful in this example.\n\n<img width=\"168\" alt=\"screenshot 2016-02-16 at 4 28 47 pm\" src=\"https://cloud.githubusercontent.com/assets/291142/13095988/a74ad28c-d4ca-11e5-815f-967d8d59d275.png\">\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16134818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16348773", "body": "s/emite/emit/\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16348773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16665918", "body": "FWIW my NetBSD uniq has no -i option but is very nearly the same as the OS X one:\n\n> usage: uniq [-cdu] [-f fields] [-s chars] [input_file [output_file]]\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16665918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16667721", "body": "Yes I would just try whatever the divergent flags are at complete-time and check the exit code instead of trying to deduce the OS. \n\n```\n~ $ uniq /dev/null; echo $?\n0\n~ $ uniq -i /dev/null; echo $?\nuniq: unknown option -- i\nusage: uniq [-cdu] [-f fields] [-s chars] [input_file [output_file]]\n1\n```\n\n(stdin works too)\n\nMind you, nobody will care until I get this building successfully on NetBSD... doesn't look too hard.\n\n> Anyway it's not too bad here since you're only missing one option.\n\nTrue. Though it would be nice to be able to use these as actual hints as to how stuff works/a proxy for the manpage on these utilities that I use once a year. For just making me enter commands faster one extra option in the completer isn't a concern in the least. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16667721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16968308", "body": "Is there something like HTML's `<wbr>`? A wider wrapping could be desirable in a PDF or... HTML. But you don't want it wrapping on some random space.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16968308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17044356", "body": "Is it the best practice to suppress analyzer findings which are not wrong, not a false positive (just known - at least to the guy who committed)? I feel like this effectively lowers the signal to noise ratio on the cppcheck output rather than the other way around.\n\nIs there a way to run cppcheck so that it will segregate the memleaks which we know are handled from those which we silenced so as to not have to deal with it? For the time when there \"is a bug somewhere else in the code\"? \n\nWould at least a #XXX be useful if there is zero faculty for this? What's the general policy - obviously we don't want people to be quick place inline suppressions in the future in order to avoid CI warnings (which is why you wouldn't want a hard-and-fast pass/fail policy).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17044356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17131126", "body": "I like the highlighting of the `^C` - setting apart text representations of control characters is a good thing to do for the user. \n\nThis happens to be something zsh does on its line editor for control characters and other classes of special  characters and it's one thing I miss on fish. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17131126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153093", "body": "> That has to be done by hand since clang-format leaves comments alone other than to reflow comment\n> lines to get them below the allowed line length.\n\nThat was a feature, not a bug. Why break, by hand, the stuff that was working well with the sorta-doxygen-style comments? - it doesn't make anything easier.\n\nThis is a useful thing in an IDE to use:\n\n``` diff\n-/** Replaces newlines with a literal backslash followed by an n, and replaces backslashes with two backslashes. */\n+// Replaces newlines with a literal backslash followed by an n, and replaces backslashes with two\n+// backslashes.\n static void escape_yaml(std::string *str);\n```\n\nbefore:\n<img width=\"856\" alt=\"screenshot 2016-04-18 at 6 11 10 pm\" src=\"https://cloud.githubusercontent.com/assets/291142/14624808/c338393c-0592-11e6-83cd-436aae447595.png\">\n<img width=\"264\" alt=\"screenshot 2016-04-18 at 6 11 22 pm\" src=\"https://cloud.githubusercontent.com/assets/291142/14624814/cb21be70-0592-11e6-901a-7c0acd9f3ef6.png\">\n\nafter:\n<img width=\"857\" alt=\"screenshot 2016-04-18 at 6 18 28 pm\" src=\"https://cloud.githubusercontent.com/assets/291142/14624817/cfc572b4-0592-11e6-9b65-73928c0c2816.png\">\n<img width=\"266\" alt=\"screenshot 2016-04-18 at 6 17 59 pm\" src=\"https://cloud.githubusercontent.com/assets/291142/14624818/cfe68170-0592-11e6-80fa-9817c2fd4493.png\">\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153238", "body": "> First, doxygen was borderline useless because no one was bothering to add the necessary annotations. The decision to remove the few doxygen annotations that existed had already been made before I decided to restyle the code so it's consistent\n\n`make style` didn't do this when people were asked to comment - the only place I saw it discussed was [hardly indicative of widespread consensus](https://github.com/fish-shell/fish-shell/issues/2795).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153259", "body": "Why not use this as an opportunity to improve the documentation - or remove a comment entirely if it is wrong or sucks? We're talking about an asterisk character added to block comments disrupting your readability here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153399", "body": "Nonetheless, I have found the simple usage of (what is apparently called HeaderDoc) peppered throughout the code helpful as I find my way around the code... I suppose I don't see the harm in letting them \"slide\". \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153454", "body": "> @floam Do you use the IDE or text editor integration with Doxygen-style comments\n\nI use Xcode almost exclusively for this, except for dealing with git and running make, due in part to this documentation, which I've taken for granted. I do lean on the \"hints\" provided throughout the IDE, like this and the magic static analyzer feedback, and the debugging tools having knobs easily accessible for me.  It's all stuff I don't know how to easily replicate in Sublime Text 3 for C++ which is what I started off using. \n\nIn this past I would not have dreamt of using Xcode for anything that doesn't need interface builder. But the Xcode project is there, and I was surprised how pleasant it is to work in.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153514", "body": "> First, doxygen was borderline useless because no one was bothering to add the necessary annotations. \n\nFor the most part I have found that often-reused functions, important classes, type definitions would often have these kinds of comments appearing. When they're not there, it'd be nicer if they were - if I could snap my fingers. If I need more than a reminder or hint as to what something does and how it works I will end up reading the code anyhow. But it's been nice. I don't care about building HTML documentation with them - what is nice is the extra richness that able to be provided when actually working on fish in the IDE.\n\nThese are similar in the most basic mechanics to how Python docstrings work, which I am used to and think are level-headed on any sized project.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17172450", "body": "> The OS X Xcode IDE has a weird requirement\n\nThis is the [HeaderDoc](https://www.raywenderlich.com/66395/documenting-in-xcode-with-headerdoc-tutorial) matter we were talking about last night. Three slashes kicks it in just like the extra asterisk did in the special  `/**` comments that were removed. This is all I wanted you to preserve. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17172450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17172483", "body": "```\nblock comments preceding a function or class definition must begin with three slashes rather than two if\nyou want the comment displayed in the \"Quick Help\" window.\n```\n\nNo - documenting  block comments in HeaderDoc begin with an `*` or `!`:\n\n```\n/**\nGood comment here\n*/\n```\n\n Before yesterday's commits, it was using the HeaderDoc block style - it changed to regular inline comments - now you're fixing it with the HeaderDoc's inline syntax, which is `///`, three slashes. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17172483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17173209", "body": "I don't know what you are asking me right now.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17173209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17173243", "body": "edit: figured out the confusion. see next comment.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17173243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17173321", "body": "Maybe this helps. While it seems you intend to suggest Xcode is doing a wrong thing - realize people may think you are arguing that what you say in the commit message is true, which is phrased with a strange tone and spin, and also what I can only surmise must be an unfortunate typo - which maybe you haven't recognized yet. Here's how I would fix your commit message, just to make sure you see it;\n\n~~`The OS X Xcode IDE`~~ `HeaderDoc` `requires` **~~`block`~~** **`inline`** `comments preceding a`\n`function or class definition to begin with three slashes rather than two`\n~~`if you want the comment displayed in the \"Quick Help\" window.`~~ `to be a HeaderDoc comment.`\n`This restores fish's HeaderDoc documentation in ie. the Xcode \"Quick Help\" window.`\n\nThe commit works, but your confusing commit message suggested some extraordinarily strange Xcode behavior:  you are not using **block comments** of any kind. This commit _does_ do inline comments correctly for HeaderDoc. Which was never the problem - the problem was that the headers lost their HeaderDoc extra character from the block comments but the inline ones didn't get their HeaderDoc extra characterr for the inline character after you restyled the the first time. Thank you for fixing it. \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17173321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17196146", "body": "Much/all of this could probably be better done as part of the \"Archive\"  product in Xcode (which currently fails with an error!) instead of a sell script ran manually. (This is one of the things to fix up better to make automated testing/CI with Xcode closer to possible. Another: write some (hopefully useful) XCTests. There's some stuff you can't do in practically in the current test system that would be nice. We need at least one XCTest before it even let's us do a \"build for testing\", and tell it to \"run tests\").\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17196146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17743355", "body": "> OSX mktemp is rather restricted - no suffix, no way to automatically use TMPDIR\n\nHuh? \n\nFrom what I've noticed, $TMPDIR is actually set to something specific more often on OS X than it is on Linux and mktemp supports using `$TMPDIR`, the filename template set with -t will end up inside $TMPDIR AFAIK if the env var is set, else /tmp and works with -d.\n\nhttp://www.unix.com/man-page/osx/1/mktemp/\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17743355/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54328410", "body": "I wasted some time trying to stringily it it - I was really wishing there was a negated behavior like `grep -v` available in string. I failed to get it to work correctly and it was overcomplicated. I gave up before I got my crazy regex working just used sed. I guess I didn't use actual `grep -v` at that point because.. I'm not sure.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54328410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58323456", "body": "On any system there may be no such thing as an inode generation number and it may or may not be available from stat. On linux this isn't available from stat() unless your architecture (see sys/alpha) or filesystem happens to put it there (XFS for example.)\n\nNULL in C++ is explicitly defined as 0, so I considered it an aesthetic difference. I'm certainly not an old hand here so I defer to your wisdom. I put it there to be explicit with myself that buf->st_gen does not exist, that member is no good, it should not be considered to provide anything when one is reading the source.\n\nMakes no difference to me if it's set to zero by NULL or 0 in the end.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58323456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58325366", "body": "I don't care to pay to access the actual standards as written, I use basically whatever Dash on OS X has on hand for most languages. For C++ I have [this resource pop up if I type in NULL](http://en.cppreference.com/w/cpp/types/NULL) which aggregates the available public information on how the C++ standard has evolved over time. Maybe you can recommend something better. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58325366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58328155", "body": "The place to look if you really want to see something besides zeros as non-root on `st_gen` will be NFS and userspace filesystems. xnu's source code is online and probably can direct your search or prove it locked down.\n\nThe relevant standards says that it will be there and it's accessed by standard means so I see no reason not to store the data from the struct even if it might be zero'd.\n\nIf you want to live dangerously there used to be extra bits in the marked-unusused/reserved fields. I bet there still is.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58328155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55122180", "body": "Indeed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55122180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55502156", "body": "Yeah. Sorry I'll do another commit in a bit. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55502156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55938564", "body": "Doh.\n\nFix and more tests soon.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55938564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58547155", "body": "I did it wrong. Let me get back to you.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58547155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58548264", "body": "Sorry, that was a mistake. I was just testing globs and forgot that one.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58548264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58548485", "body": "Yes.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58548485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58795258", "body": "Geez, didn't notice that. Will have an invert-match-1 tag with that resolved soon.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58795258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59687184", "body": "This should just be a builtin and do it right if python is necessary. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59687184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59965087", "body": "I set a path on the existing `pcre` group in xcode, and the paths for the group members (the pcre2 .c files) are relative to that - in the future it will only be necessary to change this once, on the properties for the `pcre` folder-looking thing, instead of having to modify the reference for each individual .c file when the directory name where the pcre2 sources are changes.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59965087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "c02y": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4468", "title": "fish shell will cause a problem when using tmux", "body": "- fish, version 2.6.0\r\n- Linux chz 2.6.32-431.el6.i686 #1 SMP Fri Nov 22 00:26:36 UTC 2013 i686 i686 i386 GNU/Linux\r\n- $TERM: xterm or xterm-256color\r\n\r\nIt is the same result in following situations:\r\n1. I use my configuration in ~/.config/fish\r\n2. Delete that ~/.config/fish and use default configuration provided by fishshell\r\n3. sh -c 'env HOME=$(mktemp -d) fish'\r\n\r\nCheck the details: https://github.com/tmux/tmux/issues/1109\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "s417-lama": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4465", "title": "Commands contain newlines with backslash are not shown in completion correctly", "body": "## Environment\r\n\r\nversion: 2.6.0\r\nOS: Ubuntu 16.04\r\nterminal: screen-256color\r\n\r\n## Current behavior\r\n\r\nFor example, run the commands below,\r\n```fish\r\n$ ps aux \\\r\n  | grep fish\r\n...\r\n$\r\n```\r\nand press the 'up' key,\r\n```fish\r\n$ ps aux \\\r\n  | grep fish\r\n```\r\nthe commands are automatically entered.\r\nThis is expected behavior, but when we type 'ps' the whole commands does not appear in completion.\r\n\r\n## Expected behavior\r\n\r\nAfter running the commands above, we type 'ps' and the shell suggest the whole commands (ps aux ... fish).", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c7a682ed050e204b4640da19434da7c53501d1f4", "message": "add wait command"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BoxMiles": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4457", "title": "binding to self-insert followed by ShellScript enters infinite loop", "body": "```\r\n[I] ~ \u27e9 sh -c 'env HOME=$(mktemp -d) fish'\r\nWelcome to fish, the friendly interactive shell\r\nmspielberg@mbp-007213 /U/mspielberg> echo $version\r\n2.6.0\r\nmspielberg@mbp-007213 /U/mspielberg> bind '' self-insert backward-char\r\nmspielberg@mbp-007213 /U/mspielberg> #skool ti naht redrah si sihT\r\nmspielberg@mbp-007213 /U/mspielberg> bind '' self-insert\r\nmspielberg@mbp-007213 /U/mspielberg> #This is harder than it looks\r\nmspielberg@mbp-007213 /U/mspielberg> bind '' self-insert \"commandline -f backward-char\"\r\nmspielberg@mbp-007213 /U/mspielberg> (any keystroke enters infinite loop here, 100% CPU usage)\r\n```\r\n\r\nI ran into this issue while refactoring a bulky bind of mine into a fish function.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "onodera-punpun": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4441", "title": "Feature request: Blacklist \"dangerous commands\" from completing", "body": "The problem: I've had numerous times commands accidentally complete to `rm -r *` or similar dangerous commands because I too quickly (and without enough care) type `r` press `up arrow`, and hit `return`.\r\n\r\nI know this is of course because of my own carelessness, but I still think it would be nice to blacklist certain commands (such as `rm -r *`) from completing. Alternatively the ability for users to blacklist commands from completing using regexp in some kind of config file.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17132638", "body": "When using this ina TTY is says something along the lines of \"bryellow not found\".\nWhen using ^C when at the bottom of the termainal it adds a new blank line which is really annoying, example: https://sr.ht/aBIc.png -> hit ^C -> https://sr.ht/t8_P.png -> input some more text and hit ^C again -> https://sr.ht/8kHG.png https://sr.ht/TtJj.png\n\n(oh yeah btw, I replaced the yellow ^C with a red !, like you can see)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17132638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17133858", "body": "I am running git master, the exact error (only happens in TTY) is `Color not valid in TERM = linux: bryellow`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17133858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "heinrich5991": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4439", "title": "Alt-Hash (alt+#) messes up highlighting", "body": "Enter any command that generates interesting highlighting, e.g. `git status README.txt` when `README.txt` exists in the current folder. Press `alt+#` (which puts a `#` in front of the line) and see how the highlighting still matches the line without the `#`.\r\n\r\nExample output:\r\n![alt-hash](https://user-images.githubusercontent.com/366230/31054626-c3ddd1a0-a6b6-11e7-8526-413798fd7fed.png)\r\n\r\n(first I entered the line and pressed `enter`, then I entered the line and pressed `alt+#`, and finally, I pressed `up`, to view the previous line).\r\n\r\n```\r\n$ fish --version\r\nfish, version 2.6.0\r\n$ echo $version\r\n2.6.0\r\n$ uname -a\r\nLinux arch6 4.12.12-1-ARCH #1 SMP PREEMPT Sun Sep 10 09:41:14 CEST 2017 x86_64 GNU/Linux\r\n$ cat /etc/os-release \r\nNAME=\"Arch Linux\"\r\nPRETTY_NAME=\"Arch Linux\"\r\nID=arch\r\nID_LIKE=archlinux\r\nANSI_COLOR=\"0;36\"\r\nHOME_URL=\"https://www.archlinux.org/\"\r\nSUPPORT_URL=\"https://bbs.archlinux.org/\"\r\nBUG_REPORT_URL=\"https://bugs.archlinux.org/\"\r\n\r\n$ xfce4-terminal --version\r\nxfce4-terminal 0.8.6 (Xfce 4.12)\r\n\r\nCopyright (c) 2003-2017\r\n\tThe Xfce development team. All rights reserved.\r\n\r\nWritten by Benedikt Meurer <benny@xfce.org>,\r\nNick Schermer <nick@xfce.org>\r\nand Igor Zakharov <f2404@yandex.ru>.\r\n\r\nPlease report bugs to <http://bugzilla.xfce.org/>.\r\n```\r\n\r\nI tried finding this issue on the issue tracker, but searching for special symbols is surprisingly hard. I hope that this isn't a duplicate.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abudden": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4419", "title": "Support robust method for comparing fish versions", "body": "There may already be a way to do this, but I haven't managed to find it.\r\n\r\nI'm currently using fish 2.4.0 and 2.6.0 (on different machines).  My configuration is common (version controlled) across multiple machines and sometimes there are new features made available in new versions of fish that I want to use but aren't available yet in the fish versions in one distro's package manager.  In this case, it would be useful to have a robust way of comparing versions like python's `sys.hexversion`, so my config could include:\r\n\r\n```fish\r\nif testversion 0x02050000\r\n    # Stuff that relies on fish version 2.5 features\r\nend\r\nif testversion 0x03000000\r\n    # Stuff that relies on fish version 3.0 features\r\nend\r\n```\r\n\r\nAt the moment I've implemented this with:\r\n\r\n```fish\r\nfunction get_hexversion\r\n\tset verparts (string split . $version)\r\n\twhile test (count $verparts) -lt 4\r\n\t\tset verparts $verparts 0\r\n\tend\r\n\techo \"0x\"(printf \"%02x\" $verparts[1])(printf \"%02x\" $verparts[2])(printf \"%02x\" $verparts[3])(printf \"%02x\" $verparts[4])\r\nend\r\nfunction testversion -a expectedhex\r\n\tset -l expected (printf \"%d\" $expectedhex)\r\n\tset -l actual (printf \"%d\" (get_hexversion))\r\n\treturn (test $actual -ge $expected)\r\nend\r\n```\r\n\r\nHowever, it would be nice to have a built-in way of supporting this (although this obviously wouldn't work on existing released versions).  There's probably a much better way of converting (e.g.) \"2.6.0\" into \"0x02060000\" than the way I've done it above (list comprehensions?), but this seems to work at the moment at least until I see what the version string looks like in 2.5b1 or whatever...\r\n\r\nI guess it could be done at the moment with a `testversion` implementation that parses \"2.6.0\" directly, but I implemented it this way due to my familiarity with `sys.hexversion` in python.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dgsb": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4411", "title": "vi command ';' does not work", "body": "fish version: 2.6.0\r\nos: OS X Darwin Kernel Version 16.6.0\r\nterminal: Terminal.app + screen\r\n\r\nThe ';' command is supposed to repeat the previous 'f', 'F', 't' or 'T'.\r\nThis command has no effect at all.\r\nThis command is quite practical to jump between a separator on a line by typing a single key.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinleileiking": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4400", "title": "official tool for zsh history to fish?", "body": " ", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ThomasAH": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4394", "title": "Remove caret (^) as redirector for stderr", "body": "I propose removing the caret (^) as a redirector for stderr in fish 3.0.\r\n\r\n**Reason 1:** This is surprising for users of other shells and may lead to data loss\r\n\r\nThere are many commands using the caret on the command line for special purposes, e.g. git (see #1873). While some special handling has been introduced to reduce the need for quoting (see Reason 2), this does not help in all cases, e.g. `git log ^refA refB` will create a file `refA` containing the error message of git.\r\nMany other programs use ^, too, for me the most notable problem is grep.\r\nI often use the command `dpkg -l|grep -v ^ii` to check for problems with not fully installed or purged Debian packages. In fish this prints nothing, and grep's error message is sent to the new file `ii`.\r\nOr I use `ps auxww|grep ^theuser` to quickly find processes of some users.\r\nOr `grep ^http someconfigfile` to see if the config file contains a setting about httpserver or httpproxy or ...\r\n\r\nWhile this often just results in a stray file (which is already bad enough), this can easily overwrite existing files, because sometimes I am looking for something where a file of the same name exists, e.g. Makefile targets (which luckily can often be rebuilt), or filtered output of `ls`, e.g. `ls | grep -v ^README` to show me everything but README (which is now overwritten) and various README.foo files. Or `ls | grep -v ^access.log | grep -v ^error.log` to hide the current and rotated web server log files and see what other files are present. Yes, I could add quotes and I should add a backslash in front of the dot in the regexp, but I really don't expect a file `accessblog` here, so I don't do it in interactive use.\r\n\r\n**Reason 2:** Workarounds have been introduced, but they introduce even more surprising behavior.\r\n\r\nTo workaround the problem in git (#1873), the handling of ^ was changed to be different than the handling of >, so `echo foo^bar` prints `foo^bar`, but `echo foo ^ bar` prints `foo` and creates an empty file `bar`. This is different from e.g. `echo foo>bar` and `echo foo > bar` which both do the same thing.\r\n\r\nThe need for this workaround indicates that using the caret as a redirection character is problematic.\r\n\r\n**Reason 3:**  The law of orthogonality (https://fishshell.com/docs/current/design.html#ortho)\r\n\r\n`^` is just a shortcut for `2>`, so this syntax saves only a single character.\r\nThe user still has to know the difference between stdout and stderr to use this feature.\r\nThe user still has to know about file descriptors to redirect both, stdout and stderr, to the same file with `echo Hello > all_output.txt ^&1`.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4394/reactions", "total_count": 20, "+1": 19, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "psviderski": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4385", "title": "fish shell live demo in a browser", "body": "Hi guys, we've launched a platform that hosts live demos of command line tools in a browser. It makes the process of trying out their features easier for new users.\r\n\r\nPlease, take a look at this oh my zsh demo: https://rootnroll.com/d/oh-my-zsh. Would you be interested in creating such a one for the fish shell? It might be helpful for new users to be able to instantly play with it in a browser without setting it up.\r\n\r\nYou can find a Dockerfile that was used to build the oh my zsh demo in this repo: https://github.com/rootnroll/library/tree/master/oh-my-zsh\r\nAll you need is to create a similar docker image with a README file and push it to the [Docker Hub](https://hub.docker.com/). Then we will create a demo page based on the provided image.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "soumya92": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4381", "title": "COLUMNS gets out of sync when resizing", "body": "<!--\r\nPlease tell us which fish version you are using by executing the following:\r\n\r\n  fish --version\r\n  echo $version\r\n\r\n-->\r\n\r\n`fish --version`:\r\n```\r\nfish, version 2.6.0\r\n```\r\n\r\n<!--\r\nPlease tell us which operating system and terminal you are using. The output of `uname -a` and `echo $TERM` may be helpful in this regard although other commands might be relevant in your specific situation.\r\n-->\r\n\r\n`uname -a`:\r\n```\r\nLinux ada 4.9.0-3-amd64 #1 SMP Debian 4.9.30-2+deb9u3 (2017-08-06) x86_64 GNU/Linux\r\n```\r\n\r\n`echo $TERM`:\r\n```\r\nxterm-256color\r\n```\r\n\r\n`tilix --version`:\r\n```\r\nVersions\r\n\tTilix version: 1.6.4\r\n\tVTE version: 0.46\r\n\tGTK Version: 3.22.11\r\n\r\nTilix Special Features\r\n\tNotifications enabled=0\r\n\tTriggers enabled=0\r\n\tBadges enabled=0\r\n```\r\n\r\n<!--\r\nPlease tell us if you tried fish without third-party customizations by executing this command and whether it affected the behavior you are reporting:\r\n\r\n  sh -c 'env HOME=$(mktemp -d) fish'\r\n\r\nTell us how to reproduce the problem. Including an asciinema.org recording is useful for problems that involve the visual display of fish output such as its prompt.\r\n-->\r\n\r\nOn each resize, `$COLUMNS` contains the previous size, while `tput cols` outputs the current size.\r\nOccurs without any customisations.\r\n\r\nhttps://asciinema.org/a/InhKQPwcKK814m8UlkTn83s36\r\n\r\nI used `function fish_prompt; echo \"t:\"(tput cols)\" c:$COLUMNS>\"; end`, and resized the terminal program. In my case, the resizing was achieved by opening and closing new \"panes\" within Tilix, but the same behaviour can be observed with a tiling WM and opening a new window, or even quickly resizing a freeform window. (Although on a freeform window, the difference is less noticeable because it only trails by 1)", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marcoms": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4370", "title": "Provide API for changing prompt input style", "body": "It would be very useful to add hooks for styling prompts. For example:\r\n\r\n```\r\nfunction fish_prompt_input\r\n    # italic text\r\n    echo -nse '\\033[3m'\r\nend\r\n```\r\n\r\n```\r\n/home/marcoms > (italic start)ls\r\n```\r\n\r\nFor my use case the font Operator Mono has really nice italics that would look good as an input font, but is not the most legible as a global font.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "krader1961": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4360", "title": "`history search` of multiple search terms is weird", "body": "While working on the fix for issue #3136 I noticed that executing `history search abc def` results in unexpected output. Specifically, it first returns the results for `history search abc` followed by the results for `history search def`. That is neither intuitive or friendly. Especially in light of the new `history search --reverse` behavior to order results in a manner consistent with most other shells. One of two things should be done:\r\n\r\n*) The result is the equivalent of searching for the phrase composed of each term separated by a space. That is, `history search abc def` is equivalent to `history search 'abc def'`.\r\n\r\n*) The results of each search term should be interleaved in chronological order.\r\n\r\nSee also https://github.com/krader1961/fish/issues/16", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4279", "title": "fish profiling output should include the count of the times the command was run", "body": "When I look at the output of `fish -p` I sometimes think the first column is the number of times the command was run when in fact it is the total time consumed by that command minus time spent executing subcommands. We should also track and output how many times the command was run. We might as well also output the time per command; that is, the ratio of the total time by the count.\r\n\r\nThe documentation should also be improved to document the units for the times (microseconds) and what the values represent.\r\n\r\nFinally, the value in the command column should be escaped so that when sorting multi line commands are kept intact.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4279/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4163", "title": "dereferencing an undefined variable should be an error", "body": "It would make fish a safer shell if we made dereferencing an undefined variable an error. This would also be consistent with our failglob behavior. See issue #805 and [this comment](https://github.com/fish-shell/fish-shell/issues/4154#issuecomment-310861104) in the issue discussing whether we should do a major release. The example from that comment:\r\n\r\n```\r\n> set hippopotamus\r\n> ls $typopotamus\r\nfish: $typopotamus is not defined.\r\nls $typopotamus\r\n   ^\r\n```\r\n\r\nNote that using an index that doesn't exist would still silently substitute nothing. That is, this would still be legal and work like it does today:\r\n\r\n```\r\n> set var a\r\n> echo \"var[2]=$var[2]:\"\r\nvar[2]=:\r\n``` ", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4163/reactions", "total_count": 4, "+1": 1, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4161", "title": "`status -n` and `status --current-line-number` not useful and underspecified", "body": "The documentation says `status --current-line-number` \"prints the line number of the currently running script.\" While working on fixing issue #1310 I noticed this is a) not very useful and b) the implementation is wrong. I cannot find a single use of this feature in fish, Fisherman plugins, or OMF plugins other than my recently introduced `fish_breakpoint_prompt` function.\r\n\r\nThe zsh documentation is impenetrable (like so much about zsh behavior). The bash documentation is somewhat better:\r\n\r\n> LINENO Each time this parameter is referenced, the shell substitutes a decimal number representing the current sequential line number (starting with 1) within a script or function.  When not in a script or function, the  value  substituted  is not guaranteed to be meaningful.  If LINENO is unset, it loses its special properties, even if it is subsequently reset.\r\n\r\nIf you have used `status current-line-number` (or `status -n`) please comment on why you used it and whether you found it useful.\r\n\r\nWe need to change how this feature works but before I do that I would like feedback from people on how they think it should work.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4154", "title": "Let's create fish 3.0 (our second major release)", "body": "In the past 1.7 years (the time frame I've been contributing changes to the project) there have been a couple of controversial, non backward compatible, changes made in minor releases. In each case the core devs felt the risks were worth the benefits. We're now poised to make a couple more changes that are not strictly backward compatible. One is how `set -lx` works (see #1091 and #4149). The other is implementing \"tied\" variables (see #436 and #4082). I also have a proof of concept implementation for making abbreviations more efficient (see #4048). That one would be simpler and even more efficient if we didn't have to also maintain backward compatibility. You can find a list of issues tagged for the next major release [here](https://github.com/fish-shell/fish-shell/issues?q=is%3Aopen+is%3Aissue+milestone%3Anext-major). There are probably quite a few more with a \"fish-future\" (meaning next minor) milestone that really should only be done in a major release.\r\n\r\nSo the question is whether we should bite the bullet and focus on a few of the changes that are risky to do in a minor release and focus on completing them for a fish 3.0 release sometime in the next six months (give or take).\r\n\r\nIf we did this it would mean fish 2.x would be put in bug fix only status. With the exception of continuing to add new completions that people submit. The fish project simply does not have enough regular contributors to actively enhance two major versions in parallel.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4154/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4143", "title": "fish debugging (i.e., breakpoints) should support single stepping", "body": "It's great that you can use the `breakpoint` command to pause execution of fish script and inspect and manipulate the fish state (e.g., variables). The facility would be much more useful if there was a way to single step through the code after a breakpoint is reached. As with other debuggers there should be a way to step \"into\" and \"over\" the next command. Obviously the distinction is only meaningful if the next command is a function. Otherwise there is no difference in behavior.\r\n\r\nFor those familiar with gdb and lldb I propose naming these new commands `step` and `next` respectively. They would only be valid when in the context of a breakpoint. Outside of that context they would either issue an error or simply not be valid (i.e., command not found).\r\n\r\nThere are other forms of stepping that might be useful. For example, continue running until we leave the current block or function. Then issue another debug prompt. But these capabilities may be harder to justify than a single step command.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4143/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4036", "title": "implement a `select` function", "body": "Earlier today someone asked on StackExchange what is the [fish equivalent of the bash `select` command](https://superuser.com/questions/1209901/what-if-any-is-the-equivalent-of-bashs-select-in-do-done-in-fish). Surprisingly I can't find any issues, even closed ones, asking that an equivalent be implemented in fish so I'm opening this issue.\r\n\r\nNote that I am not a fan of the sh/ksh/bash `select... in... do... done` behavior. It is extremely difficult to use it correctly. Which also means that it is hard to correctly understand what happens when you read a script which uses that construct.\r\n\r\nOn the other hand we have something similar in the `history` function and my `mcd` function. It strikes me it would be useful to abstract that logic into an independent function. The question is whether that is worth doing in light of issue #2805 that requests a way to use the internal pager used for completions from non-completion contexts. The advantage of making it possible to use the internal pager is that the user can then use arrow keys and its filtering mechanism and it would feel very like selecting an item from a completion. On the other hand a `select` function is likely to be something people find easier to use and more familiar. It's also something I could probably write in a couple of hours. With most of that time spent documenting it and generalizing the code I would copy from my `mcd` implementation.\r\n\r\nJust a reminder of what `mcd` behavior looks like:\r\n\r\n```\r\n$ mcd\r\n d  4)  ~\r\n c  3)  ~/tmp\r\n b  2)  /private/tmp\r\n a  1)  ~/projects/3rd-party/fish-shell\r\nSelect directory by letter or number: 0\r\nError: expected a number between 1 and 4 or letter in that range, got \"0\"\r\n```", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4036/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4012", "title": "add a `string width` subcommand", "body": "When issues like #3989 and #4011 are opened I frequently find myself hacking a fish binary to tell me what `fish_wcswidth()` returns for the non-ASCII characters. There really should be a standard mechanism for getting that information. It seems like a `string width` subcommand is what is needed. By default it reports the cumulative width of each string one per line. With the `-i` / `--individual` flag it would report the width of each individual character in each string. With the `-v` / `--verbose` flag it would print a symbolic representation of each char and its width.\r\n\r\nThis would allow you to type `string width \\u009C` to learn that fish thinks that char has width -1 (i.e., the width is undefined).\r\n\r\nThe first implementation would not support ANSI X3.64 escape sequences. So it couldn't be used to determine the \"visual\" width of something like the output of `fish_prompt`. That's an enhancement we might add in the future.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4012/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3936", "title": "failed `%` expansions should set `$status` to a non-zero value", "body": "As of fish 2.5.0 a failed `%` expansion keeps the command from being run and emits an error message but does not set `$status` to a non-zero value. That seems wrong.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3847", "title": "should `string` be modified to not append a newline to its final line of output?", "body": "While working on issue #2855 I noticed that we can't simply do `clear | string replace \\e\\[3J \"\"` because the string replace will append an unwanted newline. The solution in this case is simple enough: just use a command substitution to eat the newline. But it got me wondering if perhaps we should only append a newline to all but the final line of output unless reading from stdin and the final line of input ended with a newline. Note that doing something like `string replace x y axxb | some_command` would still send a newline terminated string to some_command.\r\n\r\nThis change would make mistakes involving piping arbitrary strings through `string` less likely. On the other hand it's an exception to the general rule that `string` writes \"lines\" (defined as ending with a newline).", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3845", "title": "do not assume /tmp is a valid location for temporary files", "body": "We have places in our code that assume */tmp/* is a valid location for temporary files. That is an invalid assumption. Such as when running in [Termux](https://termux.com/) for Android devices. PR #3604 was opened to address this but the initial change had some issues and the author of change has not addressed the problems in the 2.5 months since the pull-request was created. So I'm opening this issue to remind us to fix this sooner rather than later.\r\n\r\nThe recommended sequence is using the $TMPDIR env var if it's defined, else the P_tmpdir macro from stdio.h if it is defined, else _PATH_TMP from paths.h. This should be implemented as a function that everyplace that needs to create a temporary file can call.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3835", "title": "write program to validate language translations have correct format specifiers", "body": "Issue #3834 was the result of a typo in the German language translation -- a `%s` was used in the translated message where `%d` was needed. While fixing that I noticed, and fixed, several similar errors; e.g., `%s` where it should have been `%ls`. We should write a program, probably in Python, to automate validating the translated strings have the same format specifiers.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3825", "title": "history race failure", "body": "When I merged a simple code style cleanup the Travis macOS (OS X) tests failed with \r\n\r\n```\r\nTesting history race conditions\r\nError: Item dropped from history: 7815 222\r\nError: Expected 2561 items, but instead got 2560 items\r\nTesting history_sample_fish_1_x\r\n```\r\n\r\nThe OS in this case is probably not relevant as a race condition failure is likely to occur on multiple platforms. The challenge is how to both increase the likelihood of triggering this failure and determine the root cause. Since I could not find any previous reports of this failure mode it is presumably rare.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3651", "title": "`set` should reset `$status` before executing", "body": "While testing an unrelated change I noticed that if I ran a command with a non-zero status followed by `set var value` the exit status of the `set` still reflected the previous command. That is dangerous. The `set` command should only retain (i.e., propagate) the status of any subcommands involved in executing that command. It should not retain the exit status of the previous, unrelated, command. For example, consider\r\n\r\n```\r\nfalse\r\nset var (echo val)\r\necho $status\r\n```\r\n\r\nThe fact the `false` command failed is completely irrelevant to the success of the subsequent `set` command. I haven't looked at the parse tree and how it is evaluated so this may be trivial or extremely difficult to fix. There is also the question of whether fixing this is considered a backward incompatible change.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3622", "title": "having `fish_indent` retain alignment of command args", "body": "The `fish_indent` command has a couple of behaviors that are controversial. For example, how it formats the following:\r\n\r\n```\r\nx\r\nor y\r\n\r\nif x\r\n    or y\r\n    do_something\r\nend\r\n```\r\n\r\nMany people would prefer those statements to be formatted differently. However that isn't why I'm opening this issue. Those particular cases will be handled by issue #2646.\r\n\r\nThis issue is to discuss what to do about sequences of statements like this one from *share/completions/abook.fish*:\r\n\r\n```\r\ncomplete -c abook -s h -d 'Show usage'\r\ncomplete -c abook -s C -l config -d 'Use an alternative configuration file' -r\r\ncomplete -c abook      -l datafile -d 'Use an alternative addressbook file' -r\r\n...\r\ncomplete -c abook      -l informat -d 'Input file format' -xa '(__fish_complete_abook_formats in)' -n $convert\r\ncomplete -c abook      -l outformat -d 'Output file format' -xa '(__fish_complete_abook_formats out)' -n $convert\r\ncomplete -c abook      -l infile    -d 'Input file (default: stdin)' -r -n $convert\r\n```\r\n\r\nNotice the imperfect attempt to keep a given flag vertically aligned in that example. Other completion scripts do a better job at having a consistent vertical alignment of flags. The problem is that `fish_indent` doesn't preserve such alignment. Which means we can't run it against our completion scripts without potentially annoying some people. On the other hand the non-trivial completion scripts  which contain more than `complete` commands tend to have major style bogosities (such as inconsistent indentation) and it would be nice to normalize those to a consistent style. It would also be nice if we could do `make style-all` and have it affect all fish scripts in this project without having to exclude completion scripts.\r\n\r\nNote that our official style for C++ code does not preserve such vertical alignment. And while we don't have an official style for Python (given how little of it we have) most style guides (e.g., Google's) also do not preserve vertical alignment for such sequences of lines. That's primarily because doing so is so complex as to be impractical.\r\n\r\nThis issue is to discuss whether someone feels strongly enough about preserving vertical alignment that they will do the hard work of modifying `fish_indent` to do so.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3162", "title": "disallow and complain about binding `\\c\\cX` sequences", "body": "I've seen a couple of instances of people asking why `bind \\c\\n` (i.e., binding [ctrl-enter]) doesn't work. The answer is that binding [ctrl-enter] doesn't make any sense. The [enter] key normally sends a carriage-return; \\r, aka \\cM. In other words, [enter] is already a control character. So applying the \\c modifier doesn't make any sense. It's equivalent to `bind \\c\\cJ` or `bind \\c\\cM`. Depending on whether you're talking about fish <= 2.2.0 or >= 2.3.0 respectively.\n\nSo we should modify the code to disallow people trying to apply the `\\c` (control) modifier to a a control character.\n\nP.S., The most recent instance of this was on [superuser.com](http://superuser.com/questions/1056536/ctrl-enter-for-fish-shell/). I also saw the same question on stackexchange.com recently (I don't know if it was from the same person).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3128", "title": "Why does `set_color reset` exist?", "body": "Why does `set_color reset` exist? It isn't documented. A cursory glance at the set_color() function shows that it is special cased but my informal testing shows that it produces the same output as set_color normal. It is used in the core fish code in just two files: _share/functions/vared.fish_ and _tests/test_util.fish_.\n\nI noticed this when working on issue #2980 when trying to understand when and why `term_donate()` was setting the colors to \"normal\". I then noticed that there was a \"reset\" color which seems to have the same effect.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3107", "title": "make it harder for people to do interactive things in non-interactive shells", "body": "We recently received another complaint about sftp not working (issue #3100). The reason was that the user was running `fish_vi_key_bindings` regardless of whether or not the shell was interactive. We can be friendlier by not initializing the interactive input subsystem and ignoring bind commands if the shell isn't interactive.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3038", "title": "add ability to write debug output to someplace other than stderr", "body": "There's a lot of things that would make the fish debug subsystem more useful. One improvement that should be relatively easy to implement is adding an option for sending the output to someplace other than stderr. This would nominally be a file but could be any object (e.g., a named pipe) accessible via a path name. The question is how should the user do this? Via a new flag such as `-F debug-file`? Or perhaps the `-d` flag should be modified to accept a string in a form such as \"_level:backtrace-frame-count:file-name_\" which it would split apart. If we do the latter then the `-D` /  `--debug-stack-frames` flags I just introduced would be removed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2986", "title": "do actual Xcode builds on Travis or perhaps switch to another CI", "body": "My recent changes to the non-Xcode builds of fish to make all *_.cpp_ modules independently compiled rather than `#include`'d into another module broke OS X Xcode project builds. That's because, despite being a long time user of OS X, I'm not a OS X developer and didn't think to verify that those changes didn't break the Xcode project configuration. We need a way to verify that changes to the non-Xcode build environment (i.e., traditional UNIX Makefiles) don't break Xcode project builds. A possible solution is to leverage Travis CI by asking it to build fish with xctool. Thanks to @floam for suggesting that potential solution to this issue.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2978", "title": "makefile dependency maintenance is too brittle", "body": "After committing my recent change to improve the include-what-you-use (IWYU) experience by folding the `make iwyu` target into the `make lint` target it occurred to me I didn't update the Makefile dependencies. There is a `make depend` build target but it produces ugly output. Worse, people need to remember to run it. Googling `makefile auto dependencies` turned up [this document](http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/) which describes an elegant method for deriving the dependencies automatically when they are needed. This issue is for investigating whether such a mechanism can be employed by this project in order to eliminate the `make depend` build target.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2928", "title": "`fish_indent` doesn't handle inlined comments in compound statements correctly", "body": "From issue #983 the following examples are legal but `fish_indent` reformats them into an invalid form. Note that the inlined comments are ignored and the backslash ties the line to the next non-comment line.\n\n```\nfunction my_function\n  echo \"hello\" | \\\n  # remove 'l' \n  tr -d 'l'\nend\n```\n\nAnd\n\n```\necho long \\\n  # important comments\n  very long \\\n  # read\n  # more\n  more\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2914", "title": "`bind` documentation incorrect with respect to the available functions", "body": "In _doc_src/bind.txt_ but not listed as a function by `bind -f`:\n- [x] delete-line (kill-line?)\n- [x] dump-functions\n- [x] explain\n\nIn the `bind -f` output but not in _doc_src/bind.txt_:\n- [ ] and\n- [ ] backward-jump\n- [ ] beginning-of-buffer\n- [ ] cancel\n- [ ] down-line\n- [ ] end-of-buffer\n- [ ] execute\n- [ ] force-repaint\n- [ ] forward-jump\n- [ ] history-token-search-backward\n- [ ] history-token-search-forward\n- [ ] repaint\n- [ ] self-insert\n- [ ] up-line\n- [ ] vi-arg-digit\n- [ ] vi-delete-to\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2914/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2900", "title": "`fish_indent` should wrap lines to keep them <= 100 chars in length", "body": "While working on implementing issue #571 I noticed that `fish_indent` completely ignores any explicit line continuations present in the original script. For example,\n\n```\ncppcheck -q --verbose --std=posix --std=c11 --language=c++ \\\n    --template \"[{file}:{line}]: {severity} ({id}): {message}\" \\\n    --suppress=missingIncludeSystem \\\n    --inline-suppr --enable=$cppchecks $cppcheck_args $c_files 2>&1\n```\n\nbecomes a single line. A line that is so long it is hard to read. Is that really the behavior we want?\n\nI can appreciate that enhancing `fish_indent` to wrap long lines may be more difficult than the value obtained from that enhancement. But it seems to me that it should respect any explicit wrapping done by the user to ensure lines are a reasonable length.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2900/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2860", "title": "error messages should provide more context (e.g., the function, file and line number)", "body": "I've noticed that people are mystified by error messages like the following (from issue #2859):\n\n```\ntest: Missing argument at index 2\n```\n\nI've seen such errors myself during the startup of a fish session and it was overly difficult to figure out what was wrong with my _config.fish_.\n\nFor error messages generated by fish, as opposed to external programs, it would be extremely helpful if they included some context. Such as the file and line number of the code being executed and/or the function being run at the time of the error.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2860/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2773", "title": "helping new users used to writing \"if $status\"", "body": "Someone recently asked on [StackOverflow](http://stackoverflow.com/questions/35660206/variables-may-not-be-used-as-commands) what the fish equivalent is for a bash block of this form:\r\n\r\n```\r\nif $status; then\r\n    echo success\r\nelse\r\n     echo failure\r\nfi\r\n```\r\n\r\nThey were stymied by the unhelpful feedback they received for the `if $status`:\r\n\r\n> fish: Variables may not be used as commands. Instead, define a function like \u201cfunction status; 0 $argv; end\u201d. See the help section for the function command by typing \u201chelp function\u201d.\r\n\r\nNor did they find the documentation helpful.\r\n\r\nI think we can do a few things to help new users with this specific issue:\r\n\r\n- [x] The \"Exit Status\" section in the fish tutorial could include some verbiage about testing exit status the fish way; i.e., `if test $status -eq 0` or other value if `if command` isn't appropriate. \r\n- [ ] Improve the wording on the _test_ man page -- especially the summary (\"perform tests on files and text\"). \r\n- [ ] Augment the feedback that says \"Variables may not be used as commands.\" to mention eval and test. \r\n\r\n- [ ] As a stretch goal make the feedback context aware; i.e., if the context is `if $status` replace the current feedback with an appropriate example using test.\r\n\r\n(Editted by @faho: Make a checklist)", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2773/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2753", "title": "instrument fish to track and report metrics on its behavior", "body": "While reviewing the fix for issue #2743 it occurred to me we really have no idea if the default `pcre2_substitute()` output buffer size is optimal in _src/builtin_string.cpp_. And we can't know unless we instrument the code to keep track of how many times the initial buffer was big enough, we had to double it once, twice, etc. There are undoubtedly other parts of the code with similar behavior that we should be tracking and reporting.\n\nTo be determined is how to extract that information. A new builtin command? Dump it if a specific signal (e.g., SIGUSR1) is received? Something else? The one thing I'm certain of is this should not be tied to exclusively to the profiling facility. We really want these metrics to be tracked long term for interactive shells. For that matter it might be useful to allow dumping the profiling data on demand in order to get a better idea of what's going on with interactive shells (as opposed to individual shell scripts).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15033677", "body": "You still need a **-x** flag here. Even when we fix the bug I pointed out there would be an implicit **-x** for this statement. So if adding an explicit **-x** breaks the code we need to know that now and figure out what is going on.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15033677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15493074", "body": "The URL for the gitter.im channel is incorrect. The correct URL is `https://gitter.im/fish-shell/fish-shell`.\n\nThe URL to stackoverflow isn't really useful for asking a question. It's primarily useful for people willing to answer questions about fish-shell. That URL should be documented but the correct url in the context of \"contact us\" would be `http://stackoverflow.com/questions/ask?tags=shell+fish`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15493074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15495430", "body": "> Unfortunately, that link doesn't really make it clear how to read previous questions, so it's possible we'd get a lot of duplicates that way.\n\nYes, but a) we're going to get a lot of duplicate questions no matter what we do (consider the current situation with GitHub issues) and b) the point of that URL is to make it more likely people will create issues that we can find with the /questions/tagged/fish URL. Both should be documented.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15495430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16778857", "body": "> Is e supposed to have backward-char at the end of the list?\n\nYes, that redefinition is intentional. These bindings are not perfect emulations of vi/vim. They're meant to be good enough. If you can improve on them I encourage you to open an issue and submit a pull request.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16778857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17057123", "body": "If you know, definitively, that a lint warning can safely be ignored and there isn't a reasonable way to rework the code to avoid the warning then explicitly suppress it. There is absolutely no reason for `make lint` to emit a single warning. Note the \"no reasonable way to rework the code\" caveat. Explicitly suppressing a warning should be very rare and it should be obvious to a reader why you're doing so.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17057123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17087790", "body": "Unfortunately readlink() is ambiguous on this point. However, I see I botched this because I intended to replace the \"sizeof buf\" below with \"PATH_MAX\" to ensure the subsequent null byte stuffing wouldn't write past the end of the buffer. Sigh. Fix on the way.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17087790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17132792", "body": "The bright variant color names were introduced after the 2.2.0 release. To use them you have to be running fish built from git head. The blank line can't be avoided at this time. If you're using ctrl-C so often that it's annoying I would recommend either changing your habits or going back to the 2.2.0 binding.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17132792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17135574", "body": "Let's continue this discussion in issue #2951.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17135574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17152475", "body": "Well, that was a stupid thing to do. Fortunately it was harmless.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17152475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153218", "body": "First, doxygen was borderline useless because no one was bothering to add the necessary annotations. The decision to remove the few doxygen annotations that existed had already been made before I decided to restyle the code so it's consistent. And frankly, if doxygen can't handle C++ style comments it's not worth the trouble even if we decided that doxygen generated documentation was worth the effort. Also, even the C style comments were in a variety of styles that only serve to make reading and editing the code harder.\n\nSecond, your personal preferences aren't relevant. Neither are mine. Everyone contributing to the project has their own personal preferences about such things. Which is why the code looks like crap and is hard to read. When contributing to a project we all need to set aside our preferences and use whatever style was established for the project. I also gave everyone lots of notice about what I intended to do including updating our _CONTRIBUTING.md_ file. If you couldn't be bothered to raise concerns before I started restyling the code I don't know why you expect me to listen now.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153372", "body": "The first google search result for \"headerdoc xcode\" was https://www.raywenderlich.com/66395/documenting-in-xcode-with-headerdoc-tutorial. It says that tool looks for a slight variant of C++ style comments; specifically, use three rather than two slashes. I'm not opposed to that. However, this isn't an Apple specific project so I don't think we want to tie ourselves to the rest of the HeaderDoc requirements. This [article](http://www.appcoda.com/documenting-source-code-in-xcode/) seems to cover the differences between Doxygen and HeaderDoc pretty well. While they have things in common there are also differences.\n\nAnd, as discussed earlier, these comments are well nigh useless in the current code base because no one has been enforcing the use of the requisite annotations.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153400", "body": "> or remove a comment entirely if it is wrong or sucks?\n\nI actually did remove a couple of obviously pointless comments. I noticed several more that should probably be removed but might have value if reworded. Doing so is outside the scope of this initiative. I definitely encourage everyone to improve comments near the code they are modifying.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17172550", "body": "Can you point me to a relevant document from Apple? I ran Xcode before and after this change and the \"inline syntax\" seems to produce the desired result. Are you not seeing the behavior you desire? It's possible I missed fixing a comment for a class/function definition.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17172550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17390227", "body": "> Is there a difference between an undefined variable and a variable with 0 number of values (ie an empty array)?\n\nNo, they both expand to zero elements. The only difference I can think of is how `set -q` treats the two cases so that we have a way to distinguish between a var that is defined (`set -q foo`) versus a var with at least one value (`set -q foo[1]`).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17390227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17436246", "body": "If you don't have a program like `fish_key_reader` you would normally tell someone to run `xxd` or `od -tx1z`, then press a key, then type [Ctrl-D] to exit the program. You then have the sequence of characters sent by the key for use in a `bind` command. The `fish_key_reader` program is just a specialization of those tools. It's not meant to be used in a fish script for reading input interactively.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17436246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17604492", "body": "Agreed (but drop the `-f` from the rm). It shouldn't be possible for the permissions to be screwed up short of someone doing something deliberately malicious. And while the force removal should be safe in as much as we know we just created the objects it makes me uneasy. It's one thing to do a force removal interactively or in a script where you expect the permissions to be a problem but neither applies in this case.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17604492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17740470", "body": "@Gonzih: The second attempt worked because a few months ago we disabled the tty driver mode that converts \\r (what the [enter] key sends) to \\n. In general you no longer need to bind \\n. We only bind it in case someone has a very weird terminal that sends \\n when [enter] is pressed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17740470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17745818", "body": "If you can make this clearer it won't hurt my feelings.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17745818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17834252", "body": "Sorry about that. I've done `brew install coreutils` on my two OS X systems so I tend to not notice these incompatibilities. But I'm happy that others are starting to take style and lint issues seriously enough to fix these bugs. It's extremely annoying that I can't yet use `make lint` to easily notice when I've introduced a bogosity.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17834252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50790994", "body": "In general the active (direct) voice is preferable to the passive (indirect) voice. Technical literature is especially prone to overuse of the passive voice. Having said that I like what you wrote and will adopt it with a couple of minor changes.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50790994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54010808", "body": "The original implementation was overly complicated. There is absolutely no need for a directory name that changes with each test run. Surely no one is running multiple `make test` invocations in parallel. And if you do so the results won't be predictable because too many of the tests create files with invariant names in /tmp.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54010808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54011576", "body": "Yeah, I hadn't noticed that the makefile does `cd tests; ../test_root/bin/fish test.fish`. One or the other should be changed. Since I don't think we want to support running these tests outside of the makefile framework I'll replace these shebang lines with a comment to that effect.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54011576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54012816", "body": "In general you'll still need to run the autoconf and configure commands once as you shouldn't rely on the autoconf artifacts that are currently in the repository (something I thing we should change). But the verbiage in that paragraph could be improved so I'll do that.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54012816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54013927", "body": "That's a problem if you do `make install` then `make DESTDIR=/path/to/install/prefix/ test` since that makes _test_root_ a symlink outside the git repo. The other option is to create a _test_temp_ directory and use that. Which has the advantage of not having to clean up individual files left in _/tmp_ by the tests. Yes? No?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54013927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54050791", "body": "Okay, I'll create _test/{data,home,root,temp}_ directories. I should have that change available tomorrow (time to go to bed).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54050791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54053304", "body": "I decided to make the change to implement a _test/_ directory tree before going to bed. It passes on my OS X and Ubuntu servers as well as two invocations on Travis CI and `make distclean` does the expected cleanups.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54053304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55771672", "body": "Please use the idiomatic form: `if (fchown(...) == -1)`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55771672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55771911", "body": "Include the errno in the message. I think this is also serious enough to warrant level one.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55771911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55771960", "body": "Since your doing this the same should be done for the fchmod() call.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55771960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55780280", "body": "That idiom is used in exactly three places, not counting your change, and is bollocks. Please change both. Leave the other two in _fish.cpp_ and _common.cpp_ for another day. I'm going to work with the other fish maintainers to implement a more consistent style but that's a battle for another day.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55780280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55780959", "body": "I'm willing to bet whomever wrote that did so based on a more defensible idiom: `if (0 == x)`. That way if one of the equal-signs was omitted the compiler will complain about assigning to a constant which `if (x = 0)` would not do and result in a bug.  But even that idiom is not justified these days given modern compilers and linters.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55780959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55781530", "body": "Sadly I don't think you can use safe_strerror() because it doesn't return a wstring. This is something else I think the project should handle using a better abstraction (e.g., a \"debug_errno()\" function). For now just print the decimal errno value so that anyone debugging a problem with this logic has some idea why it failed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55781530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/57983918", "body": "The reflow was intentional. This wasn't really a bulleted list. And where a bulleted list is intended it should be explicit. Not to mention the weird lack of periods on two of the three sentences.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/57983918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58277166", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58277166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58277730", "body": "Yep, it's to strip the leading whitespace from lines like this: `M CONTRIBUTING.md`. Without trimming that whitespace the string split below doesn't work as expected. I thought about string trim but that seemed less clear in this situation. Thanks for the suggestion to add `--porcelain`. Done.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58277730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58278016", "body": "Thanks. Done.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58278016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58278279", "body": "Hahaha! I made the same suggestion a few weeks ago on someone else's change (zanchey's?) and they pointed out the `type` is a function that calls `command` so better to just use the latter. Personally I think the `type -q` formulation is clearer and the extra overhead is probably not even measurable in most scripts. Done.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58278279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58323017", "body": "This is wrong because the generation member of the struct is a uint32_t not a pointer. But as I've hinted in my other comments regarding this change I think we should just drop the generation member.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58323017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58323787", "body": "`NULL` should only be used with respect to pointers. The whole point of `NULL` was that, at least in the past, there were computer architectures that required a non-zero value to represent a pointer that could not be dereferenced. You'll find a lot of B.S. regarding this if you google questions like \"c++ null pointer value\". That's because people who haven't been programming for 30+ years and are therefore unlikely to have encountered unusual architectures like the 24 bit word length computers sold by Harris Computer Systems in the 1980's are unaware of the relevant history.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58323787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58325572", "body": "The document you referred to begins with\n\n> The macro NULL is an implementation-defined null pointer constant\n\nNotice the word \"pointer\" in that sentence. It is not idiomatic to use NULL in a non-pointer context regardless of the fact that in practice, today, it will always evaluate to zero.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58325572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58974293", "body": "Shouldn't this also special-case `\"../\"`?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/58974293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59820418", "body": "While you're touching this remove the `-a mode` and change this to `if not set -q argv[1]`. The mode arg isn't even the mode, it's the `-M` switch when args are passed to the function, and the var isn't used anywhere else.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59820418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59972098", "body": "Interesting. No objection but this should be mentioned wherever this var is documented.\n\nP.S., I was thinking of proposing doing the same thing for cd history (i.e., `$dirprev`) in light of feedback I got on my `mcd` command proposal.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59972098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59976406", "body": "I have mixed feelings about that approach. There are a lot of vars that can't be universal vars right now; either because it inherently doesn't make any sense ($PWD) or because the current code base makes them explicitly global ($dirprev). Too, expecting people to know that there is a single mention somewhere in the docs that \"all vars can be universal vars unless otherwise noted\" when reading documentation for, say, $fish_key_bindings is going to annoy a lot of users. So I'm still recommending that this be explicitly mentioned; especially since it's a notable change from earlier behavior.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59976406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "stefanmaric": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4358", "title": "Link custom git commands to autogenerated suggestions", "body": "```shell\r\n$ fish --version\r\nfish, version 2.6.0-560-g874a675e\r\n\r\n$ uname -a\r\nLinux sam-xps-ubuntu 4.12.8-041208-generic #201708161815 SMP Wed Aug 16 22:17:30 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n$ echo $TERM\r\nxterm-256color\r\n```\r\n\r\nI have [git-extras](https://github.com/tj/git-extras) installed, which puts a bunch of `git-` commands available in the PATH and Fish is doing two very **good things**:\r\n\r\n1. Suggests custom git commands when appropriated (source for it [here](https://github.com/fish-shell/fish-shell/blob/master/share/completions/git.fish#L207) and [here](https://github.com/fish-shell/fish-shell/blob/master/share/completions/git.fish#L950)):\r\n\r\n![image](https://user-images.githubusercontent.com/1009040/29778581-45ba8a42-8be6-11e7-9963-3fa8f21b4774.png)\r\n\r\n2. Generates completions for these custom commands using the man pages provided by git-extras, so fish can suggest options when you type the custom commands as such `git-<custom_command>...`:\r\n\r\n![image](https://user-images.githubusercontent.com/1009040/29778817-0448eaa8-8be7-11e7-8e8c-61aed22a7f86.png)\r\n\r\nThe **problem** is, that these completions won't work if you type the custom commands as `git <custom_command>` (only `--help` is suggested):\r\n\r\n[![asciicast](https://asciinema.org/a/4ZJKpBwGvanmcJ00prQKXsLcn.png)](https://asciinema.org/a/4ZJKpBwGvanmcJ00prQKXsLcn)\r\n\r\nI have tried a few things to get around this, without success.\r\n\r\nFirst, using `-w, --wraps` option of `complete`:\r\n\r\n```shell\r\nfor custom_command in (__fish_git_custom_commands)\r\n  complete -c git -n \"__fish_git_using_command $custom_command\" -w \"git-$custom_command\"\r\nend\r\n```\r\n\r\nThat gives very weird and convoluted completion results. I presume because using `-w` makes `command` actually ignore the `-n`, extending plain `git` with all the options of each custom command:\r\n\r\n![image](https://user-images.githubusercontent.com/1009040/29780025-b4b3db02-8bea-11e7-839f-505ac86e25cd.png)\r\n\r\nI also tried some expansion combinations with `command -CSTRING` but it won't show completions for things like `complete -CSTRING\"git-authors -\"`.\r\n\r\nAlso don't know any way to alias/abbr multi-word strings to single-word commands (in order to tell fish that `git authors` is the same as `git-authors`).\r\n\r\nAny suggestions? I would love to open a PR if this is actually possible to achieve.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4358/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akalin": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4336", "title": "fish incorrectly sets a default $PATH on macOS", "body": "Fish version:\r\n```\r\n$ fish --version\r\nfish, version 2.6.0\r\n```\r\n\r\nOS version:\r\n```\r\nsystem_profiler SPSoftwareDataType\r\nSoftware:\r\n\r\n    System Software Overview:\r\n\r\n      System Version: macOS 10.12.6 (16G29)\r\n      Kernel Version: Darwin 16.7.0\r\n      Boot Volume: Root\r\n      Boot Mode: Normal\r\n      Secure Virtual Memory: Enabled\r\n      System Integrity Protection: Enabled\r\n```\r\n\r\nUsing Terminal.app:\r\n\r\n```\r\n$ echo $TERM\r\nxterm-256color\r\n```\r\n\r\nHere's a repro (with default shell set to `/bin/bash`):\r\n\r\n```\r\nakalin$ echo $PATH\r\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/homebrew/bin:/Applications/Keybase.app/Contents/SharedSupport/bin:/usr/local/MacGPG2/bin:/Library/TeX/texbin\r\n\r\n$ sh -c 'env HOME=$(mktemp -d) fish'\r\nWelcome to fish, the friendly interactive shell\r\n\r\n /U/akalin> echo $PATH\r\n/usr/bin /bin /usr/sbin /sbin /opt/X11/bin /usr/local/homebrew/bin /Applications/Keybase.app/Contents/SharedSupport/bin /usr/local/MacGPG2/bin /Library/TeX/texbin /usr/local/bin\r\n```\r\n\r\nHere's the output of `path_helper` (which reads `/etc/paths` and `/etc/paths.d/*`):\r\n\r\n```\r\n> /usr/libexec/path_helper \r\nPATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/homebrew/bin:/Applications/Keybase.app/Contents/SharedSupport/bin:/usr/local/MacGPG2/bin:/Library/TeX/texbin\"; export PATH;\r\n```\r\n\r\nThe discussion in https://github.com/fish-shell/fish-shell/issues/4192 says that fish simply inherits its `$PATH` variable, but that doesn't seem to be the case!", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "obfuscated": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4327", "title": "stop treating leading spaces as an indicator not to save a command in the history file", "body": "Fish 2.6.0 on Gentoo linux, Terminology, no customizations.\r\n\r\nThe problem is that fish doesn't place every command in the history buffer. The last case happened when I had leading spaces in my commands. But most often this happens when there is some error in the parsing of the command or something that fish doesn't like.\r\nI want and I'm used to that every time I press enter to execute something it enters the history butter, and I can bring it back pressing up arrow.\r\n\r\nThe simplest example is this one:\r\n> \\> echo \"bla0\"\r\nbla0\r\n\\>  echo \"bla1\"\r\nbla1\r\n\\> echo \"bla0\" <-- this is what happens if I press the up-arrow key", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nathanblair": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4319", "title": "implement generic `job_completed` event", "body": "Hey fishers,\r\n\r\nI was putting together a config.fish and wanted to include some functionality that could benefit from overriding the job-finished hook/event.\r\n\r\nIn the documentation on fishshell.com there is a sample function in the `function` section showing some `function notify ...`. It defines a function `function _notify_job$job --on-job-exit $job --inherit-variable job ...` but I can't find any documentation regarding any job-exit hooks or events.\r\n\r\nWhen I copied the function into my own config.fish file I did not notice any of the behaviors I might have expected to happen, notably an `\\a` beep being sent when a job was completed. My process looked like this:\r\n\r\n    > sleep 15 &\r\n    > sleep 15 &\r\n    > sleep 15 &\r\n\r\n...all executed consecutively (within 1 second). Of course, after 15 seconds, I started receiving notifications in my prompt that jobs were being finished (`Job X, \"sleep 15 &\" has ended`).\r\n\r\nI'd like to tap into (override) the print statements that get issued when these jobs are finished to write something that fits my theme a little better. Am I missing documentation that explains how to do this? From what I've seen the only builtin events I can hook are pre-exec, post-exec, and the prompt.\r\n\r\nThanks for any input!", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thorstenkampe": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4306", "title": "fish_right_prompt sometimes triggers extraneous new line", "body": "Fish 2.6.0\r\n\r\nA newline appears in the prompt when using the native Windows terminal or ConEmu (see screenshot) in connection with `fish_right_prompt` (but not `fish_prompt`). It does not appear with the native Cygwin terminal emulator MinTTY. \r\n\r\nThere were a few issues regarding `fish_prompt` and ConEmu but they seem to have been fixed. Is this a known issue?\r\n![image](https://user-images.githubusercontent.com/475462/29155784-7181c39e-7d9e-11e7-843b-25a4ba7087f2.png)\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "laughedelic": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4286", "title": "Easier way to control repeated suggestions in completions", "body": "I'd like to have a way to specify that a certain option shouldn't be suggested in completion twice. For  example, if I type\r\n\r\n```shell\r\ngit commit --amend --<TAB>\r\n```\r\n\r\nIt will suggest me `--amend` option again (among others), although it doesn't make much sense.\r\n\r\nI would even suggest to make it default behavior and add an opposite option for the rare cases when an option can be repeated (I can think only of one example right now: `exa --all --all`, but probably it's not as rare as I think).\r\n\r\nThe `--amend` option from the example above is currently defined as\r\n\r\n```\r\ncomplete -c git -n '__fish_git_using_command commit' -l amend -d 'Amend the log message of the last commit'\r\n```\r\n\r\nA workaround would be to add `__fish_not_contain_opt amend`, which is too verbose taking into account that you have to add it to _each completion_:\r\n\r\n```\r\ncomplete -c git -n '__fish_git_using_command commit; and __fish_not_contain_opt amend' -l amend -d 'Amend the log message of the last commit'\r\n```", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3031", "title": "`commandline -f` ops reordered with respect to other commandline operations", "body": "I observe strange behaviour regarding the execution order of `commandline` calls _with_ `-f` option and _without_.\n\nExample: I define the following function and bind it to a <kbd>ctrl</kbd><kbd>s</kbd>:\n\n``` fish\nfunction __surround\n    commandline -f backward-kill-path-component\n    commandline -i '\"'\n    commandline -f yank\n    commandline -a '\"'\nend\n\nbind \\cs '__surround'\n```\n\n(in my `fish_user_key_bindings.fish`)\n\nWhat happens instead:\n- cut + paste (those with `-f`)\n- insert + append\n\nHere is a demo: [asciicast](https://asciinema.org/a/45721)\n\nThis is just a simplified example, I have encountered this behaviour in more situations and if this is not enough, I can provide more examples. \n\n---\n- Fish version: `fish, version 2.3b2` (`homebrew install --devel fish`)\n- Operating system: OS X El Capitan\n- Terminal emulator: iTerm2\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zhaojinxiang": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4284", "title": "How do I change the tab completion's behavior of fish-shell to letting its tab completion have equal sign(=) after a long option which should be followed by arguments? ", "body": "Also asked in [Stack Overflow](https://stackoverflow.com/q/45480421/4469745)\r\n\r\nIn fish-shell, tab completion doesn't have equal sign(=) after a long option which should be followed by arguments, while oh-my-zsh do.\r\n\r\nI think the equal-sign can hint us there should be a argument following. Can we turn on this feature\uff1f", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dikti": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4271", "title": "brew cask completion", "body": "If trying to install some homebrew cask (`brew cask install foo<tab>`), it completes the current directory instead. With regular Homebrew (`brew install foo<tab>`), completion works. Using a fresh unconfigured fish, the problem persists.\r\n\r\n    $ echo $version\r\n    2.6.0\r\n    $ uname -a\r\n    Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n    $ echo $TERM\r\n    xterm-256color # its iTerm2", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gnzlbg": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4266", "title": "tutorial should cover basic flow control and comparing values (don't assume the user is familiar with /bin/sh)", "body": "I was trying to find how to compare two values in `fish` shell, e.g. to see if a string is empty, but the tutorial doesn't even mention any comparisons operators at all. It might be a good idea to show them when introducing conditionals at least for strings and numbers (e.g. how to check whether two numbers are equal, or one smaller than the other, or how to check whether two strings are equal, one string is the empty string, two paths are equal, etc.).", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4266/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "silvio": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4238", "title": "[ctrl-C] fails to terminate job when `read` is involved", "body": "fish version: 2.6.0\r\nuname: Linux xxx 4.11.7-041107-generic #201706240231 SMP Sat Jun 24 06:33:20 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\nTERM: screen-256color (tmux)\r\n\r\nThe problem occurs with a plain shell too.\r\n\r\nI use a `inotifywait`-while-end call for cyclic compiling (no differences between the used build system here `cargo` but same problem with `make`):\r\n\r\n    inotifywait -mrq -e close_write Cargo.toml src/ libgerrit/ --format \"%w/%f\" | while read CHANGEDFILE\r\n        clear\r\n        cargo check; and cargo build\r\n        echo \"DONE\"\r\n    end\r\n\r\nI cannot stop the program via `STRG+C`.\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mabinogiysk": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4205", "title": "Case-insensitive file completion doesn't work with variables", "body": "fish version: 2.6\r\nfor example:\r\nI have only one file named FILE_1 in the directory '~ /test/',  then let dir='~ /test/', like this:\r\n$ set dir test\r\nthen rename the file:\r\n$ mv $dir/fi\r\nthen press tab, and no response, completion failed.\r\nby contrast, when I am in directory '~ /test/' and rename the file\r\n$ mv fil\r\nthen press tab, the 'fil' can be translate into 'FILE_1'\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomsmeding": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4199", "title": "`read` in config.fish gives `input_initialized=false` while it should be true", "body": "OS: macOS Sierra & Arch Linux\r\n$TERM = xterm-256color\r\n\r\nFirst noticed in the Fish 2.6.0 release, but a `git bisect` tells us that the commit that introduced the error is 6d02bec4c799d1937fae014838e1d0d96c5ae7d9. Note that in particular, Fish 2.5.0 is before that commit and is fine.\r\n\r\nLike the title says, if the file `~/.config/fish/config.fish` contains an executed call to the `read` builtin, the global variable `input_initialized` is at some point during execution of that file, set to `false`. This means that afterwards, fish crashes with an assertion error on the line `assert(input_initialized);` in [src/reader.cpp](https://github.com/fish-shell/fish-shell/blob/6d02bec4c799d1937fae014838e1d0d96c5ae7d9/src/reader.cpp#L1542).\r\n\r\nHow to reproduce: in a plain new fish installation checked out at 6d02bec4c799d1937fae014838e1d0d96c5ae7d9, create a `~/.config/fish/config.fish` with the contents:\r\n\r\n    read kaas\r\n\r\nThen start a new shell. It will prompt for input with `read>`, and after reading a line, crash with the stacktrace: (recorded after exchanging `-O2` for `-g` in the Makefile makes and recompiling for a more useful trace)\r\n\r\n    <E> fish: src/reader.cpp:1542: failed assertion: input_initialized\r\n    <E> fish: Backtrace:\r\n    <E> fish: 0   reader_interactive_init() + 60\r\n    <E> fish: 1   reader_push(wchar_t const*) + 374\r\n    <E> fish: 2   read_i() + 23\r\n    <E> fish: 3   reader_read(int, io_chain_t const&) + 168\r\n    <E> fish: 4   main + 1459\r\n    <E> fish: 5   start + 1\r\n\r\nA run in `lldb` with a watchpoint set on `input_initialized` (`lldb ./fish`, `b main`, `process launch -t`, `wa s v input_initialized`, `cont`, `cont`, then enter something in the `read>` prompt, then `bt`) shows that it is set to false with the following backtrace: (I entered \"hoi\")\r\n\r\n    * thread #1: tid = 0x146840, 0x00000001001554bd fish`input_destroy() + 29 at input.cpp:315, queue = 'com.apple.main-thread', stop reason = watchpoint 1\r\n      * frame #0: 0x00000001001554bd fish`input_destroy() + 29 at input.cpp:315\r\n        frame #1: 0x00000001001e1864 fish`reader_interactive_destroy() + 148 at reader.cpp:1647\r\n        frame #2: 0x00000001001e1776 fish`reader_pop() + 342 at reader.cpp:2017\r\n        frame #3: 0x000000010003f2d6 fish`read_interactive(buff=L\"hoi\", nchars=0, shell=false, mode_name=L\"fish_read\", prompt=L\"set_color green; echo -n read; set_color normal; echo -n \\\"> \\\"\", right_prompt=L\"\", commandline=L\"\") + 3046 at builtin.cpp:1991\r\n        frame #4: 0x0000000100020e2c fish`builtin_read(parser=0x000000010025a230, streams=0x0000000100506530, argv=0x0000000100506050) + 4172 at builtin.cpp:2266\r\n        frame #5: 0x0000000100011b65 fish`builtin_run(parser=0x000000010025a230, argv=0x0000000100506050, streams=0x0000000100506530) + 501 at builtin.cpp:3583\r\n        frame #6: 0x00000001000f7aa7 fish`exec_job(parser=0x000000010025a230, j=0x0000000100506488) + 12519 at exec.cpp:802\r\n        frame #7: 0x000000010018f3c8 fish`parse_execution_context_t::run_1_job(this=0x0000000100505f80, job_node=0x000000010081a614, associated_block=0x0000000100505ff0) + 4696 at parse_execution.cpp:1311\r\n        frame #8: 0x000000010018f74b fish`parse_execution_context_t::run_job_list(this=0x0000000100505f80, job_list_node=0x000000010081a600, associated_block=0x0000000100505ff0) + 283 at parse_execution.cpp:1345\r\n        frame #9: 0x000000010019a3d5 fish`parse_execution_context_t::eval_node_at_offset(this=0x0000000100505f80, offset=0, associated_block=0x0000000100505ff0, io=0x00007fff5fbfbc88) + 1381 at parse_execution.cpp:1384\r\n        frame #10: 0x00000001001c1784 fish`parser_t::eval_block_node(this=0x000000010025a230, node_idx=0, io=0x00007fff5fbfbc88, block_type=TOP) + 628 at parser.cpp:662\r\n        frame #11: 0x00000001001c1079 fish`parser_t::eval(this=0x000000010025a230, cmd=L\"read kaas\\n\", io=0x00007fff5fbfbc88, block_type=TOP, tree=parse_node_tree_t @ 0x00007fff5fbfa4e0) + 1529 at parser.cpp:621\r\n        frame #12: 0x00000001001f06aa fish`read_ni(fd=3, io=0x00007fff5fbfbc88) + 3242 at reader.cpp:3306\r\n        frame #13: 0x00000001001ef08c fish`reader_read(fd=3, io=0x00007fff5fbfbc88) + 188 at reader.cpp:3344\r\n        frame #14: 0x0000000100023ccc fish`builtin_source(parser=0x000000010025a230, streams=0x0000000100507080, argv=0x00000001005067b0) + 1836 at builtin.cpp:2848\r\n        frame #15: 0x0000000100011b65 fish`builtin_run(parser=0x000000010025a230, argv=0x00000001005067b0, streams=0x0000000100507080) + 501 at builtin.cpp:3583\r\n        frame #16: 0x00000001000f7aa7 fish`exec_job(parser=0x000000010025a230, j=0x0000000100506328) + 12519 at exec.cpp:802\r\n        frame #17: 0x000000010018f3c8 fish`parse_execution_context_t::run_1_job(this=0x0000000100507be0, job_node=0x0000000100802a14, associated_block=0x00000001005078f0) + 4696 at parse_execution.cpp:1311\r\n        frame #18: 0x000000010018f74b fish`parse_execution_context_t::run_job_list(this=0x0000000100507be0, job_list_node=0x0000000100802a00, associated_block=0x00000001005078f0) + 283 at parse_execution.cpp:1345\r\n        frame #19: 0x000000010019a3d5 fish`parse_execution_context_t::eval_node_at_offset(this=0x0000000100507be0, offset=0, associated_block=0x00000001005078f0, io=0x00007fff5fbff0c0) + 1381 at parse_execution.cpp:1384\r\n        frame #20: 0x00000001001c1784 fish`parser_t::eval_block_node(this=0x000000010025a230, node_idx=0, io=0x00007fff5fbff0c0, block_type=TOP) + 628 at parser.cpp:662\r\n        frame #21: 0x00000001001c1079 fish`parser_t::eval(this=0x000000010025a230, cmd=L\"builtin source /Users/Tom/.config/fish/config.fish\", io=0x00007fff5fbff0c0, block_type=TOP, tree=parse_node_tree_t @ 0x00007fff5fbfeeb0) + 1529 at parser.cpp:621\r\n        frame #22: 0x00000001001bef28 fish`parser_t::eval(this=0x000000010025a230, cmd=L\"builtin source /Users/Tom/.config/fish/config.fish\", io=0x00007fff5fbff0c0, block_type=TOP) + 968 at parser.cpp:596\r\n        frame #23: 0x000000010022e5be fish`source_config_in_directory(dir=L\"/Users/Tom/.config/fish\") + 766 at fish.cpp:197\r\n        frame #24: 0x000000010022d7ec fish`read_init(paths=0x00007fff5fbff4c8) + 220 at fish.cpp:211\r\n        frame #25: 0x000000010022a14f fish`main(argc=1, argv=0x00007fff5fbff9f0) + 863 at fish.cpp:367\r\n        frame #26: 0x00007fffa6e2a235 libdyld.dylib`start + 1\r\n\r\nMost testing was performed on my macOS machine, but the crash is at least also observed in Arch Linux with Fish 2.6.0. Since the backtrace is the same, I have assumed here that it is the same problem and that it isn't very system-specific.\r\n\r\nNote that calling the `read` builtin in the interactive prompt gives no problems, it is specifically calling it in `config.fish` that results in the crash.\r\n\r\nFrom the above stacktrace, my hunch is that the `read` builtin is setting up and tearing down an interactive context as if it's in a nice separate process, while it's actually overriding the global context of the interactive process. Any ideas?\r\n\r\n(Possibly related issue: #4178)", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arkban": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4178", "title": "Variant of the `No TTY for interactive shell`", "body": "I've been experiencing a persistent variant of the `No TTY for interactive shell` error trying to install oh-my-fish on fish v2.6.0:\r\n```\r\n\u227b curl -L https://get.oh-my.fish | fish\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100   194  100   194    0     0    426      0 --:--:-- --:--:-- --:--:--   427\r\n100 16622  100 16622    0     0  25023      0 --:--:-- --:--:-- --:--:-- 25023\r\nExisting installation detected at /Users/patrick.bohan/.local/share/omf\r\nWould you like to remove the existing installation? (y/N): <W> fish: No TTY for interactive shell (tcgetpgrp failed)\r\nsetpgid: Inappropriate ioctl for device\r\n```\r\n\r\nRequested ticket information:\r\n```\r\n\u227b fish --version\r\nfish, version 2.6.0\r\n\u227b echo $version\r\n2.6.0\r\n\u227b uname -a\r\nDarwin patrickbohanwerallyin.local 16.6.0 Darwin Kernel Version 16.6.0: Fri Apr 14 16:21:16 PDT 2017; root:xnu-3789.60.24~6/RELEASE_X86_64 x86_64\r\n\u227b echo $TERM\r\nxterm-256color\r\n```\r\n\r\n**It does indeed when I run without customizations**, i.e. `sh -c 'env HOME=$(mktemp -d) fish'`. \r\nI'm rather new to fish -- I've mostly stuck to customizing my `fish_prompt` -- but I'm at a loss for what change might have done this. I'm happy to narrow this down on my own but I'm not entirely sure the best way to do that. (I tried `fish --debug-level=3` but I'm not sure exactly what I might be looking for.)\r\n\r\nI tried the [alternate install](https://github.com/oh-my-fish/oh-my-fish#installation) and the first `read` succeeded but a second one failed. I got a stack trace that might (hopefully) is useful:\r\n```\r\n[patrick.bohan|~]0\u227b curl -L https://get.oh-my.fish > install\r\n                    fish install --path=~/.local/share/omf --config=~/.config/omf\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100   194  100   194    0     0    384      0 --:--:-- --:--:-- --:--:--   385\r\n100 16622  100 16622    0     0  24041      0 --:--:-- --:--:-- --:--:-- 24041\r\nExisting installation detected at /Users/patrick.bohan/.local/share/omf\r\nWould you like to remove the existing installation? (y/N): \u23ce                                                                                                                                                                                                                  read> y\r\nThis will uninstall Oh My Fish and all plugins and themes from\r\n/Users/patrick.bohan/.local/share/omf.\r\nAre you sure you want to continue? (y/N): <E> fish: src/reader.cpp:1559: failed assertion: input_initialized\r\n<E> fish: Backtrace:\r\n<E> fish: 0   reader_push(wchar_t const*) + 1056\r\n<E> fish: 1   builtin_read(parser_t&, io_streams_t&, wchar_t**) + 1482\r\n<E> fish: 2   builtin_run(parser_t&, wchar_t const* const*, io_streams_t&) + 334\r\n<E> fish: 3   exec_job(parser_t&, job_t*) + 3736\r\n<E> fish: 4   parse_execution_context_t::run_1_job(parse_node_t const&, block_t const*) + 1204\r\n<E> fish: 5   parse_execution_context_t::run_job_list(parse_node_t const&, block_t const*) + 117\r\n<E> fish: 6   parse_execution_context_t::eval_node_at_offset(unsigned int, block_t const*, io_chain_t const&) + 403\r\n<E> fish: 7   parser_t::eval_block_node(unsigned int, io_chain_t const&, block_type_t) + 140\r\n<E> fish: 8   parser_t::eval(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, io_chain_t const&, block_type_t, parse_node_tree_t) + 230\r\n<E> fish: 9   parser_t::eval(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, io_chain_t const&, block_type_t) + 134\r\n<E> fish: 10  internal_exec_helper(parser_t&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned int, block_type_t, io_chain_t const&) + 1017\r\n<E> fish: 11  exec_job(parser_t&, job_t*) + 2885\r\n<E> fish: 12  parse_execution_context_t::run_1_job(parse_node_t const&, block_t const*) + 1204\r\n<E> fish: 13  parse_execution_context_t::run_job_list(parse_node_t const&, block_t const*) + 117\r\n<E> fish: 14  parse_execution_context_t::eval_node_at_offset(unsigned int, block_t const*, io_chain_t const&) + 403\r\n<E> fish: 15  parser_t::eval_block_node(unsigned int, io_chain_t const&, block_type_t) + 140\r\n<E> fish: 16  parser_t::eval(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, io_chain_t const&, block_type_t, parse_node_tree_t) + 230\r\n<E> fish: 17  parser_t::eval(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, io_chain_t const&, block_type_t) + 134\r\n<E> fish: 18  internal_exec_helper(parser_t&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned int, block_type_t, io_chain_t const&) + 1017\r\n<E> fish: 19  exec_job(parser_t&, job_t*) + 2885\r\n<E> fish: 20  parse_execution_context_t::run_1_job(parse_node_t const&, block_t const*) + 1204\r\n<E> fish: 21  parse_execution_context_t::run_job_list(parse_node_t const&, block_t const*) + 117\r\n<E> fish: 22  parse_execution_context_t::eval_node_at_offset(unsigned int, block_t const*, io_chain_t const&) + 403\r\n<E> fish: 23  parser_t::eval_block_node(unsigned int, io_chain_t const&, block_type_t) + 140\r\n<E> fish: 24  parser_t::eval(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, io_chain_t const&, block_type_t, parse_node_tree_t) + 230\r\n<E> fish: 25  parser_t::eval(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, io_chain_t const&, block_type_t) + 134\r\n<E> fish: 26  internal_exec_helper(parser_t&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned int, block_type_t, io_chain_t const&) + 1017\r\n<E> fish: 27  exec_job(parser_t&, job_t*) + 2885\r\n<E> fish: 28  parse_execution_context_t::run_1_job(parse_node_t const&, block_t const*) + 1204\r\n<E> fish: 29  parse_execution_context_t::run_job_list(parse_node_t const&, block_t const*) + 117\r\n<E> fish: 30  parse_execution_context_t::run_if_statement(parse_node_t const&) + 461\r\n<E> fish: 31  parse_execution_context_t::run_1_job(parse_node_t const&, block_t const*) + 529\r\n<E> fish: 32  parse_execution_context_t::run_job_list(parse_node_t const&, block_t const*) + 117\r\n<E> fish: 33  parse_execution_context_t::run_if_statement(parse_node_t const&) + 461\r\n<E> fish: 34  parse_execution_context_t::run_1_job(parse_node_t const&, block_t const*) + 529\r\n<E> fish: 35  parse_execution_context_t::run_job_list(parse_node_t const&, block_t const*) + 117\r\n<E> fish: 36  parse_execution_context_t::eval_node_at_offset(unsigned int, block_t const*, io_chain_t const&) + 403\r\n<E> fish: 37  parser_t::eval_block_node(unsigned int, io_chain_t const&, block_type_t) + 140\r\n<E> fish: 38  parser_t::eval(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, io_chain_t const&, block_type_t, parse_node_tree_t) + 230\r\n<E> fish: 39  parser_t::eval(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, io_chain_t const&, block_type_t) + 134\r\n<E> fish: 40  internal_exec_helper(parser_t&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned int, block_type_t, io_chain_t const&) + 1017\r\n<E> fish: 41  exec_job(parser_t&, job_t*) + 2885\r\n<E> fish: 42  parse_execution_context_t::run_1_job(parse_node_t const&, block_t const*) + 1204\r\n<E> fish: 43  parse_execution_context_t::run_job_list(parse_node_t const&, block_t const*) + 117\r\n<E> fish: 44  parse_execution_context_t::eval_node_at_offset(unsigned int, block_t const*, io_chain_t const&) + 403\r\n<E> fish: 45  parser_t::eval_block_node(unsigned int, io_chain_t const&, block_type_t) + 140\r\n<E> fish: 46  parser_t::eval(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, io_chain_t const&, block_type_t, parse_node_tree_t) + 230\r\n<E> fish: 47  reader_read(int, io_chain_t const&) + 1877\r\n<E> fish: 48  main + 3118\r\n<E> fish: 49  start + 1\r\n<E> fish: 50  53  ???                                 0x0000000000000004 0x0 + 4\r\nfish: 'fish install --path=~/.local/sh\u2026' terminated by signal SIGABRT (Abort)\r\n[patrick.bohan|~]134\u227b\r\n```\r\n\r\nUnfortunately I haven't found any work around for this problem. I've looked at several seemingly related tickets ( #3805 , #3345 , #2980, #1844 ) but none appeared to be helpful for my situation.\r\n\r\nAny help would be greatly appreciated.\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Teemperor": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4174", "title": "Support clang's new shell autocompletion feature", "body": "The next version of clang will ship with a `--autocomplete` flag that provides a backend for shells to complete all flags that the current clang binary supports. The general idea is that the shell passes the flag it currently wants to complete to clang via`clang --autocomplete=-fsyntax` and then clang prints a list of flags that this completes to:\r\n\r\n```js\r\n$./bin/clang --autocomplete=-std\r\n-std-default= -std: -std= -stdlib=\r\n```\r\n\r\nThis also works with all the values that the flags take, e.g. in this case return all the stdlibs clang supports in its `-stdlib=libc++` flag:\r\n\r\n```js\r\n$ ./bin/clang --autocomplete=-stdlib=,\r\nlibc++ libstdc++ platform\r\n```\r\n\r\nFor a better overview, see the clang's bash completion script that illustrates the way the `--autocomplete` flag works: [bash-completions.sh](https://github.com/llvm-mirror/clang/blob/master/utils/bash-autocomplete.sh).\r\n\r\nThe big advantage is that this allows to have a single shell completion that works with all flags of all future clang versions (even the custom vendor versions from Apple or a self-build clang from trunk!), as the flag just queries the internal option parsing logic of the selected clang binary. \r\n\r\nIt would be very useful if fish would use this feature and also start calling this flag when trying to complete a clang flag.\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cirfi": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4132", "title": "pgrep & pkill completing issue when process name exceeding the limit", "body": "Fish version: 2.5.0\r\nOS: Arch Linux\r\nTerm: rxvt-unicode-256color\r\n\r\nWhen I kill telegram-desktop, whose name is exceeding the 16 bytes limit, ```pkill telegram-desktop``` doesn't work at all. Instead, I need to use ```pkill telegram-deskto```\r\n\r\nHowever, fish completes the command ```pkill telegram``` to ```pkill telegram-desktop``` not ```pkill telegram-deskto```. Fish compltes ```pgrep``` the same way.\r\n\r\n```sh\r\n$ pgrep -l telegram-desk\r\n23560 telegram-deskto\r\n$ pgrep -l telegram-deskto\r\n23560 telegram-deskto\r\n$ pgrep -l telegram-desktop\r\n$\r\n```\r\n\r\n```pkill```'s ```-f``` option helps a lot. I now alias ```pkill``` to ```pkill -f``` and it works well. Thanks for krader1961's helping.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rolag": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4124", "title": "Tab completions shouldn't move the cursor when there are no completions", "body": "I think it's kind of annoying that fish moves the cursor to the end of a token when `<TAB>` is pressed and no completions are found.\r\n\r\nTo reproduce:\r\n```fish\r\n# Replace bar '|' with cursor and press <TAB>\r\nmpv --|'https://...very-very-long-url...'\r\nfoo /path-typo|:/usr/lib\r\n```\r\n\r\n```\r\nVersion: 2.6.0-65-gedaef4e6-dirty\r\nOS: Linux Debian (Unstable) \r\nTerminal: gnome-terminal, xterm\r\n```\r\n\r\nIf this sounds like a good idea and would be merged, I'd like to have a go at this issue.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4124/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dreamsorcerer": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4111", "title": "Variable for current command", "body": "It would be useful to have a variable which contained the current running commandline.\r\n\r\ni.e. The same value that is passed to fish_preexec before executing a command should be available to those commands as a variable.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ambrevar": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4102", "title": "Document vi bindings for suggestion completion", "body": "Just a documentation nit:\r\n\r\nUsing vi-bindings in normal mode, `w` will complete the full suggestion while `e` will complete the next word. I cannot find this in the doc.\r\n\r\nMoreover in the [`Shared bindings`](http://fishshell.com/docs/current/index.html#editor) section is is mentioned that `Alt-F` completes the word: that's Emacs specific.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4102/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4025", "title": "vi binding 'e' has wrong behaviour on second-to-last char", "body": "- fish, version 2.5.0-384-g9e64571d\r\n- OS: Arch Linux\r\n- Term: Urxvt 9.22\r\n\r\nUsing vi bindings, if the cursor is on `1` in\r\n```\r\n12 345\r\n```\r\npressing `e` in normal mode will move to `5` while it should move to `2`.\r\n\r\nThe current definition of `e` is\r\n\r\n```\r\nbind e forward-char forward-word backward-char\r\n```\r\n\r\nI believe the following binding to be correct:\r\n\r\n```\r\nbind e forward-word backward-char\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3474", "title": "complete -C fails when recursing?", "body": "fish: 2.3.1, Arch Linux, urxvt 9.22\n\nEnter `complete -C\"type p\"`: only functions and builtins will get printed.\n`type` has the following completion definition:\n\n`complete -c type -a \"(complete -C(commandline -ct))\" -x`\n\nCan you confirm the issue?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3469", "title": "Escape and complete -C (for fzf completion widget)", "body": "fish 2.3.1, Arch Linux, urxvt 9.22\r\n\r\nI am trying to write a widget to replace fish completion menu with fzf. (Awesome, right? ;) )\r\n\r\nThe idea is simple:\r\n\r\n``` fish\r\n## Boilerplate...\r\ncomplete -C | fzf... | read result\r\n## Some code to replace the token with $result.\r\n```\r\n\r\nProblem is, `complete -C` unescapes the tokens a bit too much, which makes variables indistinguishable from escaped dollars.\r\n\r\nExample:\r\n\r\n``` fish\r\nset HFOO 42\r\necho \\$HOME-$H<binding>\r\n```\r\n\r\nReplace `<binding>` with a binding to a function that prints out `complete -C`. Result:\r\n\r\n```\r\n$HOME-$HOME\r\n$HOME-$HFOO\r\n```\r\n\r\nThe result is unusable since there is no way for the calling function to know what should be escaped.\r\n\r\nThe normal completion does preserve the escaped token though:\r\n\r\n```\r\n\\$HOME-$HOME\r\n\\$HOME-$HFOO\r\n```\r\n\r\nI think `complete -C` should do the same.\r\n\r\nThis might be related to https://github.com/fish-shell/fish-shell/issues/1127.\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kballard": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4060", "title": "Xcode install missing a lot of files, pkg installer broken", "body": "`xcodebuild install` is missing a lot of files that `make install` installs. #4057 adds a separate `make install-doc` that can be used with the Xcodebuild install to get docs, but here's a list of all the other files that are missing:\r\n\r\n```\r\n/usr/local/bin/fish_key_reader\r\n/usr/local/etc/fish/conf.d\r\n/usr/local/share/fish/__fish_build_paths.fish\r\n/usr/local/share/fish/groff\r\n/usr/local/share/fish/vendor_completions.d\r\n/usr/local/share/fish/vendor_conf.d\r\n/usr/local/share/fish/vendor_functions.d\r\n/usr/local/share/man/man1/fish_key_reader.1\r\n/usr/local/share/pkgconfig\r\n```\r\n\r\nIt seems the package installer on fishshell.com is built using the Xcode install, because it's also missing all of these files/folders.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6168078", "body": "I don't know about GNU sed, but the sed that ships on OS X doesn't interpret `\\n` in a substitution expression. In order to substitute in a newline, you need to have an actual newline escaped with a backslash. Unfortunately due to issue #52 the backslash itself needs to be escaped, which makes the final pattern\n\n```\nsed -e \"s/\\([^=]\\)=/\\1\\\\\n/\"\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6168078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6168107", "body": "Terminal programs can't see the command key. Fishfish is a terminal program. Therefore fishfish cannot see the command key.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6168107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6168184", "body": "It appears `\\uF402` is `**`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6168184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6182727", "body": "Yes I am aware. The bug isn't that `$?` doesn't work, it's that the error message it prints contains a garbage unicode character in place of the expected `?`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6182727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6182822", "body": "I'm running on OS X using the provided installer.\n\nIf I run `help` by itself I get the help page in my browser. If I run `help fg` this is identical to running `man 1 builtin`, except, oddly enough, it's a bit slower. And if I run `fg -h` it prints out the documentation for that builtin command.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6182822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6182900", "body": "`grep` isn't actually a function for me at all. `/usr/local/share/fish/functions/grep.fish` defines the `GREP_COLOR` and `GREP_OPTIONS` env vars but it doesn't define a `grep` function. However, `type grep` and `functions` both think I have a function named grep that just happens to have no definition.\n\nI'm running on OS X using the provided package installer.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6182900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183043", "body": "This can actually be hacked in using the existing `fish_title` function. Here's what I set mine to:\n\n```\nfunction fish_title\n    set -l pwd (echo -n $PWD | sed 's/ /%20/g')\n    printf '\\a\\033]7;file://localhost/%s' $pwd\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183542", "body": "If you want the mother of all escape code documentation, here's [Xterm Control Sequences](http://invisible-island.net/xterm/ctlseqs/ctlseqs.html). Interestingly, `\\e]7;` isn't on that list. It may be an Apple-specific extension though.\n\nIn any case, mine works by first throwing out a `\\a` to terminate the `\\e]2;` that must have already been emitted. Then it spits out the `\\e]7;` control sequence (using `\\033` because fishfish, unlike bash, doesn't make printf a builtin and /bin/printf doesn't know `\\e`), then the message, and leaves off the terminating `\\a` because it knows fishfish is going to emit one immediately after.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183672", "body": "That sed expression prints nothing at all under OS X.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183818", "body": "It appears the problem is `\\|` isn't valid in POSIX BRE's. I'm guessing GNU Sed tries to be special about it. If you convert the pattern to an extended RE it works.\n\n```\ncase (sed -En 's/.*<h2><a class=\"anchor\" (id|name)=\"([^\"]*)\">.*/\\2/p' $__fish_help_dir/commands.html)\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1819874", "body": "This flag doesn't seem to be documented anywhere.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1819874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858143", "body": "[Travis build failure](https://travis-ci.org/fish-shell/fish-shell/jobs/35773329) is curious. The interactive tests failed. I can't reproduce on my local OS X machine or on my Ubuntu 14.04 Linode machine. Is there any way to get build artifacts from Travis? I'm wondering if I should tweak the test script to dump the expect log on a failure.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858155", "body": "Oh that's strange, the failure for the gcc compiler is different, it failed in the bind test instead of the read test.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858311", "body": "Hrm, Travis fixed itself on a subsequent commit. I tweaked the tests to dump more info on test failure for Travis, but apparently whatever went wrong didn't happen again.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858317", "body": "Really? Curious, I should see if I can get that to happen. Also, GitHub needs to improve their live-updating of open pages >_<\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858432", "body": "BTW, you can use `make test_fishscript` now instead of running fish manually, that make target only runs the test.fish test. But it's better than doing it manually because it sets up the environment properly as well.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7859376", "body": "I've found the crash. Issue is #1692. I'm about to commit a fix :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7859376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7878748", "body": "This build failure is really puzzling. According to the expect log, it failed to match a pattern that definitely appears in the output buffer. Obviously a spurious error, but I can't imagine how it happened.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7878748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7885206", "body": "Makes sense. Committed as 5afd42c09750c0a5118f632d60b5a8d2cd93666b.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7885206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7933688", "body": "This test is intermittently failing on travis (I haven't seen it fail locally). The issue is the completion ends up in the opposite order, `[\"1\", \"2\"]`, than you have here.\n\nIs completion supposed to be deterministic and sorted in any fashion? I could change `expand_test()` to not care about the order, but I don't know what's correct.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7933688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7951661", "body": "Oh awesome, I was looking into doing a similar fix, but I wasn't sure how to deal with the line number issue since the end token I believe is the `\\n`, and I'm not sure how the line number for that works. I didn't know there was a version for character offset.\n\nAnother possibility I was considering was trying to get comments to show up in the parse tree (turning on the tokenizer flag asking for comments apparently isn't enough, no idea why), because then the comment could be used. But since you solved the line number issue, this version looks good.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7951661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7952023", "body": "I thought they should, but I couldn't ever get comments to appear in the results of `__fish_parse`, even after modifying the builtin to pass the flag to the tokenizer to request comments.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7952023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348544", "body": "No, that's correct. '@{upstream}' is a syntax that git understands to be the upstream of the current branch. Perhaps you don't have an upstream set?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348630", "body": "Was that all you get? In a fresh repo with no upstream I get\n\n```\n> git rev-list --count --left-right '@{upstream}'...HEAD\nerror: No upstream branch found for ''\nerror: No upstream branch found for ''\nerror: No upstream branch found for ''\nfatal: ambiguous argument '@{upstream}...HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions\n```\n\n(the quotes are required or fish will strip the curly braces).\n\nThis is not surprising. You have no upstream. The end result of this command is that `count` will contain the empty string, which you see on line 182 is treated as no upstream.\n\nIn order to set an upstream you need to pass the `-u` flag to `git push` or the `--set-upstream`/`--track` flags to git branch (see the manpages).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348642", "body": "Incidentally, adding a `--` to the end of the `git rev-list` command alters the output to be\n\n```\nerror: No upstream branch found for ''\nerror: No upstream branch found for ''\nfatal: bad revision '@{upstream}...HEAD'\n```\n\nNot that this makes any difference, since we're throwing away the error messages anyway, only the success case matters.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/14861457", "body": "Good point. I initially just wrote `See \\c set` but figured that wasn't good enough.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/14861457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632651", "body": "All these whitespace changes should be stripped out.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632673", "body": "This is removing the argument from `-m`. You need to do `\"...m:n:s\"` instead,\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632689", "body": "You're doing no error-checking here. You aren't even using the `end` variable, so why'd you bother having it?\n\nI would expect that an invalid argument passed to `-n` should emit some sort of error. I recommend looking for precedent on errors emitted for bad arguments to builtins. See the `strtol` manpage for the error behavior of `fish_wcstoi`. Also, you'll probably want to check the `end` arg at this point to make sure there is no left-over text in the argument.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632690", "body": "This comment modification is unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632695", "body": "This comment modification is also unnecessary. Functions referred to in comments typically omit the arguments. If you need to distinguish between overloads, you'd use the type name here instead, but there's no overloads of `reader_readline()`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632713", "body": "This is a bit of an odd way to count. `num_chars` is already `2` before you've even read your first character. I would suggest initializing `num_chars` to `0` instead, and then using a `<=` comparison here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632717", "body": "This is a bit of an odd phrasing. I'd suggest something like\n\n> ```\n> Read one line of input. Before calling this function, reader_push()\n> must have been called in order to set up a valid reader\n> environment.\n> If nchars > 0, return after reading that many characters even if\n> a full line has not yet been read.\n> ```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16632717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16637750", "body": "If `errno == ERANGE` this is going to be a very confusing message, because that means the argument was an integer that was simply too large (or too small).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16637750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/17218982", "body": "This should probably be `cd user_doc/html && rm -f ...`, no? That way if the `user_doc` folder fails to be created in the first place, this won't attempt to delete files in the current directory.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/17218982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/17218999", "body": "Presumably this should be \n\n``` sh\n    cd doc/latex && \\\n    make && \\\n    mv refman.pdf ..\n```\n\ni.e. don't run commands if previous ones failed. And the trailing `cd ../..` is unnecessary if you simply don't escape the newline.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/17218999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/17219259", "body": "I think this whole `if` statement is wrong. Not only is the conditional bad, but the `else` branch is also wrong.\n\nFor the conditional, you're testing the exit code of `sed`. But you're also treating the output as if it were a command, which is inappropriate. In the event that the `sed` returns 0, but doesn't delete the line, it will then attempt to execute the command `x`. Instead, to just test the exit code, you probably want\n\n``` sh\n    if echo x | sed \"/[[:<:]]x/d\" >/dev/null 2>&1; then \\\n```\n\nThat properly tests the status code without attempting to interpret the output as a command. It also suppresses any output just in case. Ideally we'd also test to make sure it output nothing, but I think that's a little overkill.\n\nAs for the `else` conditional, you're setting the vars to e.g. `'\\\\<'`. The extra backslash is unnecessary. /bin/sh does not interpret backslashes inside single-quotes. If you `echo` the variable it will, but only because the `echo` builtin interprets escapes. However, you're not passing the results to `echo`, you're passing them to `sed`, and `sed` will not want the extra backslash.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/17219259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/17834422", "body": "This documentation suggests it's based on executing commands. It's actually based on running a command-line input. This could be a command, or a builtin, or a function, or a pipeline, or it could even just error out.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/17834422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731182", "body": "This could be simplified to\n\n``` fish\nfunction __fish_vagrant_using_command\n    set -l cmd (commandline -opc)\n    set -q cmd[2]; and test \"$argv[1]\" = $cmd[2]\nend\n```\n\nNote: `set -l` for `cmd` so we don't overwrite any global/universal variables with that name.\n\n`set -q cmd[2]` is a quick way of testing to ensure `$cmd[2]` exists, and then we quote `\"$argv[1]\"` because we didn't test to make sure it exists and want to make sure we pass something to `test`; since we already verified `$cmd[2]` exists we don't need to quote it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731301", "body": "In this function, `set -q cmd[2]` won't work unless you also test `not set -q cmd[3]` since you're trying to ensure there's only two words. So we can stick with `count`. But it can still be simplified (and the `set cmd` be fixed):\n\n``` fish\nfunction __fish_vagrant_using_command_and_no_subcommand\n    set -l cmd (commandline -opc)\n    test (count $cmd) -eq 2 -a \"$argv[1]\" = \"$cmd[2]\"\nend\n```\n\n`\"$cmd[2]\"` is quoted in this case because we're passing the argument to `test` regardless of whether the first test passes. We could use `test (count $cmd) -eq 2; and test \"$argv[1]\" = $cmd[2]` but there seems to be no point.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731360", "body": "These `set`s should use `-l`, for the same reason as above: so an inherited global/universal variable of that name doesn't get overwritten.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731453", "body": "Actually the whole function can be simplified again:\n\n``` fish\nfunction __fish_vagrant_using_subcommand --arguments cmd_main cmd_sub\n    set -l cmd (commandline -opc)\n    set -q cmd[3]; and test \"$cmd_main\" = $cmd[2] -a \"$cmd_sub\" = $cmd[3]\nend\n```\n\nLooks like the `if [ $cmd_main ...` command was actually wrong to begin with, since it was using an `; and` in the condition without a `begin`/`end` block. Which is to say, it was never actually testing that the subcommand was correct.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731731", "body": "`awk` seems a tad overkill for this.\n\n``` fish\nset -l IFS \\n\\ \\t\ncommand vagrant box list | while read -l name _\n    echo $name\nend\n```\n\nGranted, `awk` is shorter, but it involves invoking an extra process, when we can easily grab the first word of each line in fishscript.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18733437", "body": "Eh, when it works. It's basically equivalent to just\n\n``` fish\nset -l cmd_main $argv[1]\nset -l cmd_sub $argv[2]\n```\n\nexcept without array out of bound index errors.\n\nBut if you need to conditionally parse out flags or suchlike, it can end up being more annoying to work with than just `$argv`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18733437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54213418", "body": "I don't remember anymore why I used the PID. I suspect I wanted to be prepared for the ability to run `make test` multiple times simultaneously (tests that create /tmp files with invariant names really should be fixed) but it's been long enough that I'm basically just guessing.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54213418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "superlopuh": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4051", "title": "enhance `fish_config` to allow duplicating and tweaking themes", "body": "I'm trying to replicate my favourite colour scheme from sublime (Cobalt), and I'm thinking of how much easier it would be if the settings were present in the fish_config web page. Precisely, if the website allowed you not just to choose from presets that you can tweak in a limited way, but to add a field for a hex code to be pasted into, and to duplicate an existing scheme.\r\n\r\nIf you think this is a good idea, usability wise, I'm happy to have a go at implementing this myself, although it would be nice if someone familiar with the project were to give me a few pointers as to where to start.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4051/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techtonik": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4049", "title": "support string slicing as in Python", "body": "I stuck for more than an hour trying to figure out how can I extract site name out of `sync-bugs.debian.org.sh` filename with fish 2.4.0\r\n\r\nIn Python I woud just do:\r\n```\r\n>>> x = \"sync-bugs.debian.org.sh\"\r\n>>> x[5:-2]\r\n'bugs.debian.org.'\r\n```\r\n\r\nIn fish?", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesla": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4028", "title": "Integrate vi mode with clipboard", "body": "I'm trying to get fish vi mode to use the clipboard clipboard meaning y and p will yank and paste from the clipboard that the rest of the system is using.\r\n\r\nI have had a look through the docs and existing issues but was unable to figure out how to do it. How can I achieve this with fish?", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "balabi0github": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4023", "title": "document limitations of fish \"default/emacs\" and \"vi\" mode editor", "body": "I am using fish, version 2.5.0\r\n\r\nI set fish_vi_key_bindings in my configure.\r\n\r\nvi mode is great. However, I found number + b is not working, for example 5b doesn't move backward 5 words. But moving back and forth is the  most frequent operation in shell.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3910", "title": "alt+arrow not working on bash on ubuntu on windows (wsl)", "body": "<!--\r\nPlease tell us which fish version you are using by executing the following:\r\n\r\n  fish --version\r\n  echo $version\r\n\r\nPlease tell us which operating system and terminal you are using. The output of `uname -a` and `echo $TERM` may be helpful in this regard although other commands might be relevant in your specific situation.\r\n\r\nPlease tell us if you tried fish without third-party customizations by executing this command and whether it affected the behavior you are reporting:\r\n\r\n  sh -c 'env HOME=$(mktemp -d) fish'\r\n\r\nTell us how to reproduce the problem. Including an asciinema.org recording is useful for problems that involve the visual display of fish output such as its prompt.\r\n-->\r\n\r\nfish version 2.5.0\r\n\r\nsystem: windows\r\n\r\nterminal: bash on ubuntu on windows (wsl)\r\n\r\nalt+right directly brings cursor to the end of line, and then alt+left or right moves by character not by word\r\n\r\nWhile ctrl+arrow moves cursor by word in default mode. However, I want to use vi mode, so ctrl+arrow is not working in vi mode\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jacobsa": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4019", "title": "vi mode: deletion with movement doesn't work", "body": "I'm using fish 2.4.0 on Linux.\r\n\r\nFrom zsh's vim mode I'm in the habit of deleting arguments by positioning myself at the start of the argument and then pressing `d t <space>`. In fish's vim mode this just moves me to the space, instead of deleting.\r\n\r\nWould it be difficult to properly support deletion with a `t` movement, as in vim?", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4019/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ericson2314": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4010", "title": "add a `command --disown` flag", "body": "In https://github.com/fish-shell/fish-shell/issues/2810 first learned of `nohup`, which actually suits my purposes better than `... & disown` due to (at least on other shells) a race if a stopped job already exists.\r\n\r\nBut `nohup` the binary commonly logs the standard streams to a file, and behavior I neither care for nor can turn off. It would nice to atomically fork off a process separate from the jobs list.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "admackin": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4002", "title": "add `string` subcommands to strip a given suffix or prefix", "body": "Pretty much every single day I find myself yearning for a dead simple way to strip a suffix (eg a file extension list `.txt`) from a string without having to resort to `string sub` (requiring maths on the string length) or `string replace` (requiring me to construct a regex if I don't want the risk of spurious matches, and also remember which order the three args go in etc).\r\n\r\nEssentially I'm looking for literally the only feature I miss from bash: the variable substitution syntax (eg `${f%.txt}`). I think this is a reasonable command to add for what is probably a very common operation for a lot of people (or maybe I'm weird). \r\n\r\n(No `basename` doesn't do what I want here \u2013\u00a0`basename a/b/foo.txt .txt` yields `foo`. And I know I could write a function to do this but maybe other people want this as well)\r\n\r\nI would propose an `string` command which you could invoke as\r\n`string stripsuff .txt a/b/foo.txt` to give `a/b/foo`\r\nAnd an analogous `string strippref` for symmetry.\r\n\r\nOr there could be just one command with a flag to choose between prefix and suffix to avoid too many subcommands.\r\n\r\nSomething like this is probably in the scope of my CPP skills so I could submit a PR if there's any interest from core devs. But maybe you're concerned about `string` getting bloated?", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/4002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "schroejahr2": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3989", "title": "ensure we allow arbitrary byte sequences in path names", "body": "fish, version 2.5.0 installed via brew \r\nos: OSX El Captain\r\nTerminal: xterm-256color\r\n\r\ntyping ls(space)(tab) results in crash. Freshly installed, no plugins.\r\n\r\ncrashes also with other commands (not just ls).\r\n\r\nThis happens just in my Downloads folder (which is quite stuffed)\r\n\r\n\r\n```\r\n\u2770schroejahr\u2759~\u2771\u2714\u227b cd Downloads/                                                                               18:34:46\r\n\u2770schroejahr\u2759~/Downloads\u2771\u2714\u227b ls libc++abi.dylib: terminating with uncaught exception of type std::length_error: basic_string\r\n\r\n[Prozess beendet]\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bfrk": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3979", "title": "darcs completion does not recognize multi-level commands", "body": "For quite some time now, darcs has subcommands that have themselves subcommands. For instance, here is the output of `darcs show --help`:\r\n\r\n```\r\nUsage: darcs show [OPTION]...\r\nShow information about the given repository.\r\n\r\nSubcommands:\r\n  contents       Outputs a specific version of a file.\r\n  dependencies   Generate the graph of dependencies.\r\n  files          Show version-controlled files in the working tree.\r\n  index          Dump contents of working tree index.\r\n  pristine       Dump contents of pristine cache.\r\n  repo           Show repository summary information\r\n  authors        List authors by patch count.\r\n  tags           Show all tags in the repository.\r\n  patch-index    Check integrity of patch index\r\n\r\nOptions:\r\n   --help          show a brief description of the command and its options\r\n   --list-options  show plain list of available options and commands, for auto-completion\r\n   --disable       disable this command\r\n\r\nUse the `--help` option with the subcommands to obtain help for\r\nsubcommands (for example, `darcs show files --help`).\r\n```\r\n\r\nIt would be nice if the generic vcs completion script builder could be extended to cover this possibility.\r\n\r\nMy fish version is 2.2.0 but the problem is also present with freshly re-created darcs completions, using ./build_tools/make_darcs_completions.fish of the current HEAD.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benmullins": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3978", "title": "Case-insensitive tab completion", "body": "I'd like to suggest an option to make tab completion fully case-insensitive. What I mean, for example, is the following situation: I have in my home directory two subdirectories, one starting with uppercase P and the other with lowercase p. For the last year or so I've been using `zsh` with oh-my-zsh, and I've grown accustomed to getting into the directory starting with uppercase P by typing `cd p`, hitting tab twice, and choosing the correct directory of the two.\r\n\r\nBesides that inconvenience, the current behavior feels somewhat inconsistent to me. If I type, for example, `cd N`, it matches directories starting with lowercase n, and `cd v` matches directories starting with uppercase V --- because I don't have directories starting with that letter in the other case. So essentially it matches case-insensitively sometimes but not always; specifically iff there are no case-sensitive matches. This confused me a fair bit when I first discovered the behavior, since I was using fish for a little while before I ran into the `cd p` issue I described, and it took me a while to realize why it was immediately auto-completing to the lowercase p directory without giving me a choice.\r\n\r\nI understand why this behavior might be undesirable to some people since Unix filesystems are generally case-sensitive, and I know that configurability is the root of all evil and all, but I found this to be something of a pain point while trying fish.\r\n\r\nfish version: 2.5.0, stock standard from Homebrew\r\nOS: macOS 10.12.4\r\nTerminal: Terminal.app\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "layus": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3952", "title": "Job handling is broken.", "body": "<!--\r\nPlease tell us which fish version you are using by executing the following:\r\n\r\n  fish --version\r\n  echo $version\r\n\r\nPlease tell us which operating system and terminal you are using. The output of `uname -a` and `echo $TERM` may be helpful in this regard although other commands might be relevant in your specific situation.\r\n\r\nPlease tell us if you tried fish without third-party customizations by executing this command and whether it affected the behavior you are reporting:\r\n\r\n  sh -c 'env HOME=$(mktemp -d) fish'\r\n\r\nTell us how to reproduce the problem. Including an asciinema.org recording is useful for problems that involve the visual display of fish output such as its prompt.\r\n-->\r\n\r\nI have an issue running the command `sudo echo lol | grep lol`. This command is not as trivial as it seems because grep is a fish function, calling `command grep --color=auto $argv` behind the scene.\r\n\r\nNow, a simple run of that command gives\r\n```\r\nlayus@klatch ~/p/fish> sudo echo lol | grep lol\r\n# Nothing happens, job is blocked. Entering ^Z.\r\nJob 1, 'sudo echo lol | grep lol' has stopped\r\nlayus@klatch ~/p/fish> jobs\r\nJob\tGroup\tCPU\tState\tCommand\r\n1\t7318\t0%\tstopped\tsudo echo lol | grep lol\r\n2\t7319\t0%\tstopped\tcommand grep --color=auto $argv\r\nlayus@klatch ~/p/fish> fg\r\nSend job 1, 'sudo echo lol | grep lol' to foreground\r\n[sudo] password for layus\u00a0:\u00a0\r\nlayus@klatch ~/p/fish> fg\r\nSend job 2, 'command grep --color=auto $argv' to foreground\r\nlol\r\nlayus@klatch ~/p/fish> \r\n```\r\n\r\nThis behavior is not changed by #3922, and may relate to #206. We see that fish starts two jobs for one user job, and that these jobs are managed separately. Digging in the source code, we can find that one job is created for the top-level pipeline.\r\n\r\n[exec_job](https://github.com/fish-shell/fish-shell/blob/c0de8afaf34471478db83b38f9994e6d937e6517/src/exec.cpp#L368-L1130) starts processes for each step of the pipeline. When it reaches `grep`, it detects a fish function and calls [internal_exec_helper](https://github.com/fish-shell/fish-shell/blob/c0de8afaf34471478db83b38f9994e6d937e6517/src/exec.cpp#L667-L668) to start its body.\r\nThat function parses the function body and starts a new job to to handle its content.\r\nThat new job is not aware of its parent context, and start with a new pgid. Fish gives that process control over the terminal, removing it from `sudo`.\r\n\r\nWhen `sudo` starts, it receives a SIGTTOU and gets stopped. Fish blocks because the grep job is still running, and unrelated to the sudo job.\r\n\r\nRunning ps to compare fish to other shells gives\r\n\r\n<pre>\r\n PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND\r\n===== ===== ===== ===== ======== ===== ===== ==== ====== =========\r\n    1   764   764   764 ?           -1 Ss       0   0:00 sshd [...]\r\n  764 31954 31954 31954 ?           -1 Ss       0   0:00  \\_ sshd: me [priv]\r\n31954 31956 31954 31954 ?           -1 S     1000   0:00  |   \\_ sshd: me@pts/0\r\n31956 31957 31957 31957 pts/0     7319 Ss    1000   0:00  |       \\_ -zsh\r\n31957  7306  7306 31957 pts/0     7319 S     1000   0:00  |           \\_ ./fish -d4\r\n 7306  7317  7306 31957 pts/0     7319 S     1000   0:00  |               \\_ ./fish -d4\r\n 7306  7318  <b>7318</b> 31957 pts/0     <b>7319 T</b>        0   0:00  |               \\_ sudo echo lol\r\n 7306  7319  <b>7319</b> 31957 pts/0     <b>7319</b> S+    1000   0:00  |               \\_ grep --color=auto lol\r\n  764  7390  7390  7390 ?           -1 Ss       0   0:00  \\_ sshd: me [priv]\r\n 7390  7392  7390  7390 ?           -1 S     1000   0:00  |   \\_ sshd: me@pts/4\r\n 7392  7393  7393  7393 pts/4     7470 Ss    1000   0:00  |       \\_ -zsh\r\n 7393  7460  7460  7393 pts/4     7470 S     1000   0:00  |           \\_ zsh\r\n 7460  7470  <b>7470</b>  7393 pts/4     <b>7470</b> S+       0   0:00  |               \\_ sudo echo lol\r\n 7460  7471  <b>7470</b>  7393 pts/4     <b>7470</b> S+    1000   0:00  |               \\_ grep --color=auto lol\r\n  764  7474  7474  7474 ?           -1 Ss       0   0:00  \\_ sshd: me [priv]\r\n 7474  7476  7474  7474 ?           -1 S     1000   0:00      \\_ sshd: me@pts/5\r\n 7476  7477  7477  7477 pts/5     7530 Ss    1000   0:00          \\_ -zsh\r\n 7477  7519  7519  7477 pts/5     7530 S     1000   0:00              \\_ bash\r\n 7519  7530  <b>7530</b>  7477 pts/5      <b>7530</b> S+       0   0:00                  \\_ sudo echo lol\r\n 7519  7531  <b>7530</b>  7477 pts/5      <b>7530</b> S+    1000   0:00                  \\_ grep lol\r\n</pre>\r\n\r\nWe can see that the current TPGID is 7319 while the sudo command has a PGID of 7318. It's status is T, which means that the process is \"stopped, either by a job control signal or because it is being traced\". Here it is because of the aforementioned SIGTTOU.\r\nWe see that other shells give the same PGID to all the subcommands.\r\n\r\nThe extra fish process is the \"keepalive fork\" used by fish. I still wonder why fish needs it while other shells do not, but it is not important.\r\n\r\nFrom a job control point of view, fish shows two running jobs in `jobs` output, while bash and zsh will show only one, even if zsh seems to distinguish between the processes of the job. (^Z was added for clarity, but does not appear in the terminal)\r\n\r\n<pre>\r\nZSH:\r\n--(layus@klatch)--> grep () { command grep --color=auto \"$@\"; }   \r\n--(layus@klatch)-->  sudo echo lol | grep lol                      \r\n[sudo] password for layus: <em>^Z</em>\r\nzsh: running    sudo echo lol | grep --color=auto lol\r\n--(layus@klatch)--> jobs\r\n[1]  + suspended           sudo echo lol | \r\n       suspended (signal)  grep --color=auto lol\r\n\r\nBASH:\r\nlayus@klatch:~$ grep () { command grep --color=auto \"$@\"; }\r\nlayus@klatch:~$ sudo echo lol | grep lol\r\n[sudo] password for layus: <em>^Z</em>\r\n\r\n[1]+  Stopped                 sudo echo lol | grep lol\r\nlayus@klatch:~$ jobs\r\n[1]+  Stopped                 sudo echo lol | grep lol\r\n</pre>\r\n\r\nWe need to make function invocation part of the same job as their context. I believe that one command line should create one job in the jobs view. That would also immediately fix the SIGTTOU issue for sudo because both processes will have the same PGID and will both have control over the terminal.\r\nBecause they are handled exctly like function, begin/end blocks would be fixed at the same time.\r\n\r\n---\r\n\r\nOn current master (version 2.5.0-259-gc0de8afa-dirty, aka c0de8afa).", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3952/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "frangio": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3948", "title": "allow `exec` to redirect file descriptors for the current shell without running a command", "body": "There's a feature of bash that allows one to set redirections for the current shell. It's used by running [`exec`](http://wiki.bash-hackers.org/commands/builtin/exec) without a command.\r\n\r\n>  If only redirections are given, the redirections affect the current shell without executing any program. \r\n\r\nI've searched and as far as I can tell this is not possible with fish.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3948/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HuwCampbell": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3938", "title": "Control characters in completions can lead to an assert", "body": "fish 2.5.0\r\n\r\nRunning this completions script (with tab characters between testc* and the word Test)\r\n```fish\r\nfunction _optbroken\r\n    for opt in 'testc1  Test this package, but process control chars \\b\r\ntestc2  Test this package, but process control chars\r\ntestc3  Test this package, but process control chars\r\ntestc4  Test this package, but process control chars\r\ntestc5  Test this package, but process control chars'\r\n      echo -e \"$opt\"\r\n    end\r\nend\r\n \r\ncomplete --exclusive --command optbroken --arguments \"(_optbroken)\"\r\n```\r\nGives\r\n```\r\noptbroken testcAssertion failed: (desc_remaining >= 2), function completion_print_item, file src/pager.cpp, line 161.\r\n```\r\nwhen pressing tab. Causing fish to crash completely.\r\n\r\nThe offending part is the backspace character '\\b', which appears to mess up the pager.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3938/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3934", "title": "commandline --cut-at-cursor doesn't work correctly with --tokenize", "body": "fish, version 2.5.0\r\n\r\nIf one typing in the middle of a word, that word is dropped when using --tokenize.\r\n\r\n`opttest --build` with the character on u becomes\r\n`opttest --b` with `commandline --cut-at-cursor`; and\r\n`opttest` with `commandline --cut-at-cursor --tokenize`\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "edouard-lopez": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3935", "title": "Create a Dash/Zeal docset ", "body": "**related:** \r\n* Kapeli/Dash-User-Contributions#1355\r\n* dan-c-underwood/fish-dash#1\r\n\r\n---\r\n\r\n[Zeal](http://zealdocs.org/) _is an **offline** documentation browser for software developers._ compatible with [Dash](https://kapeli.com/dash) docsets.\r\nI use it for various language (Python, Node, Bash, etc.) but sadly there is no Fish docset.\r\n\r\nThere is a [guide and scripts to generate docset](https://kapeli.com/docsets) based on existing doc. \r\n\r\n### Question\r\n\r\nWould you mind having a look at it and give feedback on the **feasibility?**", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3427", "title": "Add a way to toggle debug mode in Fish shell", "body": "Based from [How to toggle debug mode in Fish shell?](http://stackoverflow.com/q/39892236/802365)\n### Bash legacy\n\nIn `bash` I do `set -x` and `set +x` enable/disable the debug mode in a limited scope.\n\nI'm aware of [how to debug fish script?](http://stackoverflow.com/q/34188411/802365), but I would like to toggle debug mode in a more precise way, _e.g._ inside a function.\n### Question\n\n~~What is the equivalent of `set -x`/`set -x` in Fish shell?~~\n\nWould you mind implementing such future?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3427/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RomanSC": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3904", "title": "Esc + H in Vi mode opens manpage causing undesirable functionality", "body": "Version: fish, version 2.5.0\r\nOS: Arch Linux 4.10.3-1-ARCH\r\nTerminal: Termite\r\n\r\nSo I ran fish vi mode in  sh -c 'env HOME=$(mktemp -d) fish' and problem should be immediately reproducable. In the default env enable fish_vi_key_bindings, type out a command like 'sudo fun foo' then press Esc and H, but quickly. Fish will then open a manpage for sudo. The user must then press q, but all they are trying to do is press Esc to exit insert mode then H to move back characters as in normal vi/vim\r\n\r\nSeems to be some kind of default binding as pressing Esc then H in non-vi mode also opens a manpage for the first typed command.\r\n\r\nIs there a workaround?\r\n\r\nThanks for the awesome shell.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zanchey": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3893", "title": "Default colours don't work well on light-coloured terminals", "body": "[On the mailing list, Tassilo reports](https://sourceforge.net/p/fish/mailman/message/35720627/):\r\n\r\n> After a bit of fiddeling, I found out that the common completion prefix\r\n> is printed visibly (underlined) when I change my terminal from black\r\n> foreground on white background to white foreground on black background,\r\n> but I don't want to do that.\r\n\r\nThe problem is that a lot of the default colours set in `__fish_config_interactive` are:\r\n- suitable for dark terminals\r\n- not suitable for light terminals\r\n- not exposed in the Web config\r\n\r\nWe should fixe at least the suitability on light terminals.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3268", "title": "Improve release process", "body": "Although I don't think there's been any formal discussion, I assume everyone agrees that we should probably be doing more minor (2.x) releases rather than one every year (or less).\n\nOne thing I think would improve the situation is to make the process of releasing easier. At the moment, the [release checklist](https://github.com/fish-shell/fish-shell/wiki/Release-checklist) is reasonably straightforward, but requires a number of credentials and extra programs, notably the Debian packaging tools. It also requires a lot of cut-and-pasting from the Wiki, and I've messed this up at least once.\n\nThis issue tracks how to improve the actual process of making the release (and not the decisions about when to release, which platforms to target and so on.)\n## Goals\n- Making a release should be available to multiple committers.\n- Making a release should be as straightforward as tagging a commit (and possibly one or two other simple steps).\n- [Nightly builds](https://github.com/fish-shell/fish-shell/wiki/Nightly-builds) should exercise as much of the release infrastructure as possible.\n- Making a release should produce the following artefacts:\n  - A source tarball\n  - Verification hashes and/or GPG signatures\n  - Mac OS X `.pkg` and `.app` bundles\n  - Packages for Ubuntu (presumably through a PPA)\n  - Packages for other Linux distributions (presumably through Open Build Service)\n- The steps taken for making a release should be auditable and verifiable (though not necessarily public).\n## Current status\n- Release checklist as above, by hand, for all major releases.\n- [Nightly packaging script](https://github.com/zanchey/fish-build/blob/master/build-fish-nightlies.zsh), which runs on a VM at our centre for the 30-minutely \"nightly\" builds.\n\nThat is, there are two processes and they are kept more-or-less in sync manually.\n## Options\n\nThese are the options I've looked at so far - if there's something I've missed, or an alternative, your insight would be appreciated.\n### Travis CI\n\nWe already use Travis to run continuous integration (CI), so why not use it for continuous deployment (CD)?\n\nAdvantages:\n- Free as in beer.\n- Working already with the fish trunk.\n- Easy to hook up with [deployment scripts](https://docs.travis-ci.com/user/deployment/script) with useful features such as [deploy only on tags for certain branches](https://docs.travis-ci.com/user/deployment#Conditional-Releases-with-on%3A).\n- Build configuration is maintained within the repository and thus is available for all developers to work with.\n\nDisadvantages:\n- Works only with GitHub; although it looks like we're staying for now, it's not a portable solution.\n- More generally, is not open source and does not run under our control. This is an issue because there is no way of fixing faults should they occur (like https://github.com/travis-ci/travis-ci/issues/6120).\n- Public records of all builds. This is partly an advantage as it allows anyone to get involved with the release process. However, as part of the build process we will have to upload secret keys and/or passwords to the build environment. Although these can be encrypted, if there is a mistake in the build script or in Travis' code, the encrypted information may become public knowledge and then we are in trouble.\n- No Windows build support yet - although we don't ship packages for Cygwin or WSL, it would be nice to have integration testing on one of these platforms.\n- Likewise, no support for building on a wider variety of Unix or Linux platforms.\n### Jenkins\n\nI've installed [Jenkins](https://jenkins.io/) and have had a bit of a play.\n\nAdvantages:\n- Open source.\n- Good GitHub integration, but also good integration with other services.\n- With the new \"pipeline\" build, Build configuration is maintained within the repository and thus is available for all developers to work with.\n- Some good credential management tools, ensuring that passwords aren't in the environment except exactly when needed (although no such luck with GPG keys, yet).\n- Very slick web-based UI out of the box.\n- Out-of-the-box support for interactive builds (where some information, like the branch to be published to, can be taken from the UI - the build waits for this).\n- Supports multiple platforms - almost anything, really.\n\nDisadvantages:\n- Clearly aimed at Java developers; lots of small nits for using it with C++.\n- Build/deployment scripts have to be written in Groovy, an unusual (to me) DSL.\n- Requires a server to be available, which may be an issue in the long term.\n- Subjectively, with Jenkins, easy things are easy but hard things are super hard.\n### Buildbot\n\nI haven't used Buildbot in anger for a few years, but it seems like the other popular alternative.\n\nAdvantages:\n- Open source.\n- Build scripts are written in Python, which is good for my sanity.\n- Aimed at extensibility (also a disadvantage).\n- Supports multiple platforms - again, almost anything.\n- Good GitHub integration, I think, or at least easy to make it work.\n\nDisadvantages:\n- Much more of a toolbox approach than the other services; getting started requires writing a lot more code.\n- At least some of the build configuration is maintained outside the repository.\n- Requires a server to be available, which may be an issue in the long term.\n\nThe Buildbot approach to credentials that should be kept secret is not clear.\n### Other options\n\nI have considered, but not particularly investigated, GitLab CI, which seems to be making great strides ahead.\n\nMaintaining status quo is reasonable for now, but the release process has a rather low bus factor and I'd like to see that change.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3268/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3000", "title": "don't let users accidentally create a function with the name of a builtin", "body": "Fairly regularly, somebody writes a function called `test`, and then their entire environment spews garbage and often becomes unresponsive, as many shipped functions and prompts expect `test` to be the builtin (or at least behave the same way).\n\nOptions include:\n- banning a `test` function\n- converting all shipped functions &c to use either `builtin test` or `[`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2852", "title": "Undefined behaviour sanitisation", "body": "Running Clang's undefined behaviour sanitiser against fish (revision 2a4a539) reveals some undefined behaviour, mostly around the use of function pointers:\n\n```\nTesting iothreads\nsrc/iothread.cpp:135:30: runtime error: call to function test_iothread_thread_call(int*) through pointer to incorrect function type 'int (*)(void *)'\nsrc/fish-shell/src/fish_tests.cpp:526: note: test_iothread_thread_call(int*) defined here\nsrc/iothread.cpp:315:34: runtime error: call to function test_iothread_main_call(int*) through pointer to incorrect function type 'int (*)(void *)'\nsrc/fish_tests.cpp:519: note: test_iothread_main_call(int*) defined here\n    (335.21 msec, with max of 64 threads)\n```\n\n```\nTesting Ctrl-C cancellation. If this hangs, that's a bug!\nsrc/builtin.cpp:4114:18: runtime error: call to function builtin_true(parser_t&, io_streams_t&, wchar_t**) through pointer to incorrect function type 'int (*)(parser_t &, io_streams_t &, const wchar_t *const *)'\nsrc/builtin.cpp:3971: note: builtin_true(parser_t&, io_streams_t&, wchar_t**) defined here\n```\n\nIf these can be fixed or ignored, then we can turn on UBSan in the Travis builds.\n\n```\nTesting scenarios that should produce no autosuggestions\nsrc/iothread.cpp:359:16: runtime error: call to function complete_load_no_reload(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >*) through pointer to incorrect function type 'int (*)(void *)'\nsrc/complete.cpp:1142: note: complete_load_no_reload(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >*) defined here\n```\n\n```\ncd tests; ../test/root/bin/fish test.fish\nsrc/builtin.cpp:4114:18: runtime error: call to function builtin_source(parser_t&, io_streams_t&, wchar_t**) through pointer to incorrect function type 'int (*)(parser_t &, io_streams_t &, const wchar_t *const *)'\nsrc/builtin.cpp:3330: note: builtin_source(parser_t&, io_streams_t&, wchar_t**) defined here\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/020fe5ccdfbbc147977ae11803816475e9fef763", "message": "[cmake] fix installation of translations"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/164108d0a9e6ac1ff68661a06b2309d0560b959d", "message": "[cmake] mark manual as an optional component for install"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/9c7909c0069033b53297e88c8b0ebc893410bd44", "message": "[cmake] install manual and changelog"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7b38d0b7cbd6bd75272a94fe8c85964bf4d5bd0c", "message": "[cmake] match CMake project name to autotools"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/1231d358debda85f781c124464672cf3ca218103", "message": "[cmake] remove duplicate installation"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/0a4883a6b861e81bdd87fe830e0bad06008a8130", "message": "Xcode build: use the same files as the CMake build for versioning\n\nCloses #4671."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/b6202c3c86a0bf9cf73e010533993bff31d3a198", "message": "[cmake] actually use libintil headers/libraries if detected\n\nCloses #4663."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/38c4437d79e9a6b4e2b77cdec320b7caac3affa1", "message": "travis: add a CMake build\n\nUses an out-of-tree build; in-tree builds do not work.\n\nNo make uninstall test (CMake does not support this)."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8875f0ad7663a25b51d41ae556bb88320ab70d0c", "message": "[cmake] make building documentation optional\n\nAdd a BUILD_DOCS option which is contingent on Doxygen being present,\nand only build the documentation if this is enabled."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8eb0608b00fd35e0aa882f1fdf6767ecb9f4cbd3", "message": "[cmake] make build_lexicon_filter part of DocTargets only"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/088fc6003b7940a09fe5bda688a86eefbc730484", "message": "[cmake] use appropriate configure policies where possible"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/85131452fafb2827c4dee2cb06cbc474ef417171", "message": "apt: add completions for policy\n\nCloses #4652."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/af5869886b544d2e4a84c03941d75ebc125b2b8d", "message": "travis: use default OS X image"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/fe4354e5ede800aba3b7daa5a6183d9319bde540", "message": "Merge branch 'Integration_2.7.1'"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/b680db8ce683db285c750ae5af534c97d08b1b40", "message": "Bump version for 2.7.1"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/cd5c40ed9c7213e8b1638e923de9613d296c90c1", "message": "CHANGELOG: update for 2.7.1"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/fd10c29211dd1bf6780e690975414066f9a1e15c", "message": "Disable __update_cwd_osx for iTerm.app\n\nFixes #4521.\n\n(cherry picked from commit 5faa425df1afe9bb713634bbdbec1e6650eecaf5)"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3a10e76874884c81f68067c3c1e92d42c0d58d2e", "message": "CHANGELOG: drop bare variable note\n\nThis behaviour was never in a released version.\n\n[ci skip]"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/834f344f1d55c2c328a7de42138276649b69cb12", "message": "build_documentation: postprocess regular expression uses command name\n\nThe previous regular expression only matched the `abbr` text and was\nused in testing."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/69342066f4ecf7a6069d65449a553eb130471025", "message": "build_documentation: reduce unnecessary copying, sed and perl\n\nThis saves about a second, which is not a lot, but dropping the build\ndependency on perl is helpful."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/e98ecf9cfa93bdc80ccaa20743bad52fbaac1ea9", "message": "build_lexicon_filter: drop which dependency"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7faa6e773fe4f3ae475d3bda9f4ce3e6038fe398", "message": "cmake: add SED to build_lexicon_filter"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/b7fc3ee22e4f8abc2f1b177219f5467228b929dc", "message": "build_lexicon_filter: pass sed binary as command line argument\n\nEnsures toolchain is consistent throughout; fixes documentation builds\non Homebrew."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c8c129f7a5c6a99e637e52ffda22077aefbc06bf", "message": "build_lexicon_filter: remove erroneous variable brought across from Makefile"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/77cd0c1bf8451d93b16ca515041f31ab5dc68b87", "message": "Merge branch 'Integration_2.7.0'"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f12164f7c76a786bf3fa846962f4cc2b9912335c", "message": "Bump version for 2.7.0"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/e8f0ec0009c4ffe2a3672128d6e047a1f6af126c", "message": "CHANGELOG: update for 2.7.0"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/ce46c80492d518aa85f2583f6cc60752acfbe831", "message": "cmake: restore check for fixed-args tparm (\"Solaris tparm kludge\")"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/64194d02fc3e309abfb70d360fe2235315685976", "message": "cmake: correct configure check for _nl_msg_cat_cntr"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/32714021f57857e33a4e5d7aa1341b91c2cd00ef", "message": "cmake: add gettext support"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7e24c14f8cf5debccb6e13f59518c9cdb0abfa1d", "message": "cmake: print feature summary"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8543a4061edf50972fc9726a98b4d52217d94c56", "message": "cmake: fix check for /proc/self/stat\n\nUsing the result of the exists test directly always passes."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/af93db668c77dfea8d8b778dd6477f4be5e50d86", "message": "cmake: fix check for sys/sysctl.h on FreeBSD"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f5209deacc9a24fa2c4a1f020558f704f08a03ae", "message": "cmake: update CheckIncludeFiles to enable C++ checks"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/2f289ce0970a082b46384b207df69585b6d7174b", "message": "cmake: drop unneeded checks\n\nMuch cruft brought across from autoconf is removed."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/57bfca17dc2af82a5b6278bb16c0b680fe8fd198", "message": "cmake: make WINSIZE checks work"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/a8938bcb4d51b8c445c1a95c37c9e2d424b9405b", "message": "cmake: check for stat struct items correctly"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/68da7ab8227a58778eaae94494c2fbac61945d75", "message": "cmake: use C++ rather than C checks for all checks\n\nDisables C language for fish project to catch errors."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8f7d68ee3eb04ba78edf5c90c8d3b4d64dc2f656", "message": "cmake: use correct syntax for CheckStructHasMember\n\nCorrectly detect the dirent member d_type on systems that have it."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/de9f03431873ad0f1a0002e12423be530219c0f6", "message": "cmake: minimum required cmake version should be first line in file\n\nSee note in https://cmake.org/cmake/help/v3.8/command/project.html"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/396faebc08824d03c6f74e9971d2311e3bb70a26", "message": "Move CMakeFiles to cmake\n\nMakes in-tree (ie `cmake .`) builds work."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/ea5f3925ea8fe1ab46c58b81e8809e641a7fe182", "message": "drop USE_GETTEXT macro and use only HAVE_GETTEXT\n\nThere is no clear rationale for the two separate macros."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d02011c57acb88563a8b1e57c41c9efbf3de2a2f", "message": "cmake: fix typo causing conf.d to be missed in install phase"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/57bd1227192b440656ca863a70e208683e5b31bb", "message": "CMake: fix prefix paths for extra directories"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f5514543e4a8ddbec1c8db4aac0f69139d6dae13", "message": "Bump version for 2.7b1"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/6a878e45e74c8ce8edaa4a1a2489c60d964e6c93", "message": "CHANGELOG: updates to 2.7b1"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3bd2caf682eb7d5c78ce562f0827529a5ce877d1", "message": "Update tests to match behaviour from 848db48af5e3badf\n\n(cherry picked from commit d5e5878f6d17dd33353c3835d19204e18e3e4927)"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d5e5878f6d17dd33353c3835d19204e18e3e4927", "message": "Update tests to match behaviour from 848db48af5e3badf"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/1f51bdbb0cd29c72cf993448847cd56a22a155be", "message": "Improve warning message when exiting with active jobs\n\nWork on #4303.\n\n(cherry picked from commit 848db48af5e3badf4ee26e3d209607418ea553f6)"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/007a62cab68882cb7e97231fd0348cd9d5014469", "message": "warning message when exiting with active jobs uses PID of first process, not PGID\n\nWork on #4303.\n\n(cherry picked from commit eb081481c64c34b3a048ad28aa9161f5f8b2bfcf)"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/848db48af5e3badf4ee26e3d209607418ea553f6", "message": "Improve warning message when exiting with active jobs\n\nWork on #4303."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/eb081481c64c34b3a048ad28aa9161f5f8b2bfcf", "message": "warning message when exiting with active jobs uses PID of first process, not PGID\n\nWork on #4303."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/da2201d69aba3671952005929e8ce4c2218d79ff", "message": "docs: fish_history can be set to the empty string"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/9adb3492f9da493f083cb056bdecd6fd645a6fd2", "message": "docs: fish_history can be set to the empty string"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f9eb826d5b9f8dac6399486eda70225c8bfe8153", "message": "Restore previous output of status current-{filename,function}\n\nCloses #4499.\n\nPartial reversion of 30368d5526d591df44127624f5c92c6b2a43c0d3.\n\n(cherry picked from commit b34b0cf1e378ec138d55c8bb3d31da259865fbb5)"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/dbc15f8046af2ac2b2296c43ce17f2d9a3056cf0", "message": "docs: move fish_history entry to correct section and reword\n\n(cherry picked from commit 7fe7582329fdae8b1e0bcaa0a3b3dd4ce5a3bc60)"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/b34b0cf1e378ec138d55c8bb3d31da259865fbb5", "message": "Restore previous output of status current-{filename,function}\n\nCloses #4499.\n\nPartial reversion of 30368d5526d591df44127624f5c92c6b2a43c0d3."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7fe7582329fdae8b1e0bcaa0a3b3dd4ce5a3bc60", "message": "docs: move fish_history entry to correct section and reword"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6303849", "body": "I experienced the same problem on Debian 6.0.5 (with Linux kernel 3.1.10) - and based on comparison of strace(1) output the program (and fishd) was also sitting in the bottom of a select loop.\n\nUnfortunately it went away when I rebuilt with CXXFLAGS=-g, and a totally clean install (blowing away install prefix, source directory and preferences) has failed to reproduce it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6303849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6382294", "body": "Incidentally this issue means that fish does not work until it is installed, so you can't run it from the build directory unless you have an existing install. This confused me a bit (and led to me believing I had reproduced #101) so might be worth documenting in the INSTALL or README.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6382294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3240469", "body": "Incidentally - the Makefile in the tarball depends on build_tools/make_documentation.sh\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3240469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3240945", "body": "(if you run make distclean and then make.)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3240945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3865466", "body": "Also needs completions updated\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3865466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4084171", "body": "Thanks @siteshwar, fixed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4084171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4165192", "body": "@lawrenceakka - I've added those now.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4165192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4736675", "body": "Should be fixed by e1608362d0d by @GlitchMr.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4736675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5520819", "body": "What is `share/doxygen_sqlite3.db` and do we need it?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5520819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5520907", "body": "I think the connection tuple `(\"localhost\", PORT)` will listen on `::1` and/or `127.0.0.1` per the documentation for the socket library in Python, but I haven't tested it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5520907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6332903", "body": "The usual comments about locking on Linux:\nhttp://0pointer.de/blog/projects/locking.html\nhttp://0pointer.de/blog/projects/locking2\nI don't think these are showstoppers but caution is, of course, required. `flock` is almost certainly better than `fcntl`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6332903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8234228", "body": "This broke the tests on my system:\n\n```\ncd tests; XDG_CONFIG_HOME=\"$PWD\"/tmp.config ../fish test.fish\nfish: Job 1, \u201cmake test\u201d terminated by signal SIGIO (I/O on asynchronous file descriptor is possible)\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8234228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496055", "body": "Great, I never did get around to filing an issue on this.\n\nIf there's no `XDG_RUNTIME_PATH`, does this fall back to `~/.config/fish`? Would it be better to readd the `check_runtime_path` function from 2.1.1?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496696", "body": "The reason that I'm dubious about using `$HOME` is that the XDG docs specifically call out `$XDG_RUNTIME_PATH` as a path that supports things like FIFOs. There are some stories floating around the web of NFS servers that don't let you host FIFOs, but I have not been able to find any in mainstream use. Samba-mounted home directories don't support FIFOs, though, so that might be a good reason to do it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496704", "body": "(Conversely, I think it's fine to use `$HOME` for security-sensitive sockets etc., because if other uses can write to your home directory you are already in trouble.)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8497382", "body": "Licensing added to license.hdr in 7c2a420\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8497382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9102138", "body": "Good point. What do you think, @ridiculousfish - keep it or back it out?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9102138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9353141", "body": "Whoops, sorry.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9353141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9366950", "body": "see #1443\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9366950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/10486763", "body": "Are you using a master build of fish? `type -q` was only added in 6f7a7459c which is not in a release yet.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/10486763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11298294", "body": "I've made that change in 1c99ef5 on the 2.2.0 branch.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11298294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11306048", "body": "Is this worth cherry-picking for 2.2.0?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11306048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11319574", "body": "Cherry-picked as edf6a951ee3.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11319574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11933660", "body": "fish 2.1.2 was a bugfix release only. The new code is in the upcoming 2.2 release.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11933660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12356376", "body": "Should be fixed in 30ea4fc - thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12356376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12357769", "body": "Fixed with d3a0372e, thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12357769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12410715", "body": "deheader disagrees enormously with iwyu on the importance of e.g. assert.h. I merged the iwyu branch; it will need backing out if we take the deheader branch.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12410715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12411353", "body": "assert.h - I think maybe it got interpreted as an html tag?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12411353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13231161", "body": "The commit 85c8bab417969e69f2bd424c92eb7da64792a17b should still contain your name as the author of the original commits, but it might be worth noting that this implementation is copyright by you and licensed under the fish license in the header if you would like?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13231161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13231559", "body": "@msteed - not sure if you get notified of replies.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13231559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13278509", "body": "Why not something like \"Adjacent lists and variables are expanded as Cartesian products.\"?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13278509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17268795", "body": "So, to confirm, all versions of openSUSE except 1315 use the hostname package?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17268795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17272081", "body": "OK, I'm going to need to try and be clear here if I'm going to make any headway.\n\nWhat versions of openSUSE ship the hostname binary as part of the `hostname` package? How can these versions be specified in the RPM file?\n\nWhat versions of openSUSE ship the hostname binary as part of the `net-tools` package? How can these versions be specified in the RPM file?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17272081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17285232", "body": "OK, I've merged that for the 2.3 branch and will merge back to master soon.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17285232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17593348", "body": "I am very scared by this - can we not get away with `rm -f $tmpname; rm -r $tmpdir`?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17593348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17656577", "body": "https://github.com/fish-shell/fish-shell/wiki/Committing\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17656577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17665338", "body": "@Freso, we generally rebase commits anyway - our committing procedure is https://github.com/fish-shell/fish-shell/wiki/Committing#merges\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17665338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17745449", "body": "I'm still not quite happy with the wording here - @krader1961 do you mind if I change it?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17745449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7778092", "body": "Is there a reason to use a variable rather than a function? It would make the code below clearer and faster.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7778092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7778112", "body": "Where possible, please use `sgrep` rather than `grep` in shipped functions.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7778112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7778179", "body": "I know this is in the mainline code, but I wonder if it would be better to only list `/etc/init.d` only if the other programs are absent.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7778179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9369585", "body": "I suggest `if begin; test -f /etc/SuSE-release; and test -f /usr/bin/command-not-found; end` (path may need checking).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9369585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9369869", "body": "Yikes, sorry, I should have made this `type -p command-not-found`. I'll do that in the merge.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9369869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/8687546", "body": "This change breaks completion for (e.g.) `git rebase` with more than one branch as an argument.\n\nI think you'd be better off leaving this alone, and instead using `__fish_git_using_command stash; and __fish_git_stash_using_command apply`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/8687546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/8687547", "body": "This function is never called as far as I can see.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/8687547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9589034", "body": "style point: this function would be better off as `__fish_git_complete_stashes`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9589034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9589080", "body": "This worked better for me as `if [ (count $cmd) -lt 3  -a $cmd[2] = 'stash' ]; return 0; end; return 1`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9589080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9626162", "body": "There's a bug in if statements (#1297), not to worry. (`-lt` has the advantage of working if there are more than 3 arguments, but the same could be done to your existing test with `-ge` rather than `-eq`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9626162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9624571", "body": "How fast is `pacman -Sl`? For comparison, `rpm -qa` takes about 900 msec hot and cold, `apt-cache pkgnames` is more like 40 msec cold and less when hot.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9624571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9625566", "body": "Yikes. Is that hot and cold? 400 msec is probably above the cutoff for interactive use, which I would peg about 200 msec. Perhaps caching it in the same manner as rpm is wise.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9625566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9653307", "body": "It doesn't need to print package versions. How fast is the output of `time pacman -Ssq > /dev/null`?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9653307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9712817", "body": "OK, so there's not a huge amount of difference which is not really a surprise. I think it might be worth caching at that speed as is done for rpm. Any other opinions?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9712817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9743648", "body": "I don't think there's a huge amount of science behind it, but the `rpm` command runs in 900 msec and the `yum` command takes 18-20 seconds on my hardware.\n\n`pacman` is on the same order of magnitude as `rpm`, so you could cache for 5 minutes. The cache update runs in the background anyway, so there's no direct hit from it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9743648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380282", "body": "Looks incomplete?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380604", "body": "It might be better to make this a function (`__fish_print_systemctl_units`?) and to invoke it dynamically with command substitutions.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380679", "body": "It might be better to make these functions and to invoke them dynamically. That way, if the list of packages is updated, the completions will update too. Have a look at `__fish_print_packages`, too.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11381628", "body": "Fish only sources the file the first time that completions are required for that command, or if the file changes.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11381628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11382096", "body": "Weird; it doesn't for me in 2.1.0.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11382096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/12950847", "body": "Yikes! I think this opens up a symlink attack on multi-user systems (which the mktemp invocation above deliberately tries to help us avoid).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/12950847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/14323811", "body": "Why set `$repo_type` if you don't use it?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/14323811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/14861442", "body": "Because of the variety of ways for reading the same documentation, I think we prefer \"see the documentation for `set`\" or something similar.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/14861442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/15627712", "body": "Should be fixed now.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/15627712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18505753", "body": "`sysctl -a -N ^/dev/null` is probably more useful: `--all` is a Linux (procps) extension, `-N` lists names and makes the `sed` call redundant. BSD sysctl also supports `-d` for descriptions, but this is incompatible with the procps version sadly.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18505753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/23357925", "body": "This will not perform as intended. See #1428 and #150.\n\nTry either:\n\n``` fish\nif begin; [ $argv[1] = $cmd[2] ]; and [ $argv[2] = $cmd[3] ]; and [ $argv[3] = $cmd[4] ]; end\n```\n\nor\n\n``` fish\nif [ $argv[1] = $cmd[2] -a $argv[2] = $cmd[3] -a $argv[3] = $cmd[4] ]\n```\n\n(this may need some testing as I'm not certain about the precedence order of operations)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/23357925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35479931", "body": "Why does this prompt treat login shells differently?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35479931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35479934", "body": "Is this needed? I can't see that it gets tested anywhere. Also, the variable name is invalid.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35479934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35480496", "body": "This probably should be `test -n \"$SSH_TTY\"` or similar.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35480496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38281646", "body": "Is there supposed to be an argument here?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38281646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38281675", "body": "Sorry for the late review, but I'm not sure this is actually required; `set_color` should detect a non-256-colour terminal and adjust behaviour accordingly - although I haven't tested it so I might well be wrong.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/38281675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39248198", "body": "I think it is worth expanding on this.\nHow about:\n\"Functions are loaded on-demand, which means that saved functions containing `<a href=\"index.html#event\">event handlers</a>` are not installed when a new shell is started. To activate an event handler for every new shell, add the whole function to your `<a href=\"index.html#initialization\">shell initialization file</a>`.\"\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39248198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39248226", "body": "As above - I think an alternative approach should be specified\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39248226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39250404", "body": "I think this could be clearer.\n\n\"Functions which are event handlers should be added to the `<a href=\"index.html#initialization\">shell initialization file</a>` to be active with every new shell; as saved functions are `<a href=#syntax-function-autoloading>autoloaded on-demand</a>, the event handlers are not registered in saved functions until the first time they are sourced or executed.\"\n\nHmm, I'm not sure that's clearer...\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39250404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39252509", "body": "How about:\n\n```\n\\fish{synopsis}\nprintf FORMAT [ARGUMENT ...]\n\\endfish\n\n\\subsection printf-description Description\nprintf formats the string FORMAT with ARGUMENT, and displays the result.\n\nThe string FORMAT should contain format specifiers, each of which are replaced with successive arguments according to the specifier. Specifiers are detailed below, and are taken from the C library function `printf(3)`.\n\nUnlike `echo`(link), `printf` does not append a new line unless it is specified as part of the string.\n\nValid format specifiers are:\n- `%%d`: format the argument as a decimal integer\n(etc. etc.)\n\nIf a format specifier is not appropriate for the given argument, an error is printed. For example, `printf '%d' \"102.234\"` produces an error, as \"102.234\" cannot be formatted as an integer.\n```\n\nI think the escape stuff is fine.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39252509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47329932", "body": "This is pretty clever, but we'll have to watch the case where those wildcards expand to nothing once #2394 is changed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47329932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47330094", "body": "We need to keep Homebrew in view here - these should all be separate configure-able variables with sensible defaults. I'm happy to fix that later as part of #2113.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47330094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48092741", "body": "The problem is that if your completions run `killall --version` when they are loaded, then just typing `killall <TAB>` is enough to at best destroy your session and at worst hang the system.\n\n`if test (uname) = SunOS` should do the trick.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48092741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53925886", "body": "I don't think this section needs to be much more than `make test`, now, does it?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53925886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53926275", "body": "I think we can nuke the shebang entirely?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53926275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53926382", "body": "Should this use a temporary directory under the test_root?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53926382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53926522", "body": "Is there a reason you've changed this section? @kballard might be able to shed some light on the initial rationale.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/53926522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54044726", "body": "Yes, that sounds good. Perhaps it's time to collect all the test_\\* directories in order to avoid cluttering the root directory?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/54044726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/57980189", "body": "Did this get accidentally reflowed?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/57980189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/60838565", "body": "Any reason not to use `AS_VERSION_COMPARE` which is built in? See the Doxygen check.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/60838565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "nhooyr": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3861", "title": "abbreviations are not mentioned in the tutorial or documentation", "body": "They are only mentioned in the commands reference. I've been using fish for several months, have read all of the tutorial and http://fishshell.com/docs/current/index.html but I had absolutely no idea that this immensely useful feature existed.\r\n\r\nIt should really be mentioned in the tutorial or docs.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3741", "title": "blinking cursor with fish_vi_cursor in iTerm2", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*: 2.4.0\r\n\r\n**OS/terminal used**: iTerm2 3.0.13\r\n\r\nIn #3696, I mentioned that the cursor does not blink in insert mode with fish_vi_cursor.\r\n\r\n@faho was unable to find the documentation on blinking for iTerm2. Neovim handles this fine, so perhaps @justinmk knows.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3707", "title": "completion ignoring . prefixed arguments", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [ ] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*: 2.4.0\r\n\r\n**OS/terminal used**:  macOS 10.12.2 iTerm 3.0.13\r\n\r\ncompletion ignores arguments that start with `.`. I think this is to ignore dotfiles but I have a command that can be completed with a file that starts with `.` and it should not be ignored. Is it possible to disable this?\r\n\r\nwatch https://asciinema.org/a/9wnu3jy22hxfjf4au18m7ob29", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3699", "title": "fish_vi_key_bindings doesn't call fish_user_key_bindings", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*: 2.4.0\r\n\r\n**OS/terminal used**: macOS 10.12.2 iTerm 3.0.13\r\n\r\nfish_vi_key_bindings doesn't call fish_user_key_bindings at the end so reloading my config.fish causes my keybindings to disappear. I can manually call `fish_user_key_bindings` in my config.fish but it'd be cool if it was automatic.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3696", "title": "fish_vi_cursor not doing anything", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*: latest master, more specifically, https://github.com/fish-shell/fish-shell/commit/89e48ba0b3b2ff0f254443117483814402f8f6cd\r\n\r\n**OS/terminal used**: macOS 10.12.2 and iTerm 3.0.13\r\n\r\nWatch: https://asciinema.org/a/152yxzpdz3m9igtqz8q5ags4x\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3693", "title": "tab completion glitch with multiline prompts", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*: 2.3.1\r\n\r\n**OS/terminal used**: macOS 10.12.2, iTerm2 3.0.13\r\n\r\n1. `sh -c 'env HOME=$(mktemp -d) fish'`\r\n2. `funced fish_prompt`\r\n3. Append `echo -e \\n` at the end of the function\r\n4. Type some gibberish into the command like `dsaiojadsiojdsiaolzmxnwiewrti`, make sure it is enough text so that it extends past the prompt above.\r\n<img width=\"260\" alt=\"screen shot 2017-01-02 at 3 33 14 pm\" src=\"https://cloud.githubusercontent.com/assets/10180857/21595878/dee99970-d100-11e6-84cc-5684b01d67eb.png\">\r\n\r\n5. Press tab to complete.\r\n<img width=\"255\" alt=\"screen shot 2017-01-02 at 3 33 25 pm\" src=\"https://cloud.githubusercontent.com/assets/10180857/21595875/daad2f52-d100-11e6-94b6-7b79b0d2b395.png\">\r\n\r\nif the prompt is single lined, the above glitch does not occur.\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3693/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3458", "title": "docs: unable to find the reference in cartesian products section", "body": "In https://fishshell.com/docs/current/index.html#cartesian-product\n\nLast little bit says \"The dangers noted in the last example above can be avoided by wrapping the variable in double quotes instead of braces (echo \"$b\"word).\". What dangers noted in the last example?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Selora": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3843", "title": "`builtin history delete` should support same search options as the function", "body": "**fish version installed **:\r\n fish, version 2.5.0\r\n\r\nCurrently, the only way to remove history entries non interactively is with an exact match. It would be nice to add a --force to flush all entries with the 'prefix' or 'contains' flag.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danielcompton": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3830", "title": "git checkout tab completions should show local branches first", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.5.0](/fish-shell/fish-shell/releases/tag/2.5.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*:\r\n\r\n```\r\nfish, version 2.5.0\r\n```\r\n**OS/terminal used**:\r\n\r\nmacOS 10.12.2 (16C67)\r\niTerm2 Build 3.0.10\r\n\r\nTalk about the the issue here.\r\n\r\n## Reproduction steps\r\n1. Develop on a repo with many remote branches, but only a handful of local branches\r\n2. Type `git checkout <tab>`\r\n\r\n<!-- Hard to explain? Post a screen recording on asciinema.org then link it here -->\r\n\r\nhttps://asciinema.org/a/7xgdf4fcji8icta5vcjd6tqyf\r\n\r\n## Expected\r\n\r\nThe local branches in my repo that I see when I run `git branch` are sorted to the top of the completions list (sorted by recency of use, recency of commit, or alphabetically, not sure exactly), with remote branches sorted below, and tags at the bottom.\r\n\r\n## Actual\r\n\r\nBranches are sorted alphabetically, with remote branches sorted together with local branches. Tags are sorted at the bottom.\r\n\r\nI'm sorry if this is a duplicate issue, I had a look and couldn't find anything covering this specific case. Relates to #361, #675, #2628.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3830/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2705", "title": "Tab completion doesn't work with an `; and`", "body": "I get completion for homebrew if I run \n\n```\n$ brew up<TAB>\nupdate  (Fetch newest version of Homebrew and formulas)\nupgrade                        (Upgrade outdated brews)\n```\n\nbut it doesn't work if I type\n\n``` sh\n$ echo \"\"; and brew up<TAB>\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2705/reactions", "total_count": 4, "+1": 2, "-1": 1, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amosbird": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3823", "title": "Add string tokenize builtin command", "body": "Output tokenized history commands. This is useful for tools like fzf to do further filtering and completion.\r\n\r\nimplemented in #3818 .\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adymitruk": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3812", "title": "git config options not tab completing", "body": "git config is one of the more frustrating commands to get right. At the very least, it should show --system, --local and --global. But then, it should also auto complete all possibilities like git config log.decorate and core.autocrlf", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thalesmello": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3801", "title": "enable editing of arrays using vared", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*: fish, version 2.4.0-476-g2b13472\r\n\r\n**OS/terminal used**: iTerm2\r\n\r\nIf I try to edit an array using vared, such as `vared PATH` I get:\r\n\r\n```\r\nvared: PATH is an array variable. Use vared PATH[n] to edit the n:th element of PATH\r\n```\r\n\r\nIt would be nice to be able to interactively edit in existing array.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3801/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Phidica": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3800", "title": "Control sequence escapes \"\\cx\" are neither highlighted nor expanded correctly", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\ntl;dr - Bugs are in bold\r\n\r\nThe [documentation](https://fishshell.com/docs/current/index.html#escapes) says that \"\\\\c*x*\" where *x* is \"a letter of the alphabet\" is an escape that will produce a control sequence. This is not the behaviour that `fish` actually has, though; rather, `fish` behaves much closer to what one should expect as a means to produce control sequences. That's good, but it means that first of all **the documentation needs updating to explain that other characters besides alphabetic ones are accepted**\r\n\r\nControl sequences 101\r\n=====================\r\n\r\nA brief overview of how control sequences work to save everyone else some time: they are a way to use printing characters from the second half of the standard ASCII table to type nonprinting characters from the first half of the standard ASCII table. With reference to [a handy visual](http://www.asciitable.com/index/asciifull.gif), pressing control and a character from decimal 63 ('?') to decimal 96 ('`') will create a character from decimal 127 ('DEL') to decimal 32 (' ') wrapping around through decimal 0 ('NUL'). The characters from decimal 97 ('a') to decimal 126 ('~') are a secondary way to create the characters from decimal 1 to decimal 30. There is no such thing as control sequences for the characters from decimal 33 to decimal 62; they cannot be used in control sequences, nor acquired via the use of other control sequences\r\n\r\nCurrent behaviour\r\n=================\r\n\r\n`fish` version: 2.4.0\r\n\r\n1. \"\\\\c\" followed by any character from decimal 64 ('A') to decimal 126 ('~') is expanded as an escape, but under no circumstances does *highlighting* extend past the \"\\\\c\". This leads to trouble when one tries to run, for instance, `echo \\c[`, which is meant to be a valid control sequence escape but the highlighter picks up the open square bracket and refuses to let the command execute. Tricking `fish` by running `echo \\c[.]` reveals that \"\\\\c[\" *was* turned into a control sequence (rendered with a Unicode square, for me), as it should have been! So, **control sequence highlighting is not working as required**\r\n\r\n2. The '?' and '@' characters cannot be used in control sequence escapes. \"\\\\c?\" should produce 'DEL' and \"\\\\c@\" should produce 'NUL', but `fish` rejects both of these as invalid tokens. So **control sequence expansion is not working as required**\r\n\r\n3. If one tries to create a control sequence escape using any of the invalid characters from decimal 33 to decimal 62, such as '!', `fish` rejects it as an invalid token. That's good\r\n\r\nExpected behaviour\r\n==================\r\n\r\n1. Highlighting should extend to the next character after the \"\\\\c\" only if that character is valid for making escapes. If the next character is invalid, then either:\r\n\r\n    - In line with the behaviour of a pointless escape like \"\\\\d\", the \"\\\\c\" should be highlighted as a literal '\\\\' followed by a literal 'c' and a literal version of the invalid character, or\r\n    - In line with the behaviour of multicharacter escape codes when faced with invalid input (eg, `echo \\uG`), the invalid character should be consumed but no escape created and no error issued.\r\n\r\n2. '?' and '@' should be parsed as valid in control sequence escapes\r\n\r\nOther relevant issues\r\n=====================\r\n\r\n#3162: A fix here would explicitly forbid the ability to make control sequence escapes out of control sequences. As it currently stands, \"\\\\c\\\\\" is actually a control sequence (because '\\\\' is decimal 92), so the highlighting of something like \"\\\\c\\\\n\" will clearly indicate that the \"\\\\n\" is not interpreted as a character escape\r\n\r\n#3189: Binding \"\\\\c@\" should be possible, and if the parser accepted it then running `bind \\c@` would result in the desired behaviour of control-space executing the bind. Ah, I don't quite understand what the discussion in that issue and its associated pulls is about, but I think it's saying that 'NUL' has no valid internal representation because it would simply be an empty string, which already has a meaning. But if that's the case then I don't understand why `bind \\x00` *does* work, up to a point, when \"\\\\x00\" is another way to make a 'NUL'. Anyway, I note that [this comment](https://github.com/fish-shell/fish-shell/pull/3250#discussion-diff-71965131) pertains to a relevant section of the parser which deals with allowing '@' in a control sequence escape\r\n\r\n#3381: Not totally sure, but this issue may be affected. The fact that the issue is with \"\\\\\\\\c\" specifically might mean something\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3800/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3339", "title": "Recursive index range expansion has unintuitive limitations", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\n- [x] Have you checked if problem occurs with [fish 2.3.1](/fish-shell/fish-shell/releases/tag/2.3.1)?\n- [x] Tried fish without third-party customizations?\n\n**fish version installed**:  2.3.1\n\n**OS/terminal used**: Fedora 23, GNOME 3.18.2, using gnome-terminal\n\nI'm writing a Sublime Text syntax schema for fish scripts, and have found what I suspect is a parsing bug \n\nIf an index-range-expanded-variable is used to select the index range of an outer variable, it appears that the syntax is only parsed as legal if the index-range-expanded-variable is the last or only term within the index brackets, and whitespace is significant. In the below reproduction steps, if `$bar` is replaced with `(seq 3)`, the syntax is identically rejected\n\nThis seems like a fairly simple parsing error to me, since I can't imagine any good reason for these cases to be rejected. Whether the parsing can be appropriately tweaked is another matter, which I can't comment on\n## Reproduction steps\n1. Launch fish\n2. `set foo (seq 3)`\n3. `set bar (seq 3)`\n4. `echo $foo[ 1 ]`\n5. `echo $foo[$bar[1]]`\n6. `echo $foo[1 $bar[2]]`\n7. `echo $foo[$bar[1] 2]`\n8. `echo $foo[1 $bar[2] 3]`\n9. `echo $foo[ $bar[1] ]`\n## Expected results\n\n```\n1\n1\n1 2\n1 2\n1 2 3\n1\n```\n## Actual results\n\n```\n1\n1\n1 2\nInvalid index value\nfish: echo $foo[$bar[1] 2]\n                  ^\nInvalid index value\nfish: echo $foo[1 $bar[2] 3]\n                    ^\nInvalid index value\nfish: echo $foo[ $bar[1] ]\n                   ^\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "christhekeele": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3768", "title": "Navigating history in vim-mode should transition from insert to normal mode", "body": "[enhancement] [vim-mode]\r\n\r\n**fish version installed** *(`fish --version`)*: 2.4.0\r\n\r\nCurrently in `vim-mode` you edit commands by default in `insert` mode. When you press <kbd>\u21e1</kbd> to walk the history, you stay in the mode you were in.\r\n\r\nI find that when I'm going through my history I'd *always* prefer to be put from `insert` into `normal` mode, so that I can easier jump around the historical command I want to edit.\r\n\r\nNote that I don't think pressing <kbd>\u21e1</kbd> and other history interactions should *always* take you to `normal` mode. The behaviour of history interactions with issued from `visual` and `replace` modes is undefined in this feature request, since I'm not sure what the behaviour there should be. But if you're in `insert` mode I think it makes lots of sense.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tolgraven": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3765", "title": "request for comment: everything interactive!", "body": "![fish_demo_optimized](https://cloud.githubusercontent.com/assets/9143357/22193557/7df6aad0-e13c-11e6-8856-5d93249172c0.gif)\r\nI love the interactivity of fish and how comfortable it is to almost always have full autocomplete etc at hand when scripting in it, `funced`iting `fish_user_key_bindings` being a good example.\r\nBut I reckon it should be taken a lot further, it should encompass everything.  After making my own version of `funced` (mainly to get inline-edited functions to auto update in other sessions, and use `read` by default even with exported $EDITOR) I've been slowly building a silly lineup of rather buggy read-based utilities:\r\n\r\n`comped` (add/edit completions)\r\n`arred` (vared with support for arrays, elements simply on separate lines. Can also complete the elements in an array so one can pick by value instead of index, and launch regular `vared`)\r\n`binded` (add/edit binds by pressing the shortcut you want to add/edit, with `fish_key_reader`)\r\n`toled` (inline text editor for tiny things like editing a .gitignore file, or .fish files in conf.d/, etc)\r\n\r\nMy code is likely terrible, and not really what I'm pitching, hehe, but most of the issues at this point are related to fish, I think. I basically want to check if others agree that the concepts are sound and might be worth implementing properly, front end and back.\r\n\r\nThese are mostly a curiosity on their own, but when you bind a shortcut to run the relevant one on the current token... something clicks. My one button is `\\eg` (for \"go\") and it just allows you to zip around the shell, inspecting and discovering and tweaking it as you are using it, without ever losing track of what you were doing - because you're not leaving where you were, just stacking something else on top of it.\r\ncurrently:\r\n`function` gets edited, or created then edited\r\n`variable/array` gets edited, or if doesn't exist but token starts $, created then edited\r\n`path` changes dir\r\n`small text files` edit inline\r\n`--args` tries to edit completion for job\r\n\r\nMore halfhearted examples:\r\nBind a key by pressing it, define function it calls\r\n![fish_binded](https://cloud.githubusercontent.com/assets/9143357/22195918/a438c044-e14a-11e6-997b-0c01efedb1cc.gif)\r\n\r\nFind and edit universal var via the function using it, happens to contain function names to be evaled, so can edit/add/inspect elements _and the result of elements_ without going back to the prompt. Plus some random garbage at the end.\r\n![fish_func_arr_func](https://cloud.githubusercontent.com/assets/9143357/22195683/808c1fde-e149-11e6-8416-6fa686d90753.gif)\r\n\r\nLots of glitches, as you can see, but mostly graphical and definitely very usable even in this state.\r\n\r\nDiscuss.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "almson": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3734", "title": "Improve Ctrl+Left/Right Arrow behavior", "body": "The current behavior of Ctrl+Left Arrow and Ctrl+Right Arrow is a little irregular. For example, in the command `ls --al /home/user-1`, Ctrl + Left Arrow sets the cursor as follows:\r\n\r\n    ls --al /home/user-1|\r\n    ls --al /home/user-|1\r\n    ls --al /home/|user-1\r\n    ls --|al /|home/user-1\r\n    ls -|-al /home/user-1\r\n    |ls --al /home/user-1\r\n\r\nNotice the second-to-last line, `ls -|-al /home/user`. The cursor is at an unexpected position.\r\n\r\nHowever, more than correcting this little bug, I'd like to see Ctrl+Left/Right Arrow stop at both the start and end of words, sequences of punctuation, and sequences of whitespace (ie, three classes of tokens). This slows down the cursor, makes it more predictable, and more useful. Currently, I find Ctrl+Arrow to be too fast and chaotic and I find myself not using it and just waiting for Left/Right Arrow.\r\n\r\nAdmittedly, there's no \"standard behavior\" for Ctrl+Left/Right Arrow. Different applications have different behaviors. Some do it like I propose (Mousepad), some like fish (Sublime), some like fish but backwards (Firefox), and others in-between (LibreOffice Write, Netbeans). What I like about the proposed behavior is that:\r\n\r\n  1) *symmetry* - Ctrl + Left Arrow stops at the same locations as Ctrl + Right Arrow\r\n  2) the token classes are a *superset of common lexical grammars.* Meaning, I can usually get the cursor to the text that I want to delete, insert, or replace.\r\n\r\nThe proposed rule world result in:\r\n\r\n    ls --al /home/user-1|\r\n    ls --al /home/user-|1\r\n    ls --al /home/user|-1\r\n    ls --al /home/|user-1\r\n    ls --al /home|/user-1\r\n    ls --al /|home/user-1\r\n    ls --al |/home/user-1\r\n    ls --al| /home/user-1\r\n    ls --|al /home/user-1\r\n    ls |--al /home/user-1\r\n    ls| --al /home/user-1\r\n    |ls --al /home/user-1\r\n\r\nAn alternate ruleset that might map even better to common command-line lexical grammars might be to use the following three token classes: whitespace, forward slash, and words+punctuation. The result would be:\r\n\r\n    ls --al /home/user-1|\r\n    ls --al /home/|user-1\r\n    ls --al /home|/user-1\r\n    ls --al /|home/user-1\r\n    ls --al |/home/user-1\r\n    ls --al| /home/user-1\r\n    ls |--al /home/user-1\r\n    ls| --al /home/user-1\r\n    |ls --al /home/user-1", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3730", "title": "Ctrl+Backspace and Ctrl+Delete to delete one word", "body": "I notice that fish shell doesn't support deleting whole words with Ctrl+Backspace and Ctrl+Delete. These shortcuts are typically supported by desktop environments. It would be nice to have these features to more quickly edit the command line.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eoli3n": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3732", "title": "subdir completion prefix", "body": "**fish version installed** *(`fish --version`)*:\r\nfish, version 2.4.0\r\n\r\n**OS/terminal used**: \r\nArchlinux 4.8.13-1-ARCH #1 SMP PREEMPT Fri Dec 9 07:24:34 CET 2016 x86_64 GNU/Linux\r\nrxvt-unicode (urxvt) v9.22 - released: 2016-01-23\r\n\r\nStrange behaviour while tab completion in a subdir\r\n\r\n## Reproduction steps\r\n1. $ ls /some/dir/with/some/fi [tab][tab]\r\n2. become blind\r\n\r\n![alt](http://ptpb.pw/zWSR.png)\r\n\r\nIs there a way, as we know the subdir we are searching for files, to just print filenames ?\r\n``filename`` instead of ``...user/filename``\r\n\r\nRedondant information.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3732/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ridiculousfish": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3709", "title": "GNU-style options specified with = mishandle fuzzy matches", "body": "fish 2.4. On a Linux box, type:\r\n\r\n    > cp --backup=mp\r\n\r\nand press tab. This will replace the last argument with `simple`.\r\n\r\nThe problem is that callers of `complete_from_args` need to use `prepend_token_prefix` to get the option part (the `--backup=`) text.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2646", "title": "fish_indent: Improve indentation of boolean conditions", "body": "From #1428, we currently have:\n\n```\n> if false\n       or true\n       echo alpha\n  end\n```\n\nOne possible improvement:\n\n```\n> if false\n  or true\n       echo beta\n  end\n```\n\nAnother one, a little trickier:\n\n```\n> if false\n     or true\n       echo gamma\n  end\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2646/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2241", "title": "wcscasecmp calls not passing the Turkey test", "body": "See #2236. We should vet all calls to `wcscasecmp` to ensure they behave properly in Turkish and other locales.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/a39c57c1b65d91973e781b29bf67c04815779ddc", "message": "Report errors for arguments to 'end'\n\nFor example, `begin ; end arg` will now report an error.\n\nFixes #986"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/9d48c68f244503cf4065871b37e579e9bd006e00", "message": "Remove argument_or_redirection type\n\nThis was a symbol that represented either an argument or a redirection.\nThis was only used as part of argument_or_redirection_list.\nIt's simpler to just have these types be alternatives in the list type."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f81eef5ee1145f8a14aa8f628b0500b815e2f780", "message": "Improve type checking of certain tnode_t interfaces"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3b64a256b6f361d445e68b405081436a40a785e7", "message": "Add type checking to find_child()\n\nEnsure that find_child() with impossible child nodes will now error\nat compile time."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/ae9b5871fb499fedb0c355b0704b94608d52e280", "message": "Fix a tnode-related crash in syntax highlighting\n\nAdds a new test too."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/04162b05eafeacc8d73059e76c218edae05dbf44", "message": "Remove the giant 'Fish grammar' comment\n\nThe fish grammar is now captured more precisely in parse_grammar.h"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/852cf183a6a9f8477470bf64c9eea369b41433c4", "message": "Remove some unused parameters"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c53ee263d8ef4d16d24dc85d76b1d9e8515d1359", "message": "Improve parse tree type safety\n\nThis merges a set of changes to improve the type safety of the fish parse\ntree, in preparation for modifying fish grammar in 3.0. It expresses the\nfish grammar via a new file parse_grammar.h. It then adds a new type\ntnode_t parametrized on grammar elements, with typesafe access to its\nchildren.\n\nThe idea here is to make it easy to change the fish grammar, and have the\ncompiler report code locations that must to be updated.\n\nMerge branch 'threeparse'"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/0f8e8d1cea10817e27ac2deff5ca5666d8172647", "message": "Migrate tnode implementation to tnode.cpp\n\nAlso improve commenting."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/094e853a20b3812e0ba1af6f75741f69c53609db", "message": "Migrate tnode_t into new header tnode.h"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/1c2943bd8b099ef79b7893619acd801bedd02222", "message": "Make statement_is_in_pipeline a free typesafe function"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/194f7f34d96e22fafa0636e9eb8d71d63a3b073f", "message": "Eliminate parse_node_tree::find_nodes"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/242512f0dfb5c0a74a33cff75c5742c5ed974fd8", "message": "Migrate argument_list_is_root out of parse_node_tree_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c1b60fa8e1de3f4abca4810add3bbf4a413e785c", "message": "Remove header_node_for_block_statement"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d7c28c9316bf767de7502d5a284758debcea035d", "message": "Eliminate job_should_be_backgrounded"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3e7e92dfff3a34cb4f5aa891737bd7a6693a94af", "message": "Remove specific_statements_for_job"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/05e8cf13f7f3d412fede0a345e3bd7e30be5626c", "message": "Eliminate parse_execution_context_t::get_child"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/5e4e0dab2cc4ed9e0daf5f67b78eb9f89667793a", "message": "Convert run_job_list to tnode_T"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4c93cece588f1e424d722bae696a6249e89895d1", "message": "Convert run_1_job to tnode_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/fa0f552fe9b36e26115c695e7d851f00275ffc4a", "message": "Convert populate_block_process to tnode_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/2bf96493fcd75cb07491cdbba0867c1f64eb4dae", "message": "Continued adoption of tnode in parse_execution.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/9c88d71e2f5d96bd774307c378b89b18ce4922bc", "message": "Convert handle_command_not_found to tnode_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/298db6e11a4f0bcb5782d9500c83513e9c016c6c", "message": "Convert populate_plain_process to tnode_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8a14a4a5ffdba28544f2e695a5233cf406c7ded0", "message": "Continued adoption of tnode_t in parse_execution\n\nMigrate boolean statements"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7a3d5ddeae090e644b40a5b97d58371478bdb5c7", "message": "Convert run_begin_statement to tnode_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/6f99c9a904f2951087984c996fc9af4258fd7e66", "message": "Adopt tnode_t in run_function_statement"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/edc3d92eda9a75729c2f53a80d2bb63f349bb80d", "message": "Adopt tnode in run_while_statement"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/554bef93ba7a42c90f061c0c61003049ccd0483d", "message": "Switch run_switch_statement to tnode_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3981accf05dd2e065c08934f82ba60de33fea3e1", "message": "Adopt tnode_t in run_if_statement"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/ce173e86b510b73bc595e34cdb9cb2e180ef5509", "message": "Adopt tnode_t in run_for_statement"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/b23c6ebcbae7f246619d757a6c66ec7c4d70d971", "message": "Migrate run_block_statement to tnode_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/cdc0167ba1fd2c2db84d75ff80e8e037c81f1d3e", "message": "Switching symbol_job to use tnode_t in parse_execution.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4768c42f5dcc00ecdbe79f62506bbaf6d7b6faca", "message": "Early adoption of tnode_t in parse_execution.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/6f4db9f8ad4ab9655daabc12ddfe9b6469a919f3", "message": "Add type safety to tnode_t::try_get_child\n\nDetect when no options in an alternation type match the requested type,\nand ensure such cases do not compile."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f0f56a6910dbaa2fbb8f48b29e8d4be01511a8d5", "message": "Teach decoration_for_plain_statement about tnode, rename it get_decoration"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/84dcb246824ce10da86ff1b93a6503263b304c0e", "message": "Namespace alias grammar to 'g' in highlight.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d4f9fcc7c746d3c58284172cde210a0b6373b70f", "message": "Adopt tnode_t in detect_errors_in_backgrounded_job"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/539e9bf970a28d87414ea8196191cbccf9a7d198", "message": "Continued adoption of tnode_t in highlight.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/b0c892d26f7632ffb37df6e5d9cc11d610973910", "message": "More tnode_t adoption in highlight.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/18a120d00e88762aa805afb9479585ec37b5d3ab", "message": "Migrate command_for_plain_statement to tnode_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f16ae9348f21c2cfdd7f390a0e1de1792895ab2d", "message": "Continued adoption of tnode_t in complete.cpp and highlight.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/baa0c73d814b20d0cb99f3966ca5acf18b4f7fe7", "message": "Adopt tnode_t in autosuggest_parse_command()"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/55fc10ea6e72efcac99027b72977741177f86afd", "message": "Migrate parse_util_detect_errors_in_argument to tnode_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f69055b5e969b4b85995edcacf0290cdbc4ccf90", "message": "Adopt tnode_t in parse_util_detect_errors"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4d68877f514e65af8b83b59d175803152df5c052", "message": "tnode_t adoption of find_nodes"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/618996a1667532d661450d9ae6c0f764ae4e7f8e", "message": "Some adopton of tnode_t in complete.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/cfe355554c9389fc5441cf3855305efc15537605", "message": "Adopt tnode in reader_expand_abbreviation_in_command"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3d4dd4abef193f4b6033c840dfdb2c0cbd243953", "message": "Introduce tnode"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/cf116e488036a144f1c9f6f571d6574c60f22a01", "message": "Rejigger alts\n\nMessing around"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/a012320a9a77dcb60803b5a5f9a5e61a65370770", "message": "Add grammar in type system"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8a78dca26fbd6dd17d857f2e21a0ba2c475fadb2", "message": "Remove PRE_BUILD from tests_dir target\n\nIt doesn't seem necessary and I can't justify what it's there for."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8a67a113d850fc6f43ff019ad38f40f5c968dd47", "message": "Revert \"Work around cmake/ninja bug that leads to installation failure\"\n\nThis reverts commit 36a2f2cc01c2a04b240819884f41174cf56f79a6.\n\nThis attempted to modify RPATH when building with Ninja, but the CMake if\nstatement wasn't actually valid so this wasn't doing anything. This check\ncouldn't really be tested - let's make sure not to accumulate build system\nrules that we don't understand."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/de8ccf1751cdd55ef2ba37125bc23c4f7dd404a7", "message": "Stop warning on invalid PATHs and CDPATHs if any element is valid\n\nSome dotfile users like to add directories to PATH that point at\nnon-existent directories (because those directories exist on other\nmachines). Stop warning in that case, unless those directories contain\na colon, in which case it's probably a user error."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/96d524304d4c5096cbccef794227c0ae25264bc2", "message": "Add #4649 to changelog"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/46db0dd5eb59bc62f1b735b97ecbdece8c87f389", "message": "Stop checking EXPAND_SPECIAL_FOR_CD if ..._AUTOSUGGEST is set\n\nIf EXPAND_SPECIAL_FOR_CD_AUTOSUGGEST is set, EXPAND_SPECIAL_FOR_CD\nis necessarily also set; simplify things by only checking for the\nlatter."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/faa17ec849758b96878974791f37e7ef98a500e4", "message": "Correct a comment in git_version_gen.sh"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d09210c08bc8e36ac32727ef12bf3ce35f5374ee", "message": "[cmake] Untangle the CMake versioning\n\nThis untangles the CMake versioning issues (I hope) as discussed in #4626.\nNote most of the advice found on the Internet about how to inject git\nversions into CMake is just wrong.\n\nThe behavior we want is to unconditionally run the script\nbuild_tools/git_version_gen.sh at build time (i.e. when you invoke ninja or\nmake, and not when you invoke cmake, which is build system generation time).\nThis script is careful to only update the FISH-BUILD-VERSION-FILE if the\ncontents have changed, to avoid spurious rebuilding dependencies of\nFISH-BUILD-VERSION-FILE. Assuming the git version hasn't changed, the script\nwill run, but not update FISH-BUILD-VERSION-FILE, and therefore\nfish_version.o will not have to be rebuilt.\n\nThis might normally rebuild more than is necessary even if the timestamp is\nnot updated, because ninja computes the dependency chain ahead of time. But\nNinja also supports the 'restat' option for just this case, and CMake is rad\nand exposes this via BYPRODUCTS. So mark FISH-BUILD-VERSION-FILE as a\nbyproduct and make the script always update a dummy file\n(fish-build-version-witness.txt). Note this is the use case for which\nBYPRODUCTS is designed.\n\nWe also have fish_version.cpp #include \"FISH-BUILD-VERSION-FILE\", and do a\nsemi-silly thing and make FISH-BUILD-VERSION-FILE valid C++ (so there's just\none version file). This means we have to filter out the quotes in other\ncases.."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/21cfdf04bd584bd89689e7507296472fc57321c1", "message": "Revert \"[cmake] Remove build_fish_pc target\"\n\nThis reverts commit 585321181d1f7573813ed8083a06118ab1d6a6a2.\n\nWith the build_fish_pc target, a command like this fails:\n  env DESTDIR=/tmp/fish-install ninja install"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/da8db7f6f01c91866d22934cba207299acc59fde", "message": "Revert \"Generate FISH_BUILD_VERSION info for cmake builds\"\n\nThis reverts commit 25839b8c361e1dcd5f96a5e05bb48616c5531061.\n\nThis was an attempt to simplify the version generation, but it\ncomputed the version at build sytem generation time rather than\nat build time, requiring another run of CMake to update it."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/69f066dc1b4f8fad127fcb51f3468487751d8451", "message": "Correct end tag\n\nA code block was not properly closed, causing bad graphical artifacts\nin the tutorial. Correct it."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3b3047c3f6cf10d6e4c076d44ca0949864a93e03", "message": "Remove unused functions from env_var_t"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8f8e19bf7b087778cde522eac12130abee2f2431", "message": "Fix a misleading stale comment"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d5d37122202e65f744a84a6157dee0419fe76ce8", "message": "Correct some more memory management in env.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/efeb8e43a2f3d32d7dbf2192492acf9f8a4b4e20", "message": "Remove a bunch of unnecessary copying in env.cpp"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/2c5b49c3fe7321a702e8a05e5b6a13d1dd76591d", "message": "Clean up env_var_t interface"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/05b5e8e4f834bdcfc6134b12fe970f24539d5ebc", "message": "Stop copying strings in var_stack_t::var_changed\n\nvar_stack_t::var_changed was doing tons of unnecessary string copies.\nFix that and make its name clearer."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/aa22c744d21313d5b479c3c8b9faf30d87ce8654", "message": "Mark parsed_source_ref_t as storing a const pointer"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/457213a7688028797df3086322b9d73ee029ff64", "message": "Turn debug() into a macro\n\nA large portion of time was spent constructing strings and passing\nthem to debug(). Turn debug into a macro so that the strings are only\nconstructed if they're going to be printed."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/a99eecfad858b01ce37d058c038c3cf60767cfb2", "message": "Wrap up source code and a parse tree into a new type parsed_source_ref_t\n\nThis will make it unnecessary to carry around the parse tree and source\nseparately, and enable some simplifications."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/eeff32cde7171f083f44cd9cbf933917dc827c60", "message": "Disable MUPARSER_ATTR_WARN_UNUSED_RESULT on gcc\n\nFixes a warning when building with gcc."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d17b298a483abcfa3b2706bf1e5437984ef3c53a", "message": "Factor out the code that executes a builtin from exec_job()\n\nVery early work on untangling the exec_job spaghetti."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7db5d573c238da42fa3410cc44ab6f3367bbd2d9", "message": "Document fish_color_selection\n\nFixes #4544"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/9907a8df4d784afa1ef5afd6da82c313898879f6", "message": "Fix test hang when running under ninja\n\nThe psub tests create a fifo and launch a background job to write to it.\nHowever fifos have this obnoxious behavior where opening the file blocks\nuntil both sides are ready. In one of the tests we don't actually read\nfrom the fifo we create, so the background job hangs, and the tests\nnever complete. Fix this by just reading from the fifo."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/a2114233acbe2b0ec3ce2ad456b0da3d796ab6f6", "message": "Fix some warnings"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f563262cfda72aa291dcca4cd703b2ccba3331a9", "message": "Mark tests as USES_TERMINAL\n\nThis allows the Ninja build to show the test output live.\nThis requires bumping the min required CMake version to 3.2 (from 3.1)"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/0c55b79cfc25ad35ad545447706ef7d16a006f13", "message": "[string] Instance the argument parsing\n\nThis adds a new class arg_iterator_t which encapsulates decisions about\nwhether to read arguments from stdin or argv. It also migrates the\nunread bytes buffer from a static variable to an instance variable."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/ec2b38053e4d70a54167a18da52920104c2abe2f", "message": "Merge pull request #4612 from ridiculousfish/muparser-no-except\n\nMuparser Exceptectomy\r\n\r\nThis removes large pieces of muParser that fish does not use, such as its optimizer. It also switches muParser from throwing exceptions to propagating errors explicitly."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/873ea0f0df31e7b3a1a4839af448e8195048cf12", "message": "[muparser] Remove OnDetectVar and Diff\n\nThese are unused and useless."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/2c317a2585c9c1e03068a26f5a15e61ead6dfd4d", "message": "[muparser] Remove muParserFixes.h\n\nThis appears to be random pragmas for ICC only."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/886341fdeacc3758584882b9bb43b29b350ef9c5", "message": "[muparser] Remove ParserCallback m_bAllowOpti flag\n\nmuParser can no longer optimize, so this is unused."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/e728bf45de04adb1c52c6b925dee743041fc28f6", "message": "[muparser] Remove m_strFormula from the ParserError"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/409173e0f0d19c595ea4dd63cef23681d47daaef", "message": "[muparser] Default ParserError's constructors\n\nNo need to define these explicitly when the defaults will do."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/e9c106b881b97a5b332692fcc7d6d32fb4effb49", "message": "[muparser] Delete ParserByteCode copy and assignment ctors\n\nThese are not used."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8b0d2ff64170bdb8534b39f4995b71b11d4cb2bd", "message": "[muparser] Remove muParserTemplateMagic.h\n\nThis header is now empty"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/1f456c71f703baf7b1b0c30f7b2062ff42ccc662", "message": "[muparser] Remove MathImpl\n\nThis layer of indirection is silly."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f0de6e0852d2d7d87d79f4382922670e17cac755", "message": "[muparser] Remove struct TypeInfo\n\nThe STL's facilities are totally sufficient here."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/364f58fcfaaca793ba4fc957e231660b893a2163", "message": "Remove some deleted muparser headers from Xcode build"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/fd60a7cff7c7a27b19184eb1d4ecfd9739643aba", "message": "[muparser] Remove unused fields from SToken"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/732b32c8b4eb745f585b5df53b02fce2586d8972", "message": "[muparser] Clean up constructors and other miscellaneous"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/e675a66504538079cec95a94fa1220cee5a4161c", "message": "[muparser] Remove some unused \"optimized\" opcodes"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3f21fb64de872fba5841c4d1bca4ce6a87717ca1", "message": "[muparser] Remove additional unused functions"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/ab95f940485e5725bb91c37e4a1c32910e500161", "message": "[muparser] Remove m_nIfElseCounter instance variable\n\nNo idea why this isn't just a local."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4452d9ce18b1c78fa05e52297012d46c97426f7e", "message": "[muparser] Remove m_pParseFormula function pointer\n\nThis is a very strange design that determines whether initialization\nneeds to be performed by reassigning a function pointer. A misguided\noptimization? Just check explicitly."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3ed9c851a3a41f28d6ed85251f93a1f015f8a788", "message": "[muparser] Remove some OpenMP / \"bulk mode\" detritus"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/fdefabdb1dde8cdd153d0fda024a1c9f82a3069e", "message": "[muparser] Remove fun_type overloads that have four or more parameters\n\nSupporting these is rather excessive."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/bb9e15675e8c7da32381a33fb188f3b40a22214f", "message": "[muparser] Remove muParserDLL.h and muParserDLL.cpp\n\nThis is a C interface (?) which fish does not use and is not needed."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/128aacaf877e1aecb1bdfc049480aeafbec44665", "message": "[muparser] Disable muparser shared lib build\n\nfish does not use its shared library, only the static one"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/554382a28661201fe86deddc4e05e07163e551e2", "message": "[muparser] Remove 'AllowOpt' parameters\n\nThis parameter was used as a hint to optimize functions invoked\nwith constants, but is no longer used."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/452211ebf549ac36d1cd0f1e6774a8b42e73ebe8", "message": "Disable exception handling in autotools build\n\nNow that muparser no longer relies on exceptions, we can disable them\nagain."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3099d46736f1a89f184fcf00ad33ffb06e76e820", "message": "Disable exception handling in CMake build\n\nNow that muparser no longer relies on exceptions, we can disable them\nagain."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8b16fccebf54afff70e1c353d1026909da9ea024", "message": "Disable exception handling in Xcode build\n\nNow that muparser no longer relies on exceptions, we can disable them\nagain."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/11e6cfeb82225253fb041565f5404564db881a4c", "message": "[math] Remove exception handling in builtin_math\n\nThis handles errors explicitly instead of catching them."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/5d2cf3f6664af22f7b414094055bf34ee4525a80", "message": "[muparser] Remove getOrThrow()\n\nThis is no longer used or needed"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/2f2f4b42870459555174736c811286e176981e48", "message": "[muparser] ParserBase::Eval to return an error instead of throwing"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/11d729d09c1f852a5318fd5545613d5c81f3e111", "message": "[muparser] DefineFun() to return an error instead of throwing"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/6f14d556125d05a4ec8bb014472e4dae69d0bbe0", "message": "[muparser] Convert more exception handling into explicit errors"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d3822e4cb3ff978b66fc95c240e57f4474f1637f", "message": "[muparser] Propogate and check for lots more errors"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/0be08e46836e228b57d1dac7f458f22d8ed69975", "message": "[muparser] DefinePostfixOprt and DefineInfixOprt to return errors\n\nReturn errors explicitly instead of throwing."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f3a9773849a17eaffbab9e325ba5aa7e27b29dc1", "message": "[muparser] Make some error handling in ParserBase explicit\n\nReturn ParserError instead of throwing exceptions"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/62bedde23d2229f722d382075f32ce8a577bd627", "message": "[muparser] Clean up error handling in ParserTokenReader"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/91c28449aab8196ea6a59f2990969bdec48f2e79", "message": "[muparser] Parser mathematical functions to return errors instead of throw\n\nRemove exceptions from Parser functions such as sqrt, min, and others."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/bceef6c1250e586d070f9726781e56ca6903fa31", "message": "[muparser] ParserInt::IsBinVal to return false on overflow\n\nInstead of throwing an exception, simply return false. It is too\ncomplicated to thread the error return through this function and\nParserInt is unused by fish anyways."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/67a6f756f22d757b308333b42202a21c5f85fe63", "message": "Add some math tests for invalid inputs"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3faccc8b3ea3336da17d442c49bce8f9caf3ea62", "message": "[muparser] Remove querying variables and constants\n\nfish does not need to query variables and constants from muparser.\nThis simplifies the code."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/234808bc32d7dd59ccc4912f8784511b3da5623e", "message": "[muparser] ApplyRemainingOprt to return explicit errors"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/60d9c9fa00855af4dd69a645ffb8b6445d4ddf45", "message": "[muparser] More functions to return errors\n\nReturn OptionalError for more functions, allowing for explicit error\nhandling."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d97bb3425ff74653d0df7dbb2c8ffbb4e99e7fe6", "message": "[muparser] Clean up ParserTokenReader constructor"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/83799832bc3f49a8d7c452cb360af4739ebb43cb", "message": "[muparser] Make ParserTokenReader non-copyable\n\nThere's no reason to copy these."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3b1b5b30ca9fd0dd96607011e32f292056103527", "message": "[muparser] Clean up ParserToken::GetFuncAddr"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c4c89dff4ec9512c977d46509916c09e645001e0", "message": "[muparser] Clean up ParserCallback interface\n\nRemove Clone() method and mark some functions as defaulted."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/9443a4bf2d1d390c455ea3b83e7e9a31f56a8dc4", "message": "[muparser] Remove copy and assignment\n\nThere is no reason for muParsers to be copyable or assignable.\nAlso remove some dead code and switch an auto_ptr to unique_ptr."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/65f49635423eefd7be8f557bbd6998a9e1d50f60", "message": "[muparser] Eliminate MUP_FAIL and MUP_ASSERT\n\nReplace MUP_ASSERT with assert(). MUP_FAIL was unused."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f05b55c84c10ab68bf8a893aca03f136e5548007", "message": "[muparser] Remove \\throw nothrow comments\n\nSoon it will all be nothrow!"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/9649b132bd31deca799a2bfea68b887e3e25fd8f", "message": "[muparser] Continue adopting ValueOrError"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/bfd70880a53f6360aac4740d08b831c9dbc0ab2d", "message": "[muparser] Begin adopting ValueOrError\n\nSwitch custom function types to return ValueOrError, which will\nenable us to remove exceptions."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/5655f255eff8f90be93e50f8663c374e748132c8", "message": "[muparser] Add a muParser ValueOrError type\n\nFirst steps towards removing exceptions from muParser."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c0af4ba70af2a5dc969daddbb633ab55b407e959", "message": "[muparser] Fix \"backslash and newline separated by space\" warning\n\nASCII art is serious business."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/fc110d2c0e6c0fd688adcbcea9316e265eed377e", "message": "[muparser] Fix \"enumeration value not handled in switch\" warning\n\nIt's unclear whether the default behavior is ever executed. Add an\nassertion to find out the hard way."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/a7f610549787537896cb4c2fc8b4bebe1dedcf51", "message": "[muparser] Remove the optimizer\n\nThe optimizer adds a fair amount of complexity in muparser with no\nbenefit to fish, since fish is not going to use complicated expressions\nor cache parsed expressions."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/85334432ed98f2ec9c9f6e0fb60d2ad0a4607664", "message": "[muparser] Remove cmFUNC_BULK\n\nfish does not need bulk functions, which are used to enable parallel\ncomputations."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c5a0c58cfb51a7161162c0a9a3edb45faaac57fd", "message": "[muparser] Remove NDEBUG from its autoconf build\n\nEnsure that assertions are tripped."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/dac13d51faa2df78639addb47c30196091690bd6", "message": "[muparser] Switch autoconf build to C++11\n\nThis will enable testing via muparser's test suite while\nincorporating C++11 features."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/38a2e0218d833e5ee420e4501cbcd7d95913a471", "message": "[muparser] Remove muParserError.h\n\nTo help remove exception handling, we will need to have a type that\nhas visibility into both ParserError and value_type. We're going to\nput this type in muParserDef.h. Remove the error header and fold its\ncontents into muParserDef.h."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/5f7f1102dbefcb00d3c1dc264e0f1f0de6ec9ea6", "message": "[muparser] Remove ParserErrorMsg\n\nThis was a class to \"manage\" error messages. Remove it and replace\nit with a function."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/cad9bbd2a244c2efbcd6aca27612899b43427101", "message": "[muparser] Remove muParserStack.h\n\nThis was a silly data structure that didn't carry its weight.\nReplace it with a wrapper around std::vector that doesn't explicitly\nthrow exceptions. It's unclear if muparser relied on the exception\nthrowing behavior of ParserStack, and it seems there's no way to find\nout except removing it and seeing what breaks.\n\nThe tests pass for what that's worth!"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/e2b798cda38e26b3e1f69a46ace6a4aa663f1934", "message": "[muparser] Restyle muparser sources to match fish\n\nAdd muparser soruces to style.fish, and run it to make muparser\nmatch fish style guidelines."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/b39d0adc39be7dc069be4080006b21aa2bbda072", "message": "Add muparser example executable to .gitignore"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8364e597093f9acab347158c9711a14e62af9c93", "message": "[muparser] Remove MUP_USE_OPENMP\n\nWe are not using OpenMP in the fish shell."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/483930946bb516d3c30402b960ca05390005dab2", "message": "[muParser] Remove ecINTERNAL_ERROR\n\nInternal errors should not be represented as exceptions, but\ninstead as assertion failures."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/81dd4a45363d38ac748c508ea1fa6f886a7c410d", "message": "[math] Remove more bare variable support\n\nPrior to this fix, a \"bare variable\" in math like 'x + 1' would be\nlooked up in the environment, i.e. equivalent to '$x + 1'. This appears\nto have been done for performance. However this breaks the orthogonality\nof fish; performance is not a sufficient justification to give math this\nlevel of built-in power, especially because the performance of math is\nnot a bottleneck. The implementation is also ugly.\n\nRemove this feature so that variables must be prefixed with the dollar\nsign and undergo normal variable expansion. Reading 'git grep' output\ndoes not show any uses of this in fish functions or completions.\n\nAlso added to changelog.\n\nFixes #4393"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c077aae022d582c41cc2bcfc2f76b98674028d26", "message": "Add glob changes to CHANGELOG\n\nThis records the glob changes from #4579 in the changelog"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/879c62cbe14d8bc16e8bc1998bae87d4159589dc", "message": "Note that bracketed paste is disabled for iTerm in CHANGELOG"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/043631fd18428a4401ad9f577e453c1c7aa22a11", "message": "Add muParser headers to CMake build\n\nEnables these headers to show up in IDEs."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/10149951597e968697e387b029059d4827d63f00", "message": "Add documentation for wait command"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/bc28bd7d6d1d34aadfaf22df96e241e9932312c2", "message": "Use some modern initialization syntax in builtin_wait\n\nAvoids potentially dangling pointers."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/51d34e1960cb2688bcd5c0cae6786bfb3e7b3aaf", "message": "Add wait command to Changelog"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7c8ed80e643ae8c0dbfeacb7f7f4296701455dfa", "message": "Fix up builtin_wait build system\n\nAdd missing CMake and Xcode files, and mark some variables as const\nreference."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8dc26ba8b992cf55ece212b9104831034435ebff", "message": "Add missing builtin_argparse.cpp to fish_key_reader\n\nFixes #4510"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/39ddfa2ad24ce8fd9357034d9a984be8ccd2b0ed", "message": "Migrate muParser to CMake\n\nThis adds a CMakeLists.txt inside muParser, so it can be build\nwith CMake."}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/cd47f9b1a2c407b676cb115b6ae7fbf3547ca21a", "message": "Add an IDE-friendly CMake target\n\nThis adds the target build_root, which is a target that installs\nfish into a directory under the build path."}], "pull_requests": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/4676", "title": "Rearchitect WSL compatibility from SIGCONT to keepalive process", "body": "This merges a sequence of commits that undoes the SIGCONT orchestration used for WSL compatibility. The essential problem is this: In Unix and Linux, exited processes are still valid until it is reaped; you can, say, make an exited process a group leader. But in Windows, when a process exits, it is gone, and most syscalls (other than, say, waitpid) fail for it. This is known as the WSL Rick Grimes problem.\r\n\r\nThis manifests as various race conditions in WSL between a parent operating on a child, and the child exiting. Prior to this merge, these were addressed by having the child wait for the parent to send it a SIGCONT. This resolved the race.\r\n\r\nThis merge removes this approach and replaces it with a simpler mechanism that leverages the existing keepalive machinery. A keepalive process is created for all platforms when we have a pipeline that contains a builtin. This is necessary to keep the whole process group alive. The fix is, on WSL, we always create a keepalive and make it the group leader. Because the keepalive does not call exec and its lifetime is bound to a C++ stack frame, it is easy to resolve the race.\r\n\r\nThis improves performance a bit (except on WSL), since child processes no longer have to synchronize with the parent process, but the big win is simplicity. This removes the notion of the single global stopped child, of which there could only be one, and which had be resumed at the right time(s), of which there were several.", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/5664464", "body": "Fixed as c15975113ab80241c71dc6dfa41a470b232de4ce\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/5664464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/5682025", "body": "It's supposed to work that way, it was just busted in certain cases. Now there's some tests.\nFixed in fish_fish branch:\n=> Syncing Gitorious... [OK]\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   c159751..129525a  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/5682025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6029479", "body": "Siteshwar is nearly finished with this\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6029479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051198", "body": "Thank you, I've merged the fix.\n\nWhile that fixes the immediate issue, I will keep this bug open to track getting off of which entirely. which is not the correct way to determine if a command exists.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051202", "body": "Thanks, you rock! I've merged this.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051230", "body": "I will leave this bug open to track the issue of other Python scripts, such as share/tools/web_config/webconfig.py .\n\nKeeping these scripts compatible with Python2 and Python3 seems like it would be a lot of maintenance work. I would like to find a way to portable request Python2 (or 3) for all such scripts.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051252", "body": "Cool, I never knew about 'funded' or 'funcsave'\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051256", "body": "s/funded/funced\n\nDarn you autocomplete.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6051256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6070803", "body": "Hopefully addressed by this commit:\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   377d93d..9255f62  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6070803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6070805", "body": "Hopefully addressed by this commit:\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   377d93d..9255f62  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6070805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6071087", "body": "Nope, the problem is that fish_indent is busted\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6071087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6071385", "body": "Fixed by this commit:\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   9255f62..ae12e1b  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6071385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107387", "body": "The issue turned out to be that path_make_canonical() mishandles the path \"/\", returning an empty string instead. Fixed and added a test in this commit:\n\n=> Syncing Gitorious... [OK]\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   457e6a5..cc90f9c  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107398", "body": "Thank you etu for your investigation.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107460", "body": "fish trunk does use type; I had switched away from it because I found 'type' to be quite expensive.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107477", "body": "Yes, this ought to have been fixed by the changes in https://github.com/ridiculousfish/fishfish/issues/18\nThank you for reporting this.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107685", "body": "We can't depend on Python 3 being installed at this point. It's not installed on too many OSes that matter, and I don't want to make Python 3 a requirement of fish, since we'd have to bundle it in installers, etc.\n\nOne thing we can do is make the fish wrapper functions that kick off the scripts (fish_update_completions, fish_config) invoke the Python scripts the correct way depending on the environment, by passing the script file directly to python or python2 as appropriate.\n\nAnother possibility is to ship both python2 and python3 versions of the scripts. Hopefully we can get the python2 scripts to the point that 2to3 does the conversion automatically, so it will be painless\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6107685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6111416", "body": "Should be fixed by this commit\n\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   cc90f9c..69446be  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6111416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6111422", "body": "Should be fixed by this commit\n\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   cc90f9c..69446be  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6111422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6133206", "body": "It might be a thread safety issue.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6133206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6134590", "body": "Good question. This is part of the weirdness of curses and terms, which Axel understands much better than me.\n\nIf you can figure out if this code is causing/fixing problems, I'd sure appreciate it.\n\nHere's the corresponding code from the original fish:\n\n```\nif( c2 != FISH_COLOR_NORMAL &&\n    c2 != FISH_COLOR_IGNORE )\n{\n    /*\n      Background is set\n    */\n    bg_set=1;\n    c = (c2==FISH_COLOR_WHITE)?FISH_COLOR_BLACK:FISH_COLOR_WHITE;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6134590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6135866", "body": "Are you sure that's the crashing thread? Please attach the backtrace of all threads - even if that is the crashing threads, knowing what other threads are doing could help.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6135866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6137402", "body": "Googling shows a similar crash in tcsh http://mx.gw.com/pipermail/tcsh/2010-August/004169.html\nand one in bash at http://web.archiveorange.com/archive/v/wmeLDmw82cp6N2SwY1bf\n\nAmusingly both seem to be related to completions.\n\nSince these processes aren't multithreaded I think we can rule out threading issues and conclude that it's a bug in libnsl. The next step would be to identify it and see if we can work around it. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6137402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6146249", "body": "Closed\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6146249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158479", "body": "Agree with shamrin regarding not making it configurable.\nFor beta r2, I went with solution 3, but I'll leave this open for further comments\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158762", "body": "We would only want to provide these functions if cdargs is installed, naturally.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6161366", "body": "Looks like this is busted for cd autosuggestions in particular; other autosuggestions work OK.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6161366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6185716", "body": "```\nThis file contains any messages produced by compilers while\nrunning configure, to aid debugging if configure makes a mistake.\n\nIt was created by fish configure 1.23.1, which was\ngenerated by GNU Autoconf 2.69.  Invocation command line was\n\n$ ./configure --prefix=/opt/local --without-xsel\n\n## --------- ##\n## Platform. ##\n## --------- ##\n\nhostname = renderbook.g5pw.homelinux.org\nuname -m = x86_64\nuname -r = 11.4.0\nuname -s = Darwin\nuname -v = Darwin Kernel Version 11.4.0: Mon Apr  9 19:32:15 PDT 2012; root:xnu-1699.26.8~1/RELEASE_X86_64\n\n/usr/bin/uname -p = i386\n/bin/uname -X     = unknown\n\n/bin/arch              = unknown\n/usr/bin/arch -k       = unknown\n/usr/convex/getsysinfo = unknown\n/usr/bin/hostinfo      = Mach kernel version:\nDarwin Kernel Version 11.4.0: Mon Apr  9 19:32:15 PDT 2012; root:xnu-1699.26.8~1/RELEASE_X86_64\nKernel configured for up to 2 processors.\n2 processors are physically available.\n2 processors are logically available.\nProcessor type: i486 (Intel 80486)\nProcessors active: 0 1\nPrimary memory available: 8.00 gigabytes\nDefault processor set: 130 tasks, 600 threads, 2 processors\nLoad average: 3.58, Mach factor: 0.32\n/bin/machine           = unknown\n/usr/bin/oslevel       = unknown\n/bin/universe          = unknown\n\nPATH: /opt/local/bin\nPATH: /opt/local/sbin\nPATH: /bin\nPATH: /sbin\nPATH: /usr/bin\nPATH: /usr/sbin\n\n\n## ----------- ##\n## Core tests. ##\n## ----------- ##\n\nconfigure:2215: checking if autoconf needs to be run\nconfigure:2237: result: no\nconfigure:2249: checking if autoheader needs to be run\nconfigure:2252: result: yes\nconfigure:2255: running autoheader\nconfigure:2281: checking for /usr/pkg/include include directory\nconfigure:2289: result: no\nconfigure:2293: checking for /usr/pkg/lib library directory\nconfigure:2300: result: no\nconfigure:2304: checking for /usr/pkg/bin command directory\nconfigure:2311: result: no\nconfigure:2281: checking for /sw/include include directory\nconfigure:2289: result: no\nconfigure:2293: checking for /sw/lib library directory\nconfigure:2300: result: no\nconfigure:2304: checking for /sw/bin command directory\nconfigure:2311: result: no\nconfigure:2281: checking for /opt/include include directory\nconfigure:2289: result: no\nconfigure:2293: checking for /opt/lib library directory\nconfigure:2300: result: no\nconfigure:2304: checking for /opt/bin command directory\nconfigure:2311: result: no\nconfigure:2281: checking for /opt/local/include include directory\nconfigure:2284: result: yes\nconfigure:2293: checking for /opt/local/lib library directory\nconfigure:2296: result: yes\nconfigure:2304: checking for /opt/local/bin command directory\nconfigure:2307: result: yes\nconfigure:2449: checking for C++ compiler version\nconfigure:2458: /usr/bin/clang++ --version >&5\nApple clang version 3.1 (tags/Apple/clang-318.0.58) (based on LLVM 3.1svn)\nTarget: x86_64-apple-darwin11.4.0\nThread model: posix\nconfigure:2469: $? = 0\nconfigure:2458: /usr/bin/clang++ -v >&5\nApple clang version 3.1 (tags/Apple/clang-318.0.58) (based on LLVM 3.1svn)\nTarget: x86_64-apple-darwin11.4.0\nThread model: posix\nconfigure:2469: $? = 0\nconfigure:2458: /usr/bin/clang++ -V >&5\nclang: error: argument to '-V' is missing (expected 1 value)\nclang: error: no input files\nconfigure:2469: $? = 1\nconfigure:2458: /usr/bin/clang++ -qversion >&5\nclang: error: no input files\nconfigure:2469: $? = 1\nconfigure:2489: checking whether the C++ compiler works\nconfigure:2511: /usr/bin/clang++ -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.cpp  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:2515: $? = 0\nconfigure:2563: result: yes\nconfigure:2566: checking for C++ compiler default output file name\nconfigure:2568: result: a.out\nconfigure:2574: checking for suffix of executables\nconfigure:2581: /usr/bin/clang++ -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.cpp  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:2585: $? = 0\nconfigure:2607: result: \nconfigure:2629: checking whether we are cross compiling\nconfigure:2637: /usr/bin/clang++ -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.cpp  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:2641: $? = 0\nconfigure:2648: ./conftest\nconfigure:2652: $? = 0\nconfigure:2667: result: no\nconfigure:2672: checking for suffix of object files\nconfigure:2694: /usr/bin/clang++ -c -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include conftest.cpp >&5\nconfigure:2698: $? = 0\nconfigure:2719: result: o\nconfigure:2723: checking whether we are using the GNU C++ compiler\nconfigure:2742: /usr/bin/clang++ -c -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include conftest.cpp >&5\nconfigure:2742: $? = 0\nconfigure:2751: result: yes\nconfigure:2760: checking whether /usr/bin/clang++ accepts -g\nconfigure:2780: /usr/bin/clang++ -c -g -I/opt/local/include conftest.cpp >&5\nconfigure:2780: $? = 0\nconfigure:2821: result: yes\nconfigure:2892: checking for gcc\nconfigure:2919: result: /usr/bin/clang\nconfigure:3148: checking for C compiler version\nconfigure:3157: /usr/bin/clang --version >&5\nApple clang version 3.1 (tags/Apple/clang-318.0.58) (based on LLVM 3.1svn)\nTarget: x86_64-apple-darwin11.4.0\nThread model: posix\nconfigure:3168: $? = 0\nconfigure:3157: /usr/bin/clang -v >&5\nApple clang version 3.1 (tags/Apple/clang-318.0.58) (based on LLVM 3.1svn)\nTarget: x86_64-apple-darwin11.4.0\nThread model: posix\nconfigure:3168: $? = 0\nconfigure:3157: /usr/bin/clang -V >&5\nclang: error: argument to '-V' is missing (expected 1 value)\nclang: error: no input files\nconfigure:3168: $? = 1\nconfigure:3157: /usr/bin/clang -qversion >&5\nclang: error: no input files\nconfigure:3168: $? = 1\nconfigure:3172: checking whether we are using the GNU C compiler\nconfigure:3191: /usr/bin/clang -c -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include conftest.c >&5\nconfigure:3191: $? = 0\nconfigure:3200: result: yes\nconfigure:3209: checking whether /usr/bin/clang accepts -g\nconfigure:3229: /usr/bin/clang -c -g -I/opt/local/include conftest.c >&5\nconfigure:3229: $? = 0\nconfigure:3270: result: yes\nconfigure:3287: checking for /usr/bin/clang option to accept ISO C89\nconfigure:3350: /usr/bin/clang  -c -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include conftest.c >&5\nconfigure:3350: $? = 0\nconfigure:3363: result: none needed\nconfigure:3388: checking how to run the C preprocessor\nconfigure:3419: /usr/bin/clang -E -I/opt/local/include conftest.c\nconfigure:3419: $? = 0\nconfigure:3433: /usr/bin/clang -E -I/opt/local/include conftest.c\nconftest.c:9:10: fatal error: 'ac_nonexistent.h' file not found\n#include <ac_nonexistent.h>\n^\n1 error generated.\nconfigure:3433: $? = 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"fish\"\n| #define PACKAGE_TARNAME \"fish\"\n| #define PACKAGE_VERSION \"1.23.1\"\n| #define PACKAGE_STRING \"fish 1.23.1\"\n| #define PACKAGE_BUGREPORT \"fish-users@lists.sf.net\"\n| #define PACKAGE_URL \"\"\n| /* end confdefs.h.  */\n| #include <ac_nonexistent.h>\nconfigure:3458: result: /usr/bin/clang -E\nconfigure:3478: /usr/bin/clang -E -I/opt/local/include conftest.c\nconfigure:3478: $? = 0\nconfigure:3492: /usr/bin/clang -E -I/opt/local/include conftest.c\nconftest.c:9:10: fatal error: 'ac_nonexistent.h' file not found\n#include <ac_nonexistent.h>\n^\n1 error generated.\nconfigure:3492: $? = 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"fish\"\n| #define PACKAGE_TARNAME \"fish\"\n| #define PACKAGE_VERSION \"1.23.1\"\n| #define PACKAGE_STRING \"fish 1.23.1\"\n| #define PACKAGE_BUGREPORT \"fish-users@lists.sf.net\"\n| #define PACKAGE_URL \"\"\n| /* end confdefs.h.  */\n| #include <ac_nonexistent.h>\nconfigure:3563: checking for a BSD-compatible install\nconfigure:3631: result: /usr/bin/install -c\nconfigure:3650: checking for seq\nconfigure:3666: found /usr/bin/seq\nconfigure:3678: result:  \nconfigure:3698: checking if seq comes from a previous fish version\nconfigure:3707: result: no\nconfigure:3807: checking if we are compiling against glibc\nconfigure:3839: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:3839: $? = 0\nconfigure:3839: ./conftest\nconfigure:3839: $? = 1\nconfigure: program exited with status 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"fish\"\n| #define PACKAGE_TARNAME \"fish\"\n| #define PACKAGE_VERSION \"1.23.1\"\n| #define PACKAGE_STRING \"fish 1.23.1\"\n| #define PACKAGE_BUGREPORT \"fish-users@lists.sf.net\"\n| #define PACKAGE_URL \"\"\n| #define USE_GETTEXT 1\n| /* end confdefs.h.  */\n| \n| \n|               #include <stdlib.h>\n|               #ifdef __GLIBC__\n|               #define STATUS 0\n|               #else\n|               #define STATUS 1\n|               #endif\n| \n| int\n| main ()\n| {\n    | \n    |               return STATUS;\n    | \n    | \n    |   ;\n    |   return 0;\n    | }\n| \nconfigure:3863: result: no\nconfigure:3883: checking build system type\nconfigure:3897: result: i386-apple-darwin11.4.0\nconfigure:3917: checking host system type\nconfigure:3930: result: i386-apple-darwin11.4.0\nconfigure:3950: checking target system type\nconfigure:3963: result: i386-apple-darwin11.4.0\nconfigure:4001: checking if we are under Solaris\nconfigure:4012: result: no\nconfigure:4018: checking if we are using non varargs tparm.\nconfigure:4039: /usr/bin/clang -c -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include conftest.c >&5\nconfigure:4039: $? = 0\nconfigure:4053: result: no\nconfigure:4062: checking if we are under BSD\nconfigure:4076: result: no\nconfigure:4121: checking for /proc/self/stat\nconfigure:4134: result: no\nconfigure:4166: checking for library containing connect\nconfigure:4197: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:4197: $? = 0\nconfigure:4214: result: none required\nconfigure:4224: checking for library containing nanosleep\nconfigure:4255: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:4255: $? = 0\nconfigure:4272: result: none required\nconfigure:4282: checking for library containing pthread_create\nconfigure:4313: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:4313: $? = 0\nconfigure:4330: result: none required\nconfigure:4340: checking for library containing setupterm\nconfigure:4371: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nUndefined symbols for architecture x86_64:\n\"_setupterm\", referenced from:\n_main in conftest-o7wISP.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nconfigure:4371: $? = 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"fish\"\n| #define PACKAGE_TARNAME \"fish\"\n| #define PACKAGE_VERSION \"1.23.1\"\n| #define PACKAGE_STRING \"fish 1.23.1\"\n| #define PACKAGE_BUGREPORT \"fish-users@lists.sf.net\"\n| #define PACKAGE_URL \"\"\n| #define USE_GETTEXT 1\n| #define HAVE_TRANSLATE_H 1\n| /* end confdefs.h.  */\n| \n| /* Override any GCC internal prototype to avoid an error.\n   |    Use char because int might match the return type of a GCC\n   |    builtin and then its argument prototype would still apply.  */\n| #ifdef __cplusplus\n| extern \"C\"\n| #endif\n| char setupterm ();\n| int\n| main ()\n| {\n    | return setupterm ();\n    |   ;\n    |   return 0;\n    | }\nconfigure:4371: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c -lncurses   >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:4371: $? = 0\nconfigure:4388: result: -lncurses\nconfigure:4398: checking for library containing nan\nconfigure:4429: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c -lncurses  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:4429: $? = 0\nconfigure:4446: result: none required\nconfigure:4466: checking for library containing gettext\nconfigure:4497: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c -lncurses  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nUndefined symbols for architecture x86_64:\n\"_gettext\", referenced from:\n_main in conftest-wWie59.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nconfigure:4497: $? = 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"fish\"\n| #define PACKAGE_TARNAME \"fish\"\n| #define PACKAGE_VERSION \"1.23.1\"\n| #define PACKAGE_STRING \"fish 1.23.1\"\n| #define PACKAGE_BUGREPORT \"fish-users@lists.sf.net\"\n| #define PACKAGE_URL \"\"\n| #define USE_GETTEXT 1\n| #define HAVE_TRANSLATE_H 1\n| #define HAVE_NAN 1\n| /* end confdefs.h.  */\n| \n| /* Override any GCC internal prototype to avoid an error.\n   |    Use char because int might match the return type of a GCC\n   |    builtin and then its argument prototype would still apply.  */\n| #ifdef __cplusplus\n| extern \"C\"\n| #endif\n| char gettext ();\n| int\n| main ()\n| {\n    | return gettext ();\n    |   ;\n    |   return 0;\n    | }\nconfigure:4497: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c -lintl  -lncurses  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:4497: $? = 0\nconfigure:4514: result: -lintl\nconfigure:4526: checking for library containing iconv_open\nconfigure:4557: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c -lintl -lncurses  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nUndefined symbols for architecture x86_64:\n\"_iconv_open\", referenced from:\n_main in conftest-TUn8Yf.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nconfigure:4557: $? = 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"fish\"\n| #define PACKAGE_TARNAME \"fish\"\n| #define PACKAGE_VERSION \"1.23.1\"\n| #define PACKAGE_STRING \"fish 1.23.1\"\n| #define PACKAGE_BUGREPORT \"fish-users@lists.sf.net\"\n| #define PACKAGE_URL \"\"\n| #define USE_GETTEXT 1\n| #define HAVE_TRANSLATE_H 1\n| #define HAVE_NAN 1\n| /* end confdefs.h.  */\n| \n| /* Override any GCC internal prototype to avoid an error.\n   |    Use char because int might match the return type of a GCC\n   |    builtin and then its argument prototype would still apply.  */\n| #ifdef __cplusplus\n| extern \"C\"\n| #endif\n| char iconv_open ();\n| int\n| main ()\n| {\n    | return iconv_open ();\n    |   ;\n    |   return 0;\n    | }\nconfigure:4557: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c -liconv  -lintl -lncurses  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nUndefined symbols for architecture x86_64:\n\"_iconv_open\", referenced from:\n_main in conftest-sLN9vd.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nconfigure:4557: $? = 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"fish\"\n| #define PACKAGE_TARNAME \"fish\"\n| #define PACKAGE_VERSION \"1.23.1\"\n| #define PACKAGE_STRING \"fish 1.23.1\"\n| #define PACKAGE_BUGREPORT \"fish-users@lists.sf.net\"\n| #define PACKAGE_URL \"\"\n| #define USE_GETTEXT 1\n| #define HAVE_TRANSLATE_H 1\n| #define HAVE_NAN 1\n| /* end confdefs.h.  */\n| \n| /* Override any GCC internal prototype to avoid an error.\n   |    Use char because int might match the return type of a GCC\n   |    builtin and then its argument prototype would still apply.  */\n| #ifdef __cplusplus\n| extern \"C\"\n| #endif\n| char iconv_open ();\n| int\n| main ()\n| {\n    | return iconv_open ();\n    |   ;\n    |   return 0;\n    | }\nconfigure:4574: result: no\nconfigure:4581: checking for library containing libiconv_open\nconfigure:4612: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c -lintl -lncurses  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nUndefined symbols for architecture x86_64:\n\"_libiconv_open\", referenced from:\n_main in conftest-8WOXmR.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nconfigure:4612: $? = 1\nconfigure: failed program was:\n| /* confdefs.h */\n| #define PACKAGE_NAME \"fish\"\n| #define PACKAGE_TARNAME \"fish\"\n| #define PACKAGE_VERSION \"1.23.1\"\n| #define PACKAGE_STRING \"fish 1.23.1\"\n| #define PACKAGE_BUGREPORT \"fish-users@lists.sf.net\"\n| #define PACKAGE_URL \"\"\n| #define USE_GETTEXT 1\n| #define HAVE_TRANSLATE_H 1\n| #define HAVE_NAN 1\n| /* end confdefs.h.  */\n| \n| /* Override any GCC internal prototype to avoid an error.\n   |    Use char because int might match the return type of a GCC\n   |    builtin and then its argument prototype would still apply.  */\n| #ifdef __cplusplus\n| extern \"C\"\n| #endif\n| char libiconv_open ();\n| int\n| main ()\n| {\n    | return libiconv_open ();\n    |   ;\n    |   return 0;\n    | }\nconfigure:4612: /usr/bin/clang -o conftest -pipe -O2 -arch x86_64 -I/opt/local/include/ -I/opt/local/include -L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/ conftest.c -liconv  -lintl -lncurses  >&5\nclang: warning: argument unused during compilation: '-R/opt/local/lib/'\nconfigure:4612: $? = 0\nconfigure:4629: result: -liconv\nconfigure:4652: checking for library containing gettext\nconfigure:4700: result: -lintl\nconfigure:4719: checking for library containing gettext\nconfigure:4767: result: -lintl\nconfigure:4776: checking for library containing iconv_open\nconfigure:4824: result: no\nconfigure:4831: error: Could not find an iconv implementation, needed to build fish\n\n## ---------------- ##\n## Cache variables. ##\n## ---------------- ##\n\nac_cv_build=i386-apple-darwin11.4.0\nac_cv_c_compiler_gnu=yes\nac_cv_cxx_compiler_gnu=yes\nac_cv_env_CCC_set=\nac_cv_env_CCC_value=\nac_cv_env_CC_set=set\nac_cv_env_CC_value=/usr/bin/clang\nac_cv_env_CFLAGS_set=set\nac_cv_env_CFLAGS_value='-pipe -O2 -arch x86_64'\nac_cv_env_CPPFLAGS_set=set\nac_cv_env_CPPFLAGS_value=-I/opt/local/include\nac_cv_env_CPP_set=\nac_cv_env_CPP_value=\nac_cv_env_CXXFLAGS_set=set\nac_cv_env_CXXFLAGS_value='-pipe -O2 -arch x86_64'\nac_cv_env_CXX_set=set\nac_cv_env_CXX_value=/usr/bin/clang++\nac_cv_env_LDFLAGS_set=set\nac_cv_env_LDFLAGS_value='-L/opt/local/lib -arch x86_64'\nac_cv_env_LIBS_set=\nac_cv_env_LIBS_value=\nac_cv_env_build_alias_set=\nac_cv_env_build_alias_value=\nac_cv_env_docdir_set=set\nac_cv_env_docdir_value='${datarootdir}/doc/${PACKAGE_TARNAME}'\nac_cv_env_host_alias_set=\nac_cv_env_host_alias_value=\nac_cv_env_target_alias_set=\nac_cv_env_target_alias_value=\nac_cv_file__proc_self_stat=no\nac_cv_host=i386-apple-darwin11.4.0\nac_cv_objext=o\nac_cv_prog_CPP='/usr/bin/clang -E'\nac_cv_prog_SEQ_FALLBACK=' '\nac_cv_prog_ac_ct_CC=/usr/bin/clang\nac_cv_prog_cc_c89=\nac_cv_prog_cc_g=yes\nac_cv_prog_cxx_g=yes\nac_cv_search_connect='none required'\nac_cv_search_gettext=-lintl\nac_cv_search_iconv_open=no\nac_cv_search_libiconv_open=-liconv\nac_cv_search_nan='none required'\nac_cv_search_nanosleep='none required'\nac_cv_search_pthread_create='none required'\nac_cv_search_setupterm=-lncurses\nac_cv_target=i386-apple-darwin11.4.0\n\n## ----------------- ##\n## Output variables. ##\n## ----------------- ##\n\nCC='/usr/bin/clang'\nCFLAGS='-pipe -O2 -arch x86_64 -I/opt/local/include/'\nCPP='/usr/bin/clang -E'\nCPPFLAGS='-I/opt/local/include'\nCXX='/usr/bin/clang++'\nCXXFLAGS='-pipe -O2 -arch x86_64 -I/opt/local/include/ -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64 -fno-optimize-sibling-calls -Wall'\nDEFS=''\nECHO_C='\\c'\nECHO_N=''\nECHO_T=''\nEGREP=''\nEXEEXT=''\nGREP=''\nHAVE_GETTEXT=''\nINSTALL_DATA='${INSTALL} -m 644'\nINSTALL_PROGRAM='${INSTALL}'\nINSTALL_SCRIPT='${INSTALL}'\nLDFLAGS='-L/opt/local/lib -arch x86_64 -L/opt/local/lib/ -R/opt/local/lib/'\nLDFLAGS_FISH=' -rdynamic'\nLIBOBJS=''\nLIBS='-lintl -lncurses '\nLIBS_FISH='-liconv -lintl -lncurses '\nLIBS_FISHD=''\nLIBS_FISH_INDENT='-lintl -lncurses '\nLIBS_FISH_PAGER=''\nLIBS_MIMEDB=''\nLIBS_SET_COLOR=''\nLTLIBOBJS=''\nOBJEXT='o'\nPACKAGE_BUGREPORT='fish-users@lists.sf.net'\nPACKAGE_NAME='fish'\nPACKAGE_STRING='fish 1.23.1'\nPACKAGE_TARNAME='fish'\nPACKAGE_URL=''\nPACKAGE_VERSION='1.23.1'\nPATH_SEPARATOR=':'\nSEQ_FALLBACK=' '\nSHELL='/bin/sh'\nXSEL=''\nXSEL_BIN=''\nXSEL_MAN=''\nXSEL_MAN_PATH=''\nac_ct_CC='/usr/bin/clang'\nac_ct_CXX=''\nbindir='${exec_prefix}/bin'\nbuild='i386-apple-darwin11.4.0'\nbuild_alias=''\nbuild_cpu='i386'\nbuild_os='darwin11.4.0'\nbuild_vendor='apple'\ndatadir='${datarootdir}'\ndatarootdir='${prefix}/share'\ndocdir='${datarootdir}/doc/${PACKAGE_TARNAME}'\ndvidir='${docdir}'\nexec_prefix='NONE'\nhost='i386-apple-darwin11.4.0'\nhost_alias=''\nhost_cpu='i386'\nhost_os='darwin11.4.0'\nhost_vendor='apple'\nhtmldir='${docdir}'\nincludedir='${prefix}/include'\ninfodir='${datarootdir}/info'\nlibdir='${exec_prefix}/lib'\nlibexecdir='${exec_prefix}/libexec'\nlocaledir='${datarootdir}/locale'\nlocalstatedir='${prefix}/var'\nmandir='${datarootdir}/man'\noldincludedir='/usr/include'\noptbindirs=' /opt/local/bin'\npdfdir='${docdir}'\nprefix='/opt/local'\nprogram_transform_name='s,x,x,'\npsdir='${docdir}'\nsbindir='${exec_prefix}/sbin'\nsharedstatedir='${prefix}/com'\nsysconfdir='${prefix}/etc'\ntarget='i386-apple-darwin11.4.0'\ntarget_alias=''\ntarget_cpu='i386'\ntarget_os='darwin11.4.0'\ntarget_vendor='apple'\n\n## ----------- ##\n## confdefs.h. ##\n## ----------- ##\n\n/* confdefs.h */\n#define PACKAGE_NAME \"fish\"\n#define PACKAGE_TARNAME \"fish\"\n#define PACKAGE_VERSION \"1.23.1\"\n#define PACKAGE_STRING \"fish 1.23.1\"\n#define PACKAGE_BUGREPORT \"fish-users@lists.sf.net\"\n#define PACKAGE_URL \"\"\n#define USE_GETTEXT 1\n#define HAVE_TRANSLATE_H 1\n#define HAVE_NAN 1\n\nconfigure: exit 1\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6185716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6189142", "body": "Can you please attach a sample of fishd and/or the inoperable fish instance?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6189142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6208829", "body": "Yikes, that sounds bad. Thanks for reporting this.\n\nWe're actually using the \"add-shell\" script from Debian.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6208829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6208849", "body": "I think this is a request to initially populate history from bash.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6208849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6214214", "body": "I learned about RPROMPT just today. It's awesome and I'd love to implement it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6214214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6214235", "body": "^ is a redirection (like |) for I believe stderr.  So this is behaving as designed.\n\nYou can defeat it through quotes: git checkout \"HEAD^\"\n\nLeaving this bug open because it is annoying. Anyone please chime in if you have an idea for fixing this.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6214235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6216537", "body": "As it says, looks like you need to install curses. try something like this:\n\nsudo apt-get install libncurses5-dev libncursesw5-dev\n\nHope that helps!\n\nOn Jun 8, 2012, at 7:32 PM, Jay Kruer reply@reply.github.com wrote:\n\n> Here's the output of the configure. Anyone have an idea of what may be causing this?\n> \n> ```\n> checking if autoconf needs to be run... no\n> checking if autoheader needs to be run... no\n> checking for /usr/pkg/include include directory... no\n> checking for /usr/pkg/lib library directory... no\n> checking for /usr/pkg/bin command directory... no\n> checking for /sw/include include directory... no\n> checking for /sw/lib library directory... no\n> checking for /sw/bin command directory... no\n> checking for /opt/include include directory... no\n> checking for /opt/lib library directory... no\n> checking for /opt/bin command directory... no\n> checking for /opt/local/include include directory... no\n> checking for /opt/local/lib library directory... no\n> checking for /opt/local/bin command directory... no\n> checking for g++... g++\n> checking whether the C++ compiler works... yes\n> checking for C++ compiler default output file name... a.out\n> checking for suffix of executables... \n> checking whether we are cross compiling... no\n> checking for suffix of object files... o\n> checking whether we are using the GNU C++ compiler... yes\n> checking whether g++ accepts -g... yes\n> checking for gcc... gcc\n> checking whether we are using the GNU C compiler... yes\n> checking whether gcc accepts -g... yes\n> checking for gcc option to accept ISO C89... none needed\n> checking how to run the C preprocessor... gcc -E\n> checking for a BSD-compatible install... /usr/bin/install -c\n> checking for seq...  \n> checking if seq comes from a previous fish version... no\n> checking if we are compiling against glibc... yes\n> checking build system type... x86_64-unknown-linux-gnu\n> checking host system type... x86_64-unknown-linux-gnu\n> checking target system type... x86_64-unknown-linux-gnu\n> checking if we are under Solaris... no\n> checking if we are using non varargs tparm.... yes\n> checking if we are under BSD... no\n> checking for /proc/self/stat... yes\n> checking for library containing connect... none required\n> checking for library containing nanosleep... none required\n> checking for library containing pthread_create... -lpthread\n> checking for library containing setupterm... no\n> configure: error: Could not find a curses implementation, needed to build fish\n> ```\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ridiculousfish/fishfish/issues/82\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6216537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6216685", "body": "alias is really confusing to people accustomed to other shells!\n\nTo be clear, fish has no notion of aliases, only functions. There's a function named 'alias' which can be used to create functions. To see all functions, run 'functions'\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6216685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6226624", "body": "Thanks everyone!\nRebased and fixed with commit 96a4b7eaa76a44cf17f8d52af985801e1b11fb9a\nI also added the comment to the beta.html page as requested\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6226624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6226662", "body": "Thank you! Merged with rebase here:\n\nTo git@github.com:ridiculousfish/fishfish.git\n   96a4b7e..6e65cfc  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6226662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6226813", "body": "This proxy icon stuff is awfully nice, and I'd be quite happy if fish supported it.\n\nThe two solutions discussed here are:\n1. Update `fish_prompt` to output the proper control sequence, and teach screen.cpp how to ignore it, like it ignores color control sequences, or\n2. Update `fish_title` to terminate the control sequence in which it is invoked, and create a new one (which the caller then terminates).\n\nThese are very clever hacks, but they're both too kludgey to go into trunk. I'd suggest adding a new function called `reader_write_represented_url()` or something similar, which would be invoked along with `reader_write_title()`. It could use similar heuristics, perhaps inspecting `$TERM_PROGRAM`. This would be cleaner, and also save us a bunch of forks. I'd be thrilled to integrate a change like that.\n\nIf you decide to tackle this, take care with the URL encoding - OS X supports full Unicode paths after all.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6226813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6226988", "body": "There were a few issues with the suggested text (like mistaking zsh for bash). I added this text:\n\n> To switch your default shell back, you can run:\n> \n>  % chsh -s /bin/bash\n> \n> Substitute /bin/bash with /bin/tcsh or /bin/zsh as appropriate.\n\nThe commit was 4e2c7c57d7df1d4975a87d8ddedb8ecc6d44c4d6 . Thanks for suggesting we fix this.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6226988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6227052", "body": "It's not exec, it's the {}. fish expands empty braces, bash does not.\n\nIf you quote it '{}', it should work as you expect.\n\nI'll leave this open to consider matching bash's behavior here. It's not clear to me that expanding empty braces is desirable.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6227052/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6227436", "body": "Thank you, fixed with this commit:\n\nTo git@github.com:fish-shell/fish-shell.git\n   4e2c7c5..4ac0115  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6227436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6233980", "body": "Please use Activity Monitor to take a sample of fish. You can do that by selecting fish in Activity Monitor, and clicking the Sample Process toolbar item, and attach the resulting output. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6233980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6234207", "body": "Fixed per Siteshwar's comment\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6234207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6234242", "body": "I believe this is fixed per adisbladis's changes.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6234242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6258357", "body": "Merge-button merged, thank you\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6258357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260096", "body": "The default history search (up/down arrow) does a substring match, just like bash.\nIs the request that autosuggestions also do a substring match? That seems like it would be a confusing UI.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260170", "body": "Thank you. Can you please also show a sample from 'fishd'?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260239", "body": "This was fixed in open beta r2\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260396", "body": "I don't think this is expected. After all, what's the point of having a hidden directory if it doesn't hide? bash shows them all, but I'd say bash is being dumb.\n\n(If you start with a dot, then it will suggest hidden directories.)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260406", "body": "No change that I know of. This would be nice to add.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260437", "body": "Looks OK to me (19.0.1084.56) but if position: relative helps break anything I'll try it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260448", "body": "+1 to siteshwar's suggestion. Feel free to implement that if you get a chance.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260481", "body": "RPROMPT may be easy. I'll aim for fish 2.0.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260484", "body": "Aiming for 2.0\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260531", "body": "This seems to happen with bash too, so I don't think it's specific to fish.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260564", "body": "Let's aim for a history importer that handles bash and fish 1.x\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260644", "body": "Seems like something we could document.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260666", "body": "So that's how you're supposed to do that...I wondered what that code was for.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260695", "body": "I don't understand - I don't see any extra space. Maybe attach a screenshot?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260710", "body": "Thanks Siteshwar; seems fixed to me.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260857", "body": "https://github.com/fish-shell/fish-shell/pull/58 was merged.\nThanks for this report.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260865", "body": "Thanks. We ought to not overwrite built-in completions.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6260865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261060", "body": "Should have been merged with this commit:\nca61d0e..64afada fish_fish \u2013> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261074", "body": "I believe this was fixed by the above commit in open beta r2\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261123", "body": "Does not reproduce with OS X Lion. Which OS are you seeing this on?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6368966", "body": "Thank you for writing this. Merged after rebase here:\n\nTo git@github.com:fish-shell/fish-shell.git\n   18f04ad..dbde703  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6368966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369078", "body": "Merged with rebase here:\n\nTo git@github.com:fish-shell/fish-shell.git\n   dbde703..f2846a0  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369214", "body": "I'd love to get these completions working with OS X, but I see a few problems with these changes:\n- pgrep is not installed by default on OS X\n- __fish_complete_proc doesn't seem to return many processes. (I think you need to pass -x to ps)\n\nPlease address these, and I'll be glad to merge.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369433", "body": "Thank you for this. Merged with rebase here:\n\nTo git@github.com:fish-shell/fish-shell.git\n   f2846a0..3a94f6e  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369488", "body": "Can you please explain the significance of the change in output.cpp:\n\nhttps://github.com/maxfl/fish-shell/commit/234ed8f5dab209fd657ccaf0dd23d636d2a06355\n\nOr did you mean to revert this change as well?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369514", "body": "I am going to merge all the changes, except for output.cpp, which I believe was added by mistake. I will use a 'squash merge', since I think the history (including the backed-out commits) should not go into trunk.\n\nsquash-merged here:\nTo git@github.com:fish-shell/fish-shell.git\n   3a94f6e..f2b5292  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6369514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374542", "body": "seq is in /usr/local/bin for me on my 10.6 machine. What's in your /usr/local/bin? I wonder if it got installed by something else...\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374580", "body": "maxfl provided an image: http://imgur.com/OLo0t\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374596", "body": "Now I get it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374875", "body": "Should be fixed with this commit\nTo git@github.com:fish-shell/fish-shell.git\n   f2b5292..6dd0013  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374979", "body": "Reproduces for me on Ubuntu, not on OS X\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374985", "body": "Probably tty_tickets is disabled by default on OS X\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6374985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375253", "body": "I think what's going on here is that the tty's modification date as reported by stat is changing under fish, but not under bash.\n\nThis bug was introduced by a sudo change http://www.sudo.ws/repos/sudo/rev/f9aec9ab9054\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375333", "body": "Another report of the bug in sudo: https://groups.google.com/forum/?fromgroups#!topic/linux.debian.bugs.dist/-ikqndL6oLw\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375729", "body": "This was caused by fish's futimes() call. I think we can disable those calls safely.\nTo git@github.com:fish-shell/fish-shell.git\n   6dd0013..1d54bff  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375748", "body": ". is the builtin_source function.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375775", "body": "I believe all of fish's configuration is done via environment variables; their default values come from the installed paths at build time, but they can be overridden.\n\nThese are the ones that may need to be changed:\n\n__fish_datadir\n__fish_help_dir\n__fish_sysconfdir\nfish_complete_path\nfish_function_path\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375823", "body": "Bug is present in fish 1.x as well\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375888", "body": "Nope, it's not, my mistake.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375979", "body": "std::map::insert doesn't overwrite a value already in the map. Dumb!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375987", "body": "Fixed via afd8d2f9bae14cb3c263987a01aedb748b975176\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375996", "body": "This works for me:\n\n```\nswitch 'aaa*'\n    case 'aaa*'\n    echo 1\nend\n```\n\ndoes it not work for you?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6375996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376060", "body": "Yes, dhasenan has it right. The autosuggestions are case-insensitive. The text shown before the cursor matches the case of the autosuggestion, not the case of what you typed. However, the \"true\" command is what you typed, and if you press return without accepting the autosuggestion, it uses the case of what you typed (and changes what's printed to reflect that).\n\nSo for example, if you type \"make install\", it may show \"make INSTALL\" as an autosuggestion, but when you hit return it will show (and run) \"make install\".\n\nOriginally, it always showed the case of what you typed and the remainder of the autosuggestion in its case, but it looked really weird - e.g. \"make insTALL\".\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376067", "body": "For jab's original issue of not seeing completion-based autosuggestions on case insensitive filesystems, I think we can fix that.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376481", "body": "The original issue should be addressed by this commit:\nTo git@github.com:fish-shell/fish-shell.git\n   afd8d2f..6cf4207  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378763", "body": "Great investigation! Absolutely we should replace the uses of DATADIR and SYSCONFDIR in read_init().\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378766", "body": "I have not created seq...maybe Xcode installs it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378816", "body": "fishd is freaking out because it thinks it's calling wgettext after fork (when in reality it just never set up the fork guards).\n\nLet's relax the fork guards.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378821", "body": "Thanks for the report. This should do it:\n\nTo git@github.com:fish-shell/fish-shell.git\n   6cf4207..34fd8e0  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6385143", "body": "I think config.fish already does the right thing:\n\n```\nif not set -q __fish_datadir\n    set -g __fish_datadir /usr/local/share/fish\nend\n```\n\nThe broken code is in `read_init()`, which ought to respect the value of __fish_datadir.\n\nIn other words, the paths constructed in `read_init` should try using the values of the __fish_datadir and __fish_sysconfdir variables, and only use the compiled-in values as a fallback. That could be fixed directly in `read_init` - no messing with autotools required.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6385143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6385200", "body": "I think this was the extra format specifier in the format string (which was present in the original fish)\nFixed by eebe12684275b11f8b284ba9dd1a69b865855106\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6385200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3105598", "body": "Glad someone is watching!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3105598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3990030", "body": "Indentation fixed as df0aaa1ebe6d0ca520a866be2f402d41bcad280c\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3990030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4213552", "body": "Nope, I'm just sloppy.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4213552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4316817", "body": "I think it doesn't exist yet :) I tried to find a nice little PNG of the classic \"arrow in a square\" to represent external links, but I was unble to find one, so I started drawing my own.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4316817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4349843", "body": "I very badly want to reproduce this. Which version of clang did you use and how did you install it?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4349843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4351430", "body": "I was able to reproduce this with clang 3.4. Very mysterious.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4351430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4352583", "body": "I am about 80% sure this is a clang bug. [Here is the assembly](https://gist.github.com/ridiculousfish/7017342) for the relevant function compiled with -fsanitize=undefined at -O1. The key check is at line 46:\n\n```\nsetne %al\ntestb   $7, %r15b\nsete    %bl\nandb    %al, %bl\nje  .LBB40_20\n```\n\nThat sets %al to 1 if ZF was 0. It then does a bitwise AND with 7 and %r15 (which is the `this` pointer), and sets %bl to 1 if the AND resulted in 0. Lastly it ANDs %al and %bl together, and reports an error if you get zero.\n\nWhat this is trying to do is check for whether `this` is NULL, or whether `this` has any of its three LSB set (in which case it's not a valid object pointer). But what's wrong here is that the null check doesn't actually exist. Usually there's a `testq %r15, %r15` above it, but in this case there's not.\n\nSo instead of the missing null check, we end up using whatever happens to be in ZF, which is set on line 30. That compares %al to zero. %al is a \"hidden parameter\" that stores the number of vector registers used in the variadic argument passing; since we didn't pass any vectors or floating point values, %al is zero, and that ends up being the \"null check.\"\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4352583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4352923", "body": "[Reduced test case](https://gist.github.com/ridiculousfish/7017899). Definitely a clang bug. I'll file it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4352923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4353262", "body": "Filed as http://llvm.org/bugs/show_bug.cgi?id=17605 . Whee!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4353262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5277633", "body": "Yikes. We should fix the bindings system to not have this order dependency!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5277633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6908831", "body": "Good thought, fixed as 18c1b127418e211583968db6365a2205c91a794c\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6908831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6910939", "body": "Derp.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6910939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7368056", "body": "Yes, thanks! Fixed as fe68d30be97853865b24ad5f5998d3e50769f860\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7368056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858247", "body": "This reproduces for me sporadically on my OS X machine. Both bind.expect and read.expect can show a failure. The easiest way I've found to reproduce it is to go into the tests directory and run `../fish < ./test.fish`; it then fails maybe 1/3rd of the time. I have never seen it fail when invoked directly `../fish -n ./interactive.fish`, only as part of test.fish.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7858247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7934304", "body": "I think it's just whatever order the filesystem returns them in, which is non-determinstic. This change was half-baked and I'm going to revert it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7934304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7951722", "body": "Comments do show up in the parse tree, but as a special type of node that can appear anywhere, and isn't a child of anything. Syntax highlighting is an example of them in action. It's a pretty clumsy approach but I haven't thought of a better one.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7951722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7966578", "body": "It's sort of weird: comments appear as disconnected nodes, so they aren't a child of any node. This means they will not be discovered by walking the parse tree as a tree, only by enumerating all the nodes. The dump walks the parse tree as a tree, so it won't show comments or other special node types.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7966578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8234602", "body": "Thanks, I'll take a look tonight. I don't know why that SIGIO call is there at all.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8234602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8235717", "body": "Ok, I see it. Here's what the code was before:\n\n```\n    while (1)\n    {\n        switch (pid=waitpid(-1,&status,WUNTRACED|WNOHANG))\n        {\n            case 0:\n            case -1:\n            {\n                errno=errno_old;\n                return;\n            }\n            default:\n                handle_child_status(pid, status);\n                break;\n        }\n    }\n    kill(0, SIGIO);\n    errno=errno_old;\n```\n\nDespite appearances, the two lines at the bottom are unreachable. It has been this way since fish 1.x. In my recent fix, I naively reimplemented those lines thinking that they were supposed to be executed unconditionally. Let's just nix them.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8235717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8237442", "body": "090f027de179f5bb92f07e5c947f3f273229d840 should fix the SIGIO issue, though the test still fail on my Linux box - still investigating\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8237442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496600", "body": "Yes, it falls back to `~/.config/fish/`.\n\nThe named pipe is much less security-sensitive than the fishd socket. It's used only as a notification mechanism, so an attacker cannot inject or read variable data, other for the fact that some change has occurred. Still I think you're right that we should use a secure path, so let's reintrouce `check_runtime_path`  as you say.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496714", "body": "Thanks, that makes sense. I recently encountered a system where the home directory was not writable at all (root on a ChromeOS device). Of course that system won't be able to save variables, but it does illustrate your point.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496890", "body": "That change is in d944add7826706ec42cb3c5b8858286545649103\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/8496890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9089305", "body": "Derp, thanks. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9089305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9322046", "body": "Looks like it's been this way for a very long time, since 7a8b7201\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9322046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11123695", "body": "Good point. It might be shorter too: `function fish_title; end; funcsave fish_title`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11123695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11311499", "body": "I think so, tab completing quoted strings is important.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11311499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11319680", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11319680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12411347", "body": "the e.g. was lost; what was it?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12411347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13232361", "body": "For sure I don't mean to overwrite authorship on any commits! This is a fantastic contribution, and I'm just tweaking it in some areas where my second pair of eyes can spot improvements.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13232361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13232494", "body": "I see that the squash merge is attributed to me, which doesn't seem right. I'll rewrite the history of string-staging to rightly attribute it to @msteed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13232494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13244793", "body": "That's very reasonable.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13244793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13459789", "body": "D'oh, in my code review I thought I had FIXED a typo!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13459789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15769097", "body": "My memory is that abbr is missing a fast-path check for \"exact same abbreviation already exists\" which in principle ought to be very cheap. I should add that.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15769097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153288", "body": "The point of staging this restyling is to collect this sort of feedback. If contributors use tools that benefit from these sort of comments (headerdoc in Xcode) then it does seem like a shame to lose them - I didn't realize until now that they were used by tools other than Doxygen. Maybe we should be applying them instead of stripping them.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153388", "body": "@floam Do you use the IDE or text editor integration with Doxygen-style comments, or is it something you're aware of but don't personally use?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17153388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17278187", "body": "Oh wow, shame on me!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17278187/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17602983", "body": "I'm not sure this actually improves anything - -f avoids prompting for confirmation, but I think it's better to fail if it contains a file with surprising permissions.\n\nWhat do you think of:\n\n```\nrm -f $tmpname > /dev/null\nrmdir $tmpdir > /dev/null\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17602983/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7745402", "body": "I don't believe it was actually new to that commit. The idea is to indent all of the lines in multi line commands by the same amount (the prompt width).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7745402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36591514", "body": "Unfortunate to lose this nice wrapping\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36591514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36591647", "body": "Oh dear....\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36591647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36591785", "body": "Unfortunate to break this 'and' chaining across two lines\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36591785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36592267", "body": "The completion is definitely broken.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/36592267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "ulidtko": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3681", "title": "add more flexible, richer, globbing support including exclusion patterns", "body": "There has been a considerable discussion on [globbing][] with excludes / negative matches; i.e. something like\r\n\r\n    find images -mindepth 1 -maxdepth 1 -type f -a ! -name '*.jpg'\r\n\r\nor\r\n\r\n    rm $(ls dir | grep -v '\\.gz$')\r\n\r\nbut less ugly, failure-prone (we [should never][ls] pipe ls output) and perhaps with more concise and handsome syntax.\r\n\r\nThere's clearly a case for *glob extensions* of this kind; apparently that's why bash has `shopt -s extglob` and zsh has `setopt EXTENDED_GLOB`. However, these solutions are perhaps better viewed as *how not to* examples: they never stop producing more and more extensions with practically unflippable \"options\", they are arcane, hard to remember, hard to search for, unsuitable for recursive directory matches, interfere with other syntax (`!` is used for history in interactive bash, as well as for negative globs), and so on.\r\n\r\nSo, in #1444 it was decided not to go in this same direction. Yet another \"extended glob\" syntax would've make things worse for everyone.\r\n\r\nThere has also been related discussion in PR #354 which was never merged.\r\n\r\n[globbing]: https://en.wikipedia.org/wiki/Glob_(programming)\r\n[ls]: http://porkmail.org/era/unix/award.html#ls\r\n\r\n----\r\n\r\nBut there needs to be a good answer to *How do I `cp` all the files in `dirA` except those ending in `.iso`, in Fish?* which hopefully doesn't involve `rsync`, `find` or `grep -v`.\r\n\r\nIs it a `glob` subcommand? Is it a `filter` built-in for arrays? Is it a regex matcher? Does it allow nested double negations, alternatives and the basic globbing `*`?\r\n\r\nI don't, and can't possibly, know. Your proposals welcome. I'm creating this issue to keep the problem open, and to have a place to track any progress.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3681/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thibran": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3664", "title": "fish snap package", "body": "It would be nice if fish would be released as [snap package](http://snapcraft.io/docs) too. Snap packages are confined and can be installed on a number of Linux distributions (Ubuntu, Arch, Debian, Gentoo, Fedora, Suse..). If you are interested I could start working on a snap, but would probably need some help.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sagebind": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3655", "title": "fish should handle CRLF line endings in a manner consistent with bash/zsh", "body": "- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*: 2.4.0\r\n\r\n**OS/terminal used**: Alpine Linux / GNOME terminal\r\n\r\nEscaping line endings to spread commands across multiple lines does not work as expected when using CRLF line endings. I have not verified this, but my understanding is that this happens under any OS.\r\n\r\nThis has caused much headache for us ([Oh My Fish](https://github.com/oh-my-fish/oh-my-fish)) in the past when users clone our repo with Git set to convert to CRLF on checkout. Recently [solved using .gitattributes](https://github.com/oh-my-fish/oh-my-fish/pull/458), but very much seems like a workaround for unexpected behavior.\r\n\r\nI understand that using backslashes on line endings to write commands across multiple lines is probably a side effect of escape handling, but it is perceived as a feature that should be fixed to escape an entire CRLF or just CR sequence if present.\r\n\r\n## Reproduction steps\r\nExample command that demonstrates the issue:\r\n\r\n```fish\r\necho echo this should print exit: \\\\\\r\\nexit\\r\\n | fish\r\n```\r\n\r\nExecutes a script like this:\r\n\r\n```fish\r\necho this should print exit: \\\r\nexit\r\n```\r\n\r\nbut with using CRLF line endings. The LF line ending version works as expected:\r\n\r\n## Results\r\nExpected:\r\n\r\n```fish\r\n~ $ echo echo this should print exit: \\\\\\r\\nexit\\r\\n | fish\r\nthis should print exit: exit\r\n```\r\n\r\nActual:\r\n\r\n```fish\r\n~ $ echo echo this should print exit: \\\\\\r\\nexit\\r\\n | fish\r\nthis should print exit:\r\n```", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "conn": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3635", "title": "\"TMOUT\" implementation", "body": "I've noticed that fish doesn't have a [TMOUT](http://hyperpolyglot.org/unix-shells#special-var) setting/variable like other shells do. This is desirable to me as I would want any shells that were accidentally left open to be automatically closed. It would be great to have something like this in fish as well.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vbextreme": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3625", "title": "fish_config should have a text UI", "body": "fish implements fish_config command that lets you view and select, but not editing, configurations.\r\n\r\nIt looks very cute, but to create a web server and then open a web browser to display the configurations seem a choice a little absurd.\r\nI was expecting something more consistent as a classic ncurses menus, this would also permit to change configurations via tty, which is now unusable.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "introom": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3590", "title": "error message: There is no fish_key_bindings function called: ''", "body": "Behavior:\r\nFish will output:\r\nThere is no fish_key_bindings function called: ''\r\nKeeping fish_default_key_bindings\r\n\r\n\r\nHow to reproduce:\r\n0. make sure fish_key_bindings is not set in configuration file.\r\n1. in tty1, run fish\r\n2. in tty2, delete fishd.* files, run fish\r\n\r\ntty1 will have:\r\nThere is no fish_key_bindings function called: ''\r\nKeeping fish_default_key_bindings\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3584", "title": "problem on completion with '-' and '_'", "body": "I have three functions, namely foobar, foo_xxx, and foo_yyy\r\n\r\nwhen I type: foo-<TAB>, fish won't show up with foo_xxx and foo_yyy.\r\n\r\nthis also indicates, typing fo-xx<TAB> won't complete.\r\n\r\n'_' is mostly used in functions, the above issues will all resolve if we define the function as foo-xxx, foo-yyy at first hand, but that violates some how the function naming style.\r\n\r\n\r\nis fish able to automatically convert between  -/_ ?\r\n\r\nthis really saves typing pain.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "purpleP": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3567", "title": "Real time autocomplete (emacs ido style or popup list)", "body": "I haven't used your shell, but AFAIK for some reason you still don't have this feature.\r\n\r\nAFAIK you already have zsh-style tab completion that can show all available options right? So if I would type (| means cursor)\r\n`~ cd ~|`\r\nand hit `TAB` you will show all options like\r\n`~ cd ~|\r\n~/Downloads    ~/Documents\r\n`\r\nright?\r\n\r\nSo why not show them all always without me needing to press tab?\r\nI'm using zsh now and it really bothers me that in the 21st century at post Intellij area I have to press tab to see options in my shell.\r\nI mean, how is that even possible, are shell developers still leave in a cave or something?\r\n\r\nOn a serious note, this really hurts productivity if you're a fast touch typist.\r\n\r\nSo I'll explain what I'd like to see in shell.\r\n\r\n```\r\n~ tree\r\n\u2514\u2500\u2500 autocomplete\r\n    \u251c\u2500\u2500 code\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 other\r\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 some\r\n    \u2514\u2500\u2500 comics\r\n        \u251c\u2500\u2500 bar\r\n        \u2514\u2500\u2500 foo\r\n\r\n7 directories, 0 files\r\n\r\n```\r\nThe shell always shows available alternatives inside `{ option1 | option2 | option3 }` and highlights the first option.\r\n```\r\n~ cd | { **autocomplete** } # ** means highlighting\r\n```\r\npressing enter now means executing `cd autocomplete`, meaning enter would always choose the first option (thinking about it in that case its probably better to wait for at least one character typed).\r\n`\r\n~ cd a { **autocomplete** }\r\n`\r\npressing `/`. For `cd` this means accept suggestion but the command isn't complete yet.\r\n`\r\n~ cd autocomplete/ { **code** | comics }\r\n`\r\nuser can chose options with fuzzy-mathching.\r\n`\r\n~ cd autocomplete/cm {**comics**}\r\n`\r\nAgain, pressing `/` accepts completion but not executes current command\r\n`\r\n~ cd autocomplete/comics/ {**bar**}\r\n`\r\nPressing enter now executes `cd autocomplete/comics/bar` as desired.\r\nWith zsh I could also do this more effectively If I'm already familiar with content of the folders `cd ~/a/c/b TAB` would transform into `cd ~/autocomplete/comics/bar`, but that's very fragile thing and I rarely use it (doesn't work well with folder names containing `_-` or anything like that.\r\nThe number of keypresses it would take with my method is 8.\r\nIf I would do the same while having to press tab every time I want to see options or chose between them this would take 10 which isn't much of a difference in this case, but the difference gets bigger with a bigger number of options.\r\n\r\nWhen the number of options is big almost every time I try to chose one by hitting tab multiple times I miss the options I need by one keypress and need to use arrow keys to get back and it's an awful experience.\r\n\r\nOne way in which this way of displaying options would fail is when the options list is very big and or when the options themselves are big like completions for command options. In this case it's better to use popup menu, but with same principles.\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sorahn": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3566", "title": "Keep part of the prompt_pwd the full length.", "body": "Hey guys, I am trying to have my `prompt_pwd` command spit out something like this `~/s/[project]/f/o/o/b/a/r` and I was directed here to try and figure out a generic way to do it.\r\n\r\nIdeally the directory that it would keep is the top level folder once you're inside any git repository.\r\n\r\nIdeas I had:\r\n* some `fish_expand_directory_in_pwd_by_index` setting that is set to some int. (lazy copout to a real solution)\r\n* testing for existence of a .git directory? (is this too expensive?)\r\n* string matching with something like `git rev-parse --show-toplevel`\r\n\r\nLet me know what you guys think.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "artagnon": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3551", "title": "up-or-search doesn't seem to work even when completions are available", "body": "<kbd>ctrl</kbd>+<kbd>p</kbd> has no effect, although <kbd>ctrl</kbd>+<kbd>e</kbd> would complete it just fine. This happens for many commands; I think this is a history bug? I don't think my `history --merge` has anything to do with it. It works sometimes though.\r\n\r\n```\r\nbind \\cp 'history --merge ; up-or-search'\r\n```\r\n\r\n<img width=\"138\" alt=\"screenshot 2016-11-14 14 50 53\" src=\"https://cloud.githubusercontent.com/assets/37226/20280448/8c1ca586-aa7a-11e6-98e4-58bfe4b12e06.png\">\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3550", "title": "alt-left/right overwrites fish_prompt without clearing trailing characters", "body": "I have a simple prompt:\r\n```\r\nfunction fish_prompt\r\n\tset_color yellow\r\n\techo (pwd) | sed -e \"s|^$HOME|~|\" -e \"s|^/sandbox/rramacha|\\$s|\"\r\n\tset_color normal\r\n\techo '$ '\r\nend\r\n```\r\n\r\nWhen I alt-left from `~/src/llvm/tools/polly/test/ScopDetect` to `~/src/jsoncpp`, my prompt is mangled:\r\n```\r\n~/src/jsoncppols/polly/test/ScopDetect\r\n$\r\n```\r\n\r\nNot sure how to work around this except by padding the path with trailing spaces?", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Siecje": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3549", "title": "Show suggestions after Backspace", "body": "- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*:\r\nfish, version 2.4.0\r\n\r\n**OS/terminal used**: \r\nLinux Mint 18 / Gnome terminal\r\n\r\nIf there is a suggestion but you typo a character and then backspace. It should have the suggestion that was there at the point before the typo and backspace.\r\n\r\n## Reproduction steps\r\n1. mkdir -p one/two\r\n2. type (cd one/)\r\n3. There will be a suggestion for (cd one/two)\r\n4. type any character besides 't'\r\n5. The suggestion will dissapear\r\n6. Backspace the character\r\n7. There is still no suggestion\r\n\r\nIt would be nice if suggestions were calculated when you press ```Backspace```.", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/57826835", "body": "This check if the `hg prompt` command exists, doesn't work, it will always be false.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/57826835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "kbauer": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3540", "title": "enhance `set` with a flag to force updating the enclosing scope (augments `function --no-scope-shadowing`)", "body": "When using the `-S` parameter for functions to disabled scope-shadowing, naming conflicts can occur. As a more robust alternative, a mechanism like `tcl`'s upvar would be useful, presumably implemented as option to the `set` builtin. \r\n\r\n## Reproduction steps\r\nCreate the following fish script file:\r\n\r\n    #!/usr/bin/env fish\r\n\r\n    function append -S -a var item\r\n        set $var $$var $item\r\n    end \r\n\r\n    set x xx; append x xy\r\n    echo \"Expecting x='xx xy', got x='$x'\"\r\n    set var xx; append var xy \r\n    echo \"Expecting var='xx xy', got var='$var'\"\r\n    set item xx; append item xy\r\n    echo \"Expecting item='xx xy', got item='$item'\"\r\n\r\nand run it. The output will be \r\n\r\n    Expecting x='xx xy', got x='xx xy'\r\n    Expecting var='xx xy', got var='xx'\r\n    Expecting item='xx xy', got item='xx'\r\n\r\n-------\r\n\r\n<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\r\n- [x] Have you checked if problem occurs with [fish 2.4.0](/fish-shell/fish-shell/releases/tag/2.4.0)?\r\n- [x] Tried fish without third-party customizations *(check `sh -c 'env HOME=$(mktemp -d) fish'`)*?\r\n\r\n**fish version installed** *(`fish --version`)*: fish, version 2.4.0-111-g7356987\r\n\r\n**OS/terminal used**: Windows 10, mintty", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3540/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "karate": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3537", "title": "Ctrl-C overwrites multi-line prompt", "body": "**fish version installed** *(version 2.4.0)*:\r\n\r\n**OS/terminal used**: Fedora 24, gnome-terminal\r\n\r\nWhen using a multi-line prompt, pressing ctrl-c will not preserve previously written command\r\n\r\n## Reproduction steps\r\n1. Change `fish_prompt` function to show newlines\r\n```\r\nfunction fish_prompt\r\n  echo (whoami)@(hostname)\r\n  echo '$ '\r\nend\r\n```\r\n2. Re-run fish, and type `asdfasdf[CTRL-C]`\r\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3537/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paradox460": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3481", "title": "Vi-mode doesn't play well with multi-line prompts", "body": "I have a [multi-line prompt](https://github.com/paradox460/paradox-theme), where there is information displayed on one line, and the user input goes on the second. Basically handled through something like this:\n\n``` fish\necho -n -e -s (pwd) (__fish_git_prompt)\"\\n$\"\n```\n\nThis has worked without flaw in vi-mode in the past. As of version `2.3.1-667-g668de88`, and likely caused by https://github.com/fish-shell/fish-shell/issues/3215, switching modes results in the whole prompt being pushed down, not redrawn over the existing prompt.\n\n```\n<insert mode:>\n[ i ] ~/developer/docker\n$ docker-compose start api\n\n<switching to normal mode>\n[ i ] ~/developer/docker\n[ n ] ~/developer/docker\n$ docker compose start api\n```\n\nAdditionally, the cursor does not redraw as a bar/underscore, but remains how its configured\n### System info\n- fish, version 2.3.1-667-g668de88\n- OS X 10.11.6\n- iTerm Build 3.0.11\n- Theme: https://github.com/paradox460/paradox-theme\n- Dotfiles/fish config: https://github.com/paradox460/.dotfiles/tree/master/.config/fish\n\nThis issue is new, and cannot be reproduced in the stable (2.3.1) version of fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Izzeri": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3477", "title": "Something like a '{forward | backward}-process' and '{forward | backward}-delete-process' function for moving between pipes?", "body": "I often end up with a moderately long chain of piped commands, and then notice I want to make a change somewhere in the middle of the chain. I've been using forward/backward-word to speed up navigation, but it's often barely any faster than forward/backward-character. Yesterday I wrote a (admittedly super duper ugly) fish function for forward-pipe and backward-pipe that work pretty well, but it would be nice to have this functionality provided by default. I'd think it's pretty common to want to quickly navigate, say, 3 pipes backward in a command chain. My implementation uses `commandline -p` to get what process token the cursor is currently in, then `fgrep -aob` to get where that process is in the buffer, and then some awk magic to work around the case where there are two or more identical process tokens in the buffer. It would be nice if `commandline` could report at what position the process begins, maybe something like `commandline -pC`. Or if it could even say something like \"the cursor is in the third process, out of five processes\", and then say at what position in the buffer each process starts and ends.\n\nMy ugly functions (I'd be happy if someone could tell me my code is way too complicated):\n\n```\nfunction backward-pipe\n  set buf (commandline -b)\n  set curpos (commandline -C)\n\n  # if we are at the beginning of the buffer do nothing\n  if test $curpos -eq 0\n    return 0\n  end\n\n  set process (commandline -p)\n\n  # corner case if the process we are in is completely empty\n  if test $process = ''\n    commandline -C (math \"$curpos - 1\")\n    set process (commandline -p)\n  end\n\n  # find position of $process in $buf\n  # work around the case where there are multiple identical $process in $buf\n  set pipepos (echo $buf \\\n  | gfgrep -aob \"$process\" \\\n  | ggrep -oE \"[0-9]+:\" \\\n  | sed \"s/://\" \\\n  | awk -v t=$curpos \"NR==1{v=\\$1;next}{m=\\$1-t;if(m>0){exit;}else if(m==0){v=\\$1;exit}else{v=\\$1}}END{print v}\")\n\n  # if we end up at the same position, move backwards one character and try again\n  if test $pipepos -eq $curpos\n    commandline -C (math \"$pipepos - 1\")\n    backward-pipe\n  end\n\n  commandline -C $pipepos\nend\n\nfunction forward-pipe\n  set buf (commandline -b)\n  set buflen (echo (string length \"$buf\"))\n  set curpos (commandline -C)\n  if test $curpos -eq $buflen\n    return 0\n  end\n\n  set process (commandline -p)\n  set processlen (echo (string length \"$process\"))\n  set pipepos (echo \"$buf\" \\\n  | gfgrep -aob \"$process\" \\\n  | ggrep -oE \"[0-9]+:\" \\\n  | sed \"s/://\" \\\n  | awk -v t=$curpos \"NR==1{v=\\$1;next}{m=\\$1-t;if(m>0){exit;}else if(m==0){v=\\$1;exit;}else{v=\\$1}}END{print v}\")\n  if test (math \"$pipepos + $processlen + 1\") -eq $curpos\n    commandline -C (math \"$pipepos + $processlen + 2\")\n    forward-pipe\n  end\n\n  commandline -C (math \"$pipepos + $processlen + 1\")\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akdor1154": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3443", "title": "fish_config provides no easy way to use terminal colours", "body": "Most modern terminals provide a UI to set RGB values for named colours, however fish's default configuration, and all other colour schemes available in fish_config, specifies RGB values for all colours instead of named colours.\n\n(1) IMO default behaviour should be to use named colours for the default colours scheme, so that users can edit their colours in their terminal settings to change fish's appearance.\n\nIf (1) is not acceptable, then:\n(2) it would still be useful to have a \"shell colours\" theme available in fish_config that uses named colours, so users can easily opt in to the above behaviour.\n\nFinally, if even (2) is not acceptable, then \n(3) it would be useful to have a \"shell colours\" palette above the RGB palette, so users can at least build their own scheme that users their shell's native colours without having to edit colorutils.js or specify variable overrides.\n\nFish 2.3.1 on OS X.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Yajo": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3440", "title": "Add official docker image", "body": "I see you already have a Dockerfile in the repo, so this issue is just for asking you to please simply create an automated build in the Docker Hub, and reference it here in the README.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3440/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gertcuykens": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3424", "title": "tab special input function", "body": "I would like to set a rule that pressing tab will block at the input cmd line if there are multiple suggestions and just wait for me to manually press the down button to go into the select menu or  wait for me to simple start typing more characters.\n\nExample fish, version 2.3.1\n![image](https://cloud.githubusercontent.com/assets/863731/19096231/17153518-8a9b-11e6-8bba-224ec4efb06e.png)\n\nUntil now everything fine but here's where I get frustrated a little :)\n![image](https://cloud.githubusercontent.com/assets/863731/19096266/4948c266-8a9b-11e6-8314-1a8849e5cbcd.png)\n\nOnce you are in the menu you can't go back to the letters you typed. Meaning you have to back space all the way back to the letter `h` if you wanted to type `hi` for example instead of `he` \n\nAl I ask is a config rule that stops tab from entering the menu and simple stop doing anything at all unless there is only one possible completion left or I press the down button manually to select.\n\nThe tab should just be ignored until I type more text or press the down arrow to go into the menu.\n\nMy proposal is a `set fish_tab wait` that enables tab to wait for more key characters behavior.\n\nOr to put it in other words tab never goes into menu mode without pressing the down arrow :) , just showing more suggestions is no problem if there are many more but the cursor and cmd input line should not change.\n\nPS A similar style of tab completion can be tested by using vscode for example, where tab always completes the first solution and never goes into menu mode no matter how many solutions there are. It does show the menu but tab never goes in it.\n![image](https://cloud.githubusercontent.com/assets/863731/19096126/6dda1cb6-8a9a-11e6-8aa9-9ea11f3bf07d.png)\n\nEDIT: faho idea for a new special bind function instead of flag is way better\nhttps://fishshell.com/docs/current/commands.html#bind\n\nEDIT2: ridiculousfish idea backspace exit like esc is the best so far I think\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "feigaoxyz": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3412", "title": "Colour of partial matched suggestion in light terminal theme is un-readable", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\n- [X] Have you checked if problem occurs with [fish 2.3.1](/fish-shell/fish-shell/releases/tag/2.3.1)?\n- [X] Tried fish without third-party customizations _(check `sh -c 'env HOME=$(mktemp -d) fish'`)_?\n\n**fish version installed** _(`fish --version`)_:\nfish, version 2.3.1-541-gf9115b5\n\n**OS/terminal used**: \niTerm\n\nThe colour for partial match in completion suggestion is whitish and I found no way to customise it. This is fine for dark themes in terminal. But if I use light themes in my terminal (e.g. iTerm), such as \"Light Background\" or \"Solarized Light\", the characters become un-readable. Check attached screenshots.\n\nDark Theme:\n![dark theme](https://cloud.githubusercontent.com/assets/5907519/18859107/c6df832a-84a3-11e6-92f2-4e007f1fb493.png)\n\nLight Theme:\n![light theme](https://cloud.githubusercontent.com/assets/5907519/18859108/c9114eee-84a3-11e6-9424-02ca93f51bb5.png)\n### Any workaround for improving the readability in light themes?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aureooms": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3382", "title": "Equivalent of PS2?", "body": "Is there an equivalent of `PS2` in fish? For example, for bash I have\n\n``` bash\nPS2=\"\\[${yellow}\\]\u2192 \\[${reset}\\]\";\n```\n\nwhere `${yellow}` and `${reset}` are equivalent to `set_color -o yellow` and `set_color normal`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chamini2": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3371", "title": "Autoloading functions section should mention fish_function_path", "body": "The [Autoloading Functions](https://fishshell.com/docs/current/tutorial.html#tut_autoload) section of the docs don't mention the environment variable `fish_function_path` and it looks to autoload functions in directories listed there, so it should probably mention it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3371/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ideasman42": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3363", "title": "Feature Request: Ability to configure some basic behaviors from the \"fish_config\" web UI", "body": "While the web UI is already very useful, there are some basic behaviors new users may want to change, that are configurable but not very discoverable, especially since terminology to adjust these settings isn't easy to guess.\n\nSuggesting a new section be added for _Behavior_, settings could include for example.\n- [fish_prompt_pwd_dir_length](http://stackoverflow.com/questions/866989/fish-interactive-shell-full-path)<br>Users might not want their `PWD` to be abbreviated _(I like to be able to copy-paste from the `PWD`)_. A toggle could work (0 to disable).\n- [fish_greeting](http://stackoverflow.com/questions/13995857/suppress-or-customize-intro-message-in-fish-shell) harmless, but nice to turn off after using fish for a while.\n-   [fish_vi_key_bindings](http://stackoverflow.com/questions/28444740/how-to-use-vi-mode-in-fish-shell)<br>An example of something Vim users may want to enable, though I don't think it's as important as the others to configure via the UI.\n- `__fish_git_prompt_show_informative_status`<br>(possibly others, but this is at least a way to toggle extra information),<br>this can give **significant** slowdowns with many un-tracked files, and I don't miss the extra information.\n\nLinked to people asking about how to perform these actions.\n\nOf course to really get into nitty gritty people are going to need to manually edit configurations, so suggesting to have some toggles for behavior user are likely to want to change.\n\n---\n\n@Siecje  suggested I open an issue for this topic, on IRC.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3363/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivan": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3345", "title": "\"tcsetpgrp: No such process\" when running in firejail", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\n- [x] Have you checked if problem occurs with [fish 2.3.1](/fish-shell/fish-shell/releases/tag/2.3.1)?\n- [x] Tried fish without third-party customizations _(check `sh -c 'env HOME=$(mktemp -d) fish'`)_?\n\n**fish version installed** _(`fish --version`)_: fish, version 2.3.1\n\n**OS/terminal used**: Ubuntu 16.04.1, roxterm\n\nRepro steps:\n1. Install firejail on Ubuntu 16.04.1, either with `apt-get install firejail`, or from source (tested [this commit](https://github.com/netblue30/firejail/commit/ddcd56b11c47278fe887e5b4fb5bd86715881114))\n2. Add an alias to `config.fish`:\n   \n   ``` bash\n   echo \"alias ls='ls -a'\" >> ~/.config/fish/config.fish\n   ```\n3. Run `firejail --noprofile fish`:\n\n```\n# firejail --noprofile fish\nParent pid 12650, child pid 12651\nChild process initialized\nfish: Could not return shell to foreground\ntcsetpgrp: No such process\nfish: Could not return shell to foreground\ntcsetpgrp: No such process\nfish: Could not return shell to foreground\ntcsetpgrp: No such process\nfish: Could not return shell to foreground\ntcsetpgrp: No such process\nfish: Could not return shell to foreground\ntcsetpgrp: No such process\nfish: Could not return shell to foreground\ntcsetpgrp: No such process\n```\n\nfish doesn't start up properly and goes in a suspended state in the background:\n\n```\n# jobs\n[1]    suspended (tty input)  firejail --noprofile fish\n```\n\nAn `alias` or `umask` (both <s>autoloaded builtins?</s> use `eval`) seem to trigger this, but only if they're run from `config.fish` during startup.  Both `alias` and `umask` work fine after fish has already started.\n\nThis probably happens because firejail uses namespaces to lock down the PIDs the jail knows about.  `ps ux` inside the jail lists:\n\n```\n> ps ux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nat           1  0.0  0.0  14148  2036 pts/4    S    01:39   0:00 firejail --noprofile fish\nat           2  0.0  0.2 172148  5948 pts/4    S    01:39   0:00 fish\nat         115  0.0  0.1  37364  3324 pts/4    R+   01:41   0:00 ps ux\n```\n\nI have no idea why this only breaks during startup, though.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3337", "title": "Slash-stripping rsync function breaks rsync completion", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\n- [x] Have you checked if problem occurs with [fish 2.3.1](/fish-shell/fish-shell/releases/tag/2.3.1)?\n- [x] Tried fish without third-party customizations _(check `sh -c 'env HOME=$(mktemp -d) fish'`)_?\n\n(Yes, it works without customizations, but this is a useful customization!)\n\n**fish version installed** _(`fish --version`)_: 2.3.1\n\n**OS/terminal used**: Ubuntu 16.04.1, roxterm\n\nIf you use an rsync function that strips trailing slashes:\n\n``` fish\n# rsync, like BSD cp, interprets trailing slashes as \"copy the contents of this\n# directory\".  But this interacts very badly with fish, which, unlike zsh, always\n# adds a trailing slash when you complete a directory.  This rsync function\n# fixes this behavior by stripping all trailing slashes.  You can still copy the\n# contents of a directory by appending \"/.\" instead of \"/\".\nfunction rsync --wraps rsync\n    for arg in $argv\n        # Strip trailing slash on \"hi/\" but not \"/\"\n        set fixed_arg (echo -n $arg | string replace -r '(.)/$' '$1')\n        set new_argv $new_argv $fixed_arg\n    end\n    command rsync $new_argv\nend\n```\n\nthen fish's built-in tab completion for `rsync` breaks: completing a remote `dir/` will insert `dir/` again instead of matching the files in the directory.  This happens because [completions/rsync.fish](https://github.com/fish-shell/fish-shell/blob/3e30857e994c26db028da72e14a0f68fce15f174/share/completions/rsync.fish#L132) runs `rsync` (going through the user function) instead of `command rsync`.\n\nIt seems like other user functions could also interfere with tab-completion working properly, like aliases for the `sed`, `tr`, and `cut` commands.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JoshCheek": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3341", "title": "Switch serialization format for variables and history", "body": "**fish version installed**:\n\n``` sh\n~/ref/tools/fish-shell/fish -v\nfish, version 2.3.1-492-g3702616\n```\n\n**OS/terminal used**: \n\n``` fish\n$ uname -a\nDarwin Joshs-MacBook-Air-2.local 15.6.0 Darwin Kernel Version 15.6.0: Thu Jun 23 18:25:34 PDT 2016; root:xnu-3248.60.10~1/RELEASE_X86_64 x86_64\n\n$ sw_vers\nProductName:    Mac OS X\nProductVersion: 10.11.6\nBuildVersion:   15G31\n```\n\n**Issue:**\n\nVariables do not get set when their value is exactly the character `\\x1d`.\n## Reproduction steps\n\n``` fish\n$ set -l oned \\x1d\n$ set -l onec \\x1c\n\n# We see that onec has a value, but oned does not\n$ set -l\nonec \\x1c\noned\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "q-p": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3321", "title": "VCS prompts occasionally print errors during terminal window resize", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\n- [x] Have you checked if problem occurs with [fish 2.3.1](/fish-shell/fish-shell/releases/tag/2.3.1)?\n- [x] Tried fish without third-party customizations _(check `sh -c 'env HOME=$(mktemp -d) fish'`)_?\n\nDoes not occur with the (vcs less) default prompt\n\n**fish version installed** _(`fish --version`)_: 2.3.1\n\n**OS/terminal used**: Terminal.app in OS X 10.11.6 \"El Capitan\"\n\nWhen using a vcs_prompt in a directory with a git-repository, while resizing the window, occasionally the following errors are printed on redraw. This looks a bit like a race-condition somewhere somehow...\n\n```\n~/t (master|\u2714)> (standard_in) 1: parse error\ntest: Missing argument at index 2\ntest: Missing argument at index 2\n~/t (master|\u2714)> (standard_in) 1: parse error\ntest: Missing argument at index 2\ntest: Missing argument at index 2\n~/t (master|\u2714)> test: Missing argument at index 2\n~/t (master|\u2714)> (standard_in) 1: parse error\ntest: Missing argument at index 2\ntest: Missing argument at index 2\n~/t (master|\u2714)> (standard_in) 1: parse error\ntest: Missing argument at index 2\ntest: Missing argument at index 2\n~/t (master|\u2714)> (standard_in) 1: parse error\ntest: Missing argument at index 2\ntest: Missing argument at index 2\n~/t (master|\u2714)> (standard_in) 1: parse error\ntest: Missing argument at index 2\ntest: Missing argument at index 2\n~/t (master|\u2714)> test: Missing argument at index 2\n~/t (master|\u2714)> test: Missing argument at index 2\n~/t (master|\u2714)> (standard_in) 1: parse error\ntest: Missing argument at index 2\ntest: Missing argument at index 2\n~/t (master|)> (standard_in) 1: parse error\ntest: Missing argument at index 2\ntest: Missing argument at index 2\n```\n## Reproduction steps\n1. Launch fish\n2. In fish_config, select a VCS prompt (I used informative_vcs)\n3. `mkdir t`\n4. `cd t`\n5. `git init`\n6. Quickly drag the window frame larger and smaller to trigger the output on redraw\n## Expected results\n\nFish's vcs_prompt should just redraw the prompt, and not spew errors during resizing\n## Actual results\n\n```\n~/t (master|\u2714)> (standard_in) 1: parse error\ntest: Missing argument at index 2\ntest: Missing argument at index 2\n~/t (master|\u2714)> \n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sandric": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3315", "title": "Different command for invoking pager and expanding autocompletion?", "body": "**fish version installed** _fish, version 2.3.1_\n\n**terminal version** _iterm2_\n## Reproduction steps\n\nI wish to have one command for showing pager with available autocompletions and other for expanding preselected completion. Right now there's not very obvious algorithm to display available autocompletions as for me. There's notion of \"in place\" autocompletion,  that is printed right after your entered characters in command line, and \"pager's autocompletion\" which is showing all the autocompletions in list-like menu. While second one is pretty straightforward, first one dissects onto two types: \n- from \"history\" - your's entered characters matching against all history commands and if matchs exists - append last of those to your entered characters.\n- from \"autocompletion\" - if there's only one autocompletion available in full completion list (the one that is displayed via pager) - it is appended to your characters.\n\nBut here's the problem. I can not distinguish by seeing \"in place autocompletion\" if there's other autocompletions available or not because this autocompletion can mean ether history one which is not eliminating availability of other completions, or \"the last and only one\" completion that mean that there's actually no such left.\n\nAnd even biggest problem that if I think thats what I see in this \"in place\" completion is actually from history one, and trying to hit `<tab>` to see all available, if I was wrong and its \"the only one left\" completion, then it expands.\n## Expected results\n\nI want to have two different and understandable commands - one to see all available completions via pager, and other to expand \"in-place\", or \"autosuggested\" completion substituted by fish after characters I entered. Right now there's one command for both of those different actions - `<tab>` and one command `complete` defined [here](https://github.com/fish-shell/fish-shell/blob/93b9e7443e5e91e2908bfdc29c476c59b6765566/share/functions/__fish_shared_key_bindings.fish#L26).\n\nTo fix this I see the easiest way is to stop expansion on `<tab>` if there's only one completion exists and displaying it with pager as it should be done if there was more that one completion available. And leave expansion completion to `<end>` button (I can not find binding for it) which is also performs only one action - expands.\n\nSo can someone point me how can you disable this `<tab>` auto expansion in `complete` function if there's only one completion exists, and display it in pager instead?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Stebalien": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3285", "title": "Definition of the word/backwards motions (vi mode) are incorrect", "body": "**fish version installed** _(`fish --version`)_: 2.3.1\n\n**OS/terminal used**: Arch Linux\n\nThe definition of the word motion (`w`) for in the Vi key bindings is incorrect.\n## Reproduction steps\n1. Launch fish\n2. run fish_vi_keybindings\n3. Type `a./b/c`\n4. Hit ESC.\n5. Go to the beginning of the line (`^`).\n6. Hit `w` three times.\n## Expected results\n\nThe cursor lands on `.`, then `b`, then the last `/`. \n## Actual results\n\nThe cursor lands on the first `/`, then `c`, then _after_ the end of the line.\n\n---\n\nThe `b` (word backwards) motion is similarly incorrect (try walking backwards over the same path in both vi and fish).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xamino": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3283", "title": "Suggestion: tab auto completion and history suggestion should both be selectable with tab", "body": "<!-- check if this problem is already solved! github.com/issues?q=is:issue+user:fish-shell -->\n- [x] Have you checked if problem occurs with [fish 2.3.1](/fish-shell/fish-shell/releases/tag/2.3.1)?\n- [x] Tried fish without third-party customizations _(check `sh -c 'env HOME=$(mktemp -d) fish'`)_?\n\n**fish version installed** _(`fish --version`)_: '`fish, version 2.3.1-441-g01f09cf`'\n\n**OS/terminal used**: Ubuntu 14.04, gnome-terminal\n\nI would like to suggest that tab completion and suggestion completion can both be selected with tab. Typing ctrl+f or especially right arrow breaks ten finger typing for me, meaning I have to move my hands (admittedly not a lot for ctrl+f, but still) and lose my flow.\n\nOf course this may result in conflicts when selecting what the user actually wants completed. Looking at my usage of fish so far I think simply preferring the suggestion for the first tab, with subsequent tabs switching through the tab completions would be a working solution.\n\nI'd love to hear some reasoning / discussion on this.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "willwhitney": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3233", "title": "Tab completion doesn't work for abbreviations", "body": "When typing an abbreviation, it would be really nice if you could hit tab to complete that abbreviation. For example, I have an abbreviation `devgpu` that expands to `ssh <my_server>`, but when I type `dev <tab>` I don't get `devgpu` as a suggestion.\n\nWhile it is a little weird to complete something that's not a real command, I still expected the completion to show up, and it would definitely make things quicker for me.\n\n**fish version installed** _(`fish --version`)_: 2.3.0\n\n**OS/terminal used**: Mac OS 10.11, iTerm2 3.0.4\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3233/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3189", "title": "Unable to bind control-space key command", "body": "I've tried binding both \"\\c\\ \" and \"\\c\\x20\", however none of these seem to work.\n\nFish_key_reader (and bash escape sequence) reports that control-space is \n\n```\nhex:    0  char: \\c@\nbind \\c@ 'do something'\n```\n\nYet trying to bind `\\c@` results in\n\n```\nInvalid token '\\c@'\nfish: bind \\c@\n```\n\nSubstituting `@` for its hex equivalent doesn't seem to work either.\n### Reproduction Steps:\n1. Try to bind control-space using any of the methods above\n\n---\n\nFish version: fish, version 2.3.0\n\nOperating system: OSX 10.11, Homebrew install\n\nTerminal or terminal emulator: OSX terminal app\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6227850", "body": "I believe they have changed to `master` now, and removed `fish_fish`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6227850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nyarly": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3180", "title": "Functions swallow SIGWINCH", "body": "I have a function that watches for the change of an ENV variable and runs tmux - here it is verbatim:\n\n```\nfunction autotmux --on-variable TMUX_SESSION_NAME\n  if test -n \"$TMUX_SESSION_NAME\" #only if set\n    if test -z $TMUX #not if in TMUX\n      tmux new-session -t \"$TMUX_SESSION_NAME\"; or tmux new-session -s \"$TMUX_SESSION_NAME\"\n    end\n  end\nend\n```\n\nI've noticed that tmux run this way doesn't appear to receive SIGWINCH from terminal resizes, especially if they're sudden (as is caused by a tiling WM or maximizing windows etc.) The problem is consistent enough that I've set up keystrokes to `pkill -SIGWINCH tmux`.\n\nOn the strength of an issue filed on tmux, I finally looked into the cause being my `autotmux` function, and have just determined that a tmux session started this way exhibits the problem (doesn't resize to match the size of the terminal) and a tmux session run directly does not (i.e. it resizes.)\n### Reproduction Steps:\n1. Install tmux\n2. Save the above as a function\n3. `set -x TMUX_SESSION_NAME test`\n4. Resize the window - especially with sudden resizes: use a tiling manager, or drag the window to the OS X menu bar etc.\n### Expected behavior:\n\nTmux should resize immediately - the tmux status line should remain the last line of the window and be the correct length.\n### Observed behavior:\n\nTmux behaves as if it hasn't received the SIGWINCH - the status bar remains in the same place relative to the upper left corner of the window.\n\n---\n\nFish version: [from the output of fish --version]\n\n2.2.0\n\nOperating system: [your operating system and how you installed fish e.g. Homebrew, Ubuntu PPA, distribution package]\n\nOS X, with homebrew, Gentoo and NixOS Linux\n\nTerminal or terminal emulator: [e.g. PuTTy, iTerm2, GNOME Terminal, VT220]\n\niTerm2, urxvt, (others on Linux, don't remember which ones.)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3180/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2318", "title": "Emulate bash \"insert-completions\"", "body": "I'd like to be able to say\n\n```\nbind \\e* insert-completions\n```\n\nSo that \n\n```\n> cat some-files/sbstr<Alt-*>\n```\n\nmight product produce\n\n```\n> cat some-files/substring.txt some-files/substring.rtf some-files/substring.xml\n```\n\n(if such files existed)\n\nI think all I need that I can't find in fish is a builtin to produce arbitrary completions - i.e. like the bind input function \"complete\" but that I can use in a `function insert-completions` together with commandline. It _looks_ like `__fish_print_path` (or actually `__fish_complete_path`) should do the trick... but it uses old-style prefix completion, not substrings. I've looked through the __fish functions in general, but nothing jumps out.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/37e0fbb5e4f0fbf9e62527094e451f7d8937e6f0", "message": "Paginating last command\n\nOften, I want to paginate the command I just ran.\n\nEasy enough to <up><alt-p>, but this patch saves a keystroke."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imgx64": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3164", "title": "Make command substitution split on NUL", "body": "Currently, if the output from command substitution contains a null character, there is no way to actually get the characters after the null. Which kinda makes sense, since both argv and environment variables are null-terminated.\n\nThis makes it impossible to use `find -print0` inside command substitution, and therefore having to use it without `-print0` ([as mentioned in the docs](http://fishshell.com/docs/current/index.html#expand)). This is slightly wrong in the sense that filenames with newlines (Yuck, but it's sadly allowed) will not be handled correctly.\n\n**I suggest making fish split command substitution output on null characters when IFS is empty**. The current behavior is silently discarding everything after the null. If someone really wants this, it can be done with `(...)[1]`. I'm not sure if this null-splitting should also be done in addition to \\n when IFS is non-empty.\n### Reproduction Steps:\n\n```\n~/test> touch normal\\ file new\\nline\n~/test> count *\n2 # OK, but I want to do some advanced filtering using find\n~/test> count (find . -type f)\n3 # nope\n~/test> begin; set -l IFS; count (find . -type f); end\n1 # nope\n~/test> begin; set -l IFS; count (find . -type f -print0); end\n1 # nope, but I think fish should be changed to make it work\n~/test> begin; set -l IFS; echo (find . -type f -print0); end # let's see what it outputs\n./new\nline\n# \"normal file\" is missing, which is not too surprising, but irritating\n```\n### Expected behavior:\n\n```\n~/test> begin; set -l IFS; count (find . -type f -print0); end\n2 # The two arguments should be new\\nline and \"normal file\"\n```\n### Additional information:\n\nThis is possibly related to #159.\nA workaround would be using a loop and `read --null` (#1694). But it's cumbersome and I love fish's simplicity. If I wanted to write awkward loops to handle filenames with newlines, I would still be using bash.\n\n---\n\nFish version: fish, version 2.3.0\nOperating system: Cygwin, Fedora 23\nTerminal or terminal emulator: Windows's cmd.exe window, Konsole\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3164/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pierrejoye": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3134", "title": "Suggestions are confusing when case differs", "body": "Thanks for this fantastic tool :)\n\nautocompletion of paths won't allow to change case if a path exists with a different case. For example trying to rename a file using a different case.\n### Reproduction Steps:\n1. mkdir Box\n2. mv Box box\n### Expected behavior:\n\nautocompletion should let me use \"box\" for the 2nd argument of the move command.\n### Observed behavior:\n\nautocompletion changes the case of b to B for the 2nd argument. Ending as:\nmv Box Box\n\nOnly way to acheive it is to write boxb ox and then box b ox and finally remove the space between b and ox\n\n---\n\nFish version: fish, version 2.3.0 (Debian 8,3 package)\n\nOperating system: Debian 8.3 package\n\nTerminal or terminal emulator: Gnome terminal emulator 3.14.1 (Debian package)\n\nI googled and dig the issues and I did not find a report about this issue. I  admit I sadly did not try from src using the latest release as I would prefer to keep using the pkgs :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Hunsu": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3132", "title": "Can't delete the first letter of a command when used to navigate through the suggestions. ", "body": "Can't delete the first letter of a command you typed and used the tab to navigate through the suggestions. \n### Reproduction Steps:\n1. cd to folder where there are at least two sub-folders \n2. type `cd` and then `tab` `tab`to navigate through the suggestions \n3. Now delete the command \n### Expected behavior:\n\nThe command is deleted.\n### Observed behavior:\n\nWe can't delete the `c`letter from the `cd`command.  \n\n---\n\nFish version: [from the output of fish --version]\nfish, version 2.3.0-235-g9d2092b\n\nUbuntu 16.04 and I use the nightly build of fish.\n\nTerminal or terminal emulator: \nGNOME Terminal\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3132/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phrolov": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3126", "title": "Make autosuggestions from history case-insensitive", "body": "For instance, I have directory named `Projects` in current workind directory. When typing `cd pro` fish suggests `Projects/` as possible completion based on directory name. But when I type `cd Pro` shell suggests `Projects/myproject` string from history.\n\nI think it would be more convenient to search for possible completions from history case-insensitively.\n\n---\n\nFish version: 2.3.0\nOperating system: OS X, Homebrew\nTerminal or terminal emulator: OS X Terminal\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3126/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iandoug": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3119", "title": "Pop-up history (like 4Dos)", "body": "Further to #1891 : \n\n4Dos and cousins had some useful tricks which I miss ever since leaving DOS ...\n1. \"cd -\" which changes you back to the directory you just came from.\n2. the pop-up command history, accessed by hitting PageUp ... much easier to use than sequentially scrolling through your history with up-arrow.\n\nThere's a description on page 59 of the 4Dos manual, available here\nhttp://www2.arnes.si/~egrmad/4DOS%20reference%20manual.pdf\nThere's a small image of it in the 4NT version here:\nhttp://blogs.msmvps.com/coad/2005/02/19/4nt-powerful-command-prompt-my-all-time-favorite-utility-now-take-command/\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nagisa": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3117", "title": "Rustc autocompletions assume rustc is in the $PATH (uses wrong rustc)", "body": "I have no `rustc` in my `$PATH`.\n\nTyping `~/.cargo/bin/rustc t` spews following:\n\n```\n/usr/share/fish/completions/rustc.fish (line 1): rustc -C help \\\n                                                 ^\nin command substitution\n    called on line -1 of file /usr/share/fish/completions/rustc.fish\n\nfrom sourcing file /usr/share/fish/completions/rustc.fish\n    called on standard input\n\nin command substitution\n    called on standard input\n\nfish: Unknown command 'rustc'\n/usr/share/fish/completions/rustc.fish (line 1): rustc -Z help \\\n                                                 ^\nin command substitution\n    called on line -1 of file /usr/share/fish/completions/rustc.fish\n\nfrom sourcing file /usr/share/fish/completions/rustc.fish\n    called on standard input\n\nin command substitution\n    called on standard input\n\nfish: Unknown command 'rustc'\n/usr/share/fish/completions/rustc.fish (line 1): rustc -W help  \\\n                                                 ^\nin command substitution\n    called on line -1 of file /usr/share/fish/completions/rustc.fish\n\nfrom sourcing file /usr/share/fish/completions/rustc.fish\n    called on standard input\n\nin command substitution\n    called on standard input\n```\n### Reproduction Steps:\n1. Install rust through rustup/have no rust in $PATH\n2. type `./$PATH_TO_RUSTC something`\n3. observe error\n### Expected behavior:\n\nthe autocompletion service should use rustc at the full path that\u2019s being autocompleted\n### Observed behavior:\n\nInstead `rustc` is looked for in `$PATH`\n### Additional information:\n\nfish, version 2.3.0, arch linux, rustc via rustup.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2027343", "body": ":star: \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2027343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kopischke": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3116", "title": "string builtin handling of empty regex matches is unexpected", "body": "<!--\nThanks for helping to make fish better!\n\nIf you are asking for help with fish, or you've found a bug:\n - Make sure it's not a known or solved issue, by searching https://github.com/fish-shell/fish-shell/issues\n - Fill in the following information carefully:\n\n-->\n\nUsing the `string` builtin with a Perl compatible regex using a `<char>*` pattern will return a zero length match first even if there is a match for `<char>`.\n### Reproduction Steps:\n1. `echo foo | string -r 'o*'`\n### Expected behavior:\n\nPrints \u201coo\u201d.\n### Observed behavior:\n\nPrints a zero width match.\n### Additional information:\n\n~~`echo foo | string -ra 'o*'` prints two matches, one zero width, one \u201coo\u201d. The fish documentation clearly says regexes are Perl compatible, and that means [the `*` quantifier should be greedy, i.e. match the longest possible match](http://perldoc.perl.org/perlre.html#Regular-Expressions).~~\n\n[First reported on gitter by Aaron Gyes](https://gitter.im/fish-shell/fish-shell?at=5752eba572e5509b40787d79).\n\nEDIT: as it turns out, this behaviour is actually both [technically correct](https://github.com/fish-shell/fish-shell/issues/3116#issuecomment-224425924) and [in line with regex implementations in major programming languages](https://github.com/fish-shell/fish-shell/issues/3116#issuecomment-224418023), including Perl. However, [`grep` does not report zero width matches](https://github.com/fish-shell/fish-shell/issues/3116#issuecomment-224448381) which leads to the expectation that interactive shell usage would differ from the above.\n\n---\n- Fish version: 2.3\n- Operating system: OS X 10.11.5, Homebrew install\n- Terminal or terminal emulator: Terminal.app\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3074", "title": "commandline operations in binding mess up multi-line prompts", "body": "<!--\nThanks for helping to make fish better!\n\nIf you are asking for help with fish, or you've found a bug:\n - Make sure it's not a known or solved issue, by searching https://github.com/fish-shell/fish-shell/issues\n - Fill in the following information carefully:\n\n-->\n\nWhen using a binding that ~~substitutes~~ manipulates the command line after returning from a curses display, Fish repeats all prompt lines but the first on screen.\n### Reproduction Steps:\n1. Install or configure a multi-line prompt like [pure.fish](https://github.com/brandon099/pure.fish)\n2. `function testit; man fish; commandline -r 'fish trawl ended'; end`\n3. `bind \\cx testit`\n4. press Control-x on a new, empty prompt \u2192 fish man page display\n5. press q\n### Expected behavior:\n\nCurrent prompt line is set to \u201cfish trawl ended\u201d\n### Observed behavior:\n\nLine \u201cfish trawl ended\u201d appears below the current, empty prompt, on a new prompt line, but minus one line break. Illustration (notice the missing new line above the spurious prompt):\n\n<img width=\"970\" alt=\"fish prompt\" src=\"https://cloud.githubusercontent.com/assets/80906/15575082/562765e8-2351-11e6-8ed8-353e5a27cca1.png\">\n### Additional information:\n- Single line prompts are handled correctly\n- Inserting into the prompt (`commandline -i`)~~works fine~~ exhibits the same behavior as replacing\n- Adding `commandline -f [force-]repaint` to the function does not change the observed behavior\n- ~~Workarounds like killing the line and appending instead of replacing the command line buffer are blocked by #3031~~\n\n---\n- Fish version: 2.3, Homebrew installed via `brew install fish --devel`\n- Operating system: OS X 10.11.4\n- Terminal or terminal emulator: Terminal.app\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3073", "title": "`function --argument-names` does not error for read-only variables", "body": "<!--\nThanks for helping to make fish better!\n\nIf you are asking for help with fish, or you've found a bug:\n - Make sure it's not a known or solved issue, by searching https://github.com/fish-shell/fish-shell/issues\n - Fill in the following information carefully:\n\n-->\n\nWhen defining a named argument to a function with the same name as a lower-case Fish special variable, the variable is not shadowed by the corresponding `$argv` value but assigned to the argument instead.\n### Reproduction Steps:\n1. `function testver --argument-names version; echo $version; end`\n2. `testver 1.2`\n### Expected behavior:\n\nCall outputs \u201c1.2\u201d\n### Observed behavior:\n\nCall outputs \u201c2.3\u201d\n### Additional information:\n- Reproducible with other Fish specific special variables like `$status`\n- Not reproducible with common exported shell variables like `$HOME`\n\n---\n- Fish version: 2.3, Homebrew installed via `brew install fish --devel`\n- Operating system: OS X 10.11.4\n- Terminal or terminal emulator: Terminal.app\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mineo": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3115", "title": "Accessing the last element in the completion menu should be possible by just using arrow-up", "body": "### Reproduction Steps:\n1. `git format-patch --<tab><tab><tab>`\n### Expected behavior:\n\nAccessing `--textconv` should be possible by just pressing arrow-up once.\n### Observed behavior:\n\nTrying to access `--textconv` requires me to either press arrow-down a lot of times or narrow the list down manually by typing parts of the command.\n### Additional information:\n\nGoing back to the first suggested option by pressing arrow-down on the last one works.\n\n---\n\nFish version: 2.3.0\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3113", "title": "Mutually exclusive completion options", "body": "ZSH allows defining mutually exclusive completion entries (try `git format-patch --<tab>`, use `textconv`, then   `git format-patch --textconv --<tab>` will no longer suggest `--no-textconv`). Fish does not.\n### Reproduction Steps:\n1. `git format-patch --textconv --no<tab>`\n### Expected behavior:\n\n`--no-textconv` should not be suggested.\n### Observed behavior:\n\n`--no-textconv` is suggseted.\n### Additional information:\n\n---\n\nFish version: 2.3.0\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3113/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "plttn": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3093", "title": "Non-existent completion breaks prompt slightly", "body": "<!--\nThanks for helping to make fish better!\n\nIf you are asking for help with fish, or you've found a bug:\n - Make sure it's not a known or solved issue, by searching https://github.com/fish-shell/fish-shell/issues\n - Fill in the following information carefully:\n\n-->\n\nOn 2.3.0, trying to complete a completion that doesn't exist (ex: `git ---`)  spawns a new line/prompt, rather than just flashing the invalid suggestion. \n### Reproduction Steps:\n1. Enter a completion that doesn't exist, `git ---`\n2. Hit tab\n### Expected behavior:\n\nCompletion background should flash\n### Observed behavior:\n\nPrompt breaks slightly: \n<img width=\"491\" alt=\"screen shot 2016-05-30 at 3 44 00 pm\" src=\"https://cloud.githubusercontent.com/assets/7369280/15659365/4764d952-267e-11e6-97a6-ca913ea0335c.png\">\n### Additional information:\n\nNoticed this change with v2.3.0.\n\n---\n\nFish version: 2.3.0\n\nOperating system: El Capitan, brew\n\nTerminal or terminal emulator: Terminal.app\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3093/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amluto": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3066", "title": "shmem notifier strategy has dubious security", "body": "The shmem notifier code calls shm_open on a predictable filename.  On glibc, at least, shm_open has countermeasures to the obvious symlink attacks, but it's still a bit dubious.  If nothing else, another user can DoS you by creating something there.  Worse attacks may be possible.\n\nUsing $XDG_RUNTIME_DIR would be better.\n\nThis is mitigated by the fact that this isn't used on Linux by default.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "exploide": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3062", "title": "Better DNF Autocompletions", "body": "Nice to see the recent 2.3.0 release containing completions for the dnf package manager.\n\nI noticed a few thing which could be improved and I want to collect them here.\n- [ ] Completions do not occur immediately\n\nWhen I open a new terminal window, type `dnf` and hit tab button, it tries to complete with available files and folders. After I delete the line I typed, retype `dnf` and hit tab button, the expected completions occur.\n- [ ] Deprecated subcommand `update` is suggested\n\nWhen trying to install updates, one would like to type `dnf up` and hit tab. Unfortunately, one has to select one out of `update` and `upgrade`. This is unnecessary because `update` is a deprecated alias of `upgrade` and should not be completed.\n- [ ] Some subcommands are not in the list of subcommand completions, e.g. `repolist`, `copr`, `provides`, ...\n\nI expect that there are more deprecated subcommands which should not be completed and some regular subcommands which are not in the list.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "terlar": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3032", "title": "Handling of third party bindings / organization (key_bindings.d)", "body": "I like where we have gone with the functions and completions handling, also the `conf.d` has cleaned up the structure for fish customizations in a nice way. I feel that the key bindings has got left behind.\n\nSome plugins and scripts include vendorized key bindings, currently there is not specified way of how this should be done, and each project ends up coming up with their own idea. Since key bindings is kind of special it cannot utilize the `conf.d` or other structures.\n\nI know for example that [fzf](https://github.com/junegunn/fzf/blob/master/shell/key-bindings.fish) provides out of the box key-bindings.\n\nAlso it feels like the maintainability of the key-bindings-file gets out of hand when you have a lot of key bindings and each of these define custom functions to isolate behaviour that would also be a good case for the `key_bindings.d` structure.\n\nI propose that we have some folder like `$fish_datadir/vendor_key_bindings.d` and also in `$XDG_CONFIG_HOME/fish/key_bindings.d`. That would be able to auto-load.\n\nThe other alternative would be to have some function naming scheme which can be loaded. But I wonder if it is a good idea to litter the function namespace with these things.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3032/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2437", "title": "Determine if regular shell or inside `read` builtin", "body": "I have some keybindings that triggers some functions, since keybindings are shared between the regular shell and `read` there is no way to determine which one is currently running. Inside the bound function I could use something similar to `status -c` but for `read`.\n\n```\nif status --is-read\n  # do a\nelse\n  # do b\nend\n```\n\nThe other option would be able to send a parameter to the `bind` command to not let it work for `read` but I suppose that would be much more complex if there is no way to determine between these two at this point.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1970295", "body": "Thanks for this fix. I was just about to make an issue about rails console not working properly but this fix seems to have addressed that problem.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1970295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4483186", "body": "Thanks, really useful! Wondered why my completions felt so magic suddenly, haha :smile: \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4483186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5267665", "body": "This one breaks every `\\e` keybinding that is defined after this.\n\nI don't know what decides the order, but I have the following in my `fish_user_key_bindings`:\n\n```\nfunction fish_user_key_bindings\n  bind \\ez 'commandline \"fg\"; commandline -f execute'\n\n  # Insert last argument of previous command\n  bind \\e. history-token-search-backward\n  bind \\e, __insert-previous-token\n\n  bind \\el '__fish_list_current_token; echo'\n  bind \\e'<' 'prevd; set -ge __prompt_context_current; fish_prompt'\n  bind \\e'>' 'nextd; set -ge __prompt_context_current; fish_prompt'\n  bind \\cl 'set -ge __prompt_context_current; clear; set_color normal; fish_prompt; commandline -f repaint'\n\n  bind \\e! __runsudo\n\n  # Stash/pop\n  bind \\es __commandline_stash\n  bind \\eS __commandline_pop\n\n  bind \\cx __fish_eval_token\nend\n```\n\nIf I output `bind`, I get:\n\n```\n... Rest of bindings ...\nbind \\e cancel\nbind \\ez 'commandline \"fg\"; commandline -f execute'\nbind \\e, __insert-previous-token\nbind \\e! __runsudo\nbind \\es __commandline_stash\nbind \\eS __commandline_pop\nbind \\cx __fish_eval_token\n```\n\nAll my `\\e`-keybindings defined before this works, but all of them after doesn't. If we should keep this keybinding it should be made sure it is the very last.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5267665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13814446", "body": "@pickfire isn't this working in normal mode for you?\n\nI think the problem is that this is working in normal mode and not the insert mode as you would expect.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13814446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13818128", "body": "Yes, it is a bit confusing, especially if you are not used the the VI-mode or how it works. I think it makes most sense to have this specific one in insert mode. Before in my own script I only added the default emacs bindings to the insert mode, but perhaps some of them could be nice to have in the normal mode. We could try to have the bindings for all modes, or only add them to insert mode. I would be okay to try it out in all modes, since that is what is running now and it seems pretty okay. Only annoyances I have now is that `\\cf` that I got used to is not working anymore, but with `\\cx` it might be okay. Also `\\cc` escapes to normal mode, so if I want to clear the line I have to press again, this might be the intended behaviour though. I am not that strict in my shell vim mode preference.\n\nIf you look at this specific binding `\\cx` then in vim that is a binding for insert mode and not the normal mode.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13818128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13818382", "body": "This doesn't allow for git branches with `/` in them. So for example if I have a branch called like `feature/my-feature`. this function will replace everything before the `/` and only leave `my-feature`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13818382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13832762", "body": "Yes I have noticed some motions are not the same, but you have to bring it up per binding. Then we can improve each one at a time.\n\nThe one I have noticed is this one:\n\n```\nbind e forward-word backward-char\nbind E forward-bigword backward-char\n```\n\nWhere it currently works the same as w, but in vim this goes to the end of the word and not after the word. This binding update fixes that.\n\n@pickfire I don't mind having \\cx work in normal mode, even though in vim it only works in insert mode, right?\n\nAlso I guess it doesn't hurt to bind `\\cf` and `\\cx` to the complete line. To be consistent with the behaviour in emacs bindings.\n\nOnly funny thing is that it would have 3 bindings for the same thing :) `\\cx`, `\\cf` and `\\ce`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13832762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13836304", "body": "`\\ce` is the emacs binding for go to end of line, and if you have a suggestion that will act the same way as `\\cf`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13836304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13842051", "body": "For me it does, seems weird that it wouldn't for you. The binding `\\ce end-of-line` is default.\n\nhttps://github.com/fish-shell/fish-shell/blob/4e5e04bfda15cce9020f5d5e331ac647dfa36aa0/share/functions/fish_default_key_bindings.fish#L76\n\nActually looking through that file, end-of-line is probably the most common binding, it is bound to a lot of keys.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13842051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17603049", "body": "I was thinking exactly the same this morning :)\n\nUpdate:\nwithout the `-f` that is.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17603049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5987323", "body": "This method seems like a bunch of junk to me. I suggest only returning the branch name here without all the magic. The variable `__fish_git_prompt_describe_style` is not referred anywhere else. Also the branch `GIT_DIR~` seems a bit lame.\n\nFrom the research I have done, the fastest way to get the git branch is:\n`git symbolic-ref --short --quiet HEAD ^/dev/null`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5987323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5987631", "body": "I wonder about this part also. It is to make things more dynamic so when the prompt is updated it is repainted. But usually this is accompanied by a new prompt print anyways. I'm not sure this is worth the extra complexity? Not sure this is a performance hit though.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5987631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5988180", "body": "I'm not familiar with the git-svn, but this logic seems a bit crazy with a lot of special cases and the string manipulation piped out to `/bin/sh`. Maybe could be moved out to a separate function to isolate?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5988180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030966", "body": "These parenthesis needs to be removed. Breaks for me otherwise.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6044654", "body": "this line is wrong, should be `set nr_of_untracked_files`...\n\nTook a while of debugging until I realized. Didn't know what to expect from this prompt. So wasn't sure about all the numbers and stuff.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6044654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9625349", "body": "```\nreal 0.44\nuser 0.16\nsys 0.02\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9625349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9626761", "body": "That was hot, I think the cold was about the same. It is not super slow, but for speedy feeling it might be a good idea to cache it.\n\nEdit:\n\n```\n\u27a5 time -p pacman -Sl >/dev/null\nreal 0.22\nuser 0.17\nsys 0.00\n```\n\nIf I skipped the output, it was much faster for real, but still...\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9626761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gtmax": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3015", "title": "Backgrounding commands run with \"fish -c <command>\" does not work.", "body": "### Observed behavior:\n\nIf I run a command via \"fish -c <command>\", and Ctrl-Z'ing appears to interrupt the command instead.\n\n```\n> fish -c 'sleep 10; echo \"Done!\"' # Ctrl-Z\n^ZDone!\n> fg\nfg: There are no suitable jobs\n```\n### Expected behavior:\n\nSame SIGSTP/SIGCNT via bash:\n\n```\n> bash -c 'sleep 10; echo \"Done!\"' # Ctrl-Z\n'bash -c 'sleep 10; echo \"Done!\"'' has stopped\n> fg\nSend job 1, 'bash -c 'sleep 10; echo \"Done!\"'' to foreground\n\nDone!\n```\n\n---\n\nFish version: fish, version 2.2.0\n\nOperating system: Mac OS X, El Capitan, install via Homebrew \n\nTerminal or terminal emulator: iTerm2\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andgra2": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3005", "title": "$ binding in vi-mode doesn't work correctly", "body": "<!--\nThanks for helping to make fish better!\n\nIf you are asking for help with fish, or you've found a bug:\n - Make sure it's not a known or solved issue, by searching https://github.com/fish-shell/fish-shell/issues\n - Fill in the following information carefully:\n\n-->\n\nThe `$` binding in vi-mode doesn't work as expected.\n### Reproduction Steps:\n1. Run:  `fish_vi_key_bindings` or `fish_vi_mode` if your running an older version.\n2. Type and **don't** press enter:  `echo hi`\n3. Hit the escape key.\n4. Type and **don't** press enter:  `$`\n### Expected behavior:\n\nThe expected behaviour is that the cursor should be at the character `i`.\n### Observed behavior:\n\nThe cursor is to the right of the character `i`.\n### Additional information:\n\n---\n\nFish version: fish, version 2.2.0-876-g1c6f6df\nOperating system: Doesn't matter.\nTerminal or terminal emulator: Doesn't matter\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/3005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17390208", "body": "Is there a difference between an undefined variable and a variable with 0 number of values (ie an empty array)?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17390208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "martinlindhe": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2989", "title": "RFC: Extensions", "body": "Would it be possible to make a fish extension/plugin that would run and transform / block each entered command before it is taken care of by fish?\n\nShort background:\nI typed \"tar -cvJf *.txt texts.tar.xz\" (i mixed up the parameter order, thinking it is \"input, then output\", a convention that some other tools like cp are using), and the *.txt got expanded, and\nthe command ended up happily overwriting my first text file with the remaining parameters.\n\nSo I thought it would be interesting to attempt to develop some \"cli linter\", that could match\non some regexes to warn and ask user to progress on some known very wrong and dangerous commands.\nBut for this to work, it needs to run on the raw user input.\n\n(another classic is \"rm -rf /\")\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2989/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snnw": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2985", "title": "stop bundling pcre2 ", "body": "Besides it being bad practice (cf. [here](https://wiki.gentoo.org/wiki/Why_not_bundle_dependencies) and [here](https://fedoraproject.org/wiki/Bundled_Libraries?rd=Packaging:Bundled_Libraries)), bundling pcre2 has caused some build and security issues in the past (#2938, #2469, #2446).\n\nI understand that there is currently a (more or less) valid reason for bundling pcre2 due to some distros not shipping it.  We should track which distros and make sure there are packaging requests filed. Maybe @krader1961 can expand here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2985/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andrex-e-schulman": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2980", "title": "external commands launched from config.fish don't have the correct tty modes", "body": "When I run `/bin/rm -i` in fish 2.3b1 in Cygwin, the command waits for me to answer y or n, but it doesn't receive any keyboard input. I have to press Ctrl-C to abort the command.\n### Reproduction Steps:\n1. Run `touch tstfile`\n2. Run `/bin/rm -i tstfile`\n3. Command responds with `/bin/rm: remove regular empty file 'tstfile'?`\n### Expected behavior:\n\nCommand accepts y or n as an answer.\n### Observed behavior:\n\nNo keyboard input is accepted. The command hangs until I interrupt it with Ctrl-C.\n### Additional information:\n\n`rm -i` worked fine in fish 2.2.0 in Cygwin.\n\nfish-2.3b1-1 is available in Cygwin setup as a test release (or it will be shortly) (click on \"Exp\" at the top right to see test releases). \n\n---\n\nFish version: 2.3b1\n\nOperating system: Cygwin x86_64\n\nTerminal or terminal emulator: mintty\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/ed0a57ff6d36b8106b02bd5208c49c54eb1b17fd", "message": "Update cygport completions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cbuschardt": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2961", "title": "Cygwin: Fish doesn't accept paths with colons in them for implicit CD", "body": "Fish is overly restrictive on characters that may appear in paths.\n### Reproduction Steps:\n\nType \"c:/\" or \"cd c:/\" without the quotes and press enter.\npath_get_cdpath apparently doesn't allow for the path to contain a colon.  \n### Expected behavior:\n\nCommand should succeed and switch directories.\n### Observed behavior:\n\nCommand fails\n### Additional information:\n\n\"ls c:/\" works and even autocompletes directories. \n\nFish version: 2.2.0 as part of Cygwin\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marmistrz": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2953", "title": "sudo autocompletion should check correctness too", "body": "When we type a bogus command without sudo, it's red. This should happen with sudo too.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2953/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daenney": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2937", "title": "Completion generation from pandoc manpage is broken", "body": "### Reproduction Steps:\n1. Install pandoc and put the manpage on the `MANPATH`\n2. `fish_update_completion`\n3. `pandoc -<tab>`\n### Expected behavior:\n\nGet completions for the long and short options in the man page.\n### Observed behavior:\n\nGet completions for long and short options in the man page riddled with a lot of garbage:\n\n```\n-\\).                                            (Here is a simple example: * one * two * three T\u2026 [See Man Page])\n---                                                                                                    (author:.)\n---\\)                                                      (In reading LaTeX, parse the characters `, [aq], and.)\n-----  -----:                                                                  (apple|2. 05 pear|1. 37 orange|3.)\n------  -------  ----------                                                    (12 12 12 12 123 \u2026 [See Man Page])\n-----------  -------------------------                                                            (First row 12.)\n---------------                                          ((This syntax is compatible with PHP Markdown Extra. ).)\n------------------                              (The header text can contain inline formatting, \u2026 [See Man Page])\n-------------------------------------------------------------  (Centered Default Right Left Head\u2026 [See Man Page])\n--ascii                                                                    (Use only ascii characters in output.)\n```\n\n---\n\nFish version: `fish, version 2.2.0`\n\nOperating system: OS X 10.11 and Homebrew\n\nTerminal or terminal emulator: iTerm2\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jakwings": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2929", "title": "Suggestion: remove the feature introduced in issue #983", "body": "I cannot think of a good name for that feature in issue #983. A simple example about that:\n\n```\nprompt> echo A \\\n  # comment\n  # still comment\n  B  # done\nA B\n```\n\nThat feature implemented by @snnw missed out the case that a line continuation (a backslash plus a line-break) can appear at the end of tokens of any type, not just at the start of the next token, e.g.\n\n``` fish\n# At the start of a new token (if a line continuation can be seen as a token)\necho \\\n  #comment\n\n# At the end of the token `A\\` (plus a line-break)\necho A\\\n #comment\n```\n\nAccording to [the referred StackExchange question](https://unix.stackexchange.com/questions/85253/is-it-possible-to-have-comments-in-multiline-commands-in-fish) in #983, fish is expected to work like bash:\n\nexpected:\n\n``` fish\nfunction my_function\n  echo \"hello\" |\n    # remove 'l' \n    tr -d 'l'\nend\n```\n\nnot this one (with an extra backslash):\n\n``` fish\nfunction my_function\n  echo \"hello\" | \\\n    # remove 'l' \n    tr -d 'l'\nend\n```\n\nSo that feature is not hitting the spot.\n\nFortunately, there is still no documentation for that hackery feature, I suggest removing it for a simpler and more consistent behavior of line continuation in fish \u2014 line continuation just splits a line into two lines, not three or more lines.\n#1285 and #1817 (dup) also express the wish for a more convenient pipe.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2876", "title": "Mismatched parentheses in command substitutions?", "body": "fish from git commit 35cee1e\n\n``` fish\necho (echo hi #hi)\n```\n\n```\n> echo (echo hi #hi)\nhi\n```\n\nThe script above runs successfully, and the one below fails:\n\n``` fish\necho (echo hi #hi()\n```\n\n```\n> echo (echo hi #hi()\nUnexpected end of string, parenthesis do not match\nfish:  echo (echo hi #hi()\n            ^\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2613", "title": "iTerm2: Wrong $PWD after locale is changed", "body": "Already discussed in another issue: https://gitlab.com/gnachman/iterm2/issues/4083\nBut it seems more like a problem from fish.\n\nSteps to reproduce:\n1. iTerm2 Preferences > Profiles > General > Working Directory: Reuse previous session's directory\n2. In config.fish, export LANG=\"en_US.UTF-8\"\n3. `cd /path/to/\u00c4pfel; and echo $PWD` outputs `/path/to/\u00c4pfel`\n4. Switch to a new tab by pressing <kbd>command</kbd>-<kbd>T</kbd>\n5. In the new tab, `echo $PWD`, gets `/path/to/A\u00cc\u0088pfel`\n6. `pwd` outputs: `/path/to/\u00c4pfel` (normal)\n\nI suspect this is related to Unicode Normalization Form Decomposition (NFD). And here are some JavaScript for comparison:\n\n``` js\n$ encodeURI('\u00c4pfel'.normalize('NFD'))\n\"A%CC%88pfel\"\n$ decodeURI(encodeURI('\u00c4pfel'.normalize('NFD')))\n\"A\u0308pfel\"\n$ unescape(encodeURI('\u00c4pfel'.normalize('NFD')))\n\"A\u00cc\u0088pfel\"\n```\n\nand two fish commands to illustrate the mechanism of `unescape` above:\n\n``` fish\n$ printf '\\xcc\\x88'\n \u0308\n$ printf '\\u00cc\\u0088'\n\u00cc\u0088\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/14497322", "body": "`string` is not in my system, can use `sed`:\n\n```\nset -l out (echo $argv | bc)\nset out (echo $out | sed 's/\\\\\\\\ //')\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/14497322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/14497551", "body": "Sorry, I miss a flag for `sed` to relace all matches.\n\n```\nset -l out (echo $argv | bc)\nset out (echo $out | sed 's/\\\\\\\\ //g')\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/14497551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/14521206", "body": "@pickfire Ok, now using the latest build. It works. :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/14521206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15033804", "body": "Ok, I'll do that. It is so easy to forget this implicit inheritance. 8-| <ins>oh, the capital letters can help me remember next time.</ins>\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15033804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47447428", "body": "Thanks. fixed\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47447428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59690213", "body": "This fails for `/usr/bin/readlink` on osx. <ins>Update: And I don't find `realpath` in `/usr/bin` `/bin` `/usr/sbin` `/sbin`.</ins>\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59690213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "eduardoHoefel": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2868", "title": "I wish completions could print colored", "body": "this is not a bug. I just don't know where to post.\nI have a function called echoColored(). It prints the second argument using the color given in first argument (eg. echoColored Red \"Hello World!\"). Now I'm writing the completion to the function, but I wish it could display the suggestion using the same color as the name.\ncode would look like this:\ncomplete -A -f -c \"echoColored\" -a \"White Black (echoColored Red Red) Green Blue Cyan Purple Yellow Gray\"\nin this case, the word Red is colored with Red before posting.\nIt print this instead:\n\\e[38\\;5\\;196mRed  Black  Cyan    Green   Red    Yellow\n196                 Blue   Gray95  Purple  White  \nbecause it does not recognize the symbol used to set the color Red.\nI think I just need to change the code that prints the words to one that enables colors.\nIt's not impossible since it already highlights the selected option with colors.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2868/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maxnordlund": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2828", "title": "Add a hook for when a function returns", "body": "Moved from #2036:\n\n---\n\n> I not sure if this belongs here, but I can't seem to find a way to trap function return. That is, do some cleanup when a function returns, regardless if it was interrupted somewhere in the middle.\n> \n> ``` fish\n> function foo\n>   set -l dir (mktemp -d temporary_stuff)\n>   function cleanup --on-function-return --inherit-variable dir\n>     rm -rf $dir\n>     function --erase cleanup # Should be done automatically?\n>   end\n> \n>   # stuff with foo\n> end\n> ```\n> \n> @maxnordlund\n\n---\n\n> @maxnordlund: There is no --on-function-return option for the function command. I'd recommend opening an enhancement issue as I couldn't find an open issue asking for such a feature and it's orthogonal to this issue. It's also unclear whether your proposal is the best way to solve this issue. For example would a \"try; ...; except\" style block be better and solve other problems? Or would it be better to add define foo like function foo --on-return=func_name and have the named function automatically inherit the scope of \"foo\"?\n> \n> @krader1961\n\n---\n\n> Yes I know it doesn't exist, but wasn't sure if it was different enough to warrant it's own issue, as I belive it is not orthogonal, rather slightly angled to this one.\n> \n> Using `try`/`catch`/`finally` would not be the quite same, and would mean that every function that needs some cleanup needs to wrap its entire body in an `try` statement. It also confuses events/signals with exceptions, which may or may not be such a good idea.\n> \n> The extra flag to `function` does sound like a nicer alternative.\n> \n> @maxnordlund\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2728", "title": "Idea for implementing concurrent functions", "body": "I'm been thinking about this for some time, and think I've come up with something that can be implemented without to much trouble, and also allow to reuse most of the non-thread safe code.\n## The Idea\n\nThe basic idea is to have `Services` (or `Deamons`) classes that enforce the boundary between threads. \n### What do I mean with that?\n\nWell I was thinking having a small set of superclasses which implement the necessary infrastructure for concurrent access and exposing this as static methods.\n\nSo instead of creating a new instance, or having a singleton, you call `MyClass.get` which will return an instance for you to use. Then you use it until your done, and return it back. This could/should probably use a destructor to make a bit easier. I would like to return a [`Future`](http://en.cppreference.com/w/cpp/thread/future) to allow for very natural use, then just call `wait`, and with a custom subclass/hook this could also return it to the parent service.\n### Why return the instance?\n\nTo allow use of thread pools/process pools/singelton state/caches/.... This is also why I think it will be a very small set of superclasses, one for a thread, one for global state (singleton), one for processes and one that caches the result.\n## Common flow using this\n\nThe shell, a global service, gets input from the user, and sends it to the parser, a thread pool. Then the resulting AST is inspect to see if there are errors to be displayed to the user, syntax highlighting and autosuggestion.\n\nIf the user asks for autocompletion (or maybe also the autosuggestion), the autocomplete service is called. This would need to be a singleton broker to allow caching, or just a thread pool. It will call a process service to run the autocomplete command in the background, which in turn also calls the parser service. Then it wait for two types of input, search terms from the user and valid entries from the command. It will then do its thing and send the result back to the screen service to actually be rendered. (This might be the shell, not sure)\n\nThe `jobs` control would use another process service to make it easy to query and don't leak autocomplete commands to the user. However the process service could support pipelines directly to make it easier to use, and also understanding that fish functions should be run using the interpreter service.\n\n---\n### Caching autocomplete\n\nIts probably only worth it for large inputs, like `git log`, or very slow autocomplete commands, like `rake -T` or `find . <something very deep>`. To make it work the autocomplete author needs to supply two more functions/hooks.\n\nThe first to supply a hash key, in in case of `git` this would be the closest git root directory. This means even if you `cd` around it can reuse the cache.\n\nThe second to supply an invalidation key, which again in `git`s case would be the HEAD commit sha. This could also be the last modification date or something completely different.\n\nWhy two separate functions/hooks? See the `git` case for example of why it would be very useful.\n\n---\n\nI most likely missed a bunch of stuff, but at least this may be used as a starting point to get things rolling. I also think having an documented architecture makes it easier to get stuff done :tm:\nBut more importantly allow people like me to jump in and help. If this, whatever it may become, is decided to be the way forward, I would really like it to become a proper document, either on the wiki or as a file in the repo.\n\nIf an owner would like to add/change this please do so. I want it to be a living document. What say ye?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adjl": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2824", "title": "Show number of git branches in prompt", "body": "Would it be possible to show the number of branches a git repo has in `__fish_git_prompt` with `$__fish_git_prompt_show_informative_status` set?\n\nTo illustrate:\n\n```\n~/H/dotfiles (master)\n> git branch\n* master\n\n~/H/dotfiles (master)\n> git branch dev\n\n~/H/dotfiles (master2)\n> git branch\n  dev\n* master\n\n~/H/dotfiles (master2)\n> git checkout dev\n\n~/H/dotfiles (dev2)\n> _\n```\n\nCheers\n\n---\n\nfish, version 2.2.0\nppa:fish-shell/release-2\nTerminator\nLinux Mint 17.2\nCinnamon 64-bit 2.6.13\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2823", "title": "git prompt: Option to set individual upstream status colours", "body": "It would be helpful if it were possible to set different colours for each type of upstream status (`upstream_ahead`, `upstream_behind`, `upstream_diverged`). At the moment, only one colour is applied, as defined in `$__fish_git_prompt_color_upstream`.\n\nFor consistency, setting the colours via `$__fish_git_prompt_color_upstream_*`, similar to `$__fish_git_prompt_char_upstream_*`, would be best.\n\nCheers\n\n---\n\nfish, version 2.2.0\nppa:fish-shell/release-2\nTerminator\nLinux Mint 17.2\nCinnamon 64-bit 2.6.13\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bzaborow": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2771", "title": "Path autosuggestion abuse - high memory usage (potential crash)", "body": "<!--\nThanks for helping to make fish better!\n\nIf you are asking for help with fish, or you've found a bug:\n - Make sure it's not a known or solved issue, by searching https://github.com/fish-shell/fish-shell/issues\n - Fill in the following information carefully:\n\n-->\n\nPath autocompletion is a very useful feature in general. But when it hits a single directory with milions of files it causes fish to consume huge amount of resources. And in such cases there is not much use of it. I suggest to limit the size of a completion list to something like 10k (preferably configurable).\n### Reproduction Steps:\n1. Create a directory TheDirectory and fill it with a few milion of files (e.g. using for + seq + touch)\n2. Use autocompletion on this directory, that is: `cd TheDirectory<TAB>`\n3. Observe your CPU and memory being eaten by fish \n### Expected behavior:\n\nfish warns that the list of files is to large and doesn't show any suggestions or shows the first 10k suggestions and prompts that the list is incomplete.\n### Observed behavior:\n\nfish quite hangs (not entirely - it responds to ^C and backspace slowly) and eats resources. In my case about 6M of files resulted in 18GB of memory and 41 minutes of CPU usage. Even after ^C, when doing something else, it still computes those completions in background.\n### Additional information:\n\n---\n\nFish version: 2.2.0\n\nOperating system: Ubuntu 15.10\n\nTerminal or terminal emulator: screen opened inside rxvt-unicode\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paidhi": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2739", "title": "Documentation website shows content too big. Making it unreadable on iPhone.", "body": "I am using an iPhone 6S & iOS 9.\nThe Fish documentation site (http://fishshell.com/docs/current/index.html) renders it's content hugely zoomed in when opened on the iPhone (Safari or iCab browser). The zoom gestures to reduce the site content also don't work.\nThe main site URL http://fishshell.com shows OK.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6371906", "body": "I second that.\nThe missing vi-mode was the one thing keeping me from using the original fish shell.\n\"Complete vi-mode key bindings\" was in the manual section of \"Missing features\" forever.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6371906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lisimia": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2727", "title": "Job command is truncated and unreadable sometimes. ", "body": "Issue  #1119\nand \nhttps://github.com/fish-shell/fish-shell/commit/6db82c162caa06f3f47ae248da7c4e354d4d28a1#diff-2496498d8489caaa1554877d00271179R654\n\nforced a maximum length on my jobs. \n\ni run about 10~20 jobs regularly, all over 200 characters long, the first 30 characters, and last 30 characters are always the same\n\nits a bit weird i know. \n\nbut i would like to add an environment flag that truncate_command checks for in which if set, will NOT truncate the command. \n\nI view this as a regression because it broke existing behaviour, with no way to go back. I'm willing to put in the code if someone can point me in the right direction\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "domoritz": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2698", "title": "Set the number of rows/lines for completions", "body": "I have a large screen and would like to use more than 4 rows for autosuggestions. \n\n<img width=\"615\" alt=\"screen shot 2016-01-26 at 20 38 53\" src=\"https://cloud.githubusercontent.com/assets/589034/12604106/fd858250-c46c-11e5-8622-67d2ad8c9ad4.png\">\n\nI know tat I can hit tab again to get the complete list. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eugenesvk": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2692", "title": "Set Window title and Tab title separately in iTerm2, add bell char", "body": "In `zsh` I am able to set tab and window titles separately in iTerm2, e.g. I have\n1) **Tab** title: current folder only to easily differentiate tabs by which folder they're open at. In path  `~` replaces `username` (`echo -ne \"\\033]1;{$PWD1/#username/~}\\007\"`, where `PWD1={$PWD##*/}`\n2) **Win** title: full path with `~` instead of `/users/username` (`echo -ne \"\\033]2;{$PWD/#\"$HOME\"/~}\\007\"`)\n\nAs I understand from https://github.com/fish-shell/fish-shell/issues/47, `fish` just sets both windows and tab titles with the same `fish_title` function.\nIs it possible to separate those two, maybe have a separate `tab_title` function or something so that users who are not using it continue to get both windows and tab title within the old function?\nAlso, in `zsh` I am able to add a bell char (`\\007`) to the titles. How do I do that in `fish`?\nThanks!\n\nP.S.\nMy system is `OS X 10.11.2`, `iTerm2 2.9.20160113` and `fish 2.2.0-542-g4b2495f`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2684", "title": "Can't use a U+F005 (\\uF005) character in fish", "body": "When using `echo \\UF005` I get `Mismatched brackets` error even though this is not a bracket symbol. Also, I can't insert this symbol manually either, so it seems like a forbidden symbol in `fish` or something (works fine in other shells).\nIs there a way around it? I'm using a customized font that has some of git icons in that range (can't paste here since GitHub doesn't have this font).\nPS.\nSorry, should've mentioned that it's on `OS X 10.11.2`, `fish 2.2.0`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ElijahLynn": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2662", "title": "funcsave function should mark a function as being autoloaded", "body": "If I do a `funced function` followed by `funcsave function` in a session 1 and then do a `funced function` in session 2 should I be seeing the same function from session 1?\n\nCurrently I am not. I trying doing a fish config reload in session 2 but no go. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iirelu": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2652", "title": "Unicode support broken (was This \u2e3b unicode \u2e3b character \u2e3b makes \u2e3b weird \u2e3b things \u2e3b happen)", "body": "[U+2E3B \u2e3b THREE-EM DASH](http://graphemica.com/%E2%B8%BB)\n\n![image](https://cloud.githubusercontent.com/assets/3432543/12089975/3ee02b02-b2e2-11e5-8a97-63c3e1fb6733.png)\n\nSteps to reproduce:\n1. Copy that unicode character\n2. Type \"test\" (or anything for that matter)\n3. Paste repeatedly\n\nWhat happens: Some sort of exponential growth? Pressing ^C doesn't get rid of it.\n\nExpected results: Not that.\n\nI've tested this in every terminal emulator I have, and it shows up in all of them (even xterm). No other shell has this problem.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2652/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bpinto": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2648", "title": "Unexpected error message when using eval", "body": "```\n### ~/.config/fish/functions/eval_bug.fish\n\nfunction inner_function\n  echo 'abc'\nend\n\nfunction eval_bug\n  eval \"inner_function >/dev/null\"\nend\n```\n\n```\n$ fish -c \"eval_bug\"\nAn error occurred while redirecting file descriptor 1\ndup2: Bad file descriptor\n```\n\nI have read the [eval](https://github.com/fish-shell/fish-shell/blob/master/share/functions/eval.fish) file comments a couple times but I can't say I understood it. :P\n\nIs this a bug? Or is it expected?\n\n---\n\nDebugging information:\nfish, version 2.2.0-436-gef67fc7\nOSX El Capitan\n\nThis has been reproduced on Ubuntu machines however.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2648/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/23176845", "body": "`math` requires `bc` package. Check: https://github.com/fish-shell/fish-shell/pull/1905\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/23176845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "derekstavis": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2640", "title": "List registered events: The `events` builtin", "body": "Currently there is a way to register and emit events, but there isn't a way to list events that functions registered to, neither there are ways to unregister from events, aside from removing functions. I don't currently see the need to unregister feature, but listing registered events would be useful for debugging.\n\nMaybe it's time to add a `events` builtin, analogous to `functions` one:\n\n```\n$ events --help\n\n       events \u2010\u2010 print, query or remove events\n\n   Synopsis\n       events [ \u2010a | \u2010\u2010all ] [ \u2010n | \u2010\u2010names ]\n       events [ \u2010e | \u2010q ] EVENTS...\n\n   Description\n       events prints, queries or remove events.\n\n       The following options are available:\n\n       \u00b7 \u2010a or \u2010\u2010all lists all events, even those whose name start with an underscore.\n\n       \u00b7 \u2010n or \u2010\u2010names lists the names of all defined events.\n\n       \u00b7 \u2010e or \u2010\u2010erase causes the specified event handlers (functions) to be erased.\n\n       \u00b7 \u2010q or \u2010\u2010query tests if the specified events exist.\n\n```\n\nIdeas, opinions on the matter?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15776756", "body": "This have been already discussed at Gitter. A fast-path like this one should satisfy the \"exact same abbreviation already exists\" check:\n\n``` fish\ncontains -- \"$argv\" $fish_user_abbreviations\n    or abbr $argv\n```\n\nBut of course it should be incorporated by `abbr` command.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15776756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "imcaizheng": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2633", "title": "`source` reads from stdin (was: fish hangs up after command substitution failed  during initialization)", "body": "I tried to put `source (_fish_config_dir)alias.fish` in my local configuration file. \nAfter that fish complains an error and freezes every time I open a new terminal. Both Ctrl-D and Ctrl-C don't work. \n\nI had copied the complained text as showed below:\n\n```\nfish: Unknown command '_fish_config_dir'\n~/.config/fish/config.fish (line 1): _fish_config_dir\n                                     ^\nin command substitution\n    called on line -1 of file ~/.config/fish/config.fish\n\nfrom sourcing file ~/.config/fish/config.fish\n    called during startup\n```\n\nI do have a function named __fish_config_dir in the functions directory and just made a typo. Fortunately I fixed the typo with a GUI text editor and everything goes well again.\n\nSeems that it is a bug from the source command because fish would not be hanging up but complains error after I put `echo (command_not_exists)` in the local configuration file.\n\nfish version: fish, version 2.2.0-473-g8a6f26f-dirty\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Neo-Wang": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2590", "title": "Cygwin: Unable to rename file from '~/.config/fish/fishd.tmp.7ZwM5R' to '~/.config/fish/fishd.mypc.x86_64': Permission denied", "body": "1. I am using Cygwin on a Citrix Virtual Disk.\n2. When fish starts, the error shows up.\n3. No issue when starting bash or zsh.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cappslock": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2577", "title": "Allow adding prompts for selection with fish_config tool", "body": "The fish_config tool is useful for making adjustments to the color scheme and prompt. It would be nice if there was an obvious way to add a prompt or color scheme to the available options in this tool.\n\nI do understand how to change both manually, but being able to do so from this tool would be nice.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simonbcn": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2557", "title": "problem with scroll after <TAB><TAB> if the filename is too long", "body": "Ubuntu 14.04 64bits\nfish v2.2.0 (installed from `ppa:fish-shell/release-2`)\nterminator 0.97\n\nI hit `TAB` twice to cycle through the possibilities but it does a wrong scroll and it deletes my command:\n\n[![asciicast](https://asciinema.org/a/b9fcyzd72agnuytpl70zfxkqr.png)](https://asciinema.org/a/b9fcyzd72agnuytpl70zfxkqr)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benjaminweb": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2547", "title": "Improve auto-completion of filenames", "body": "There are file1.py and file1_test.py only.\n\n`hg add file1.py file1\u2026`\n\nThere, fish could see that file1.py has been provided earlier.\nAs it makes no sense to repeat the same file name, fish could auto-suggest file1_test.py.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xdudi": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2538", "title": "Command-completion isn't case-insensitive", "body": "```\n~> touch sh\n~> chmod 755 sh\n~>\n~> cp sh sh1\n~> cp sh sh2\n~> cp sh sh3\n~>\n~> cp sh Sh1\n~> cp sh Sh2\n~> cp sh Sh3\n~>\n~> ls\nsh  sh1  Sh1  sh2  Sh2  sh3  Sh3\n~> ./sh # with <tab><tab>\n./sh  (Executable, empty)  ./sh1  (Executable, empty)  ./sh2  (Executable, empty)  ./sh3  (Executable, empty)\n~> ./sh\nsearch: Sh\n(no matches) # should display: ./Sh1 ./Sh2 ./Sh3\n```\n\nThe fish has also problems with case insensitive tab-completions...\n\n```\n~> mkdir dir DIr dIR DiR\n~> cd ./di # by pressing <tab> I can't change on DiR\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andyearnshaw": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2536", "title": "Left/right arrow keys should not exit history navigation", "body": "I've noticed that if I press up to navigate history whilst typing a command, any press of the left or right arrow key completes the command with the currently selected history item and I can no longer press up/down to go to another without first pressing <kbd>Ctrl</kbd> + <kbd>C</kbd> to clear the text.\n\nThis seems like bad UX.  I'd expect the up and down arrows to continue changing the history selection until a character is entered or removed from the line.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2524", "title": "$status incorrect when SIGSTOP is sent", "body": "I'm noticing a discrepancy when backgrounding in Fish shell.  In fish, zsh and bash, do the following:\n1. Run `sleep 10000000`\n2. Press <kbd>Ctrl</kbd> + <kbd>Z</kbd>\n3. Run `echo $?` for bash/zsh, `echo $status` for fish\n\nIn zsh and bash, I get _146_.  In fish, I get _1_, or _0_ if I send `kill -stop` with the pid of the sleep process.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OwenAR": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2532", "title": "For readability, can you set auto-complete to use left-align for flag descriptions rather than right-align?", "body": "It's obviously pretty hard to see what description matches up to which flag in cases like this, where some of the descriptions are a lot longer:\n\n```\n$ ping -\n-A                                                                                               (Adaptive ping)\n-a                                                                                                (Audible ping)\n-B                                                        (Do not allow ping to change source address of probes)\n-b                                                                           (Allow pinging a broadcast address)\n-c                                                         (Stop after specified number of ECHO_REQUEST packets)\n-d                                                            (Set the SO_DEBUG option on the socket being used)\n-F                                                  (Allocate and set 20 bit flow label on ECHO_REQUEST packets)\n-f                                                                                                  (Flood ping)\n-I                                                           (Set source address to specified interface address)\n-i                                              (Wait specified interval of seconds between sending each packet)\n-L                                                                      (Suppress loopback of multicast packets)\n-l                                              (Send the specified number of packets without waiting for reply)\n-M                                                                          (Select Path MTU Discovery strategy)\n-n                                                                                         (Numeric output only)\n-p                                                                                 (Pad packet with empty bytes)\n-Q                                                      (Set Quality of Service -related bits in ICMP datagrams)\n-q                                                                                                  (Quiet mode)\n-R                                                                                                (Record route)\n-r                       (Bypass the normal routing tables and send directly to a host on an attached interface)\n-S                                                                                      (Set socket buffer size)\n-s                                                               (Specifies the number of data bytes to be sent)\n-T                                                                            (Set special IP timestamp options)\n-t                                                                                     (Set the IP Time to Live)\n-U                                                                             (Print full user-to-user latency)\n-V                                                                                    (Display version and exit)\n-v                                                                                                (Verbose mode)\n-W                                                                     (Time to wait for a response, in seconds)\n-w  (Specify a timeout, in seconds, before ping exits regardless of how many packets have been sent or received)\n```\n\nIs there a setting to make them left-align rather than right-align?\n\n(Honestly, I hate invisible whitespace and always use visible whitespace in my editor. Visible whitespace would make this somewhat less of a problem, but I have no idea if you can even get a terminal to use visible whitespace.\n\nLeft-alignment is probably still better in this case, anyway, though, right?)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pik": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2504", "title": "Syntactic sugar for set -q foo; or set foo default like ${foo:=default}", "body": "According to this document there are [no options available](http://hyperpolyglot.org/unix-shells#var-expansion) and according to this [stack-exchange discussion](http://unix.stackexchange.com/questions/81421/how-do-i-reference-a-variable-in-fish-shell-with-a-default-fallback) it doesn't look to nice either. The best I can think of something like:\n\n```\nset -q $MY_PROGRAM_ROOT; and set program_root ~/.local/share/my_prorgram; \\\nor set program_root $MY_PROGRAM_ROOT\n```\n\nIs there a better alternative available? \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2504/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sp5": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2485", "title": "Fish does not split arguments in brackets", "body": "```\n> fish --version\nfish, version 2.1.1\n> function showargs\n      echo \\($argv\\)\n  end\n> showargs one two three four\n(one) (two) (three) (four)\n> showargs one [two three] four\n(one) ([two) (three]) (four)\n> showargs one t[wo three] four\n(one) (t[wo three]) (four)\n```\n\nThe bug is that arguments are being joined together when a `[` is embedded in an argument, but not when an argument starts with it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jpolitz": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2484", "title": "Issue rendering completion when longer than terminal size", "body": "On OSX 10.10.5, in both iTerm2 and in Terminal.  If I start to type a command that has a completion longer than the terminal window, I get quite odd behavior\n\nAfter typing a single \"s\":\n\n![screen shot 2015-10-12 at 9 50 14 pm](https://cloud.githubusercontent.com/assets/119891/10443648/40d4c772-712b-11e5-90f3-354e3ec2b234.png)\n\nAfter typing a \"c\" from that state:\n\n![screen shot 2015-10-12 at 9 50 46 pm](https://cloud.githubusercontent.com/assets/119891/10443652/52a6caae-712b-11e5-9398-edcd0034a99e.png)\n\nAfter typing backspace once:\n\n![screen shot 2015-10-12 at 9 51 22 pm](https://cloud.githubusercontent.com/assets/119891/10443663/69eb4906-712b-11e5-9b38-804603ecceff.png)\n\nAfter typing backspace again:\n\n![screen shot 2015-10-12 at 9 52 09 pm](https://cloud.githubusercontent.com/assets/119891/10443677/877cc382-712b-11e5-938f-6a4479039948.png)\n\nIn this state, typing backspace any more doesn't do anything, so it seems like the state of what's being shown doesn't match the currently-typed characters.\n\nIf I resize the terminal window so the whole completion fits, I don't run into any issues.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alphapapa": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2442", "title": "$fish_color_search_match only supports background colors", "body": "It seems that `fish_color_search_match` only supports background colors.  Doing things like:\n\n``` fish\nset fish_color_search_match --underline\nset fish_color_search_match yellow --underline --background=black\nset fish_color_search_match yellow\n```\n\n...seem to have no effect.  But this works:\n\n``` fish\nset fish_color_search_match --background=black\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2442/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13193793", "body": "Not to pick nits (I appreciate your fixing this!), but it should say, `the last job's PID`, since it's possessive.  :)  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13193793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13273320", "body": "I don't mean to be picky or critical, just some feedback for thought:\n\nWhen you say, \"append a list to a string,\" what comes to mind for me is array operations, like:\n\n``` fish\nset foo bar\nset baz 1 2 3\nset foo $foo $baz\n# or:\nset foo \"$foo $baz\"\n```\n\nThat is literally \"appending a list to a string.\"  And some of the upcoming list/array builtins could also fall into this category.\n\nIt might be more clear to say something like, `When you write one variable substitution next to another with no space between them, or when you write a literal string next to a variable substitution with no space between them, Fish expands them into their cross-product.`\n\nIt would also be good to show an example of doing this with a string, as well as with two variables, e.g.:\n\n``` fish\nset foo bar\nset baz 1 2 3\n\necho $foo$baz  # bar1 bar2 bar3\necho buzz$baz  # buzz1 buzz2 buzz3\n```\n\nThanks for documenting this!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13273320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13296680", "body": "Nice work, this is a lot clearer.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13296680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13296688", "body": "Great work!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13296688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15754289", "body": "> Do not place them in config.fish, because this will lead to worse startup performance\n\nIs that because of the situation in which setting PATH in config.fish can cause PATH to grow exponentially on every shell invocation?  Other than that, I would think that doing this would not make a noticeable difference.  Just curious.  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15754289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15992946", "body": "Yeah, this seems a bit confusing to me.  I keep my config in git and sync it among multiple systems.  I keep my abbrs in an `abbrs.fish` file and load it from `config.fish`.  Universal variables aren't a very good way to use version control and syncing with fish configs.  So it would be good if this could be fixed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15992946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16017808", "body": "Thanks, I'll add that.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16017808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16895357", "body": "Very nice! :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16895357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "qznc": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2398", "title": "History should contain how often a command was executed", "body": "Since the answer to [my stackoverflow question](https://stackoverflow.com/questions/32585950/most-used-fish-shell-commands) was \"impossible\", fish must improved.\n\nI consider this an essential feature for power users. You should regularly analyse what commands you use often and add shortcuts.\n\nFirst, store the count in the history. Second, extend the history command, so the information becomes accessible.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tannhuber": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2384", "title": "contains -i should return array with all matches", "body": "```\nset var a b c a\ncontains -i a $var\n```\n\nreturns `1`. However, I would expect an array with the two values `1` and `4`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16649619", "body": "There might be the same problem within `builtin_exit` and `builtin_return`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/16649619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "spider-mario": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2365", "title": "Don't complete arguments for non-existent commands", "body": "Hi,\n\nI use fish 2.2.0 on Arch Linux and if I open a new shell (the bug does not seem to occur twice in the same session) and type `xrandr` + space, I get the following output:\n\n```\n$ xrandr xrandr may be found in the following packages:\n  extra/xorg-xrandr 1.4.3-1     /usr/bin/xrandr\n/usr/share/fish/completions/xrandr.fish (line 1): xrandr -v | grep RandR | sed 's/^.\\+\\s\\([0-9\\.]\\+\\)$/\\1/'\n                                                  ^\nin command substitution\n        called on line -1 of file /usr/share/fish/completions/xrandr.fish\n\nfrom sourcing file /usr/share/fish/completions/xrandr.fish\n        called on standard input\n\nin command substitution\n        called on standard input\n\nexpr: syntax error\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sheldon": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2330", "title": "directory history not working with alt-left / alt-right on Terminal.app in OSX", "body": "Hi\n\nI've tried a little debugging but can't seem to narrow this down. dirh works fine showing a list of previous directories. alt-left / alt-right work fine for skipping words or completing commands 1 argument at a time. For some reason alt-left / alt-right at an empty command line don't switch directories in the history.\n\nAny chance there's some way I can figure this out? It seems like a great feature!\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2330/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joesanford": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2320", "title": "Multi-line prompts are repeated when the terminal window is resized. (repeat of #321)", "body": "This bug is still occurring with both multi-line and single-line prompts.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2320/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mwm": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2315", "title": "Fish breaks flow control in child processes", "body": "If I start a command and then decide there's to much output and try and stop it with C-S, it doesn't stop. This works properly in most other shells.\n\nSeems that fish purposely turns off flow control to make screen users with odd configurations happy. See issue #814: https://github.com/fish-shell/fish-shell/issues/814 for more info. I will say that being able to pause the output has nothing to do with vt100s, and everything to do with wanting to scroll through more output than your terminal emulator has lines configured.\n\nMy take is that the solution should be to make terminal_mode_for_executing_programs be set to the terminal mode after each command exits, rather than being whatever it was when the shell started with some random set of tweaks added. This would make stty work properly, so users could set it themselves.\n\nDownside would be that if some command screws up the tty settings, it would propagate to future commands (but not suspended jobs). Just like it did back when I still used screen. But it also means that they can fix it with a simple \"stty sane\" (at least, they can on my Unix boxes).\n\nI'm looking into creating a pull request.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lloeki": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2314", "title": "`-c` argument handling", "body": "Typical of `sh` shells is to have a `-c` flag that takes all the remainder arguments as a command. This allows for stuff like `bash -l -c foo \"$@\"` to work and splat the arguments properly, including strings with spaces.\n\nFish does not do this:\n\n```\n$ fish -l -c ls -1\nfish: invalid option -- 1\n$ fish -l -c \"ls -1\"\nfoo\nbar\nbaz\n```\n\nWhile this allows to put `-c` anywhere as an argument, this isn't _quite_ as useful as passing actual arguments to the command to run within fish.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47237620", "body": "Didn't know about that one. This responsibility is left to the caller of this library (either the prompt or in the user's config) but not inside the library itself.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47237620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Hettomei": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2287", "title": "[feature] Place the cursor at a given place after an abbr", "body": "Hi,\n\nI love abbreviation, it always show me the right command.\n\nBut sometimes I need to put the cursor at a given place, is it possible to do that ?\n\nExample : \n\n``` fish\nabbr -a describe 'mysql -u root my_database -e \"describe $CURSOR\"'\n```\n\nand so, after typing \"describe\" I would like to have my cursor at $CURSOR\n\nThank you for this awesome shell ;)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Profpatsch": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2274", "title": "Completing a folder misses an escape on the first char", "body": "When completing a folder and selecting an entry from the list, if that entry starts with a character that should be escaped, it isn\u2019t.\n\nExample:\n\n<kbd>~/Downloads/[</kbd><kbd>TAB TAB TAB</kbd>\nselect entry `[foobar] my file`\n\nCompletion: `~/Downloads/[foobar\\]\\ my\\ file`\n\nNote the missing `\\` before the first `[`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11851148", "body": "What happened to this commit? Why is it not in 2.1.2?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11851148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "newhook": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2271", "title": "vi_mode: No way to search history?", "body": "My most missed command from bash/zsh is ESC/foo which searches back through my history for commands that _contain_ foo (not start with foo). Fish makes it very easy to find commands that start with something, but not commands that contain something.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jomo": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2266", "title": "Alt+Right should skip dashes", "body": "Using `Alt` + `\u2192` moves the cursor left to the next dash or word. I think dashes should be skipped.\n\nIn the example below, I had to press 4 times to get past `--report-speed=` where I think pressing once should be enough.\n\n[![asciicast](https://asciinema.org/a/9qhj7swry6u1wfcdniksnzyj1.png)](https://asciinema.org/a/9qhj7swry6u1wfcdniksnzyj1)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2266/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Grimy": {"issues": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2249", "title": "Pager search shouldn\u2019t trigger when an entry is already selected", "body": "Up to db0506c1df540639d330a33a9a8c86b0748a593c, fish had nice completion behavior. You could type the beginning of an argument, tab until the correct completion is selected, and then immediately start typing the next argument.\n\nNowadays, fish\u2019s behavior is quite different. Once you have selected the desired completion, typing _anything_ (even a space!) will enter the dreaded \u201csearch\u201d mode, an unbelievably jarring mode that makes reverse-history-search look user-friendly in comparison. You then have to backspace, tab shift-tab to reselect the current completion and hit enter before you can start typing the next argument. That\u2019s six wasted keypresses.\n\nAs soon as there are at least two completion possibilities, the search mode will jump at you to steal your time, focus and peace of mind. There seems to be only two ways to avoid it:\n- After selecting the correct completion, hit Enter. For some unfathomable reason, in this context, hitting Enter doesn\u2019t actually run the command or insert a carriage return or anything, like it _always_ does in every shell I\u2019ve ever used. It just clears the list of possible completions and lets you keep typing in relative sanity. Due to the considerable counter-intuitiveness, I\u2019d rather avoid this option.\n- Hit backspace, then space. This actually makes sense, but wastes two keypresses.\n\nNow, I can understand how the search mode could possibly be useful to some people in some situations, so I\u2019m not asking for it to be removed altogether. However, if you really want to search, it stands to reason that you would do so _before_ selecting the desired completion. Therefore, it would be nice if the search mode wasn\u2019t triggered when the user already selected a completion with tab/shift-tab.\n\nAlternatively, I\u2019d be happy with a configuration option that lets me completely disable the search mode. However, I believe such an option would go against fish\u2019s philosophy.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/2249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yursan9": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/a6536db5028163da30ac5293d0ed0063f91ddbcb", "message": "Update Eopkg support (#4662)\n\nUpdate Eopkg support\r\n\r\nImprove Eopkg completions"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/94ff789c4bab73be492b6bcc123d7e61dca14b74", "message": "Add eopkg completion support (#4600)\n\n* Add eopkg support\r\n\r\nAdd support for eopkg in __fish_print_packages function, and\r\nadd new completion eopkg.fish in share/completions\r\n\r\n* Sorry for the empty file\r\n\r\n* Sorry for the empty file again\r\n\r\n* Use builtin function for checking subcommand and options\r\n\r\n* Fix description\r\n\r\n* Use string function to replace grep and cut\r\n\r\n* Add completion for search command"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "b1narykid": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/6066e243e0b7a93ecb9c8a0a17e922c0d30f689b", "message": "Fixed suspend --force conditions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MindTooth": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/fde647214d0cb8e9f3fcdcd7437fad47f57f7d32", "message": "brew.fish: added cask completion & tweaks"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/721df61f4b21a96aeed9a65e1b59ee05833ea813", "message": "brew.fish: add the leaves option (#4645)"}], "pull_requests": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/4670", "title": "[RFC] diskutil.fish: added apfs completion", "body": "## Description\r\n\r\nAdded APFS completion to the diskutil.fish file.\r\n\r\nPlease take a look, am I on the right track?\r\n\r\n## TODOs:\r\n<!-- Just check off what what we know been done so far. We can help you with this stuff. -->\r\n- [ ] Changes to fish usage are reflected in user documentation/manpages.\r\n- [ ] Tests have been added for regressions fixed\r\n- [x] User-visible changes noted in CHANGELOG.md\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "raichoo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/069e4fdd8d5a8596961be7b6ba1b20b8c49208e9", "message": "do not depend on bash being installed in /bin (#4661)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lourkeur": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8b530839971e48c6f93ef4666bda8288daf987fb", "message": "[PO][FR] translation fixes (#4655)\n\n* [PO][FR]fix translation\r\n\r\n\"key\" was being translated to \"fonction\". (\"function\")\r\nBased the new wording on the above translation.\r\n\r\n* [PO][FR]fix translation\r\n\r\n\"directory\" was being translated to \"fonction\". (\"function\")\r\n\r\n* [PO][FR]fix translation\r\n\r\n\"Permission denied\" was being translated to \"Nom de fonction ill\u00e9gal\". (\"Illegal function name\")\r\nI took the new translation from strerror.\r\n\r\n* [PO][FR]fix translation\r\n\r\n\"Introduction\" was being translated to \"Instruction ill\u00e9gale\". (\"illegal instruction\")\r\n\r\n* $ make po/fr.po\r\n\r\n* #4655: changes requested by @PenegalECI\r\n\r\n* fix some automatically generated translations\r\n\r\nuniformly translate \"logging\" to \"journalisation\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mtbrock": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/bf63e061c9abecf8b44c2b1b00b1b4badeb7ba48", "message": "Fix overzealous cd tab completion\n\nChanged cd completion to differentiate between cd autosuggest and cd tab\ncompletion. cd autosuggest will find deepest unique hierarchy and cd tab\ncompletion will not.\n\nIssue #4402"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pinage404": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/1af4acbd0e67c4a493d4ce88d99af36d5d954c21", "message": "Add: `ngrok` completions (#4642)\n\nCompletions are based on the help messages of [ngrok](https://ngrok.com/)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "componhead": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/3cabed88e283204572b8e643825848de257e1e80", "message": "Add --no-color to more git invocations (#4636)\n\nThis breaks when git has been set to always print in color."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nthapaliya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/0c2d939e02779a80561d2e77aad3a4056bb230b8", "message": "`yarn run` tab completion\n\ncompletes #4597"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7cd9c3b2bf8eebebebee02bd1de67a43938401bc", "message": "Clean trailing whitespace"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asomers": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8fb6d5db3b8f69416ff4c71769a6e4775c3d7848", "message": "Fix the build on FreeBSD ARM and ARM64 (#4593)\n\nDownstream bug:\r\nhttps://bugs.freebsd.org/bugzilla/show_bug.cgi?id=224254\r\n\r\nFixes #4589"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mazorius": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7aaf897a722d6c351c2c71a22a77c0cfd753bf7c", "message": "Add modified completion for git diff (#4592)\n\n* Add modified completion for git diff\r\n\r\n* Add modified completion for git diff"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/a4fced2a8bfd5058eb00ba2edc73f4dc0a2430cf", "message": "Create jhipster.fish\n\nAdd completion for jhipster"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/ce4fdbaf7cf0bb02fe79e89d806b7ae0d08a2ae6", "message": "Create bd.fish\n\nAdd completion for bd, per https://github.com/0rax/fish-bd"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "qbit": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/75e17e007deaaaedfb2b4cefc7cded3341edace0", "message": "add signify completions for OpenBSD"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/37c7950a3f1c6d0b1d41858f00d769db683d85e5", "message": "add vmctl completions for OpenBSD"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/eec47a173de171926403c32353d5276c9b30ac61", "message": "add rcctl completions for OpenBSD"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/e135024cc41e4816ad0e606c99b9427929ed5031", "message": "add pkg_info completions for OpenBSD"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/e57f5cc99b4f9a1b33e19250cd67ec01db1921f9", "message": "add pkg_delete completions for OpenBSD"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8bfd3fa14452f7c78c9c85e37bbb42b8468806f2", "message": "add pkg_add completions for OpenBSD"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/53e08cd0d6073b1ea02d3d0ad0a65be398dcfd08", "message": "add OpenBSD pfctl completion"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/bfd28852793b0529ca0693ac683fe5cdb2d6f6a5", "message": "add package parsing for OpenBSD"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/440df37b41697031c84b8da1549d0be1f606a027", "message": "parse *BSD interface names"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/db0ff0bcde0c1a63a22720b4947f626432c520a3", "message": "Add generic parser for /etc/man.conf\n\n- Also rename get_paths_from_manpath() to get_paths_from_man_locations()"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/277cd30520bcfc53024e9697e3e4f204db1082c2", "message": "add ffs to known filesystems"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "walles": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/0e9d52bc41395167112f774d418d909cc4dba51b", "message": "[Informative VCS Prompt] Print failing exit codes\n\nBefore this change, if a command failed, this was indicated by the \"$\"\nat the end of the prompt turning red.\n\nWith this change in place, if a command fails, the exit code of the\nfailing command is displayed in [square brackets]."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HazemSamir": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c45d4abaefb240d00616465de2400788af939dc0", "message": "Implement Linear glob match #4094"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arkbriar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/5faa425df1afe9bb713634bbdbec1e6650eecaf5", "message": "fix #4521 (#4575)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pleycpl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/109cc1c4d8f124425794e7787630c7e5ce8ee18f", "message": "deleted -l parameter"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wwwjfy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/7d055a120e6fa52cf34750b524ff7d06cd3ea5f8", "message": "fix patch completion\n\npatch -i should be followed by a filename, and patch -d should be\nfollowed by a directory"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shigemk2": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/75cdaf56018aeb4c626385020bf6c60c9ef5e1e0", "message": "Support regex both BSD and GNU generating man pages"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/8e93041205b915eeb285c49220d942edf820ba38", "message": "Stop outputting duplicate titles in man pages\n\nCommand name continues twice in man page.\n\nCurrent version's example:\n\nNAME\n       andand - conditionally execute a command\n\nFixed version:\n\nNAME\n       and - conditionally execute a command"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/d769b2ac408e1ded84d26629837e2505ce770e2d", "message": "Fix typo in tutorial"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/2ba6dc889385ec62c092d2e6b5930e5470f56639", "message": "Fix typo in string"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/c5241360af99ffe3144d52735e7bec77ce131ba6", "message": "Fix typo in history"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f0503c84dcb037293c30713b615c5caf10a6c0d0", "message": "Improve document in FORMATTING\n\nUpdate links\nFix typo"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/f0ce62c873989828395b52238644d40cbbe7ebbb", "message": "Fix typo in abbr"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/4a4fd7e75b5b543b69f3eb368a9e58359d34ef5c", "message": "Fix typo in faq"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/efdc62fa8022d1708cbbe68dfd217ba3d6658517", "message": "Fix typo in argparse"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/97a6efec7726ec8f4b307718435ef7aa2b603224", "message": "Update link in CONTRIBUTING.md\n\nhttp to https"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Neonox31": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/11cebe948319e7073b2f5f6dee2b7edf9c602f03", "message": "feat(share:git-prompt): be able to truncate the branch name with a defined max length"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lpireyn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/b46b0310f3ca7ab601f80bcdca6ceff7075b878f", "message": "Create Hugo completion (#4529)"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/adcf192c25308233539666c545f0adcaea986b27", "message": "Fix typo in gradle completion (#4500)\n\n(cherry picked from commit 3781862346d256e245303b1530a78e2a5fcc5d0f)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sevensidedmarble": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/9c060126b58d30c9f062d7670e9b8eea512df3c2", "message": "fixed small typo in src/builtin_jobs.cpp (#4530)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnns": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/45fc499a911e423f859308550e8037ace1a8b373", "message": "Make h1 distinguishable from h2 (#4522)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "payasrelekar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/commits/62fc06d9ac1287221ac0a30f3e1f1bcac5595495", "message": "Fix a typo\n(cherry picked from commit 3f76cccded0498811974c1018f1acfbe12962a8a)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maxfl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6031291", "body": "default completions are also can not be overridden. \n\nfish_default_keybindings as well can not be overridden. There is no way to set user bindings for now. \nconfig.fish is loaded before bindings are reset.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6031291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6040265", "body": "Fish loads bindings after reading config.fish, and just before doing it, it resets existing bindings.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6040265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6132171", "body": "Thank you very much. I'll check it as soon as it will merged.\n\nMaxim\nOn Tue, 05 Jun 2012 21:56:04 +0400, adisbladis  \nreply@reply.github.com  \nwrote:\n\n> https://gitorious.org/~ridiculousfish/fish-shell/fishfish/merge_requests/5\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ridiculousfish/fishfish/issues/21#issuecomment-6131720\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6132171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6143715", "body": "I will ask Axel then and will commit the fix if necessary.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6143715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6273093", "body": "time should not be implemented, because it's a system util\nin arch/debian/ubuntu it is in the package 'time'\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6273093/reactions", "total_count": 6, "+1": 4, "-1": 2, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6305600", "body": "I've mixed up the branches.\n\ncommit 'step-coloring initial' should not be here. It should not be merged.\n\nsorry for this.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6305600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6311404", "body": "fish have different syntax comparing to bash and can not be used as replacement for bash to run bash scripts as it done in vim scripts.\nThe source of confusion is in $SHELL variable. It should point to sh/bash in order 'vim' could normally work. This can be done in .vimrc:\nif $SHELL =~ 'bin/fish'\n    set shell=/bin/sh\nendif\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6311404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6311504", "body": "there are two notes here:\n1) -f works if there are other completions specified\ncomplete -c ttt -f #doesn't prevent files from completing if it is the only command\ncomplete -c ttt -a 'a1 a2' # after this line '-f' works\n2) -f key works globally for the command. Not for each option (unfortunately). \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6311504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6352955", "body": "have you tried to redefine SHELL variable before calling mc?\n\n``` sh\nset SHELL /bin/bash\nmc\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6352955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6355787", "body": "I'm also have this issue for the cyrillic characters. My LANG is en_US.utf-8.\n\nThe problem is not conerned only on 'cd' completions. It seems that it is in the way completions are printed:\n- 'ls' shows correct characters\n- Tab completion shows something like: \\Xd0\\Xa0\\Xd0\\Xb5\\Xd1...\n- If i put correct letters, tab completes the string correctly.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6355787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6371119", "body": "The changes in output.cpp Fix an error, when fish prevents setting foreground color along with background.\nNow fish can reset foreground color, when it is the same, as background.\n\nYou can merge output.cpp as well.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6371119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6371154", "body": "I guess 'seq' is used in several places in fish. Do you have this command? Or fish can not find it when setting autocompletions?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6371154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376666", "body": "Yes, but the point is to match asterisk exactly,but not any symbol.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6381037", "body": "It has nothing to do with echo. \n'commandline -l' issues an error, because commandline doesn't support short option 'l'. After this it tries to print commandline's manfile to show supported options and fails to find the corresponding man file.\n\nThe problem seems to be when making 'make install'. The folder fish-shell/share/man/ is empty and 'make install' can not install any man files.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6381037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6382265", "body": "Because '-a' needs an argument.\nYou probbily want to make something like this:\ncommandline -- -la\n\nIt's a usual way to cope with text, starting with dash. '--' denotes the end of '-' and '--' options.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6382265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6384035", "body": "And \ncommandline -- (echo \"-a foo\")\nor \ncommandline (echo \"-- \\n -a foo\")\n?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6384035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4019029", "body": "I think it should be noted that eval is not a sufficient replacement, because it breaks the quoting.\nIn other case the behavior for the user can be unexpected.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4019029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4032836", "body": "Wow, didn't know about this, thanks.\nBut naive expectation is that \neval $command arg1 \"arg2 with spaces\"\nwill work correctly. I think it worth noting that one should use eval 'correctly'.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4032836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4732802", "body": "I get the following error after this commit:\n`sed: -e expression #1, char 10: unknown option to `s'`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4732802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4732820", "body": "That is because of line \n\n``` sh\nset -l mod_upstream (echo $svn_upstream | sed \"s/$remote//\")\n```\n\nremote contains '/'.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4732820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6908259", "body": "I think it's better to change foo to something long and difficult to reproduce, like __fish_test_universal_variables_variable_foo just to be safe.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6908259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "adisbladis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6031927", "body": "https://gitorious.org/~ridiculousfish/fish-shell/fishfish/merge_requests/1\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6031927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6031948", "body": "I have a fix in: https://gitorious.org/~ridiculousfish/fish-shell/fishfish/merge_requests/2#377d93d1cf56080d345611fe0faedae1e9ded1fe-377d93d1cf56080d345611fe0faedae1e9ded1fe@1\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6031948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6031985", "body": "I might add that this fix makes the scripts compatible with both python 2 and 3, so no matter which python \"#!/usr/bin/env python\" invokes this will work.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6031985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6034813", "body": "Isn't this something that you should place in your config.fish instead?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6034813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6065057", "body": "On my system ^W removes the text and adds it to the kill ring.\nWith ^K however the text is killed, added to the kill ring but not removed from the prompt until I type something else, so this is only an estethical issue for me, my build is from git.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6065057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6079487", "body": "We could use the fish-function type instead:\ntype -P command-not-found > /dev/null\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6079487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6080034", "body": "I think the effort should be to make the scripts python3 only.\nSure, python2 will be around for some considerable time to come but some GNU/Linux distributions (Arch Linux and Gentoo for example) are now shipped without python2.\n\nI would like some external input on this so my efforts are not wasted.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6080034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6122871", "body": "I have fixed the manpage parser for both versions in this merge request: https://gitorious.org/~ridiculousfish/fishfish/merge_requests/3\n\nI intend to keep working on making all python scripts support both versions.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6122871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6130508", "body": "I have created a new merge request for the final python3 fixes here:\nhttps://gitorious.org/~ridiculousfish/fishfish/merge_requests/4\n\nAfter this is merged this ticket can be closed :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6130508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6131720", "body": "https://gitorious.org/~ridiculousfish/fish-shell/fishfish/merge_requests/5\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6131720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6145147", "body": "Request merged, can someone with permission close this?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6145147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6147521", "body": "This is a rather severe issue imo..\nIn Gentoo this makes Portage think the entire build has failed, hence fish cannot be installed via portage.\n\nhttps://gist.github.com/2881227\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6147521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6151552", "body": "This fix already exists in the current development branch fish_fish?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6151552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6151630", "body": "I have a patch for this here:\nhttps://gitorious.org/~adisbladis/fish-shell/adisbladiss-fishfish/commit/500eeebe32b9e63b84b9f1ef8844d2fc52b8257c?format=patch\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6151630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6152923", "body": "I dont think you have the latest code checkout.\nI fixed this yesterday\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6152923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6171384", "body": "This might just be an issue with you not having /usr/local/bin/fish in your /etc/shells\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6171384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "etu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6053562", "body": "`funced` is cool couse it opens an already existing function to edit it, and then you can save functions with `funcsave`. Very usefull.\n\nAt least in fish and not fishfish ;)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6053562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6075591", "body": "yep, works.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6075591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6075738", "body": "Uh, this also seems to work after your fixes on `~/.config/fish/functions/` or something?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6075738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6076352", "body": "One idea of soution might be to look into `$PWD` and the fish-function `prompt_pwd`\n\nfish & fishfish:\n\n```\n$ cd /\n$ echo $PWD\n\n$\n```\n\nfish:\n\n```\n$ cd /\n$ pwd\n\n$\n```\n\nfishfish:\n\n```\n$ cd /\n$ pwd\n/\n$\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6076352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6076434", "body": "this one is also fixed yes, someone can close it? :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6076434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6083169", "body": "Got time to research more now...\n\nIt's the empty `$PWD` that couses everything.\n\nIf I change the function `__fish_complete_cd` to do `set -l wd (pwd)` instead of `set -l wd $PWD`, things will work. But things would probably be slower too...\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6083169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6108600", "body": "Yay, it works. With these bugs fixed, 16, 18 and this one. Fishfish is now better then fish for my daily usage ;)\n\nNo problem, i always liked fish. But I know it's been dead. So I'm happy to try to help with a new life of the fish :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6108600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6172124", "body": "fish isn't bash.\n\n`echo $status` would suit you better in fish, also, `$argv` instead of $1 $2 $3... and so on.\n\nEDIT: But that's no reason for failure...\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6172124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6173607", "body": "The problem is in the fish function `delete-or-exit`... the switch uses the variable `$cmd`, and if $cmd contains more than one string, which happens in multiline-cases, `switch` will complain about more then one arguments.\n\nThis works in my case:\n\n```\ndiff -r 24eccb40358e delete-or-exit.fish\n--- a/delete-or-exit.fish   Thu Jun 07 13:18:50 2012 +0200\n+++ b/delete-or-exit.fish   Thu Jun 07 13:19:00 2012 +0200\n@@ -2,7 +2,7 @@\n\n    set -l cmd (commandline)\n\n-   switch $cmd\n+   switch \"$cmd\"\n\n    case ''\n        exit 0\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6173607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6209684", "body": "Just for reference, it does not crash on my hardened 64-bit no-multilib gentoo-system with pax and grsec enabled in kernel...\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6209684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6250386", "body": "Try install iconv?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6250386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6273156", "body": "I can say it's built-in in bash. But, found package in gentoo too, so I guess that's fine.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6273156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1466068", "body": "Protip, if you had written `Fixes #61` as commit-message, the ticket would close itself and get a link to this commit. You can also use `Refs #61` if a commit doesn't fix, but reffers.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1466068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3105379", "body": "When I read this in my RSS-Feed, I really thought that it would cause an access violation in portage sandbox, but we are in luck this time! Reading from the outside of the sandbox seems ok! :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3105379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3233093", "body": "What about running `make uninstall` in the directory the user made `make install` from since it got the correct prefix. This ofc depends on the user saving the source directory.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3233093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50638480", "body": "I didn't manage to build fish from git, it just breaks. But I'll include some sample output from `eselect` below.\n\n```\nroot@trillian ~# eselect php list cli\n  [1]   php5.6 *\n  [2]   php7.0\n```\n\nThe one with the star is the selected version.\n\nI just put a commit in with sed since I can't get the git version to behave so I can't test it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50638480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50638956", "body": "I'm on Archlinux at the moment, that's a bit of the thing. I tend to not want to do make install to get files spread around my filesystem, so I try to run it directly after make which sometimes break ;D\n\nIt's probably not fish's fault.\n\nInstalling Gentoo is easy, I say. After running it for 8 years. But you probably won't need a full install anyways. Just download stage3, untar, mount (proc, dev, sys), chroot\n\n```\nemerge-webrsync\nemerge --sync\necho '=app-eselect/eselect-php-0.9.1' > /etc/portage/package.unmask\necho '=app-eselect/eselect-php-0.9.1' > /etc/portage/package.accept_keywords\nemerge -aqv php\n```\n\nThen you should be ready to fly.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50638956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50639317", "body": "The AUR thingy seems handy for testing this.\n\nWhy the kernel btw, I skipped that and tested it directly in the chroot. Much faster :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50639317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "twm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6075200", "body": "I regularly use implicit cd, but I have set CDPATH to . because I found the results of combining the two confusing.  I'd suggest either (1), with changing CDPATH a sufficient degree of configurability, or (2).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6075200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "siteshwar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6117416", "body": "I merged my changes for history builtin with fish_fish branch. You can view the diff here : http://gitorious.org/~ridiculousfish/fish-shell/fishfish/commit/ec34f2527a2c6738437a3339c490a9849c185247\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6117416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6132288", "body": "It doesn't crash for me. BTW I see your logs, you are on a 64 bit system and I am using 32 bit system.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6132288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6149508", "body": "Most of the scripts in the project were written with Python2. After beta release r1 some of them were made compatible with Python3. We are still in the process of porting scripts to Python3.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6149508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6156477", "body": "Fish by default compiles with xsel. Try following:\n\nautoconf\n./configure --without-xsel\nmake\nsudo make install\n\nor install xsel dependencies on your system.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6156477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6156742", "body": "man --path is used to find paths where manual pages are installed. On GNU/Linux we can use manpath command. We will have to check whether it's compatible with BSD systems.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6156742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158844", "body": "This commit should fix the issue.\n\n=> Syncing Gitorious... [OK]\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   1078ad9..c7941fc  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6161159", "body": "Allright! So either we need to find a portable way to find man page paths or for systems which don't support any method to determine man page paths, we may assume default paths like /usr/share/man/man1 (I am not sure where man pages are installed in OpenBSD or Solaris). I would like to know should we consider $MANPATH here ?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6161159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6170525", "body": "We are already discussing this issue here :\n\nhttps://github.com/ridiculousfish/fishfish/issues/22\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6170525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6171358", "body": "It has already been reported and fixed for GNU/Linux.\n\nhttps://github.com/ridiculousfish/fishfish/issues/38\n\nPlease search in existing issues before openings new one.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6171358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6173062", "body": "It seems you have SELinux enabled.\n\nhttps://bugzilla.redhat.com/show_bug.cgi?id=612207\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6173062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6178739", "body": "This should restore generation of manpages.\n\n=> Syncing Gitorious... [OK]\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   c7941fc..23ce927  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6178739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6179076", "body": "Unbound local variable error has been fixed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6179076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6179327", "body": "Should be fixed with this commit :\n\n=> Syncing Gitorious... [OK]\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   23ce927..8167e1e  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6179327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6179600", "body": "Thanks for the fix! I checked it in.\n\n=> Syncing Gitorious... [OK]\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   8167e1e..b660133  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6179600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6180106", "body": "Could you tell us about your setup ? I am running a GNU/Linux distro. In my case :\n1. When I execute \"help fg\", Html help page is shown in my browser.\n2. fg -h shows me man page for fg builtin.\n\nIf I want to use \"help fg\", I am required to set a BROWSER variable which contains name of my browser.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6180106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6180330", "body": "Works fine for me :\n\n[situ@juggernaut fishfish]$  type grep\ngrep is a function with definition\nfunction grep\n        grep --color=tty -d skip $argv\nend\n[situ@juggernaut fishfish]$  functions grep\nfunction grep\n        grep --color=tty -d skip $argv\nend\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6180330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183530", "body": "My guess is following sed expression in \"share/functions/help.fish\" is failing on OS X :\n\n```\ncase (sed -n 's/.*<h2><a class=\"anchor\" \\(id\\|name\\)=\"\\([^\"]*\\)\">.*/\\2/p' $__fish_help_dir/commands.html)\n    set fish_help_page \"commands.html\\#$fish_help_item\"\n```\n\nI won't be able to verify it, since I don't have access to OS X.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6211190", "body": "The bug is in unescape() function in common.cpp. Here is the code for unescaping '?' :\n\n```\n                        case L'?': \n                        {\n                            if( unescape_special )\n                            {\n                                in[out_pos]=ANY_CHAR;\n                            }\n                            else\n                            {\n                                in[out_pos]=in[in_pos];                     \n                            }\n                            break;                  \n                        }\n```\n\nyou will see a symbol instead of '?' because we tried to unescape a special character. Same for '*\".\n\nI am not sure about the fix right now, but I will fix it whenever we agree on a solution.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6211190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6211560", "body": "It's a good idea to import history from bash (and may be others shells too). But not all bash commands are valid fish commands. For e.g. 'export foo' is not valid in fish. We want to be as accurate as possible with our autosuggestions, and it's a different struggle to trasform (or may be ignore) invalid fish commands.\n\nPS I have already done some work to import aliases, bash prompt and environment variables from bash. It's in import_config branch of our repository.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6211560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6222320", "body": "I would say if user executes \"alias\" without any arguments, he should get a messsage saying fish aliases are implemented in form of functions, and function names can be seen using \"functions\" builtin, and function definitions can be seen with \"functions function_name\". That would be more helpful!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6222320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6222954", "body": "Good catch! I fixed it :\n\n=> Syncing Gitorious... [OK]\nTo git@gitorious.org:~ridiculousfish/fish-shell/fishfish.git\n   e96daba..ca61d0e  fish_fish -> fish_fish\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6222954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6255507", "body": "You should have libiconv and it's headers installed. You may choose to directly install from sources : http://www.gnu.org/software/libiconv/\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6255507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6265071", "body": "Try following command :\n\n./configure --with-iconv=/usr/local\n\nIf that doesn't work try to use --with-libiconv instead of --with-iconv.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6265071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6265892", "body": "Fixed with this commit. history --help now shows history man page\n\nTo git@github.com:fish-shell/fish-shell.git\n   602109b..25f9105  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6265892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6279607", "body": "I added a help message with this commit :\n\nTo git@github.com:fish-shell/fish-shell.git\n   25f9105..9b781c4  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6279607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6297554", "body": "I agree with mbirth. I am a Linux user too, and it's annoying to see case insensitive completions. We should be able to disable it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6297554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6366831", "body": "I guess there is a problem in fish_pager. fish_pager is used to show completions with descriptions For e.g. with `cd <TAB>`. It runs as a separate process and completions are piped to it. I feel there is a problem in read_array method in fish_pager.cpp which reads this piped input :\n\n```\n    while( !feof( file ) )\n    {\n        buffer.clear();\n\n        while( 1 )\n        {\n            c = getc( file );\n            if( c == EOF ) \n            {\n                break;\n            }\n\n            if( c == '\\n' )\n            {\n                break;\n            }\n\n            buffer.push_back(static_cast<char>(c));\n        }\n\n        if( ! buffer.empty() )\n        {\n            buffer.push_back(0);\n\n            wcs = str2wcs( &buffer.at(0) );\n            if( wcs ) \n            {\n                wcstring tmp = wcs;\n                if (unescape_string(tmp, 0))\n                {\n                    comp.push_back(tmp);\n                }               \n                free( wcs );\n            }\n        }\n    }\n```\n\nIs this the right way to read wide characters ?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6366831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6379171", "body": "Above code works fine for reading wide characters. Actual bug was in wsetlocale() in common.cpp. I fixed it with this commit :\n\nTo git@github.com:fish-shell/fish-shell.git\n   34fd8e0..1756702  master -> master\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6379171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1877845", "body": "I restored it, thanks! :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1877845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2198443", "body": "There's a script called create_manpage_completions.py which is installed in /usr/local/share/fish/tools. You can parse a single man page following way :\n\n/usr/local/share/fish/tools/create_manpage_completions.py /usr/share/man/man1/bash.1.gz --progress\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2198443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2904324", "body": "May be it's a bug in GNU coreutils printf but this line prints `a\\cb` in bash.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2904324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4083978", "body": "Change 'work' to 'word'.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4083978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4083982", "body": "Change 'work' to 'word'.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4083982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4213292", "body": "Throughout this file you are using '\\t' tabs instead of spaced tabs. Is there any specifiec reason for this ?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4213292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4315782", "body": "Invalid closing tag.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4315782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4316763", "body": "Please commit external_link image file\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4316763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/3258707", "body": "I am not sure if it's a portable way to convet wide characters to numbers.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/3258707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/3258742", "body": "This calls exit(0) in GNU coreutils version of printf, but I can't directly exit in a builtin.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/3258742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4035024", "body": "Probably replace 'methods' with 'channels'\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4035024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/10345484", "body": "From http://docs.python.org/2/library/socketserver.html :\n\n\"Note The SocketServer module has been renamed to socketserver in Python 3. The 2to3 tool will automatically adapt imports when converting your sources to Python 3.\"\n\nIt would be nice if you could update this pull request and test it with python3 too.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/10345484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/15627379", "body": "This line fails to parse cookies correctly if localhost has set any other cookie than `com.fishshell.auth`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/15627379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "niemeyer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6126953", "body": "That's with the latest fish_fish branch (as of right now), by the way.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6126953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6129213", "body": "Backtrace:\n\n```\n(gdb) bt\n#0  0x00007faed4d42cdd in get_nprocs () from /lib/x86_64-linux-gnu/libc.so.6\n#1  0x00007faed4cd0bca in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n#2  0x00007faed4cd4b79 in malloc () from /lib/x86_64-linux-gnu/libc.so.6\n#3  0x00007faed4cc0c9b in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n#4  0x00007faed522baa3 in ?? () from /lib/x86_64-linux-gnu/libnss_compat.so.2\n#5  0x00007faed522cba6 in _nss_compat_setpwent () from /lib/x86_64-linux-gnu/libnss_compat.so.2\n#6  0x000000000055818b in __nss_setent ()\n#7  0x000000000054d523 in setpwent ()\n#8  0x00000000004189ce in completer_t::try_complete_user (this=0x7faed3d11a00, str=...) at complete.cpp:1637\n#9  0x000000000041e2ac in complete (cmd=..., comps=..., type=<optimized out>, commands_to_load=0x21b9fa0) at complete.cpp:1723\n#10 0x0000000000457fff in autosuggestion_context_t::threaded_autosuggest (this=0x21b9e90) at reader.cpp:1294\n#11 0x0000000000451ea9 in threaded_autosuggest (ctx=<optimized out>) at reader.cpp:1307\n#12 0x0000000000481d89 in iothread_worker (threadPtr=0x828550) at iothread.cpp:110\n#13 0x000000000048db5a in start_thread (arg=0x7faed3d12700) at pthread_create.c:308\n#14 0x00000000005557d9 in clone ()\n#15 0x0000000000000000 in ?? ()\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6129213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6132607", "body": "I'm probably doing something it doesn't like, as I'm installing my own copy of fish at $HOME/bin. The backtrace above isn't very reassuring, though. It's breaking within a function of the C library which doesn't really take any parameters, which smells as a race with something unrelated.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6132607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6136508", "body": "```\n(gdb) thread apply all backtrace\n\nThread 2 (Thread 0x23a5880 (LWP 12430)):\n#0  0x00000000005528d7 in select ()\n#1  0x000000000046fa5f in readb () at input_common.cpp:102\n#2  input_common_readch (timed=<optimized out>) at input_common.cpp:217\n#3  0x0000000000465051 in input_try_mapping (m=...) at input.cpp:450\n#4  input_readch () at input.cpp:514\n#5  0x0000000000455671 in reader_readline () at reader.cpp:2691\n#6  0x0000000000457994 in read_i () at reader.cpp:2570\n#7  reader_read (fd=<optimized out>, io=<optimized out>) at reader.cpp:3447\n#8  0x0000000000402e1e in main (argc=1, argv=0x7fff9dc1eec8) at fish.cpp:324\n\nThread 1 (Thread 0x7f6f99433700 (LWP 12468)):\n#0  0x00007f6f9a463cdd in get_nprocs () from /lib/x86_64-linux-gnu/libc.so.6\n#1  0x00007f6f9a3f1bca in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n#2  0x00007f6f9a3f5b79 in malloc () from /lib/x86_64-linux-gnu/libc.so.6\n#3  0x00007f6f9a3e1c9b in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n#4  0x00007f6f9a94caa3 in ?? () from /lib/x86_64-linux-gnu/libnss_compat.so.2\n#5  0x00007f6f9a94dba6 in _nss_compat_setpwent () from /lib/x86_64-linux-gnu/libnss_compat.so.2\n#6  0x000000000055818b in __nss_setent ()\n#7  0x000000000054d523 in setpwent ()\n#8  0x00000000004189ce in completer_t::try_complete_user (this=0x7f6f99432a00, str=...) at complete.cpp:1637\n#9  0x000000000041e2ac in complete (cmd=..., comps=..., type=<optimized out>, commands_to_load=0x23df7d0) at complete.cpp:1723\n#10 0x0000000000457fff in autosuggestion_context_t::threaded_autosuggest (this=0x23df6c0) at reader.cpp:1294\n#11 0x0000000000451ea9 in threaded_autosuggest (ctx=<optimized out>) at reader.cpp:1307\n#12 0x0000000000481d89 in iothread_worker (threadPtr=0x828550) at iothread.cpp:110\n#13 0x000000000048db5a in start_thread (arg=0x7f6f99433700) at pthread_create.c:308\n#14 0x00000000005557d9 in clone ()\n#15 0x0000000000000000 in ?? ()\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6136508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "shamrin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6149202", "body": "Regardless of what you do, please **don't** make it configurable. Zero configurability is one of my favorite features of fish. It's super convienient to be able to just install it and not worry about configs.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6149202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fkumro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6153043", "body": "I will checkout the source from github and try again, I was working with the tar.gz file.\n\nUpdate: I checked out master, built and installed. Issue still exists, what branch is the fix on?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6153043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6154377", "body": "branch fish_fish fixes this error, however the traceback is being printed\n\nParsing man pages and writing completions to /home/fkumro/.config/fish/completions/\n     7 / 1661 : xsel      \u001bTraceback (most recent call last):\n  File \"/usr/local/share/fish/tools/create_manpage_completions.py\", line 758, in parse_and_output_man_pages\n    if parse_manpage_at_path(manpage_path, output_directory):\n  File \"/usr/local/share/fish/tools/create_manpage_completions.py\", line 727, in parse_manpage_at_path\n    output_file.write(line)\nUnboundLocalError: local variable 'output_file' referenced before assignment\n    14 / 1661 : xsel      \u001bTraceback (most recent call last):\n  File \"/usr/local/share/fish/tools/create_manpage_completions.py\", line 758, in parse_and_output_man_pages\n    if parse_manpage_at_path(manpage_path, output_directory):\n  File \"/usr/local/share/fish/tools/create_manpage_completions.py\", line 727, in parse_manpage_at_path\n    output_file.write(line)\nUnboundLocalError: local variable 'output_file' referenced before assignment\n  1661 / 1661 : zvbid        \u001b  \u001b \u001b   \u001b     \u001b\u001b\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6154377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sjl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6153364", "body": "Same here -- `up` and `down` seem to do nothing.  OS X 10.7, latest head of the `fish_fish` branch.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6153364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kmcphillips": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6156146", "body": "I can confirm this issue on Ubuntu 11.10 32-bit.\n\n```\n~> fish_update_completions\nman: unrecognized option '--path'\nTry `man --help' or `man --usage' for more information.\nNo paths specified\n```\n\nPerhaps this is related?\n\n```\n~> man --help | grep path\n-M, --manpath=PATH         set search path for manual pages to PATH\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6156146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "geiman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6157215", "body": "manpath does indeed work on both OS X (it provides identical output to \"man --path\") and FreeBSD.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6157215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158634", "body": "The fix existed in one out of three places in configure.ac - just needed to add the last two.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6222912", "body": "I'm also on Lion, 10.7.4 - no need for the `LDFLAGS` for me either.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6222912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "octplane": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158892", "body": "I can cargo-cult https://github.com/ridiculousfish/fishfish/blob/master/share/functions/__fish_complete_vi.fish and provide a __fish_complete_cdargs.fish if you wish so.\n\nNote that however, \"cv\" and \"ca\" are the accepted shortcuts for cdargs and there might be some demand for a way to configure these aliases on a per user base...\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6158892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mbaz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6160044", "body": "Thanks. I can't verify at the moment since apparently compiling the dev sources requires doxygen, which I don't have at the moment (the beta r2 tarball doesn't require it). I will probably try tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6160044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6176246", "body": "OK, so I built and installed doxygen from source (Ubuntu's doxygen depends on TeX, which I installed by hand too). Now, make install fails:\n\n```\nfor i in share/man/*.1; do \\ \n    /usr/bin/install -c -m 644 $i /usr/local/share/fish/man/; \\\ndone;\n/usr/bin/install: cannot stat `share/man/*.1': No such file or directory\n```\n\nand, indeed, share/man/ is empty.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6176246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "JanKanis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6160588", "body": "I don't have live access to BSD systems, but according to the online docs, manpath exists in FreeBSD. \nOpenBSD and Solaris apparently don't have it, but they don't appear to have the --path switch either. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6160588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "saberworks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6161772", "body": "I ran into this, too.  On my ubuntu 10.04 I had to:\n\nsudo apt-get install gettext\nsudo apt-get install libxt-dev\n\nThen make worked.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6161772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jasongregori": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6163447", "body": "i just found out about the bind command (http://ridiculousfish.com/shell/user_doc/html/commands.html#bind). is there a way to specify the command key?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6163447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6180427", "body": "Ah, that explains a lot. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6180427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yunzheng": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6164540", "body": "I got it working by removing my \"~/.config/fish/completions/ssh.fish\" file that was generated by the \"fish_update_completions\" script.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6164540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6373789", "body": "related to: https://github.com/fish-shell/fish-shell/issues/43\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6373789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6373791", "body": "related to: https://github.com/fish-shell/fish-shell/issues/39\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6373791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rdeits": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6169072", "body": "Confirmed--removing the 2 causes both the window and tab titles to be set. I've created a pull request: https://github.com/ridiculousfish/fishfish/pull/58\n\nThanks for your help!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6169072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jonsterling": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6171457", "body": "I think this is on the list of planned features somewhere\u2026\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6171457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6221842", "body": "That was a hell of an answer! Cheers.\n\nSent from my iPhone\n\nOn Jun 9, 2012, at 1:56 AM, Goran Josicreply@reply.github.com wrote:\n\n> Emacs is a powerful text editing program. Usually the default for all shells is the emacs mode. This means that the command line editing can be performed by using emacs shortcuts. So Ctrl-a puts the cursor on the beginning of the line and Ctrl-e on the end of the line. Alt-f advances the cursor forward word by word while Alt-b works in reverse. Alt-d cuts a word and Ctrl-y pastes it etc. If you know emacs you can use most of its keyboard shortcuts to edit your command line.\n> \n> Vi/Vim is also a text editor program. The vi mode has its own set of shortcuts and it is modal. There is the normal or command mode and the insert mode. The command mode is used to browse the history and perform command line editing just like in vi. The insert mode is meant to insert text. So in the normal mode pressing 0 puts the cursor on the beginning of the line while $ puts it at the end. You can advance between words by pressing w or e and cut words by pressing cw (change word). Pressing p pastes the word back etc. The vi mode is very useful for people using vi/vim as their default editor. It is quite efficient if you know vi. \n> \n> If you are interested I suggest you to search on web more info about the subject. Knowing how to move efficiently on your command line is useful and interesting and most importantly more productive.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ridiculousfish/fishfish/issues/65#issuecomment-6218113\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6221842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chengguangnan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6172164", "body": "@adisbladis , I have that in /etc/shells\n\n```\n~ # cat /etc/shells \n/bin/sh\n/bin/bash\n/sbin/nologin\n/bin/dash\n/usr/local/bin/fish\n~ # chsh -s /usr/local/bin/fish\nChanging shell for root.\nchsh: \"/usr/local/bin/fish\" is not executable.\n~ # \n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6172164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6225951", "body": "@dtjm , thanks, that worked. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6225951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gthb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6174328", "body": "Yep, this fix worked for me.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6174328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6199606", "body": "I second @gglanzani's suggestion; no added `LDFLAGS` needed here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6199606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6202870", "body": "I'm on Lion, specifically OS X 10.7.3.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6202870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dbrgn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6175322", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6175322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lonetwin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6177562", "body": "Just adding a me-too here as well as the solution. Solution: (besides the possibly more correct ^^ selinux fix in the bz above)\n\nln -sf /usr/local/bin/fish /bin/fish\n\nand add \"/bin/fish\" to /etc/shells \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6177562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6232197", "body": "@jab, from one bash user to another -- I accidentally discovered that you can get what you want by simply typing out (possibly with tab-completion) the command, adding a space and then pressing the up-down arrow to scroll thru' the previous command's argument list. Pretty cool stuff ! I agree, fish is awesome.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6232197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6326150", "body": "@sorin-ionescu and @maxfl thanks for your replies ! @ridiculousfish answered this in https://github.com/ridiculousfish/fishfish/issues/1 where I mistakenly posted the issue initially. \n\n@ridiculousfish -- @maxfl 's solution works perfectly for my problem. The issue was vim plugins (and also I imagine other similar apps that allow escaping to shell (cli based tools, ncurses interfaces ..etc) possibly assume a bash like shell. Setting the $SHELL environ within the apps is a good workaround for this.\n\nThanks all !\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6326150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mblsha": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183462", "body": "@kballard  Whoa, this solution looks nicer than mine. Are those escape-sequences documented somewhere?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183702", "body": "@kballard Thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6183702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6229631", "body": "Yeah, that's right. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6229631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dtjm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6191118", "body": "You have to do this as root:\n\n```\nchcon -t shell_exec_t /usr/local/bin/fish\n```\n\nAs well as add `/usr/local/bin/fish` to your `/etc/shells`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6191118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dhasenan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6191358", "body": "I'm unclear on what I should send to you once I reproduce the issue. Some of the shells eventually complained about being unable to contact fishd, but this was after I killed and restarted it. I could grab /tmp/fishd.log.*. I'm not aware of any logging that fish itself does.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6191358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6254892", "body": "I haven't been able to reproduce this, and I suspect I was using mismatched fish/fishd versions. I'll reopen this if I can reproduce.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6254892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6336221", "body": "Should be a matter of checking j->flags & JOB_FOREGROUND around reader.cpp:2500, at the check for job_is_completed. (I'd post a patch, but there's an annoying process while I'm working at my current company...)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6336221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6336414", "body": "aristidesfl: Not quite. One common use case for me is:\n\n```\nsome-really-long-command \"I don't want to have to backspace all this because it'll take ages\" > ~/foo.log\nvim !$ # vim ~/foo.log\n```\n\n`~/foo.log` isn't a parameter.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6336414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6336455", "body": "Which is to say, I've fixed this in my local copy and it seems to work (still warns about stopped jobs, fails to warn about background jobs).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6336455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6349584", "body": "In my experience, fish will offer completions without being case sensitive, but if I type in the full text in a different case than the suggestion, it will take what I wrote rather than 'fixing' the case to be whatever the completion showed. This doesn't show up until I press 'enter', but it does what I expect.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6349584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6349620", "body": "Can't reproduce from master. Linux lovecraft 3.2.0-24-generic #39-Ubuntu SMP Mon May 21 16:52:17 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\n\nWhat's your LANG? `echo $LANG` or such\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6349620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6349627", "body": "Cannot reproduce on master.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6349627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "schinckel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6194327", "body": "Oh, this was with the OS X installer.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6194327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lowell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6195315", "body": "This fix worked for me as well, but I had to run `configure` with an extra linker flag:\n\n```\n./configure --without-xsel LDFLAGS=-liconv\n```\n\nWithout it, I'd get errors while building:\n\n```\n    Undefined symbols for architecture x86_64:\n      \"_libiconv_open\", referenced from:\n          wcs2utf(wchar_t const*)in env_universal_common.o\n          utf2wcs(char const*)in env_universal_common.o\n      \"_libiconv\", referenced from:\n          wcs2utf(wchar_t const*)in env_universal_common.o\n          utf2wcs(char const*)in env_universal_common.o\n      \"_libiconv_close\", referenced from:\n          wcs2utf(wchar_t const*)in env_universal_common.o\n          utf2wcs(char const*)in env_universal_common.o\n    ld: symbol(s) not found for architecture x86_64\n    collect2: ld returned 1 exit status\n    make: *** [fish] Error 1\n```\n\nIf you merge this pull request, maybe add `LDFLAGS=-liconv` to the `configure` note to OS X users on http://ridiculousfish.com/shell/beta.html?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6195315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "g5pw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6195503", "body": "Yes, definitely! I'm sorry :(\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6195503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6211209", "body": "Yes, there is :) I was \"aware\" of that fix, just wanted to let you know!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6211209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gglanzani": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6199469", "body": "I didn't have to add `LDFLAGS=-liconv` to configure. Fish was built just fine so I propose to add to the beta page that, if things don't work, that flag is a possible fix.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6199469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6266667", "body": "+1, even though I don't really see why you would do that :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6266667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sorin-ionescu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6214811", "body": "@ridiculousfish You can learn a lot from [Zsh](http://www.zsh.org/) via [Oh My Zsh](https://github.com/sorin-ionescu/oh-my-zsh). There are lots of features in Zsh that are not available in BASH nor Fish. BASH is not a good shell for inspiration.\n\nAlso, since Fish does not have a wide adoption, you can further clean up its syntax.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6214811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6217061", "body": "Remove the `alias` function.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6217061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6220140", "body": "Use KISS. That which is confusing should be removed. Refugees from other shells will adapt to functions in due time.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6220140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6232676", "body": "In fish, `(foo)` means `$(foo)` or ``foo``.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6232676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SebastianThorn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6214987", "body": "what is vi mode suppose to do?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6214987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6223905", "body": "okey, been using emacs all my life and i never thought of the vi/m isers around the world ;)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6223905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jaykru": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6216565", "body": "That did the trick! Thanks ridiculousfish!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6216565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "arael": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6218113", "body": "Emacs is a powerful text editing program. Usually the default for all shells is the emacs mode. This means that the command line editing can be performed by using emacs shortcuts. So Ctrl-a puts the cursor on the beginning of the line and Ctrl-e on the end of the line. Alt-f advances the cursor forward word by word while Alt-b works in reverse. Alt-d cuts a word and Ctrl-y pastes it etc. If you know emacs you can use most of its keyboard shortcuts to edit your command line.\n\nVi/Vim is also a text editor program. The vi mode has its own set of shortcuts and it is modal. There is the normal or command mode and the insert mode. The command mode is used to browse the history and perform command line editing just like in vi. The insert mode is meant to insert text. So in the normal mode pressing 0 puts the cursor on the beginning of the line while $ puts it at the end. You can advance between words by pressing w or e and cut words by pressing cw (change word). Pressing p pastes the word back etc. The vi mode is very useful for people using vi/vim as their default editor. It is quite efficient if you know vi. \n\nIf you are interested I suggest you to search on web more info about the subject. Knowing how to move efficiently on your command line is useful and interesting and most importantly more productive.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6218113/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6221867", "body": "=)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6221867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6227710", "body": "@SebastianThorn We are out there brother. ;)\n\n@silenc3r That is an excellent suggestion. I highly second that.\nIn bash I have the same problem. Pressing i first has become an habit of mine. This would be very useful to have in fish.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6227710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "soli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6219018", "body": "escaping ^ with a \\ works fine (same as escaping {} as {} in a find command for instance).\nI don't really see this as a bug, but it might be wise to add these to the FAQ.\n\nAnother option might be to get the parser to fallback on ^ when a redirection does not make sense (syntactically) but it might lead to tricky situations where depending on the rest of the line the user cannot easily guess if his ^ will be escaped or not.\n\nMay be simply add to the error message the suggestion about escaping ^ ...\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6219018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6219029", "body": "or add the 0 argument version as a call to `functions` ?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6219029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mystakill": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6219964", "body": "I'm aware that fish uses functions in place of aliases.  However, as I'm accustomed to using \"alias\" in many other shells, and because fish supports \"alias\" as a pseudonym for \"function\", it's still going to be confusing/annoying many new converts due to only having half of the expected outcome working.\n\nI'd go with soli's recommendation to make the other half of expected \"alias\" functionality be a call to \"functions\", so that it provides a more seamless transition for the many, many people accustomed to shells which do support \"alias\" as both a getter & a setter.  After over 25 years on a variety of command processors and shells, it's more of a \"force of habit\" for me than anything :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6219964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mybuddymichael": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6223410", "body": "You sure? Looks fine in 19.0.1084.54.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6223410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6270546", "body": "Hm, that's a very interesting perspective. I guess I always thought, \"Hey, don't hide those files from me! I promise I know what I'm doing!\" But what you're saying makes sense.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6270546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ciembor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6223549", "body": "Here is my 18.0.1025.162 with orginal css and with `position: relative;`: http://imgur.com/a/EuCXN\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6223549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "silenc3r": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6224096", "body": "If you plan to make vi mode, please make it display current mode (command/insert/visual). As much as I like vim I find vi mode in shell extremly annoying and unusable since I never know which mode I am in.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6224096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mbirth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6224813", "body": "In zsh you can even use the cursor keys to navigate the completions. Please consider this for fishfish, too.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6224813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6296236", "body": "+1 \u2026 I also noticed this, but didn't track it down.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6296236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6296268", "body": "For Linux/Unix this is a bad idea. Even now, when typing \"make install\" to install fish, it suggests \"make INSTALL\" because there's a file \"INSTALL\" in that directory. I have to add a third \"l\" for it to turn to \"make installl\" and then delete the last \"l\" to make the command stay lowercase.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6296268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6353347", "body": "This is what I do - otherwise there's no subshell:\n\n```\nfunction mc -d \"Midnight Commander\"\n    set old_shell $SHELL\n    set SHELL /bin/bash\n    command /usr/bin/mc\n    set SHELL $old_shell\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6353347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "torifat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6229608", "body": "Thanks :smile:\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6229608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6229869", "body": "Just compiled the latest build, and this now works. Was there a change? Only oddity is that a new tab begins with the Last Login info:\n\nLast login: Sun Jun 10 09:37:48 on ttys005\nWelcome to fish, the friendly interactive shell\nType help for instructions on how to use fish\n~/s/chesspark.tv\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6229869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "victorjacobs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6236663", "body": "Here you go: https://gist.github.com/2908770\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6236663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6264210", "body": "Sure! https://gist.github.com/2915727\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6264210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6382768", "body": "I'm afraid I still can't get it to work. I even cloned a new tree (that has the fix in it for sure, I checked with git log) and still hangs... Also on the same clause if I'm not mistaken, the samples look the same.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6382768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jab": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6247500", "body": "thanks @lonetwin, but that doesn't seem to be working for me. for me pressing up only shows completions from previous commands matching what i've typed so far (everything to the left of the cursor). So if I have:\n\n`> ls /some/deeply/nested/directory/`\n\nAnd I see a file in there \"foo\" I want to edit, in bash I could just type \"vim \", then meta+period to insert that long path, and then just add \"foo\".\n\nBut in fish, typing \"vim \" and then hitting up does not complete from the previous command, since \"vim \" does not match \"ls\".\n\n(Incidentally, I always use Ctrl+P instead of up arrow and Ctrl+N instead of down in order to avoid taking my hands away from the home row.)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6247500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261588", "body": "> The default history search (up/down arrow) does a substring match, just like bash.\n\nI thought I'd tried this and found it only matched by prefix, but now that I try it again it's working great. Sorry for the noise!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376942", "body": "I see this has been marked for fish-future, but seems to have substantial user interest. Would this be hard to add?\n\nIf someone from the community wanted to take a crack at it, would a good patch be accepted? Any pointers on how to do it for someone who hasn't looked at the code before?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pers87": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6250674", "body": "iconv is installed to /usr/local/bin/iconv\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6250674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6256191", "body": "Looks like i have both:\n\n``` code\n/usr/local/lib/libiconv.so\n/usr/local/lib/libiconv.so.3\n/usr/include/sys/iconv.h\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6256191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6270529", "body": "Get this warning with both of them:\nconfigure: WARNING: unrecognized options: --with-libiconv\nconfigure: WARNING: unrecognized options: --with-iconv\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6270529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahyatt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6252803", "body": "After I reported this, I happened to notice that this is documented in the original fish documentation, with the fix being: echo 'function fish_title;end' > ~/.config/fish/config.fish\n\nHowever, that doesn't work for me:\n\nWelcome to fish, the friendly interactive shell\nType helpB for instructions on how to use fish\nfish: Unknown function \u201cfish_title\u201d\nfish: Unknown function \u201cfish_title\u201d\nahyatt@ahyatt ~> \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6252803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghacker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261360", "body": "My environment is :\n\n$ uname -a\nLinux cikada 3.4.0-gentoo #1 SMP Tue May 22 11:17:11 CST 2012 x86_64 Intel(R) Xeon(R) CPU E5420 @ 2.50GHz GenuineIntel GNU/Linux\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6261360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6350021", "body": "my LANG is \"en_US.utf-8\". But after setting LANG as \"zh_CN.utf-8\", the problem is still here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6350021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6379297", "body": "Yes. This works fine. Thank you!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6379297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "timbertson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6267185", "body": "+1 to this, I miss it sorely too.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6267185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6298246", "body": "oh yeah:\n\n```\n$ uname -a\nLinux meep 3.4.0-1.fc17.x86_64 #1 SMP Sun Jun 3 06:35:17 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6298246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6327591", "body": "oops, issue #128 beat me to it - I did a search only yesterday, I swear ;)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6327591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6377865", "body": "Thanks for the details. I tried creating a launcher script that would set these appropriately:\n\n```\n#!/bin/bash\nset -ex\nhere=\"$(readlink -f \"$(dirname \"$(dirname \"$0\")\")\")\"\nexport PATH=\"$here/bin:$PATH\"\nexport __fish_datadir=\"$here/share/fish\"\nexport __fish_help_dir=\"$here/doc/fish\"\nexport __fish_sysconfdir=\"$here/etc/fish\"\nexport fish_complete_path=\"$HOME/fake/.config/fish/completions:$here/etc/fish/completions:$here/share/fish/completions\"\nexport fish_function_path=\"$HOME/fake/.config/fish/functions:$here/etc/fish/functions:$here/share/fish/functions\"\nexec \"$here/bin/fish\"\n```\n\nUnfortunately, it looks like this isn't enough. When I run it (after moving `build` to `build2` to ensure it doesn't accidentally use any default paths), I get:\n\n```\n$ ./build2/bin/launch.sh \n++++ dirname ./build2/bin/launch.sh\n+++ dirname ./build2/bin\n++ readlink -f ./build2\n+ here=/home/tim/dev/oss/fishfish/build2\n+ export PATH=< ... uninteresting long $PATH >\n+ PATH=< ... uninteresting long $PATH >\n+ export __fish_datadir=/home/tim/dev/oss/fishfish/build2/share/fish\n+ __fish_datadir=/home/tim/dev/oss/fishfish/build2/share/fish\n+ export __fish_help_dir=/home/tim/dev/oss/fishfish/build2/doc/fish\n+ __fish_help_dir=/home/tim/dev/oss/fishfish/build2/doc/fish\n+ export __fish_sysconfdir=/home/tim/dev/oss/fishfish/build2/etc/fish\n+ __fish_sysconfdir=/home/tim/dev/oss/fishfish/build2/etc/fish\n+ export fish_complete_path=/home/tim/.config/fish/completions:/home/tim/dev/oss/fishfish/build2/etc/fish/completions:/home/tim/dev/oss/fishfish/build2/share/fish/completions\n+ fish_complete_path=/home/tim/.config/fish/completions:/home/tim/dev/oss/fishfish/build2/etc/fish/completions:/home/tim/dev/oss/fishfish/build2/share/fish/completions\n+ export fish_function_path=/home/tim/.config/fish/functions:/home/tim/dev/oss/fishfish/build2/etc/fish/functions:/home/tim/dev/oss/fishfish/build2/share/fish/functions\n+ fish_function_path=/home/tim/.config/fish/functions:/home/tim/dev/oss/fishfish/build2/etc/fish/functions:/home/tim/dev/oss/fishfish/build2/share/fish/functions\n+ exec /home/tim/dev/oss/fishfish/build2/bin/fish\nset_color: Unknown color 'yellow\n'\nprintf: missing operand\nTry `printf --help' for more information.\n```\n\n...and the terminal is dead/unresponsive\n\nIf I take my $HOME/config paths out of it, I no longer get the errors about `set_color` and `printf` (I think they are from my custom `fish_prompt` function, although it works normally), but the terminal is still unresponsive so _something_ is clearly not right.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6377865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6377942", "body": "A bit of `strace` reveals the following suspicious calls to `open()` (these are the _only_ files within ~/dev/oss/fishfish that it attempts to `open()`, and they are all under `build` - not `build2`):\n\n```\nopen(\"/home/tim/dev/oss/fishfish/build/share/fish/config.fish\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/home/tim/dev/oss/fishfish/build/share/locale/en_AU/LC_MESSAGES/fish.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/home/tim/dev/oss/fishfish/build/share/locale/en/LC_MESSAGES/fish.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/home/tim/dev/oss/fishfish/build/etc/fish/config.fish\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n```\n\nLooking at e.g `read_init()` in `fish.cpp`, it looks like it only uses the hard-coded DATADIR (set in the makefile, -DDATADIR) instead of reading envvars :(\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6377942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6379235", "body": "Glad to hear it. I had a go at this, attempting to use http://www.gnu.org/software/autoconf-archive/ax_define_sub_path.html, but messing with autotools inevitably makes me want to throw things at my computer in frustration.\n\nAs best I can tell, when you use the above macro in configure.ac it spits out invalid shell script, and if you (manually) fix up the invalid shell script the results are completely wrong anyway. So I'd love to help, but I don't think I know enough about autotools to manage much. Here's what I tried, in case it's a useful start:\n\nhttps://gist.github.com/975901f650b267fa3178\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6379235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6380422", "body": "`bind \\e. 'commandline -i (echo -- $history[1] | cut -d \" \" -f2-)'`\n\nshould fix that problem with the dash. But it's notably missing:\n- proper argument parsing (it would break on any quoted argument with a space, e.g if the last arg was \"1 2 3\" it should insert that whole thing)\n- repeat-use should replace the inserted item: in bash, pressing alt-dot twice in a row will leave you with the last argument from _two_ commands ago ($history[2] in fish's case)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6380422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ecraven": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6278800", "body": "+1 for this! missing it too\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6278800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6278870", "body": "same as #89\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6278870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "aristidesfl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6292135", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6292135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6292155", "body": "By tokens do you mean parameters?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6292155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6292176", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6292176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6292189", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6292189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mpe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6293320", "body": "This kind of sucks, quoting or escaping is annoying because I never remember to do it.\n\nI know that the existing redirection characters are treated the same way in existing shells, but given that this is a new redirection character I think it should get some special handling to make this existing usage work.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6293320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "christfo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6295369", "body": "yep! missed that - sorry.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6295369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6295385", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6295385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tgray": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6299250", "body": "Try `^D`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6299250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "i-e-b": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6303356", "body": "Works, thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6303356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tobsn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6303436", "body": "fixed it myself:\n\n```\n    if test -z (git branch --quiet 2>|awk '/fatal:/ {print \"no git\"}')\n            echo -n ':'\n            if test -z (git status --porcelain 2>|awk '/nothing to commit/ {print \"no change\"}')\n                    set_color green\n            else\n                    set_color red\n            end\n            echo -n (git name-rev HEAD 2> /dev/null | sed 's#HEAD\\ \\(.*\\)#(\\1)#')\n    end\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6303436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lanterndev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6305692", "body": "I think \"smart\" behavior here would be if fish ignored case in what you type when offering completions but then corrected the case of any completions it offered. Or at least this behavior could be enabled through a setting.\n\nOffering the \"make INSTALL\" suggestion just sounds like a matter of not being context sensitive to \"make\" -- ideally it would look through the Makefile for the targets it defined and only offer completions from those.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6305692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fjarri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6371172", "body": "No, it seems that I don't have it. But all autocompletions worked (and work) normally, except for this single case. Event the same autocompletion worked the next time.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6371172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6377859", "body": "I did the full search in /usr and there is no seq to be found. Googling shows that there is no seq in OSX by default. Possible solutions include creating a replacement for it using bash script, which is probably what you have done at some point in time.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6377859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378782", "body": "It would be weird of Xcode to do that. And, anyway, I have Xcode installed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6378782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lrm29": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376051", "body": "Thanks, on line 2853 I changed it to either:\n\nparse_util_set_argv( argv+1, wcstring_list_t());\n\nto include the filename that will be sourced or to:\n\nparse_util_set_argv( argv+2, wcstring_list_t());\n\nif not.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6376051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17080718", "body": "Keep this as PATH_MAX? Usually (POSIX) it is inclusive of the null terminating byte.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17080718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mikebobroski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6379887", "body": "The following binding will do what you're looking for, though it breaks if the first character is a hyphen. Maybe someone can help with that?\n\n`bind \\e. 'commandline -i (echo $history[1] | cut -d \" \" -f2-)'`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6379887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6381099", "body": "It happens with -a as well, which commandline does support.  I guess my real question is: how can I prevent commandline from evaluating the string that I want to pass to the prompt?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6381099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6383911", "body": "Still no dice.  `commandline (echo \"-a foo\")` and `commandline (echo \"-- -a foo\")` produce the same results.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6383911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6384250", "body": "Jackpot! \n\ncommandline -- (echo \"-a foo\")\ndid the trick. \n\nThanks for the help!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6384250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "evanj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6380503", "body": "I just updated my branch to fix some other errors I found via search and replace. I wasn't sure how to test these ones though, since they are completions or something else I don't understand?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/issues/comments/6380503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "martinklepsch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1667077", "body": "This is awesome, thanks so much!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1667077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348535", "body": "I dont know exactly what `set upstream '@{upstream}'` does but this does not seem to work here.\n`$upstream` needs to be something like `origin/master` here. \n\nI'm willing to fix this but I've no idea about what `set upstream '@{upstream}'` is meant to be...\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348566", "body": "Like that: `git rev-list --count --left-right '@{upstream}'...HEAD` ?\n\nI tried that with `upstream` and `origin` (I only have `origin`) and I keep getting this:\n\n```\nfatal: ambiguous argument '@{origin}...HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions\n```\n\n(I also tried with and without quotes)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348679", "body": "```\n>> git rev-list --count --left-right '@{upstream}'...HEAD\nerror: No upstream configured for branch 'master'\nerror: No upstream configured for branch 'master'\nerror: No upstream configured for branch 'master'\nfatal: ambiguous argument '@{upstream}...HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions\n```\n\nPassing `-u` to `git push` solved the problem! Thanks\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/1348679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "kjell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1871222", "body": "Removing this line breaks multiline prompts. My prompt looks something like:\n\n``` fish\nfunction fish_prompt -d \"Write out the prompt\"\n  printf \"%s\\n%s\" (__prompt_top_line) (__prompt_bottom_line)\nend\n```\n\nwithout this the two segments of my prompt are joined on the same line.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1871222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "donkeybonks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1880991", "body": "^ bit of whitespace.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1880991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lledey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1881013", "body": "In almost every file. The worst is complete.cpp I think.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/1881013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6190121", "body": "Why not include \"fish_version.h\" and link fishd with fish_version.o, like for the other binaries?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6190121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6910894", "body": "This is probably not wanted :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6910894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7367597", "body": "You should use `sgrep` instead of `grep`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7367597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12356318", "body": "Just a small typo here and below (prevoius instead of previous).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12356318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "SanskritFritz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2177341", "body": "It is called \"Hungarian notation\" (http://en.wikipedia.org/wiki/Hungarian_notation)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2177341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2196749", "body": "Is there a way to parse only one man page like in legacy fish?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2196749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2198486", "body": "Great, thank you.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/2198486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11337443", "body": "But what about my ego?? :smile: Seriously, no problem, I'll remove them from my files.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11337443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380527", "body": "What the...? I'm sorry, I don't know what happened, but will fix this immeditately.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380715", "body": "Nice one, although this doesn't change too often. AFAIK fish evaluates this every time the completion is invoked? Am I wrong?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11380715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11381653", "body": "I just tested it, fish does reevaluate those lines every time the completion is invoked. Nevertheless you're right, because we shouldn't rely on that, it could change in the future.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11381653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11382457", "body": "I uninstalled a package and it immediately disappeared from the `listinstalled` list. I'm using fish git head.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11382457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11888979", "body": "Anyway, I implemented the function, seems to work now nicely. Thanks for the tip, this is certainly safer and more to the point.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11888979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "alisnic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3234515", "body": "Is there any way to map this to tab?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3234515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3235058", "body": "Yes, you are probably right, I did a `bind` to \\t to autocomplete suggestion, and it totally messed up my autocompletion for commands.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3235058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3234936", "body": "Yes, but then which should take priority: autosuggest or complete?  Either order will very likely get in the way of the other.  More likely what you're actually after is unifying the two, such that suggestions _are_ completions, perhaps the first completion, which would be more sane but I imagine would still get in the way.  I wish we could bind CTRL-ENTER to \"complete and execute suggestion\", but alas, can't bind CTRL-ENTER in the terminal.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3234936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4305195", "body": "The rest of the file is using tabs, so this ends up misaligned.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4305195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4380409", "body": "I think you need to quote that command substitution for it to run each time: `-a '(__fish_git_modified_files)'`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4380409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tmaone": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3879502", "body": "This test does not work on Darwin, as there is no '-o' argument available. The following error is appended on every fish-shell launch and eval (on a mac ofc). \n\n```\nuname: illegal option -- o\nusage: uname [-amnprsv]\ntest: Missing argument at index 2\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3879502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3882483", "body": "Can confirm that this commit fixes previous platform test error on Mac OS X. I also use switch statements for platform identification in my scripts. Thanks for the fix. :+1: \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/3882483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "xfix": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4032207", "body": "@maxfl:\n\nWhen `eval` is used correctly, there is no problem. Correct use is like that.\n\n``` sh\nset -l arguments a b c\neval $command \\$arguments\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4032207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4033410", "body": "@maxfl\n\nI just made error message more consistent. Previously, only something like `a$b` suggested using `eval`, now it's always suggested. It would be good idea to have generic `run` built-in that can take variables, but too lazy to implement it (pull requests are welcome, as always).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4033410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4346664", "body": "Do you have any idea what could be happening? After this commit, `-fsanitize=undefined` in Clang (undefined behavior detector) started to show error messages again. http://asciinema.org/a/5958\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4346664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4355801", "body": "I had some fun with creduce, but it could only reduce it to https://gist.github.com/GlitchMr/7022640 (at least it reduced it to just C++ (no `long long`)). Also, I used Clang 3.3 (newest version of Clang), but I don't think it does matter. When the bug depends on properties that aren't used (`std::string text`?), you know something is wrong.\n\nI actually assumed this is fish bug when it wasn't. My mistake.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4355801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5067026", "body": "@g-nix: `set_color` is a builtin (not even a slow fish function) - check `type`, so it should be reasonably fast.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5067026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5512186", "body": "@g-nix: Yes, I'm aware of this. I'm just not sure how to check all of `localhost`, `127.0.0.1`, `0`, and `::1`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5512186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5520929", "body": "@zanchey: It's a temponary file I somehow missed. I think it would be a good idea to add it to `.gitignore`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5520929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5535164", "body": "And even when it's not, it works anyway. For example, this is `hosts` file in Windows (I actually find it interesting that Windows has BSD-like network files - they are even in `etc` directory). The configuration where `127.0.0.1` is not `localhost` is potentially harmful, and I don't just mean fish shell (then again, [Perl portability guide included with Perl](http://perldoc.perl.org/perlport.html) says to try both).\n\n``` sh\n# localhost name resolution is handled within DNS itself.\n#       127.0.0.1       localhost\n#       ::1             localhost\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5535164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5553385", "body": "@g-nix: Well, most is not all. It still needs to send stuff to fish shell somehow, and something has to serve the service, in order to allow the script to do stuff directly on fish shell (normally, JavaScript cannot do changes on the computer). HTML5 File API, while nice, requires the user to select the file manually for security reasons. This still needs some server help in order to do stuff.\n\nFish help can open `file://` easily. It's help, it doesn't need any advanced features.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5553385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6190415", "body": "Misspelling that went unnoticed by me (because it was still working... sort of). Should be fixed by 368983d.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6190415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7202525", "body": "Like fish shell*. I should check the commit description before pushing. Not that it really matters.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7202525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11123522", "body": "I feel like it should instead point to `funcsave`, but that may be just me.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11123522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13261984", "body": "`--=` is just as nonsensical as `--iewigewigewgvbuwruhbdf=`. I don't think a safety net is needed. Similarly, this completion gets confused by options like `--reboot-computer-after-upgrade` thinking it takes an argument when it doesn't even exist (the completion is done with wildcards because an user can technically shorten long options, for example use `--ja` instead of `--jail`).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13261984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6722528", "body": "This sounds wrong. First, quotes aren't quoted, and second, my username is not `romaia`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6722528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6117694", "body": "I'm worried about use of `__git` here. User configuration should use `$fish_[name]`, for example `$fish_git_dirty`. `__git` prefix would be fine for some external prompt you can install, but this would be part of fish shell. The reason for `$fish_` prefix is that you can write `$fish_`, and press Tab.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6117694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7690948", "body": "`-l [no-]fork` is man page parser failure. It would be good idea to fix it manually.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7690948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/10346281", "body": "@sisteshwar: `socketserver` for Python 3 is already imported correctly.\n\n``` python\nif IS_PY2:\n    import SimpleHTTPServer\n    import SocketServer\n    try:\n        from urllib.parse import parse_qs\n    except ImportError:\n        from cgi import parse_qs\nelse:\n    import http.server as SimpleHTTPServer\n    import socketserver as SocketServer\n    from urllib.parse import parse_qs\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/10346281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11337201", "body": "Please remove comments like this. There is no reason to have such comments, as contributors appear when you visit any file on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/11337201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "lawrenceakka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4094514", "body": "@ridiculousfish \nAny chance of \n\nbind \\e[1\\;9B history-token-search-forward\nbind \\e[1\\;9A history-token-search-backward\n\nThese are the iTerm2 default escape codes for Alt-down and Alt-up\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/4094514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "geoff-codes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5040955", "body": "I'm not sure why this would be considered a 'hack' or partial solution?\n\nRecall that `set_color` is just a function that `printf`'s an escape sequence.\n`echo -n` is just `printf` without a format string parameter.\n\nIf you print an escape sequence, you need to then reset the terminal when you wish to end that behavior.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5040955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5040956", "body": "Although, one might call it 'partial' as one has to call yet another function, since a bazillion function calls makes for a very slow prompt.\n\nIn which case, (although its not very fish-like) you could just `echo -n '$ \\e[0m'`.\n\nPersonally, I've tried to eliminate as many functions and conditionals as I can, due to the speed issue:\n\n``` sh\nfunction fish_prompt --description 'Promptly prompt an impromptu prompt.'\n\n  test $status -gt 0; and set sigil_color $fish_color_error\n                       or set sigil_color yellow; set -l sigil \u261e\n\n  set -l git_color '\\x1b[38;5;101m' # Custom xterm-256color control sequence\n\n  printf '%s%s%s%s %s%s\\e[0m  ' (set_color $fish_color_cwd) (prompt_pwd) \\\n       (printf $git_color) (__fish_git_prompt) (set_color $sigil_color) $sigil\n\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5040956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5074398", "body": "It might be builtin, but it still needs to look up what to do in terminfo. Fish doesn't embed or cache it. I've actually been meaning to file a bug about that\u2014if you compile against a static curses lib, then delete or move the terminfo database, that build of fish dies a hard death \u2014  it just has an absolute path embedded in the binary.\n\n``` sh\ncat -v (set_color normal | psub)\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5074398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5510678", "body": "If you do this, can you also do a loop and try `::1` as well? I have a couple of machines with IP4 disabled. :(\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5510678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5529997", "body": "@zanchey yep. Its not even really much to do with the Python server - on most any system this is hardcoded in `/etc/hosts`. \n\n```\n127.0.0.1       localhost\n255.255.255.255 broadcasthost\n::1             localhost\nfe80::1%lo0     localhost\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5529997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5535259", "body": "That's crazy (about Windows). I would have assumed it was buried somewhere in the registry.\n\n---\n\n> The configuration where 127.0.0.1 is not localhost is potentially harmful.\n\nYeah exactly. Basically, if `localhost` does not resolve to those IPs, something is very, very wrong.\n- Best case: horrible misconfiguration, no network connection.\n- Worst case: `localhost` resolves to _a different_ IP; you're probably the victim of a man-in-the-middle attack.\n\nAlso, note that the part of the guide you cite which says \"try both\" mentions only IRIX 5 needing to use 127.0.0.1.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5535259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5552410", "body": "`localhost` is hardcoded at line 839 as well. At this point I'd say just leave it. For myself, I know how to configure fish without `fish_config`, and its pretty rare to disable IPv4.\n\nBut: Can someone remind me why we even need the Python server here? (Its only slightly broken it seems without it).\nDidn't @siteshwar put in a lot of work to move most of the logic into JavaScript?\n\n`help` just opens a `file://` URL. Couldn't one do the same with `fish_config`, using the HTML5 File API to write out?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5552410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5553705", "body": "...right. Forgot about the \"manual select\" part.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5553705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5554875", "body": "@anders Nice!\n# \n\n@xfix Not saying this should be used for implementing anything necessarily, but regarding:\n\n>  It still needs to send stuff to fish shell somehow\n\nTry this out: :wink: \n\n``` sh\n#!/usr/bin/env fish # \"fishtml\" -- report back to fish from static html -- G.N.\n\nset -l opts foo bar foobar\nrm -rf $opts index.html\n\nfor opt in $opts\n mkfifo $opt\n fish -c \"echo $opt > $opt --on-exit %self; echo $opt; rm $opt; fish_prompt\" &\nend\n\nprintf '<html>\\n   <body>\\n     '                           > index.html\nprintf 'Watch your terminal. Click each only once.<br/>\\n' >> index.html\nls $opts | sed 's/^.*/     <a href=\"&\">&<\\/a><br\\/>/'      >> index.html\nprintf '  </body>\\n</html>\\n'                              >> index.html\n\n## The version below allows the options to be selected more that once.\n## But it spawns a million jobs and I'm not sure how to fully stop it.\n\n#  for opt in $opts\n#    mkfifo $opt; set watch \"function $opt; echo $opt > $opt --on-exit %self;\n#               printf $opt'\\n'; fish_prompt; and eval $opt; end; eval $opt\"\n#    fish -c $watch &\n#  end\n\n######## Browser code from help.fish - if it doesn't work, just open index.html\n################################################################################\nset -l browsers htmlview x-www-browser firefox galeon mozilla konqueror \\\n          epiphany opera netscape rekonq google-chrome chromium-browser\nif test (uname) = Darwin; set fish_browser \"open -a Safari\"; end\nif test \"$DISPLAY\"\n if test \\( \"$XAUTHORITY\" = \"$HOME/.Xauthority\" -o \"$XAUTHORITY\" = \"\" \\)\n  for i in $browsers; if type -f $i >/dev/null; set fish_browser $i; break; end\n  end\n end\nend\n################################################################################\neval $fish_browser index.html &; and sleep 1; and rm index.html; or true\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5554875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9365817", "body": "This used to not be necessary (nor is it necessary in other shells): the return value of the last command executed within a block becomes the function's return value. Is this an intentional change?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9365817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9248526", "body": "To add additional terminfo entries, download the 'source' terminfo and append it to the end of `misc/terminfo.src`.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9248526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9248565", "body": "... and add the name of the new entry/entries to the comma-delimited list at the end of this line.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9248565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "anders": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5513046", "body": "how about listening on all addresses, but comparing the IP address in the handler?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5513046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5545800", "body": "I just read the Python library code, and if you pass ('localhost', 8000), then it will listen on IPv4 only because it defaults to AF_INET unless you say otherwise.\n\nIf you listen on :: you can still accept incoming IPv4 connections. You could then check that the client is allowed to connect (say, ::1 and 127.0.0.1).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5545800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5554532", "body": "created a pull request: #1324 \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5554532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/10345808", "body": "I don't have Python 3 (OS X) but the code already used SocketServer. If fish_config works with Python 3 now, then it should still work.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/10345808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dpritchett": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5824045", "body": "That was fast, thanks! :checkered_flag: \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/5824045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dalizard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6278990", "body": "Any plans on releasing this?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/6278990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "MarkGriffiths": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7884246", "body": "Totally agree about this and was an oversight on my part while making `<em>` use consistent throughout the docs. However, now it's making the modifier of the keyboard shortcuts appear italic as well which makes them feel a bit busy. I'd update the `.key em` css block with the `font-stye: normal` declaration.\n\nThe use of `<em>` here is to make the keyboard shortcuts stand out in the man page, rather than the HTML formatting.\n\n``` css\n.key em {\n    font-style: normal;\n    margin-right: 2px;\n }\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7884246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7884468", "body": "I've been looking at this and Firefox is particularly odd about choosing font styles, and seems to ignore system names, only selecting 'full' names. Would you be able to give the following a try on your system?\n\n``` css\n.qindex {\n    font: 500 1.4rem/3.6rem DejaVuSansCondensed, \"DejaVu Sans\", Roboto, \"Lucida Grande\", Calibri, Verdana, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    font-stretch: condensed;\n    ...\n}\n\n.fish_left_bar {\n    font: 500 1.4rem/3.6rem DejaVuSansCondensed, \"DejaVu Sans\", Roboto, \"Lucida Grande\", Calibri, Verdana, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    font-stretch: condensed;\n    ...\n}\n\nh1, h2, h3, h4, h5, h6 {\n    font: 500 1.4rem/3.6rem DejaVuSansCondensed-Bold, \"DejaVu Sans\", Roboto, \"Lucida Grande\", Calibri, Verdana, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    font-stretch: condensed;\n    ...\n}\n\nThis intention is for something like the image below (Firefox on Mac)...\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7884468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7884486", "body": "![firefoxscreensnapz001](https://cloud.githubusercontent.com/assets/725208/4367915/807d839c-42e1-11e4-97bf-49093ef981c4.png)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7884486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7887960", "body": "My examples I wrote last night in f889ad0fda9bf8d1f354cad37d508e0c4205af48 were a bit off (it was _way_ past my bedtime and I was the wrong end of a 20 hour hacking stint). PR #1705 contains what should be the best bet for the widest audience.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/7887960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16966297", "body": "Sorry about that - I indented to put it back as it was, but was using it to test the @EOL marker as more than two option groups per line was causing the hold buffer overrun.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16966297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16974695", "body": "The way I handle situations like this elsewhere is to give [\u2026option\u2026] runs an 'optional' class and apply a span style like below (simplified), which means that  [\u2026] runs will stay complete as they break over the line, but really need to be part of a larger style construct.\n\n``` css\nspan.optional {\n    display: block;\n    float: left;\n}\n```\n\nI've steered clear of implementing anything like this in the docs so far to keep the html, manpage and `--help` use cases as simple as possible whilst being as interoperable and automatic as they can be (and there are other doxygen targets like `make doc/refman.pdf` if you have latex installed).\n\nAt some point I'd be open to having a discussion about the future direction of the docs; something that maintains the current level of integration while making content easier to write and produce and (obviously) improving the content for all the various output use cases. Dropping the doxygen dependency would no doubt be a very useful step in modernising what could be done, and as moves are afoot to not use if for source code documentation, it might be good to have that discussion at some point soon.  \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16974695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Undeterminant": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9089301", "body": "The `</code>` should be closed before the `</pre>` here.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9089301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "bhamiltoncx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9320531", "body": "Whoops! Did you really mean to export this to child processes?\n\nIt's bad form to mutate the environment variable in a way that affects child processes. It's also arguably a bit of a security hole (child processes shouldn't have access to information about any previous processes).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9320531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9320534", "body": "I just noticed that `$CMD_DURATION` is exported to child processes. Was that intended?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9320534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9321935", "body": "I sent a pull request to fix this: https://github.com/fish-shell/fish-shell/pull/1896\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9321935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9321939", "body": "Sent you a pull request in case it wasn't intended.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/9321939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wprater": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/10486692", "body": "both the `functions type` and `/usr/bin/type` do not support the `-q` switch on OS X .  I have to remove that to get my dircolors to work with this ls function\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/10486692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/10486857", "body": "Im not, so that's it.  thanks.\n\nOn Tue, Mar 31, 2015 at 2:16 AM David Adam notifications@github.com wrote:\n\n> Are you using a master build of fish? type -q was only added in 6f7a745\n> https://github.com/fish-shell/fish-shell/commit/6f7a7459c1dadc88e793b558d5ce2668359e7bea\n> which is not in a release yet.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/fish-shell/fish-shell/commit/4aa38db56f6e138ea9bc15cb6f4ffc3502c3f435#commitcomment-10486763\n> .\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/10486857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mparker17": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11932945", "body": "@Profpatsch @zanchey I've noticed this too:\u00a0[the commit to remove the GREP_OPTIONS line](https://github.com/fish-shell/fish-shell/commit/efc3846fcfa6f0bae8312645c41b132c6156b3d1) is [in the history for the file in master](https://github.com/fish-shell/fish-shell/commits/master/share/functions/grep.fish), but [not in the history of the file for 2.1.2](https://github.com/fish-shell/fish-shell/commits/2.1.2/share/functions/grep.fish), even though the commit was authored Nov 24, 2014, and 2.1.2 was released on Feb 16, 2015.\n\nNote that the release tarball (http://fishshell.com/files/2.1.2/fish-2.1.2.tar.gz) also does not contain this commit, meaning [(re-)installing Fish via homebrew](https://github.com/Homebrew/homebrew/blob/967cb9ca97a830ce2c85b21fdbf7756629198a25/Library/Formula/fish.rb) does nothing.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11932945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11982904", "body": "Awesome, looking forward to it! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/11982904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "TimWolla": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12357170", "body": "This throws a Syntax error:\n\n```\n'end' outside of a block\n/usr/share/fish/completions/grep.fish (line 50): end\n                                                 ^\nfrom sourcing file /usr/share/fish/completions/grep.fish\n    called on standard input\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12357170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12357430", "body": "I'll survive. One must live with such things when running master :-)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12357430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15516083", "body": "This is kind of a regression.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15516083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15516961", "body": "Yes, thanks.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15516961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pickfire": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12731245", "body": "When you remove that, there will be a problem in _linux framebuffer_ which the computer will say that it won't able to print that character and there will always be an error. Look at #2126.\n\n```\nfish: Tried to print invalid wide character string\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12731245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12732373", "body": "I am using a _UTF-8 locale_, `locale | grep -E '(LANG|LC_CTYPE)=(.*\\.)?UTF-8'` shows:\n\n```\nLANG=en_GB.UTF-8\nLC_CTYPE=en_GB.UTF-8\n```\n\nIt works in a normal terminal but it does not work in the _linux framebuffer_.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12732373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12738931", "body": "> Weird - for me it simply prints a bunch of colored boxes with question marks in them.\n\nThis is **True**, as _linux framebuffer_ can only display 256 or 512 characters, it cannot display some character.\n\n> Can you open an issue about this so we can take a look and solve it for more than one prompt?\n\nYou finally asked that. It is already an issue, look at #2070, it is still an unsolvable, mystery puzzle.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/12738931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13789475", "body": "Hi, I tested this out but it still seems that `^x` doesn't work. @faho, does `^x` do auto-completion now?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13789475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13791448", "body": "In short, I mean that \\cx doesn't work even after you add that.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13791448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13793096", "body": "Maybe there is something wrong with my computer, \\cx doesn't work currently.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13793096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13832049", "body": "@faho, I am sure I have this commit, I had checked it may times.\n\n@faho, @terlar: It seems that I had only tested it in **insert-mode**, so that is why it doesn't work like how it did last time. I hope that I can just type \\cx once in **normal-mode** instead of twice.\n\nIn My Humble Opinion, I think that the cursor is a bit of annoying _sometimes_ as it's cursor position is a bit different compared to vi. (if I am not mistaken)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13832049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13834084", "body": "Yeah, I wouldn't mind if it is `\\cx` or `\\cf` but I just hope that it is documentated to let the users know that it uses `\\cf` instead of `\\cx`.\n\n@terlar: But why `\\ce`?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13834084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13839134", "body": "But it currently doesn't does that.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13839134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13850486", "body": "I mean `\\ce` doesn't work currently.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13850486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13851515", "body": "I think that I should confirm it before creating an issue. I am using it in `insert` mode.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13851515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/14517368", "body": "@jawkings, actually `string` is a shell buitin, it is in the latest fish git.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/14517368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35482249", "body": "It prevent errors for unsupportable characters in the linux framebuffer (**Ctrl+Alt+F2**).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35482249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35482253", "body": "I doesn't know that does line **7-10** do to, I had copied from other prompts.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35482253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35482258", "body": "I want that **error** returned for **`and`** to execute the code when it is _true_.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35482258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35483290", "body": "Sorry, I didn't notice that. You can change it if you want to.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/35483290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jusga": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13082756", "body": "Typo: `$SHLVLV` -> `$SHLVL`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13082756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Fusty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13139126", "body": "Excellent, sorry for the bother in the first place!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13139126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "donkopotamus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13628964", "body": "This does not look correct ... negative rotations count from the back of dirstack.  It should be something like\n\n```\nfor i in (seq (math (count $dirstack) - 1) -1 0)\n    printf \"-%s\\t%s\" $i \"Rotate to \"(string replace -r \"^$HOME\" \"~\" -- $dirstack[(math (count $dirstack) - $i)])\n```\n\n(We want 0 --> last item of $dirstack)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13628964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rominf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13752248", "body": "Thank you, @faho! \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/13752248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dgutov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15197515", "body": ":sparkles: \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15197515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nh2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15854155", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/15854155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hivehand": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16129482", "body": "@floam, I\u2019m unable to reproduce the issue you're describing. If I type `brew d` into fish and then hit the tab, I\u2019m offered the following suggestions:\n\n```\ndeps                       (Show a formula's dependencies)\ndesc            (Summarize specified formulae in one line)\ndiy  (Determine installation prefix for non-brew software)\ndoctor                    (Check your system for problems)\n```\n\nThis is true even when I\u2019m in my own home directory, with `Desktop` (and `Documents`, and `Dropbox`) as valid completions.\n\nI'm running version 2.2.0 of fish, under Mac OS 10.11.3.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16129482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sean-smith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16367808", "body": "As of today this still isn't fixed. The source code is correct but the web page has the following:\n\n> If the alias has the same name as the aliased command, it is necessary to refix the call to the program with command in order to tell fish that the unction should not call itself, but rather a command with the same name. ailing to do so will cause infinite recursion bugs.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16367808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16367859", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16367859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Darkshadow2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16778834", "body": "Is `e` supposed to have `backward-char` at the end of the list?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/16778834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "simotek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17226435", "body": "Because SUSE people are slightly insane and don't give different versions between SUSE Enterprise and openSUSE Leap the if statement should contain the following as well `|| (0%{?suse_version} != 1315 || 0%{?is_opensuse})`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17226435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17269029", "body": "Not quite, if its 1315 and 0%{?is_opensuse} is true then it also uses hostname, The problem is 1315 was originally SUSE Enterprise Linux, was 1315 then someone who didn't think enough decided that openSUSE Leap should have the same version, the problem is I don't know if  `0%{?is_opensuse}` is true for all versions of openSUSE (I am now trying to find that out) if thats the case you can just use `0%{?is_opensuse}` for hostname\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17269029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17269282", "body": "Unfortunately `0%{?is_opensuse}` is not true for openSUSE 13.2 \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17269282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17279920", "body": "Ok, this turns out quite simple as openSUSE 13.2 is still using `net-tools`\n\nif `0%{?is_opensuse}` is true\n`hostname`\nelse\n`net-tools`\nend\n\nThat will cover every version of openSUSE and SLE\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17279920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Freso": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17655926", "body": "This is not my commit though. :/ Why not make a commit on top of mine with the style cleanup instead?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17655926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17655929", "body": "No reference to PR, and my commit signature is gone. Where/when did you agree on squash-merging PRs?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17655929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Gonzih": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17726884", "body": "How can revert this change in my configuration?\n\n``` fish\nbind --erase \\n\nbind \\n execute\n```\n\nThis does not work.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17726884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17727359", "body": "``` fish\nbind --erase \\n\nbind --erase \\r\n\nbind \\n execute\nbind \\r execute\n```\n\nThis worked\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/comments/17727359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9369808", "body": "Done. Not sure that this is necessary since suse have it always preinstalled, but ok lets keep this.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9369808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nvie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/3076304", "body": "Couldn't this just be a `builtin cd $i` here (i.e. no `eval` statement)?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/3076304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "crishoj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4306173", "body": "> The rest of the file is using tabs, so this ends up misaligned.\n\nThank you. I've fixed this.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4306173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ptbrowne": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4380742", "body": "you are right, i have made the modification, sorry for the error :S\n\nOn Fri, May 24, 2013 at 3:02 PM, Dag Odenhall notifications@github.comwrote:\n\n> In share/completions/git.fish:\n> \n> > @@ -93,6 +97,9 @@ complete -f -c git -n '__fish_git_using_command show-branch' -a '(__fish_git_hea\n> > \n> >  ### add\n> >  complete -c git -n '__fish_git_needs_command'    -a add -d 'Add file contents to the index'\n> > +complete -f -c git -n '__fish_git_using_command add; and __fish_contains_opt -s p patch' -a (__fish_git_modified_files)\n> \n> I think you need to quote that command substitution for it to run each\n> time: -a '(__fish_git_modified_files)'.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/fish-shell/fish-shell/pull/822/files#r4380409\n> .\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4380742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "haarts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4608991", "body": "I've tried (and will keep using) this version. But this first echo should, IMHO, not include a leading space. Let the guy constructing his prompt decide about leading/trailing whitespace. \nI'm using it like so:\n`printf ']%s ' (__informative_git_prompt)`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/4608991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030589", "body": "I considered that and subsequently benchmarked it. Executing that command takes 4ms on my VPS. I think the 4ms gain do not justify the added complexity.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030594", "body": "I'm now using `$fish_color_normal` as well as the other suggested improvement.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030607", "body": "I did that. \nThe logic is insane and I can hardly test it. But this is better.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030608", "body": "Removed it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030618", "body": "Simplified it in https://github.com/haarts/fish-shell/commit/73fc3fd280e8e81127d40700f899fe33e53c772b\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6030618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6064821", "body": "good catch. \nThis prompt should really be just the classic 'informative git prompt' plus a stash notification.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6064821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "romaia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6722603", "body": "Indeed. I just copied the description from psql --help without much editing. I will fix this.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/6722603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mariuszs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5989319", "body": "I think bold/bright colors are useful, maybe something like this:\n\n```\nset -g __git_prompt_color_clean (set_color -o green)\n```\n\nAfter this labels are much simpler\n\n```\n set concatenated_status $__git_prompt_color_clean$__git_prompt_char_clean$fish_color_normal\n```\n\nIt is better to use `$fish_color_normal` mentioned in documentation, or `set color normal`?\n\n> The following variables are available to change the highlighting colors in fish:\n> \n> fish_color_normal, the default color\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5989319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5989505", "body": "This is slow, two times we are executing  \n\n```\ngit diff --staged --name-status\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/5989505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "smith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7708303", "body": "Good catch, thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7708303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "rjb3vp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7713808", "body": "What is the purpose of this segment?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7713808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "d10n": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7714426", "body": "git blame takes us to 16f2ffc29d51f209428e5650759b80095a2d1527, and it looks like a small, unnecessary part of fixing issue #300. There aren't any specific comments about it being added.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7714426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7748479", "body": "In the current master, multiline commands are indented, and multiline commands that wrap all wrap to column 0. Both behaviors are kept with this commit.\n![Image supplement to comment and commit message](https://f.cloud.github.com/assets/395175/1569725/f41e1e82-50d0-11e3-8c9b-3eec3a30a10d.png)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/7748479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mandeepsandhu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/8688943", "body": "Oops! Reverted this change.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/8688943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/8688962", "body": "Yes, this was a leftover from some test I was doing initially. Removed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/8688962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9616607", "body": "Better in what way exactly, readability? Did the other one break something?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9616607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9616626", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9616626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9663803", "body": "Done (using `-gt 2` now).\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9663803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fosskers": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9632740", "body": "If all he wants are package names, `pacman -Ssq` should be faster.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9632740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9655339", "body": "```\ncolin@ko-linux ~> time pacman -Ssq > /dev/null\n0.22user 0.02system 0:00.31elapsed 79%CPU (0avgtext+0avgdata 15176maxresident)k\n0inputs+0outputs (0major+4803minor)pagefaults 0swaps\n```\n\nCompared to:\n\n```\ncolin@ko-linux ~> time pacman -Sl > /dev/null\n0.26user 0.00system 0:00.34elapsed 80%CPU (0avgtext+0avgdata 15600maxresident)k\n0inputs+0outputs (0major+4943minor)pagefaults 0swaps\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9655339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mrak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9633036", "body": "I wasn't sure what the \"spirit\" of this `__fish_print_packages` function was. Should it have version number descriptors?\nIf it needs only be the names of the packages then `-Ssq` should be fast like @fosskers said\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9633036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9657479", "body": "```\ntime pacman -Ssq | sed -e 's/$/\\tPackage/' >/dev/null\npacman -Ssq  0.15s user 0.01s system 99% cpu 0.158 total\nsed -e 's/$/\\tPackage/' > /dev/null  0.01s user 0.00s system 4% cpu 0.158 total\n```\n\n```\ntime pacman -Ssq >/dev/null                          \npacman -Ssq > /dev/null  0.15s user 0.00s system 99% cpu 0.154 total\n```\n\n```\ntime pacman -Slq | sed -e 's/$/\\tPackage/' >/dev/null \npacman -Slq  0.16s user 0.00s system 92% cpu 0.172 total\nsed -e 's/$/\\tPackage/' > /dev/null  0.03s user 0.00s system 17% cpu 0.172 total\n```\n\n```\ntime pacman -Slq >/dev/null                          \npacman -Slq > /dev/null  0.15s user 0.01s system 99% cpu 0.158 total\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9657479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9736947", "body": "I noticed that `yum` and `rpm` have different cache invalidation times.  What was the reasoning? If we cache `pacman`, what should the timeframe be?\n\nIn general I don't think packages are added or removed from the repositories that often. Updated, yes, but that shouldn't affect this function :)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/9736947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Aulos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/14323876", "body": "Yup, you are right. I used it before, but then I just replaced it with argv[1].\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/14323876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "zzamboni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731768", "body": "Thank you, good tips - will fix.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731811", "body": "Ooooh, this is the reason why the `--provider` flag was being offered as a completion to all the `box` subcommands! I wondered about that but never caught the mistake. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18731811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18732304", "body": "And I just noticed the `--arguments` - very nice! Much cleaner than the usual shell way of fetching arguments.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/18732304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jaredgrubb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/25136214", "body": "/exist/exit/\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/25136214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dan-c-underwood": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39566944", "body": "Is there a more efficient way of doing this?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/39566944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40571513", "body": "This way it still does some limited validation on the rest of the input (essentially checking that there's no command there twice). Even though there's only a small benefit it seemed to make sense to still do it. I can change it to a return statement though if you feel it'd be better.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40571513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40576747", "body": "> That would mean there can't be a package called \"stars\", \"install\", \"docs\", \"home\" or \"open\".\n> \n> And the \"benefit\" you mention is that fish won't complete - it's not hooked up to syntax highlighting (that would require using completes \"-A\" option) and doesn't allow the user to undo the error. It's not really a good experience if I'm mashing the TAB key and all I get is that limp blink once. Or even worse, if it decides to complete files again.\n\nValid points, I'm new to working with `fish` and even newer to actually doing any contributions with it so I just want to make sure that any code I write/thoughts are getting critiqued so I'd rather be told something is wrong or inefficient early on than spend hours ending up with some amalgamated solution which works but isn't nearly as clean.\n\n> Anyway, this is your completion - I don't use apm, so I don't have a stake in this (apart from wanting fish to be great) or expert knowledge of the tool. If you insist, we can keep it that way.\n\nI wouldn't want anything that doesn't provide a good enough user experience getting merged in anyway since even though they're now my completions the user will just see it as an issue with `fish`! As above, you're a maintainer of the project so your point of view is justifiably one that's important to be noted!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/40576747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "eush77": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44454077", "body": "Yep. I added a comment.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44454077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44454130", "body": "Rewrote with `string`. It's cool that string functions are now built into Fish!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44454130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44454327", "body": "I could not reproduce this issue:\n\n```\n$ set suffix \"\"\n$ echo /tmp/psub.fifo$suffix\n/tmp/psub.fifo\n```\n\nCould you provide an example?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44454327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44457091", "body": "Thanks and fixed.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/44457091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mrshu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/46098232", "body": "@faho I removed this TODO since this commit adds a handful of options. I am not sure if that is OK with so feel free to let me know and I will revert this change\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/46098232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "samdmarshall": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47107223", "body": "It seemed like this was the most efficient way to access them for parsing, I don't like they are global defines but there didn't seem to be a more efficient way of doing this when the helper function they get used in will be called many times.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47107223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47108068", "body": "It was giving me some trouble with multiple substitution in variable names. Might have been my error, so I will have another look at it.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47108068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47112454", "body": "Interesting. OK i will look at changing that. I remember reading there was some funky-ness with handling multi-line strings in a variable in fish shell (and experiencing some of that myself). And came to this code as it \"worked\". Thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47112454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47115032", "body": "I did notice there seems to be a function in fish shell for fetching the revision number of a repo but I didn't use it because it also spits out some other strings and I wasn't sure if it was half-implemented or not.\n\nAs for the grep strings, I was basing this off the source of the svn command printing out what appear to be english strings.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47115032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47119840", "body": "Yes, I will look at using `svnversion` here and see if it satisfied the needs. Maybe the function should be refactored to use `svnversion` then I should call that instead of implementing it twice.\n\nit looks like this might work for using `svnversion`:\n\n`svnversion | sed -e 's=[^0-9:]*==g' -e 's=^.*:=='` but i'd have to test it out a bit first. \n\nEdit: Now realizing that the second `-e` in the sed might not be necessary and be removing desired data to display to the user. I'm ok with removing that second sed expression, if you think that would be locale agnostic.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47119840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47124606", "body": "I would like to use `string` however since I don't use a development build of fish shell i wanted to avoid maintaining this twice until a formal release is made.\n\nAs for the localized status of `svn status` the code I looked at from the build of svn apple ships has hardcoded text strings in english for the bits of the output i am attempting to remove. I recognize that isn't sufficient for the numerous platforms that fish shell supports -- I don't know how to approach the problem to tackle this in a more agnostic manner.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47124606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47223103", "body": "I did see the suggestion, however that doesn't work for my version of svn, (doesn't recognize the `--show-item` flag). I think I'm going to go with the `svnversion | sed -e 's=[^0-9:]*==g'` command and try to get this PR updated today to reflect the changes we have discussed. \n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47223103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47238511", "body": "Since this gets called 7x in a pretty tight loop i was worried that a local variable setup/teardown would cause a bit of unwanted overhead to an already expensive function call. If you think that is fine, I can make that change but I am concerned about the performance of doing this.\n\nEdit: Ok then I'll give that a try and update the PR.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47238511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47246410", "body": "it looks like it iterates an extra time when doing `seq $last_column $col` vs `seq (math \"$col - $last_column\")`\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/47246410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lordlycastle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48092504", "body": "That's what it's generating right now.\n![screen shot 2015-12-19 at 14 41 53](https://cloud.githubusercontent.com/assets/11729541/11913263/bc50494a-a65e-11e5-976c-555beb93daa1.png)\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48092504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48092512", "body": "> Also, @zanchey mentioned in #2587 that calling killall on Solaris wasn't safe (there, killall just kills all processes on the system, so you don't want to execute it or it executes you).\n\nWhat's the output of `uname`for Solaris? I\"m getting all kinds of information on Google.\n\nFurthermore, how would you stop user from executing that? What if they do want to intentionally do that? Perhaps, if the system is solaris, then define a function with name `killall` that requires confirmation to run `killall`?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/48092512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "oranja": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50682558", "body": "Even though it is not unprecedented in Fish's command reference to use direct speech (\"you\"), I would consider rephrasing the majority of this text to use indirect speech. It sounds more appropriate to me (maybe I'm too old fashioned? what do you think?).\n\nFollowing is a proposal with mostly indirect speech. This is actually more than slight rephrasing, but it's not as if to say that I think it's better now than before. My text is simply different (and worse, if anything).\n\n> Since the escape key (or character) plays two distinct roles, the escape key poses a special challenge for fish. In its first role, it stands by itself. In Vi mode, for example, escape is used to switch from insert to normal mode. In its second role, however, escape is used as a \"meta\" key and then it's only the beginning of some longer key-sequence. Coming back to the Vi mode example, sometimes fish is expected to realize that the escape key should be regarded as \"meta\", meaning that the escape character is part of some multi-char sequence. Function keys (F1, F2, etc...) and arrow keys are common cases of multi-char sequences sent with the escape character as \"meta\", but escape can be used in this manner to define custom bindings as well. Obviously, fish is not supposed to exit insert mode when the escape is part of a longer key-sequence.\n> \n> To be able distinguish between these two roles, fish has to wait after it sees an escape character. In this waiting period, any additional key presses make the escape key behave as \"meta\". Otherwise, it remains simply an escape key press. The waiting period is set to 500 milliseconds (0.5 seconds) by default This is the Gnu readline library default escape timeout. It can be configured by setting the `fish_escape_delay_ms` variable to a value between 10 and 5000 ms. It is recommended that this be a universal variable that you set once from an interactive session.\n\n(The note on previous versions remains unchanged)\n\nThe rest of the PR looks great to me, excluding test code, which I am not familiar with and didn't have time to go over.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/50682558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jrobeson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52264240", "body": "shouldn't `$__fish_sysconfdir/conf.d` itself be allowed to not exist? and all of `$__fish_sysconfdir` for that matter. I've been experimenting with empty /etc (stateless systems), and this seems like it would break that.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52264240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52834176", "body": "cool, thanks\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52834176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "gordontyler": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52342622", "body": "It was failing with fish v2.2.0, so I followed the doc's recommendations on how to do multi-command tests.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52342622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52345283", "body": "Should I be targeting this at a different branch for a 2.2.x patch?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52345283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52347110", "body": "Agreed, I like your version better.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/52347110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jeffkowalski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55779501", "body": "I would have thought to implement it that way, but the prevailing standard in the file, just below at line 1463 is\n\n```\n if (0 > wrename(tmp_name, new_name))\n```\n\nso I mirrored that idiom.  Should I still do as you propose?  Leave it as is?  Change both?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55779501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55780436", "body": "Happy to do so.  Like you, I prefer the other way.\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55780436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55781010", "body": "As in\n\n```\ndebug(1, L\"Error when changing ownership of history file: %s\", safe_strerror(errno));\n```\n\n?\n\nI don't see another example of outputting `errno` elsewhere in the code.  I do see examples of `perror`, but not used in conjunction with `debug`. \nTwo statements?  The `debug` and a `wperror`?\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/55781010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "f1u77y": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/56654888", "body": "@faho it's a line from yaourt(8). but yes, \"from\" is better\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/56654888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "actionless": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59675239", "body": "please help me with this one:\n\n```\n       -d, --download\n           Clone the target(s) build files. Pass this option twice to fetch uninstalled dependencies (done\n           recursively).\n```\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59675239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59835426", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/fish-shell/fish-shell/pulls/comments/59835426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}