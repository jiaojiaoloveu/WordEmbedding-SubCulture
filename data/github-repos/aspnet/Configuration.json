{"_default": {"1": {"karolz-ms": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/768", "title": "Mismatch between Ms.Ex.Configuration and Ms.Ex.Configuration.Abstractions", "body": "(analysis by @joperezr)\r\n\r\nMicrosoft.Extensions.Configuration.dll has a class (ConfigurationBuilder) that implements an interface from Microsoft.Extensions.Configuration.Abstractions.dll (IConfigurationBuilder). At the time when the implementation was made, the Interface didn\u2019t have the get_Properties member. Later on, the interface added this extra member, and the implementation did it as well, but the implementation didn\u2019t update it\u2019s reference to the new interface with the property. Then comes one more assembly, Microsoft.Diagnostics.EventFlow.ServiceFabric.dll which references both the implementation assembly and the interface, and it fails to match the interface with the implementation since it believes that the get_properties is not yet fully implemented.\r\n\r\nThe result is that an application referencing Microsoft.Diagnostics.EventFlow.ServiceFabric lib and an assembly referencing Configuration 2.0 lib fails to start with a TypeLoaderException. This was reported by a customer here: [EventFlow issue 171](https://github.com/Azure/diagnostics-eventflow/issues/171)\r\n\r\nThe fix for this is that Microsoft.Extensions.Configuration.dll has to be rebuilt referencing the new M.E.C.Abstractions.dll so that the implementation matches the interface. Probably new Nuget for the Ms.Ex.Configuration needs to be published as well", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Matthew-Bonner": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/767", "title": "Add a bind method that creates object instance to allow for readonly properties", "body": "Something like the following:\r\n\r\n`public static void Bind<Type>(this IConfiguration configuration);`\r\n\r\nSo that we can do:\r\n```\r\nconfiguration.GetSection(\"Paths\").Bind<Paths>();\r\n\r\npublic class Paths\r\n{\r\n    public string OriginalImage { get; }\r\n    public string CacheDirectory { get; }\r\n    public string CacheFileDirectory { get; }\r\n    public string CacheFileName { get; }\r\n}\r\n```\r\n\r\nThis will make the application more robust by preventing the accidental change of a property during the application execution.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pakrym": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/766", "title": "Add KeyVault provider overload that uses MSI to authenticate", "body": "https://anthonychu.ca/post/secrets-aspnet-core-key-vault-msi/ for a sample  ", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/cfe8c9ee015588a56455c8c1f8aa8c0f1f55cd2c", "message": "Add KeyVault overloads with MSI support (#761)\n\n* Add KeyVault overloads with MSI support\r\n\r\n* Add nullref check and test"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6e9b5a94b92d195ca74bf46df2a8e580d6c9c785", "message": "Merge remote-tracking branch 'origin/rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/ca5916a337727dfc5aeac09e5c4b7540bd8fe58b", "message": "Update AzureKeyVaultVersion to 2.3.2 (#692)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/35e2bfc56f8d9a8c107025345857524fb21e1441", "message": "Cross compile sample"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/0518c83238644acf731c68ffe000c93d1a33b352", "message": "Update IdentityModelActiveDirectoryVersion (#685)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/82fc2fe581d45a26a6ec2d884cfc531705562687", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/eddb761ed765827cd94f5c9bac86d4ca9d1821b0", "message": "Update InternalAspNetCoreSdkVersion"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9806af1c05e34d120dc11508e97507bc2ff1bf89", "message": "Update Microsoft.Azure.KeyVault package version (#570)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/4af76e962cbe440fc8e32708cfd93aacf0484b96", "message": "Upgrade KeyVault version (#531)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/5675ca507cf36e198af60c08b22900b3bb18b711", "message": "Change KeyVault section seperator from __ to -- (#510)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/af6c0a435aa2552e14f465841017b7b7ec5afa8e", "message": "Rename Azure.KeyVault to AzureKeyVault (#526)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1376ae0d9230c3552b8c8e3f5303ec1e271e0de5", "message": "Fix package name in NuGetPackageVerifier.json"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1d08802a7a846c103af3d43bff78af6f3c0bb348", "message": "Fix solution, downgrade package version"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/76566d1d23863449165129c1260724dc911ec9cc", "message": "Add Azure KeyVault configuration source (#500)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/dc4314ea2b8bab336e039bc0245fa74c7248d598", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/fba50032d372ffe4f87a109e26c1d68255714c07", "message": "Bring Microsoft.NETCore.Platforms dependency back"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9ecca66e30e6852ba8ad32139be8d675ecda034b", "message": "Fix target of library inside of test folder"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/759dc9e138342292ec621776a27bf7e12841bbeb", "message": "Migrate tests, tools and samples to portable"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "markolbert": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/765", "title": "Bug: Default Value of LoggerCallbackHandler.UseDefaultLogging Causes Flood of Console Messages", "body": "This is a follow-up to issue #763, which I have closed.\r\n\r\nI believe there is a bug in the default value for LoggerCallbackHandler.UseDefaultLogging. It is currently set to true, which results in a flood of logging messages related to accessing the Azure key vault. This is a problem when an app has its own logging system, because the key vault messages get handled by the app's logging system.\r\n\r\nI think the default value of this property should be false. The in-depth logging messages should only be visible if requested.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chikien276": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/764", "title": "[Questions] How to use `AddDockerSecrets` and double underscores to configurate ASP .NET core project", "body": "I explored that there are extensions to configure docker secret in AspNet project in [here](https://github.com/aspnet/Configuration/tree/rel/2.0.0/src/Microsoft.Extensions.Configuration.DockerSecrets). But there is no way can I make it work in my project although I've imported MetaPackages (v2.0.0) in `.csproj` file and all I could find about these packages is a unlisted package [here](https://www.nuget.org/packages/Microsoft.Extensions.Configuration.DockerSecrets/).\r\nMy expectation is \r\n```\r\nWebHost.CreateDefaultBuilder(args)\r\n                .ConfigureAppConfiguration((context, config) =>\r\n                {\r\n                    config.AddDockerSecrets();\r\n                })\r\n                .UseKestrel()\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n```\r\nOne more thing that I discovered that if my configuration use environment variables and if a variable has key has double underscores characters, like `foo__bar`, `__` will be replaced by `:` so in the code I can use `Configuration[\"foo:bar\"]`. I use it to override my configurations in my `.json` file. The question is it intended by ASP .NET team and it will not break in future releases?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "and85": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/759", "title": "Does GetChildKeys from ConfigurationProvider work correctly?", "body": "Hi, \r\nI think there is a bug in method GetChildKeys of https://github.com/aspnet/Configuration/blob/dev/src/Config/ConfigurationProvider.cs.\r\n\r\nAccording to the documentation, it supposes to return the list of keys for this provider.\r\n\r\nLet's imagine that I have a provider that contains keys with names which contain semicolon in their name, e.g. part1:part2:part3\r\nthen if I do something like  \r\n\r\n```\r\nvar result = new List<string>();\r\nforeach (var provider in Configuration.Providers)\r\n{\r\n\tforeach (var key in provider.GetChildKeys(Enumerable.Empty<string>(), null))\r\n\t{                        \r\n\t\tresult.Add(key);\r\n\t}\r\n}\r\nreturn result;\r\n```\r\n\r\nIt will return me just part1, cutting of the rest of the key name because of the delimiter.\r\nSo it doesn't return a full list of keys for this provider, but just names of parent \"nodes\" of the data used to populate a provider.\r\n\r\nIf this is expected, how do I iterate through a full key names then?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "votrubac": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/757", "title": "Variables expansion (e.g. %DataRootFolder%).", "body": "### Scenario\r\nappsettings.json contains multiple configuration keys that share a common part (e.g. a root folder). This common part changes per a deployment/customer.\r\n```\r\n\"Options\": {\r\n  \"DictionaryFilePath\": \"%DataRootFolder%\\\\Policy\\Component\\\\dictionary.tsv\",\r\n  \"SpellerFilePath\": \"%DataRootFolder%\\\\Policy\\\\Component\\\\entities.tsv\"\r\n}\r\n```\r\nIn the launchSettings.json, there is an environment variable that defines that common part.\r\n```\r\n\"environmentVariables\": {\r\n  \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n  \"DataRootFolder\": \"C:\\\\inetpub\\\\customer1\"\r\n}\r\n```\r\n### Current Implementation\r\nCurrently, we need to add a post-processing code to iterate through all options and call Environment.ExpandEnvironmentVariables. This does not support option re-loading. Alternatively, we can use our own IConfigurationProvider but it requires an extension method for each configuration source type.\r\n### Proposal\r\nExtend the IConfigurationSource and IConfigurationProvider interfaces to accept a delegate to perform a post-processing after an option is loaded.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/757/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemcmaster": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/755", "title": "[2.0.x] Set LocalUserSecrets project capability ", "body": "Port #750 to the next 2.0.x UserSecrets package to enable VS tooling.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/079ca6e16acb0e51a43e922dc24b1fb63527308e", "message": "Set the LocalUserSecrets project capability when UserSecrets is referenced (#750)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c5829d3d1a1ea429d3f60868b677749af330540b", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6cc477ed493e5b0da3c8f609488d667dc65a5576", "message": "Pin tool and package versions to make builds more repeatable"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/43f5720ae60a2e7309a437c7025939761f17707b", "message": "Use PackageLineup to manage PackageReference versions"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9cafdf2592dada55b87680e1048a72a3e6cc4a4f", "message": "Use Directory.Build.props/targets (#717)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7405009c24b4fbbc33e872cf7fbff98a9fa946e4", "message": "Upgrade to xunit 2.3.0-beta4"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/dc6fbde39f532bf154ee1eb02d8be08a0a1605e4", "message": "Shorten folder names"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b2609af11b7e1083d9bc4e6e21178297efcf798c", "message": "Fix syntax warning when running build.sh on older versions of bash\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/a9994971a2f28aacc177664ad9153de1d516dbbf", "message": "Update bootstrappers to use the compiled version of KoreBuild\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/16c10116b94d9abb91f9c20394ad6df0149465dd", "message": "React to aspnet/BuildTools#293\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/cc0d262a57aca06bab8a99ab53a53e3a6e4496ed", "message": "Adding libunwind8 to .travis.yml\n\n[skip appveyor]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/afbd71191b460a638e9e560d8e9de26c24f694f4", "message": "Target .NET Standard 2.0"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1e39e9b20c85c95017b14992a55e2c7f606e6d73", "message": "Trim whitespace from UserSecretsId\n\nResolves #638"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/4900c5975b23f6634e3fc42af8951494f786b426", "message": "Upgrade test framework versions"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9b633a4305f0e56bb1bee026b4c9dd5228d3e509", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9822feb6298de578d7b7c95a4ce6c04cd81a6e95", "message": "Update travis and appveyor settings to build rel/* branches and add solution items to .sln file"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/3f079dbcc16654d0224cad45ff4da97e4d99da07", "message": "Add overloads to AddUserSecrets with optional flag"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/288a27444d952c67865d067a560ff619c189830f", "message": "UserSecrets: remove build warning and tweak runtime error"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/e4efc84f3f8de462323bbb18fb0d566920c76ae3", "message": "Update Travis to macOS Sierra\n\n[skip appveyor]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/3e18b84eb3f644eb271d1375726f574ba6a2115e", "message": "Unify dependency versions via one file and remove workarounds"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6a86bab0d7610cf0f3723586d1ec3cecdefcf51f", "message": "Update appveyor and travis settings"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8d0fa6efcef3fca6ca9258bca115fd6b7ab57327", "message": "Update AppVeyor and Travis settings"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7b2b96bb8af1fa3e0dcd0cabeb8a0b2904921222", "message": "Change korebuild branch and fix argument forwarding in bootstrapper"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/3dae6a01f72fb533cbf1d2dbe4b2efb8490e517c", "message": "Remove obsolete code and tests from user secrets\n\n- Resolves #550 - remove obsolete APIs that relied on project.json and their tests.\n- Improves the runtime error when the user secret ID assembly attribute is not found. Adds suggestions for how to resolve the error.\n- Cleanup functional test to use xunit logging.\n- Remove unused strings\n- Rename ConfigurationExtensions type to avoid typename collisions\n- Drop TFM requirement from netstandard1.5 to netstandard1.3\n- Fixup XML docs for user secrets"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/5ce342035c192e3ee40fe11305eb605a0836a17f", "message": "Rename repo.targets => repo.props"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1195260dacf35dcd87f84abd8cdef370957905ab", "message": "React to aspnet/Korebuild#160"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7b1f507edcbbb79fb412cee253551f4397d41398", "message": "Downgrade to stable packages"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/50d6fe59fe51ef19ae99eeaccf49a375368245e2", "message": "Align targets layout in package with supported frameworks"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b8fce10f6aba9c9b7b73517b90efa6bad607160f", "message": "Obsolete .AddUserSecrets()\n\n.AddUserSecrets() depended on the existence of a file named project.json\nWith the move to MSBuild, project.json may not exist. This overload will\nfail in common design-time scenarios.\n\nThe recommended replacement is .AddUserSecrets<T>(), where T is your\nStartup class in an ASP.NET Core project, or .AddUserSecrets(string id)\nwhere id is your user secrets id.\n\nThis updates the runtime error and obsolete message to redirect users\nto more stable overloads."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/15b0693a7bd02783a19c945b210297ada02f01d0", "message": "Remove x86 and x64 solution configurations (#593)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/371f9951966da9e276fa38e56e6078d66949dd2d", "message": "Upgrade to RC.3"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d67f7ab5a9578f407a93f93909fc4f97e670abdd", "message": "Pin sdk version using global.json"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1db235c6a82742c6dacf4e5300f80bced4d4302d", "message": "React to aspnet/KoreBuild#155\n\nThis converts to using Internal.AspNetCore.Sdk instead of importing from the KoreBuild folder directly"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/07da2c57ae1e96cfcb5b50863c0c0e4002fe63eb", "message": "Update appveyor image"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/cbaeb7cfb394d67f4e732a53ef6ca259f5ce91dc", "message": "Ensure msbuild target test cleans up temp directory"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/2a2c06b3d5053e8c9dd45cc6427c11f15c61048b", "message": "Fix test that fails in 'Release' mode"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/a91f16ee10b85f7fc2ad7f4a59c2f1d951fb3a9f", "message": "Remove redundant references and fixup MSBuild target test"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/0e6cf70fcc14c21d0efc397945b7c8f1808a21df", "message": ":arrow_up: AzureKeyVault to 1.2.0"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/62289cfccfaa20bb123f1d8be6f9430fd420e28e", "message": "Remove copyright header from targets file"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/aff0c1de00f9ce7a9f2fcc8022c3a6d6ce7028b9", "message": "Remove output logging from test that causes invalid TRX format.\n\nWorkaround https://github.com/Microsoft/vstest/issues/320"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8f871c8a82bd39b7b595cc933e9afe0de48dba90", "message": "Upgrade to VS 2017"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/f0613edd6aec2e91108e9e5e13d66968872088f8", "message": "Ensure secrets ID does not contain invalid file name characters"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7d4a09868d4da1896806d9cea6fb2d2f98eba079", "message": "Clean tmp folder after unzipping KoreBuild"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/a8b6008d3798693d03bb00d35238ce251c267ab7", "message": "Sync resources.designer.cs and resx files"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/5d08dac6096cde009d8841f27b96accc74a475d1", "message": "Merge branch 'rel/1.1.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8b72942eb306a20b92f98f721c071e35c846ce35", "message": ".AddUserSecrets() throws for null entry assemblies and add AddUserSecrets<T>()"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/09bc782255ebac69fccbf37e5838528719ad7bcd", "message": "Merge branch 'rel/1.1.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/10db4e3e2d7b5a48e488cde5018bb88f1fe83a0a", "message": "Add warning when UserSecretsId is empty or missing\n\nFix incremental build for user secrets target.\nAdd functional test for user secret build target"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/da0fc174316e03b5b852ccf54a3dae4aadbc3ac8", "message": "Merge branch 'rel/1.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/25d9ec8065b5e21b912b374c9b7bc6e846069898", "message": "Add support for assembly attribute containing user secret id"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d718531f994296ba618d5692c06700a5d3cab5ff", "message": "Merge branch 'rel/1.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/32e552d7c7ad9bb1783bc60f8bc2fccf0d651cea", "message": "Add UserSecrets 1.0.1 (copied from aspnet/UserSecrets) (#524)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/124fe99967d6156289af408542d89b1d8558b342", "message": "Bump versions to 1.0.1 (#527)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9518bec5b69e305315309a87213e0153cb26de7f", "message": "Move UserSecrets extension into current repo (#513)\n\nSee also https://github.com/aspnet/UserSecrets/pull/106"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7e63c0b9a6eebe845004dd54524ae940950b9e5b", "message": "Fix backslashes in yml config.\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8a807f88f4d996b222ee65c27d52ae5896e0af73", "message": "Limit the branches that build on our public CI.\n[ci skip]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "whitebear-gh": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/754", "title": "UsersSecrets tool doesn't work with F# projects", "body": "Hi,\r\n\r\nWhen I try to use user secrets in my F# project I get following error: \r\n```\r\nABC\\.nuget\\packages\\microsoft.extensions.configuration.usersecrets\\2.0.0\\build\\netstandard2.0\\Microsoft.Extensions.Configuration.\r\nUserSecrets.targets(37,5): error MSB3712: Code for the language \"F#\" could not be generated.  [ABC\\ABC.fsproj]\r\n```\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <UserSecretsId>ABC</UserSecretsId>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n```\r\n\r\nIs there something wrong with my fsproj or maybe you just don't support F# projects?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bdovaz": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/752", "title": "Can't read a XML list", "body": "The following code:\r\n\r\n```csharp\r\nprivate static string content = @\"\r\n<?xml version='1.0' encoding='utf-8'?>\r\n<data>\r\n  <value>123</value>\r\n  <items>\r\n    <item name='0'>a</item>\r\n    <item name='1'>b</item>\r\n  </items>\r\n</data>\r\n        \";\r\n\r\n[DataContract(Name = \"data\", Namespace = \"\")]\r\npublic class Test {\r\n\r\n    [CollectionDataContract(Name = \"items\", ItemName = \"item\", Namespace = \"\")]\r\n    public class CustomList : List<string> { }\r\n\r\n    [DataMember(Name = \"value\")]\r\n    public int Value { get; set; }\r\n\r\n    [DataMember(Name = \"items\")]\r\n    public CustomList Items { get; set; }\r\n}\r\n\r\n\r\nstatic void Main(string[] args) {\r\n    string path = Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location);\r\n    string filePath = Path.Combine(path, \"data.xml\");\r\n\r\n    File.WriteAllText(filePath, content.Trim());\r\n\r\n    IServiceCollection services = new ServiceCollection();\r\n    IConfigurationRoot configuration = new ConfigurationBuilder()\r\n        .AddXmlFile(filePath)\r\n        .Build();\r\n\r\n    services.AddOptions();\r\n\r\n    services.Configure<Test>(configuration);\r\n\r\n    IServiceProvider serviceProvider = services.BuildServiceProvider();\r\n\r\n    Test data = serviceProvider.GetRequiredService<IOptions<Test>>().Value;\r\n\r\n    Console.WriteLine(data.Value);\r\n    Console.WriteLine(data.Items.Count);\r\n    Console.WriteLine(data.Items[0]);\r\n    Console.WriteLine(data.Items[1]);\r\n\r\n    Console.ReadLine();\r\n}\r\n```\r\n\r\nWill crash because \"Items\" is deserialized with 0 values. Why is that? How can I do it properly?\r\n\r\nThis example is very simple but my model has more depth and more classes with dictionaries and collections.\r\n\r\nI also tried to do this without luck:\r\n\r\n```csharp\r\n    services.AddSingleton(provider => {\r\n        Test.CustomList list = new Test.CustomList();\r\n\r\n        configuration.Bind(\"items\", list);\r\n\r\n        Test value = new Test {\r\n            Value = configuration.GetValue<int>(\"value\"),\r\n            Items = list\r\n        };\r\n\r\n        return Options.Create(value);\r\n    });\r\n```\r\n\r\nIf I do it in json format I don't have any problems but I need it in XML format.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rudithus": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/751", "title": "Plans on DockerSecrets", "body": "I've looked around but I couldnt find a planned release date on dockersecrets configuration. Would love to know if there are planned changes or a release date.\r\n\r\nFurthermore, I would like to start a discussion on the neccesity of this package. Should the app really care wheter its receiving configuration from a container? I'm leaning towards to thinking apps should not care if they are hosted in a container or not. Perhaps  a different approach would be more beneficial.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glennc": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/747", "title": "Aggressive throwing of exceptions in CommandLineArgs configuration", "body": "This PR adds the CommandLine config source to the default builder created by the templates: https://github.com/aspnet/MetaPackages/pull/241\r\n\r\nOne limitation that annoyed me when we did this is that you cannot pass a single switch to turn on a value. In my case I wanted to pass `-i` to mean interactive=true. But I couldn't find a way to make that work, and the config provider throws if it cannot parse the arguments. So I end up needing to process arguments before passing them to the config provider, stripping out anything it cannot handle.\r\n\r\nPerhaps a change to make the provider not throw if it can't handle an arg would be appropriate? I would be ok with a feature that let me map `-i` to `key=true` as well, but I could see that as a different feature request.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40986306", "body": "duplicate of #26\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40986306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76020162", "body": "@victorhurdugaci Assigning this to you so that getting a design together for it doesn't fall through the cracks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76020162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79121287", "body": "Closing as this appears to be fixed with newer versions of the package.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79121287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/82684904", "body": "Should add ini as well: https://github.com/aspnet/Configuration/blob/dev/src/Microsoft.Framework.ConfigurationModel/Sources/IniFileConfigurationSource.cs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/82684904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/82685180", "body": "Just realized that you need to do a CLA, once you do that we can continue :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/82685180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/82685913", "body": "We removed commit, closing this PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/82685913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83123888", "body": "Looks like your CLA is signed and done, something must have happened to the bot.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83123888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83134818", "body": "@ChengTian can you re-base and get this ready again?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83134818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83178752", "body": "Closing as duplicate of https://github.com/aspnet/Configuration/issues/123\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83178752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84180716", "body": "Would this work better if it depended on `IApplicationEnvironment` and was already registered? Have hosting add a new `IConfiguration` without any sources configured. It doesn't really feel like a hosting thing, but get it inject-able somehow and resolve its dependencies is the main idea :).\n\nEither way I should be able to new up Configuration without passing a basePath. Not all configuration sources are file based and I shouldn't have to pass a base path to configuration if I'm not using one. \n\nThe difficulty with that is protecting people from using the code we scaffold today, which just passes config.json to a new Configuration. My only answer to that is to check if the path passed is rooted and if it isn't and if the basePath isn't set then throw with an appropriate error. Alternatively you let it blow up. Assuming the file not found exception gives you the full path it should be obvious early what the problem is.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84180716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85198918", "body": "I realized after sending that last comment that we probably don't want to add coupling to IApplicationEnvironment. But the rest of it still stands :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85198918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85294344", "body": "@sandorfr are you ok with doing the few comments on this PR? I want to get this one in :).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85294344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85633017", "body": "I'm ok with this now, I want to get it merged and start using it a bit. Make more issues to improve it after that. :shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85633017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276663", "body": "We should add indexers to IConfiguration and ConfigurationContainer\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9296079", "body": "Would we be happy with JSON even without comments?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9296079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9315269", "body": "My EYES!\n\nAlternatively we could do something with convention I suppose:\n\n```\n{\n  \"Databases\" {\n    \"comment\" : \"The default connection string\",\n    \"Default: {\n      \"ConnectionString\":\"aiwfhawilfhlwiefhawilefhlaeihf\",\n      \"Provider\":\"SqlClient\"\n    },\n    \"comment\" : \"The default connection string\",\n    \"Employees\": {\n      \"ConnectionString\":\"r1237hofijqo3irjqo23r\",\n      \"Provider\":\"SqlClient\"\n    }\n  }\n}\n```\n\nWe would just have to ignore all comments when parsing, I think I've seen this somewhere before. Another option might be to effectively use a YAML parser but stick to the JSON subset with YAML comments. Another might be to just use the comments that JSON.NET can support. Really all we are talking about is some default config sources, and this one is parsed by JSON.NET and supports everything it does.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9315269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9363985", "body": "We went down the path of dropping the verbs from a bunch of configuration methods in EF6, but in the end we added them back. People just expected them to be there and it felt strange not to have them. Though there are arguments for both ways.\n\nHow do you see the AddOverrides method working?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9363985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26998962", "body": "Make sure we add a note in https://github.com/aspnet/Configuration/pull/160 so that this doesn't slip through.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26998962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999240", "body": "@davidfowl @loudej We talked once about providing a property bag on IApplicationEnvironment that contains all the properties in the project.json, so that things like this could flow. If we did that then we wouldn't have to parse the project.json again here. I like that better than parsing this again. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999325", "body": "comment is wrong. As they always are. Does it add that much value?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999388", "body": "This feels more generic than this, is there nowhere else it can live?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999616", "body": "Another overload where the appSecretId is passed in directly might be nice, seems more in-line with all our other apis.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999630", "body": "Sure. But I will make you an issue for it ;)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999651", "body": "Doesn't seem completely useless to be in logging. Otherwise the console options codebase?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26633656", "body": "Can we change ignoreMissingFiles to optional? That way I can write config.AddJsonFile(\"file.json\", optional: true)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26633656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26697077", "body": "This adds an extra File.Exists check that we didn't have before on all code paths. Should we check existence here and throw? Right now we let it flow all the way to the load and then you get the IO exception. It should make our stack trace better as well, since at the moment I think it  shows the `new Configuration()` as the line of code with an error instead of the AddJsonFile. If not then perhaps this should be:\n\n```\nif (ignoreMissingFile && !File.Exists(fullPath))\n{\n    return configuration;\n}\nconfiguration.Add(...);\n```\n\nDon't know if we really care too much, or if @davidfowl hates multiple returns or not :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26697077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26775751", "body": "We probably should  throw here if the file doesn't exist. We let it flow to the call to load the file at the moment, which doesn't really cause any issues but the line reported on the diagnostics page would be better if we throw here I think. Since we are now doing an exists check every time anyway we might as well catch it here and show people an error. @davidfowl do you agree?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26775751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27059520", "body": "we should use the named parameter everywhere we use it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27059520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27055082", "body": "I don't like having IConfigurationSourceRoot in the message at all, it isn't a type you need to be familiar with to consume the API and we've deliberately made it possible to ignore it for the most part.\n\nI'd like something more like: $\"Unable to resolve relative path '{path}'. You must provide a full path or provide the {nameof(configuration.basePath)} parameter to your Configuration.\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27055082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kyschouv": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/746", "title": "Make IKeyVaultClient public and provide a way to specify a custom implementation in AzureKeyVaultConfigurationExtensions", "body": "I wanted to build a custom implementation of IKeyVaultClient to load active secret versions, but since it's internal, I'm unable to. My only option is to build my own version of the entire configuration provider just to support secret versions.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/622", "title": "Support TypeConverterAttribute on bound properties", "body": "It's very difficult to add a custom `TypeConverter` for framework types to have them bind correctly within `ConfigurationBinder`. The documentation for `TypeConverterAttribute` specifies that the attribute can be attached to a property, and that property will then use the specified `TypeConverter` during serialization/deserialization. Unfortunately, `ConfigurationBinder` doesn't take the property's attributes into consideration during `BindProperty`, instead passing the binding off to `BindInstance` with just the type of the property.\r\n\r\nPresently, the only way to use custom TypeConverters is to register them using `TypeDescriptor.AddAttributes` before any configuration binding occurs, which is inconvenient if your library requires custom TypeConverters for standard types.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/622/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amoerie": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/745", "title": "Support repeated elements in XML configuration", "body": "### When repeating an element in appsettings.xml, an exception occurs because a duplicate key will be produced\r\n\r\n### Functional impact\r\n*Configuration that is possible from JSON is not always possible from XML, for example configuring Serilog sinks are configured as an array in JSON. Arrays in XML are not supported by the XmlConfigurationProvider.*\r\n\r\n### Minimal repro steps\r\n\r\n1. Create a .NET Core 2.0 application with an appsettings.xml file\r\n2. Fill in the appsettings.xml file like this:\r\n\r\n```xml\r\n          <settings>\r\n            <DefaultConnection>\r\n                <ConnectionString>TestConnectionString1</ConnectionString>\r\n                <Provider>SqlClient1</Provider>\r\n            </DefaultConnection>\r\n            <DefaultConnection>\r\n                <ConnectionString>TestConnectionString2</ConnectionString>\r\n                <Provider>SqlClient2</Provider>\r\n            </DefaultConnection>\r\n          </settings>\r\n```\r\n\r\n3. Load this file with the following snippet in Program.cs or Startup.cs\r\n\r\n```csharp\r\nnew ConfigurationBuilder()\r\n      .SetBasePath(Directory.GetCurrentDirectory())\r\n      .AddXmlFile($\"appsettings.xml\")\r\n      .Build();\r\n```\r\n\r\n4. Startup the application\r\n\r\n\r\n### Expected result\r\n*Unique keys should be produced for each entry in the XML settings*  \r\n\r\nI would expect the following output:\r\n\r\n```\r\n\"DefaultConnection:0:ConnectionString\"=\"TestConnectionString1\"\r\n\"DefaultConnection:0:Provider\"=\"SqlClient1\"\r\n\"DefaultConnection:1:ConnectionString\"=\"TestConnectionString2\"\r\n\"DefaultConnection:1:Provider\"=\"SqlClient2\"\r\n```\r\n\r\n### Actual result\r\n\r\n```\r\nSystem.FormatException occurred\r\n  HResult=0x80131537\r\n  Message=A duplicate key 'DefaultConnection:ConnectionString' was found.\r\n  Source=<Cannot evaluate the exception source>\r\n```\r\n\r\n### Further technical details\r\n\r\nI took the liberty of actually implementing something like this, the full source code is available at https://github.com/amoerie/configuration.xml\r\n\r\nI've added extra unit tests to cover the various scenarios (turns out there's a magical 'Name' attribute with some special rules there) and all tests seem to be green. \r\n\r\nI refrained from immediately creating a pull request, because nobody (besides myself) was asking for this and it is actually a considerable refactoring of the existing code, so it seemed better to start a conversation first. Thank you for your consideration.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/745/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flowdopip": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/744", "title": "Replace setting through Environment Variables", "body": "Hi,\r\n\r\nI don\u00b4t know if this is the right place to post this issue. If not please sorry!\r\n\r\nI have a application in .net core 2.0 and i\u00b4ve created a folder for application settings\r\n/config/servicediscovery.json\r\n\r\nSample\r\n{\r\n\"Discovery\": {\r\n\"Enabled\": true,\r\n\"Url\": \"http://localhost:8500\",\r\n\"ServiceId\": \"service\",\r\n\"ServiceName\": \"service\",\r\n\"ServiceUrl\": \"http://localhost\",\r\n\"ServicePort\": \"53489\",\r\n\"HealthCheck\": \"http://localhost:53489/ping\",\r\n\"HealthCheckInterval\": 5\r\n}\r\n}\r\n\r\nThis file has the default settings to communicate with service discovery application and by default has the values to run in localhost.\r\n\r\nAfter create the image i\u00b4m trying to run the application with docker\r\n\r\ndocker run --rm -it -p 5000:80 --name ServiceName Repository:Service:2.0.17298.133 --env ASPNETCORE_ENVIRONMENT=Production -e Discovery:HealthCheck=\"htttp://www.microsoft.com\"\r\n\r\nbut this doesn\u00b4t apply the environment setting.\r\n\r\nThis is correct? There\u00b4s another way to do this?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Zonciu": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/743", "title": "Mapping environment variables", "body": "Is there any way to map environment variable to custom key? Like command line SwitchMappings.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ig-sinicyn": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/742", "title": "Configuration.AzureKeyVault 2.0.0 incompatible with Microsoft.IdentityModel.Clients.ActiveDiretory 3.17", "body": "Current version of `Configuration.AzureKeyVault` is incompatible with `Microsoft.IdentityModel.Clients.ActiveDirectory 3.17.0` package.\r\n\r\nAttempt to build config fails with\r\n```\r\nSystem.MissingMethodException: Method not found: 'System.Threading.Tasks.Task`1<Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult> \r\nMicrosoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String, Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)'.\r\n   at Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.<GetTokenFromClientSecret>d__2.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.GetTokenFromClientSecret(String authority, String resource, String clientId, String clientSecret)\r\n   at Microsoft.Azure.KeyVault.KeyVaultCredential.<PostAuthenticate>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Azure.KeyVault.KeyVaultCredential.<ProcessHttpRequestAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Azure.KeyVault.KeyVaultClient.<GetSecretsWithHttpMessagesAsync>d__66.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Azure.KeyVault.KeyVaultClientExtensions.<GetSecretsAsync>d__49.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Extensions.Configuration.AzureKeyVault.AzureKeyVaultConfigurationProvider.<LoadAsync>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.Extensions.Configuration.AzureKeyVault.AzureKeyVaultConfigurationProvider.Load()\r\n   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/742/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sschleicher208": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/740", "title": "UserSecrets not working correctly under Live Unit Testing", "body": "I have UserSecrets working correctly on my .NET 2.0 Core Web API. I also have it working correctly for my integration test suite against this same web API using the test server based on the function below (all tests pass). The problem occurs when I use the new live testing feature. I am already using the new extension method that was previously documented to handle this type of bug, so I'm not sure what else to change. If I move the settings back to the regular appsetting.json and remove the AddUserSecrets call, live testing works as expected (but obviously I don't want to do that).\r\n```\r\npublic static TestServer CreateServer()\r\n{\r\n     var server = new TestServer(new WebHostBuilder()\r\n     .ConfigureAppConfiguration(config => config.AddUserSecrets<Startup>())\r\n     .ConfigureServices((context, services) => services.AddOptions()\r\n     .Configure<AppSettings>(context.Configuration.GetSection(\"AppSettings\")))\r\n     .UseStartup<Startup>());\r\n     return server;\r\n}\r\n```\r\nMessage: System.InvalidOperationException : Could not find 'UserSecretsIdAttribute' on assembly 'RouteManager.Core.Server'.\r\nCheck that the project for 'RouteManager.Core.Server' has set the 'UserSecretsId' build property.\r\nIf the 'UserSecretsId' property is already set then add a reference to the Microsoft.Extensions.Configuration.UserSecrets package.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johnkors": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/739", "title": "dotnet publish includes a bunch of Framework assemblies", "body": "Probably missing something from @terrajobst netstandard/netcore videos here :/\r\n\r\nI've a console app targeting `net461`, referencing `Microsoft.Extensions.Configuration.Json` v.2.0.0: \r\n\r\n```\r\n<PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.0\" />\r\n```\r\n\r\n`Microsoft.Extensions.Configuration.Json` version 2.0.0 is a `netstandard2.0` class library. What I don't get is why I get a full list of system.* assemblies (looks like allof NETStandard.Library of some version) for this setup. I thought these were supposed to be type forwarded to it's full framework equivalents, since we'd probably run on the full framework versions of these..?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grahamehorner": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/738", "title": "ConfigurationBuilder support for byte array/stream", "body": "Please consider supporting/adding loading configuration from a byte array/stream; for example ServiceFabric service context is passed InitializationData as a byte array loading this data into using the ConfigurationBuilder \r\n\r\nConfigurationBuilder builder = new ConfigurationBuilder();\r\nbuilder.AddJsonFile([stream/bytearray]); ", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/643", "title": "Continers & Environment Variables", "body": "I'm looking for a way to access environment variables very early in the application main entry point; so I may detect a value which informs the code about the environment configuration of the container (in this case a docker container) the application will then use this to load/reference the configuration json file setup kestrel accordingly; my question is how can I obtain environment variables & load configuration inside of the program main ?  and are there any examples? ", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simonporter": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/737", "title": "AzureKeyVaultConfigurationProvider deadlocks in Load()", "body": "AzureKeyVaultConfigurationProvider Load uses ConfigureAwait on the LoadAsync call but not on the subsequent async calls.\r\nhttps://github.com/aspnet/Configuration/blob/dev/src/Config.AzureKeyVault/AzureKeyVaultConfigurationProvider.cs#L41\r\nThis would happen in any win forms app, WCF or xunit test.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajcvickers": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/736", "title": "nvalidOperationException: Unable to resolve service for type 'Microsoft.Extensions.Configuration.IConfigurationRoot' while attempting to activate My Clas", "body": "Moved from https://github.com/aspnet/EntityFrameworkCore/issues/9938 by @tanmaymandal\r\n\r\nI am making a .net core webapi project where i have a config file appsettings.json. it's very normal \r\n```json\r\n{\r\n  \"Logging\": {\r\n    \"IncludeScopes\": false,\r\n    \"Debug\": {\r\n      \"LogLevel\": {\r\n        \"Default\": \"Warning\"\r\n      }\r\n    },\r\n    \"ConnectionStrings\": {\r\n      \"DefaultConnection\": \"Server=.;Database=;UID=;PWD=;\"\r\n    },\r\n    \"My\": {\r\n      \"Infrastructure\": {\r\n        \"CacheInterval\": 0,\r\n        \"ConnectionString\": \"Server=;Database=;UID=;PWD=;\",\r\n\r\n        \"EmailAddressFrom\": \"support@dzt.com\",\r\n        \"EmailAddressFromName\": \"DZT Support\",\r\n        \"SMTPHost\": \"smtp.sendgrid.net\",\r\n        \"SMTPPort\": 465,\r\n        \"SMTPUseSSL\": true,\r\n        \"SMTPUser\": \"apikey\",\r\n        \"SMTPPassword\": \"\"\r\n\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nIn start up i have mapped\r\n```C#\r\nservices.AddSingleton<My.Infrastructure.IConfiguration, My.Configuration.InfrastructureConfiguration>();\r\n```\r\nI have put where my interface is implemented , so it should take the configuration and parse accordingly\r\n\r\nHere is my configuration class\r\n```C#\r\npublic class InfrastructureConfiguration : **ConfigurationBase**, My.Infrastructure.IConfiguration\r\n    {\r\n        protected readonly IConfigurationSection _configurationSection;\r\n\r\n        protected override IConfigurationSection ConfigurationSection\r\n        {\r\n            get {  return _configurationSection; }\r\n        }\r\n\r\n        public InfrastructureConfiguration(IConfigurationRoot configurationRoot)\r\n        {\r\n            try\r\n            {\r\n                // _configurationSection = configurationRoot?\r\n                //.GetSection(\"My\")?\r\n                //    .GetSection(\"Infrastructure\");\r\n                _configurationSection =  new ConfigurationBuilder().AddJsonFile(\"appsettings.json\", optional: true).Build().GetSection(\"My\").GetSection(\"Infrastructure\");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n\r\n            }\r\n        }\r\n\r\n        public int CacheInterval { get { return Get<int>(); } }\r\n        public string ConnectionString { get { return Get(); } }\r\n\r\n        public string EmailAddressFrom { get { return Get(); } }\r\n        public string EmailAddressFromName { get { return Get(); } }\r\n        public string SMTPHost { get { return Get(); } }\r\n        public int SMTPPort { get { return Get<int>(); } }\r\n        public bool SMTPUseSSL { get { return Get<bool>(); } }\r\n        public  string SMTPUser { get { return Get(); } }\r\n        public string SMTPPassword { get { return Get(); } }\r\n    }\r\n```\r\n .**ConfigurationBase** has implementation of get() etc methods \r\nNow problem is when i am running it's showing me error \r\nAn unhandled exception occurred while processing the request.\r\n\r\n> InvalidOperationException: Unable to resolve service for type  Microsoft.Extensions.Configuration.IConfigurationRoot' while attempting to activate 'MY.Configuration.InfrastructureConfiguration'.\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type serviceType, Type implementationType, ISet<Type> callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound)\r\n\r\n`\r\n> InvalidOperationException: Unable to resolve service for type 'Microsoft.Extensions.Configuration.IConfigurationRoot' while attempting to activate 'DZT.Configuration.InfrastructureConfiguration'.\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type serviceType, Type implementationType, ISet<Type> callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(Type serviceType, Type implementationType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(ServiceDescriptor descriptor, Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type serviceType, Type implementationType, ISet<Type> callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(Type serviceType, Type implementationType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(ServiceDescriptor descriptor, Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type serviceType, Type implementationType, ISet<Type> callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(Type serviceType, Type implementationType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(ServiceDescriptor descriptor, Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type serviceType, ISet<Type> callSiteChain)\r\nMicrosoft.Extensions.DependencyInjection.ServiceProvider.CreateServiceAccessor(Type serviceType, ServiceProvider serviceProvider)\r\nSystem.Collections.Concurrent.ConcurrentDictionaryExtensions.GetOrAdd<TKey, TValue, TArg>(ConcurrentDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TArg, TValue> valueFactory, TArg arg)\r\nMicrosoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\nMicrosoft.Extensions.Internal.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, bool isDefaultParameterRequired)\r\nlambda_method(Closure , IServiceProvider , Object[] )\r\nMicrosoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider+<>c__DisplayClass4_0.<CreateActivator>b__0(ControllerContext controllerContext)\r\nMicrosoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider+<>c__DisplayClass5_0.<CreateControllerFactory>g__CreateController0(ControllerContext controllerContext)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeInnerFilterAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n\r\n### Further technical details\r\nProject file  may help to know what is referred \r\n```xml\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nDatabase Provider: SQL server\r\nOperating system: \r\nIDE: (e.g. Visual Studio 2017)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41817370", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41817370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/46507485", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/46507485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/46592127", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/46592127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "andreyshade": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/734", "title": "Problem with GetSection().AsEnumerable(). It returns additional element.", "body": "I have some records in config like this:\r\n`\"Option\": [ \"A\", \"B\"],`\r\nThen if i try to get value:\r\n`_configuration.GetSection(\"Option\").AsEnumerable()`\r\nI receive collection with 3 items, and collection starts with `null` value element", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "astef": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/733", "title": "Add wrapping configuration source", "body": "The problem described in this question: https://stackoverflow.com/questions/46466300/how-to-place-a-configuration-source-to-a-certain-configuration-section-to-avoid\r\n\r\nI think it would be handy to solve such problems with the following extension method:\r\n\r\n```\r\nvar cfg = new ConfigurationBuilder()\r\n\t.AddConfiguration(\"Users\", derivedConfigurationBuilder =>\r\n\t{\r\n\t\tderivedConfigurationBuilder.AddJsonFile(\"users.json\");\r\n\t})\r\n\t.AddJsonFile(\"connections.json\")\r\n\t.Build();\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vanillajonathan": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/731", "title": "ConfigurationBinder: Support the [Required] attribute", "body": "The `ConfigurationBinder` should look for the `RequiredAttribute` on all the properties it aims to bind.\r\n\r\nExample:\r\n```cs\r\n    services.Configure<MyOptions>(Configuration);\r\n```\r\nWhere\r\n```cs\r\n    public class MyOptions\r\n    {\r\n        [Required]\r\n        public string Foo { get; set; }\r\n    }\r\n```\r\n\r\nThen if nothing in the configuration can be found that can be bound to `Foo` then it should throw some kind of exception.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/731/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jackbond": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/730", "title": "Microsoft.Extensions.Configuration v2 is incompatible with System.Net.Http", "body": "I have a solution with several projects which use the System.Net.Http Nuget package. I have a test project which uses Microsoft.Extensions.Configuration and Microsoft.Extensions.Configuration.Json Nugets. When I upgrade to v2 of these Nugets (from v1.1.2), when I perform a build, an older version of System.Net.Http.Dll gets copied to the output directory and causes runtime errors. I'd like to switch over to the newer Configuration libraries, but as it stands, I cannot until this incapability is resolved.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "serbrech": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/721", "title": "AddEnvironmentVariables : Expose the Environment Target parameter through the configuration source", "body": "Currently on windows, only process variables can be loaded (default target)\r\nConsider exposing EnvironmentVariableTarget parameter.\r\n\r\n[netcore-2.0 doc](https://docs.microsoft.com/en-us/dotnet/api/system.environment.getenvironmentvariables?view=netcore-2.0) \r\n\r\npseudo code : \r\n```\r\nconfigurationBuilder.AddEnvironmentVariables(config => {\r\n    config.Prefix = \"my-prefix:\";\r\n    config.Target = \"User\";\r\n});\r\n```\r\n\r\nor even :\r\n```\r\nconfigurationBuilder.AddEnvironmentVariables(config => {\r\n    config.Prefix = \"my-prefix:\";\r\n    config.Target = EnvironmentVariableTarget.User;\r\n});\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anurse": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/705", "title": "Docker Secrets config provider should support prefixes", "body": "To make the Docker Secrets config provider more flexible, we should allow the user to specify a prefix to be removed when converting Docker Secret names to Config keys.\r\n\r\nThis makes it easier to use secrets for multiple services, for example, you may have a secret named `backend.foo` which you want to appear as `foo` in the config system. This remapping can be achieved with docker configuration, but it's good to allow flexibility here.\r\n\r\nAlso, when rolling secrets in Docker Swarm, you may want to have a prefix representing the \"version\" of the secrets, which is updated by an Environment Variable. That allows two secrets with the same \"name\" to be present during a rolling upgrade, but ensure that the correct one is loaded in to the app. For example, you may have `v1.foo` and `v2.foo` secrets and a `SECRET_PREFIX=v1` environment variable (which you update to `SECRET_PREFIX=v2`, when adding `v2.*` secrets)\r\n\r\nProposed new APIs:\r\n\r\n```csharp\r\npublic class DockerSecretsConfigurationSource\r\n{\r\n    // ...\r\n    // add the following:\r\n    public string SecretPrefix { get; set; }\r\n}\r\n\r\npublic static class DockerSecretsConfigurationBuilderExtensions\r\n{\r\n    // ...\r\n    // add the following overloads\r\n    public static IConfigurationBuilder AddDockerSecrets(this IConfigurationBuilder builder, string secretsPath, bool optional, string secretPrefix);\r\n}\r\n```\r\n\r\nNote: I'd kinda like to be able to have `AddDockerSecrets(string secretPrefix)`, but we already have `AddDockerSecrets(string secretsPath)`. The latter seems much less commonly used, but it's there in 2.0 so it'd be a breaking change :(\r\n\r\n/cc @glennc ", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/67043831", "body": "That'd be OK with me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/67043831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85238444", "body": "Looks good to me, others should probably give you the ship-it squirrel as I'm not 100% up on it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85238444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26988650", "body": "We generally use \"TitleCase\" for constants.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26988650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26988840", "body": "On Mac and Linux \"Microsoft/UserSecrets\" should probably be \".microsoft/usersecrets\". Generally, folders in `HOME` that are for specific applications/frameworks/etc. are in folder names prefixed with `.` to keep the non-`.` folders for users. Also, *nix file systems generally have lowercase file paths.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26988840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26989089", "body": "Ah, you already commented something basically the same :). If possible, it should be \"Microsoft\" and \"UserSecrets\" on Windows and \".microsoft\" and \"usersecrets\" on Mac/Linux, to fit in with other things on those platforms.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26989089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jdkelley": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/701", "title": "DockerSecretsConfigurationProvider adds docker secrets with appended newline to Configuration", "body": "### Title\r\nDockerSecretsConfigurationProvider adds docker secrets with appended newline to Configuration\r\n\r\n### Functional impact\r\n\r\nThe secret added to the Configuration is not the intended secret. \r\n\r\n### Minimal repro steps \r\n\r\n1. Create a linux-based docker swarm (Make a single node swarm with `docker swarm init`)\r\n2. Create a secret on the swarm with \r\n\r\n```sh\r\necho \"secret contents\" | docker secret create test-secret -\r\n```\r\n\r\n3. Create a basic dotnetcore application that pulls docker secrets into a config with something like:\r\n\r\n```cs\r\n     var config = new ConfigurationBuilder()\r\n                .AddDockerSecrets()\r\n                .Build();\r\n```\r\n\r\nA basic api that returns the secret from the config would be easy.\r\n\r\n4. Access the secret stored in the config with \r\n\r\n```cs\r\nvar secret = config[\"test-secret\"];\r\n```\r\n\r\n5. Create a service on your swarm running this dotnetcore app that uses the created secret\r\n\r\nService Creation:\r\n\r\n```sh\r\ndocker service create --name example -p 5000:5000 --secret test-secret config-example-image\r\n```\r\n\r\n6. Access the secret contents via the example application. \r\n\r\n### Expected result\r\nYou would expect the contents of the secret to be exactly what was echoed into the secret in step 2 (\"secret contents\") \r\n\r\n### Actual result\r\nThe intended contents are returned with a Newline appended. In this example, \"secret contents\\n\"\r\n\r\n\r\nI will be submitting a pull request shortly.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/702", "title": "Trim unintended Environment.NewLine from docker secret contents before adding to Configuration", "body": "Docker secrets created on a Linux swarm using `echo \"secret contents\" | docker secret create test-secret -` will append a newline on the end of the secret contents. In a dotnetcore app running in a dockerized service with this secret exposed to the service, the `DockerSecretsConfigurationProvider` reads the secret with the newline character into the Configuration (resulting in something like \"secret contents\\n\"). This is clearly not the intended secret contents.\r\n\r\nAddresses Issue #701", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nehmebilal": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/700", "title": "Adding configuration resolver Api for better integration with KeyVault and other use cases", "body": "Hi guys,\r\n\r\nI recently started using the Azure KeyVault extension and I find it difficult to use. The fact that the key in the KeyVault must match the configuration key is difficult to manage and error prone. \r\n\r\nIn the example below, to override the connectionString with a secret, I need to add the key `EventFlow--outputs--0--connectionString` to my KeyVault. If I later on I add another entry to my array, let's say at position 0 (by mistake), the secret will not map to the correct value and my secret will be ignored.\r\n\r\n```json\r\n{\r\n  \"EventFlow\": {\r\n    \"inputs\": [\r\n      {\r\n        \"type\": \"EventSource\",\r\n        \"sources\": [\r\n          {\r\n            \"providerName\": \"MyEvents\",\r\n            \"level\": \"Informational\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"Trace\",\r\n        \"traceLevel\": \"Informational\"\r\n      }\r\n    ],\r\n    \"outputs\": [\r\n      {\r\n        \"type\": \"EventHub\",\r\n        \"eventHubName\": \"MyEventHub\",\r\n        \"connectionString\": \"MY_CONNECTION_STRING\"\r\n      }\r\n    ],\r\n}\r\n``` \r\n\r\nOne option to make this simpler is to provide a configuration resolver Api which allow one to resolve values dynamically (instead of overriding keys) and use it to integrate with KeyVault (more info below). The configuration would look as follows (notice that the KeyVault key is marked with `$KeyVault(myKeyVaultKey)` ):\r\n\r\n```json\r\n{\r\n  \"EventFlow\": {\r\n    \"inputs\": [\r\n      {\r\n        \"type\": \"EventSource\",\r\n        \"sources\": [\r\n          {\r\n            \"providerName\": \"MyEvents\",\r\n            \"level\": \"Informational\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"Trace\",\r\n        \"traceLevel\": \"Informational\"\r\n      }\r\n    ],\r\n    \"outputs\": [\r\n      {\r\n        \"type\": \"EventHub\",\r\n        \"eventHubName\": \"MyEventHub\",\r\n        \"connectionString\": \"$KeyVault(MyEventHubConnectionString)\"\r\n      }\r\n    ],\r\n}\r\n``` \r\nIn this case, the key of my secret in KeyVault would be `MyEventHubConnectionString` and I can move it anywhere I want in my configuration without having to update my KeyVault key (much better user experience).\r\n\r\nTake a look at [my fork](https://github.com/nehmebilal/Configuration/commit/16d92ec16c1aa0271a8bf6ad2ecdda5cd96717d9) for a work in progress of the configuration resolver Api (we currently have an internal implementation that we are using for KeyVault in my team).\r\n\r\nNote that this Api also opens the door for other interesting configuration resolution, like relative configuration as shown below (which would be simple to implement and can help reducing duplication in configuration):\r\n\r\n```json\r\n{\r\n   \"key1\": \"value1\",\r\n   \"key2\":\r\n   {\r\n       \"key3\": \"&(key1)\"\r\n   }\r\n}\r\n```\r\n\r\nPlease let me know if that's something you'd be interested in integrating and I'll finish the work and submit a PR.\r\n\r\nThanks,\r\nNehme", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Pavel-Sulimau": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/698", "title": "Azure Web App: Connection string with 'PostgreSQL' type is not supplied to the app", "body": "I spend some time struggling to make PostgreSQL connection string supplied to my ASP.NET Core 1.1 app configuration and came to the conclusion that this is not implemented.\r\n\r\nThis is the way I obtain the connection string in Startup.cs:\r\n![startup cs](https://user-images.githubusercontent.com/8143332/28712957-d6743088-7395-11e7-878f-e91e43df7bc7.png)\r\n\r\nThis approach works (note 'Custom' connection string type):\r\n![connectionstrings_custom](https://user-images.githubusercontent.com/8143332/28713013-0e31ee34-7396-11e7-8189-5a0bcf767737.png)\r\n\r\nBut this doesn't work (note 'PostgreSQL' connection string type):\r\n![connectionstrings_postgresql](https://user-images.githubusercontent.com/8143332/28713031-2316f68c-7396-11e7-9d9b-82f51c52bcbd.png)\r\n\r\nThe source code for EnvironmentVariablesConfigurationProvider doesn't seem to support PostgreSQL:\r\n![environmentvariablesconfigurationprovider](https://user-images.githubusercontent.com/8143332/28713130-85bb75f6-7396-11e7-9162-8909bcc201c9.png)\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danroth27": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/695", "title": "Update Azure Key Vault config provider to support MSI", "body": "MSI should allow us to use the ambient identity of the Azure App Service to acquire a token for talking to key vault using the ASAL library.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75190921", "body": "I've had customers asking me about encrypted config support, so I think we should have a story here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75190921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "bgever": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/689", "title": "More descriptive error for duplicate key in AzureKeyVaultConfigurationProvider", "body": "We encountered a situation where our Azure KeyVault had duplicate keys defined, what is a valid situation in KeyVault.\r\n\r\nHowever, the [following line in `AzureKeyVaultConfigurationProvider`](https://github.com/aspnet/Configuration/blob/dev/src/Microsoft.Extensions.Configuration.AzureKeyVault/AzureKeyVaultConfigurationProvider.cs#L59) causes a very generic exception that the dictionary cannot hold duplicate keys.\r\n\r\nIt would be nice if the code could have a more descriptive error message like:\r\n\r\n```C#\r\nSecret value = await _client.GetSecretAsync(secretItem.Id);\r\nstring key = _manager.GetKey(value);\r\nif (data.ContainsKey(key))\r\n{\r\n    throw new InvalidOperationException(\r\n        $\"Key '{key}' of secret with ID {secretItem.Id} already defined. Cannot add duplicates.\");\r\n}\r\ndata.Add(key, value.Value);\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wind-rider": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/681", "title": "UserSecrets reloadOnChange", "body": "With `AddJsonFile(...)`, the `reloadOnChange` option is very convenient. Can this be made available for `AddUserSecrets<T>()` as well?\r\n\r\nI see that it can be added in `UserSecretsConfigurationExtensions.cs`, but is there a reason for leaving it out from there?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HaoK": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/662", "title": "Refactor things so data format of the provider is not tied to File based providers", "body": "For example, JSON/XML format with streams.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/b5e0142e8b04c46d531b4cce204d14c11af7fc18", "message": "Fix breaking change"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/875a72d74a8e45c48470baeacfa2af01857d6566", "message": "AddConfiguration(IConfiguration) to chain (#719)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/fdf7f51bde0bff4d449dff7493ce259b864ece2b", "message": "Move baselines to right place"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/0e8caf974159d871e4948d4efcf6a0462873ac50", "message": "Add baselines for AzureKeyValue/UserSecrets (#711)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6b4f1f863475ec74ef06c64352b58d600807a832", "message": "Sources => IList"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/427aecc6f8049f9248b5f72a6ae70814cfd5f53b", "message": "Expose IConfigurationProviders from root"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6e410fd8a92cde0bd4647011d90049de8d4c176f", "message": "Add ConfigureAwait (#676)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b25033fbd37f5c6da87304b031dafcf149736aa1", "message": "Reenable api check, no updates to baselines"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/59da9697876e0c099d5227c750b3c2816eb6bc94", "message": "Revert doc comments changes"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/387a77fac3f30a6604b75be3bf0551a1a2499c98", "message": "Merge branch 'rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7034ec2a4a93d1fd28f5b64c3b70df5a713f0713", "message": "Disable api check"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c58bda28fd746b31c8a0e3f8dfa75666e6459968", "message": "Merge branch 'rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/5f6ca395ab89cb76278f26cccdafb203fb0b7dbf", "message": "Add new Bind overload"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/dd0036b9b53ceeb696d50cac5d815ca03380c796", "message": "Bump timeout on test"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/71c44e627f0d82d1f46da5055658e14898ee62b9", "message": "Revert \"Disable test\"\n\nThis reverts commit 6f008395dd50c9accec2dfb39fda71120e30e5e5."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/2519ffc7fc1071befeae021551c6203126e117d3", "message": "Add docker secrets config provider"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/ad90b4b35d72007e255cc5eb91093b14db7ab92e", "message": "Decrease timeout for test"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7bd31ce38d53a7784cf6264c7d19db6ccb15f4a2", "message": "Merge remote-tracking branch 'gry/hotfix/broken-build-config-tests' into haok/12-5fix"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/abffd2e77856005d921e0dc4015e365824fdce16", "message": "Smarter binding of Value/Children"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1fc1fbad157df4cc22ff9c60c2fc1471fa0ea190", "message": "Improve reliability of reloadOnChange tests"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d73b261ccef6235ee1ecc3d812dc9532f1947cb5", "message": "Restore old Bind behavior"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/801786623b77bf7de15793bf86325117655037c9", "message": "Tweak Bind to avoid Value if not convertable"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/fd32636d253db2072d995a70e8e02c0dbb2b6a0d", "message": "Cleanup"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/4b92f0b2e01c66d9287fe94048e766f6c774c8f5", "message": "Return of Get<T> (RIP Bind<T>)\n\nBind<T> => Get<T>++"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/90711ced9c77462c2e91b1e5048194754a498c0c", "message": "Increase delay in flaky test"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/4686665ad186c2bd1d9bba8006adaaeeb41ee286", "message": "Add Bind<T> overload that creates T"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/38f770870cf1f7af062c02c7756263380e060d20", "message": "Explicitly allow binding to object (as string)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/36ec5b0f8d07f04e81650041ffb2b740bd1fd29c", "message": "Add FileLoadException event, improve reloadOnChange"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/cb271d3524e6a5ca5cb586642603c03b2b082dcc", "message": "Allow empty strings to convert to nullable"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/ccd817d706d1cb43b68864c1d5590070e1c734f0", "message": "Update to use List instead of array"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/49b4986f3dd0e71b905ec36873ee91cd3adac3fa", "message": "Support binding to uninitialized ICollection interfaces"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/74c68cd6f8c4d937dc1c0a2c1996dbb1a5f14263", "message": "Handle short file json parse errors"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/0c30cd1668a0d7d19c7f79ecccf415f8b49bafa0", "message": "Skip flaky new file watch test on Linux for now"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c202d3148130cacadb6133425e14ac134bf9cb68", "message": "Add overload for AsEnumerable to makePathsRelative"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/5c7af45dfbff5ec41501a9b64d444254e24ecb28", "message": "Increase delays for linux CI test flakiness"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/dc569023de8db0234b39ec40f4e930f56958944c", "message": "Dispose command line args enumerator"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/3ea670863e44a8047b31f2552b4c4f9a6a2c236b", "message": "Fix reloadOnChanged for missing directory"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/02c20485370b14b4f9a3eeec3757c9dc9225801d", "message": "Show absolute path for PhysicalFileProvider missing files"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/e1b7960f22b7c508645fedb8a50f0e873d7407d5", "message": "Update doc comments"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c948517e03bbbcd0f1bbdf32ff666a56eab9773a", "message": "Update test to use random filename"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9ab8e511ff119f306847cbfdbedf3661e6320e4b", "message": "Disable new flaky test"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/eae76e386ec92771361c8787cb9ce21fcb545a00", "message": "Fix reloadOnChange for delete"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/009a062fc6dd2a49ccef376d1c0e3ca47e252577", "message": "Bring back absolute path support\n\nAlso add IFileProvider overload in place of delegate"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9a8825a6399be31c16e78c2313136ae0c26c09e0", "message": "Remove duplicate Load"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c634cacf4e5c68698252f3a19849e5fcf4fe4153", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7e98d3c1dcb107a7c46cee5019f888268da109b5", "message": "API tweaks\n\n- Remove old ReloadOnChange extensions\n- Add overloads with reloadOnChange"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/5d6b9e547d27cd6d44dabec91059b1f029f50c17", "message": "Revert \"Adding back GetBasePath for UserSecrets for now\"\n\nThis reverts commit d7da902a0aeca14c6b7ee7e6796214ce5bc7985b."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d7da902a0aeca14c6b7ee7e6796214ce5bc7985b", "message": "Adding back GetBasePath for UserSecrets for now"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/dc10cf2a48f1e0137542b18cc834aa973a6bdb5f", "message": "Remove old FileProviders project from verifier"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/ab91e439db3f16120623654ff596784b0503bc2b", "message": "Fix warning"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/30e59f1190e01a9ae0c2fae4022af5ba3ca2eafd", "message": "IConfigurationBuilder/Source API changes"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9230cdb59ad38b74435bc39c0c8699d6a07c5e39", "message": "Azure/Connection string changes"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b958a68eb96dc38e4606c214b2e23952f60af9ff", "message": "Add new AsEnumerable"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/aa72ee5b32f3c90543ed41df5026ca6b5b2b5300", "message": "Remove Azure Data prefix for env config provider"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/70b9b0325be999e80bc97dfda095b73e0e17c790", "message": "Move KeyDelimiter => ConfigurationPath abstraction"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44449515", "body": "Merged 7e727e25f192b0877d6bce00c3138889aa93987b\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44449515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479171", "body": "https://github.com/aspnet/Options/issues/1\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479207", "body": "https://github.com/aspnet/Options/issues/1\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479278", "body": "https://github.com/aspnet/Options/issues/2\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479305", "body": "No\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479351", "body": "https://github.com/aspnet/Options/issues/3\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44479351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/18768650", "body": "Doh, yeah I'll fix thanks :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/18768650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12959602", "body": "Pretty much it only works with IConvertable types, the type has to match already, but I can remove this constraint to get rid of the if:\n\nhttp://stackoverflow.com/questions/3847997/why-does-convert-changetype-take-an-object-parameter\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12959602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12976722", "body": "Went with OptionsServiceCollectionExtensions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12976722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12976976", "body": "@loudej strongly wanted the thread safety/locking, I'd favor something simpler like just Lazy<T> myself\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12976976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12977263", "body": "Right now it lets you set even if its private/protected/internal.  Seems like we should restrict this to public setters\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12977263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12977757", "body": "Added test and switched it to allow binding to base properties as well\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12977757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021005", "body": "Filed issue https://github.com/aspnet/Configuration/issues/77 to track this, as its not a super trivial change it looks like\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021145", "body": "Nope, I deleted everything except the property, good catch\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022151", "body": "Yeah I can file an issue for this, but to summarize where the initial thoughts are.\n1. I prefer public constants that define the various default option orders we use (i.e. Framework = -1000, Default = 0)\n2. @loudej prefers not to promote the importance of the defaults, and does not want to expose these values publicly\n3. @divega favors a public enum representing more logical events like FrameworkOrder, DefaultOrder\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022221", "body": "Filed: https://github.com/aspnet/Configuration/issues/78\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022577", "body": "I imagine the 80% case will be only one options setup (probably config only), so the order won't actually matter most of the time.  \n\nThe other fairly common scenario will be adding a setup that runs either before or after config, which right now requires them to know Config runs at the -1000 order, which I agree is a bit hard to discover.  We could provide something in each framework which took a flag that could hide the OptionsOrder.Configuration +1/-1 bit.\n\n```\nservices.AddIdentity().SetupOptions(overrideConfig: true, (options => options.PasswordLength = 10)\n\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13086855", "body": "Yeah the default would be true, since the default for config would be -1000, and non config would be 0.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13086855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13102178", "body": "The lifetime of the OptionsAccessor is singleton by default if you use OptionsServices.DefaultServices, and the accessor caches the TOptions in a field, so it should only get computed the first time .Options is called and then return the same options instance after that.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13102178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13104462", "body": "I'm not quite sure I understand scenario exactly, but I believe you can always override the default service if you want to change the behavior.  So if EF needed something different, it could register IOptionsAccessor<EFOptions>, EFOptionsAccessor and do something else entirely if desired.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13104462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13105600", "body": "So the scenario would be that frameworks could just call accessor.GetOptions<Options>().Options.ConnectionString and it might return different values based on some state inside of HTTPContext (but it would be constant at least for the request, or would setting httpContext.Tenant = \"foo\" affect the options?).  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13105600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13106051", "body": "Renamed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13106051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13106359", "body": "Also going back to @loudej 's comment about Options being more like a model: \"used by everyone simultaneously\", instead of the options itself returning different values.  Could the options instead just contain the logical ConnectionStringName, and something else which is a MultiTennant aware resolve the actual value: ConnectionStringResolver.Resolve(Options.ConnectionString)?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13106359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13107281", "body": "Yeah lets start with something simple(-ish), and if a clear pattern develops for the more dynamic scenario, then we can push that back down into the default implementation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13107281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13107961", "body": "Added a double check\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13107961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tverboon": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/661", "title": "(Docker) Environment Variable File", "body": "In our project we had project.json, project.development.json and user secrets and in Docker we use an environment file we point to in docker-compose.yml.\r\n\r\nBecause of some business choices we needed to move more variables to the configuration. It became quite unmanageable across multiple projects, so we centralised appsettings.json. Still we needed to make sure that we had defined all variables in an environment file for Docker.\r\n\r\nTo make this even easer I created a custom DockerEnvFileConfigurationSource and DockerEnvFileConfigurationProvider with extension methods for IConfigurationBuilder. Now we only use the Environment Var format files. When we run our software in Docker or just with dotnet run, we can use (almost) the same configuration files. We also have a secrets.env that we don't commit.\r\n\r\nDo you think this could be valuable for everybody? I can try to create a PR if you think so. It's very little code, but it is an extra assembly of course that needs to be build, shipped and maintained. Also I don't know what the best name for the format is. I called it DockerEnvFile, although the format is not specific for Docker.\r\n\r\nThanks for the great API's, because it was really easy to implement. Please let me know if you think this could be a valuable API for all and if you want me to create a PR.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brockallen": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/612", "title": "Consider overload of Get<T> that accepts child section name", "body": "It'd be nice to have a `Get<T>(string section)` that looks like this:\r\n\r\n```\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public static class ConfigurationExtensions\r\n    {\r\n        public static T Get<T>(this IConfiguration section, string key)\r\n        {\r\n            return section.GetSection(key).Get<T>();\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/612/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/611", "title": "Binding to non-null IEnumerable doesn't work", "body": "When using the binding feature in the config system, for IEnumerable collections that have a default, non-null value, the collection is never assigned into the target model. For example:\r\n\r\nFor this json:\r\n```\r\n{\r\n  \"config\": {\r\n    \"data\": [ \"a\", \"b\" ]\r\n  }\r\n}\r\n```\r\n\r\nand this application code:\r\n\r\n```\r\n public class Config\r\n    {\r\n        IEnumerable<string> _data = new List<string>();\r\n        public IEnumerable<string> Data\r\n        {\r\n            get\r\n            {\r\n                return _data;\r\n            }\r\n            set\r\n            {\r\n                _data = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var config = new ConfigurationBuilder()\r\n                .SetBasePath(Directory.GetCurrentDirectory())\r\n                .AddJsonFile(\"test.json\")\r\n                .Build();\r\n\r\n            var val = config.GetSection(\"config\").Get<Config>();\r\n            Console.WriteLine(val?.Data?.Count());\r\n        }\r\n    }\r\n```\r\n\r\nThe output is:\r\n\r\n```\r\n0\r\nPress any key to continue . . .\r\n```\r\n\r\nI'd expect it to print \"2\".\r\n\r\nI'd argue the issue is in `BindInstance` and explicit handling for `IEnumerable` should be made (much like the check for `IsArray` https://github.com/aspnet/Configuration/blob/dev/src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs#L281).", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "passuied": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/604", "title": "Configuration binder performance", "body": "It seems that the current implementation of the ConfigurationBinder is relying heavily on reflection which would have significant performance impact when binding a type multiple times over. \r\n\r\nI know the current options pattern leveraging this binding is using Singletons and only rebinds on reload but in our application we are tweaking the options behavior so it can be resolved per lifetime scope instead which would cause all our options classes to be rebound for every request. \r\n\r\nWould leveraging expression trees help in this case to limit the reflection on a given options type?\r\n\r\nThoughts?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "divega": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/586", "title": "Make Exists() behavior consistent for nulled values", "body": "Currently in our configuration provider implementation if the value of a configuration key is set to null, the value of the dictionary entry is set to null, but the key still remains in the dictionary, so checking for existence on the parent keys will return wrong (positive) results.\r\n\r\nI think we can fix this by simply changing the behavior of the setter to remove the key from the dictionary. \r\n\r\nThis should unblock #314. From [one of my comments](https://github.com/aspnet/Configuration/issues/314#issuecomment-262118384) there:\r\n\r\nThe following test attempts to demonstrate why it is desirable that setting a key to null removes it from the tree reachable through `GetChildren()` and `AsEnumerable()`. \r\n\r\nFor brevity I used the `Exists()` extension method which was contribute by @andrewlock in https://github.com/aspnet/Configuration/pull/521 and got merged today. IMO the behavior of this method is completely consistent with the semantics of `IConfiguration`: a section exists only if it has a value or if it has children sections.\r\n\r\n``` C#\r\n[Fact]\r\npublic void ConfigurationRemoveTest()\r\n{\r\n    var config = new ConfigurationBuilder()\r\n        .AddInMemoryCollection()\r\n        .Build();\r\n\r\n    var section = config.GetSection(\"a:b:c\"); // represents an arbitrary child key in the key-space\r\n\r\n    Assert.Null(section.Value); // does not have a value\r\n\r\n    Assert.False(section.Exists()); // hence it doesn't exists yet\r\n\r\n    Assert.Equal(config.AsEnumerable().Count(), 0); // in fact the configuration is still empty\r\n\r\n    section.Value = \"x\"; // same as config[\"a:b:c\"] = \"x\";\r\n\r\n    Assert.True(config.GetSection(\"a\").Exists()); // the grand parent exists because it has a grand child\r\n    Assert.True(config.GetSection(\"a:b\").Exists()); // the parent exists because it has a child\r\n    Assert.True(config.GetSection(\"a:b:c\").Exists()); // and the child exists because it has a value\r\n\r\n    // Unfortunately things start getting inconsistent if you try to set the value to null\r\n\r\n    config[\"a:b:c\"] = null;\r\n\r\n    Assert.True(config.GetSection(\"a\").Exists()); // the grand parent exists because it has a grand child\r\n    Assert.True(config.GetSection(\"a:b\").Exists()); // the parent exists because it has a child\r\n    Assert.False(config.GetSection(\"a:b:c\").Exists()); // but the child doesn't actually exist!!!\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/559", "title": "Create a suite of specification tests for Configuration", "body": "`Microsoft.Extensions.Configuration`'s provider model allows third parties to define their own providers by implementing a set of interfaces. But those interfaces are not enough to define exactly what behaviors those implementations should expose. \r\n\r\nWe can help by creating specification test package that third parties can use as the starting point for testing their own providers, similar to DI and EF Core.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/554", "title": "Add readme.md page to KeyVault provider sample", "body": "We want to have helpful usage snippets in all new sample projects referenced from https://blogs.msdn.microsoft.com/webdev/2016/11/16/announcing-asp-net-core-1-1/\r\n\r\nGoing to https://github.com/aspnet/Configuration/tree/dev/samples/KeyVaultSample currently shows no information.", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/387", "title": "Support for readonlyness ", "body": "In some scenarios it might be good to have either an interface that doesn't expose mutability or an implementation of the configuration interfaces that throws when changes are attempted. The application could pass instances of these to components that it trusts enough to read configuration but not to modify it.\n\nNote that this is a separate feature from persistence covered in #386. Currently configurations are not persistable but they can be modified in memory so they are not read-only either.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/387/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/386", "title": "Support for persistence", "body": "Currently configurations are mutable in memory but cannot be persisted back to the source of providers. This issue is to track the feature request to add the ability to persist changes made in memory. This could look like a new provider interface with a method to commit changes. We the user requests a changes to be committed we could iterate over providers looking for those which implement this interface and instruct them to persist their current contents or changes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/386/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/341", "title": "ConfigurationBinder: Consider GetRequiredValue() extension method", "body": "It would be defined over `IConfiguration` and would return a string for a key, but it would throw if the value was null or (possibly) empty/whitespace.\n\nAlso consider \"required\" semantics on `Get<T>()` overloads that don't take default values.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/341/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44350732", "body": "It looks :shipit: as the initial cut from my perspective. I have a few outstanding concerns, probably worth tracking as bugs:\n1. The default implementation for option accessor and option setups seems to prevent scoped option setups from working. I believe these more dynamic scenarios are important and not necessarily exclusive to data.\n2. I think it would be good to have a nice pattern to register option setups that override or not override other option setups, i.e. the issue of specifying the \"Order\" of the IOptionsSetup. Hao proposed using a flag, which I am ok with trying. Not sure it will make it to this checking though.\n3. The implementation of binding to keys from configuration to matching properties on TOptions only work with core and desktop .NET and I haven't got a good answer on whether this can be addressed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44350732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/66536440", "body": "BTW, this is blocking beta2 out of the box experience.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/66536440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/66537869", "body": "Talked to @ChengTian  and it seems this is already case-insensitive. Going back to investigate this as a possible bug in the way EF is capturing the configuration.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/66537869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/12707444", "body": "I updated the title of #269 to include `GetSections()` in our considerations.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12707444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12707544", "body": "@davidfowl as I explained in a previous comment `GetSection(key)` can be used to retrieve a section at any arbitrary level with a relative key path while `GetChildren()` can only be used to retrieve the direct descendants of the current node. You can think of `GetChildren()` as `GetChildSections()` although as I also explained in a previous comment these are the names we have agreed upon with a larger group (including the BCL folks) so I want us to stick to these names in this PR and not change them until we have a chance to further discuss them again.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12707544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/14625356", "body": "@Ercenk in the current code (and in rc1-final) the `ConfigurationSection` constructor allows empty paths. We had a restriction but now empty keys should be allowed. Where are you seeing the exception?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/14625356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/14628115", "body": "Ok. That is the check that we removed. If for some reason you cannot move to ASP.NET 5.0 RC1 you may want to try adding a call to `.AddEnvironmentVariables(\"__\")` as a workaround. This overload takes a prefix which is used to filter environment variables and is also removed from the beginning of environment variable names. E.g. in this case the configuration key would be called \"COMPAT_LAYER\".\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/14628115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/17345765", "body": "It is `Path` on purpose. For something like \"A:B\" `Key` would contain only \"B\" and `Path` would contain \"A:B\" which is what we need.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/17345765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9369359", "body": "I don't think we can be sure of what people expect :) but in EF6 we mainly wanted to maintain consistency with our previous APIs although we knew the general wisdom was to drop verbs and prepositions that add little value from fluent interfaces. This is actually something that we might revisit this in EF/E.\n\nA more interesting angle IMO is that if this class is supposed to resemble a collection on dictionary, then it will probably have multiple members with add, remove, get and update/override semantics. Then perhaps it is better to keep the verbs to make it easier to distinguish among them.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9369359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12980922", "body": "Could we use DI to activate the TOptions instance and remove the new() constraint? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12980922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021081", "body": "Is this a temporary limitation?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021109", "body": "I think from a conversation on email we concluded that we didn't need SubKey anymore, but perhaps I am missing something.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021462", "body": "@Haok and I discussed in person and we would like to use ITypeActivator and remove the new() constraint.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021482", "body": "which will remove the new from here too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021514", "body": "Add a TODO to make this nicer?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022368", "body": "By nicer I don't necessarily mean making this public, but I think we should think about what the most helpful scenarios and make sure we have specific extension methods for those, e.g. (hypothetically) in addition to SetupConfigOptions and SetupOptions we could have SetDefaultOptions or something in those lines. I wish we could avoid exposing the ability to do custom ordering, but if we can't I think a public enum can be better than taking a an int, because users can at least do things like `services.SetupOption<MyOptions>(..., order: OptionsOrder.Configuration + 1)`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022825", "body": "Don't we activate controllers?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022867", "body": "The bool looks reasonable to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022931", "body": "Cannot compute that answer :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022983", "body": "I assume it would have to default to true if omitted, correct?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13023039", "body": "FWIW, we are considering removing the restriction to have parameterless constructors from the EF entities (which are models). \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13023039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13101833", "body": "I don't feel that strongly about removing the constraint and I am fine with a bias towards simple values. If someone complains we can consider it. On the other hand:\n1. Each time you ask .Options on the accessor you will get a new instance of TOptions, so unless the framework or application using it holds to it these can live much shorter than controllers. Now that you mention lifetime, I am going to take a second look. I am not sure that mix of LifecycleKind in this PR works well.\n2. We usually talk about POCO support as a quality of frameworks that don't impose any restriction on the design of user types. I hear you using it in way that implies quite the opposite. Possibly DTOs or value objects would be more accurate. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13101833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13104173", "body": "Ok, so that means that you cannot leverage scoped IOptionsSetups that will provide different values depending on context, right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13104173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13104458", "body": "Probably not needed, but I would consider renaming SetupConfigOptions to SetupOptions so that it becomes yet another overload.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13104458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13104809", "body": "Consider a scenario in which a multitenant application needs to switch among different a connection strings depending on some state in the HTTP context. If you need to fall back to your own implementation for scoped setups I think the value of having a uniform pattern across frameworks is considerably diluted. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13104809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13107005", "body": "Thinking more about this, I believe it is a valid design choice to have the IOptionsAccessor give you just be a singleton and return always the same option object snapshotted the first time it was accessed. If anything, it should perform well for the most common case :smile: Then you need to push other more \"dynamic\" requirements somewhere else. I am just a bit disappointed that we will need to come up with yet another pattern or custom solution for those. It looks to me that enabling scoped IOptionsSetups would have addressed those scenarios.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13107005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13107100", "body": "Coming to terms with this being cached, would it be better to do double-checked locking? I.e. repeating the test for _options above the lock?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13107100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13109835", "body": "Ok, will you implement this now or later?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13109835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "ycrumeyrolle": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/572", "title": "Consider adding callback for load or reload errors for all providers", "body": "Extension of the issue #489. \r\nAs for now, it is possible to handle exception occurring on load only for file-based providers. \r\n```\r\n            builder.AddJsonFile(\"settings.json\")\r\n                   .SetFileLoadExceptionHandler(ctx =>\r\n                   {\r\n                       // handle error\r\n                   });\r\n```\r\nExceptions may occurs with every provider, especially with remote providers like Azure Key Vault & Redis providers. The `SetFileLoadExceptionHandler()` extension method should be replaced by a more generic `SetLoadExceptionHandler()` method. \r\n\r\nQuestion : Can the handler be generic enough for been common to all providers ? \r\nOr should it be specific for each provider and defined in the AddXxx() method ?", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebekker": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/566", "title": "ArgumentNullException when trying to bind to Dictionary with a value of non-scalar type", "body": "I have a JSON configuration file that I'm using with Configuration.Binder to build a strongly-typed configuration object.\r\n\r\nOne of the properties of the configuration object is a `Dictionary<string, object>` and when the corresponding value in JSON file is itself a JSON Object with string keys and simple, scalar values, everything works great.\r\n\r\nBut if I change the JSON Object to have an entry with a value that is either another Object or a List, then I get an `ArgumentNullException` for the parameter `type` thrown from `System.Reflection.IntrospectionExtensions.GetTypeInfo(Type type)`.\r\n\r\nHere is a sample strongly-typed configuration class:\r\n```\r\n    public class HandlerSettings\r\n    {\r\n        // This has to be concrete class, not interface to\r\n        // be able to construct during deserialization\r\n        public Dictionary<string, object> Params\r\n        { get; set; }\r\n    }\r\n```\r\n\r\nAnd here is the corresponding JSON fragment:\r\n```\r\n       \"handler\": {\r\n            \"params\": {\r\n                \"param1\": \"value1\", // This works fine\r\n\r\n                // This bombs\r\n                \"param2\": [\r\n                    \"value2a\",\r\n                    \"value2b\"\r\n                ],\r\n\r\n                // This bombs\r\n                \"param3\": {\r\n                    \"val3a\": \"val3a-subvalue\",\r\n                    \"val3b\": \"val3b-subvalue\"\r\n                ]\r\n            }\r\n        }\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ChadJessup": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/507", "title": "Can't use Environment.GetCommandLineArgs() for ConfigurationBuilder.AddCommandLine(...)", "body": "Can't use the results from Environment.GetCommandLineArgs() as a parameter to the ConfigurationBuilder's .AddCommandLine extension method.\n\n```\nAn exception of type 'System.FormatException' occurred in Microsoft.Extensions.Configuration.CommandLine.dll but was not handled in user code\n\nAdditional information: Unrecognized argument format: 'C:\\<path to running code>.dll'.\n```\n\nThe first command line element in the string array provided by `Environment.GetCommandLineArgs()` is the path to the executable, which cannot be parsed.\n`Environment.GetCommandLineArgs().Skip(1).ToArray()` is a messy work around.\n\nI feel that this is something that should _just work_ since Microsoft owns both of these pieces. The underlying problem is that the `.AddCommandLine()` method can't parse anything outside of a very particular format, that is `--howdy` also throws an exception.\n\nThe expected functionality is that unknown arguments are either ignored, or these exceptions can be disabled, since the command line arguments aren't controllable to the program, and often used for configuration of multiple aspects of a program.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/507/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rahulsahay19": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/436", "title": "While hosting ASP.NET Core on IIS.", "body": ":(  Oops.\n500 Internal Server Error\nAn error occurred while starting the application.\n\nLog File says:-\nApplication startup exception: System.Exception: Could not resolve a service of type 'MovieReviewSPA.Data.SampleData.InitialData' for the parameter 'seedDbContext' of method 'Configure' on type 'MovieReviewSPA.Web.Startup'.\n   at Microsoft.AspNet.Hosting.Startup.ConfigureBuilder.Invoke(Object instance, IApplicationBuilder builder)\n   at Microsoft.AspNet.Hosting.Startup.ConfigureBuilder.<>c__DisplayClass4_0.<Build>b__0(IApplicationBuilder builder)\n   at Microsoft.AspNet.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)\n   at Microsoft.AspNet.Hosting.Internal.HostingEngine.BuildApplication()\nHosting environment: Production\nNow listening on: http://localhost:33381\nApplication started. Press Ctrl+C to shut down.\n\nCode Link:- [](https://github.com/rahulsahay19/Movie-Review-SPA)\n\nCode Link:- (https://github.com/rahulsahay19/Movie-Review-SPA)\n\nThanks,\nRahul\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "victorhurdugaci": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/434", "title": "Show where each configuration key came from", "body": "It would be nice if on the most verbose level you could get a log message when calling `ConfigurationBuilder.Build` showing you from where each loaded key comes from. Something like:\n\n```\nk1 (json:app.json)\n- k2: v2(env var)\n- k3: v3(json:app.json)\n- k4: v4 (xml:app.xml)\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/434/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/fb35495f9766fcab74f2be2f38fba0e57d63b5e7", "message": "Webhook notification"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c849ad41a77e16188648dca751a3d22afa99b4ea", "message": "Fix the compilation error that happens when you don't have the src folder"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8e80c17eae48e129cd97a05e3571080556081f88", "message": "Update the build scripts to the latest version"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/a7320e6486fcdb8b03279f865250d4ac17676e3e", "message": "Return the error code from build.cmd"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/911eddd24280eb7a4bdb33d68e730d9b48582eb1", "message": "Update the build scripts"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76495449", "body": "Looks good :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76495449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76495516", "body": "Decided not to do this right now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76495516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/8547799", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/8547799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/8721706", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/8721706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25450852", "body": "It is used just in tests for backward compat. Otherwise, I would have had to rewrite most tests to use `TryGet` which has an out param. Before, they were accessing directly the `Data` dictionary. I will rename the class to match the guidelines. \n\nIt is recommended to use `TryGet` in product code because the setting might not be there\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25450852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25450966", "body": "I implemented my own sorting in which`X < T`. Is there a problem? :trollface: \n\nPS: I'll fix this in my next commit\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25450966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25529578", "body": "Is it possible to throw on CoreCLR when someone tries to use an encrypted xml? Otherwise, there is no way to know why things don't work...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25529578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25867655", "body": "Oh, ok. Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25867655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nbarbettini": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/394", "title": "Allow binding to internal properties", "body": "I have a settings class that I want to be immutable, i.e. I don't want the user to be able to change the value after the object has been hydrated by ConfigurationBinder.\n\nTo achieve this, it looks like:\n\n```\npublic class MySettings\n{\n    public int Foo { get; internal set; }\n}\n```\n\nCurrently, ConfigurationBinder only looks for public setters, so this doesn't work.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/394/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/c977a3fbb6d3a1d770a6d0c39b91d95f59616f59", "message": "Fix typo (closes #369)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/e34b9c42b008f3787a7a8162d12d34573aa6616a", "message": "Typo (JSON should be INI)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tillig": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/314", "title": "Enable removal of a key or subtree", "body": "While you can set a value for a key, if you want to remove an entire subtree of configuration settings the best you can do right now is to recursively iterate through all keys and subkeys and set every value found to null.\n\nIt would be nice to have a remove method to allow complete removal of keys.\n\nI imagine it would be on the `IConfiguration` interface:\n\n``` csharp\npublic interface IConfiguration\n{\n    string this[string key] { get; set; }\n    void Remove(string key);\n    IConfigurationSection GetSection(string key);\n    IEnumerable<IConfigurationSection> GetChildren();\n}\n```\n\nAs well as on the `IConfigurationSource` interface\n\n``` csharp\npublic interface IConfigurationProvider\n{\n    bool TryGet(string key, out string value);\n    void Set(string key, string value);\n    void Remove(string key);\n    void Load();\n    IEnumerable<string> GetChildKeys(\n            IEnumerable<string> earlierKeys,\n            string parentPath,\n            string delimiter);\n}\n```\n\nImplementation of the `Remove` method would be similar to the implementation of the `Set` method for `Microsoft.Extensions.Configuration.ConfigurationSection` where it would iterate through each provider and call `Remove`. Providers could each do the appropriate thing as needed to remove the specified key and all children from the source.\n\nA use case this addresses is for providing an administrative interface to modify configuration. Users in the interface may need to add new keys or rename existing ones - you can't rename keys right now because there's no way to delete the old keys; only set the values to null. For implementations of `IConfigurationProvider` with a persistent backing store, this makes for a very messy and unmaintainable solution long-term.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/314/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69526945", "body": "I think being able to load a stream of XML or JSON config would also help consumers from a unit test perspective - it would be nice to be able to embed (as a string or an embedded resource) a \"working\" configuration file and test config parsing/handling mechanisms in your application without touching the filesystem. (Also provides working examples to show what config in different formats might look like.)\n\nIf the proposal here would enable such a thing, all the better. (The current `Stream` based `Load` methods are all internal at the moment.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69526945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/71387039", "body": "Curious if anyone's thought about this at all. I see it overlaps with #115 so I'd be OK with closing this one and just following there. Either way, it'd be nice to know if this is planned or not so I know what to do with my consuming code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/71387039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/73726850", "body": "I see #115 is in planning so I'll close this one.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/73726850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/73727857", "body": "Any update on this? It seems like a minimum requirement for all but the very simplest configuration. I'd like to know if I can count on it being in the release or if I'm going to have to roll my own config system.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/73727857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/78966555", "body": "@mcgear This is part of the recent decision to rename KRE to DNX. They've not released a VS with the update yet. [Here's a .NET Community Standup](https://www.youtube.com/watch?v=-qt0POsiAF8&index=1&list=PL0M0zPgJ3HSftTAAHttA3JQU4vOjXFquF) explaining the change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/78966555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Tratcher": {"issues": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/276", "title": "Dotenv support", "body": "_From @atrauzzi on August 13, 2015 18:27_\n\nMany web frameworks and tools support reading in variables from a `.env` file which gets written by a build server.\n\nThe advantage to putting these variables in a specific file is so that different tools can use the same values.  A build server can produce it without having to learn specifics about what language will end up consuming the file, it can just output everything that needs to be known.\n\n_Copied from original issue: aspnet/Home#830_\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/276/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/de6a679414083920408e5e8f5d020b6e9fa55a30", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/543577e338d88dcdfeffc6ebd6945aee40374a64", "message": "Update IdentityModel to latest 3.14.1"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42258066", "body": "@ChengTian It's supposed to be Microsoft.Framework.ConfigurationModel.\n@glennc I blame you for being lazy.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42258066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42259550", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42259550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42265605", "body": "Can you check in the updated sln file?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42265605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321714", "body": "- A class named Configuration would conflict with the namespace.\n- I think implementing the interface is a good thing. Your app doesn't need to know the difference between a single config and a collection of configs.  Or would we add different functionality to the collection?\n- Naming TBD depending on functionality.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321781", "body": "FlatConfigurationFile?\nIniConfigurationFile?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321837", "body": "Indexers are redundant with the Get methods. We should choose one or the other.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9321837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/3c2eccf24621ed49908921f67bf25dd2a0c7eadc", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/2ba3a05af48c83f3471abc771d9fb03f39e09000", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6ea15fafccfd17935d91cc55b04f819b00348f72", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9ca263557d6340cd69c0d5153629ff10b349cb28", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/4a28632fb49fc52251a07d5f20ce3c0560959da8", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/098684ad4e787e263cd809d8e154a4fbcdf2d0b5", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexandreArpin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/c27b6b4685f38d151c419c2e54ae71ddf8ed12f4", "message": "Prevent Deadlock in AzureKeyVaultProvider Load (#753)\n\n- Add additional ConfigureAwait(false)\r\n\r\nAddresses #737"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/50b913fc4b0fe3333ba9ba1ad5c29f9d85c07010", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/117c679f7a95a99733329db79467fa2da4312064", "message": "Add RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/78fd1d534d8da3361412c25a0db3b8f053d5b472", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d908b0bd25c734a12b38c034c286b01ed4e7c720", "message": "Set AspNetCoreVersion"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7761ff841962b18c1767769ac71fa12cb91240a1", "message": "2.0.0-rtm to 2.1.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9eb0d521c320370410ad5e11599e07092cbdd84c", "message": "Skip first time experience on Appveyor"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8b33bc409de28288839efa25880a423cdc26c446", "message": "Remove NETStandard.Library.NETFramework"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/d7e63abc52bb3550589dd2ea70b06675252d2788", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/0b3b04fd123d90714713ba3ca7e21917b8679475", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/e2450a6a46aaab4bad86be2043d5508b2f6da41e", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/89a790862f1bcc07acfbec9fabfbce5dcabc2c92", "message": "Target netcoreapp2.1 in tests and samples"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1e9be6756eb91baf4ed3586fe6565654f925072b", "message": "Updating to InternalAspNetCoreSdkVersion 2.1.1-*"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/891bea2c1e4df7f179cffe2e033535a6eb3cc6aa", "message": "Updating KoreBuild branch"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/802eb4c005edcd05bdbebdec0fd317152b9c0ebe", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/444e19014ca168fa54531cc2e3f5c5ee69c8cece", "message": "Branching for 2.0.0 rtm"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9d2610afd2ba56370228e698f2939b0b838b45fb", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/765125c84f9f0d305c55ee1398983b67c63ba7a7", "message": "Update version suffix for 2.0.0 RTM release"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1845bcea18f0b49d4d07ab00b33672d0a3f0951e", "message": "Update LICENSE.txt text"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/36b03b23fba937d176c2d942b6762cf57f3b016e", "message": "Update dependencies.props\n\n* Update Moq to 4.7.49.\n* Add NETStandardImplicitPackageVersion"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/2d4e4bc03144120c52ca71e09cad57e44d5a046e", "message": "Updating versions to preview3"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c46ac9c5c628f83c242fd8921db51c33f14d1125", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/971e992e8eeb4a77792db3a39f3c929d4b2ef061", "message": "Updating build scripts to point to 2.0.0-preview2 KoreBuild"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d4664619c8f87e5fbf9a85e24687d4d65b039b4e", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/a6160f3bc8adbd6c30478d212e90246c651e7323", "message": "Branching for rel/2.0.0-preview2"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/3bb1db6798c39a56ba9fec4b0595f60cb4d69873", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/815209ff796e167cd4e5a7d769617a84b335544b", "message": "Use the bundled NETStandard.Library package in netstandard targeting libraries"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c25ffd0205eb3e214c8a60dce4ea0223a44c98db", "message": "Updating package version to preview2"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1b6353c8ab91c8375d4e51035ec9ab361754699c", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/a514a6523862771db42781054fd3f12fdb673154", "message": "Branching for 2.0.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9dfd49a623da4553b96a0b38c1bbb12f48bb73af", "message": "Use Bundled NETStandard.Library \\ NETCoreApp versions instead of explicitly specifying one"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/3c40381428dd20aee943c53c035fb755c2f1111b", "message": "Updating versions to 2.0.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6ab041287136238ad902a956cedb89f4a45ca5e6", "message": "Remove unused project.json"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d6ee704c38e3a066689d987736a7e5d859e5fba1", "message": "Updating to 2.0.0 Internal.AspNetCore.Sdk"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9da288521f7230e9b1143c1359e279f5dc185ce4", "message": "Remove net451 as a cross-compile target"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6bd3d5e52edeba5e50418942f5cd6c5df06979ec", "message": "Updating to 4.4 CoreFx packages"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/ca0358af45d9974f94ea1b0ad622169cb900ee0e", "message": "Fix versioning"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/9ea23af2323485d56471491c8911321415e7830e", "message": "Updating versions to 1.2.0-*"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b46354cab9dd8a225a7a705505553c41f8661e14", "message": "Merge branch 'rel/1.1.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/284db879d55251d5359068614a3cc39e9223bb39", "message": "Branching for 1.1.0"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/a92f47b5704a31f881805c48d3f6f7d11e781e41", "message": "Merge remote-tracking branch 'origin/rel/1.1.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/efe0cb9be3b502ad1a36ee14f0919797d299282e", "message": "Branching for 1.1.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b58133f48f3d814c09f53370c258b16ecdd98e64", "message": "Updating to netcoreapp1.1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/23aabd9c394d7e619181891881c686efa916316b", "message": "Revert \"Updating to netcoreapp1.1\"\n\nThis reverts commit 31be258e694c98925a5039e0eccab953c67c4987."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/31be258e694c98925a5039e0eccab953c67c4987", "message": "Updating to netcoreapp1.1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/28f117c0b1ab94476422f7c8b5f1684316d4d1b0", "message": "Updating partner package versions"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/290b4989d409db0f3d73db93b2c1d2cd81a157a5", "message": "Updating to dotnet.myget.org"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/3a1a0f9047e69d9813e61a2e97edf512474ff5b5", "message": "Switching to dotnet.myget.org feed"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/26786811a0edefa1985670521ae1046e07f33065", "message": "Pin the version of dotnet-test-xunit to 1.0.0-rc3-00000-01"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/e53f86abe52a4851c7d6d615e612f579d3e3cb23", "message": "Bring back global.json"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6d81ba7656bf7abd045bd9ac73663bc215db143b", "message": "Add framework assemblies required to run tests without src"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/0fa5bbb6c68d3ae4c9841aec1a8a1d8f3554959f", "message": "Updating to RTM builds of xunit"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/abeee414f2755ad9b02e2dd39f90064ec05907bf", "message": "Updating json files to pin versions and build files to pin KoreBuild"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/49c545c4286fc83bcd6471f8bf8ced06f177aab0", "message": "Updating NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6598ad7c557f9349d62515cc8df6f0e06a1e7b1c", "message": "Updating to dev versions"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/e5e8ebada85281a98c148c656592fe1172b5820b", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/470a928c1bc242ad342d222c3990fb0cf6b63688", "message": "Updating to release."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8a2369c8f0a09449a2e15a397f9d1d8aaef46713", "message": "Revert \"React to updated CoreCLR packages\"\n\nThis reverts commit 4f2efde39b1a7a81695f414a528e6576e6da8200."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/ce7dce1d615228c9cd17e868d502da4546cad14c", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/ad35877a5cf80def074df9911ccde2270fab6469", "message": "Fix build warnings"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/566111d1e5e8cac4f5274bab12cd61aa95e53d31", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/25d8401953f9b8d90ce6e7b81f66d0326fdb130c", "message": "Use latest build of dotnet-test-xunit"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/3cd5bbb19308fb0467937c090b36b3a03cbc7b75", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/5401eff01b0e2126564d87f97adfc0b94ba0af21", "message": "Removing imports from src projects"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/31dd9675f99fa33a3e5cc050979de276d1f95e1e", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/db26261aa12c938cbccf6820caf42f2f6f019282", "message": "Updating to release."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c4bb51f3ee63e805081983f86870fcfbbba3a042", "message": "Remove NuGet restore warnings"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/f387598b53b6d71be6a0665f21b0f03394454b15", "message": "Target System.Runtime 4.1.0 to fix CI failure"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1b302daf1c9bf7e723a26f5507f033c3e313e106", "message": "Target minimal TFM"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/76bed4ca4b3f64d24ab937eaba864e0d79c16b87", "message": "Fixing CI build failures"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/336e6d02e36dabcd1a070dfa18ade031da23a726", "message": "Removing test dependencies to fix NuGet warnings"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/628a71c6297075a61b4c3d4605784f032eb1cf1c", "message": "Revert \"Target minimal TFMs\"\n\nThis reverts commit b9e9317efcc95aaac5ac23739deeec67f70664a8."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b9e9317efcc95aaac5ac23739deeec67f70664a8", "message": "Target minimal TFMs"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c9fa37a2668bd8b5d28c3837ba1b6baf9e2ad284", "message": "Reacting to CoreCLR package version changes"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576737", "body": "Braces\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576788", "body": "Ctors before properties?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13315698", "body": "Needs to say \"%SKIP_KRE_INSTALL%\" == \"1\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13315698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "akamyshanov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/94a5f9e3d122cf1b01c3621130f70739efec1fb2", "message": "Modify ConfigurationBinder to use IDictionary<> setter instead of \"Add\" method (#735)\n\n* Modify ConfigurationBinder to use IDictionary<> setter instead of \"Add\" method.\r\n\r\nCopy-pasted the code from the issue, credit goes to @cwe1ss\r\n\r\nAddresses #565\r\n\r\n* Try to fool xUnit analysis:\r\n\r\n\"Do not use Assert.Equal() to check for collection size.\"\r\n\r\nHowever, such an assert is used in other test."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/0b325261756518314e6b52b48ae0900ac0e117e5", "message": "Increase Minimum Version of Visual Studio to 15.3.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JunTaoLuo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/6419734d8d55a5c9b27764c95dab766a34f67848", "message": "Ensure fallback to curl after failed wget"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/64323f9f02ca24f0a267734fe817e01070af1495", "message": "Update __get_remote_file logic"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b62aafc060a7ab0e2e5cf1a08e71e5c0bedcf675", "message": "Update Microsoft.Azure.KeyVault version"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/84e54a0d55e20a08745801e6fc12581c518af633", "message": "Fix dev build\n\nSystem.Net.Http reference not needed when targeting netstandard2.0"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/2027b6c258177bff30cf5ea73dc841656a29645d", "message": "Merge branch 'rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/4e7814ac160e4f613e7931f58a3925da1e9c53d9", "message": "Add required reference"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/acad8676c07dad2b686d0d40711187d86d68d4b9", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8231866e601b28ac99f6c5abe77897584c5f604a", "message": "Update Microsoft.IdentityModel.Clients.ActiveDirectory version to 3.13.9"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/12cb5d080210a41879eef92ccf93a0957091f8e5", "message": "Merge rel/2.0.0-preview1 into dev\n\nUpdate Microsoft.Azure.KeyVault to 2.2.1-preview"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8abcea2f6a19a9500d944a5752e285816813dee5", "message": "Revert \"Revert \"Update Microsoft.Azure.KeyVault to 2.2.1-preview\"\"\n\nThis reverts commit 8d85f1641b89e2a878975c267ecb55ce880abb00."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/444f72389a5653bab9b122daaa4a316e2fdae055", "message": "Update Microsoft.Azure.KeyVault to 2.2.1-preview"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/ab5ed47c3ce04621bf1bfc665c3db5474c8ee528", "message": "Diable flaky test on linux"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/dca27738fd3395e44b8fd304e38068f0949eaa64", "message": "React to updated CoreCLR packages\n\nhttps://github.com/aspnet/Coherence/issues/97"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/4f2efde39b1a7a81695f414a528e6576e6da8200", "message": "React to updated CoreCLR packages\n\nhttps://github.com/aspnet/Coherence/issues/97"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/47b13050126fab7afa18e8636bb3c5d1f4022338", "message": "Fix tests on non-windows systems"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/6be3b9eee3c3c40a8c6f762c4c605c0b96f8e891", "message": "Updating test TFMs for custom test discovery"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikeharder": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/21d807a30a40721f3b2c090d5cf3828ccdb6c6dd", "message": "Set \"TreatWarningsAsErrors\" before NuGet restore (#687)\n\n* Ensures our build stays clean of NuGet warnings"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8d85f1641b89e2a878975c267ecb55ce880abb00", "message": "Revert \"Update Microsoft.Azure.KeyVault to 2.2.1-preview\"\n\nThis reverts commit 444f72389a5653bab9b122daaa4a316e2fdae055."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Coderrob": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/c0fa2c35993295ee9670a3ac14fda56a66c12150", "message": "Add ConfigurationPath.KeyDelimiter replacement for \"--\" to GetKey (#679)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BrennanConroy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/05a8f1e82a09d74a202fac437df976113fda7652", "message": "Increase wait times for functional tests (#667)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b97cffa37220a566f61b4f29d63736c7dfb71889", "message": "Change Xunit versions"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d2be66281af64c8fb7e48cc13337920fc69479bf", "message": "Update .travis.yml"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/fc584e5b4cf78fb39da637431f5001e4adf9458f", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/457963837cdedba3bbd561fbd91bcc43acc918dd", "message": "Move dependency to netstandard only"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/28faeed0976033a383bd7bd8132bacf03eda584c", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/713271d9f4a105f12f91e4830acabe2f239f7fd4", "message": "Add serialization.primitives for json"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kichalla": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/cde0c5ed3f0dd1f5bad36633a4c6d1dd7d48d2a9", "message": "Updated to use the latest shared runtime"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/db146cf6ca04e97beeaed2957ff444392b7f1085", "message": "Updated projects to use net461"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/689c771483f11854de0b0484b9001d9dbcc06e60", "message": "Upgraded Json.NET version to 10.0.1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c0382f8ff5ba5caf38491f4b3837dcfa9e6af894", "message": "Changed test projects to run on netcoreapp2.0"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/7fe8675d9f7f17c5fd1dc4de7cb61e1a2d78708b", "message": "Enable tests to run using dotnet xunit runner"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "achaloux": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/648ddd0ecd0588679bab64db499fae891b85d4d5", "message": "Issue #546: Add support for configurations with dictionaries keyed by enums (#655)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "svick": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/74e22a1338443b0960109d491e6e561ef8f3d74a", "message": "Use invariant culture in JSON parser (#657)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Meir017": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/f6189e8ee3530bfd9a7f5de35683c920d8fce6b2", "message": "Update ConfigurationReloadToken.cs (#656)\n\nImproved documentation"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smitpatel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/cd3c0cf22b0f044f267fcd2d80f36ce3badc023b", "message": "Update API Check related files\nReact to aspnet/BuildTools#238"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simonwendel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/7715691f7462f6ac0b70fb715c91532aeb6a2e0f", "message": "Fix typo in IConfigurationBuilder XML comment\n\nChange the word \"configuation\" to \"configuration\"."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1e0d8142219c89dc5cbb7acf41dba292c11e9930", "message": "Fix typo in ConfigurationBuilder XML comment\n\nChange the word \"configuation\" to \"configuration\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dougbu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/eba52fc4405922a9d734775995a55208c03cc1b4", "message": "Disable API Check for package that we have not yet released"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1dd72cdaa44358ba917608f78bc7715fe33526ae", "message": "Bump test projects up to .NET 4.5.2\n- aspnet/Testing#248\n- xUnit no longer supports .NET 4.5.1\n- build tests for desktop .NET only on Windows\n  - except Microsoft.Extensions.Configuration.AzureKeyVault.Test project; that will be handled differently"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/f27f7a7086bd144f75a7bfbfba3ca5cbe2dd9e95", "message": "Increase .travis.yml consistency between repos\n- aspnet/Universe#349\n- minimize `dotnet` setup time; no need for caching\n- build with `--quiet`"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/07c5cb71bb714e3cc5d10c6f5ce8311ff081b324", "message": "One build to rule them all\n- well, at least VS and command-line builds will share output\n- part of aspnet/Coherence-Signed#277"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/16d920bee5f0656c304d36acc00209e15182922a", "message": "Remove project name from output path\n- aspnet/Coherence-Signed#187\n- remove `<RootNamespace>` settings but maintain other unique aspects e.g. `<DnxInvisibleContent ... />`\n- in a few cases, standardize on VS version `14.0` and not something more specific"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/a0a8b943fe679d2cdc85513e128b049f05dea5b1", "message": "Update `build.cmd` to match latest template\n- aspnet/Universe#347\n- `%KOREBUILD_VERSION%` doesn't work without this fix"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012286", "body": "Nope this is temporary.  As the comment says, just enough for the Universe to build.  More specifically these files are needed for `.\\build install` to get past this repo.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012683", "body": "Hopefully we won't need this soon.  But today `.\\build install` fails consistently.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84068961", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84068961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26854528", "body": ":dancers: nice to see this go\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26854528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26854781", "body": ":+1: and why use a public extension method for such a minor internal detail?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26854781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26854925", "body": "`BasePath` will never be `null` if you follow what @davidfowl [said](https://github.com/aspnet/Configuration/pull/160/files#r26820907)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26854925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26854968", "body": "test scenarios we care about, not `null`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26854968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26855566", "body": "- should this instead be on `IConfiguration` and in the `Configuration` constructor?  would avoid odd cases where configuration sources in the same configuration have different base paths.  would also avoid callers repeatedly passing the same value for multiple configuration sources.\n- (not sure of the docs rules for this repo but) shouldn't this new property be documented?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26855566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27041553", "body": "`BasePath` would be available in all configuration sources because `IConfigurationSourceRoot` inherits from `IConfiguration`.  would need `SomeConfigurationSource(IConfiguration source, ...)` constructors and appropriate changes to the extension methods.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27041553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27041627", "body": "nit: remove extra blank line\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27041627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27042464", "body": "1. this doesn't tell the developer much.  suggest `Unable to resolve path '{0}'; construct this {2} with a non-null {1}.` where `{0}` is the `path` value and not `nameof(path)`\n2. this project has resources; new messages should be there, not inline\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27042464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043598", "body": "in addition `JsonConfigurationSource` can't be created without a non-`null` / non-empty `path`.  should check that before checking `IsPathRooted`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043667", "body": "nit: could combine this with existing parameter checks in the `JsonConfigurationSource` constructor\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043757", "body": "`AddJsonFile()` comments apply here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043856", "body": "`AddJsonFile()` comments apply here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043992", "body": "add tests with a non-`null` `basePath`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27043992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034722", "body": "did you edit this file manually?  method should have 3 parameters\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034738", "body": "should use `Resources.FormatError_MissingBasePath` once that method is regenerated correctly (using `build.cmd resx`)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034747", "body": "that is, should not be using `string.Format` here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034789", "body": "`FormatError_MissingBasePath()` instead of `string.Format()`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034800", "body": "`Resources.FormatError_MissingBasePath()` here too\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28034800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jbagga": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/6f008395dd50c9accec2dfb39fda71120e30e5e5", "message": "Disable test\n\nSee #628"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/e0ef36a5c63d24dbb4c175a099d028887a8bf86c", "message": "Merge pull request #616 from aspnet/no-mono\n\nNo mono"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/701c8c83a333dc1355a3beb1748b58c5245a5ca1", "message": "Update .travis.yml"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/18ca3c158dac24f7c971c1571e369fe77643532a", "message": "Fix build\n- Hoist packages using netstandard.library\n- Upgrade process since it's not in the standard library"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012612", "body": "Not sure we need this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34012612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/37466813", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/37466813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39921896", "body": "@ChengTian could you take a look at this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39921896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40313704", "body": "You have to change the folder name as well\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40313704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40623822", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40623822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41107233", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41107233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41122249", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41122249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42258093", "body": "lolz :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42258093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42260673", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42260673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42270763", "body": "@ChengTian You forgot to rename all of the .kproj files\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42270763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42332148", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42332148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42515496", "body": "/cc @Praburaj You can update the samples to not plumb the IApplicationEnvironment through, the config files will assume app base relative\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42515496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43585256", "body": "@Eilon yes. +1 to any low tech easy to understand solution. @rustd What kinda thing were you thinking of?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43585256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43591341", "body": "Great\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43591341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44754765", "body": "Yep, I'm thinking this is better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44754765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44919212", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44919212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44919247", "body": "Can we put this in the current milestone? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44919247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44996775", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44996775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45630705", "body": "We could rename it to .config so we'll have config.config :trollface: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45630705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47488502", "body": "Get shouldn't throw ever (unless we're going to have a TryGet). I agree that the configuration itself should throw instead of the source\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47488502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47960658", "body": "This isn't a configuration bug\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47960658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53618697", "body": "You can't set the appbase from within the appdomain. You pretty much need a new process.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53618697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53620788", "body": "Looking at the PR comments though I think I know what this is getting at. The real issue is that we're not using the service provider to get the IApplicationEnvironment\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53620788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53951661", "body": "This is done, you'll need to set CallContextServiceLocator.Locator.ServiceProvider in the Mvc unit test to see it take effect.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53951661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/55068319", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/55068319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/60966533", "body": "Done https://github.com/aspnet/Configuration/commit/f47168454309bd45ecc4021834ec0f42edf87acd\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/60966533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/66698121", "body": "Shouldn't it be a flag? What if the file doesn't exist and you start getting settings from somewhere unexpected.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/66698121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75186205", "body": "Would that be in core clr as well?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75186205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79094814", "body": "See https://github.com/aspnet/Home/issues/368\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79094814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83929108", "body": "/cc @bricelam \n\nCan you check how this affects EF?\n\n/cc @glennc @lodejard  Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83929108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84038266", "body": "This got moved to the aspnet/Options repository\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84038266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5567647", "body": "GetSubKeys?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5567647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10055718", "body": "Why is it an array?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10055718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10673129", "body": "Hah! :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10673129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704160", "body": "Why didn't we call it GetSections?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704161", "body": ".Any()?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574920", "body": "Funny that every token we implement uses cancellation token internally :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574922", "body": "Maybe this should be a property?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13575006", "body": "Do people really want a \"fire one\" event for config?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13575006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/17746990", "body": "dead code!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/17746990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276174", "body": "Ini file? An example of the format in a comment might help.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276302", "body": "Need to think about hierarchy. A.B.C\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9276302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9295709", "body": "I like it (especially the json one)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9295709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9297432", "body": "Our default can be ini then. Anything but xml :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9297432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9320250", "body": "@glennc learn to github https://help.github.com/articles/github-flavored-markdown\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9320250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9352578", "body": "I prefer IConfigurationSource for the individual sources and DefaultConfiguration for the object (if Configuration conflicts with the namespace).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9352578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10351574", "body": "It's not in yet so public is fine for now. It won't be exposed from the assembly regardless.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10351574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11358318", "body": "Delete this file\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11358318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12370051", "body": "I can make an assembly called Microsoft.Framework.ConfigurationModel.Common if we want to have this as a shared project.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12370051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13010177", "body": "You don't need this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13010177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12940425", "body": "Why the constraint?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12940425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12940469", "body": "No longer required\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12940469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12959718", "body": "Yea, I'm not sure it's worth the ifdef \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12959718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021660", "body": "Being portable is a limitation\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021717", "body": "Yes?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25667068", "body": "I always assume that any use of ElementAt is wrong. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25667068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999363", "body": "We need to mock out the file system. This kinda sucks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999406", "body": "we had a discussion about that. It could love in logging but I dunno.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999450", "body": "Sure but that's not going to happen right now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26633664", "body": "I like optional\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26633664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27059250", "body": "specify the optional: false, here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27059250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26820902", "body": "Path.Combine too hard?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26820902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26820907", "body": "We shouldn't allow passing null.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26820907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27001381", "body": "Hmmm\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27001381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27007862", "body": "I think it's worth having a helper for this logic.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27007862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "frankbuckley": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/c9f7e2b98c1f0ec2612569869acd0add24668a1c", "message": "Correct DefaultKeyVaultSecretManager documentation (#568)\n\nDefaultKeyVaultSecretManager replaces \"--\" (not \"__\") with \":\""}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajaybhargavb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/bde23a4a55d4ef043d7a3804b58fd6328f34be14", "message": "Removed packages list in NuGetPackageVerifier.json"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/baadcd0628c335d529fc7a770cf6aa618db87a3b", "message": "Updating Json.Net version"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/861828ec30bec27bf542bf041507990430f99651", "message": "Added Company, Copyright and Product attributes to AssemblyInfo"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b20e2ccf61b883da932a76f85f3701623edaa874", "message": "Enabled xml doc generation"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NTaylorMullen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/ec6c5b0e97b98c2ea1370203c1685617f2ae97d5", "message": "Update .travis.yml osx image to xcode7.3."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/f1722ea28f91db0ba40e04d81430662346bf59ad", "message": "Pin global.json SDK to 1.0.0-preview2-1-003177."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d8fd6d57451488b73793bbd6a341977c94b2c3bc", "message": "Remove direct Microsoft.NETCore.Platforms dependency.\n\n- Microsoft.NETCore.App now pulls this package in.\n\naspnet/Coherence-Signed#344"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/d65ae3278af23eeee1ea5f7a5bcc0713e05c4b53", "message": "Transition to netstandard.\n\n- dotnet5.X => netstandard1.y (where y = x-1).\n- DNXCore50 => netstandardapp1.5.\n- Applied the same changes to ifdefs."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/8c777c1484a967f93b45fda3c727a4d9dab9d8f5", "message": "Update System.Linq 4.0.2-* => 4.1.0-*."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sgryphon": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/531361343aaf678770bb50adac2a5a3960bb7280", "message": "Got a working build, so trying to work out which of the changes is the fix"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/f4718e4244840d301c664ba6a0ab4bce38e6322b", "message": "Add delays in, e.g. between creating directory and creating the file, to see if that helps."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/0089c01429fbb7b44c283e3582df01937c443950", "message": "See if there are any errors in the test (maybe need a gap between creating directory, or increase the reload delay)"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/12520926a5a2c79c6bcbbc5d1058803ea8ba958e", "message": "Revive previous (working) test that created 3 files to try and fix build"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/09b543c1fb0752ae1acbd84f0d62444932abc196", "message": "Another attempt at fixing broken Linux build; using the factory method that sets the default file provider and use the relative path."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/c9d6a751d4b7186fcaec28b50b62c6f30dface68", "message": "Have a guess at a fix that might work for the broken Travis Linux build."}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/561", "title": "Expand doc comments (no code changes) with details of how command line config switches work", "body": "Expand doc comments (no code changes) with details of the command line switch formats supported, and how switchMappings works.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andrewlock": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/bc96e60de589f4c0cabced33105c5acdcbc68da3", "message": "Add Exists extension method to ConfigurationSection\n\nCurrently syntatic sugar, so relatively expensive"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/522", "title": "Add GetRequiredValue() method", "body": "Add `GetRequiredValue()` and `GetRequireValue<T>()`\n- Adds string `GetRequiredValue` extension method over `IConfiguration`\n- Adds strongly typed `GetRequiredValue<T>` extension methods that don't take default values\n- Throws if value is null - empty and whitespace are ok\n\nAddresses #341 \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "javiercn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/e6f383c1669153077ec0500512e06ee8c8564219", "message": "Created public API baselines"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/34fa0b053803a2ecb1d9a553a94e60aed60c5f37", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/a7403feb8fba6d381b140c46fbacefca484486a7", "message": "Update Json.NET to 9.0.1"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b4c6a630bb40f3b997e7addcfa82bfa6c1310dab", "message": "Remove unncessary imports"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/1081e86fe96bdaaa83ee24ff8f9cc4531ded2db0", "message": "Update Json.NET to 9.0.1-beta1"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "miguelcrpinto": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/e82c7aa236271b22792441caadce001e7fd426fa", "message": "Improved comments AddEnvironmentVariables method\n\nImproved the comment for the prefix parameter in the AddEnvironmentVariables method\r\n\r\nIssue https://github.com/aspnet/Configuration/issues/488"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cesarbs": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/d56b5bfe464958499d5734efec1507368868fbff", "message": "Fix OSX build on Travis."}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/b77798165ac2577dfeecf3062c704354139316d1", "message": "Update README.md"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Eilon": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/58c2781325856e4f104539d26cf6e5d50676cf5c", "message": "Fix package metadata some more"}, {"url": "https://api.github.com/repos/aspnet/Configuration/commits/703992bbb88553f2dabae1f6d64d2c80df2573ad", "message": "Fix package metadata"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34011261", "body": "@Tratcher already has a separate PR for a config prototype. Are we ditching one in favor of the other?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/34011261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/37266778", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/37266778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/38999419", "body": "Another `#ifdef` bites the dust, nice!\n\n:shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/38999419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39616967", "body": "This is :shipit: for me but I'd like @lodejard to sign off as well because he knows this area better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39616967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39913870", "body": "Looks good to me minus removing the whitespace check, so once that's fixed :shipit: And please remember not to use the green button to merge! Other folks on the team can help you do the \"clean\" commit pattern.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39913870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40445171", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40445171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40567103", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40567103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40567165", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40567165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40682943", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40682943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40911818", "body": "The code looks :shipit: to me - I'm not seeing anything missing here. I think this is fine to check in but should see what else @lodejard thinks ought to be here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40911818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40995267", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40995267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41078066", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41078066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41080265", "body": "Wow that seems like a ton of different formats - do we really want to support them all? I'm kind of thinking a \"less is more\" approach could be useful here...\n\nI think at the very least this would be in a separate PR, though. I consider this PR to be more about cleaning what's there, and separately we should think about how to model command line options in general.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41080265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41122227", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41122227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41237688", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41237688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41310639", "body": "@ChengTian can you take a look? Maybe it's an issue with the type of key comparer that we're using? (E.g. doing a check based on `Ordinal` but the dictionary is perhaps `OrdinalIgnoreCase` or something?)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41310639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41335273", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41335273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41440608", "body": "Looks good, :shipit:. BTW don't fear, we'll do a full review of _all_ the resource strings in K in the future!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41440608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41452994", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41452994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41824641", "body": ":shipit: after addressing my new comment about the exception and after adding the other comment we talked about in person.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41824641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41926503", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41926503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41926570", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41926570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41984546", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41984546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41984579", "body": ":shipit: but it looks like this doesn't matter anymore anyway.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41984579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41984589", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41984589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41984621", "body": "Can you please please please add a newline after the last attribute :smile: Then :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41984621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42089132", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42089132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42121717", "body": "BTW very nice - I like the unit tests, so aside from the one small comment, :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42121717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42121720", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42121720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42439999", "body": ":shipit: for now; perhaps log a bug to track moving the code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42439999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42564850", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42564850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42611242", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42611242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42788591", "body": "Yup, :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42788591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42788623", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42788623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42860929", "body": "Let's wait until later this week to push this. We don't want to break all the alpha apps.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42860929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42980063", "body": "Yeah I think this should be fine, :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42980063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43241769", "body": "Interesting, but when would you use `CommitAll()`? I'm not sure why the developer would want to duplicate all data to all writeable config sources.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43241769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43522351", "body": "Minus my two comments, overall this change looks fine, but I'd like @loudej to sign off.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43522351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43584509", "body": "`config.AddXyzConfigProvider(\"..\\\\..\\\\shared\\\\sharedconfig.json\");`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43584509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43586701", "body": "Or use env vars or something. Those are shared.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43586701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43957333", "body": "Nice! :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43957333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43957366", "body": "Seems pretty obvious now :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43957366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43957459", "body": "True true. We shouldn't reach into some static that returns data we don't want.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43957459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44044377", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44044377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44692297", "body": "cc @ChengTian\n\nHmm interesting. We currently purposely disallow duplicate keys _within_ a config provider instance to detect user error. I wonder if this should be done somehow by having different config providers? But I have no idea how we'd do that...\n\nIn this case how would we really know which value should win?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44692297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44753036", "body": "Yeah @davidfowl and I were thinking something similar - but perhaps we don't even need an option, and command-line config can just always ignore dups? (And always have the last item win.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44753036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44919182", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44919182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44920349", "body": "Yes, let's.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44920349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44920355", "body": "@glennc FYI\n\n@ChengTian enjoy.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44920355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44994412", "body": "I don't think this was so much about _having_ a way to specify the list, it was about _requiring_ the user to specify the list. That is, get rid of the one that doesn't take in the list, and also delete this ctor: https://github.com/aspnet/Configuration/blob/dev/src/Microsoft.Framework.ConfigurationModel/Sources/CommandLineConfigurationSource.cs#L15 .\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44994412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45237199", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45237199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45967155", "body": "I would have thought that overwriting the file completely would be the right thing to do. That's how just about any other \"editing\" experience works. At best some editing experiences have a notification to let the user know that the file has been modified since the load, but then it is up to the user (in a GUI situation) to decide whether to re-load, or to ignore the changes. But doing a merge seems odd to me.\n\nPerhaps we can discuss tomorrow after stand-up.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45967155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45967625", "body": "Not a fan of this feature :(\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45967625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/46990922", "body": "Hmm yeah maybe the default should have an in-memory config provider (that will barf if you commit?). I don't really like automatic defaults but I think here that might be the expectation...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/46990922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47471307", "body": "I _think_ I'm OK with that, but @lodejard and @davidfowl should comment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47471307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47603229", "body": ":shipit: after fixing my two comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47603229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/49513762", "body": "Basically a dup of https://github.com/aspnet/KRuntime/issues/234 I think.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/49513762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/51948227", "body": "@thereverand I'm not sure I agree with that assessment. It struck me as creating an _artificial_ and _arbitrary_ hierarchy delimiter when previously there was none. There's a difference between _config_ hierarchy and _my own_ conceptual hierarchy. If there is a desire to not support dots in config keys, that's one thing (though I think that would be bad), but why convert dots to colons? Why not also convert slashes, backslashes, hyphens, dollar signs, etc.?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/51948227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/52942365", "body": "Sorry for the delay, still catching up on notifications from while I was on vacation...\n\nThere already is functionality similar to what you describe in the new `Options` system, which can populate an options object from an `IConfiguration` object. Check out the codes here: https://github.com/aspnet/Options/blob/dev/src/Microsoft.Framework.OptionsModel/OptionsServices.cs\n\nUnfortunately I don't see it used anywhere yet, but I think it's similar to what you propose.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/52942365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/55301370", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/55301370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63127883", "body": "Not really needed because we have `wwwroot` for static content. All other files, including config files, go in the app root, and are never servable.\n\n@davidfowl \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63127883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63128005", "body": "Dup of https://github.com/aspnet/Configuration/issues/107.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63128005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63128704", "body": "Dup of https://github.com/aspnet/Configuration/issues/98.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63128704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63128754", "body": "Dup of https://github.com/aspnet/Configuration/issues/98.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63128754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63130065", "body": "Related: https://github.com/aspnet/Configuration/issues/6\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/63130065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70019220", "body": "Looks good, thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70019220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70019930", "body": "What's the scenario?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70019930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70130679", "body": "Sounds like two different features here.\n\nFor getting the hierarchy of things, this seems like a feature that would get very confusing to users. Allowing different formats for keys and expecting them to be coalesced seems very error prone. In my mind the behavior would be that the consumer of these keys has a priority system of perhaps preferring \"complex names\" to \"simple names\" and that's that. If the user mixes key formats then too bad.\n\nThe second feature is having keys dynamically depend on other keys. This sounds like it might be good to consider supporting within Configuration itself instead of having every framework invent its own mechanism.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70130679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70285850", "body": "@rowanmiller cool sounds good. Should we close this issue and file a new issue for the value-redirecting feature? No guarantee it'll happen of course, but even if it doesn't and we end up doing it just for EF for now, we should at least have a quick discussion on what the feature _would_ look like if it was more general purpose.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70285850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70903533", "body": "CLA approved. @Tratcher to merge.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70903533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74332812", "body": "Thanks for the PR! That code looks good to me.\n\nIt's worth pointing out that ultimately these extension methods are meant as a convenience for the most common scenarios, and I'm not sure that switch mappings are _super_ common, but I see no harm in adding this extra convenience.\n\n@lodejard any objections to this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74332812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74334234", "body": "Well basically you can just do what the extension method does but without the extension method (or an app can just implement their own extension method). But personally, I'm somewhat a fan of having these conveniences...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74334234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172008", "body": "@blowdart too.\n\nI don't have any particular opinion on this. I think ultimately it depends on what we want the recommended secret storage to be. For example, there's a school of thought that says to never store any secrets in any config file, regardless of being encrypted.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76218291", "body": ":shipit: after :trollface: whitespace cleanup\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76218291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76352130", "body": ":shipit: this looks pretty nice and neat!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76352130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76978378", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76978378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576310", "body": "I find it a bit odd to ignore command line args that don't have `=` in them and to fully accept _all_ command line args that _do_ have `=` in them. I can't say that I have a better suggestion right now, but I think there's something to figure out here in terms of which command line args are valid and which are not.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576629", "body": "Use `static readonly` instead of `const`? I do tend to agree that it's something we can't _really_ change later (after v1) because everything else in the world would break, but we nevertheless tend to reserve `const` for universal truths as opposed to conventions.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576649", "body": "These interface are being asked to be split out into multiple files. They don't like to share :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576686", "body": "Is it meaningful to have a concept of removing a key from config? Or perhaps unsetting a value? Or perhaps how to \"override\" an inherited value with an empty value? E.g. let's say someone set `debug=verbose` in the config and I want to make it be `debug=<empty/null>`. Or I wonder if the way to do that is by convention of setting a key to have a null/empty value? If that's the case, then I think this code would ignore an \"unset\" / \"removed\" value by accepting only the first non-empty value. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5576686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10060245", "body": "Yeah C# 6 I heard lets you do `IEnumerable<T>` params, right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10060245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13302383", "body": "Did you mean to comment in a PR?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13302383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9296945", "body": "No comments certainly sounds like a non-starter to me. Where do we put the FWLinks with more info? Where does the customer put their own contact info for the IT admin to contact in case of a problem?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9296945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9297528", "body": "New format: XSON:\n\n```\n<\n  \"Databases\": <\n    \"Default: <\n      \"ConnectionString\":\"aiwfhawilfhlwiefhawilefhlaeihf\",\n      \"Provider\":\"SqlClient\"\n    >,\n    \"Employees\": <\n      \"ConnectionString\":\"r1237hofijqo3irjqo23r\",\n      \"Provider\":\"SqlClient\"\n    >\n  >\n>\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9297528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327001", "body": "I forget - are these supposed to be internal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327112", "body": "Need to add `readonly` no? I assume we don't want other people setting it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327135", "body": ":question: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10327135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350357", "body": "Oh wait I forget - are they're supposed to get stripped out of the assembly eventually anyway? (Maybe we don't actually do that yet.) @davidfowl is the `AssemblyNeutral` attribute supposed to be public or internal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350381", "body": "Maybe log a bug for this instead?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350388", "body": "(Or in addition.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10350388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11305973", "body": "Do we want any basic error checking here? At least check null/empty or something?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11305973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11307936", "body": "Hmm interesting. I do think the types should be public - that way customers could conceivably re-use them to customize scenarios in ways we did not anticipate. My general view is that on public APIs we should do reasonable error checking - and if perhaps other classes are missing some error checking then we need to at some point go improve those types too (in a separate PR).\n\n@lodejard thoughts?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11307936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11307966", "body": "1. Ctors go before properties\n2. Do we want this to be mutable? I would think we want this to be `private set;` so that it can't mutate\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11307966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11308062", "body": "If the reader is _guaranteed_ to implement this interface then just do a cast. The way the code is now if it doesn't implement the interface you'll just get a `NullRefException` on the next line anyway. If it's _not_ guaranteed to implement the interface then the code needs to be more defensive.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11308062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11308082", "body": "See previous comment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11308082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309080", "body": "OK then let's change this to just cast the `reader` because it's guaranteed to work.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309113", "body": "I think we should change this one in this PR - and then a separate PR to go fix other areas.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309181", "body": "Is it possible to also assert that there isn't anything _else_ in the config data? Like check `Data.Count` or something?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309198", "body": "Typo :smile: `street`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309219", "body": "The unit test names should be more descriptive about both what they're checking and what they're expecting. This one has the former but not the latter.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11316156", "body": "How would they get the partially loaded data anyway? The data is in a private variable, so there's no externally visible data right? That's what the call to `ReplaceData(data)` is for isn't it?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11316156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11365436", "body": "@davidfowl are you mostly referring to all the generic assembly metadata stuff? The InternalsVisibleTo should be fine, and I think AssemblyInfo.cs is the right place to put that. The rest of the attributes can go away.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11365436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11416855", "body": "I don't think we need the whitespace check here. I don't think it adds any value. It always comes from a code-based source so it would at most be up to _that_ code to do any trimming.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11416855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11375307", "body": "Because this is private it might as well be a `const`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11375307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11470670", "body": "Remove blank line.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11470670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11470674", "body": "Can this method be static?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11470674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11470683", "body": "If `AzureEnvToAppEnv` can be static this you can remove the lambda and just pass the method `AzureEnvToAppEnv` to the call to `SelectMany`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11470683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11565769", "body": "Just wondering - is this the behavior that we want? I would think that alerting the developer of a \"broken\" configuration would be a good thing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11565769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11565772", "body": "If only there was a built-in data type for a stack with `Push`/`Pop` methods... But there is, `Stack<T>`! :smile:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11565772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11565776", "body": "Use `i++`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11565776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11565778", "body": "Recommend changing this to use `String.Format` instead of concatenating strings because once the message is localized it'll have to be formatted anyway (string concatenation is Very Bad for localization).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11565778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11609693", "body": "Yes that sounds like exactly the behavior I would expect. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11609693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11609785", "body": ":frowning: :panda_face: (sad panda) While I do think `Stack<T>` is better because it has the correct semantics, I am fine with using `List<T>` because it ends up being easier for the job. Right tools for the right job.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11609785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11611612", "body": "I'm perfectly OK with `List<T>`, so change it only if you _want_ to change it :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11611612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11800512", "body": "BTW `Hashtable` is so .NET 1.0 - is that being used here on purpose? Normally we use `Dictionary<K,V>` in product code (though this is test code, so I'm not as worried).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11800512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11800518", "body": "BTW this string now has a bunch of leading spaces on each line - is that deliberate?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11800518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11800523", "body": "(Same is true in many of the other multi-line strings in this file.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11800523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11800530", "body": "Should verify the exception message text here as well. We want to make sure we're getting _exactly_ the `FormatException` that we expect (and not some other random exception). This might apply to some other tests as well.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11800530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11820893", "body": "Hmm, `Environment.GetEnvironmentVariables()` returns an `IDictionary`, which `Dictionary<K, V>` also implements - where would there be a cast exception? Where do we have a cast to `Hashtable`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11820893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11821227", "body": "OK :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11821227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11822750", "body": "Oh, that sucks :frowning: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11822750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11822895", "body": "Oh wait I looked at the code and I don't believe that's true. The `Dictionary<K, V>` type is apparently very smart. If you enumerate its values through `IDictionary<K,V>.GetEnumerator()` then it returns `KeyValuePair<K,V>`, but if you enumerate it though `IDictionary.GetEnumerator` then it returns `DictionaryEntry` items. I think the thing here is to cast the dictionary to the old `IDictionary` interface.\n\nOf course, maybe this is more work than it's worth...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11822895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11828336", "body": "I don't think you want a new `Cast()` method because it's running too late - it runs _after_ the enumeration has begun. Instead in theory what you want is to force the enumeration yourself to go through the \"legacy\" `IDictionary` API. I don't know of any good trick to do this, though. I would just leave the code using `Hashtable` and call it a day :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11828336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11832658", "body": "Yes that's fine! :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11832658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11886132", "body": "Per the engineering guidelines we only want InternalsVisibleTo from a product assembly to its specific unit test assembly. Is there a way to avoid this? Which type is that that we need to expose?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11886132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11886155", "body": "O I C it looks like in the configuration tests it's using all of the built-in ones combined. I think that's a good use case for a Functional Test, in which case it shouldn't be using any internals at all. If for the configuration system we need to have \"multiple config sources\" then I suggest having the unit test assembly simply have a couple of different mock implementations (not necessarily using Moq, but perhaps just hand-written).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11886155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11934013", "body": "The resource thingy that parses RESX files should have produced a method such as `Resources.Format<StringName>(p0, p1, p2, ...)`. So in this case in theory you should be able to avoid `String.Format` and just call something like:\n\n```\nthrow new FormatException(Resources.FormatError_RootMustBeAnObject(\n        reader.Path, reader.LineNumber, reader.LinePosition));\n```\n\nCheck out some other repos to see how that works.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11934013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11934052", "body": "For an example, check out:\nhttps://github.com/aspnet/WebFx/blob/e434918337271d4ae7c51a5035a36206f91d86aa/src/Microsoft.AspNet.Mvc.ModelBinding/Validation/InvalidModelValidatorProvider.cs\nLine 24, 33, etc.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11934052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005028", "body": "Remove extra space after the `(`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005048", "body": "Change `is` to `was`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005061", "body": "Maybe `A duplicate key '{0}' was found.{1}`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005076", "body": "`XML namespaces are not supported.{0}`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005086", "body": "See earlier comment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005090", "body": "`No *registered* configuration source...`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12005090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100332", "body": "`since` -> `because`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100339", "body": "(in all of them)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100499", "body": "Should this be an error? Should I be able to use the config API to create a brand new config file? That is, should I be able to \"new up\" an `IniConfig` object, set some stuff on it, and call `Commit` to create the `.ini` file? (I'm not saying it _has_ to support this, but it does seem reasonable to me.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100636", "body": "Is this `Data` the current in-memory copy of data? If so, does that make the `Commit` operation destructive?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100773", "body": "BTW in all seriousness at least _some_ tests need to have the content start on the first column of each line (as well as at the very start of the \"file\"). After all, that's by far the most common scenario and I want to make sure we don't have parsing bugs where things fail if there _isn't_ any whitespace :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12100773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118390", "body": "I think the \"new config\" scenario needs to be atomic - that is, we should not first create an empty file, then read it back, and then write the whole thing. Either the whole operation succeeded or the whole thing failed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118477", "body": "Revert?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118542", "body": "Hmm what exactly is going on here? Can a comment be added? Is it duplicating the config data for the purpose of committing?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118619", "body": "Use a comma `,` as the separator?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12154431", "body": "BTW you shouldn't need the `(Exception e)` if you don't use the `e`. Just do `catch {` and you'll catch all exceptions.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12154431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12259292", "body": "BTW you can use double quotes in the string literal like so: `var json = @\"foo\"\"bar\"\"baz\";` and the double-double-quotes get replaced with single-double-quotes, like so: `foo\"bar\"baz`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12259292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12382421", "body": "Or why make it config-specific? Can it go in one of our awesome `Microsoft.Framework.*` locations?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12382421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435248", "body": "`should be` --> `are`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435274", "body": "And remove \"some\" in \"some other keys\" (it is redundant)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435281", "body": "New text: `The switch mappings contain an invalid switch '{0}'.`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435350", "body": "New text: `The short switch '{0}' is not defined in the switch mappings.`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435406", "body": "Take in `IDictionary<K,V>`. In general you want to take in the most general thing you can (e.g. interface) but return the most specific thing you can (which in this case is nothing, but would otherwise generally also be a dictionary).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435427", "body": "The `else` isn't needed (it doesn't do anything).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435443", "body": "Same here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435628", "body": "Instead of doing basically the same work twice, can this function construct the \"safe\" dictionary as it does its work? That is, this function could instead be `GetValidatedSwitchMappings` or something and just adds the items to a validated dictionary one by one, and throws if it sees a dup.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435948", "body": "This has _potential_ for flakiness because hashsets and dictionaries don't guarantee order. You have to sort the data to guarantee order. We might want to sort things here _and_ in the product code wherever we return a list of things to ensure stability of the error messages.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12435948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12801602", "body": "BTW for a unit test like this it is important to not mix different config sources. This test is testing the configuration object itself and verifying that it touched only the last config source. As such, I would recommend changing this test to just create 3 in-memory config sources and verify that behavior. By mixing different configuration sources there is fragility and complexity introduced into this test. In general a unit test should be able to fail due to only one primary reason. In this case there could be 4 or 5 big reasons as to why the test could fail (bug in config, bug in any of the sources, etc.).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12801602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12801622", "body": "Might want to add a code comment here saying why we do this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12801622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12981001", "body": "In XUnit you can put your setup in the `ctor` and the teardown in a `Dispose` method (implement the `IDisposable` interface).\n\nThis is better than doing it manually because the code is currently missing a try-catch. If a test fails, dirty files will be left on disk.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12981001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12973538", "body": "`[NotNull]`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12973538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12973634", "body": "Should give this a more specific type name. Otherwise we'll end up with the same type name (namespace + type) in like 50 assemblies. Maybe `OptionsSetupServiceCollectionExtensions`? Kind of a mouthful, I suppose, so something shorter might be nicer.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12973634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12973670", "body": "Remove space after `typeof` (and in other places too).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12973670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12973912", "body": "Can/should this be changed to `Lazy<T>` or something? Or perhaps a double-null-check lock? (Admittedly, I don't know why this needs to be thread-safe at all, so I'm making an assumption here.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12973912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12974035", "body": "Should log bugs for all \"todos\". And recommend changing this comment to start with \"todo:\" so that it's searchable.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12974035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12974129", "body": "Does this include a base class's properties? E.g. I might have a `DataOptions` base class with a few properties and from which I derive a `SqlServerOptions` and a `SqlLiteOptions` that each add custom properties. Will this include everything?\n\nEither way should add a unit test to verify that it does/doesn't find the base class's properties.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12974129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12974181", "body": "Need to add unit tests for `CanWrite=false`. Also, what happens if there's a setter but it's private/protected/internal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12974181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021617", "body": "@lodejard @davidfowl speak now or forever hold your peace...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13021617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13735630", "body": "Indent\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13735630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13735641", "body": "Indent\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13735641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13735739", "body": "This seems kind of hacky... this won't really preserve the syntax that they initially had in their file, will it? Like it I started with an empty-ish file and after loading config I overwote it to have:\n\n``` ini\n[newsection]\nnewkey=newvalue\n```\n\nAnd then save my config on top of it, won't I get something like this:\n\n``` ini\n# some stuff from memory config\n[]\nnewsection:newkey=newvalue\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13735739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13787292", "body": "Let's discuss again next week. I'm still a fan of:\n1. Throw by default if the config file has changed underneath us\n2. Perhaps add an overload called `Commit(bool overwrite)` if the developer \"knows what they're doing\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13787292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/14383216", "body": "Tpyo in the method name (Committale).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/14383216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/14383233", "body": "Won't pass PoliCheck. Call it `dict` :trollface:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/14383233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25443560", "body": "Not sorted :trollface: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25443560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25443681", "body": "1. Do we need an extension method for this? If so, why is it in a test? Wouldn't this benefit everyone? Or is it really needed at all?\n2. If we keep it, the naming pattern for extension methods is here: https://github.com/aspnet/Home/wiki/Engineering-guidelines#extension-method-patterns\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25443681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25443759", "body": "Sort\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25443759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25443911", "body": ":smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25443911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25454250", "body": "It still seems somewhat dubious to me to have this extension method just for our unit tests, no? Is there a reason the main API is too difficult to use? Should the `Data` property go back to being public?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25454250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25491867", "body": "Eh...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25491867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666816", "body": "varrrrrrr\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666874", "body": "https://github.com/aspnet/Configuration/issues/142 said to move this to a `.Internal` sub-namespace, not to make the type `internal`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666914", "body": "Hmm any reason not to use a `foreach`? There are a ton of calls to `.ElementAt()`, which is kind of a gross method to call.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666945", "body": "Oh nevermind I see we need to look at the \"next\" arg here. perhaps that means that `IEnumerable<T>` is the wrong contract. Why not use ICollection or something stronger?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666958", "body": "Or IReadOnlyList/Collection or whatever if we want immutability.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666779", "body": "If we're going to add links to this section we should probably name it more appropriately because neither of these links are official (even though Louis works here :smile: ). Can we rename this heading to something like `## Blog posts` so that it doesn't sound too official?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25666779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25901970", "body": "From other commit:\n\nI think in C# 6 you can do `IEnumerable<T>` params, right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25901970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27338692", "body": "Any reason this ctor is internal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27338692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27338739", "body": "Change to: `The configuration file '{0}' was not found and is not optional.` (in all the resx files)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27338739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27901215", "body": "Shared project, doesn't ship.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27901215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "moozzyk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Configuration/commits/4fd6fb1933960f99362fa2dae71af85a429a71e4", "message": "Removing unneeded reference\n\nIt was causing the project to run as tests which was incorrect and the reference is not needed."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "heku": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/725", "title": "Return out value instead of querying from dictionary again", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "duckblaster": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/720", "title": "Allow changing the alternative keyDelimiter in environment variables", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JefferyZh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/714", "title": "Reduce the times of calling Environment.GetEnvironmentVariable", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ChristopherHaws": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/697", "title": "Add additional connection string prefixes for Azure AppServices", "body": "Azure AppServices has a dropdown list for different connection string types. This PR adds support for the 7 missing connection string types:\r\n* REDISCACHECONNSTR_\r\n* APIHUBCONNSTR_\r\n* DOCDBCONNSTR_\r\n* EVENTHUBCONNSTR_\r\n* NOTIFICATIONHUBCONNSTR_\r\n* POSTGRESQLCONNSTR_\r\n* SERVICEBUSCONNSTR_", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "loudej": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39769154", "body": "Conceptual variants\n\n``` xml\n<settings Port=\"8008\">\n  <!-- \"Data:DefaultConnection:ConnectionString\" \"awefoijawefioaweif\" -->\n  <!-- // Data:DefaultConnection:Provider etc -->\n\n  <Port>8008</Port>\n\n  <Data>\n    <DefaultConnection>\n      <ConnectionString>awefoijawefioaweif</ConnectionString>\n      <Provider>SqlClient</Provider>\n    </DefaultConnection>\n    <Inventory>\n      <ConnectionString>xofjo239fjo3jf</ConnectionString>\n      <Provider>MySql</Provider>\n    </Inventory>\n  </Data>\n\n  <Data>\n    <DefaultConnection\n      ConnectionString=\"awefoijawefioaweif\"\n      Provider=\"SqlClient\" />\n    <Inventory\n      ConnectionString=\"xofjo239fjo3jf\"\n      Provider=\"MySql\" />\n  </Data>\n\n  <Data>\n    <DefaultConnection Provider=\"SqlClient\">\n      <ConnectionString>awefoijawefioaweif</ConnectionString>\n    </DefaultConnection>\n    <DefaultConnection Provider=\"MySql\">\n      <ConnectionString>xofjo239fjo3jf</ConnectionString>\n    </DefaultConnection>\n  </Data>\n\n  <Data Name=\"DefaultConnection\" >\n    <ConnectionString>awefoijawefioaweif</ConnectionString>\n    <Provider>awefoijawefioaweif</Provider>\n  </Data>\n  <Data Name=\"Inventory\" >\n    <ConnectionString>MySql</ConnectionString>\n    <Provider>xofjo239fjo3jf</Provider>\n  </Data>\n\n  <Data Name=\"DefaultConnection\"\n        ConnectionString=\"awefoijawefioaweif\"\n        Provider=\"SqlClient\" />\n  <Data Name=\"Inventory\"\n        ConnectionString=\"xofjo239fjo3jf\"\n        Provider=\"MySql\" />\n\n</settings>\n\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39769154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39769640", "body": "Added two notes, then :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39769640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39816638", "body": ":no_good: the original spec from #17 is incomplete\n\n`SQLAZURECONNSTR_db1`=`cs1` should result in the pairs `Data:db1:ConnectionString`=`cs1` and `Data:db3:ProviderName`=`System.Data.SqlClient`\n\n`SQLCONNSTR_db2`=`cs2` should result in the pairs `Data:db2:ConnectionString`=`cs2` and `Data:db2:ProviderName`=`System.Data.SqlClient`\n\n`MYSQLCONNSTR_db3`=`cs3` should result in the pairs `Data:db3:ConnectionString`=`cs3` and `Data:db3:ProviderName`=`MySql.Data.MySqlClient`\n\n`CUSTOMCONNSTR_db4`=`cs4` should result in the single pair `Data:db4:ConnectionString`=`cs4`\n\nSee also https://github.com/projectkudu/kudu/blob/master/Kudu.Core/Infrastructure/SettingsProcessor.cs provided by @davidebbo \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39816638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579456", "body": "Added `#warning TODO - this is a placeholder algorithm which must be replaced`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579459", "body": "these are placeholders until [NotNull] is available\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579645", "body": "yep, after followup sounds like investing Get and Enumerate methods with the ability to stop data will cover this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579656", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579665", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579672", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5579672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293247", "body": "Yeah, even if it's not ini file format it should have a name to disambiguate it from other file formats. Like SettingsFileConfiguration\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293274", "body": "Should be called Configuration instead of ConfigurationContainer. Doesn't need to implement the interface. Interface should be named IConfigurationSource or IConfigurationProvider.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293395", "body": "straw man, hierarcy like registry structure, flatten paths, with an established delimiter like :\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293587", "body": "value = Get(key) representation\n\n```\nGet(\"Databases:Default:ConnectionString\") == \"aiwfhawilfhlwiefhawilefhlaeihf\"\nGet(\"Databases:Default:Provider\") == :SqlClient\"\nGet(\"Databases:Employees:ConnectionString\") == \"r1237hofijqo3irjqo23r\"\nGet(\"Databases:Employees:Provider\") == \"SqlClient\"\n```\n\nini file representation\n\n```\n[Databases:Default]\nConnectionString=aiwfhawilfhlwiefhawilefhlaeihf\nProvider=SqlClient\n\n[Databases:Employees]\nConnectionString=r1237hofijqo3irjqo23r\nProvider=SqlClient\n```\n\njson file representation (?)\n\n```\n{\n  \"Databases\" {\n    \"Default: {\n      \"ConnectionString\":\"aiwfhawilfhlwiefhawilefhlaeihf\",\n      \"Provider\":\"SqlClient\"\n    },\n    \"Employees\": {\n      \"ConnectionString\":\"r1237hofijqo3irjqo23r\",\n      \"Provider\":\"SqlClient\"\n    }\n  }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9293587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9352699", "body": "The interface assumes the configuration object, and the souces that are added, are implementing the same contract. In the end they won't.\n\nWe should consider changing the namespace, or changing the class to be called Settings. The app does know the difference between a single config and a collection and there's no reason to make it look like the two layers are fungible.\n\n```\nvar conf = new Configuration();\nconf.AddIniFile(\"app.ini\");\nconf.Add(new CustomSource());\nconf.AddOverrides(new Dictionary<string,string>() {\n  {\"Foo:Bar\", \"forty-two\"}\n});\n```\n\nMethods to add particular sources should be extension methods and return the collection class.\n\n```\nvar conf = new Configuration()\n  .AddIniFile(\"app.ini\")\n  .Add(new CustomSource())\n  .AddOverrides(new Dictionary<string,string>() {\n    {\"Foo:Bar\", \"forty-two\"}\n  });\n```\n\nTo be honest, I'd even be okay dropping the \"Add\" from the ext method name, but I'm sure we'll want to keep the verb-centricity.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/9352699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333249", "body": "they're acting as part of an external assembly, so i'm not sure if they can be\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333253", "body": "was pasted from the source of truth, in any case\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333263", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333271", "body": "fragment left from a class-move... removing\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/10333271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11359674", "body": "using statement around FileStream\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11359674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11359733", "body": "put \"TODO: ...\" in front of exception messages, so we can find them when we sweep for localization\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11359733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ChengTian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39999794", "body": "@loudej The new implementation based on a complete spec is committed. Please help to review when you have time.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/39999794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40430279", "body": "Folder names are already changed:\nMicrosoft.AspNet.Configuration.Json -> Microsoft.AspNet.ConfigurationModel.Json\nMicrosoft.AspNet.Configuration.Json.Test -> Microsoft.AspNet.ConfigurationModel.Json.Test \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40430279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40516122", "body": "@loudej Please help to review when you have time. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40516122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40516349", "body": "@Eilon @loudej Please help to review when you have time. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40516349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40623707", "body": "@davidfowl Please sign off if you think it is Ok.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/40623707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41081661", "body": "Makes sense. @lodejard please sign off is you find the code cleaning here Ok.\n\nI will start a new PR referencing discussions in this PR. Any further discussion regarding the possible \"less is more\" approach should happen in that PR.\n\nBTW, the short/long switches mapping idea is great and developers will like it :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41081661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41202210", "body": "Making all interfaces assembly neutral caused some problems and we reverted the change as a temporary work around (see #36 )\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41202210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41227474", "body": "Hi @lodejard , considering that we have colons in configuration keys, I guess `--hello:world` and `/hello:world` are not good formats to follow. Think about `--Data:DefaultConnection:ConnectionString:ThisIsValue`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41227474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41228041", "body": "Ok. I'll go ahead and implement support for the additional two formats.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41228041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41233250", "body": "@lodejard  please sign off so that I can add further code based on change in this branch.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41233250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41312257", "body": "@Eilon I checked the code and it's doing all string comparisons with `OrdinalIgnoreCase`.\n\n@kirthik could you please dump all your environment variables in azure environment by typing\n\n```\nset > env_vars.txt\n```\n\nin your prompt and send the generated env_vars.txt to me?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41312257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41330285", "body": "Thanks to @kirthik 's prompt help and I just fixed the problem.\n@Eilon ,please sign off my patch at your earliest convenience.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41330285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41414395", "body": "Thanks to @pranavkm 's help, I learned usage of new resource code generator.\n@Eilon please help to review when you have time.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41414395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41416756", "body": "@Eilon , I fixed problems based on code review. Seems I can learn more than coding here as a non-native speaker :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41416756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41732449", "body": "Made changes based on @Eilon 's code review.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41732449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41740783", "body": "Thank you @Eilon for the patient and thorough review :smile: . Here are the latest changes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41740783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41743436", "body": "Thank you! The switch mapping will be implemented in another PR.\n\nBTW, seems the `OptionModel` class is almost the same thing as `Dictionary`. Can we use `Dictionary` instead of `OptionModel`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41743436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41748182", "body": "Please give steps to reproduce the problem.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41748182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41750808", "body": "It's already implemented. But thank you for the reminder and I should have added some unit tests for the case-insensitive cases.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41750808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42258924", "body": "Thank you @Tratcher , I just corrected the namespace.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42258924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42861171", "body": "Got it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42861171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42988440", "body": "The scenario mentioned by @lodejard  makes sense. However the method name `Commit()` doesn't give developers any clue that it only writes the last committable source back to file.\n\nI would suggest that we have two methods, `CommitAll()` and `CommitLast()`, in `Configuration` (and `IConfiguration`), instead of a single ambiguous `Commit()`. @lodejard @Eilon do you guys like it?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42988440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43247304", "body": "My original thought was: because currently `Configuration.Set(key, value)` updates all config sources that have given \"key\", if we only commit the last one, the effect of `Configuration.Set(key, value)` will only be reflected in one config file, and all other updates are lost.\n\nBut seems the fact is that @lodejard also means `Configuration.Set(key, value)` should only updates the last config source. So you are right, it is unreasonable to duplicate all data to all writeable config sources.\n\nThank you for pointing it out. I will modify `Configuration.Set()` in another PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43247304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43926386", "body": "If we apply .Set() to every source and only .Commit() the last committable one, the effect of .Set() on all other sources will be lost. I thought it was kind of inconsistency. However, it's all about tradeoffs.\n\nI will follow @lodejard 's suggestion and keep the logic in `Set()` unchanged.\n\nThank @Eilon for detailed explanation on unit test strategy. I will improve the unit test in another PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43926386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44040041", "body": "Accidently deleted the branch. Reopen.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44040041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44041417", "body": "@Eilon , revised based on your and @davidfowl 's feedbacks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44041417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44046662", "body": "Tried squashing several commits into one before rebase and it caused some problem. This branch was already merged but GitHub cannot detect it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44046662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44700639", "body": "I guess we cannot do it with different config providers easily, but the feature @davidfowl mentioned is really desirable. So one possible solution is that we add a flag field into `CommandLineConfigurationSource`. The user can do something like:\n\n``` c#\nvar config = new Configuration();\nconfig.AddCommandLine(overrideDuplicateKey: true);\n```\n\nThe `overrideDuplicateKey` flag is false by default.\n\nCommand-line arguments are always ordered and the value nearer to the rear wins.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44700639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44991148", "body": "We already have it: https://github.com/aspnet/Configuration/blob/dev/src/Microsoft.Framework.ConfigurationModel/ConfigurationExtensions.cs#L35\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/44991148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45163277", "body": "I will work on this issue\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45163277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47407192", "body": "@Eilon , a default in-memory config provider doesn't affect commit operation because in-memory config provider is not committable and we only write the last committable provider out.\n\nThe only problem of having default in-memory provider is that, when a user iterates all providers in a configuration object, he will see an provider not added by him. This can be addressed by adding explanation in documentation.\n\nIf you think it's Ok, I can take care of this issue.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47407192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47564161", "body": "@davidfowl , we do have `Configuration.TryGet()`.\n\nBy following @lodejard 's suggestion, a user cannot do `Configuration.Set()` when there is no source and the confusing scenario mentioned by @rynowak cannot happen. So I guess we can make empty Configuration return null when there is no source.\n\nThen the only improvement I am going to make is that `Configuration.Set()` throws when there is no source.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47564161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/55310661", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/55310661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69667876", "body": "This is already implemented\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69667876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69668654", "body": "We don't see any request for `Configuration.Remove(key)` operation. If we don't need removal operation, this issue is invalid.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69668654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69670061", "body": "Since our key delimiter is always `:`, the delimiter parameter mentioned above is not necessary.\n\nThis is feature is already implemented as `IConfiguration.GetSubKeys(key)`. Here the `key` parameter is the prefix we want to use.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69670061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70014861", "body": ":shipit: after using vars.\n\nThanks for fixing it!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70014861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/72554683", "body": "Why is this PR targeting master branch? I have never worked on master branch.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/72554683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/72573248", "body": "Never mind, @muratg explained it to me. I didn't know master branch is last release branch.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/72573248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11306554", "body": "I thought about it but I decided to follow Louis' (@lodejard) approach in his implementation of `IniFileConfigurationSource`.\n\nI guess the point here is that `JsonConfigurationSource` (and all other kinds of `ConfigurationSrouce`) should not be exposed to external developers and be only used by our methods like `AddJsonFile()`. So it is guaranteed that we don't pass a null pointer to the constructor. If I am correct, should we change modifier of all `ConfigurationSource` to internal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11306554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11308354", "body": "Yes, reader is guaranteed to be `JsonTextReader` and `JsonTextReader` is guaranteed to implement `IJsonLineInfo`. See http://james.newtonking.com/json/help/index.html?topic=html/T_Newtonsoft_Json_JsonTextReader.htm\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11308354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11308734", "body": "Just checked and you are right. They should be public. I didn't notice we have\n\n```\nIConfigurationSourceContainer.Add(IConfigurationSource configurationSource)\n```\n\nI will add error checking in a separate PR. Moreover, if they are public APIs, I should make the signatures well-commented in next PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11308734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309020", "body": "Seems we have same problems in `IniFileConfigurationSource`. I will fix them together in another PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11309020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11312682", "body": "Just found that if I declare the `reader` with\n\n```\nusing (var reader = new JsonTextReader(new StreamReader(stream)))\n```\n\ninstead of\n\n```\nusing (JsonReader reader = new JsonTextReader(new StreamReader(stream)))\n```\n\nI don't even need a casting here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11312682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11312947", "body": "Sure. I just added asserts for `Data.Count`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11312947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11313419", "body": "Should we call `data.Clear()` before throwing exceptions? Do we allow developers to get a partially loaded config file if they catch and consume the exception? I guess No? @Eilon @davidfowl \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11313419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11316414", "body": "Yes, you are right. I was wondering why we call `ReplaceData(data)` rather than manipulate `base.Data` directly. Nice design.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11316414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11365037", "body": "My unit tests need access to `JsonConfigurationSrouce.Load(Stream stream)`, which is an internal method in Configuration.Json project. If I delete this file, I have to move\n\n```\n[assembly: InternalsVisibleTo(\"Microsoft.AspNet.Configuration.Json.Test\")]\n```\n\nfrom this file to JsonConfigurationSource.cs. Is it Ok?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11365037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11495537", "body": "Yes, it can be static. I will follow your suggestion above.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11495537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11599754", "body": "Actually I knew there is a `Stack<T>` class, which should be intuitively used here. However, I made some tradeoffs here and decided to use `List<T>`.\n\nIf use `Stack<T>`, when we want to concatenate strings in the stack, we have to reverse it first:\n\n``` C#\nstring.Join(Constants.KeyDelimiter, prefixStack.Reverse<string>());\n```\n\nSince the underlying data structure of `Stack<T>` is a dynamically growing array instead of a linked list (exactly same as `List<T>`), using `Stack<T>` instead of `List<T>` introduces nothing but overheads with an extra `Reverse()`.\n\nI also checked source code of path/prefix tracking in Json.NET, they use `List<T>` instead of `Stack<T>` to implement a very similar feature.\n\nOne thing I admit is that using Stack<T> improves readability a little bit since you have \n\n``` C#\nprefixStack.Pop();\n```\n\ninstead of\n\n``` C#\nprefixStack.RemoveAt(prefixStack.Count - 1)\n```\n\nwhen popping the last element.\n\nDo you still vote for `Stack<T>`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11599754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11600621", "body": "I am following the exactly same behavior in `IniFileConfigurationSource`. @loudej , could you please confirm the correct behavior when key is duplicated?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11600621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11602570", "body": "Just talked to @loudej and confirmed that we should throw an exception if duplicated keys appear in one configuration source. For duplicated keys appear in different configuration sources, the new ones should override old ones. I will fix the wrong behavior in `IniFileConfigurationSource` in another PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11602570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11610083", "body": "Ok, let's use `Stack<T>`. Thank you for letting me know your thoughts. Now I have a strategy to follow when making trade off between readability and performance :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11610083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11817156", "body": "Yes, it makes the code look good and tests files with leading whitespaces by the way :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11817156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11820110", "body": "Yes, we have to use `Hashtable` here.\n\nThe `EnvironmentVariablesConfigurationSource.Load(IDictionary)` (called below in line 21) is supposed to consume an \"IDictionary\" object returned by `Environment.GetEnvironmentVariables()`. However, `Environment.GetEnvironmentVariables()` returns an instance of `Hashtable`, rather than `Dictionary<string, string>`.\n\nSo we have to fake the environment variable dictionary with `Hashtable`, instead of `Dictionary<string, string>`. Otherwise we will get an \"Invalid Cast\" exception in some later Linq operations.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11820110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11828184", "body": "Unfortunately, `Cast<T>()` is not smart enough to use the clever implementation you mentioned :frowning: \n\nPlease check the implementation of `Cast<T>()` [1]. It implicitly casts  our dictionary from `IDictionary` to non-generic `IEnumerable` (when we pass the dictionary as an argument) before enumerating.\n\nBut thank you for the excellent hints, I guess I can write my own `IEnumerable<DictionaryEntry> Cast(IDictionary)` method here.\n\n[1] http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs#27bb217a6d5457ec#references\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11828184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11828536", "body": "Ok, I'll leave it using `Hashtable`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11828536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11831796", "body": "I think it's much easier to verify exception message after I make all strings resources. Can I fix this one and all other test cases in a batch after resourcing all strings?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11831796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11833005", "body": "Cool. Seems I don't need to make any further modification. Please sign off so that I can start further tasks based on this branch :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11833005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11822301", "body": "`Hashtable` is a collection of `DictionaryEntry`, while `Dictionary<K, V>` is a collection of `KeyValuePair<K, V>`.\n\nThe implementation of `Load(IDictionary)` is:\n\n``` C#\ninternal void Load(IDictionary envVariables)\n{\n    ReplaceData(envVariables\n        .Cast<DictionaryEntry>()\n        .SelectMany(AzureEnvToAppEnv)\n        .Where(entry => ((string)entry.Key).StartsWith(_prefix, StringComparison.OrdinalIgnoreCase))\n        .ToDictionary(\n            entry => ((string)entry.Key).Substring(_prefix.Length),\n            entry => (string)entry.Value,\n            StringComparer.OrdinalIgnoreCase));\n}\n```\n\nNote that we have to perform `Cast<DictionaryEntry>()` on the `Hashtable` instance (i.e. `envVariables`) before any further Linq operations. If the `envVariables` passed in is a `Dictionary<string, string>` instance, the casting should be `Cast<KeyValuePair<string, string>>()`. We cannot have unified operations on these two types.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11822301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11912705", "body": "I wanted to cover all configuration sources. But you are right, I should have done it in a functional test.\n\nConfiguration sources in `Microsoft.AspNet.ConfigurationModel` project are enough for unit tests and I will simply delete the usage of external configuration sources (i.e. JsonConfigurationSource & XmlConfigurationSource).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/11912705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12104728", "body": "Nice point. I agree it's reasonable to allow users to create config files via the config API.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12104728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12104792", "body": "Yes, my stupid mistake..\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12104792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118890", "body": "Ok, I will add some comments here. Because we cannot write to a file when we are reading it, the new contents of the config file is cached in a `MemoryStream`. Later we overwrite the config file with cached new contents, after we finish reading the config file.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12118890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12287417", "body": "That's quite handy :cool: I'm now a big fan of C# :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12287417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12454307", "body": "I followed your suggestion above. So now the items in switch mappings are added & checked one by one, and we throw an exception as soon as we see a dup. So there is only one dup reported by an exception and we don't need to sort a list here. Please see the updated unit test in the follow-up commit.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/12454307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13762410", "body": "This hacky logic is designed for the scenario where we have a config.ini file\n\n``` ini\n[section]\nkey=val\n```\n\nand then we do\n\n``` c#\nvar config = new IniFileConfigurationSource(\"config.ini\");\nconfig.Load();\nconfig.Set(\"newkey\", \"newval\");\nconfig.Commit();\n```\n\nNote that if we simply append the new key-value pair at the end, we get\n\n``` ini\n[section]\nkey=val\nnewkey=newval\n```\n\nWe add \"newkey\" into \"section\" but that's not the user's intention. So I use a empty section to disrupt the ongoing effect of previous section:\n\n``` ini\n[section]\nkey=val\n[]\nnewkey=newval\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13762410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13762600", "body": "It also reveals a problem when you add a new key-value pair and don't have a template to follow. If we start with an empty file and after loading config.ini I add a new pair\n\n``` c#\nconfig.Set(\"key1:key2:key3\", \"val\");\n```\n\nwe don't know whether the user wants\n\n``` ini\n[key1]\nkey2:key3=val\n```\n\nor\n\n``` ini\n[key1:key2]\nkey3=val\n```\n\nSo I simply make it\n\n``` ini\nkey1:key2:key3=val\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13762600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/22980465", "body": "var\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/22980465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/22980473", "body": "var\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/22980473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26990514", "body": "``` c#\napp.Name = \"user-secret\"\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26990514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26990784", "body": "use `c.Description = \"...\"` to add description for each command\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26990784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26991051", "body": "I would suggest we follow the convention used by other command-line tools like `dnu`, use `[name]` to represent argument value name\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26991051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26991096", "body": "Same comments for all arguments below\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26991096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lodejard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41078635", "body": "Checking other examples... Various formats we want to support by default:\n\n`--hello world` becomes `[\"hello\"] == \"world\"`\n`--hello:world` same\n`--hello=world` same\n`/hello world` becomes `[\"hello\"] == \"world\"`\n`/hello:world` same\n`/hello=world` same\n\nThe command line arguments source should also have a constructor that take an options model class. That options model class should enable the used to map long or short switches to configuration keys, and also define short names, if the user wants to determine those exactly.\n\n```\nnew OptionModel {\n  new OptionItem(\"-p\", \"port\")\n  new OptionItem(\"--port\", \"port\")\n  new OptionItem(\"--db\", \"Data:DefaultConnection:ConnectionString\")\n}\n```\n\nIn this case, options starting with `--` are long option names, and should also match `/`. In other words, `--db 5000` and `/db 5000` both match the `--db` option\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41078635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41079038", "body": "For quotes around values, verify if those are removed or not before they are passed into the args string[]\n\nIf they are removed before being passed into the string[], then we don't need to remove them ourselves. So quoted options would look like:\n\n`--hello \"the world\"`, `\"--hello:the world\"`, or `\"--hello=the world\"`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41079038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41227707", "body": "Good point - we should look for only '=' in the switch to support `--hello=world` and `--hello world`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41227707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41229060", "body": "@Eilon the variants aren't invented - it's just the combinations of standard `-f` and `--foo`, and that the `=` in `--foo=bar` is optional, and that cmdline understands `\"`s\n\nThat said, @ChengTian did point out that `--foo:bar` causes problems so we should drop that.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41229060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41742956", "body": ":shipit: but what about the switch format feedback?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41742956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42984629", "body": "Actually, there were reasons to only commit the last committable source. If you have a \"global\" file and an \"app\" file any changes you set and commit should only write to the \"app\" file.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42984629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43669683", "body": "Hmm... This is a tricky one, and may seem inconsistent, but wouldn't to apply .Set() to every source and only .Commit() the last committable one?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43669683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47471717", "body": "I think you'd want the throwing to come from the Configuration rather than from a default ConfigurationSource... That is, Configuration methods would throw if there are no sources to handle that category of operation. Configuration.Set would throw if there are zero sources, Configuration.Commit would throw if there are no sources that implement commit... I guess that just leaves a choice - should .Get throw or return empty when there are zero sources? Could be either, but returning empty would be convenient if you wanted to pass an empty Configuration someplace that only called Get operations.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47471717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/48411991", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/48411991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/5567789", "body": "Sure\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/5567789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574976", "body": "You need to re-acquire a new one once it's tripped... Different instance... So property seemed bad cuz the \"get\" isn't really idempotent \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13574976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022106", "body": "Nope, TOptions is a model, not a service, and should not be resolved or activated.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13022106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13023135", "body": "Yep, but a controller is a worker stereotype, short-lived and used in a single activity. Model stereotype on the other hand are long-lived, and used by everyone simultaneously. Best to bias towards poco and simple values only.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/13023135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "anpete": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41195218", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41195218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "rustd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41750503", "body": "Here you go!\n{\n    \"DefaultAdminpassword\": \"YouShouldChangeThisPassword\",\n}\n\nconfig.Get(\"DefaultAdminpassword\") and config.Get(\"DefaultAdminPassword\") should both work\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41750503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43591318", "body": "Actually Eilon's suggestion does work. I had a solution with a Console App and Web App and I was able to read the shared config from Console App using the following code. This is what I was looking for\n\n```\nvar configuration = new Configuration();\nconfiguration.AddJsonFile(\"..\\\\shared\\\\Config.json\");\nConsole.WriteLine(configuration.Get(\"Data:DefaultConnection:ConnectionString\"));\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/43591318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79214022", "body": "@glennc we need to bring this in for Beta4 per our discussion on managing keys\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79214022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bricelam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41964774", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/41964774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45302617", "body": "Strictly speaking, JSON doesn't actually support comments. :trollface: However, Json.NET allowed single-line comments in version 6.0.1. It looks like Microsoft.Framework.ConfigurationModel.Json is still using version 5.0.8.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/45302617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/55310209", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/55310209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/56243545", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/56243545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75802042", "body": "(This depends on aspnet/EntityFramework#1682)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75802042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "rynowak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42258182", "body": ":+1: I was about to have a freak out\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42258182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53627224", "body": "@davidfowl sorry for the confusion, updated the title and comments\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53627224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/54185598", "body": "/cc @sornaks \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/54185598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "Praburaj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42515670", "body": "cool - Cleaner code. Let me try\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42515670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42698130", "body": "Looks good to me :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/42698130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69230965", "body": "Right now both single line and multiline comments work on json files.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69230965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69231886", "body": "This is complete. Functional tests are running in CI. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69231886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69677125", "body": "This looks like a dup of https://github.com/aspnet/Configuration/issues/106\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69677125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69677906", "body": "Looks like there are some differences between these bugs. Keeping both open until investigated. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69677906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69799941", "body": "I don't know what changed. But I can see this works now. I tried to new up a `Configuration` and did `AddJsonFile()` from a controller action and it seems to work fine. @borgdylan Could you try with latest bits?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69799941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70017195", "body": "@ChengTian fixed both `var`. Updated PR. Merging the change now. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70017195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70017254", "body": "Fixed. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70017254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70017294", "body": "Fixed now. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70017294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74108924", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74108924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83709916", "body": "This bug will depend on https://github.com/aspnet/Configuration/issues/123. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83709916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85218025", "body": "FYI @davidfowl \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85218025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85223304", "body": "@rustd \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85223304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85249275", "body": "Good points @ChengTian. Fixed all of those and updated the PR. Command line help looks like below. \n\n```\nUsage: user-secret [options] [command]\n\nOptions:\n  -?|-h|--help  Show help information\n  -v|--verbose  Verbose output\n\nCommands:\n  set     Sets the user secret to the specified value\n  help    Show help information\n  remove  Removes the specified user secret\n  list    Lists all the application secrets\n  clear   Deletes all the application secrets\n\nUse \"user-secret help [command]\" for more information about a command.\n```\n\nHelp for a sub-command looks like this:\n\n```\nC:\\Users\\username>user-secret clear --help\nUsage: user-secret clear [options]\n\nOptions:\n  -p|--project <PATH>  Path to project, default is current directory\n  -?|-h|--help         Show help information\n\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85249275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85328378", "body": "Cross posting a comment made in another PR (https://github.com/aspnet/Configuration/pull/162/files#r26998962)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85328378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85330342", "body": "Updated the PR addressing all feedback.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85330342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85576969", "body": "@muratg @davidfowl @loudej @anurse @ChengTian - any more comments? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85576969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26988787", "body": "I think I can lower case `Microsoft` and `UserSecrets`. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26988787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26988807", "body": "sure. I'll fix it. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26988807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26989825", "body": "Hmm. To keep it simple I'll have to assume the current OS is `Windows` if environment variable `APPDATA` is available and assume it is non-windows on its absense. We need a better way to figure out the OS. I'll file a work item in Configuration repo to update it when we have the `OSVersion` available across. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26989825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26991522", "body": "Fixed this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26991522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999748", "body": "Yeah hosting also reads webroot from project json directly. It will be helpful.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26999748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27001382", "body": "Fixed. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27001382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27001468", "body": "I'm going to file a work item to move this implementation somewhere else. Per the discussion we had for now this lives here. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27001468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27001757", "body": "Done. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27001757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26780237", "body": "Sort namespaces. System namespaces should be at the top. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26780237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26782290", "body": "+1. We should throw upfront if a compulsory but non existing configuration is added. And we should also always add the configuration source for an optional configuration whether or not the file exists. This will make sure that for an optional configuration for which the config file is physically added only after the application load we read the configuration on doing a `Configuration.ReLoad()`. So the code should be something like this: \n\n```\nif(!optional && !File.Exists(fullPath))\n{\n    throw;\n}\n\nconfiguration.Add(new JsonConfigurationSource(path));\n```\n\nThe `Load` method of the different configuration sources should be aware if the current configuration source is optional and should ignore loading if the file does not exist.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26782290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26782322", "body": "sort namespaces. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26782322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27153217", "body": "Can we use `[NotNull]` attribute for path instead? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27153217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27153416", "body": "`[NotNull]`? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27153416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27228917", "body": "I think that's fine. The existing code looks good. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27228917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27322237", "body": "you have to exclude this change/commit. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27322237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27408555", "body": "A `string.Format` is missing here.\n`throw new FileNotFoundException(string.Format(Resources.Error_FileNotFound, Path), Path);`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27408555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27409479", "body": "Not sure about the history. But it looks to me this can be made public. I'll filed work item https://github.com/aspnet/Configuration/issues/168 to investigate it. This can be for beta5. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27409479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27412407", "body": "hmm. This commit should not be here. I'll try to remove this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27412407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "AnthonySpowart": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47976990", "body": "Being able to deal with config.json files as valid JSON would be a far better feature than adding comments. Sure comments can be really useful but breaking a standard to add them seems out of whack with the new direction asp vNext seems to be heading in.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/47976990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "thereverand": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/51654858", "body": "It's swapping one hierarchy delimiter for the proper one in the end context. That would seem like pretty good standard behavior.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/51654858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/51703121", "body": "I know I'm way late to this party BUT...\nThis doesn't seem to be a problem with the feature, it's a problem with ini files.\n\n``` ini\n[key1]\nkey2:key3=val\n```\n\nIs the only possible result of\n\n``` csharp\nconfig.Set(\"key1:key2:key3\", \"val\");\n```\n\nUnless one were to then say ini files have sub sections, and in an ini they'd have to look like this\n\n``` ini\n[key1]\n[key1:key2]\nkey3=val\n```\n\nand throw if `[key1:key2]` appears without `[key1]` appearing **_first**_.\n\nBut thats my 2 cents.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/51703121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/57099782", "body": "Sorry for my delay. :)\nYup, it does just that. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/57099782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sornaks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53645275", "body": "Also, if multiple tests have `AppDomain.CurrentDomain.SetData(\"APPBASE\", \"basepath\");`, then the value set by one test gets overwritten by the other. Hence it would be good to remove the dependency on `AppDomain.CurrentDomain.BaseDirectory`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/53645275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "borgdylan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/54713178", "body": "This exception happens if I use a json config by newing up Configuration then adding a JSON file in some controller. However If I use it in the Startup file, the exception does not happen.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/54713178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/54714846", "body": "@davidfowl The issue is because in the Startup, `CallContextServiceLocator.Locator.ServiceProvider` is non-null, yet in controllers and other places it is (bad since the Configuration sub-system needs it). The only workaround I have found is to get an `IServiceProvider` via DI and assign it to `CallContextServiceLocator.Locator.ServiceProvider` in the constructor of each controller where configuration used and in all EF DbContexts (since I have my connection string in the config file).\n\nThe actual cause may be that `CallContextServiceLocator` uses a field named `Locator` and is declared as an ANI (if I am not wrong, ANIs should not have fields) .\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/54714846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/58697275", "body": "ping\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/58697275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69823248", "body": "I will try as soon as I have some spare time. In the mean time I had replaced using Configuration directly with a DI Injected options class.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69823248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75199692", "body": "I have been using workarounds by means of the Options framework. I haven't checked if this is still an issue.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75199692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "diegofrata": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/64426458", "body": "@AnthonySpowart what do you suggest?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/64426458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mcgear": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/65518336", "body": "After the base changes are made and a default FileConfigurationStreamHandler is created, i would like to do a second set of additions and create a new RestConfigurationStreamHandler which could be used generically with any rest endpoint and a DocDBConfigurationStreamHandler which extends RestConfigurationStreamHandler and provides support for storing configuration in DocDB.  \n\nI think the RestConfigurationStreamHandler could be put in the Microsoft.Framework.ConfigurationModel project and the DocDBConfigurationStreamHandler could go in a new Microsoft.Framework.ConfigurationModel.Azure project.  \n\nThe final addition would be an AzureBlobConfigurationStreamHandler in the Microsoft.Framework.ConfigurationModel.Azure project that uses blob as the storage for the configs.\n\nI think the major benefit to these proposed changes is the ability to easily move configuration out of source control.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/65518336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75663865", "body": "Sorry for the delay guys, got sucked back into the 9-5.  My first attempt at this was exploration and i didn't follow the Contributor guidelines for open source very well...  So i am going to get another stab at this going and will get the PR over some time this week.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75663865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76146174", "body": "Hello,\n\nSo i got started on these changes in my own fork, and have the base class and ini config source coded out.  I am trying to run the XUnit tests (new and existing), but VS 2015 doesn't find them.  I still need to code out the rest of my first set of changes, but to do so I need to run those tests to make sure that all is good.\n\nDoes anyone here have an idea of why VS 2015 isn't finding the tests in the solution?\n\nThanks for the help!\n\n-Mike\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76146174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/78848240", "body": "@muratg I was merging in the upstream dev line, and noticed all the project file extensions were updated to .xproj. These do not load in VS 2015 CTP 6 for me, and was wondering what insight you might be able to share with me. I'm close to having the changes incorporated, tested, and pull request in, just gotta get over this hurdle..  Thanks for the help.\n\nThe error i am getting on each project is:\nvNext\\Configuration\\src\\Microsoft.Framework.ConfigurationModel\\Microsoft.Framework.ConfigurationModel.xproj : error  : Value cannot be null.\nParameter name: projectMoniker\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/78848240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "muratg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/67235432", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/67235432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75169970", "body": "We are removing Commit feature, see https://github.com/aspnet/Configuration/issues/143 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75169970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75170027", "body": "We are removing Commit feature, see #143\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75170027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75170656", "body": "There's no Commit feature (See #143).   \n\nWe should consider having an overload to this method to not throw in case where the file doesn't exist.   \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75170656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75170927", "body": "@Eilon do we want this in RC1?  \n\n/cc: @GrabYourPitchforks, @danroth27 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75170927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75171015", "body": "@borgdylan is this still an issue?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75171015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75171336", "body": "Dup of https://github.com/aspnet/Configuration/issues/96\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75171336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75171827", "body": "Unless @lodejard or @davidfowl objects, we would be happy to take a PR for the base class proposal. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75171827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172036", "body": "Actually a bug tracking the previous suggestion exists: https://github.com/aspnet/Configuration/issues/123 \n\nClosing this one.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172147", "body": "@sandorfr We'd be happy to accept a PR :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172255", "body": "@lodejard What do you think about this feature request?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172440", "body": "We're removing Commit feature (#143)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75172440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77491358", "body": "@mcgear what build of VS are you using?  also, consider running tests from command line if you'd like to run all of them at once.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77491358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77491810", "body": "@sandorfr What branch were you looking at?  Commit feature was removed with this PR: https://github.com/aspnet/Configuration/pull/147/files\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77491810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77493022", "body": "@barrytang @abpiskunov any idea if tooling would be doing something differently here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77493022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77729077", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77729077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79259391", "body": "@mcgear as @tillig mentioned, this is due to our renames.  @davidfowl made the changes to make things work with OmniSharp, so perhaps you can try that.  Otherwise, you can use command line mostly, and use VS only as a fancy editor for now, until we are able to release the new tooling.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79259391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79533749", "body": "@davidfowl \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79533749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83158375", "body": "Hey @Praburaj can you have a look?  These are tooling blocking issues.\n\n/cc @rustd @DamianEdwards \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83158375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/24055629", "body": "Don't we have the released packages from master branch at nuget.org?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/24055629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25998161", "body": ".NETPortable --> core50...  /cc @davidfowl to look into this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25998161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "glen-84": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69174319", "body": "The fact that the JSON spec doesn't support comments is just plain stupid.\n\nBTW: It looks as if single-line comments are now supported in config.json \u2013 shouldn't this issue be closed?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/69174319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mikary": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70021091", "body": "We have two cases where we ran into this, in the first one we had configuration based on a class name with support for either the short or full name. The following two configurations would be equivalent:\n\n``` json\n{\n    \"ClassName\" : {\n       \"Property\" : \"Value\"\n    }\n}\n```\n\n``` json\n{\n    \"SomeNamespace.ClassName\" : {\n       \"Property\" : \"Value\"\n    }\n}\n```\n\nIn the other case, we were allowing configuration as either a property value or a key lookup, so the following two configurations would be equivalent:\n\n``` json\n{\n    \"MyClass\" : {\n        \"MySetting\" : \"Some Value\"\n    }\n}\n```\n\n``` json\n{\n    \"Data\" : {\n        \"Value\" : \"Some Value\"\n    },\n    \"MyClass\" : {\n        \"MySettingKey\" : \"Data:Value\"\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70021091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70164116", "body": "That sounds like an accurate description of the situation and I agree with your assessment on both accounts.\nDoes this look good to you, @rowanmiller ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70164116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rowanmiller": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70185278", "body": "@Eilon This is consistent with how we resolved the issues on our end too. \n\nFor context type name as key, we decided that full qualified name always wins over short name. I don't think this is too bad since if you want to guarantee that you're overriding something, just use the full name. I think there can be confusion either way, but we don't want to require full name (as it's yucky to type) and I agree that coalescing them in the config stack is probably a little too magic.\n\nHaving the feature for redirecting to another key would be great. We really only use this for connection string at the moment, and there is a well known 'name=xyz' format for connections so we're just going to use that for now... but having something general purpose like this would be great.\n\n//cc @divega @ajcvickers @bricelam @anpete \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70185278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70303340", "body": "Opened new issue for value-redirect https://github.com/aspnet/Configuration/issues/129\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/70303340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "msotclas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/72547839", "body": "Hi **@kichalla**, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    <span>\n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    </span>\n\nTTYL, MSOTBOT;\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/72547839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74171540", "body": "Hi **@jsinh**, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    <span>You've already signed the contribution license agreement. Thanks!</span>\n        <p>The agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.</p>\n\nTTYL, MSOTBOT;\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74171540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76299362", "body": "Hi **@GrabYourPitchforks**, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    <p>\n        It looks like you're a Microsoft contributor (Levi Broderick). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    </p>\n\nTTYL, MSOTBOT;\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76299362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77679802", "body": "Hi **@NTaylorMullen**, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    <p>\n        It looks like you're a Microsoft contributor (Taylor Mullen). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    </p>\n\nTTYL, MSOTBOT;\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77679802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77937704", "body": "Hi **@NTaylorMullen**, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    <p>\n        It looks like you're a Microsoft contributor (Taylor Mullen). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    </p>\n\nTTYL, MSOTBOT;\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77937704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79458200", "body": "Hi **@sandorfr**, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    <span>\n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    </span>\n\nTTYL, MSOTBOT;\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79458200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83798271", "body": "Hi **@troydai**, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    <p>\n        It looks like you're a Microsoft contributor (Troy Dai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    </p>\n\nTTYL, MSOTBOT;\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83798271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sandorfr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74075844", "body": "Yes optional config files would be handy. I was thinking about making a pull request about this. My use case is :\nconfig.json // committed to source control and containing \nlocalConfig.json // local settings (not committed)\nEnvironment variables //  to collect Azure Web Sites settings\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74075844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76864768", "body": "@muratg Hello, I'm on it. \n\nI checked the current source code. And it appears that the easiest approach is to add a overloads to the extension methods and ignore the file if it does not exist :\n\n```\npublic static IConfigurationSourceContainer AddJsonFile(this IConfigurationSourceContainer configuration, string path, bool ignoreMissingFile)\n{\n    if (string.IsNullOrEmpty(path))\n    {\n        throw new ArgumentException(Resources.Error_InvalidFilePath, \"path\");\n    }\n\n    var fullPath = PathResolver.ResolveAppRelativePath(path);\n\n    if (!ignoreMissingFile || File.Exists(fullPath))\n    {\n        configuration.Add(new JsonConfigurationSource(path));\n    }\n}\n```\n\nBut I noticed that file based sources implement `ICommitableConfigurationSource` and with this approach it wouldn't be possible to commit the changes to the sources. Maybe more complete approach would be to add the sources as an empty one, so it would be commitable.\n\nBut some user might prefer the IgnoreIfNotExists approach while others might prefer a CreateIfNotExists approach. I considering making the third parameter an enumeration (FailIfNotExists (default), IgnoreIfNotExists, CreateIfNotExists)\n\nLet me know if an approach is better according to your guidelines and design.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76864768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77594408", "body": "@muratg my fork / branch was older than this PR :).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77594408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79462122", "body": "I updated my fork and just add submitted a PR so we can discuss it. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79462122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/82885988", "body": "I signed it a few days ago :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/82885988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85450006", "body": "Yes @glennc , ofc.\n\nI've just pushed some changes to json configuration. \n\nThere is one question. Since JsonConfigurationSource is now aware of optional files maybe be there is no need to check that in extensions methods. But checking that makes sure it throws immediately (maybe it's easier to troubleshoot?).\n\nI think there are new tests to write as well.\n\nOne more thing, I can't open the project in visual studio anymore I guess I have to wait for the next CTP?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85450006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26651926", "body": "I agree :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26651926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26773490", "body": "I renamed it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26773490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26783510", "body": "I think that makes sense too and it will be more aligned with current tests. In addition, it would work if you decide to reintroduce something similar to the commit feature later. \n\n-----Message d'origine-----\nDe : \"Praburaj Thiagarajan\" notifications@github.com\nEnvoy\u00e9 : \u200e19/\u200e03/\u200e2015 19:14\n\u00c0\u00a0: \"aspnet/Configuration\" Configuration@noreply.github.com\nCc : \"Sandor\" cyprien.autexier@gmail.com\nObjet : Re: [Configuration] Support for optional configuration files (#156)\n\nIn src/Microsoft.Framework.ConfigurationModel.Json/JsonConfigurationExtension.cs:\n\n>  namespace Microsoft.Framework.ConfigurationModel\n>  {\n>      public static class JsonConfigurationExtension\n>      {\n>          public static IConfigurationSourceRoot AddJsonFile(this IConfigurationSourceRoot configuration, string path)\n>          {\n> -            configuration.Add(new JsonConfigurationSource(path));\n> -            return AddJsonFile(configuration, path, false);\n> -        }\n>   +\n> -        public static IConfigurationSourceRoot AddJsonFile(this IConfigurationSourceRoot configuration, string path, bool optional)\n> -        {\n> -            if (string.IsNullOrEmpty(path))\n> -            {\n> -                throw new ArgumentException(Resources.Error_InvalidFilePath, \"path\");\n> -            }\n>   +\n> -            var fullPath = PathResolver.ResolveAppRelativePath(path);\n>   +\n> -            if (!optional || File.Exists(fullPath))\n>   +1. We should throw upfront if a compulsory but non existing configuration is added. And we should also always add the configuration source for an optional configuration whether or not the file exists. This will make sure that for an optional configuration for which the config file is physically added only after the application load we read the configuration on doing a Configuration.ReLoad(). So the code should be something like this: \n>   if(!optional && !File.Exists(fullPath))\n>   {\n>   throw;\n>   }\n\nconfiguration.Add(new JsonConfigurationSource(path));\nThe Load method of the different configuration sources should be aware if the current configuration source is optional and should ignore loading if the file does not exist.\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26783510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27200247", "body": "@Praburaj  I am under the impression that [NotNull] won't check for empty string. I guess this is the reason the check wasn't done that way. Do you still want me to change that?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27200247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27332698", "body": "This is not coming from me but from the current dev branch I was based on and I'm struggling getting rid of it. \nAnyways, I'm creating a new branch from release to create a clean patch. So I'm closing this pull request, and I'll submit a cleaner one.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27332698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sslava": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74248539", "body": "For now config values are stored in `Dictionary<string, string>`. If we could change it to `Dictionary<string, object>`  it could simplify support of custom data type deserialization.  At least for .json config files.  And use generic `T Get<T>()`  for values retrieval, as @Kieranties mentioned in  #130.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74248539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jsinh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74333887", "body": "Thanks !! @Eilon & @lodejard \n\nA worthy point to note here is that either this extension should be enabled or you can suggest another way I can PR with so that the `switchMappings` can be used.\n\nWithout any of those the entire `switchMappings` implementation (which IMO is good enough at this stage) is not usable at all.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74333887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74336007", "body": "Absolutely agree. I would not have PRed, if I would not have observed the `prefix` enabled extension for `AddEnvironmentVariables`.\n\nSome justice to `AddCommandLine` ctor variant was called for :neckbeard: :worried: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/74336007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76511747", "body": "Ping @Eilon & @lodejard\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76511747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76979187", "body": "My first tiny accepted PR on ASP.NET at Github. Thank you @Eilon and the team, appreciate it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76979187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25667242", "body": "Agreed, made changes accordingly. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25667242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "GrabYourPitchforks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75184863", "body": "Re: the school of thought, this sentiment is true but ignores the complexity of proper secret management. The reason encrypted config is so popular is that it often strikes the appropriate balance between good security and ease of use.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75184863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75184930", "body": "FYI, the XML config source can essentially get this for free by using the EncryptedXml class. It shouldn't be more than half dozen lines or so.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75184930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75187307", "body": "Not yet, but NetFX knows it's important, so plan for its eventual inclusion. It can be ifdefed to only desktop for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75187307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76302560", "body": "PR for this is at https://github.com/aspnet/Configuration/pull/148.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76302560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25539638", "body": "Good idea - let me experiment and get back to you.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/25539638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "blowdart": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75237281", "body": "Yes we want it in RC1.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/75237281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "Gillibald": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76985740", "body": "In my case i only get this exception if i run my project within Visual Studio. If I run it via k run the PathResolver works just fine. So it looks like its a problem about Visual Studio hooking up the k runtime.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/76985740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77978081", "body": "Ok I can confirm that the problem goes away with Beta4 and still exists in Beta3. I am using Visual Studio 2015 CTP6\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77978081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sayedihashimi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77935104", "body": "Adding @BillHiebert who may know more.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77935104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "PradeepKadubandi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77938208", "body": "What is the version of K runtime you are using? To answer this,\n\n1) Is there a sdk tag in your global.json file? if yes, what's the value of 'version' property?\n2) If the above is not applicable, what version is 'default' alias pointing to on your box? (Use kvm alias)\n\nMay be the issue will go away if you use the latest runtime? What version of VS are you using by the way?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/77938208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "adamvoss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79255338", "body": "@davidfowl Do you know where to follow the status of this for NuGet?  The linked material is about KRE -> DNX with the indication of the next VS CTP having the fix.  This app isn't using KRE currently or  VS 2015, so I gather it is NuGet that my issue.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/79255338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "troydai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83798290", "body": "@davidfowl \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/83798290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84056064", "body": "/cc @dougbu \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84056064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85375757", "body": "In the iteration 1, I made following changes:\n1. Allow the `basePath` in `Configuration` constructor to be omitted, the default value to be `null`. This is because not all the configuration source needs a _base path_. It is odd to enforce such a parameter. However, as the back channel in which `IApplicationEnvironment` is removed, the existing codes shouldn't be quietly fail. So as a new `ConfigurationSource` is added, the `path` is examined. If the `path` is not rooted, and the `BasePath` property is `null` exception will be thrown. \n2. The file path for _init_, _json_, and _xml_ will be checked before the source is created.\n\nThe major trade-off here is between: a mandatory _BasePath_, rigidly constructor and a more flexible API but fail quietly.\n\nHere's an example failure\n\nCode:\n\n```\nvar config = new Configuration();\nconfig.AddJsonFile(\"config.json\");\n```\n\nRun:\n\n```\nC:\\myk\\issue_repos\\configuration-issue160\\configuration-issue160\n$ k run\nSystem.InvalidOperationException: The path is not rooted and the BasePath is null in this IConfigurationSourceRoot\n   at Microsoft.Framework.ConfigurationModel.JsonConfigurationExtension.AddJsonFile(IConfigurationSourceRoot configuration, String path) in C:\\myk\\Configuration\\src\\Microsoft.Framework.ConfigurationModel.Json\\JsonConfigurationExtension.cs:line 18\n   at configuration_issue160.Program.Main(String[] args) in C:\\myk\\issue_repos\\configuration-issue160\\configuration-issue160\\Program.cs:line 18\n```\n\n/cc @davidfowl @glennc \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/85375757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/10674766", "body": "Shame ...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/10674766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26862964", "body": "What about in those cases a file based configuration is not required?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/26862964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27006571", "body": "will remove.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27006571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27006588", "body": "I'll allow this to be a null value and throw exception in later stage if a file based configuration source can't resolve an absolute path without the base path.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27006588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27006635", "body": "If the BasePath is in `IConfiguration` it will make it hard to resolve the absolute path when a new source is added, because by that time the `IConfigurationSourceRoot` is given only.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27006635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27008863", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27008863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27253622", "body": "/cc @davidfowl how do you like the idea?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/27253622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28071122", "body": "Manually. My tooling didn't update this file. Is it supposed to be updated automatically?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28071122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28071154", "body": "Ah, i see. I'll update.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28071154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28071166", "body": "Got it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28071166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28071174", "body": "Got it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28071174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28086765", "body": "I'll replace this file with an automatically updated one.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/pulls/comments/28086765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "dtkujawski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84037950", "body": "The existing Configuration class can be used to support this functionality by adding a new extension method.  I would fork and upload this code, but I'll wait until the kproj >> xproj change is supported by VS so that I can use the IDE (I know, lazy me).\n\nAnyway, here is a simple version of the code that will map (recursively) a config key (and subkeys) to a POCO object:\n\n``` C#\n        /// <summary>Map configuration values to object</summary>\n        /// <param name=\"key\">Base key to use for mapping</param>\n        /// <returns>Object filled with values from configuration settings</returns>\n        public static T Map<T>(this IConfiguration configuration, string key)\n        {\n            return (T)Map(configuration, key, typeof(T));\n        }\n\n        /// <summary>Map configuration values to object</summary>\n        /// <param name=\"key\">Base key to use for mapping</param>\n        /// <param name=\"type\">Type for activation of object</param>\n        /// <returns>Object filled with values from configuration settings</returns>\n        public static object Map(this IConfiguration configuration, string key, Type type)\n        {\n            if (type == null)\n            {\n                throw new ArgumentNullException(nameof(type));\n            }\n            if (string.IsNullOrWhiteSpace(key))\n            {\n                throw new ArgumentNullException(nameof(key));\n            }\n\n            object obj = Activator.CreateInstance(type);\n\n            foreach (PropertyInfo property in type.GetProperties())\n            {\n                string propertyPath = key + \":\" + property.Name;\n                object value = (property.PropertyType.IsPrimitive || property.PropertyType == typeof(string)) ? configuration[propertyPath] : Map(configuration, propertyPath, property.PropertyType);\n                property.SetValue(obj, value);\n            }\n\n            return obj;\n        }\n```\n\nI'm sure it needs to be updated to be production ready, but you get the idea and it works for my purposes.  Obviously this doesn't need to be an extension method in the future.\n(edited for formatting)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/issues/comments/84037950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kirthik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704188", "body": "@HaoK filed a bug for this to get it reviewed - https://github.com/aspnet/Configuration/issues/269\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12704188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13302320", "body": "I kept `GetPrefix` method here and in set below so we don't have to check for Path being empty or non-empty in two places. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/13302320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Fosol": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/12935301", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/12935301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Ercenk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/14624850", "body": "This breaks the scenario if there are environment variables starting with `\"__\"` on the system. If `\"__\"` is replaced with `\":\"`, the method \"Segment\" on the base class returns an empty string, which throws at ConfigurationSection ctor.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/14624850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Configuration/comments/14627626", "body": "@divega , it is on beta8. The process has an environment variable \"__COMPAT_LAYER\" (not listed when queried outside devenv). I am running VS14, Update 1 RC. Environment variable is showing in all types of projects (when queried with Environment.GetEnvironmentVariable()). \n\nI am using AddEnvironmentVariables() extension for configuration in the ASP.NET project.\n\nIt throws at https://github.com/aspnet/Configuration/blob/1.0.0-beta8/src/Microsoft.Framework.Configuration/ConfigurationSection.cs#L29\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/14627626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "NinoFloris": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/17340805", "body": "This should be section.Key I presume?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/17340805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "khellang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Configuration/comments/18768250", "body": "Did you mean to use the LINQ method here? There's already a `Count` property on `List<T>` :wink:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Configuration/comments/18768250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}