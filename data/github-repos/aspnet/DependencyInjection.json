{"_default": {"1": {"Eilon": {"issues": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/621", "title": "THIS ISSUE TRACKER IS CLOSED - use the Home repo issue tracker", "body": "Hello, this issue tracker is no longer used. Please log new issues here: https://github.com/aspnet/Home/issues\r\n\r\nFor information about this change, see https://github.com/aspnet/Announcements/issues/283", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/addc292a9d5302c9b0d8929490ed3642f61cc892", "message": "Create ISSUE_TEMPLATE.md"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d5e5aa703297b164b21ba4ad3fdff81c854ce009", "message": "Add missing doc comments (#581)\n\nAdd missing doc comments\r\nhttps://github.com/aspnet/DependencyInjection/issues/568\r\n* Remove empty NoWarn"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/396f168715631674afe5372a56bd09e83363e9ad", "message": "Fix package metadata"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c01f88b67851c323fcd4de381e8706c361e2775a", "message": "Merge pull request #356 from dadhi/patch-1\n\nAdded DryIoc adapter to readme"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f8960b4b3353802a18a062e285cd12f48c29395c", "message": "Merge pull request #355 from seesharper/dev\n\nAdded LightInject to the list of containers"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/7b82a23288e124dc573c24b94aeedefcecd37b72", "message": "Add doc comments for mainline APIs\n\n#317"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/2b11e8b7620509f26b8d117512656ffbe5ade985", "message": "Merge pull request #236 from henkmollema/fix-GetRequiredServices\n\nBugfix for non-generic GetRequiredServices"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/277d338643f439992892275126b49bf1d6e2579f", "message": "Merge pull request #230 from hishamco/dev\n\nUsing [NotNull]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4579896c2fa4640940c481eff30b73e639b6c374", "message": "Merge pull request #239 from henkmollema/patch-1\n\nCorrect version for EF in README.md"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/aad25842f99327777b72c160f9b92ce6cf840590", "message": "Update Home master -> Home dev"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38736968", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38736968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40787387", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40787387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40888483", "body": "This sounds like scope storage. I mean _exactly_ scope storage. Except instead of storage it's DI. And instead of scoped it's... well that part's the same!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40888483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40967456", "body": "Instead of binding to an instance you can bind to a type. Then it'll get instantiated by DI along with injecting any dependencies.\n\nDo you have a specific example of where you need a factory?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40967456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40967581", "body": "Should the namespace be `*.DependencyInjection`? This might make it look like it's broadly available in the CLR...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40967581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40969522", "body": "So this is not only about having a custom factory pattern, but this also about having an _async_ factory pattern? That is, does the factory need to be able to do async work, such as database calls?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40969522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41842599", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41842599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42568015", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42568015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43274460", "body": "Hi @GeertvanHorrik I think it would be great to have support for as many IoC containers as possible. As you may have noticed, we're still working on enabling code contributions to the project.\n\nHaving said that, we would like to work with authors of IoC containers on having integration packages to wire them up with the DI provider system we built here. The integration packages here in this repo are intended to be \"proof of concept\" implementations and not necessarily final packages that we plan to release. We think it might be ideal for each IoC container to perhaps ship an integration package for this DI system - perhaps based on the proof of concept code that we already have. This has so far been the common pattern for many IoC containers.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43274460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43354460", "body": "Indeed, hopefully the current samples that we have can serve as a starting point for your extensions.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43354460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/46230895", "body": "@lodejard @davidfowl we should discuss soon. This could be a big change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/46230895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/49526832", "body": "@davezych I think that ideally the adapters would be part of the DI projects themselves and not live here. We have a pending work item to start some discussions with the various DI system authors to see how we want to go about this. If you have codes ready to go for this and it's reasonably \"ship quality\" then it's certainly something we'll consider. Check out the [contribution guidelines](https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md) to see how to fill out a contributor license agreement (CLA) and we can go from there.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/49526832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/49796346", "body": "Sounds good!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/49796346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53937054", "body": ":shipit: from me too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53937054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56245392", "body": "@GrabYourPitchforks does K vs. non-K actually affect this? I understood this to be more about different DI implementations and that's it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56245392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56318427", "body": "No idea what's going on, but should `app.UseServices` be `fork1.UseServices`/`fork2.UseServices`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56318427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58373045", "body": "> Generally we prefer extension methods over regular methods all else being equal.\n\nIs that true? That just seems to make Intellisense _worse_ to me, no? An extraneous class shows up to contain the extension methods, plus the methods in Intellisense get a tiny little distracting adornment.\n\nNow, in the case of _interfaces_, we definitely don't want to add non-essential members and instead use extension methods. But for classes, I don't see the reasoning.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58373045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58393468", "body": "I'm not sure that \"sugar\" status should affect whether a method is an extension method or not. If the extension method applies to only a concrete class, writing an extension method seems negative in every possible way. It's more work for us, more confusing to users, harder to follow code, etc.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58393468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58395048", "body": "Oh, so the bug title and text are incorrect? Is this just about the interface methods?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58395048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58442158", "body": "OK then I like it more :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58442158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59280189", "body": "Based on the code, and a quick discussion with @halter73 and @lodejard this looks :shipit: to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59280189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64521690", "body": "I'm not especially concerned about testing - that's really just our problem. And we test exception messages anyway.\n\nI'm more interested to learn what exceptions does anyone expect to catch. Because if the exceptions aren't caught by code and specifically handled (which is generally bad anyway), the exception type doesn't matter a whole lot.\n\nI expect 99% of DI exceptions to be targeted at a developer working on an app that is in progress, as opposed to more sporadic runtime exceptions that depend on user input (e.g. parsing a user input string, reading a file system, etc.).\n\nIs there a particular case of exceptions that is meant to be programmatically handled?\n\n(BTW I do agree that throwing `System.Exception` is bad, but my initial reaction is to just change them all to `InvalidOperationException`.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64521690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64682193", "body": "Yes then `InvalidOperationException` is probably appropriate. It is an invalid operation to call DI with a type graph that has cycles in it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64682193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65016144", "body": "Aside from my last comment, looks :shipit: to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65016144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65329489", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65329489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66163636", "body": "Rename the rest of the K stuff in this project while you're at it? E.g. `KNinjectModule` --> `<something>`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66163636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66188746", "body": "Beautiful :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66188746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9969044", "body": "Snooze == lose :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9969044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13278058", "body": "Yeah but I bet it stack-overflowed very performantly!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13278058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/14334944", "body": "Tpyo\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/14334944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10460461", "body": "Or in general, it is bad etiquette to dispose something you didn't create.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10460461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10482284", "body": "@davidfowl explained this to me in great detail: he said it's something for tooling and not to ask anymore questions :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10482284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10573678", "body": "Super minor: the default value of an `int` field is `0` anyway.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10573678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10613181", "body": "Rename `obj` to `service`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10613181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/16923082", "body": "Use `object` instead of `Object`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/16923082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418066", "body": "`accessable` -> `accessible`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418100", "body": "Plus, this error message isn't very human understandable. Consider rephrasing it to be clearer about what is wrong.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418177", "body": "Is the new method needed? Why can't the other method be called but with a `null` argument? This can be done via an extension method if needed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418311", "body": "What if there are two matches of \"best length\"? Does one get picked at random?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418512", "body": "Fields go at the top of the class.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418570", "body": "You could hold onto this `GetService` method statically (in a `private static readonly` field in this class).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418620", "body": "In code that uses lambda expressions to build other code, it is helpful to have a comment that shows the pseudo-C# that it is generating.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418653", "body": "Use `[NotNull]`. This exception isn't saying anything useful.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418669", "body": "Should the second parameter be `parameterTypes`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418764", "body": "I don't see any caching going on... ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418843", "body": "Magic number `6793`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18418843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18419224", "body": "Since you're making tweaks here, might be nice to update this code to be `!givenMatched`. There's similar odd usage of `bool`s elsewhere in this class.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18419224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18419633", "body": "Yeah that might work. I'd rather keep the interface not-ugly if possible. (Not that millions of people are implementing this interface, but it better describes the purpose of the interface.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18419633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421552", "body": "Yeah let's figure this out. I think we've already seen cases where the current behavior is a bit confusing, and just saying \"best match\" is indeed quite vague, especially if there are two \"longest\" matches.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422434", "body": "I'm not suggesting to do it for perf - I agree that would be premature. But from a logic perspective I think it would be clearer to declare this statically to make it clear to the reader that this is immutable and depends on nothing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422505", "body": "The `[NotNull]` annotation (which you can use today) will in the near future cause an `if (x=null) throw ArgNullException(\"x\");` to be code-genned into the code during compilation. Nothing gets optimized out.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422561", "body": "Yeah I see them too and they weird me out. I suppose there's nothing intrinsically wrong with it, but it stands out.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18521914", "body": "Why not delete this method?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18521914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18908573", "body": "I _kind of_ prefer them here, because this is the only place they're used, and they're kind of smallish. Otherwise if these types are in other files and they're internal I have to think whether these classes are used in other places.\n\nI _would_, however, move them to the end of their containing class.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18908573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20958000", "body": "Is the pipe `|` typical in debugger displays? It looks like an \"or\" to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20958000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20964023", "body": "1. Typo\n2. Remove the \"TODO\" stuff. Not sure why we ever starting doing that.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20964023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20964044", "body": "And should maybe give more info on what the circular reference is.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20964044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20964078", "body": "Assert the error message too (if you change to using a string resource, you can use the string resource in the assert).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20964078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21041654", "body": "It's indeed quite several classes but I think in this case it's better to have things match reality as closely as possible. If reality _also_ typically has these generic patterns then I think it would certainly make sense to _also_ thus have this generic pattern be tested.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21041654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21067963", "body": "End sentence with a period :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21067963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/23add1812c5248f35e8a217452ae3c8f3845da9a", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/01de8b81c86dfa0e5eb12d8a3c4944d075016e78", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/da64773270c2891158e09915af5c415f69c38101", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bce660c1b31e49c8d21a20b476d6e31e6d362b82", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/b86a7dc8b6d30234e3c6e45d42ab73859893bf4d", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/549ed5fe3e544af3d6ec804ef64a8a1339e02073", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/93158506f5770ab1700353ac0731ec31ba97d60a", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pakrym": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8e1f92f95c885a4b046f50f085d47c539e6f6792", "message": "Use new common benchmark config (#620)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/958e821ba0dff1ca0c885bd8d158c7e936105a4f", "message": "PrivateAssets=All for source package (#598)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/17c67b4ebdca17c76c689cda0e86cfe55d01920a", "message": "[WIP] Use new benchmarking package (#594)\n\n* Use new benchmarking package\r\n\r\n* Unto temp changes"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5a549d6a1ad59633b2e766423c13299190c89f5f", "message": "Fix benchmarks and move them to benchmarks directory (#593)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/da684cf584de04a06e7d00d2122b3bfd31462f12", "message": "Allow lazy containers to pass DisposesInReverseOrderOfCreation (#590)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/46b4590811334a3eb9b833e8a5373d62dae70be4", "message": "Revert test change from #569 (#571)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/06e2de235ce5b27b425e823d9dcbd045811ba48e", "message": "Split ServiceProvider/Engine/Scope and allocation optimization (#565)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/391981b983e797f871a5d0bc729336568b18752b", "message": "Remove binary file"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3142e35157ad9a1cdcc96a583872bfa766f9eb45", "message": "Move ActivatorUtilities to DI (#562)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d2b47e3979e23bae41fc30f9d3e62a20ca5e4026", "message": "Adjustments to fix and tests"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/62d92c801c66931c7d74f169af8669f33dad9818", "message": "Add RemoveAll extension method to service collection (#539)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/205b2e5fe47018c320c981fc34ab2814d23c28ae", "message": "Fix struct default parameter values (#538)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0ee147fd08d1dfc4748b8b75d1a0bcd2fd1e1fea", "message": "Fix mixed closed and open generics IEnumerable resolving (#533)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/1b638a4419329b2ae1abd7a79ba46b520bd53f5e", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/610414110a93b88d523c24e6212e727ca95e109d", "message": "Revert \"Fix mixed open and close generic service IEnumerable resolution (#530)\" (#532)\n\nThis reverts commit ca88b0034dffe6c0dbea04e7a4f3988af2a7065a."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0c3a50ffbdf6e0c7d77e56c18912b378411e5aad", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ca88b0034dffe6c0dbea04e7a4f3988af2a7065a", "message": "Fix mixed open and close generic service IEnumerable resolution (#530)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/139d91e57dd31fcd5c6ddaf11ad1f771b5855807", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bcf91ec3407ba00933e81e33f9495fee09896c15", "message": "Update InternalAspNetCoreSdkVersion"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0893e6de43c70a6ad5e2eb883ac9cf434ef814b7", "message": "Dispose services in reverse creation order (#505)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f7fcfa7be0f74da5df5ffae59ca2150829d3c028", "message": "Avoid scoped service validation race (#470)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/387a7722b4329089d14e2f0aeeed17db0a01b328", "message": "Do not dispose singleton instances (#462)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d2caf06f47b17b9a434b3b1bd5b5deb5dab42577", "message": "Validate scope into singleton service injection and scoped service resolution from root (#430)\n\nValidate scope into singleton service injection and scoped service resolution from root"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0b13fed4ce04ecbe60d32ebb695c1720abb68290", "message": "Optimize expression compilation memory usage (#429)\n\nOptimize memory usage of service resolution expression compilation avoiding most CAS checks."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d3dd22427fa8431f5335a7147c540f99ab9d404f", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6996d5762e1f5009083f316786cc52f99c511f4f", "message": "Bring Microsoft.NETCore.Platforms dependency back"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/547483299b8155dc929279702e282f576720e9b5", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6857071cf650d0eeeba12924a361144d013c3217", "message": "Migrate tests, tools and samples to portable"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/26693749", "body": "Hm, I don't think you are right, instances are registered as disposible not types, so there is no way to do it untill instance is created.\r\n\r\nIn what order does Unity dispose services from this test?", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/26693749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Rick-Anderson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a0467de767febbf86b7d401abe012da8434fa7d7", "message": "Update ServiceCollectionContainerBuilderExtensions.cs (#615)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c81de4e8853af45ee710999820d9c78a8937eed4", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/247cfc78e57b0f12ae9292130808bd93c24e7246", "message": "Add RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/014749e55c9c06ffd328adb6c14f59bafc5ece95", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/88c3bd6fe2786dd759b4a6c6d7c410e895336b6c", "message": "Shorten files"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5a90121f6cb7959f0103be8bc577612802ac5b3d", "message": "Shorten file names"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ffad85e5ec8652eb2b0e42c8f41dd34c6b2f3385", "message": "Set AspNetCoreVersion"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/185f2e2936b8424088044a9e54e97b6d3c25dc5f", "message": "2.0.0-rtm to 2.1.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a33248861eecf41464bf6b967ffd73896cad207a", "message": "Skip first time experience on Appveyor"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ac3c7c205fce59aaee06cc49144fb00f97568c4f", "message": "Remove NETStandard.Library.NETFramework"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/9a08555b7a42c3a82d64429c3a754e5935b36ff0", "message": "Set \"TreatWarningsAsErrors\" before NuGet restore\n\n* Ensures our build stays clean of NuGet warnings"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/24d7030bc7b96631cf68e8c60b00114dd5a4e4b1", "message": "Update Moq"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ffca98b5e1e8d88832ec272c56e6ca19ac90daa9", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f4f5b7242c49f0a70bba2587a716857ff5d0981c", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e7c46c17237f9e94ae32de89c939ee47efa63113", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e198a2cdbf8fe6b2cd4a342f11c8c3557d2ec029", "message": "Target netcoreapp2.1 in tests and samples"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/12616894f8a94cb02d0ea4eec17aa9968f84aa9f", "message": "Updating to InternalAspNetCoreSdkVersion 2.1.1-*"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5958acf26fa9167f7f2cdde171a9ff1eee089d76", "message": "Merge pull request #556 from aspnet/rel/2.0.0\n\nReference xunit 2.2.0 in the specification package"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/445e2020f272607bbd4811742fa5b8ff45fc031e", "message": "Reference xunit 2.2.0 in the specification package"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8c077eca8fae6d4ed16783badcc2ca5a4a619060", "message": "Updating KoreBuild branch"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/52b789daf5fe4cdf8a1a191a4b0cdc469ed03d27", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ac5a46af3ef82df86acfb864560f83d2eef72d77", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4d3a5743c2a2fb5d836b6183a34550027365e4ea", "message": "Branching for 2.0.0 rtm"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d0555a0d9bf7dad9fd29bd8ba6517492c98b387a", "message": "Update version suffix for 2.0.0 RTM release"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/96ec0f9d42e91c5a9a12d24928f0a11f78fb0e9d", "message": "Update LICENSE.txt text"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3591c0fb4d7b3ace6c63d9ec1c8183653060a978", "message": "Add NETStandardImplicitPackageVersion"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/932cc985f0f8731d556e20611d77daa8c3870aa2", "message": "Updating versions to preview3"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d07363d526917bc6b24bdfc30c13b6079dd3afee", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4b7ddd09b23e7dee37938fb42603267a8cd03fbd", "message": "Updating build scripts to point to 2.0.0-preview2 KoreBuild"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a80f80e9f4d2c1f0e48e8f60def8e96ae90325ba", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8b04a53379a6c7e2fcdf8ff101f0dc0675b771db", "message": "Branching for rel/2.0.0-preview2"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/7156a04215dab2d834609595f72f1b5a28a141e1", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/648240fec5d1c33bf6dc9e3d21c18c709b71570d", "message": "Use the bundled NETStandard.Library package in netstandard targeting libraries"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/b6ff78c1cb6e08fc6fb6132973bc6f72a0d149ec", "message": "Updating package version to preview2"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/89663b6e0105f51af69f696ea9b2ac4e78f67809", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/9457a0e8c2408635b19417b30417afbe466af6c3", "message": "Branching for 2.0.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/46d587aa87dfd77324745da6a3f5fd8743289fc8", "message": "Use Bundled NETStandard.Library \\ NETCoreApp versions instead of explicitly specifying one"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/fe3eddf995645342662a518c014920bfadad8891", "message": "Updating versions to 2.0.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e5d3d8de29c093c79160b0c903f80e0366536348", "message": "Updating to 2.0.0 Internal.AspNetCore.Sdk"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ef1f76c8c3cc4a28bc1d920a3293a2cb6aea95db", "message": "Update tests to target net461"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/255a144df69b5f9090b90bf83d8b169d06930235", "message": "Update to VS 2017"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/008acd39a6b82e4926fd8d8d1b3aaf9fed91e35a", "message": "Updating to 4.4 CoreFx packages"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d783e790c4ec71ccddad5fc33e19599537a34575", "message": "Updating versions to 1.2.0-*"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/464c64f45392ef96f020934f27efa48616c275a1", "message": "Merge branch 'rel/1.1.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/16acfb07661ebc97363b585e84370828859c035a", "message": "Branching for 1.1.0"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/62d28e097eefccce16954359c84ba7badb7c49a6", "message": "Rename ServiceCollection in the test specification to TestServiceCollection"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3d780e34cbe28b07665567b986dba11ab9690823", "message": "Merge remote-tracking branch 'origin/rel/1.1.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/1c7687c44b9c08f8ea5b40ac6c186591e0012547", "message": "Branching for 1.1.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c6141fc8299f6ce27264eeec7b28dc7839cf7577", "message": "Updating to netcoreapp1.1"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0920171d06c320b26d952c3665061222ee0f3505", "message": "Revert \"Updating to netcoreapp1.1\"\n\nThis reverts commit 8074d05e1de321ed1227b05f6f7dd4362c2679d0."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8074d05e1de321ed1227b05f6f7dd4362c2679d0", "message": "Updating to netcoreapp1.1"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c00909ea9c4152b29cffcc7b50f162c4fa74377f", "message": "Updating partner package versions"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/12b5a293be65c58766ec8e473684135fa76e8961", "message": "Switching to dotnet.myget.org feed"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f7a25d7f0df6adfd0ccff54307d1babf947e08e6", "message": "Updating to RTM builds of xunit"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/caa3f4ec3f0b7e92a0a0210795303b28c09ecbba", "message": "Updating to dev versions"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5767f85ce328adcf09dc4e8e959651e688514e22", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/1947eb4d33edadd2114cfb8d5f17309204b7fbe2", "message": "Updating to release."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/71ea32fe085d5766b41b51b4b25bfa02e1d133a5", "message": "Use a poco type for verify ClosedServicesPreferredOverOpenGenericServices\nFixes #406"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c5f4ba2c0c8ebbd49bf707890c20e6d2cd7fe67d", "message": "Revert \"Revert \"Revert \"React to updated CoreCLR packages\"\"\"\n\nThis reverts commit 44bfaec280f1a8779d86f4a9bdbca68539744f9c."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/44bfaec280f1a8779d86f4a9bdbca68539744f9c", "message": "Revert \"Revert \"React to updated CoreCLR packages\"\"\n\nThis reverts commit 20dab2ecd5b8bd5fef347addbdb02d171475bb26."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/20dab2ecd5b8bd5fef347addbdb02d171475bb26", "message": "Revert \"React to updated CoreCLR packages\"\n\nThis reverts commit 8413babe835694bba20353dd77850fff212fb197."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f0b754f9259891b75e200278ec3b92aacb1eec79", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/392ea6cfa4f07121e7f08c9b2cb9c589ed127595", "message": "Fix build warnings"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/03dbf06e076748782c4a373c107dbe8a2eefb8cf", "message": "Use latest build of dotnet-test-xunit"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d3359dfc540a123f1a687c75aa97ece296268e4a", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/9b11da3cd9a24e468474fc00428315cc21622789", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/258f9ea65fe6cf7460305bca181105e1756d6d9f", "message": "Removing imports from src projects"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a511e2d15d02336fbe2d7c248ca24337a5eed779", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8d4fa08922dce52eac65d08b984d2ea9c48885fb", "message": "Updating to release."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/555a0ec91477cbb5c33a158a5d3bfe912edd6888", "message": "Switching to minimal TFMs"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6a7bdda613c0cc526775b38532dedbffd2d2d6ac", "message": "Use a non primtive type\n\nFixes #382"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e7823f0a58b5f824247412a06b969a957c0ec343", "message": "Alphabetically order DI container support list"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/13329eae165dd23f8a55fc79cc5e8564f25b26a0", "message": "Revert \"Switching to minimal TFMs\"\n\nThis reverts commit 99f4f17a88277c4edfabd988ae994db79c1b17a7."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/99f4f17a88277c4edfabd988ae994db79c1b17a7", "message": "Switching to minimal TFMs"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6721342b11397a16d719f0ddd2b25c618e3dffe8", "message": "Reacting to CoreCLR package version changes"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8834f1aea5de3a387d291ebd8687c7af2096abdf", "message": "Add TryAddSingleton that accepts an instance"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/afdc47df747e40da24c211cbf18724c1453082f2", "message": "Add test for ambiguous constructor selection\n\nFixes #328"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/7017395a7aff7bbaaf9ead06e6c442d673c5bc8b", "message": "Enable doc verification"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0b06b23444e4ef02bee726da93b8835c532db00b", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/76b9fab14d709c149e16832f777624221525b5e2", "message": "Updating to release NuGet.config."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/2c6042c5c1a4226c37ab1298ee12e37f75d8d720", "message": "Updating System.Reflection version"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0d3f4d665b3b28f54ab79c512749b191169f0c43", "message": "Allowing CoreCLR tests to run on Travis"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8a43c6eb6c57abad34d8185ab4412b738a51096f", "message": "Move ServiceContainer specific tests out of specifications.\nFixes #325"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ff7eb2f2c9bc584205f143f9ca23feee024f0ee6", "message": "Rename AddInstance to AddSingleton\n\nFixes #319"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bd7b1bd74fcaa1c41d0e73412ba81c09e8968814", "message": "Adding links to other DI container adapters"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3a3ff1337ad8cb6ed00aec8820b3fe0beb864144", "message": "Improve error message when dependency does not have a public constructor.\n\nFixes #310"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f2f212a124a450b7f348148132cb66de1c327da8", "message": "Removing Autofac tests"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f1c0dbb44ae3242a713328bec649b352221b17f6", "message": "Create a test specification package"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/cfd2c5f87064c658f80596204e38b570cdc75585", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ad0dffd57c2b894c05decb98633f33498333a3bb", "message": "Updating to release NuGet.config."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c734ac94ee87704683d9472ab64ad9aed08b4153", "message": "Adding netcore50 TFM to support RTM UAP template"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/66d8797d0ca106f6c4bc4474252fa4300cbedfcd", "message": "Switching to using dotnet generations TFM"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/74ed4755a9672d24c1adce05dd3a6ce1183d7034", "message": "Revert \"Removing Autofac tests\"\n\nThis reverts commit a514aabded31e93a9b9a000f7677dafce245d873."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/1d8ef4974a1293bc0153a8f851831507c3270590", "message": "Replace NotNullAttribute with thrown exceptions"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/15bda756314f70cce0f6025f6ef8defab3617cfa", "message": "Renaming Microsoft.Framework.* -> Microsoft.Extensions.*"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a514aabded31e93a9b9a000f7677dafce245d873", "message": "Removing Autofac tests"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bd3f3d9508aa6be1d97792aeb0c87abc0b5939e0", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a1626fdc23c918181cecfe5d952cb35077979f47", "message": "Updating to release NuGet.config."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a2b9ccdffe935d977d77091e7ffc4ce4c708335c", "message": "* Removing NotNull attribute (that was causing warnings) from test\n* Add warningAsErrors to source projects."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/25f57b5ec0f52c9ad2b4308455df506878c2950e", "message": "Set NeutralResourcesLanguageAttribute in source projects"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6fb2f7843a00d8157a7ce639a3f0a326c3a79267", "message": "Updating to aspnetlitedev."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/433b0f034b9a3fdd3b8240cb252ebcd417bc8907", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/1b7d6fa31f73cfa3cdb5bdaf8001a927d0d5a54a", "message": "Updating to aspnetliterelease."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/7a6d3aa5f57a5204a098f4b42df75c2a3aa82aba", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3cfcbef2468a3ae9991cfa2b3af69f33e8f4ad90", "message": "Updating to release NuGet.config."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8a995bb0e6b3fd23a6e976034cf62643776ad5cf", "message": "Ambiguous constructor matching is not working well\n\nFixes #69"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/97bbe0dd781c551a836eca2438cb6d155c6caad7", "message": "Removing non-official DI samples."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4051f711644a9a47060d08f51e695d39ac1d1e22", "message": "Remove system error message assertion to allow tests to pass on Mono."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/87e356c14bb7798055c233614839313c3bfef08f", "message": "* Removing non-official DI samples\n* Switching to Autofac's nightly feed for unit tests.\n\nFixes https://github.com/aspnet/DependencyInjection/issues/264"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d4ae5ca6633b7714f3aba6436a667914045ca61f", "message": "Open Generic services don't work with anything but implementation types\n\nFixes #257"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d69e988887cdf3f226ea58a101e1ff97b7613b6e", "message": "Adding unit tests for consuming services without implementations\n\nFixes #210"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/802c34f4072d0ab98590fe87c94084b9f6c07075", "message": "Adding additional unit tests for covering TypeActivator instantiating\ntypes with non-public constructors.\n\nFixes https://github.com/aspnet/DependencyInjection/issues/182"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/320ed51a79a93b9bede6be51bc1dcb89bc589fa2", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/42ffb1f80bae0eb0e646ed662d0732250522fda2", "message": "Updating to release NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/1aff7e0c6fe59885fc258f6dfdc59b3f0384513e", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/674f944bf72ec83c9eae25fa880fc441b3fbeead", "message": "Updating to release NuGet.config"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40910059", "body": "There's no emoji for sad panda so here goes: :see_no_evil: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40910059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43816356", "body": "Could  you rebase your changes instead of merging it in? Right now it looks like: \n![capture](https://cloud.githubusercontent.com/assets/174281/3046886/926b577e-e12e-11e3-8f6e-78d64e75415b.PNG)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43816356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52658285", "body": ">  As long as that remains the case, it will be problematic to have an ITypeActivator that doesn't take an IServiceProvider as a parameter.\n\nMy suggestion was to have two overloads - one that continues to take a `IServiceProvider` like today and the other which uses the current scoped service. \n\n>  the ITypeActivator is indirectly be resolved from an inner hosting IServiceProvicer\n\nFor transient \\ scoped services it would seem like the right behavior would be to give it the current service provider instance (even though it's being resolved by an inner `IServiceProvider`). Is that not the case? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52658285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53960022", "body": "@loudej it doesn't look like Autofac has a way to get to the activation stack without [private reflection](http://stackoverflow.com/questions/1159212/automatic-factory-with-common-logging-and-autofac) or by intercepting all calls for activation and then looking at individual parameters to see if any of them match our factory. The latter might work, but I imagine it might affect perf. \n\nI thought it made sense to not have `DependeeType` if we can't make it work everywhere. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53960022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55473502", "body": "Sounds like a duplicate of #64 which is being fixed by https://github.com/aspnet/DependencyInjection/pull/102? Could you confirm\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55473502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55633803", "body": "Duplicate of #104 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55633803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56889236", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56889236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56889257", "body": "cc @halter73 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56889257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57240881", "body": "Is it supposed to be larger is better? Because this seems worse than the baseline\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57240881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57921994", "body": "@halter73  sorry I hadn't noticed your comments earlier. Updated the PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57921994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57922005", "body": "@divega I'll work on getting this in by next week.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57922005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58378558", "body": "Updated\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58378558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58388667", "body": "Perhaps the \"in general\" statement is not necessarily true. However in this case methods such as `AddTransient`, `AddScoped` etc are sugar over a set of methods that add to the `ServiceCollection`. Additionally since we expect the implementation of `Add*` to call into `Add(IServiceDescriptor)` and they aren't meant to have identical behavior across all implementations of `IServiceCollection`. Extension methods make sense in this scenario\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58388667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58394800", "body": "These methods are on the `IServiceCollection` interface - https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Framework.DependencyInjection/IServiceCollection.cs. I think the title of the work item is misleading\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58394800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58395241", "body": "From our conversation with @loudej it did seem like we were talking about changing the interface and subsequently changing the concrete implementation to not take a `IConfiguration`. I'll let @halter73 confirm this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58395241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59454622", "body": "cc @halter73 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59454622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59683365", "body": "@halter73 updated with `NotNull` attributes like we discussed \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59683365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/60633750", "body": "For projects that require this behavior, the recommendation is to have a wrapper around `ITypeActivator` rather than introduce a change in behavior in DI.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/60633750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63533017", "body": "cc @halter73 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63533017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64680194", "body": "> change them all to `InvalidOperationException`\n\nThat should solve this, right? Unless we expect people to be trapping these exceptions and doing something meaningful with it (probably a bad idea any way), we shouldn't a more specific exception type.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64680194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65460733", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65460733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65848072", "body": "Looks good :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65848072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66525120", "body": "You would need to set up a `IControllerFactory` that understands Ninject goodness and not an `IControllerActivator` to make this work. \n\n> You can also register the controller itself in the ninject container.\n\nwouldn't help if Mvc does type activation, would it? \n\ncc @yishaigalatzer \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66525120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582356", "body": "named params?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582358", "body": "string (casing)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582365", "body": "Resx file. Perhaps a TODO comment if you aren't ready to introduce resx.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8056267", "body": "The backing property on `ServiceDescriptor` is a `Func<IServiceProvider, object>`. To make this work, I think you'd have to use type constraints on `TService : class` which it makes it unwiedly for value types. @halter73, would you be ok with that?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8056267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/10087610", "body": "Might need to copy the docs from the interface since it's not inheriting anymore.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/10087610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/12565589", "body": "Apparently. I'll fix that :|\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/12565589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17901021", "body": "Filed https://github.com/aspnet/DependencyInjection/issues/419 to rename the type in the test specification. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17901021/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9590638", "body": "Is the plan to eventually fill up these doc comments?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9590638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10477624", "body": "This seems new. What's the purpose of this attribute? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10477624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10477684", "body": "If they're supposed to be the same instance, use Assert.Same\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10477684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10616019", "body": "``` C#\nvar enumerableSvc = obj as IEnumerable;\nif (enumerableSvc != null) \n{\n  return enumerableSvc.GetEnumerator().MoveNext();\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10616019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548859", "body": "This API feels slightly odd given that this method allows a fluent way of adding a sequence of descriptors.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548865", "body": "moreDescriptors.SelectMany?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548881", "body": "named params for null values\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687234", "body": "> child scope\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687272", "body": "Why is this split over multiple lines?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687283", "body": "var\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687306", "body": "Could a child scope be disposed earlier than \\ independent of the parent scope? In which case we might end up double disposing these things. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687335", "body": "Needs the NotNullAttribute\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10687335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123703", "body": "`var`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123705", "body": "`our var creator`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123709", "body": "You could move the `IsStatic` check inside the `foreach` loop to avoid allocating the delegate.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123738", "body": "`TryCreate` makes it sound like you're trying to create the instance rather than the factory. Also, it would be cleaner to return a type here rather than use a out parameter - the behavior of the method does not match what `Try*` does\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123741", "body": "Why aren't you using a `ConcurrentDictionary` here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123746", "body": "`TypeFactory` \\ `InstanceFactory`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123748", "body": "Type _service closure_\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123752", "body": "Is closure the right term for these parameters? It's not closing over anything in particular, is it?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123756", "body": "`var`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18123756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184839", "body": "You would have to put a lock around the reads too since it's callable concurrently. At which point a `ConcurrentDictionary` is much easier to use.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184898", "body": "Maybe use a return type instead? `CreateResult { Type type, int MatchLength }`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18188390", "body": "> We don't need a lock around TryGetValue though\n\nCan `CreateInstance` be invoked concurrently? If so (and I think it can), you need a lock. A `Dictionary<TKey, TValue>` cannot be simultaneously modified and read at the same time. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18188390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18432472", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18432472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18432482", "body": "My primary complaint about having this is that there's nothing in the interface contract that enforces a relationship between the enum value and the property being not null. An extension method might be preferable since the pattern is going to be the same across all implementations of the interface. That said, this list isn't going to continue growing - picking one out of 3 null valued items, isn't particularly ugly to read. Let me know if you think otherwise\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18432482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18582255", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18582255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18582323", "body": ":+1: \n\nOn a tangent, do we also want to allow a similar mechanism to support changing the lifetime of these services? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18582323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18582341", "body": ":+1:  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18582341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18582418", "body": "I'll keep an eye on the CI build once this gets checked in\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18582418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18591399", "body": "`Type.GetType` does not throw if the type cannot be found and simply returns null.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18591399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18621735", "body": "Probably not. I can yank the method out before I check it in. I realized half way through having the other method be public was confusing since it accepts an object\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18621735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19003024", "body": "The only use case for passing `IConfiguration` into `ServiceCollection` is to be able to replace registered services with types specified from config - https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Framework.DependencyInjection/ServiceDescriber.cs#L125-L133. We don't use this feature in Mvc's functional tests.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19003024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19045036", "body": "@rynowak We don't depend on the ServiceCollection taking a IConfiguration in Mvc. The behavior should remain unchanged once we make this change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19045036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19124594", "body": "Yes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19124594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19125471", "body": "Depending on how `NotNull` is implemented, we might have to enforce that `TService` is a reference type here. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19125471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19150231", "body": "The underscore splits it as `Method_Condition_Expectation`. Makes it somewhat easier to reason, but I'll change this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19150231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591287", "body": "Shouldn't need this null check.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591337", "body": "Remove unused usings.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591358", "body": "`System` namespaces go first.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591437", "body": "Could you add a doc comment stating what this method does? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591716", "body": "Are these needed?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591815", "body": "Import ~~Explodes~~ ThrowsWithNoManifest. Quite likely a policheck failure\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591943", "body": "Perhaps one more test where the types specified in the manifest aren't present?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591961", "body": "`Assert.Same`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20591961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20592023", "body": "Also, would we use factory created services here? Maybe you want to verify that too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20592023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21385261", "body": "Could you exit early here if `argumentTypes` is null or empty? My guess is that would be the more common scenario - to not pass in any explicit args\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21385261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21385384", "body": "Does this indicate an argument was passed in but we can't find a slot for it in the ctor?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21385384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21385433", "body": "Could you move variables to the top of the class declaration? Also mark it `readonly`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21385433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21397191", "body": "Could we get one more test where the ambiguity does get resolved -\n`public ClassWithAmbiguousCtors(IFakeService service, string data1, int data2)`\n`public ClassWithAmbiguousCtors(IFakeService service, int data)`\n\n`typeActivator.CreateFactory(typeof(ClassWithAmbiguousCtors), new[] { typeof(string), typeof(int) }))`\n`typeActivator.CreateFactory(typeof(ClassWithAmbiguousCtors), new[] { typeof(int) }))`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21397191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21529144", "body": "Filtering out non-public ctors seems like the sensible choice. I wouldn't expect `TypeActivator` to instantiate it via a non-public ctor. Plus any ambiguity that would arise if a type has both a public and non-public ctor that match would make it very confusing \\ difficult to deal with.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21529144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21529750", "body": "Seemed like a low hanging fix, but we could address later it if it shows up in allocation profiles.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21529750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/23970780", "body": "What changed here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/23970780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "natemcmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6ba4dfe5d4533e76406f0d46b2f22623089cd0ad", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/88297e3c1116f952aa22013172ef2f9396f716e0", "message": "Pin tool and package versions to make builds more repeatable\n\nPart of making builds reproducible. See aspnet/Universe#575"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4ea859efade2e218798a05f7cb722fbcc95fa959", "message": "Use PackageLineup to manage PackageReference versions"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e9e4f2948b149a729495726125ac672aab988941", "message": "Upgrade to xunit 2.3.0-beta4 (#569)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4e684573da3ffb5a6d77ae3a38767504ff19f5a5", "message": "Fix syntax warning when running build.sh on older versions of bash\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/53a76dea5231f4e1b00fe6b559bb61a0edac259a", "message": "Update bootstrappers to use the compiled version of KoreBuild\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/76f9945f3fcb17b8b006726510e72ed41793399f", "message": "React to aspnet/BuildTools#293\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/50ce1e59a56c4bccfc4779ac2ca0f2257eaf2dfd", "message": "Adding libunwind8 to .travis.yml\n\n[skip appveyor]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a266a1f816dabc2efd5d83f3c61c51294837328f", "message": "Target .NET Standard 2.0"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3f65142d48aaad2491f339f4e18bfa38cfbcc5fb", "message": "Update test SDK and xunit version"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6f46039084f791c35dd96ce8646262a0c9a83372", "message": "Update Travis to macOS Sierra\n\n[skip appveyor]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e9def8c9b35d65de9fd2eec4c9c9ed1cb7b49e59", "message": "Unify dependency versions to one file"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6411881d9f752d8612deadd8674f04923139adbf", "message": "Update appveyor and travis settings"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5c7640fb0f9cebd4e7d9a4b57a6a82b6c6e46c34", "message": "Update AppVeyor and Travis settings"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/66801f362d8e0ecd3340aa46c93e7dacc5e209c2", "message": "Change korebuild branch and fix argument forwarding in bootstrapper"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d7008553e0a1b536821f7b1eb6363dcf65afa030", "message": "Downgrade to stable packages"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/92431908e12b4969ea79396f21f6d8cf06bb3453", "message": "Update appveyor.yml\n\nResolves #484"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8a2bb36eb72d0af1f61cde092f5202a15882c5ed", "message": "Clean tmp folder after unzipping KoreBuild"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/086feb9a4d03cc8ecf4ac097a823afb03fa82a93", "message": "Remove netcore50"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6bd8144af86727887d93482e834a8f2e8bf5ca17", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/fef24edc1d4c5e75568b9687e32274113fd1f792", "message": "Cross-compile to netcore50 to support EF on UWP"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/dccfdd65b06d6a0d885ad41abc2cab8cc239dbe4", "message": "Fix backslashes in yml config.\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c14ab55a615e35dc2fdfc5ef2da7149a66cf2cd4", "message": "Limit the branches that build on our public CI.\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e1fcc739fc8e5602caacd761901222f22b777fc1", "message": "Updating build script"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d1e1716730afbb3acd601b0ebcde81ddf675b3fc", "message": "Prevent Dispose from being called twice on ServiceProvider"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/20847089", "body": "It depends on .NET Framework 4.6. The default appveyor image has .NET Framework 4.5.2. cref https://github.com/Microsoft/vstest/issues/315", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/20847089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/20847137", "body": "At least the two you mentioned.", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/20847137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/25087283", "body": "This should have been PrivateAssets=\"All\"", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/25087283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "adam-knights": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4942355da3e5f4b7bdeaac9bcd6fbf527a8834e3", "message": "Fix typo in return xml for ServiceCollectionContainerBuilderExtensions that resulted in no spacing between 'the' and return type (#607)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndreyTretyak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e365cabaaaa0955d39a3732fae887b08ba3d3244", "message": "Typo fix in AmbiguousConstructorException resource (#600)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e1890da02685465e0184e8a38a6e1cc4d42c2ef3", "message": "Circular dependency exception improve (#592)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/b6f605a65ba8c68b47e75bb3e9251676797a975d", "message": "Increase Minimum Version of Visual Studio to 15.3.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JunTaoLuo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d51fab28fa4b664568b668dedd20c38bfd3c6281", "message": "Ensure fallback to curl after failed wget"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bd0792b975e51b5222db953320bf576459fd1d87", "message": "Update __get_remote_file logic"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/89b2a29ed9e9a3ca041e8505dde44c5f9dfb9c05", "message": "React to updated CoreCLR packages\n\nhttps://github.com/aspnet/Coherence/issues/97"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8413babe835694bba20353dd77850fff212fb197", "message": "React to updated CoreCLR packages\n\nhttps://github.com/aspnet/Coherence/issues/97"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5b56ff41dcd65f1d7ee9c09b16f675829dde2432", "message": "Updating test TFMs for custom test discovery"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndriySvyryd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4c7a94c46551a0aec7d14a447b6901a091716077", "message": "Fix ImplementationType of ConstructorCallSite and FactoryCallSite\n\nFixes #541"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37247256", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37247256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9968090", "body": "Use ConfigureAwait(continueOnCapturedContext: false) on all await calls\nhttp://msdn.microsoft.com/en-us/magazine/jj991977.aspx\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9968090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kichalla": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/846d84c2fc9aca9a225af800bc57506fee05143e", "message": "Updated to use the latest shared runtime"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/2a016aba60a453f4a3098ce1564a00cd5bb6f259", "message": "Converted test projects to run on netcoreapp2.0"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/b63fe6de748b507ec2aeb380cb211d22de242de6", "message": "[Fixes #397] Add specification tests that verifies it is safe to cache\\reuse IServiceScopeFactory"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4f423f02d028f322a1610f671728008cdacf10b0", "message": "Enable 3rd party DI containers to handle requests for required services.\n[Fixes ##378] Add interface to allow container implementors to expose a more native service lookup for required services"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/15e72dc6403f19574107ee78c8ca98db704b2932", "message": "Enable tests to run using dotnet xunit runner"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/1c5df62b3977ffee26e7d7cc286c8c2245fb2d77", "message": "Enable pinning build script"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smitpatel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/93206e992bf1e1377beed62c549f493f4fedd861", "message": "Update API Check related files\nReact to aspnet/BuildTools#238"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/37380ce62fc2ed3c93490d1111dc88ff16bcc81b", "message": "Rename _transientDisposables to _disposables\n- We now capture all disposable objects into a separate list not\njust transient ones"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/45bbdb5efcbe2b588f8ea94044b7efca9cefdd33", "message": "Make ServiceProvider public (#510)\n\n- Make ServiceProvider public so that it can be returned\r\nfrom BuildServiceProvider().\r\n- Make it sealed since it can't really be extended.\r\n- Changed tests to stop down casting."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c52cc988b8ecb2ddd1e2cf0a03821ddf0a2ac6c0", "message": "Added scope validation benchmark (#503)\n\n* Added scope validation benchmark\r\n- Renamed benchmarks to *Benchmark\r\n- Added copyright"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f6d6cfb3a8347f7154fa2fee2e0eec74ea57764a", "message": "Added operations per second column"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/831ad485ccb35d3bd775149c15d680ccefc09e8c", "message": "Added benchmarks project and basic benchmark  (#502)\n\n* Added initial benchmarks for DI"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/84df96ddd6ac0572edf69109c4da7b939d2f53b3", "message": "Update .travis.yml (#499)"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/7484d22ec24263342fcc9c865b993d183282660c", "message": "Better codegen (#489)\n\n* Better codegen\r\n- Elide calls to CaptureDisposable for transient services when the\r\nimplementation type isn't disposable\r\n- Elide calls to Convert when the type is already assignable from\r\nthe target type"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8483f8fe5f703eab54eab72be226837d0d6ec7db", "message": "Added ServiceProviderOptions type that flows to the container (#482)\n\n* Added ServiceProviderOptions type that flows to the container\r\n- We'll need to add more options soon\r\n(like disabling transient disposable capture), this change adds an overload to\r\nBuildServiceProvider(), adds a ctor to the DefaultServiceProviderFactory and adds\r\nctor to ServiceProvider that take the ServiceProviderOptions."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c6bfaa9cc1c9f866aded23110ad8d754fe1d665e", "message": "Merge pull request #483 from couven92/callSiteChain\n\nRemoved duplicate call site chain search"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5adb2a95f3b2b2c875ea68339c0ea8ec85bfef12", "message": "Merge pull request #446 from LayZeeDK/patch-1\n\nFixed typo"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/cc814c61435491917804bb4502c87eb93efd3960", "message": "Add support for IServiceProviderFactory<TContainerBuilder>\n- A new abstraction that allows the DI container author to describe how\nto translate an IServiceCollection to a specific container and then to an IServiceProvider.\n- Hosting will use this abstraction to swap out the default container"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5e5f7e817d0550980342dcce73ced59104e9ac3d", "message": "Merge pull request #439 from khellang/patch-1\n\nUpdated link to new repo for the StructureMap adapter"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/60139b5f9f9a49b3cf18ddd3f31113ae05a6a1e7", "message": "Merge pull request #438 from dadhi/dev\n\nUpdated readme link to DryIoc RTM adapter."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bd896977570c45f17cb9703a5d127b61bed43f0d", "message": "Fixed build"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/2793fdee89800b245c6a3faeb22c1190e4955f51", "message": "Fix stackoverflow introduced by bbb9acf101\n- Added test for self dispose"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bbb9acf101d4f9b3b818834c60572f67ec16ac63", "message": "Changes to improve performance\n- Track disposables in a list with lock instead of a concurrent bag\n- Allocate a single _createServiceAccessor instead of one per instance\n- Don't allocate disposable list until used\n- Only use it for transient objects\n- Use _resolvedServices as a lockObject to avoid allocating a lockObj"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/b2af777d73df9da365465fa387e3923bc48bdea5", "message": "Update .travis.yml\n\nRemoved mono 3.12.0 restriction"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c9d54c3fab6abdc74593eb0b0cf48b85487c576a", "message": "Revert to mono 3.12.0 on travis"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3bbfca9201d50fd8b2cf03c3d8bf955fefaa913d", "message": "Merge pull request #231 from henkmollema/non-generic-getrequiredservices\n\nAdded non-generic GetRequiredServices method"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34035094", "body": "I was thinking that we'd have another assembly that references all dependencies needed to wire up the default stack. Basically the code in the sample would be in the default MVC wire up stack would be implemented away from user code. \n\nWe also need to think about the cross framework scenario. Remember there's a single container for Mvc, SignalR, Data, etc. \n\nEach of those frameworks will provide default services into some container:\n\n``` C#\npublic class Startup\n{\n    public void Configuration(IBuilder builder)\n    {\n       var provider = new ServiceProvider();\n\n       // This code can be cleaned up but it shows the idea\n       Mvc.PopulateServices((interfaceType, implType, singleton) => provider.Add(interfaceType, implType));\n       Data.PopulateServices((interfaceType, implType, singleton) => provider.Add(interfaceType, implType));\n       SignalR.PopulateServices((interfaceType, implType, singleton) => provider.Add(interfaceType, implType));\n\n       // Wire up the provider that will be used for middleware\n       builder.UseServiceProvider(provider);\n\n       var routes = new RouteTable();\n\n      var mvcConfiguration = new MvcConfiguration(serviceProvidr);\n\n       routes.MapMvcRoute(...., mvcConfiguration);\n       builder.MapSignalR();\n       builder.UseRoutes(routes);\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34035094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34598287", "body": "Looks good :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34598287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35839445", "body": "This feels like it should be shared code. Doesn't feel like part of the DI library.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35839445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36828864", "body": "There's some great feedback from @yishaigalatzer and @loudej on the method naming here https://github.com/aspnet/WebFx/pull/44#discussion_r10332557\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36828864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37734662", "body": "Turns out this is injected by the hosting layer but just found an interesting problem. If you use ITypeActivator with a chained container it needs to be redefined since it will only work on the service provider that defined it.\n\nAt least that's the case with the default service provider\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37734662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37891702", "body": "You need to update all of the code that I fixed last week before pushing this \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37891702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37891767", "body": "Or do the change in 2 stages, first is to leave the FallbackServices settable for now so code doesn't break\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37891767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37901830", "body": "I think the implementation should be in hosting. Should it also be neutral?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37901830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37952855", "body": "This has nothing to do with Helios or dependency injection. See this thread for more context aspnet/WebFx#86\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37952855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38128908", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38128908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38320553", "body": "An extension method should suffice\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38320553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38750486", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38750486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38771347", "body": "@sebastienros we should probably use type activator everywhere.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38771347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40659632", "body": "Move it to WebFx\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40659632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40659737", "body": "@halter73 is this done?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40659737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40660544", "body": "Call `GetService<IEnumerable<T>>().Any()`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40660544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40787453", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40787453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40787840", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40787840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41346904", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41346904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42068444", "body": "That's not the way you do this particular scenario. Instead, you'd take an IContextAccessor<HttpContext> in your class to get at the HttpContext\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42068444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42261686", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42261686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52410063", "body": "Interesting\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52410063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52410114", "body": "Dupe of #64\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52410114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52939640", "body": "Any reason you would use this over a real container that already works everywhere else like inject, auto fac, {name a container that exists already}\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52939640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53937097", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53937097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/54754335", "body": "- It's not obsolete, you can still implement an IControllerFactory (and that's an MVC question not a DI question). It would look something like this:\n\n``` C#\napp.UseServices(services =>\n{\n    services.AddMvc();\n    services.AddTransient<IControllerFactory, My{FavoriteIOCContainer}ControllerFactory>();\n    ...\n});\n```\n- We plan to contribute those back to the authors. What we have is mostly a proof of concept to make sure the base behaviors work with the other DI systems. \n\nIf you want to ignore integrated DI, you can still treat it like an implementation detail but still have your controllers/hubs etc resolved by your container specifically.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/54754335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56427515", "body": "You need a new kvm\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56427515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57100641", "body": "Why isn't this closed and put in a milestone?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57100641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63102501", "body": "This is a tricky one. There are several layers of code that run before the application is even activated, and those layers do provide services that are critical to the application running. Dependency injection is our alternative to exposing static classes and methods from the layers of the application that run before user code. The ability to fallback is critical to making that work.\n\nWhen you run under the KRE, you are hosted in an environment that provides services.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63102501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63139068", "body": "We're looking at doing that right now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63139068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63159633", "body": "See https://github.com/aspnet/DependencyInjection/pull/140\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63159633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63198557", "body": "@DerAlbertCom we're refining the fallback approach because of the complexity it introduces. See https://github.com/aspnet/DependencyInjection/pull/140\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63198557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63259464", "body": "This looks good. Let's plumb `IServiceManiest` through the other layers before committing this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63259464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64157015", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64157015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64157938", "body": "@anpete why not? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64157938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64158040", "body": "@KKhurin @halter73 was this fixed?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64158040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64170119", "body": "@DerAlbertCom any updates on the structure map adapter? Fallback is gone :smile: and it should be _much_ simpler to implement\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64170119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64235969", "body": "But GC collects things that are unreferenced. You're holding onto managed memory so the object is rooted.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64235969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64241990", "body": "hrmmmmmm, @halter73 do we hold onto the child scopes in the parent container?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64241990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64708730", "body": "Make sure there's a test for \n\n```\n      A\n    /   \\\n   B     C\n  /         \n C        \n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64708730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66203938", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66203938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66482660", "body": "Nope, use Ninject. The goal of our default implementation is to provide something that has enough features for our own frameworks to function. Other IOC containers provide many features, and if you want to use a ninject specific feature, by all means do so. Use the Ninject API as well.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66482660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66482843", "body": "Can you provide a repro of what you're trying to do? There might be a problem using ITypeActivator for so many things (it brings up issues like you describe).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66482843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66506775", "body": "By default controllers are type activated. You can register your own IControllerActivator to get around this. You can also register the controller itself in the ninject container.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66506775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66539230", "body": "Mvc should try to resolve from the container first. This is what the default controller activator did in mvc 5.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66539230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69291204", "body": "The only push back I have on this is https://github.com/aspnet/DependencyInjection/issues/158. We should discuss the naming of this new thing in the same context.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69291204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69291656", "body": "@HaoK no changes are required to the interface itself. It might even be another interface name. My only concern was calling both things IScopedSomething<T> might be confusing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69291656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69293185", "body": "Maybe we just rename the other one?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69293185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69294186", "body": "Hmm\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69294186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69440595", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69440595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69440605", "body": "Value seems better tbh\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69440605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69440745", "body": "``` C#\nIScopedValue<T> \n```\n\nSounds better.Is it bad to put the lifetime in the class name?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69440745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69472035", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69472035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5581622", "body": "I think we need an overload that doesn't take one of these\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5581622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582371", "body": "Yess!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5582371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5706590", "body": "Zomg much better\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5706590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5721639", "body": ".Any()?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5721639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5752179", "body": "Nuke .Table from the namespace across the board.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/5752179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8212755", "body": "Why?!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8212755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583269", "body": "Few pieces of feedback:\n- The interface needs to be assembly neutral\n- Bury it in a namespaces that makes it hard to find it (we don't want people using it)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583277", "body": "This shouldn't be in here. The service table should be manifestable :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583282", "body": "This shouldn't exist. Let the things that need a service manifest implement them on their own. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583289", "body": "@HaoK also nuke all the fallback code!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583293", "body": "Get rid of all the fallback stuff in here. And this never needs to generate a manifest either.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8691732", "body": "paste\\* :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8691732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644414", "body": "@HaoK @lodejard @yishaigalatzer @divega \n\n![image](https://cloud.githubusercontent.com/assets/95136/6100318/898e25d8-afc2-11e4-821b-19ae9aaf4fb9.png)\n\nIt looks pretty confusing seeing AddScopedInstance next to AddScoped when they are completely unrelated :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/12556763", "body": "Did you delete the projects in VS and forget the delete the projects from disk\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/12556763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13278201", "body": "Ah crap. Well tests all passed \ud83d\ude00\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13278201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13279065", "body": "That's ok my bug I'll fix it after I find out why the tests are all happy\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13279065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13280804", "body": "I fixed your crappy tests @halter73 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13280804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13803336", "body": "We always track transients. They can be created in scopes which get disposed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13803336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/18249609", "body": "nit: validateScopes:true\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/18249609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/18567813", "body": "See https://github.com/aspnet/Hosting/issues/829. It'll enable us to call ConfigueBuilder(SpecificContainer container) method on the Startup class.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/18567813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/20847036", "body": "Why does the console test runner depend on VS?", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/20847036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/20847096", "body": "How many versions of the test runner are they? One for .NET Framework and one for .NET Core?", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/20847096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9410394", "body": "I think as a trend of things we want to avoid/cutdown as much as possible across the board is the amount of different places we scan for things app domain wide.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9410394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9412864", "body": "We shouldnt build anything that depends on build time alone. Anything we do at \"build time\" is solely an optimization.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9412864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10688064", "body": "Make this settable for now. Let's transition the calling code\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10688064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10691499", "body": "Shouldn't this be: \n\n``` C#\nvalue = _source.Exchange(value);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10691499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10691502", "body": "Why have GetSet and SetContextSource?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10691502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10736388", "body": "?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10736388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10758263", "body": "The these 3 types into separate files even if it's implementation detail.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10758263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10780782", "body": "Wow, a non generic IList, not even `IList<object>`? Feels like the dark ages. Why didn't you just return ArrayList :trollface: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10780782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10736369", "body": "Spelling _Service_\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10736369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10736372", "body": "Same\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10736372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10756232", "body": ".Any() ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10756232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10827948", "body": ".Table is not a great namespace name. Just put it in the root or something more descriptive?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10827948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10780662", "body": "Is this sufficient to determine if there's an open generic?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10780662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10780673", "body": "Add \n\n``` C#\n                 typeof(IFakeOpenGenericService<int>),\n                 typeof(FakeOpenGenericService<int>),\n                 implementationInstance: null,\n                 lifecycle: LifecycleKind.Transient);\n```\n\nAnd verify that the right code path executes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10780673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20399929", "body": "Get rid of this class. It's not required by anyone but the tests\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20399929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20488989", "body": "why not:\n\n``` C#\ncollection.AddInstance<IServiceManifest>(new ServiceManifest(manifestTypes));\nreturn new ServiceProvider(collection);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20488989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20489097", "body": "What the hell.... \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20489097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20773521", "body": "Shouldn't this be a single method? AddDependencyInjectionServices()? Don't call it that but you get the idea.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20773521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20774411", "body": "Copy paste bug\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20774411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20774816", "body": "Assert.True\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20774816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20973449", "body": "Ya, just use the callSiteChain\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20973449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21202408", "body": "Change these to InvalidOperationException as well?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21202408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/22700858", "body": "?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/22700858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rynowak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f7f48568bc9509f7e4d1ff0115a19bc0c77ebebe", "message": "Fix benchmarks on netcoreapp2.0"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/42fc918d93ad5e7d47cb81477a9e2c368b6f3a3f", "message": "Fix #282 - Remove allocating lambda in GetService"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/202676f7e82ed46ec6987eb8bcc46b56af2bc7b5", "message": "Add a TryAddEnumerable variant\n\nWe're using something like this in MVC to avoid repeatedly adding our\noptions setups when called twice. This makes AddMvcCore() idempotent,\nwhich is pretty important to make our more complex configuration scenarios\nmore straightforward."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f6981c0a7509802db78908d22c23217537a9f4e9", "message": "Adding more TryAdd overloads, this will make MVC service registration much more succinct."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34029896", "body": "@dougbu \n\nIf you make each assembly responsible for adding the services it owns, you still need to bootstrap that somehow.\n\n``` C#\nMicrosoft.AspNet.Mvc.Razor.Services.Add(services);\nMicrosoft.AspNet.Mvc.Rendering.Services.Add(services);\nMicrosoft.AspNet.Mvc.ModelBinding.Services.Add(services);\nMicrosoft.AspNet.Mvc.ViewHost.Services.Add(services);\n```\n\netc.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34029896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37496896", "body": "#33 is to make ActivatorUtilities go away, which is blocked on us being blocked by this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37496896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38135755", "body": "dupe of #40 :sunglasses: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38135755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40985928", "body": "@davidfowl do you mean the whole middleware? IIRC the implementation is provided _by default_ because the `UseContainer()` middleware will need it to exist.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40985928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43816595", "body": ":+1: for this change. I was just coding against this last night and it took me a long time to figure out this wasn't in the Configuration namespace.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43816595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9410642", "body": "Yeah, I can see that. We could potentially do something smart at compile time but it's conceptually equivalent.\n\nHaving to imperatively configure the DI container is going to bloat our startup code, which is what I'm concerned about. \n\nAn idea that Yishai put forth would be generate a configuration file/embedded resource at build time that we can use to resolve these kinds of things. It could be good if it's not in the user's face.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9410642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9938976", "body": "Is the intent of this class that providers in the pipeline can replace the result? (That's what this api says to me). Just wondering the purpose as opposed to passing T around directly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9938976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936701", "body": "why two flavors of invoke? that just seems clumsy\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936710", "body": "You can easily wrap a sync provider in an async one, so it should be possible to support adding sync and async providers to the same async manager, though it seems like clutter to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9938931", "body": "I guess my comment is that if some of the work is async (for a particular interface) it might as well all be async. Having both InvokeAsync and Invoke on the same manager just seems awkward.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9938931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10719137", "body": "What's the purpose of ExchangeValue? Is this if you want to change a value you own without introducing nesting?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10719137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18318220", "body": "should be possible to avoid allocating this array on the happy path, make an alternate constructor for the key, and teach it to compare object[] with type[]\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18318220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18318266", "body": "Also you need to make sure to 'upgrade' the key to avoid holding on to these objects.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18318266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18318401", "body": "consider eliding this allocation for 0-arg. Many times in MVC we're activating something because it _might_ need services, but it's also might not. It is safe to pass null to `Invoke` if it's 0-arg\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18318401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18419334", "body": "This doesn't work the way you'd hope. Overload resolution will choose a `params` method before an extension method. And the downside of having params is that an array is always allocated unless you explicitly pass null.\n\nYou could try defining `CreateInstance as object[]` and then adding an extension method for `params` and for `()`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18419334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18998458", "body": "what's the replacement for this? We're using it in our functional tests to do dirty, filthy, despicable things.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18998458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19033632", "body": "we absolutely do https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.FunctionalTests/TestHelper.cs#L51\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19033632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "z4kn4fein": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/9512cce8351b4cd2559a17a5077a37e14cdea72e", "message": "Added Stashbox to the external container list (#492)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dougbu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4af6bec6e968f13b1d01c52d4866495e8646b77d", "message": "Bump test projects up to .NET 4.5.2\n- aspnet/Testing#248\n- xUnit no longer supports .NET 4.5.1\n- build tests for desktop .NET only on Windows"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/771cb483bc5df120a0fab84ec914a7ac7de21448", "message": "Increase .travis.yml consistency between repos\n- aspnet/Universe#349\n- minimize `dotnet` setup time; no need for caching\n- build with `--quiet`"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8cec9ac763bec5131beb12c20561bd13e0664d01", "message": "One build to rule them all\n- well, at least VS and command-line builds will share output\n- part of aspnet/Coherence-Signed#277"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4a27fb0bc9a8edcfc80ef8e45c45a31031499849", "message": "Remove project name from output path\n- aspnet/Coherence-Signed#187\n- remove `<RootNamespace>` settings but maintain other unique aspects e.g. `<DnxInvisibleContent ... />`\n- in a few cases, standardize on VS version `14.0` and not something more specific"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/7883b479d733078002d8fe9d3424f74bb541fc1b", "message": "Update `build.cmd` to match latest template\n- aspnet/Universe#347\n- `%KOREBUILD_VERSION%` doesn't work without this fix"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e7e187abc46adf5203db6a0c5d3f384280fa2943", "message": "Move Travis to supported Linux distribution\n- use Ubuntu 14.04 (Trusty)\n  - Travis support for Trusty is in Beta and currently requires `sudo`\n- run `dnu restore` with DNX Core since aspnet/External#49 is not fixed in Mono versions we can use\n- add required dependencies for DNX Core to `.travis.yml`\n- addresses part of aspnet/Universe#290"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/b532f89079bcb96410726f0abbaf4e7f9161f8e1", "message": "Explicitly choose Mono 4.0.5\n- avoids future problems related to aspnet/External#48\n  - e.g. when Travis updates default Mono version in `csharp` bundle"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5c895f81684c6e4d4304b547ab0469aaa2ce5ec4", "message": "Fix local build break"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/99ec01557af1ef0850946f1211d2bc075f4b1616", "message": "React to aspnet/Universe#290 fix"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/de8018629c452ff9f1c66843aca3b525cf007404", "message": "Change hardcoded `bash` shebang to `env`\n- aspnet/Home#695\n- support various `bash` installation locations\n- in particular, enable building on FreeBSD"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34025863", "body": "Won\u2019t this problem just go away once Mvc.Razor fills out a bit?  Code in that assembly should be responsible for configuring the services provided in the default case.\n\nFrom: Ryan Nowak [mailto:notifications@github.com]\nSent: Monday, February 3, 2014 18:41\nTo: aspnet/DependencyInjection\nSubject: [DependencyInjection] Magic Service discovery (#1)\n\nRight now we have a bunch of services in mvc that don't live in mvc assembly - they live in assemblies that depend on mvc. The problem with this is that in the absence of a clever solution you need code like the following, and right now there's no place to put this code but in the user's project (which references both MVC and MVC.Razor)\n\n```\n        serviceProvider.AddInstance<IFileSystem>(new PhysicalFileSystem(appRoot));\n\n        serviceProvider.Add<IVirtualFileSystem, VirtualFileSystem>();\n\n        serviceProvider.AddInstance<IMvcRazorHost>(new MvcRazorHost(\"Microsoft.AspNet.Mvc.Razor.RazorView<dynamic>\"));\n\n        serviceProvider.Add<ICompilationService, CscBasedCompilationService>();\n\n        serviceProvider.Add<IRazorCompilationService, RazorCompilationService>();\n\n        serviceProvider.Add<IVirtualPathViewFactory, VirtualPathViewFactory>();\n\n        serviceProvider.Add<IViewEngine, RazorViewEngine>();\n```\n\nThe alternative is some kind of configuration system, which means more required boilerplate (think views/web.config). So I'm spitballing a solution to spark discussion. All of the above code would be replaced with lines like this (inside mvc):\n\nvar services = new MvcServices();\n\nservices.DiscoverDefaults();\n\nGiven this kind of solution, I think a few restrictions probably apply:\n1. The assembly that provides a default service should be the one that defines the service type. This intentionally limits the set of possible error cases. Any condition where multiple assemblies attempt to default the same service would be really bad for the app developer.\n1. ```\n    We should think carefully about whether or not it's meaningful to allow 'override' with attributes as well. Right now it seems bad to allow overrides from attributes because of the same problem with multiples.\n   ```\n2. ```\n    These issues could potentially be solved with a 'resolve service' delegate of some kind, but that seems kludgy. At that point why not write your own code that put the service you want in the container.\n   ```\n\n---\n\nYou can merge this Pull Request by running\n\n  git pull https://github.com/aspnet/DependencyInjection magic\n\nOr view, comment on, or merge it at:\n\n  https://github.com/aspnet/DependencyInjection/pull/1\n\nCommit Summary\n-   Updated common build\n-   Added k10 and net45 build.\n-   Added solution folder\n-   Updated build.\n-   Updated project file\n-   Updated the build system.\n-   Remove csproj files.\n-   Skip the cache for KoreBuild\n-   Added nuget.config\n-   Updated build.cmd\n-   Removed the clear for sources.\n-   Updated build files.\n-   Updating build script to use cached nuget.exe\n-   Mock of magical service discovery\n\nFile Changes\n-   M .gitignorehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-0 (21)\n-   M DependencyInjection.slnhttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-1 (32)\n-   A NuGet.Confighttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-2 (13)\n-   M build.cmdhttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-3 (25)\n-   D build/_k-build.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-4 (17)\n-   D build/_k-clean.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-5 (13)\n-   D build/_k-restore.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-6 (7)\n-   D build/_k-standard-goals.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-7 (46)\n-   D build/_k.shadehttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-8 (31)\n-   A src/Microsoft.AspNet.DependencyInjection/DefaultServiceAttribute.cshttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-9 (19)\n-   A src/Microsoft.AspNet.DependencyInjection/DefaultServiceDiscovery.cshttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-10 (19)\n-   D src/Microsoft.AspNet.DependencyInjection/Microsoft.AspNet.DependencyInjection.csprojhttps://github.com/aspnet/DependencyInjection/pull/1/files#diff-11 (52)\n\nPatch Links:\n-   https://github.com/aspnet/DependencyInjection/pull/1.patch\n-   https://github.com/aspnet/DependencyInjection/pull/1.diff\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/DependencyInjection/pull/1.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34025863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34031950", "body": "@rynowak (Now we know not to reply to GitHub emails in Outlook.)\nI wasn't suggesting we make each assembly responsible for the services it owns.  Microsoft.AspNet.Mvc.Razor.dll sits at the top of the heap, has dependencies on the assemblies you mention, and can configure the services along with the rest of the user's default MVC environment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34031950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "couven92": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6db1c9475e1388e837af58ae8a321ec22d69873a", "message": "Removed duplicate call site chain search"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajaybhargavb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/22c09a2b7b8ca60b096a16dcf4277ebdbb354435", "message": "Removed packages list in NuGetPackageVerifier.json"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/213a055708ea4b0031beb6a84334cbb2497e2496", "message": "Removed unnecessary type in description in project.json from DI Abstractions"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/87b4853257e46d37c153c75fba6f6ecd6a61d4f5", "message": "Added Company, Copyright and Product attributes to AssemblyInfo"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/7cc9c1ae591e87f5cc608712673baa716f6a2c18", "message": "Enabled xml doc generation"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4c68c7765f9d5b61f3c1a3e6964751dad5d76c0f", "message": "Enabling NuGetPackageVerifier"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NTaylorMullen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/68bfd65536e6254b819e0b7068c6f1be960389ad", "message": "Update .travis.yml osx image to xcode7.3."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/893d9f0636f8f2d3c83268b399d8ae38634d4ba9", "message": "Pin global.json SDK to 1.0.0-preview2-1-003177."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f09f70486dffc22bcee78eaed034011ffc9b4fc7", "message": "Remove direct Microsoft.NETCore.Platforms dependency.\n\n- Microsoft.NETCore.App now pulls this package in.\n\naspnet/Coherence-Signed#344"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/60ca512beec3fefb4cd377ede009ff96b4848456", "message": "Unique-ify extension types to not be ambiguous cross repo.\n\n- Also updated test class names to reflect new extension naming.\n\n#408"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/33db176fa48f1a4a72c5925105b2e64c4f9257f6", "message": "Transition to netstandard.\n\n- dotnet5.X => netstandard1.y (where y = x-1).\n- DNXCore50 => netstandardapp1.5.\n- Applied the same changes to ifdefs."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f85f9979bcfe2a39b1ae80bd13e074b8bfb9e5f5", "message": "Revert \"Make DependencyInjection Abstractions class use NET46 compatible Ref Assemblies\"\n\nThis reverts commit f36206283f0a3ab4f322d0ed2595f7fc12188bf0."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a3ccb0735a2970b94934ec50e2fe4b18a324b0c6", "message": "Update System.Linq 4.0.2-* => 4.1.0-*."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/fabea97d58811b2c80fc99ed5fd76bbedff6e75b", "message": "Update ASP.NET 5 versions for ASP.NET Core.\n\nSee https://github.com/aspnet/Announcements/issues/144 for more information."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/c133e7674e6430d8131c4453ba2314bcc91fd31b", "message": "Rename AspNet 5 file contents.\n\nSee https://github.com/aspnet/Announcements/issues/144 for more information."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3c539d4fef7de934be966a5b84e00ca7eb49bc43", "message": "Remove System beta tag in project.json for coreclr packages."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bc6828e1cdaa283498629e34e3be736411d2c427", "message": "Update 'build.cmd' alias parameter to use full name."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/634bc418836384cc8a99bba237bf119398f35322", "message": "Update nuget.exe and corresponding feeds to v3."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/39ed40171fefc580a7eb0dad9fd34b7bc3cbb2fd", "message": "Update 'build.sh' to pull Sake from v2 NuGet feed."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0b2e87608dc8f0e8d5d0ed087cbd3bbf383f1b91", "message": "Update \build.cmd to pull Sake from v2 NuGet feed."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0d1b9333d2829cbac8ba5c7b6736511476ca682a", "message": "Update NuGet feed from v2 => v3."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9968092", "body": "You beat me!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9968092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "javiercn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f3eda2b3126ac5cd0c35edbd1d120ee93075eca7", "message": "Created public API baselines"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3807d5e1602ca355cb595e671402109eeefffd93", "message": "[Fixes aspnet/common#88] We have two copies of ActivatorUtilities\n* Make Microsoft.Extensions.DependencyInjection.Abstractions depend on\n  Microsoft.Extensions.ActivatorUtilities.Sources\n* Delegate the implementation of Microsoft.Extensions.DependencyInjection.Abstractions.ActivatorUtilities\n  to Microsoft.Extensions.Internal.ActivatorUtilities"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "khellang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/cc95c61c2841e14292555553b4d66dffe84f02db", "message": "Added CreateScope convenience extension method"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/d31425496ba33ac99984057146a3d74a6a26cb89", "message": "Updated link to new repo for the StructureMap adapter"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/b2d5aacdc8f438454c6374d189e7366471e942af", "message": "Various tweaks\n\n- Rename: `container` -> `provider`\n- Spelling: `sane` -> `same`\n- Added asserts on transients resolved from scope"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/619", "title": "Add method to replace services with a new implementation type", "body": "I exposed `TryGetDescriptors` as well. It's a method that I've found useful a number of times. Let me know if you want to make it private instead.\r\n\r\nCloses #618", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13803097", "body": "OK, why did this happen? @davidfowl? This test just started failing for the StructureMap adapter. Why would you ever want to track transients? I haven't looked through the code yet, but won't this leak?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13803097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "LayZeeDK": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/7b8371eea4213e4d7eefb613d85cf728d9063ebc", "message": "Fixed typo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BrennanConroy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/67aff3a23c0b1bdcf9e20f25af35a7e4f5357078", "message": "Update .travis.yml"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dadhi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a8dd472caafcf0a6db66facd6858376d4136f8b7", "message": "Removed note about DryIoc adapter rename"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a4e743459f814239d080ab5b560450025a2b3147", "message": "Updated readme link to DryIoc RTM adapter. \n\nadded: Note about package rename."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a1ba14bc59a0fb02e5ddce00bd189ebc7c31afb6", "message": "Updated link to DryIoc.AspNetCore.DependencyInjection package for RC2"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ef9e7433d55cd02ca9add7170c428bb776f1db1a", "message": "Added DryIoc adapter to readme\n\n[DryIoc](https://bitbucket.org/dadhi/dryioc/overview) adapter. It passes the DI.Spec.Tests."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ipjohnson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/312feff0ed3f378884033bee54175108bf1d56a1", "message": "Adding Grace to list of external dependencies"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17888542", "body": "Hi halter,\n\nI don't think this test is working properly. The call to Reverse just creates a new reversed IEnumerable, it doesn't reverse the collection. \n\nProbably just easier to do \n\n```\n        var collection2 = new ServiceCollection();\n        collection2.AddTransient(typeof(IFakeMultipleService), typeof(FakeTwoMultipleService));\n        collection2.AddTransient(typeof(IFakeMultipleService), typeof(FakeOneMultipleService));\n        var providerReversed = CreateServiceProvider(collection2);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17888542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17900486", "body": "ServiceCollection implements `IList<T>` but is not a `List<T>` itself and doesn't implement Reverse. Unless I'm missing something\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17900486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17901014", "body": "Sorry my mistake, I grabbed the test, copied it into my test class and it kept failing. Never occurred to me that there was a second internal class by the same name :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17901014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18321351", "body": "If you are looking for some more performance I think you can roll all this logic into Linq Expression tree and compile into a Func<IServiceProvider,object[],object> delegate. Because you know all the parameters, order and type when the class is instantiated you can write your expression tree to pass the parameters directly into the constructor. This allows you to skip the for loops and directly call the constructor rather than doing an invoke.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18321351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18415378", "body": "You probably want to handle the case where you get a null back from the service provider and throw an exception. In the old code it threw an general Exception but it might be nice to have a specific \"MissingDependencyException\" that holds a reference to the type being searched for and what type was being constructed. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18415378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18420331", "body": "I think that leads back into the discussion earlier of how much behavior can you assume out of the IServiceProvider interface. I agree it should throw an exception but if it doesn't throw one rather returning null you end up instantiating an object with a null.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18420331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "halter73": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/6b94c82e0a5a12ad4316146f4478750c67caec7d", "message": "Add spec test verifying that services maintain registration order"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36933107", "body": "I agree. The new naming is _much_ better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36933107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36933908", "body": "Merged. https://github.com/aspnet/DependencyInjection/commit/2927f2e49c391753b107017d3afc70f7eb601dda\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/36933908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38129227", "body": "@davidfowl I don't want to merge this until https://github.com/aspnet/DependencyInjection/pull/47 is in. The tests would fail without it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38129227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38252307", "body": "Most of this is rewritten in https://github.com/aspnet/DependencyInjection/pull/54\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38252307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/39620395", "body": "Dupe of #50\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/39620395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45279304", "body": "@ajcvickers  @HaoK There already is a `GetServiceOrDefault` extension method, but this is implemented using a general try/catch. We are looking into how we can improve this, but I think the plan is to make that part of a separate PR. There is already an open issue related to this, though it could be expanded upon. #75\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45279304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52569401", "body": "Currently the `ITypeActivator` is registered in `HostingServices.GetDefaultServices`. As long as that remains the case, it will be problematic to have an `ITypeActivator` that doesn't take an `IServiceProvider` as a parameter.\n\nThe problem is that event when you resolve the `ITypeActivator` from the `IServiceProvider` containing all the framework services, the `ITypeActivator` is indirectly be resolved from an inner hosting `IServiceProvicer` that doesn't contain any framework services. If `ITypeActivator` didn't take an `IServiceProvider` parameter, it would have to use the hosting `IServiceProvider` which doesn't include any services registered by MVC, SignalR, etc...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52569401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52717113", "body": "@pranavkm and I talked about this offline. The main issue is that if you don't pass in `IServiceProvider` as an argument, the `ITypeActivator` won't \"see\" services registered in the outer service provider.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52717113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52717497", "body": "I like this idea, but not all of the IoC containers we want ASP.NET to run on support this. For example, it looks like [this feature is implemented as an extension for Ninject](https://github.com/ninject/ninject.extensions.factory/wiki/Lazy).\n\nIf you want to use `Lazy<T>` in your app, you can chose to use a full-featured IoC container like Autofac or Ninject (with the extension).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52717497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53337835", "body": "I think the simplest solution is to make the lifetime of the ServiceProvider Scoped. The behavior would remain the same, and each instance of ServiceProvider would only be inserted into its _dispobles collection once.\n\nIf we made ServiceProvider a Singleton, the root ServiceProvider would always get injected instead of the proper scoped ServiceProvider.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53337835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53932707", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53932707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57004591", "body": "I originally wanted the extension method syntax, because I too think it's nice syntactic sugar. I'm pretty sure @lodejard didn't want this though. If @lodejard is OK with this, I say :ship: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57004591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57236912", "body": "@shhsu Nice. Are there any results up? Or does the PR need to be merged first?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57236912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57240947", "body": "@shhsu Did you mix up the new and baseline results? Your numbers indicate that the new version is 45% to 99% _slower_ on CoreCLR and Desktop respectively.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57240947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58401887", "body": "I updated the title to reflect that the extraneous Add\\* methods are currently on the IServiceCollection interface.\n\nRight now we have a weird distribution of Add\\* methods. Many are on the IServiceCollection interface, but even more are in ServiceCollectionExtensions. After talking to @lodejard with @pranavkm last night, we decided it was best to make all the Add\\* methods we could extension methods.\n\nI went too far with my \"generally we prefer extension methods\" comment. However, as you point out @Eilon, this statement makes sense for interfaces. It makes the interfaces easier to implement/mock, and it makes it less likely we will need to change the interface which is especially important since it is assembly neutral.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58401887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58432502", "body": "@shhsu You can preview the modifications that @loudej mentioned in the [feature-getservice-can-return-null](https://github.com/aspnet/DependencyInjection/commits/feature-getservice-can-return-null) branch. \n\nBasically, there is no need to use the TypeActivator in ServiceProvider anymore. Repeated calls to GetService will cause an single expression tree to get compiled that resolves the entire dependency graph for a given service without any nested calls to GetService.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58432502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58449543", "body": "You might want to talk to @lodejard before merging this so you two can decide how to reconcile these changes with the work he is doing in his [feature-getservice-can-return](https://github.com/aspnet/DependencyInjection/commits/feature-getservice-can-return-null) branch.\n\nOtherwise you got a :shipit: from me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58449543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59866577", "body": "Once my comments are addressed, :shipit:.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59866577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/60131947", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/60131947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/62291541", "body": "Your issue is with the following line of code:\n\n```\nbuilder.RegisterType<MyService>().PropertiesAutowired();\n```\n\nThis is the registration that is being picked up when you inject `MyService` into your controller and view. If you inject `IMyService`, you will get the expected singleton behavior. If you registered `MyService` as `IMyService` using Autofac, the `RegisterType` call would override the `AddSingleton` call on `ServiceCollection` since `RegisterType` is called after `Populate`:\n\n```\n// IMyService will still be transient if this comes after builder.Populate\nbuilder.RegisterType<MyService>().As<IMyService>();\n```\n\nAutofact defaults to transient registrations unless you specify otherwise. If you want to register a singleton directly with Autofac's `ContainerBuilder`, you can do so like this:\n\n```\nbuilder.RegisterType<MyService>().As<IMyService>().SingleInstance();\n```\n\nOr for a scoped service:\n\n```\nbuilder.RegisterType<MyService>().As<IMyService>().InstancePerLifetimeScope();\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/62291541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/62817013", "body": "This actually seems to be an issue with Ninject itself. I reported the issue a couple of months back when I first tried using MVC with Ninject:\n\nhttps://github.com/ninject/Ninject/issues/143\n\nYou can workaround this issue in the meantime by  manually registering `INestedProviderManager<FilterProviderContext>` explicitly as `NestedProviderManager<FilterProviderContext>`:\n\n```\nkernel.Populate(services, app.ApplicationServices);\nkernel.Bind<INestedProviderManager<FilterProviderContext>>().To<NestedProviderManager<FilterProviderContext>>();\n```\n\nThis will stop Ninject from falsely identifying a circular dependency in the open generic registration MVC makes for `INestedProviderManager<>`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/62817013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/62817154", "body": "We are already tracking this issue in the MVC repo, so I think we can close the issue here.\n\nhttps://github.com/aspnet/Mvc/issues/953\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/62817154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63409552", "body": "The latest discussion around this issue involved having a new type activation method that returns a `Func` to activate a given type. This returned `Func` would take an `IServiceProvider` and any extra arguments not supplied by the container like `ITypeActivator.CreateInstance` does today. The extra argument types would need to be specified before the `Func` could be generated.\n\nAll reflection could  be done before returning the `Func` which could then be cached by the caller.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63409552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64311155", "body": "@davidfowl As we discussed, there are no references to child scopes in the parent container.\n\nAt first I thought that this might have to do with the way `ServiceProvider` captures references to `IDisposable` services, but `ServiceScopeFactory` is not `IDisposable`, only the `IServiceScope` returned from `IServiceScopeFactory.CreateScope()` is, so there is no capturing going on.\n\nI ran this sample again today with KRE-CLR-x86.1.0.0-beta2-10733 and Microsoft.Framework.DependencyInjection 1.0.0-beta2-10598. When I did, I discovered some... interesting results.\n\nFirst of all, the increased memory usage is inconsistent but fluctuates between 4 values in when I run \"k run\" in a loop:\n\n```\n1035 KB (most frequent)\n523 KB\n267 KB\n139 KB\n```\n\nSetting both `child` and `root` to null (not just one or the other) after the loop makes the result only 4 KB less than one of the above listed values. Given this, it doesn't appear that the the leak is (entirely) caused by unnecessary references held by the child or root containers.\n\nWhen I uncomment `((IDisposable)child).Dispose();` 267 KB becomes the most frequent output, but the same is true if I replace `((IDisposable)child).Dispose();` with `child.GetService(typeof(object));`.  Disposing the `IServiceScope` as intended also exhibits this same behavior. In all these cases, the output is still _rarely_ 1035 KB, so I don't think disposing is really the key to this problem.\n\nA while back, when I initially looked at this issue, I examined the managed heap before and after the loop using VS and WinDbg. At the time, I did not see a large number of objects with types defined in the DependencyInjection project,\n\nThe types that did have an increased number of instances after the loop completed had no obvious relation to DependencyInjection. I just chalked up the increased memory usage as having something to do with the runtime. I can look into the managed heap again if you want me to.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64311155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64696370", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64696370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65331223", "body": ":ship: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65331223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65872469", "body": "Autofac also allows you to inject scoped services into singletons, so I'm leaning toward allowing in ServiceProvider too.\n\nEven so, it's easy to be unaware of the full implications of doing this. Take the example of using an EF connection in a singleton constructor. Even though the EF connection is registered as a scoped service, it effectively becomes singleton once it is injected into a singleton service. \n\nYou are generally not supposed to dispose injected services. The IoC container does that for you when the scope ends. In the case of a singleton and its dependencies, that won't happen until the container itself is disposed (at least with our ServiceProvider).\n\nEven if you decided to dispose the dependency yourself once you are done using it, the container would keep a reference to the dependency and dispose it again when the container itself is disposed. The same goes for any transitive disposable dependencies.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65872469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66203808", "body": ":ship: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66203808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66224501", "body": "@victorhurdugaci That's my understanding.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66224501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66232206", "body": "I think this issue is in essence identical to https://github.com/aspnet/DependencyInjection/issues/88. Can we mark this as a dupe?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66232206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66393358", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66393358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66665042", "body": "This is a Ninject bug. I filed [an issue](https://github.com/ninject/Ninject/issues/143) on Ninject's github repo a few months ago.\n\nI also filed [another issue](https://github.com/aspnet/Mvc/issues/953) on the MVC repo to track the progress.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66665042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69415411", "body": "Would `IScopeValue` be a better name? That way it might be less likely to get confused with whatever we end up doing to abstract the call context.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69415411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70186513", "body": "It looks like Castle.Windsor uses the CallContext to maintain scope: http://docs.castleproject.org/Windsor.LifeStyles.ashx#Standard_lifestyles:_the_less_common_ones_15\n\n@lodejard @davidfowl Do you think that implementing scoping this way is sufficient?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70186513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70303033", "body": "It is needed to do it easily in a way that will work with all IoC containers (such as Ninject).\n\nAs I mention in the issue, you can always create a new `IServiceCollection` that copies everything but what you want to replace. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70303033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70305606", "body": "There are many framework services that have default implementations that need to be replaced in some scenarios.\n\nFor example, you might want to replace SignalR's default in-memory `IMessageBus` with a [Redis based message bus](http://www.asp.net/signalr/overview/performance/scaleout-with-redis).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70305606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13278040", "body": "@davidfowl Holy stack overflow, Batman!\n\n![dispose-overflow](https://cloud.githubusercontent.com/assets/54385/9924069/b26710dc-5cb0-11e5-8675-c36ef2cd18bc.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13278040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13278333", "body": "I'm a bit surprised that no tests wound up failing.\n\nI'll submit a PR to fix this later tonight. I just wanted to take the opportunity to make fun of your bug as quickly as possible :trollface: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13278333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13295000", "body": "Oh the deflection!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13295000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17900567", "body": "@ipjohnson  https://github.com/aspnet/DependencyInjection/pull/416/files/6b94c82e0a5a12ad4316146f4478750c67caec7d#r67392725\n\nNot confusing at all. `</sarcasm>`. I didn't even realize this was a different `ServiceCollection` when I wrote it. I just saw the void returning `Reverse` method in intellisense.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17900567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10544366", "body": "Should we just create another method that _only_ takes the fallback IServiceProvider? We could call it `Chain` or something.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10544366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10728840", "body": "@loudej do you think we should guard against double disposing?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10728840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10728938", "body": "This is joke, right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10728938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10736554", "body": "There are no longer any Add methods on ServiceProvider. ServiceCollection takes care of all of that for us.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10736554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10780901", "body": "This method could go back to returning `object` if you think that's better. I made this `IList` when I was merging matching services from the fallback provider into the list of matching services from the `IMultiFactory`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10780901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10781400", "body": "I'm fairly sure: http://msdn.microsoft.com/en-us/library/system.type.containsgenericparameters(v=vs.110).aspx\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10781400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/13466574", "body": "I am throwing a general exception type here at @loudej's request. I believe part of the reason for having a \"TODO: \" in the exception message is to remind us not only to change the exception message, but also the exception type.\n\nI think that if users are providing their own container, they should expect to get the exceptions that their specific container throws if that container cannot find a service. Maybe it would be good enough to make the container specific exception an inner exception though.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/13466574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18106476", "body": "`builder.Populate(descriptors, fallbackServiceProvider: null);`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18106476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18106479", "body": "If you are going to change this private method to be an extension method, you might as well call it using the extension method syntax.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18106479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18106537", "body": "ditto\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18106537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18186256", "body": "I apparently commented on an outdated diff, so I'm reposting and deleting the old comment.\n\nThis is not thread-safe. I see that you have a lock around the call to ContainsKey and Add, but you don't around the call to TryGetValue.\n\nI suggest using a ConcurrentDictionary. I suppose that using a normal Dictionary might be faster if there is not much lock contention, but I would like to see real-world performance metrics involving multithreaded usage before making that decision.\n\nIf benchmarking shows locking is faster, I would suggest locking on a readonly field.\n\nIs there another PR containing the perf tests for this? I thought we were going to write the perf tests first to get a baseline.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18186256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18188272", "body": "The problem isn't that TryGetValue might return false twice. The problem is that [Dictionary](http://msdn.microsoft.com/en-us/library/xfhwa508%28v=vs.110%29.aspx#threadSafetyToggle) is not designed to be thread-safe for anything other than simultaneous reads. Unfortunately, this code as is allows for more than just simultaneous reads; it allows for a simultaneous calls to Add and TryGetValue.\n\nAccessing the Dictionary using TryGetValue [can and will throw NullReferenceExceptions](http://stackoverflow.com/questions/6738634/is-this-non-locked-trygetvalue-dictionary-access-thread-safe#answer-6739013) if there are non-synchronized writes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18188272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18317846", "body": "Guard against NullRefEx.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18317846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18541630", "body": "I do not understand why we need a new IService for this. Why not just register our own TypeActivator as a normal singleton service? Since we are providing an instance anyway, the call to Create would be just as fast.\n\nDo we really want to support using a custom ITypeActivator for activating services in our ServiceProvider? I thought the intention was that our ServiceProvider would only have the bare minimum functionality needed by our frameworks. If you want any extensibility, you should use a real IoC container. I really don't see the need for adding any complexity to support bootstrapping a custom ITypeActivator.\n\nThis isn't to say that it shouldn't be possible to supply a custom ITypeActivator to be used by our frameworks (e.g. MVC), I just don't think we need to complicate our ServiceProvider code to use it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18541630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18541923", "body": "Are we going to expect every container to have an ITypeActivator registered by default like we do for IServiceProvider and IServiceScopeFactory? If so, we would need to change our Populate methods for Autofac and Ninject.\n\nI really don't like adding a specific service in this part of the code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18541923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18542563", "body": "I think this PR might be getting a little too large. I thought the original plan was to just change the TypeActivator in the first PR, and then change ServiceProvider to use the new TypeActivator goodness in a second PR.\n\nI think you will need new perf tests for the ServiceProvider before you change ActivatorUtilites (or start using TypeActivator directly from the ServiceProvider). The PR you currently have open for these changes in the Perf repo do not test our ServiceProvider, since you are using a custom IServiceProvider implementation to test the TypeActivator improvements in isolation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18542563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18543992", "body": "I understand that. We should not be using the registered ITypeActivator in ServiceProvider. Just use the TypeActivator type directly. No recursion. Way less complicated.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18543992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18544825", "body": "The TypeActivator is being perf tested, but the ServiceProvider as a whole is not as far as I know.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18544825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18549159", "body": "I think we can get rid of ActivatorUtility. \n\nActivatorUtility is a static class anyway, so if we kept it, we could new up a TypeActivator and it would effectively be a Singleton. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18549159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18549214", "body": "Surely, but I think we would want a perf test for just ServiceProvider. I assume the MVC test covers a lot more than service resolution.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18549214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18550980", "body": "I don't think that there will be any types that are both instantiated by a framework via ITypeActivator and the ServiceProvider, meaning there is no real need for a shared cache.\n\nEven if you do decide to share the same TypeAcvtivator instance, you do not need to create this ActivatorService. Just register the TypeActivator as a normal service. Since you are providing the TypeActivator instance (which doesn't need an ITypeActivator or ActivatorUtilites to resolve), there is no recursive dependency.\n\nI don't think there is any need for ServiceProvider to use a passed-in ITypeActivator, and I still don't see the problem with having a TypeActivator used solely by ServiceProvider. Resolving one service just to instantiate another service instance seems unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18550980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18551419", "body": "Is there any reason we shouldn't just make this entire class internal assuming we keep it at all? I'm hoping we can just remove ActivatorUtilities.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18551419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18551935", "body": "If this code path gets hit, and the ITypeActivator implementation depends on another service that requires the ITypeActivator to be resolved, a StackOverflowException will occur. We should really get rid of this class.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18551935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18561908", "body": "I saw that @shhsu opened an issue for this: https://github.com/aspnet/DependencyInjection/issues/115\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18561908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/17702000", "body": "This comment should be updated.\n\nIn fact, I think it would be even better to make these properties to be be getters only. Then we could have three constructors. This would give a compile time guarantee that only one of these three properties can ever be set if the `ServiceDescriptor` type is used.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/17702000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/17702227", "body": "I think now is a good time to consider adding an enum to `IServiceDescriptor` indicating whether an `ImplementationType`, `ImplementationInstance` or `ImplementationFactory` is being used.\n\nI think this is preferable to simply choosing the first of these three properties that's not null.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/17702227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/17702578", "body": "You should add a test verifying that the `IServiceProvider` passed into the factory Func is appropriately scoped.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/17702578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18559300", "body": "LifecycleKind.Singleton should be the only option if you are providing an instance.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18559300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18559308", "body": "LifecycleKind.Singleton should be the only option if you are providing an instance.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18559308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18559454", "body": "What if the _configuration object defines a replacement implementation type? I know that the Describe call is for an instance, but before this change we would have specified the type as well. This would have left us with an invalid IServiceDescriptor, so who knows what would have actually been used.\n\nI think we should consider calling `Describe(Type serviceType, Type implementationType, LifecycleKind lifecycle)` if _configuration defines a replacement implementation type. Whatever we decide, I think we should do the same thing for the Describe overload taking a factory.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18559454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18559667", "body": "I see what your saying. I wish there was a way to enforce the correctness of this at compile time. Where are unions/algebraic data types when you need them! I guess what we have is OK. The changes you made to the ServiceDescriptor class should be enough.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18559667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18563319", "body": "I think making these setters private is absolutely _the right thing to do_\u2122, but this will break other projects.\n\nI just noticed these properties are being set in [OptionsServiceCollectionExtensions](https://github.com/aspnet/Options/blob/1.0.0-alpha4/src/Microsoft.Framework.OptionsModel/OptionsServiceCollectionExtensions.cs#L20).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18563319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18621182", "body": "Does it really make sense to call a private method with the exact same signature? It doesn't really matter I guess.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18621182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18621341", "body": ":+1: I should have written these tests to begin with.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18621341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18621778", "body": "I'm inclined to think that this won't be necessary. Maybe you should create an issue, so it can be discussed with a wider audience.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18621778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18873602", "body": "Does it make sense to move these private classes implementing IServiceCallSite into their own files? If so, should we create a new folder for them?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18873602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19123941", "body": "Is \"or\" supposed to be \"of\"?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19123941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19125230", "body": "This should also be [NotNull].\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19125230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19125348", "body": "What is the underscore/Pascal case convention here? In most of our other tests we just use Pascal case.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19125348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19125507", "body": "Put the `implementationFactory` param on it's own line and make it [NotNull].\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19125507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19126269", "body": "Interesting point, but the compiler does not complain about null checks against parameters with unconstrained generic types. It does complain if you constrain the generic parameter to be a struct.\n\nIronically, it also complains if you try comparing the unconstrained generic parameter to `default(TService)` instead of null (presumably because `==` might not be defined for some value types). I suspect that null checking generic parameters is a special case, because it is so common and the check can simply be omitted for value types.\n\nI think that adding `where TService : class` might be warranted anyway.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19126269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19189684", "body": "Any reason you are pulling TypeActivator out of the ServiceProvider?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19189684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19189699", "body": "Might want to assert that the ctor arg is \"BLARGH\" instead of null.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19189699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19233954", "body": "I didn't notice the other tests. If you want to change them all that's fine, but I don't think it's really important to change any of them.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19233954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19515872", "body": "Since most of our frameworks use the ServiceDescriber in GetDefaultServices(), it might be nice to set a different default OverrideMode as a constructor argument to this class. I would expect most frameworks to use DefaultSingle.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19515872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19517545", "body": "As long as the `descriptors` IEnumerable can be enumerated multiple times, then `serviceTypeDescriptors` can be too. Under the covers, you'll be enumerating over every element in `descriptors` each time you enumerate over `serviceTypeDescriptors`.\n\nWhile this isn't the most efficient thing ever, I don't think it's that big of a deal. Most IEnumerable implementations (including ServiceCollection) do allow for re-enumeration, so I think it's fine as is.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19517545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19517611", "body": "Add this to the other public constructors.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19517611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19517689", "body": "OverrideMode.OverrideMany\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19517689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19517695", "body": "OverrideMode.OverrideMany\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19517695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20546292", "body": "Do we want this to have the same visibility as `BuildServiceProvider`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20546292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20546919", "body": "Any disposable services that are resolved from the fallback provider will get disposed when the scope ends with our container. I'm pretty sure other containers will behave the same way as well.\n\nIs this the behavior we want? This could cause services that are actually singletons to get disposed early.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20546919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20547070", "body": "You can get rid of `_fallbackScope` since it is no longer used.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20547070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20547203", "body": "I'm glad to see this go :+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20547203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21347435", "body": "I just tried activating an abstract type using both `CreateInstance` and `CreateFactory`. I think both already give reasonable errors, even though we don't check for this explicitly in our code in either case.\n\nException for `CreateInstance`:\n\n```\n  System.MemberAccessException : Cannot create an instance of Microsoft.Framework.DependencyInjection.Tests.Fakes.AnotherClassAcceptingData because it is an abstract class.\n  Stack Trace:\n        at System.Reflection.RuntimeConstructorInfo.CheckCanCreateInstance(Type declaringType, Boolean isVarArg)\n        at System.Reflection.RuntimeConstructorInfo.ThrowNoInvokeException()\n        at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n        at System.Reflection.ConstructorInfo.Invoke(Object[] parameters)\n        at Microsoft.Framework.DependencyInjection.TypeActivator.ConstructorMatcher.CreateInstance(IServiceProvider _services) in F:\\dev\\Universe\\DependencyInjection\\src\\Microsoft.Framework.DependencyInjection\\TypeActivator.cs:line 259\n        at Microsoft.Framework.DependencyInjection.TypeActivator.CreateInstance(IServiceProvider services, Type instanceType, Object[] parameters) in F:\\dev\\Universe\\DependencyInjection\\src\\Microsoft.Framework.DependencyInjection\\TypeActivator.cs:line 41\n        at Microsoft.Framework.DependencyInjection.Tests.TypeActivatorTests.CreateInstanceDirectly(ITypeActivator activator, IServiceProvider provider, Type type, Object[] args) in F:\\dev\\Universe\\DependencyInjection\\test\\Microsoft.Framework.DependencyInjection.Tests\\TypeActivatorTests.cs:line 19\n```\n\nException for `CreateFactory`:\n\n```\n  System.InvalidOperationException : Instances of abstract classes cannot be created.\n  Stack Trace:\n        at System.Runtime.CompilerServices.RuntimeHelpers._CompileMethod(IRuntimeMethodInfo method)\n        at System.Reflection.Emit.DynamicMethod.CreateDelegate(Type delegateType, Object target)\n        at System.Linq.Expressions.Compiler.LambdaCompiler.CreateDelegate()\n        at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda, DebugInfoGenerator debugInfoGenerator)\n        at System.Linq.Expressions.Expression`1.Compile()\n        at Microsoft.Framework.DependencyInjection.TypeActivator.CreateFactory(Type instanceType, Type[] argumentTypes) in F:\\dev\\Universe\\DependencyInjection\\src\\Microsoft.Framework.DependencyInjection\\TypeActivator.cs:line 59\n        at Microsoft.Framework.DependencyInjection.Tests.TypeActivatorTests.CreateInstanceFromFactory(ITypeActivator activator, IServiceProvider provider, Type type, Object[] args) in F:\\dev\\Universe\\DependencyInjection\\test\\Microsoft.Framework.DependencyInjection.Tests\\TypeActivatorTests.cs:line 24\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21347435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21392986", "body": "Exactly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21392986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21495771", "body": "I don't think it's worth changing this since it only allows us to avoid allocating a zero length array. We could also special case when there are more `argumentTypes` than `constructorParamaters`, but again I don't think it's necessary.\n\nSince `CreateFactory` should only be called once per call site and then cached, this shouldn't be in a remotely hot path.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21495771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21503423", "body": "Any comments? `ServiceProvider` requires `ConstructorInfo.IsPublic` to be true, but `CreateInstance` allows for private ctors.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21503423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21505568", "body": "I added the suggested test cases. The second case, `typeActivator.CreateFactory(typeof(ClassWithAmbiguousCtors), new[] { typeof(int) }))`, fails because it too is ambiguous. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21505568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21494278", "body": "Maybe we can move over the doc comment summaries from `ActivatorUtilites` too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21494278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21494644", "body": "I don't think this `Interlocked.Increment` is buying us anything. If these tests ever do run in parallel, they would still be broken.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21494644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21579662", "body": "Just out of curiosity, who's calling `GetServiceOrCreateInstance`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21579662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21579791", "body": "This might actually be a carryover from when we threw for missing service types. I don't think we need the try/catch anymore.\n\nI also think we should null check the IServiceProvider since we are doing the same for the ITypeActivator. It would be one thing if we were just passing it through to another method, but we're not.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21579791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "cesarbs": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ed7e194b02e42e1bbc608c3222913d899f588e83", "message": "Fix OSX build on Travis."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e467a7ad28257720b9cede412e9689a468c6fa18", "message": "Strong name Microsoft.Extensions.DependencyInjection.Specification.Tests."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a452a965dc2b4967f20101c5d265793801fc7e7f", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/1e21385ab12efacf1c8456809fbae87f85fa98eb", "message": "Strong name everything."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "victorhurdugaci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/dc043f42ef2db164f59193b4624626f2827845dd", "message": "Webhooks notification"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4f2e6f035662b73936a2ed4fc249c163c9978c91", "message": "Remove the makefile"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bce2d8ae40c9a67c6cf2a9924dac45899580e6b9", "message": "Update the build scripts to the latest version"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/0e113d6420d589e476c0cfbc563a5e2fc102e557", "message": "Return the error code from build.cmd"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/5dbbe0685c3286601959e9ac388c53c35e649210", "message": "Update the build scripts"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/867afb2761dc753963dfa14fa58732be36147798", "message": "Build with dotnet"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/1b764590dc1b2ad0e8bad7fe20c305daa0aaddea", "message": "Add repository information to project files"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40968520", "body": "Yes, I have an example. See this pull request: https://github.com/aspnet/EndToEnd/pull/6\n\nIn Startup.cs \n\n```\nserviceCollection.AddInstance<UserManager<AppUser>>(IdentityFactory.CreateNewUserManager());\n```\n\nWhen I create the UserManager, I want to add a user to it (that's what CreateNewUserManager does):\n\n```\nUserManager<AppUser> userManager = new UserManager<AppUser>(new InMemoryUserStore<AppUser>());\n\nawait userManager.CreateAsync(\n    new AppUser(DemoUserName),\n    DemoUserPass);\n\nreturn userManager;\n```\n\nIf I would do something like:\n\n```\nserviceCollection.AddSingleton<UserManager<AppUserRole>, UserManager<AppUserRole>>()\n```\n\nthere is no way of adding the user to the UserManager when the manager gets created.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40968520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41423355", "body": "cc @Tratcher \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41423355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41424725", "body": "Duplicate (with more tech details) https://github.com/aspnet/DependencyInjection/issues/69\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41424725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42065670", "body": "Async would be nice but not necessary (at least initialy). If the function returns a task, the consumer could handle that. Maybe a GetServiceAsync later? :)\n\nI was talking to Suhas and he has another scenario where this would be very beneficial. He has a class that requires a HttpContext instance as constructor argument. He wants to inject that class into a controller constructor. However, the container does not have the HttpContext and thus cannot resolve his class instance.\n\nWith support for Func we could resolve the current HttpContext when needed. Maybe @suhasj  can post the actual code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42065670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57588483", "body": "Why not debugger display attribute?\n\nSent from my phone\n\n---\n\nFrom: Suhas Joshimailto:notifications@github.com\nSent: \u00fd10/\u00fd1/\u00fd2014 7:11 PM\nTo: aspnet/DependencyInjectionmailto:DependencyInjection@noreply.github.com\nSubject: [DependencyInjection] Provide ToString implementation for ServiceDescriptor class (#113)\n\nWe need to provide ToString implementation for the ServiceDescriptor class which can be them picked up by VS to make debugging easy. Right now going through the registered services when a break point is hit is kind of a pain since the we need to expand each one of them\n\n[error]https://cloud.githubusercontent.com/assets/1919946/4486048/403a997e-49d9-11e4-98d2-1c9bff04ac69.png\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/DependencyInjection/issues/113.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57588483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57871382", "body": "@pranavkm  As discussed offline, this change requires a few extension methods for `IServiceCollection` because when you call `IApplicationBuilder.UseServices` you don't have access to the underlying service descriptor.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57871382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64499435", "body": "@Eilon any suggestion on this? A proper exception type would make development much easier, especially when testing cases that throw...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64499435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64676261", "body": "The particular scenario that I am testing is whether or not a non-StackoverflowException is thrown when you have circular references. Yes, it is a dev-exception but it feels strange to see that it is an exception of type Exception (not something derived) and that the message is the one associated with circular refs. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64676261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64929144", "body": "Ping! Updated PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64929144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64929181", "body": "@davidfowl see `NoCircularDependencySameTypeMultipleTimes` for the case you suggested\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64929181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65103686", "body": "Merged \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65103686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65716910", "body": "I looked through our code and only 2 methods from `ActivatorUtilities` are actually used: (1) `GetServiceOrCreateInstance` and (2) `CreateInstance`. The second one is already a method on `ITypeActivator`. How about I make the first one an extension method for `ITypeActivator` and get rid of `ActivatorUtiltiies` completely? (or make all the methods in `ActivatorUtilities` extension methods for `ITypeActivator`)\n\n@davidfowl ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65716910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65833648", "body": "I looked at other DI container and I noticed that they do something different. For example with `NInject` you can register whatever you want. It checks when you try to resolve the services as follows:\n1. If you ask for all the services for a particular type, you get all of them regardless of lifecycle\n2. If you ask for a single instance of that service, it fails because the match is ambiguous\n\nOur DI container works a little different in case 2. We always return the latest registration.\n\nHow about we do this: we allow any registration and case 1 just like `NInject` but for case 2 we throw only if the lifecycle of the registrations is different? Basically, the first registration will specify the lifecycle and if any consumer expects a single instance of a service, we successfully resolve it only if all registrations have the same lifecycle.\n\ncc @halter73 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65833648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65837388", "body": "While you might shoot yourself in the foot if you reference a scoped service from a non-scoped service (or more generic, a narrow scoped service from a broader scoped one), there are scenarios that are totally valid for such a use case. You might have a problem if you keep a reference to such service but if it is a single use service, it might work just fine.\n\nHere is a valid example: a singleton that uses an EF connection once to get some data from the DB. The connection is used only in the constructor and then it can be disposed. If this wouldn't be allowed, the alternative would be to hack two service registrations.\n\nI looked at what NInject does and it doesn't prevent you from doing this.\n\ncc @halter73 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65837388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65855142", "body": "Talked to @loudej and @halter73 , we are not going to change the container behavior \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65855142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66154737", "body": "The Autofac namespace as in simply `Autofac`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66154737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66186979", "body": "@Eilon sure. I did all the renames\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66186979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66385112", "body": "PR updated\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66385112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053421", "body": "Shouldn't the argument be `Func<IServiceProvider, TService>`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053470", "body": "Type safe parameters? `Func<IServiceProvider, TService>` instead of `Func<IServiceProvider, object>`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053479", "body": "Type safe params?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8053479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8547801", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8547801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8721818", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8721818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21103405", "body": "Remove the pipe (I'm a plumber?). Replace with `,`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21103405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21044551", "body": "Added tests for generic cases\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21044551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21044553", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21044553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21044555", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21044555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21202434", "body": "Going to do it in two passes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21202434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21346950", "body": "Typo in the second phrase\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21346950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21347034", "body": "typo\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21347034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21347069", "body": "Should you check if the type can be activated at all before going into constructor match? (aka. type is not abstract)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21347069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21385352", "body": "Fair enough :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21385352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21575711", "body": "Moved\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21575711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21575714", "body": "Fair point\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21575714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21626917", "body": "```\nHosting\\src\\Microsoft.AspNet.Hosting\\Startup\\StartupLoader.cs\nHosting\\src\\Microsoft.AspNet.Hosting\\Server\\ServerManager.cs\nEntityFramework\\src\\EntityFramework.Commands\\ContextTool.cs\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/21626917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tillig": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/52a3eafab30161732fcffe0a20f585562e0aa8af", "message": "Updated Autofac doc location; formatted doc links"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mjsabby": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/f36206283f0a3ab4f322d0ed2595f7fc12188bf0", "message": "Make DependencyInjection Abstractions class use NET46 compatible Ref Assemblies"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bricelam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/34bf64c708a9674946af8bb951973e588cd4010d", "message": "Remove netcore50"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e0b0a863612745c2be7c4a6a811729400df3f2c3", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/362588b68dac7e4c1e487fd48c38047c4e6594ac", "message": "Downgrade to RTM packages for UWP"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/db9568c29a9d590d3c48817313b4dc6c3947c66b", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/fc1ac195209f66489f59ed2b3bbd99329a8b9570", "message": "dotnet all the things"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40960087", "body": "@davidfowl The name and namespace look good to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40960087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8213035", "body": "Reverted. Turned out to be unrelated to what I was trying to fix.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8213035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12067524", "body": "We should be able to remove the net45 configuration and use Profile111 (net45+win+wpa81), but I ran into issues with dependent projects' framework reference resolution.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12067524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "seesharper": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/a7e5016bb5c556e943316183c26fc0aed0d2d751", "message": "Added LightInject to the list of containers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JefferyZh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/ced9f6b37534b94bdf3faffbb01e4beaca2fcb1e", "message": "fix wrong description"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "henkmollema": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/4b86215bc8d1b47a0901c3585637633d4e115b6e", "message": "Add generic TryAdd with implementation factory\n\nAdds a generic `TryAdd` (transient/scoped/singleton) with a generic implementation factory as parameter."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8a44c556e506dcdc58533f8c746dbd3b23a238d7", "message": "Move advanced IServiceCollection extensions\n\nMoved advanced IServiceCollection extensions methods used primarily by frameworks into a separate namespace: `Microsoft.Framework.DependencyInjection.Extensions`.\n\nMoved:\n- `Add(IServiceCollection, ServiceDescriptor)`\n- `Add(IServiceCollection, IEnumerable<ServiceDescriptor>)`\n- `TryAdd(IServiceCollection, ServiceDescriptor)`\n- `TryAdd(IServiceCollection, IEnumerable<ServiceDescriptor>)`\n- `TryAdd*`\n\nThe default `ServiceCollectionExtensions` now only consists of `AddTransient`, `AddScoped`, `AddSingleton` and `AddInstance` methods.\n\nFixes #254"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/e490facfd40d46ed73b8c601c9c731f4e251dead", "message": "Replace GetServices with GetRequiredServices\n\nGetServices returns an emty array or list rather than throwing an exception when there are no services registered. The consumer should check with `Any()` if there are any services.\n\nAdded tests for every method in ServiceProviderExtensions"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/296870fee96d856dae07234866629dd696dc421b", "message": "Bugfix for non-generic GetRequiredServices\n\nThe non-generic GetRequiredServices wasn't actually checking if the service exists."}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/8331058e53a9a8c619e55181e7250306f6df4dde", "message": "Correct version for EF in README.md\n\nEntity Framework is on version 7, not 5. Also, Entity Framework looks better than EF imo."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benaadams": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/67a08ccedfee1f5281ed1701a22c83cf19eac8bb", "message": "Sanitize loops"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13268260", "body": "Heap allocates a new KeyCollection; just enumerate the dictionary directly and use `entry.value` which shouldn't allocate (the Enumerable is a struct)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/13268260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "troydai": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/3cf3e78f117543b83cdf60d2ee84ef9ab11e48e1", "message": "Update CoreCLR versions"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/bb06e72e8f810299d7b39bc273f57779c8f32651", "message": "Update Test's dependency"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikary": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/commits/cbd74e57f28da3f4fc90174b4cf91042fa07a323", "message": "Add TryAddEnumerable overload and Add implementation factory overloads\nUpdate generic constraints on methods for consistency\nThese changes will help make AddEntityFramework() idempotent"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ENikS": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/622", "title": "Unity added support for Microsoft.Extensions.DependencyInjection", "body": "Please add Unity to the list of compatible containers", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/26692682", "body": "@pakrym \r\nThis test only works for forward registering containers. Such as:\r\n- I need to get type A, let me register it with Disposable\r\n- Type A requires type B, let me register it with Disposable\r\nSo all these are registered before instance is created.\r\n\r\nUnity does it differently, it creates dependencies and registers them with disposable, once all resolved it creates the requested type. So check in line 680 fails although operation is valid.\r\n\r\nAny suggestions?\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/26692682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/26702384", "body": "After executing line 677 ``((IDisposable)serviceProvider).Dispose()`` I am getting this array:\r\n``` \r\ncallback.Disposed\tCount = 5\tSystem.Collections.Generic.List<object>\r\n[0]\t{4}\tobject\t\t\r\n[1]\t{3}\tobject \r\n[2]\t{2}\tobject \r\n[3]\t{1}\tobject \r\n[4]\t{0}\tobject \r\n```\r\nAs far as I can tell, this is desired/acceptable sequence.  \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/26702384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "yishaigalatzer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34258441", "body": "Need to be careful with setting default services in individual assemblies, as long term the assemblies we build will be consumed by other frameworks as well. \nAlso need to worry about initialization order, where magic because sometimes too much.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34258441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35699435", "body": "@lodejard ended up with two manager interfaces (assuming sync and async providers are explicitly separated), the manager is an implementation detail that can be separated as well. I didn't want to keep moving stuff around until we agree on the design.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35699435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35841179", "body": "The current plan is that the manager is auto injected upfront as an open generic, so its usable from everywhere and no one needs to register it. Hence it is currently in the DI library.\n\nIt's intended to be consumed by both users and framework developers, Lou and I chatted last week about putting it in the DI for now, but it's open to discussion and can be moved elsewhere\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/35841179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37479120", "body": "@halter73 got an ETA on this?\n\n@davidfowl should ActivatorUtilities public static class just go away?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37479120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45550442", "body": "Update MVC sample startup after this change:\nhttps://github.com/aspnet/Mvc/blob/dev/samples/MvcSample.Web/Startup.cs#L37\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45550442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66535829", "body": "Yes show us the code when you are done, so we can figure out if we can make it easier for the next developer.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66535829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66550907", "body": "This wasn't possible until a few weeks ago when we added getservice vs getrequiredservice.\n\nI'll chat with @Loudejard\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66550907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69478270", "body": "IScopeValue sounds as good as it is going to get :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69478270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69478861", "body": "That's fine too\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69478861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644757", "body": "Agree, this is really sugar code for no one. The framework(s) that depend on it already add it and the code is rather trivial, not to mention it has the annoying and completely wrong default parameter.\n\n``` C#\n        public static IServiceCollection AddScopedInstance([NotNull]this IServiceCollection services, IConfiguration config = null)\n        {\n            var describe = new ServiceDescriber(config);\n            services.TryAdd(describe.Scoped(typeof(IScopedInstance<>), typeof(ScopedInstance<>)));\n            return services;\n        }\n```\n\nLets just get rid of it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644787", "body": "#173\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936909", "body": "It's intentionally not wrapping the two together, because I think the user should explictly register the AsyncProvider, the common scenario is non async.\n\nRead the comment above, this is just a detail, the key thing is how the interfaces and behavior should be, once we agree to that I can finish this up. Not inclined to keep iterating for no reason\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936922", "body": "There are no two flavors\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9936922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9954460", "body": "The pattern is that the user does not even see the manager (and thus is why I'm saying it's currently an implementation detail).\n\nWe register an open generic IManager<> & IManagerAsync<> the user gets one, and they materialize over the specific T. Hence the user only sees the sync or async versions.\n\nThe reason this is still in a single class, is to discuss the registration and behavior pattern\n\none option: User explicitly registers providers as sync or async, and calling the sync manager iterates just the sync providers, calling async manager iterates just the async providers\nanother option: User still explicitly registers, but the async manager calls both the sync and async versions.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9954460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9976754", "body": "Lets follow up on this next week, I don't want to start sprinkling this for every await. We need to figure out if this is ever used outside of projectK and in a Gui application (my current guess is not, and hence not making the change)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9976754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10719932", "body": "Looks good to go for me.\n\nCan you track followup work to actually check that the type is concrete and then throw an appropriate message?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10719932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18419189", "body": "Di should throw the missing dependency exception rather than the type activator\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18419189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "loudej": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34798334", "body": "Testing\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34798334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37483465", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37483465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37620743", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37620743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37623462", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/37623462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38252865", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38252865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40642875", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40642875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40642997", "body": ":shipit: this is gonna change anyway after the api beautification exercises\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40642997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9803735", "body": "We should add unit tests to verify \"implementation instance\" descriptor also\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/9803735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459233", "body": "does autofac allow two \"as\" calls on the same registertype? if not, should there be a type for each interface instead of both on the same type?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459271", "body": "resolve IServiceProvider from ILifetimeScope\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459276", "body": "call dispose on lifetime scope\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459341", "body": "don't dispose the ilifetimescope or icomponentcontext that is ctor injected - it owns you rather than the other way around\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10459341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547622", "body": "Populate will change when ServiceCollection appears, so no point in overloading or fine-tuning\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547650", "body": "use `_fallbackServiceProvider` instead of `IServiceProvider provider`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547769", "body": "don't re-describe descriptors - if someone gives you an IServiceDescriptor it is already correct\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547960", "body": "move BuildServiceProvider to a ServiceCollection extension method, the extension method should be in a Microsoft.AspNet.DependencyInjection.Fallback namespace\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10547960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548230", "body": "add `IServiceProvider FallbackServices` property to `ServiceCollection` rather than taking as build or populate method argument... \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10548230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10597665", "body": "true\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10597665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10737318", "body": "it's for when you assign a different storage mechanism with SetContextSource which has the atomic \"exchange\" - the Value {set;}  wasn't returning the original value\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10737318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10828006", "body": "GetService can return null? should be if around the add?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10828006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10828022", "body": "service could still be missing? tryget here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10828022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10828069", "body": "not root - maybe put all in fallback?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10828069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lodejard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34799293", "body": "Another test\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/34799293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41742849", "body": ":shipit: (pending comment threads)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41742849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45282776", "body": "yeah, +1 for IEnumerable on default service, and :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45282776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56244766", "body": "yeah, it's something we need to drill into - but in the end it's unlikely we'll use a different interface that IServiceProvider for the main-line cases.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56244766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56478413", "body": "That's genius! You know, what that actually makes me think is that we probably shouldn't bake any kind of service discovery directly into the base DI library. That seems like a perfect example of an additional package we can tell people to use if this feature is asked for.\n\nWe're also working more on preprocessing to enable an application can take a dependency on a package that has ICompileModule implementations in it. So someone wouldn't need to have code directly in their app's subfolder.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56478413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57009552", "body": "We were being conservative earlier, and wanted to get more experience with how startup looked before finishing the API polish. Seems like a fine time to come back to this and make improvements.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57009552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58297913", "body": "Heads up on this one @shhsu - I'm making some modifications that could be potentially impactful\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58297913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583475", "body": "Yeah...\n- the ServiceProvider class should no longer have a concept of fallback service provider at all..\n- the KRE will have a hard-coded implementation of the list interface returning typeof(A), typeof(B)\n- the Hosting dll will also have a hard-coded implementation of the interface returning typeof(A), typeof(B) that it knows about\n- Neither ServiceProvider (nor anything we publish) would create that list for you\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12121628", "body": "Re \"defer setup until Options is first accessed\" Yes? Why not?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12121628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12121672", "body": "Don't assign ImplementationType when ImplementationInstance is provided\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12121672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12121742", "body": "AddSetup should be an extension method ServiceCollection.\n\nThere should also be an IServiceCollection interface, which should be assembly neutral. (Separate bug for that?)  That's where you'd really want to put the ext method\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12121742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12253446", "body": "I'm still uncomfortable with the idea of an open generic that applies IConfiguration. I believe there should be a concrete IdentityOptionsSetup, MvcOptionsSetup, etc in the fwk which are added to the service collection by the AddMvc(IConfiguration) ext method.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12253446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12253772", "body": "True, but for the application code we can have an .AddOptionsSetup<TObject>(IConfiguration) extension method that can map config strings onto any POCO.\n\nActually - come to think of it - a mapper to any POCO would probably be implemented via a class like `ConfigOptionsSetup<T>`. Wouldn't it be a cleaner approach to keep the mapping logic in entirely in the `IOptionsSetup<T>` implementation, rather than introducing an interface and base type to the options POCOs?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12253772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/13468284", "body": "Yeah, the \"TODO:\" in error messages is in a few places so far, meaning: figure out the right text for the message, figure out how to do string resources, figure out the right Exception type to throw or declare a new Exception type.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/13468284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sebastienros": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38739090", "body": "ActivatorUtilities is also using DeclaredConstructors and I think would potentially break on static constructors even though there is a filter.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/38739090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18110589", "body": "I didn't see it was private.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18110589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Tratcher": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40741923", "body": "merged\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40741923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41835873", "body": "How about #50?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41835873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41836229", "body": "See https://github.com/aspnet/DependencyInjection/commit/2bf1cfdac8d6e98edb02a9a5719a8ce61a973084\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41836229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41844789", "body": "Go ahead, you'll need to add those overloads to the interface anyways.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41844789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41866392", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41866392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42082699", "body": "Sounds like this is by design. That's why the IServiceScope you get back from CreateScope() is IDisposable.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42082699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42326814", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42326814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12172669", "body": "Use [NotNull] instead.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12172669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12196086", "body": "It's easy to add with your changes. We can worry about scrubbing the other code later.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12196086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "glennc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40985769", "body": "hey @rynowak can you take a look at this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40985769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40985954", "body": "Hey @halter73, is this done?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/40985954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41717462", "body": "ping @lodejard \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41717462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "anpete": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41425888", "body": "Related to #13\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41425888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42082818", "body": "Disposing should never be required to not leak managed memory.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42082818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64235283", "body": "@davidfowl Because GC\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64235283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64237064", "body": "The child ref is replaced every time around.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64237064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64441429", "body": "IIRC, memory usage was _way_ higher when we originally hit this - Sounds like it may have just been fixed indirectly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64441429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64683813", "body": "We use InvalidOperationException as our general purpose exception in EF too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64683813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10309015", "body": "Consider making this class immutable and enforcing the type/instance invariant with separate ctors. See [this](https://github.com/aspnet/Data/blob/dev/src/Microsoft.Data.Entity/Services/ServiceDescriptor.cs) example.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/10309015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20961919", "body": "Why not ISet?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20961919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "HaoK": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41430143", "body": "I like the idea of a convention where any constructor that takes an IServiceProvider as the first argument wins.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41430143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41744630", "body": "Merged: https://github.com/aspnet/DependencyInjection/commit/19284bd2dd8ba3a85a232bba3ad3bebfa149f8fa\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41744630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41844682", "body": "@Tratcher Did you want me to merge your changes into this PR?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41844682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41863174", "body": "@Tratcher Can you review?  I merged your changes, and also moved the rest of the generic overloads into extensions on IServiceCollection. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41863174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42070304", "body": "Fixed in PR #74 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42070304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42252599", "body": "@divega @lodejard Doesn't look like we need to make any of these changes in DI then, here's the identity PR adding the OptionsSetup that reads from config.  https://github.com/aspnet/Identity/pull/55\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42252599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43678262", "body": "Not taking this PR, instead going with design in: https://github.com/aspnet/Identity/issues/96\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43678262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/44450533", "body": "Rebased: 31f5b98758ba988ee371b2bc113d4d14cddae392\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/44450533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45276448", "body": "Perhaps Get[Optional|Nullable]Service instead of TryGetService since GetService is basically implicitly a \u201cRequired\u201d service now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45276448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/47275387", "body": "Options has its own repo now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/47275387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/61703814", "body": "merged 975fb84a4c9f80fa34ed10a9d3b77aa847736f87\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/61703814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/62048706", "body": "Replacing with a new PR with isFallback instead of this wierd enum...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/62048706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63153620", "body": "Going a different way\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63153620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63431516", "body": "Re-added GetFallbackServiceProvider extension method and moved all service manifest generation logic into that method\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63431516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63537406", "body": "Should we throw if import is called on a IServiceProvider with no manifest??\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63537406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63542357", "body": "Added manifest generation test, and fixed bug where we were blocking closed generic services in addition to open generic, i.e. IList<string> not just IFoo<>, Foo<>\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63542357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63905578", "body": "Hopefully final rev: removed Import from DI, moving to Hosting\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63905578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63914453", "body": "merged 308ab171fa8e03e2953316f901691df20c73e04f\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63914453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64153399", "body": "@davidfowl suggested TryAdd\n\nAlso added AddContextAcessor and AddTypeActivator extensions which using TryAdd.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64153399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64236886", "body": "- Added overload for TryAdd which takes IEnumerable and returns true if any are added\n- Normalize ServiceDescriber ctors to use new Configuration() if none specified, fixes null ref bug when null config was passed in \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64236886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65103892", "body": "merged 54115382e20d81b4f403b460a3ad2aecadd80173\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65103892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65104240", "body": "I added specific AddTypeActivator/AddContextAccessor in https://github.com/aspnet/DependencyInjection/pull/142 since hosting only added one and not both, so the more granular approach seemed more appropriate\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65104240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66233463", "body": "Closed as dupe\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66233463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69291542", "body": "Does supporting #158 require any changes to the interface?  Or do we just need to make sure that the name convey's that it can also be used for that scenario?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69291542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69293064", "body": "Got it, yeah having IScopeLocal and IScopeData which do different things would be pretty confusing.\n\nCould we rename this one to be IRequestLocal then?  The scope is implicitly the request today isn't it?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69293064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69293291", "body": "Yeah the other one isn't specifically related to scope, that one could be ICallContext maybe?  Since its abstracting async local/call context?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69293291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69440649", "body": "Maybe IScopeInstance.Value?   IScopeValue is ok too\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69440649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69478490", "body": "I think we settled on IScopedInstance\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69478490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69629924", "body": "Merged b3f137eaab3366f3e03b047d1ff6fb40bb26cbdc\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/69629924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583158", "body": "cc @lodejard @davidfowl @divega @halter73 \n\nPrototype IServiceManifest, overload for BuildServiceProvider and Import functionality\n\nDoesn't look too bad so far, I assume we can nuke all of the fallback code that lives in ServiceProvider?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/8583158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644771", "body": "I was about to suggest the same. +1 to just can the sugar method for registering. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/9644771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12017108", "body": "Is there a nicer way to test the AddSetup methods?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12017108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12017145", "body": "@loudej Should we be registering this default OptionAccessor<> everywhere by default?  i.e. all ServiceColletions?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12017145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12122042", "body": "Filed https://github.com/aspnet/DependencyInjection/issues/73\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12122042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12194519", "body": "I don't see any usage of NotNull in DI currently, should I file a new issue to add NotNull everywhere as appropriate?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12194519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12200345", "body": "Ok done, one other thing I noticed with this change, now that the overloads are hanging off of IServiceCollection as extension methods, this change is going to cause compilation breaks for any code that is not currently importing DI to pick up the extension methods, which is going to be a lot of people I think.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12200345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12201999", "body": "Actually the bigger break is from the return type changing to IServiceCollection, that is going to require code changes in all of the ServiceCollectionExtension classes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12201999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12253511", "body": "The hope was that each fwk could just use \n\n```\nConfigOptionsSetup<IdentityOptions | MvcOptions | EFOptions>. \n```\n\n I can take this out for now and just create a concrete IdentityOptionsSetup that's equivalent.  I also thought this might be useful for Applications to be able to just use \n\n```\nConfigOptionsSetup<MyAppOptions>\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12253511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12286157", "body": "I'm not sure we actually want to use enums, maybe the hardcoded defaults should just be public constant ints.  The reason an enum is a bit clunky is it makes it harder to insert setups to run in between (i.e. run after framework but before config) without fairly ugly casting (which is already a problem with this PR)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12286157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12286221", "body": "Ok I will move the config logic to an options setup extension method and update the PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12286221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12305035", "body": "Actually, we don't need a specific overload for AddOptionsSetup(IConfiguration) do we?  If their OptionsSetup has a constructor that takes IConfiguration, it should automatically get provided from DI, and they can already pass in the config via the overloads that take an actual setup instance already.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12305035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19194185", "body": "Not really, I copied this test as is from the one above it (StaticCtor) and changed the class, I can do any additional cleanup in here while I'm here if you like :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19194185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19194297", "body": "Good catch, fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/19194297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20418413", "body": "Removed class, moved manifest tests to its own test file outside of IServiceCollection extensions tests\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20418413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20489068", "body": "The param name is misleading, these are extension methods on IEnumerable, not IServiceCollection :(  That was the first thing I tried...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20489068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20489139", "body": "You can build a ServiceProvider out of any `IEnumerable<IServiceDescription>` is the idea I think, `IServiceCollection` is an `IEnumerable<IService`, so normally this doesn't cause any issues\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20489139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20546377", "body": "Bury this one level lower?  Microsoft.Framework.DependencyInjection.Fallback.Infrastructure?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20546377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20547088", "body": "Hrm, do we need to preserve the same lifetime as the fallback when adding these?  \n\nI will try to add a test for this behavior\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20547088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597154", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597163", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597167", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597172", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597211", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597248", "body": "Sounds like we don't need to do anything with this right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597272", "body": "BuildFallbackServiceProvider removed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20597272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20598148", "body": "Added tests for missing type in manifest, asking for a type in fallback that isn't defined in manifest, and a factory singleton test\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20598148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20773637", "body": "I've come around to the other side, since in Hosting, eventually we want to call AddTypeActivator but NOT ContextAccessor.  Also if/when we move Options into DI, we also wouldn't want to get options added either, which made lumping all of the DI services together seem not so good...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20773637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20774710", "body": "Yep, Hosting has 3 tests which blew up and it took me a while to figure out this was the reason why :)  Added unit tests for the two new extension methods too now...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20774710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20979710", "body": "The amount of classes in DI Fakes is getting pretty large, consider just one generic class for all of these:\n\n```\npublic class RoundAndRoundWeGo<TDependency> {\n    public RoundAndRoundWeGo(TDependency obj) { }\n}\n```\n\nGranted this introduces a slight variation of generics, and you lose the description in the class name (but the test name should be enough), for saves adding 7-8 more classes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/20979710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/22700956", "body": "Oops bad merge I will fix\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/22700956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ajcvickers": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41817116", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/41817116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45275791", "body": "@divega @HaoK and I have been discussing adding a TryGetService method. Can we add this to the DI code instead of having in multiple other assemblies?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45275791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45276801", "body": "FYI: EF is now updated so that I believe it won't break when this changes goes in.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/45276801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/46507555", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/46507555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/46595470", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/46595470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66555615", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66555615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/13464976", "body": "Can we use a more specific exception type than this? Also, will we always get this exception or sometimes get a different exception from the DI container in use? if it is the latter, could we consider wrapping it to get a consistent exception and message for consumers?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/13464976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "suhasj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42085263", "body": "It worked ! I was able to inject HttpContext using the IContextAccessor<HttpContext> property\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42085263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57570833", "body": "Moved this to hosting repo https://github.com/aspnet/Hosting/issues/79 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57570833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "KKhurin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42907277", "body": "This is blocking stress testing of MVC MusicStore app\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/42907277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53827398", "body": "@lodejard @davidfowl @halter73 - could you please code review this? \nI ran some ad hoc stress and some in debugger validation already.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53827398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53936974", "body": "@halter73 @Eilon \nUpdated the commit\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53936974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53938412", "body": "pushed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/53938412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64255430", "body": "Yes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64255430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "GeertvanHorrik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43300479", "body": "Great. We already provide several extensions for external systems, shouldn't be a problem to add this one once it is done ;-)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/43300479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davezych": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/49371332", "body": "I created a Windsor populator just for fun. I know this is in the backlog but is it something you might want and should I open a pull request for it? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/49371332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/49787207", "body": "@Eilon It definitely makes sense to me to have the adapters live in the DI projects themselves. \n\nI consider this reasonably ship quality, though, so let me review the CLA and if it's something I want to sign I'll sign it and submit a PR. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/49787207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "erlimar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52959096", "body": "I understand.\n\nActually my idea is: \"do not need a complex container (like auto fac, windsor, unity, etc) if I just want something simple, but I do not give decoupling\".\n\nI faced the following problem a few days ago:\n\n> While I created a simple library for `console` app (which used Autofac, but restricted to the`-svrc50`) then discovered that Autofac package I was using was not available for `-svrc50`. I actually did not need to use Autofac, only done for convenience (since I am still studying and not vNext domino new techniques). Result: I had several errors at runtime.\n\nHow I solved the problem:\n\n``` csharp\npublic class MyServiceContainer\n{\n    public IServiceProvider GetProvider()\n    {\n        return DefaultServices().BuildServiceProvider();\n    }\n    private IEnumerable<IServiceDescriptor> DefaultServices()\n    {\n        var describer = new ServiceDescriber();\n        yield return describer.Transient<ISample1, Sample1>();\n        yield return describer.Transient<ISample2, Sample2>();\n        yield return describer.Transient<ISample3, Sample3>();\n    }\n}\n```\n\nAnd in my `Main`:\n\n``` csharp\npublic static void Main(string[] args)\n{\n    var provider_ = new MyServiceContainer().GetProvider();\n    var sample1_ = provider_.GetService<ISample1>();\n}\n```\n\nI just do not know if this is the correct way, or if the scenario I'm presenting should not be covered by the component. But I imagine it's doable for the component by default provide this basic scenario where I can register my types (including batch) and solve them with few lines. And then, if you need something more complete, then I turn the other implementations.\n\nI do not know if I was clear.\n\nPS: Text automatically translated, excuse me any error.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/52959096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59285624", "body": "@i4004 i am analysing. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59285624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "divega": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55634472", "body": "Talked to @pranavkm. #64 is a bit more general in that it asks for the ability to register an arbitrary Func<T> but the actual solution implemented in #102 is exactly what this bug was asking for. @glennc: heads up that this is already being worked on. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55634472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55634550", "body": "Reopening because I believe @pranavkm  is using this one now to track.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55634550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57871617", "body": "@pranavkm Is this going to be checked in any time soon? We want to use it in EF in this milestone.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57871617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17811395", "body": "@NTaylorMullen I think you missed updating this in https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Extensions.DependencyInjection.Abstractions/project.json#L3\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17811395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12257368", "body": "+1. This was also my conclusion after talking to @HaoK yesterday. The AddOptionsSetup extension method that reads from configuration can be generic over they options type: `.AddOptionsSetup<TOptions>(ICofiguration config)`. What isn't needed at all is the IConfigOptions interface (or a base class for option types). Also, the `IOptionsAccessor<TOptions>` implementation doesn't need any knowledge of configuration.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12257368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12259632", "body": "We should change the type of the parameter to be the enum if it isn't already.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12259632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12259922", "body": "I am not sure how I would like this enum to look like but I think we should chat with @davidfowl, @lodejard and others. Here are a few issues I see:\n1. I don't think the word \"Default\" adds much to the name of the enum type.\n2. Although these values translates into the order in which setups are invoked by the accessor, I am not convinced that \"order\" is the best way to talk to users about it. It seems to be more about which one wins (so something like \"priority\" could be more appropriate) or where the setting is coming from (so something like \"level\" or \u201csource\u201d could be more appropriate)\" (if \u201corder\u201d is the high order bit, I propose we rename the enum members to \u201cFirst\u201d, \u201cSecond\u201d and \u201cThird\u201d :smirk: ).\n3. Naming one of the members \"Default\" can be pretty confusing: From the perspective of which values win, the actual defaults are defined at the \"framework\" level. On the other hand I understand for all the setup methods that are optionally going to take \"order\" as an argument, we need to pick a default in the sense of which value the parameter takes when it is not specified. Since these methods are generally used in application code, the default value of the parameter should be whatever we believe it is the most appropriate for user code (of course we also need to keep in mind that enum variables have a default value of 0, hence it is common to say that Default is 0). \n4. Although considering the value specified in user code to be \"hardcoded\" is common, I believe it is also common to want to specify a \"preferred\" value in code and leave the last word to external configuration.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12259922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12259931", "body": "This should be of the enum type.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/12259931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "david-driscoll": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55950347", "body": "We have something like this at work as well.\n\nI'm currently doing something similar for vNext, but I'm also playing around with a preprocess compiler, that emits the appropriate Add method call at compile time, so that at run time, you don't have to iterate over all the types of an assembly.\n\nIn addition this allows Diagnostics to be created that can inform the developer that they have added an incorrect implementations, again at compile instead of app startup.  In my case I'm using an attribute named ImplementationOfAttribute.\n\neg...\n\n```\npublic interface IService1 {}\npublic interface IService2 {}\n\n[ImplementationOf(typeof(IService1))] // Flags this as a compile time error, the interface is not implemented\nclass Service2 : IService2 {}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/55950347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56470447", "body": "Any interest in a PR?  I have a working example at https://github.com/david-driscoll/DependencyInjection.Annotations\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56470447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56506944", "body": "There is one more case that I need to support, that's Open Generic registrations, I think I'll end up doing that sometime today.\n\nWith preprocessing that's my understanding after talking with @davidfowl on Jabbr a few days ago.  I wanted to experiment with Roslyn and \"meta progamming\" to see what the limits are... they're pretty limitless.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56506944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59629195", "body": "You mean register the class as an implementation of the same (or base) class?\n\nIn the case of vNext anyway there are a few classes that are registered as the class (generally an abstract class, but I don't think this is always the case).  HttpContext or MvcMarkerService for example.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59629195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "GrabYourPitchforks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56244139", "body": "BTW, this is going to start causing me a lot of pain in the DataProtection stack soon.  The DataProtection stack is required to work both within K and outside of K.  I'm going to end up calling IServiceProvider.GetService frequently, and having to account for the fact that the method might have non-standard behavior depending on which runtime is loaded is not good.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56244139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Praburaj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56325754", "body": "Ah.. possibly an error on my side. Let me double check and open it if it reproduces. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56325754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "oleksii-udovychenko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56554175", "body": "Ok, I have used the master branch with alpha3, it is not worked for me. So I have switched to dev branch, kvm from dev branch and kre 1.0.0-beta1-10445. \nIt works now, thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/56554175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "shhsu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57015553", "body": "https://github.com/aspnet/DependencyInjection/pull/110\n\nPull request created\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57015553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57015759", "body": "The first stage of our optimization is to cache the constructors. There are more things that we need to do\n1. Change ActivatorUtilities to use this improved activator\n2. Try using compiled expressions instead of reflection to create instances\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57015759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57236277", "body": "Perf Test PR:\n\nhttps://github.com/aspnet/Perf/pull/361\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57236277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57237883", "body": "Unfortunately, no official numbers\nRoslyn is broken. I had to use last Friday's KRE build for local testing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57237883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57239767", "body": "@halter73 \n\nHere's the number I get locally. The following is the time needed to complete the test case (measured in msec, smaller is better)\n\nnew:\nCoreCLR: 22763.0\nDesktop: 10689.0\n\nbaseline:\nCoreCLR: 33000.0\nDesktop: 21291.0\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57239767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57241127", "body": "Yes, sorry i messed up the label. (Edited)\nNote that I would have discarded this entire pr if it were another way round.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57241127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57703489", "body": "There's quite a bit of demand of using Linq Expression tree instead\nI think any further work on this branch may be waste of effort. I will directly move on to the next stage and discard this PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57703489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57708013", "body": "There has been requests to go directly to expression. I discarded the previous pull request and will move to implement the expression base solution first\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57708013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57736982", "body": "Using the latest DI perf test for benchmark (completion time, smaller is better)\n\nDesktop\nbaseline:25484\nnew:5763\n\nCoreCLR is having problems. working on the problem\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/57736982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58388874", "body": "any updates otherwise?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58388874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18183818", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18183818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18183863", "body": "ah, nice trick. Didn't know it before. It doesn't work here though because the variable creator would be used later on outside of this brace.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18183863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184042", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184256", "body": "Rename to CreateFactory. I need to return the factory and the rank (apply exact length) here so I need to use the out param here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184401", "body": "I imagine the dictionary is only written a limited number of times during the first few requests. All subsequent requests would likely be reading from the same entries. I thought ConcurrentDictionary may create unnecessary overhead and I would rather pay a bit more here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184418", "body": "InstanceFactory sounds good\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184714", "body": "I was thinking it needs to close over the service provider itself. but I see this can create some confusion. Let me just rename them to dependencyInjectedTypes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184736", "body": "Rephrased\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184979", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18184979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18186906", "body": "We don't need a lock around TryGetValue though. The worst case scenario is that a couple of threads at the beginning evaluates the same factory but only 1 of them got to add it to the dictionary. We would have gotten the same worst case behavior if we use ConcurrentDictionary, because the real solution of that race condition is to lock around the whole factory creation as well. So overall, I think we paid a small price for not locking around the expensive factory creation code.\n\nI don't know if I like using ConcurrentDictionary here. The code as-is isn't really that messy. There's only technically 1 extra line (the lock) for the exact same behavior\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18186906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18188462", "body": "I see, Concurrent it is then\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18188462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18366582", "body": "Yes, I am doing this next as mentioned https://github.com/aspnet/DependencyInjection/issues/105\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18366582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18372192", "body": "happy path considered. Not sure what upgrade means though\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18372192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421133", "body": "Sure\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421266", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421474", "body": "We picked the first one seen. Come to think of it, it's not ideal because we don't want behavior to unexpectedly change. Should we open another issue for this?\n\nThat's also true for before the change though. see it only updates when bestLength < length, if the current length is already maximum we really shouldn't keep looking and waste time.\nOverall what makes sense is ambiguous. I am actively taking to @lodejard / @loudej  about this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421904", "body": "Moved the static method to bottom\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421934", "body": "Sure\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421988", "body": "Cache logic was removed. Forgot to remove comment. my mistake\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18421988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422140", "body": "I was a little bit on the fence about this. Do I want to permanently hold on to this object to save a little on expression compile time which only happens once per serviceType?\n\nShould we keep it simple until the profiles tell us to do otherwise or do you think it is worth it to start with that? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422205", "body": "Now it is\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422409", "body": "I am not familiar with this. Is it like Contract.Assert which can be optimized out? It is pretty critical in this method.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422449", "body": "Yeah, some prime. Do we have policy on choosing prime for hashing? I see it pretty much everywhere in our code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422825", "body": "Just tried it out\n\n```\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        I1 o = new C1();\n        o.M1(\"\");\n        Console.ReadLine();\n    }\n\n}\n\ninterface I1\n{\n    void M1(string str);\n    void M1(string str, params object[] objects);\n}\n\nclass C1 : I1\n{\n    public void M1(string str)\n    {\n        Console.WriteLine(\"Short\");\n    }\n\n    public void M1(string str, params object[] objects)\n    {\n        Console.WriteLine(\"Long\");\n    }\n}\n```\n\nThis outputs:\n\nShort\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422874", "body": "I think what would happen is after recompiling the compiler would redirect all non-var-arg calls to this new method\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18422874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18473018", "body": "Moved\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18473018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18486857", "body": "So I have removed the extra non-varargs extra method from the interface. Actually according to my micro-benchmark it  caused some regression for the non-varargs calls. (I understand that the majority of the calls are non-varargs.)\n\nIf we ever need to squeeze a little more performance this is one place we can look at.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18486857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18538507", "body": "It's public so I wasn't sure if anyone is dependent on it. I just removed it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18538507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18543100", "body": "Activator is being perf tested. I added the feature as requested by @yishaigalatzer. My understanding is that we want the feature to be out to be in time for release.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18543100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18543517", "body": "Change of ActivatorUtility to use TypeActivator caused a requirement for ITypeActivator to be present at all time for ServiceProvider.\nIf I register TypeActivator as a simple service, when service.CreateInstance is being called it would call ActivatorUtility.CreateInstance, which would go look for ITypeActivator in the service provider and triggers the same service.CreateInstance to be called. This is an infinite recursion. This class is here to prevent that.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18543517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18543757", "body": "Same as point above. ITypeActivator is essential for this implementation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18543757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18547540", "body": "How about the singleton aspect. We don't want to do new TypeActivator in the services. The only way we can get a Singleton TypeActivator instance in activator utility is via serviceProvider.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18547540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18547633", "body": "@troydai \nFrom what I understand is covered by the MVC throughput test for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18547633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18550312", "body": "Of course, but changes on the serviceProvider will reflect on MVC throughput. I am not saying we should rely on it for ever. We will need to design a test on serviceProvider next to track its performance in detail.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18550312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18550488", "body": "The point is that we don't want to new up a TypeActivator. We want to one that is in ServiceProvider. If we new one up in ActivatorUtility (or static Service.TypeActivator variable if we were to get rid of ActivatorUtility) we are still going to have 2 TypeActivator alive in the application because there will be one in the ServiceProvider.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18550488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18552522", "body": "I am not sure we should have the 2 instance singleton only because we want to assume they don't share cache. Also I am not sure we can make that assumption anyway.\n\nI understand that you don't want this extra class especially it is basically the same class as Service with 1 line difference. I thought about it and thought there might be a cost to make Service.Creat(ServiceProvider) virtual and decide to go with the ugly route.\n\nThe reason I didn't implement the instantiation of TypeActivator you described is that I didn't want to new up any TypeActivator instance unless the client didn't describe a TypeActivator. If they client do describe a TypeActivator I want to use the instance/type they provided and with the scope they have chosen. I am just trying to be as flexible as we could.\n\nIf we chose to go with the less flexible route we should think about what to restrict what client could do. Note that client package now describe ITypeActivator as TypeActivator and this would cause the infinite recursion as described if we use normal service provider\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18552522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18598646", "body": "The scope of the PR has become a bit large. This class will not be removed in this PR\n\ncreated an issue instead\nhttps://github.com/aspnet/DependencyInjection/issues/118\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/pulls/comments/18598646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "moozzyk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58386758", "body": "+1 \nIn addition extension methods are static methods which oftentimes makes testing/mocking very hard (vide SignalR client)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58386758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17899109", "body": "I think `List<T>.Reverse()` is in place\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/17899109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "i4004": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58835992", "body": "@erlimar You can use [this](https://github.com/i4004/Simplify/wiki/Simplify.DI)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/58835992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tugberkugurlu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59179120", "body": "IMHO, it would be sad to see this baked in. I would rather write a few more lines of code than trying to discover what happened and those methods (`AddMvc` and `AddSignalR`) invoked.\n\nThis can also be eased by scaffolding systems like yeoman for devs who don't use VS and VS templates for the ones that use VS.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59179120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65909535", "body": ":+1: for throwing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/65909535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "npehrsson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59627073", "body": "Why annotate the class, why not just add it as other DI containers do.\nFor example Unity can resolve types even if has not been registered or having a annotation on it.\nThis is something I miss.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59627073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59752397", "body": "I mean that classes that are not abstract and are having public constructors should be resolved automatically without the need of register them first. They should be resolved as Transient.\nIf one want another behaviour one should register it.\nThis will be convention over configuration.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/59752397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jeremydmiller": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63099616", "body": "@DerAlbertCom Can you make your custom SM policy smart enough to know what types are supported by FallbackServiceProvider so you can know when to fall through to StructureMap's own policies?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63099616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63103666", "body": "@davidfowl What about using your default container in the early stages of bootstrapping, but then copying the relevant services into the application container later? Even if the \"registration\" is just an explicit usage of your internal container as a de facto factory, you'll get the diagnostics back and the runtime benefits. Again, more complexity upfront, but simpler at runtime.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63103666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DerAlbertCom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63168078", "body": "Well, i think i think it would be possible for the types which the Framework used. But does not help with the current implementation of the SM Adapter. Because SM goes for Open Generics straight to the FallbackFamilyPolicy and didn't try it with its \"normal\" policy. this maybe a bug/edgecase in SM.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63168078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63212793", "body": "Great to here! \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63212793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64191876", "body": "Saw that it is gone, will adapt the adapter this week.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64191876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64191990", "body": "Not only the implemtation is simpler, also less missuse is now possible ;)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/64191990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "muratg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63399115", "body": "See previous comment\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63399115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63399349", "body": "Folks should use a third party container for more advanced scenarios.  This doesn't fall within the scope of our DI.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63399349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63399954", "body": "Design is changing around this area.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63399954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63400727", "body": "Based on triage discussion, closing this one.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63400727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63401545", "body": "Investigate if we can remove ITypeActivator for the future.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63401545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63402843", "body": "Triage decision: this is by design. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63402843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63403912", "body": "Closing this PR per triage decision.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63403912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63404000", "body": "Closing this per upcoming design changes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63404000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63404130", "body": "Closing per triage \n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63404130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63404440", "body": "Please get this in for Beta2\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63404440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63404587", "body": "Closing.  We have the second one already implemented.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/63404587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "Tragetaschen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66488178", "body": "Sure: https://github.com/Tragetaschen/NinjectNamedBindings\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66488178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "danroth27": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66664000", "body": "After discussion with @yishaigalatzer @lodejard we decided to do http://github.com/aspnet/mvc/issues/1707 instead.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/66664000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ilmax": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70242533", "body": "Is this needed to replace framework registered services with custom implementation?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70242533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70304425", "body": "@halter73 what you need replace service for?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/issues/comments/70304425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "smbecker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/18567702", "body": "Mostly for my own edification but I have to ask. What value does this method provide over just having the one CreateServiceProvider method that accepts IServiceCollection? What would be done with the result of CreateBuilder? If the usage will likely always be `CreateServiceProvider(CreateBuilder(services))` then I don't see any value in the separate methods but I am also likely missing something.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/DependencyInjection/comments/18567702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}