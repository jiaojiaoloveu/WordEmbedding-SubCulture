{"_default": {"1": {"grahamehorner": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1585", "title": "IUserStore/IUserRoleStore", "body": "IMHO IUserRoleStore<T> shouldn't inherit for IUserStore<T> as this could case issues where user roles have a different storage provider to that of the UserStore; ie. a centralised user store for multiple applications; with each application having an implementation of the role store. ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1565", "title": "Improve test ability of TOTP", "body": "IMHO TOTP needs to use ISystemClock to allow for testing to skew clock outside TOTP TimeStep, also at present the TimeStep is fixed at 3 mins which result in a window of 9 mins either side of the time the code was issued, this should be configurable with a note that a larger worn is less secure and a smaller windows is more prone to expire.\r\n\r\nie. when using an authenticator application a small windows of 2 mins is suffice\r\n     while using email/phone TOTP systems a larger window is required due to delays in communication of the code to the user", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1564", "title": "RFC6238 Pin Length", "body": "IMHO the service should allow for a configurable PIN length 6/8 and be public; the GenerateCode/ValidateCode should also return/accept a string; the length of the pin is important\r\nis current controlled by the RFC6238 as a const, service which may result in a number that requires padding with 0s and a consumer of the service many not realise resulting in the wrong length code getting passed up the call stack.\r\n\r\npublic static int GenerateCode(byte[] securityToken, string modifier = null)\r\npublic static bool ValidateCode(byte[] securityToken, int code, string modifier = null)\r\n\r\nsee: https://tools.ietf.org/html/rfc6238 for reference\r\n\r\nstring generateTOTP\r\n..\r\nwhile (result.length() < codeDigits) {\r\n             result = \"0\" + result;\r\n         }\r\n return result;\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1461", "title": "TwoFactor/MultiFactor Authentication without asp.net core Identity", "body": "The current TwoFactor authentication is strongly link to the asp.net core identity, please consider allowing TwoFactor/MultiFactor authentication wihout using asp.net core Identity.\r\n\r\nexample: sites configured to use external oauth/authentication providers such as Facebook, Twitter, Google and Microsoft accounts where a authenticator application is needed to allow the uses to gain access or elevat permission for some action. ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "javiercn": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1584", "title": "Travis not enabled in Identity?", "body": "For some reason it doesn't seem to be triggered @HaoK @Eilon \r\n\r\n![image](https://user-images.githubusercontent.com/6995051/35198212-64051ad0-fea0-11e7-86df-6249a08ce705.png)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1572", "title": "Improve the extensibility of the default identity UI", "body": "Support changing the user type from IdentityUser to TUser while using the default UI.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1571", "title": "Bundle and minimize javascript and CSS assets for the default identity UI", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1570", "title": "Add functional tests to the default embedded UI", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1550", "title": "Productionize IEmailSender interface", "body": "We need to refactor the interface that we had on the template (now on the UI package) into a shape that we like, and find the right place for it. (probably the M.A.I package).\r\n\r\nMy proposal\r\n```csharp\r\npublic interface IEmailSender \r\n{\r\n    Task SendAsync(Email email);\r\n}\r\n\r\npublic class Email\r\n{\r\n    public IList<string> To { get; }\r\n    public string Subject { get; set; }\r\n    public string Body { get; set; }\r\n}\r\n```\r\n\r\nThe idea of using a class is to allow for adding new members if necessary in the future without causing breaking changes.\r\n\r\n/cc: @HaoK ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1477", "title": "Create IdentityClient for querying user data from a client application", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1476", "title": "Support discovery for provisioning client credentials at runtime", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1475", "title": "Support client credentials flow", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1474", "title": "Define default values for every configuration setting we can", "body": "Define the issuer dynamically based on the current host.\r\nDefine default values for all openid/oauth parameters of the applications defined by convention.\r\nPlug-in MVC endpoints/etc through IApplicationModelProvider", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1472", "title": "Update SigningCredentialsManager and SigningCredentialsProvider", "body": "Make it a two step process first ask providers for existing credentials. If no one returns a set of valid credentials, ask providers to generate new ones.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1471", "title": "Add in-memory layer for applications", "body": "Convention based scenario", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1470", "title": "Decouple application tokens from identity", "body": "Provide default implementations of the components that identity currently implements.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1469", "title": "Push login and session management abstractions into the core application tokens libraries", "body": "* Identify required user principal claims.\r\n* Define an interface for getting the currently logged in user.\r\n* Define an interface for generating a link to the login endpoint. (Maybe)\r\n* Define an interface for managing sessions (required for back channel logout functionality).", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1359", "title": "Cleanup startup experience", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1358", "title": "Support multiple client secrets", "body": "* Provide a name for a given client secret.\r\n* Provide an expiration date for a given client secret.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1357", "title": "Cleanup test website and sample", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1346", "title": "Issue creating tokens using a certificate in full framework", "body": "Tracking issue for: https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/667", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/5079f708e11b86536b9bdd0827000035bb9ed23c", "message": "[Fixes #1583] Add authorization to the default Identity UI"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d968fdd31fb869414a416c0dfd4902a359b4f84a", "message": "[Fixes #1580, #1581] Update Identity UI to use Razor precompilation\n* Switch from using the embedded file provider for the precompiled views\n  for actual razor precompilation.\n* Add MSBuild props and targets file to include additional assembly\n  attributes on the generated precompiled views."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/07bf52ec0d20ef5a95233c7bf2029bd449d71872", "message": "Fix fixed dependency"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/56158b4fb024ccde78fe5b6b4bbb9d8421a7b19b", "message": "Remove unnecessary dependencies (#1548)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7ccc463f6d6240684e1af37cb5e5d2cd51e5f095", "message": "Remove .vscode files"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/93016c602ad8a89e9cd37f74b1f9589370e3d30e", "message": "Add .vscode to the .gitignore"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4b49f2b482d9be35dc62ebaba5b6c299293d4539", "message": "Revert \"Revert Move identity into an Area in a library (using Razor Pages) (#1537)\"\n\nThis reverts commit d612d2034471a04a2372298773fcacaa0b77a44c."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2964515d8556e90fb88bcb6dcacc9f762965bba1", "message": "Adds support for a default UI for identity.\n\n* The default UI uses its own Area (Identity).\n* The default UI requires MVC and StaticFiles to be present on the\n  request processing pipeline.\n* The default UI requires the user to provide a '_LoginPartial ' partial\n  view in their application in a location that the view engine will find\n  it. This location is tipically /Pages/Shared or /Views/Shared\n* Current limitations:\n  * The UI is self-contained and non-customizable (outside of things possible with Razor pages).\n  * Customizing the User, role, etc. is not supported at this time."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/1fbedc4c544f5bf5a9d6e4e8c4c8608cc3edea7f", "message": "Microsoft.AspNetCore.CertificateGeneration.Task"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/109b0feecdfb323bad35d6f20a8ff93fe2cc5aa8", "message": "Fix the build"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3ec59d141fe1178d4a1f8a4910080142d03af8ff", "message": "Add missing license files"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f11d692976a4be6e71bb7e84005566e94b8ee20e", "message": "Rename the area IdentityService to Identity"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/0fbef1ec0bb68fa08a9554805994f70a57d461c7", "message": "Fix issue with the Msal filter"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/22509c0872c942eb4a7b9ddeb2748f53b32fc44e", "message": "Modified Msal filter on the sample to be more permisive"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a7804c30cc0ce09b4a75332b8d34c3035111c0f1", "message": "Workaround for MSAL.js sending the logout request with the wrong casing"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/971baec11142a5e032e88306a7432c568a7441a8", "message": "Workaround for Visual Studio complaining about inexisting project.json file"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/81125571649b2c9cbd6794df8f51cf2ee0fc88dd", "message": "Update migration to enable all scenarios out of the box"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ca184fc2ed319681b6dbad2b2685b9ba3fc6b342", "message": "Fix path separators on functional tests"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/9d937cac4b4cb94fa83b2069bb33136dc6b85c3a", "message": "Disable developer certificate middlware on test website, replace developer certificate with pfx from file"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7216144fb8e5967c30353ef968d320f45d680c92", "message": "Remove WPF application from build"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/293976688ad79d85b326cef942b1bf8973042c74", "message": "Added basic MSAL UI to the sample, added SPA sample"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3828f2d7c4681da4c201514e16552ea1d1c4e08d", "message": "Add native WPF sample for identity and OIDC"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/eb43a41a4cb7a84961c6823b7481a31ca28b32f4", "message": "Add a step to ensure the development certificate is on the machine"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/b3c8ff4ae5664f6a20c41df51cfef642f54b5e93", "message": "Add a website for functional E2E tests and make an OIDC id_token flow succeed\n\nAdd a couple of functional tests for doing an id_token flow and an authorization_code flow"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f91e3ff3425992587bc93645687f81176b11bebe", "message": "Fix versions on OIDC sample"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e38759b8a2de1b7a4a1c19462e40214b43c1cf3b", "message": "Make OIDC sample netcoreapp2.0 only"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/904ff0e06043edc2ae924947fff61f031b1a0c4c", "message": "Added validation, storage tests"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/48f9d47e903e02a661856f272d3a6a79fffbc756", "message": "Add a sample using OIDC and integrated client"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8b41267e1aa52e1b4678903b7e6d627ff8d02138", "message": "Runtime clean-up"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/6a3fca86b5b49f3396209488afbf6a2c8383c8b4", "message": "Add support for proof of key for code exchange"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f0a6eee30ebd66ccf6ca2cdff795a3a5c8eedd25", "message": "Add support for keyvault"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/63f7f9a62ce246daf1f1e96749ac2cf40bb4a34d", "message": "Include the developer certificate by default, make it noop when environment != development"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4083f3d59751fdff75a07abb0cd2b0cff151f3fa", "message": "React to changes in cryptography APIs"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/21ea69ed631fef97d1de3544d9a3bc306ba2a3a3", "message": "Fix references"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c7567f9f74014690ca672d09b8c9748b9d740bc1", "message": "Add support for exposing identity as a service"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e72f98bc87d0a527d7cfaa60c877f5f3ab25c770", "message": "Created public API baselines"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1586", "title": "Fix manage views layout", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FanrayMedia": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1582", "title": "IdentityUserToken table PK and expiration date", "body": "For IdentityUserToken table is there a plan to add an Id as PK and some sort of expiration date for the tokens?  Also where could I find a sample that uses this table?  Thanks.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "simont789": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1576", "title": "Using EntityFramework Core to store Identity Database in Azure sql", "body": "Hi Community,\r\n\r\nAs mentioned, I'm trying to store all my Identity information in Azure Sql using Ef Core. Thought it would have been smooth but I've been facing a lot of difficulties. Research online has shown me ways to edit the migration file, since there are some wrong data type when it is mapped. However I'm still stuck with the \"System.Data.SqlClient.SqlException (0x80131904): String or binary data would be truncated.\" message. \r\n\r\nBefore I show my problem to the community, just wondering if there is a proper tutorial to teach us how to map your Identity core to a database with Entity Framework Core? Or if there is an easier way to do things? All I wanna do is just saving my Identity info on the cloud for my asp.net core app. Really just using the default settings at the moment. \r\n\r\nIf these information does not solve the problem I will post my code up and try to solve the bug with you guys. \r\n\r\nCheers for the help!\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ruslan-Ba": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1575", "title": "ASP.NET Core 2.0 Identity Expiration", "body": "Please, see: \r\nhttps://github.com/aspnet/Identity/issues/1478\r\n\r\n```\r\nservices.ConfigureApplicationCookie(options =>\r\n            {            \r\n                options.CookieName = \"Test1\";\r\n                options.AccessDeniedPath = new Microsoft.AspNetCore.Http.PathString(\"/account/login\");\r\n                options.LoginPath = new Microsoft.AspNetCore.Http.PathString(\"/account/login\");\r\n                options.ExpireTimeSpan = TimeSpan.FromMinutes(1);\r\n                options.SlidingExpiration = true;\r\n            });\r\n```\r\n\r\nAccessDeniedPath  is ignored when cookie expires.\r\n401 returns but is it expected to be redirected to AccessDeniedPath ?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1574", "title": "Functional test discovery fails on build", "body": "Fails both locally and on the CI. From http://aspnetci/viewLog.html?buildId=387311&buildTypeId=Lite_Identity&tab=buildLog&_focus=407#_state=407: \r\n\r\n```C#\r\n[Step 4/6] [xUnit.net 00:00:00.2707368] Exception discovering tests from Microsoft.AspnetCore.Identity.Service.FunctionalTests: System.BadImageFormatException: Could not load file or assembly 'Microsoft.AspnetCore.Identity.Service.FunctionalTests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'. An attempt was made to load a program with an incorrect format.\r\n[13:07:57]\t[Step 4/6] File name: 'Microsoft.AspnetCore.Identity.Service.FunctionalTests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n[13:07:57]\t[Step 4/6] at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, IntPtr ptrLoadContextBinder)\r\n[13:07:57]\t[Step 4/6] at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, IntPtr ptrLoadContextBinder)\r\n[13:07:57]\t[Step 4/6] at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\r\n[13:07:57]\t[Step 4/6] at Xunit.Sdk.ReflectionAssemblyInfo..ctor(String assemblyFileName) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Reflection\\ReflectionAssemblyInfo.cs:line 31\r\n[13:07:57]\t[Step 4/6] --- End of stack trace from previous location where exception was thrown ---\r\n[13:07:57]\t[Step 4/6] at Xunit.AppDomainManager_NoAppDomain.CreateObject[TObject](AssemblyName assemblyName, String typeName, Object[] args) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.utility\\AppDomain\\AppDomainMan\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1558", "title": "Port fix to broken link in individual auth template", "body": "While porting changes to Identity UI, we need to port the fix to https://github.com/aspnet/templating/issues/226 over.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/330823bed80c5915c595d60dcd5b3b661211e25a", "message": "Make options registerations post configure"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e44cba9b752cf54ef75504051d291ae299a17779", "message": "Split showing and generating recovery codes"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ce88212f49395b077d1466af47082927df9975cb", "message": "Use AuthenticatorUrl generated on the server in EnableAuthenticator pages"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/1e53a61983a729b14e1a0ce4a924067f6b7969ec", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c352a9b8dc07283f07aaeb5645bbc8d0174d6b57", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/66aa93540fc79a088744c0ae9c2e9cfe53af6f31", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e93d29522e4da304649932a2734d5424f84a46c5", "message": "Update package versions to resolve compiler error"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/935780644ac123005b8482d066b3ecbcb88f6052", "message": "Update samples and tests to target netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8cbda5a23dd594116fcd2f60c486d15fa50051af", "message": "Pinning versions for 2.0.0"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/edb58f1626bb89a5d6b3094b365b545cfd09347b", "message": "Updating to InternalAspNetCoreSdkVersion 2.1.1-*"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a6af4a71f91aaf2b03a8cc7d8521c5828b67ce0d", "message": "Change xunit version in specs to 2.2.0"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3f756adac375b6e9ff9b4c570a560725bb47c136", "message": "Change xunit version in specs to 2.2.0"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/177390484ac3dd25cbc1a320ad4757d17895fe8b", "message": "Merge pull request #1328 from aspnet/rel/2.0.0\n\nChange xunit version in specs to 2.2.0"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/185e9e055f3d1e279ae69d911850247bbdbc66b7", "message": "Change xunit version in specs to 2.2.0"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/44dfc14e7c32088949d41e8f406bd7f03dfa2166", "message": "Updating KoreBuild branch"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a933a87972bf675669495717a8fa8e440a58511f", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7efc45b7e6ee9ddb0c96bf395ddb1c95e12f4f90", "message": "Branching for 2.0.0 rtm"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a641f7a405ae24dc84298e12629e6a5c6ef865e0", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/1659257ed8a39491609c64c87cb28d2df5930620", "message": "Update version suffix for 2.0.0 RTM release"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/6cdcff9b5c9ef2ad59c35e61a5f48bedf83ebfcb", "message": "Update LICENSE.txt text"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/93d1b7cc73407e4edae175028f9971010ab88425", "message": "Remove duplicate theory data"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/15edb0bfe2fac449486e6c71b7cfabbf6d661c91", "message": "Update dependencies.props\n\n* Update Moq to 4.7.49.\n* Add NETStandardImplicitPackageVersion"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/32406953c4ebd0504eec6b342755798a0d9ca666", "message": "Remove usage of TaskCache"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/62516a3ae49b501c938ca1fb930aec8fe17744be", "message": "Updating versions to preview3"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/bd7cfe648d9e2dd180c8f3a7ab956b0bd8cbe020", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e4998232a7607a7a9e04018a99306a94e176f1c6", "message": "Updating build scripts to point to 2.0.0-preview2 KoreBuild"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3ea906b00c3683cb2ae4d89845524cf893ad641d", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d5f6ca0e6708d84d6388d2f565ed07e2ee027b1a", "message": "Branching for rel/2.0.0-preview2"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a5ddfc1f211952a965e340e997ed723ed3359029", "message": "Fix build break (part 2)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/9559c454cd1c9b06f8fe7a94d047d52e1057bb4f", "message": "Fixing build break"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ef3e6100e198650b93fb512706f3cb879fc95870", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/18ff4c3a639025b81d50b3f736cd1c67f8205d7c", "message": "Use the bundled NETStandard.Library package in netstandard targeting libraries"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7b05f5012aed778d36934a9425616f12fd64a9c4", "message": "Updating package version to preview2"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2e853c444fb075c04e19edb39932254228e29f04", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/948e465e93ca1b731fe2ed343f4112b8904ea9c3", "message": "Branching for 2.0.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7721f32a39a9810e53bb05af469aa62bc91072e6", "message": "Use Bundled NETStandard.Library \\ NETCoreApp versions instead of explicitly specifying one"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ba8675507c8f7e492839810b978f4e72dec74ba1", "message": "Remove dependency on Microsoft.AspNetCore.Testing from test specifications"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4db377dfb05173ed6655111ff38cc39ec635c636", "message": "Updating versions to 2.0.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/b2b32d691bbb93e8e962b63a94405b593724c65b", "message": "Revert \"Adding System.Security.Claims to samples and tests\"\n\nThis reverts commit 36184161fbb80176f18d2479a27ad666b3182a0d.\n\nFixes #1141"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/9b7b309ced6687253f92439b48c822c13a076726", "message": "Updating to 2.0.0 Internal.AspNetCore.Sdk"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/36184161fbb80176f18d2479a27ad666b3182a0d", "message": "Adding System.Security.Claims to samples and tests\n\nThis should go away after we migrate everything, but for now this\nis required to get the build going."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/234b8827583fc6c1d9888a426b38d9057a72418a", "message": "Remove net451 as a compilation target"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4f3584f12958228d4ba44814744ae1c4527f095f", "message": "Remove unused sample"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/20a55b8d1f6933aa7df887df952e1fb2a51be172", "message": "Updating to 4.4 CoreFx packages"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3be87cef81a270d8ddb02affa9e390668f570126", "message": "Updating versions to 1.2.0-*"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d29d5ab63a1ae4931966c245e7e3436cd3fd43ce", "message": "Merge branch 'rel/1.1.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/002dc5d2c69b8c5506b6ffbed0ae7aa69bc9e841", "message": "Branching for 1.1.0"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2b3f6fa0da9107ab5dd89306d0a8adb7ddd0b51c", "message": "Merge remote-tracking branch 'origin/rel/1.1.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/db26ca83a785a570b469fdd900f8f7559f24f440", "message": "Branching for 1.1.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a664d32c5cde524c219e607a09333d5c470922ed", "message": "Updating to netcoreapp1.1"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e9224cfae70d70c103f5c108706bdf7b13ad8621", "message": "Revert \"Updating to netcoreapp1.1\"\n\nThis reverts commit 1eb7fd394702236466394d36beba8cd67556b840."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/1eb7fd394702236466394d36beba8cd67556b840", "message": "Updating to netcoreapp1.1"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/9019e6ab39a9c2e6f2a5db1146e132e3b44529f5", "message": "Updating partner package versions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8681324", "body": "Getter-only auto-properties should continue to work\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8681324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/22280188", "body": "FYI @Tratcher \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/22280188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359457", "body": "ROT26 encryption!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "aneequrrehman": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1549", "title": "Changing the primary key of IdentityUserClaim<> and IdentityRoleClaim<>", "body": "Well, I have updated everything necessary to change all the Identity tables' primary keys to be `Guid`s, but I couldn't find any way to change the primary keys' types for `IdentityUserClaim<>` and `IdentityRoleClaim<>` tables. \r\n\r\nI have added this line in `ApplicationUser.cs`\r\n\r\n    public virtual ICollection<IdentityUserClaim<Guid>> Claims { get; } = new List<IdentityUserClaim<Guid>>();\r\n\r\n\r\nThere should be some way to change the default primary keys (`int`s) for `IdentityUserClaim<>` and `IdentityRoleClaim<>`?. Or am I missing something?\r\n\r\nPerhaps something like `IdentityUserClaim<TKey, TUserKey>` instead of `IdentityUserClaim<TKey>` (the name **TKey** is misleading as well unless one looks at the summary, IMHO)?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HaythemJ": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1543", "title": "Aspnet Core 2.0 Authorization issues after deploying to IIS", "body": "I have a Aspnet Core 2.0 application. I configured both Identity and Jwt as below:\r\n\r\n      `// Register identity framework services and also Mongo storage. \r\n            services.AddIdentityWithMongoStores(settings)\r\n                .AddDefaultTokenProviders();\r\n            services.ConfigureApplicationCookie(options =>\r\n            {\r\n                options.LoginPath = \"/Account/Login\";\r\n                options.Cookie.HttpOnly = true;\r\n                options.Events = new CookieAuthenticationEvents\r\n                {\r\n                    OnRedirectToLogin = ctx =>\r\n                    {\r\n                        if (ctx.Request.Path.StartsWithSegments(\"/api\"))\r\n                        {\r\n                            ctx.Response.StatusCode = (int)System.Net.HttpStatusCode.Unauthorized;\r\n                        }\r\n                        else\r\n                        {\r\n                            ctx.Response.Redirect(ctx.RedirectUri);\r\n                        }\r\n                        return Task.FromResult(0);\r\n                    }\r\n                };\r\n            });\r\n\r\n             services.AddAuthentication().AddJwtBearer(cfg =>\r\n            {\r\n                cfg.RequireHttpsMetadata = false;\r\n\r\n                cfg.SaveToken = true;\r\n\r\n                cfg.TokenValidationParameters = new TokenValidationParameters\r\n                {\r\n                    ValidIssuer = Configuration[\"JwtSecurityToken:Issuer\"],\r\n                    ValidAudience = Configuration[\"JwtSecurityToken:Audience\"],\r\n                    //ValidateIssuerSigningKey = true,\r\n                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[\"JwtSecurityToken:Key\"])),\r\n                    //ValidateLifetime = true,\r\n                    //ClockSkew = TimeSpan.MaxValue // remove delay of token when expire\r\n                };\r\n            });\r\n\r\n\r\n            // Add application services.\r\n            services.AddTransient<IEmailSender, EmailSender>();\r\n\r\n            ///Instead of services.AddMvc(), we need to asjust the AuthenticationSchema\r\n            ///in order to support both Identity Cookies and Jwt\r\n            services.AddMvc(\r\n                config =>\r\n            {\r\n                var defaultPolicy = new AuthorizationPolicyBuilder(new[] { JwtBearerDefaults.AuthenticationScheme, IdentityConstants.ApplicationScheme })\r\n                                 .RequireAuthenticatedUser()\r\n                                 .Build();\r\n                config.Filters.Add(new AuthorizeFilter(defaultPolicy));\r\n                config.Filters.Add(new AutoValidateAntiforgeryTokenAttribute());\r\n            }\r\n            )\r\n                .AddJsonOptions(options => options.SerializerSettings.ContractResolver = new DefaultContractResolver());\r\n`\r\nEverything runs ok on Visual Studio and I have both Identity Cookies and Jwt enabled.\r\n\r\nbut once deployed to IIS on my Machine, the calls are all Unauthorized 401 HTTP Code.\r\n\r\nI debugged using Remote Debugger on IIS and I was able to see that the user was authenticated and authorized in the below method:\r\n\r\n           `public async Task<IActionResult> Login(AuthenticationViewModel model, string returnUrl = null)\r\n        {\r\n            ViewData[\"ReturnUrl\"] = returnUrl;\r\n            if (ModelState.IsValid)\r\n            {\r\n                // This doesn't count login failures towards account lockout\r\n                // To enable password failures to trigger account lockout, set lockoutOnFailure: true\r\n                var result = await _signInManager.PasswordSignInAsync(model.UserName, model.Password, \r\n                model.RememberMe, lockoutOnFailure: false);\r\n                if (result.Succeeded)\r\n                {\r\n                    _logger.LogInformation(1, \"User logged in.\");\r\n                    return RedirectToAction(nameof(AppController.App), \"App\");\r\n                    //return RedirectToLocal(returnUrl);\r\n                }\r\n                \r\n                if (result.IsLockedOut)\r\n                {\r\n                    _logger.LogWarning(2, \"User account locked out.\");\r\n                    return View(\"Lockout\");\r\n                }\r\n                else\r\n                {\r\n                    ModelState.AddModelError(string.Empty, \"Invalid login attempt.\");\r\n                    return View(model);\r\n                }\r\n            }`\r\n\r\n![image](https://user-images.githubusercontent.com/9905290/34362420-a0ee2d6a-ea73-11e7-9075-2e5520e18cd2.png)\r\n\r\n\r\nBut when executing this instruction `return RedirectToAction(nameof(AppController.App), \"App\");` where I am redirecting to the main page it returns 302 HTTP:\r\n\r\n![image](https://user-images.githubusercontent.com/9905290/34362426-b675ac8a-ea73-11e7-904a-96f82255d556.png)\r\n\r\nI don't know why in VS it is working well and not in IIS.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samarmir": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1542", "title": "sample project needs more ", "body": "I find it dissapointing that the sample code does not show how to extend the applicationuser with extra properties. ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fe-c": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1541", "title": "User name and email confusing", "body": "Hello!\r\nI was created ASP.Net Core project with individual accounts.\r\nAfter user registration User Name and Email are same.\r\nI was edit Profile page to change User Name, becouse I want to display user name, not email in top navbar.\r\nAt now I cant login, cause signInManager.PasswordSignIn need user_email in user name field.\r\nWhen I change user email, I still need to signin with user_name=old_user_email.\r\nIt's very confusing users and developers.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zmjack": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1539", "title": "How can I make the Identity working correctly thought a reverse proxy server?", "body": "I run a demo MVC project which using ASP.NET Identity under a private network (192.168.200.1). And I setup a reverse proxy server (192.168.200.201) to visit it.\r\n\r\nI use IIS 6.1 with Application Request Routing (ARR) 2.5 as the reverse proxy server.\r\n\r\nIn the Identity library, the default LoginPath is **\"/Account/Login\"**. I don't change it, but when I visit some Actions which need Authorized in **192.168.200.201**, it always redirect to **\"192.168.200.1/Account/Login\"**. It's going wrong! The correct redirect address is **\"192.168.200.201/Account/Login\"**.\r\n\r\nWhat's wrong with it? I look forward to your reply. Thank you!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemcmaster": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1538", "title": "Add xmldocs for Microsoft.AspNetCore.Identity.UI", "body": "A fit-n-finish item TODO before RTM.\r\n\r\ncc @javiercn ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/0a8389625bb9c830c144027bd9e1ac0b1455059c", "message": "Merge branch 'release/2.0.0' into dev\n\nFor real this time"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/79de498dcb740f9930adb2218f75df3babec2ba6", "message": "Merge branch 'release/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/becf1df9c5a3b908e28ec3c1272b072d8801e3dc", "message": "Mark Identity service packages as IsPackable=false"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/145f645bcf578c1cf9861b03b68844d2b9019297", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config (#1506)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/52dfb0217597ae18efd5958e380fe8e56cde3163", "message": "Pin tool and package versions to make builds more repeatable"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/98fa107c0505a671b68a5b13d11b72ebc6168cf6", "message": "Update build tools to 2.0.2-rc1-15526 and dependencies to 2.0.1-rtm-105"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8a880adf7299777d4ef025fa78c23be072fb8a08", "message": "Undo unintentional change. Use xunit 2.2.0 in spec.tests projects"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ea707f8d8aef2a4da5691f49dc7f286e15a98409", "message": "Update how PackageReference versions are set\n\nChanges:\n - Remove floating versions\n - Disable myget feeds during a Universe build\n - Use package-specific MSBuild variables. Pattern = `packageId.Pascalize() + \"PackageVersion\"`, with a few exceptions."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/343f3b2ecddbbc2e073f0806fe42f078b4fac8b0", "message": "Workaround xunit/xunit#1487"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7c633d12c9e848e403108b815bc515ed8715baf7", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c24a60c544b50ca2f3150ffbbaab5c1c8e3069e1", "message": "Import dependencies.props last to ensure TargetFramework is set first"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/74f6605cc4948346af0e898a5f9b77ec18191b78", "message": "Update build scripts, tools, and dependencies for 2.0.x"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e7795368111fb3518173e93c47c4047a34042394", "message": "Update the list of packages patching in 2.0.x"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/37605799d5088fa1de4d2d1878f57cce7135c475", "message": "Update version.props, dependencies, and package feeds for 2.0.1 (#1431)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/6ec67d952135f1fd1c65e03586b118e9c83a9733", "message": "Remove Identity.Samples.sln and add the WPF sample to Identity.sln (#1407)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c8cf56520ac0883ca266a6b5045048d880134260", "message": "Remove DotNetCliToolReference to workaround NuGet/Home#5716"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/1734c7ff3d55dac079325ebbf455e3149a5ad3d9", "message": "Use PackageLineup to manage PackageReference versions"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/dce4f48e7380a54e3a6d881b2b0a22ea700e33ef", "message": "Make changes to test code to fix warnings from xunit.analyzers"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/55a5001c03c58715d581b840566ebb42d2d1d927", "message": "Use Directory.Build.props/targets"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/0f5bc9dac824d8de5f4bf8c14b184522802e7ee2", "message": "Upgrade to xunit 2.3.0-beta4 (#1393)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ff1472edb99551f5cec31e3aa8701476cec51752", "message": "Fix syntax warning when running build.sh on older versions of bash\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/23a3c98e2e5c6a67a08e996f90c03e9c3d71739f", "message": "Update bootstrappers to use the compiled version of KoreBuild\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/94635ec5edff5b1ecbb8a2a56e54f28653e3b4df", "message": "Fix the obsolete message on UseIdentity() (#1322)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a72acc93dc7666f37be786406b2b01efd1ed0643", "message": "React to aspnet/BuildTools#293\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/74c1e19e6c14359d428ffe803a93d846b2123a63", "message": "React to changes in CookieAuthenticationOptions"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d4abd5499a809019770a415f7c32d57c3aecd137", "message": "React to API changes in CookieAuthenticationOptions"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/661f6d5103f5af7c5a2d6b83f8302a7a0fabcf25", "message": "Revert \"React to change in session API\"\n\nThis reverts commit 04d0fdd652bd43eb1f82075e4521d91ab4ad3c9d."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/04d0fdd652bd43eb1f82075e4521d91ab4ad3c9d", "message": "React to change in session API"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c2caacb1e856d40f5e0b06534ba1dc9270c6de11", "message": "Adding libunwind8 to .travis.yml\n\n[skip appveyor]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f413be3183220756b95a0eb9a4ee99e8dfd69990", "message": "Update CoreFxVersion to 4.4.0-*"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/cc4183c7edd736231d228dfd3d17298514c4bc6f", "message": "Upgrade test framework versions and fix test issues"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ca192308c805f031510f43c2432b84c02524b78f", "message": "Revert \"Temporarily disable DotNetCliToolReference in samples until aspnet/Universe#506 is resolved\"\n\nThis reverts commit dff2a3a559a0dde279a884f4ea475c70180dd535."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e98291ef2d26c108a7e770d6e1aee24dd55d20ee", "message": "Update Travis to macOS Sierra\n\n[skip appveyor]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8d8faf9adc78ea51eff072b1a947458058003350", "message": "Unify dependency versions to one file and remove workarounds\n\nUpgrade to stable version of Moq\nSimplify sample dependencies by using metapackage"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8802db249a1c4512135c6117be9874f24a470cfd", "message": "Update appveyor and travis settings"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/6e25a84993d0a114ef0f332926a202cc567e52f9", "message": "Update AppVeyor and Travis settings"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/5ecb48662e0d51a376446aa86d86fdcc86f7f924", "message": "Change korebuild branch and fix argument forwarding in bootstrapper"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3078ce110bfa25945305edf5ccabde11dfe5970b", "message": "Downgrade to stable packages"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/82893848dd7a0b73c77998b0fa220d47a95e13f6", "message": "Clean tmp folder after unzipping KoreBuild"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/b166c47235991f47658864065ef62cf97348cae0", "message": "Update sample usage of EF tools"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c0ce322e711a70750cb104d286b574de0d1cd75d", "message": "Fix tests broken by logging change aspnet/Logging#480"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Biarity": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1524", "title": "How to customize GenerateUserTokenAsync token lifespan? What about brute-force protection? ", "body": "I'm using `GenerateUserTokenAsync` and `VerifyUserTokenAsync` with `provider=\"Email\"`. How can I customize token expiry so tokens last longer/shorter before they aren't valid?\r\n\r\nAdditionally, how would you implement token lockout to prevent someone from brute-forcing the token? With `provider=\"Email\"`, the tokens are just 6 digits which should be easy to brute-force (<1 million possibilities, ~11 minutes on a core i3 laptop).", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "michaelkaye": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1514", "title": "Enhancement: Provide more information in the result from the UserManager.Verify*TokenAsync() methods", "body": "Hi there,\r\n\r\nAs an enhancement, I'd like to see more information returned from the Verify*Token methods on UserManager, such that richer information on failures can be recorded in metrics, or the flow updated to ease user interactions. \r\n\r\nRather than returning a boolean true/false from UserManager.verifyUserToken(), I'd be interested in a richer object that's a pair of true/false + some sort of status string / error code / something to provide more details.\r\n\r\nI think there'll only be one token provider for any given call, so it shouldn't need to have multiple status strings returned (eg, if multiple providers needed to say 'no' in different ways)\r\n\r\nThe sort of failure information we could see passed back would allow:\r\n\r\n- Being able to find out if the TOTP code is ahead/behind but nearly valid (user may need to be pushed to a flow to obtain multiple codes to handle authentication token resync)\r\n- An one-use token was valid but already been used (please ask for another or contact an admin to investigate if you didn't use it)\r\n- A time-limited token was valid but has timed out (ask for another token)\r\n\r\nAnd additionally we would start storing metrics on the above, so we can see if the time delay on tokens is too short; if there's something confusing in the flows, or if some odd spike of failures is indicating an attacker trying it on.\r\n\r\nFor those providing public signups, exposing the exact details of the failure to the users may have a security impact, so I wouldn't make displaying information part of any templates.\r\n\r\nIn a corporate environment, re-sending a expired code to a phone automatically (rather than require the user to re-start the password reset flow) could reduce the support load of these sorts of security features.\r\n\r\nHopefully that makes sense,\r\nMichael", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Triwaters": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1497", "title": "multiple nvarchar(450) fields unsuitable for clustered indexes", "body": "The worst offender is dbo.AspNetUserLogins, with three (3) nvarchar(450) fields making up the primary key. SQL Server balks at this and it's a design flaw that contents that can legally fit in these fields could (together) make the record unsavable, due to a violation of the 900-byte maximum length for clustered indexes.\r\n\r\nI can imagine this is all rather baked into the system at this point, but it's a design flaw in two ways:\r\n1) it can lead to legal record data-wise not being saved due to index violations, and\r\n2) For larger sets of data, it's horribly inefficient\r\n\r\nAll that having been said, I suppose in practice \"this will never be a problem\" with regard to (1), since the fields in practice are populated with relatively small guids, and \"this will never be a problem\" with regard to (2) because most systems don't have more than a few thousand logins, and often fewer than 100, I suppose.\r\n\r\nThe other two tables affected by this (as in, SQL Server throws a fit when you try to create the index) are:\r\ndbo.AspNetUserRoles (requesting 1,800 bytes in index space per record)\r\ndbo.AspNetUserTokens (requesting 1,800 bytes in index space per record)\r\n\r\nMy recommended solution is that fields be reduced to more ordinary sizes, going forward, and primary keys be defaulted to integers.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkArtak": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1496", "title": "[Question] HttpContext?.User?.Identity?.Name casing differs when run on Mac OS vs Windows", "body": "Hi.\r\n\r\nI have a controller action, which uses current user's name internally. While running on Windows, I got used to getting the result of HttpContext?.User?.Identity?.Name in uppercase. However, just discovered, that the same API returns the value in lowercase on Mac.\r\n\r\nThe project runs on the latest ASPNET Core framework.\r\n\r\nIs this by design ?\r\n\r\nThanks,\r\nArtak", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hikalkan": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1460", "title": "What is Microsoft.AspNetCore.Identity.Service.* packages?", "body": "Is it a replacement for IdentityServer4? Is there any documentation for that? How and why we use that?\r\n\r\nThanks.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mcgiany": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1459", "title": "ChangePasswordAsync Optimistic concurrency failure, object has been modified", "body": "Hi,\r\n\r\nwe experiencing weird issue with changing password in our MVC Web App.\r\nThe error \"Optimistic concurrency failure, object has been modified\" occurs when we try change password with ChangePasswordAsync method.\r\n\r\nThis is the code in controller:\r\n```\r\n[HttpPost]\r\n        [ActionName(\"ChangePassword\")]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> ChangePasswordPost()\r\n        {\r\n            var viewModel = await BindViewModel<ChangePasswordViewModel>();\r\n\r\n            if (ModelState.IsValid)\r\n            {\r\n                var user = await _userManagerStore.FindByNameAsync(User.Identity.Name);\r\n                var result = await _userManagerStore.ChangePasswordAsync(user, viewModel.CurrentPassword, viewModel.NewPassword);\r\n                if (result.Succeeded)\r\n                {\r\n                    // log success and redirect to index\r\nreturn RedirectToAction(\"Index\", \"Home\");\r\n                }\r\n\r\n                foreach (var error in result.Errors)\r\n                {\r\n                    ModelState.AddModelError(string.Empty, error.Description);\r\n                }\r\n            }\r\n\r\n            return View(viewModel);\r\n        }\r\n```\r\nIt fails on the error i describe above at this line:\r\n`var result = await _userManagerStore.ChangePasswordAsync(user, viewModel.CurrentPassword, viewModel.NewPassword);`\r\n\r\nBut after that, when i log out from app, i can login again with the old password (so the password didn't changed). And when try change password again, it says \"Incorrect password\".\r\n\r\nThe only thing that helps is restarting application pool.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "popsovy": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1458", "title": "Multiple calls to userManager result in Disposed error", "body": "I have this code that's called from Startup.Configure:\r\n\r\n```C#\r\npublic async void Initialize()\r\n        {\r\n            appDbContext.Database.EnsureCreated();\r\n\r\n            var adminGroupName = \"Administrator\";\r\n\r\n            if (appDbContext.Roles.All(i => i.Name != adminGroupName))\r\n            {\r\n                await roleManager.CreateAsync(new IdentityRole(adminGroupName));\r\n            };\r\n            var role = appDbContext.Roles.First(i => i.Name == adminGroupName);\r\n\r\n            if (appDbContext.Users.All(i => i.UserName != adminSettings.Username))\r\n            {\r\n                await userManager.CreateAsync(new ApplicationUser { UserName = adminSettings.Username,\r\n                                                                    Email = adminSettings.Username,\r\n                                                                    FirstName = adminSettings.FirstName,\r\n                                                                    LastName = adminSettings.LastName,\r\n                                                                    EmailConfirmed = true }, adminSettings.Password);\r\n            }\r\n            var adminUser = appDbContext.Users.First(i => i.UserName == adminSettings.Username);\r\n            \r\n            if (!appDbContext.UserRoles.Any(i => i.RoleId == role.Id && i.UserId == adminUser.Id))\r\n            {\r\n                await userManager.AddToRoleAsync(adminUser, role.Name);\r\n            }\r\n        }\r\n```\r\n\r\nAt random, I get the Accessing Disposed Exception from userManager.CreateAsync or userManager.AddToRoleAsync\r\n\r\nThe class where Initialize is declared is registered with AddScoped in Startup.ConfiguredServices and is passed as an argument to Startup.Configure.\r\n\r\nWhat am I doing wrong that I am getting the Disposed exceptions?\r\n\r\nThank you.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pakrym": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1456", "title": "KeyVault extension should provide an overload that takes KeyVaultClient and doesn't require IIdentityBuilder", "body": "Required for:\r\nhttps://github.com/aspnet/specs/issues/90\r\n\r\n1. We don't have `TUser, TRole` in light-up so there is no way to call `AddIdentity`.\r\n2. When using MSI (https://docs.microsoft.com/en-us/azure/active-directory/msi-overview) we get auth callback for  `KeyVaultClient` instead of ClientSecret/ClientID\r\n\r\n/cc @javiercn ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/d612d2034471a04a2372298773fcacaa0b77a44c", "message": "Revert Move identity into an Area in a library (using Razor Pages) (#1537)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/88dcac3ff8ca23f77a65071e1557bc9d56a81798", "message": "Merge remote-tracking branch 'origin/rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8f5117b278734bd56658b25fa05aa92db895ba55", "message": "Update AzureKeyVaultVersion to 2.3.2 (#1313)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4f8e062cb55e44357b8b3a6b717adb7ab71300a5", "message": "Update IdentityModelActiveDirectoryVersion (#1292)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2eb9bf887b5d03b4fbb2ac11530a63996d32cdde", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/67234e8748c0e045885087c6372f7afb5daa18ff", "message": "React to logging changes"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/446bc4a3941b38c82ae75830255806634a68cbf0", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f65a5446625dc85347fe5b27b7753278cd6e597f", "message": "React to logging changes"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3008f76c037e683cbf95d4c3b0e11a9381800f25", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/66d69f7ae56b8f2338b41472f59f77ecfcc44b02", "message": "React to logging in DI change"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ba64cd0fb073a2c1d58291ad8c1d94758c76649f", "message": "Remove unnecessary package references (#1190)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e131ebae47170f2fbd5f56b5c5a398900fce6f1a", "message": "Use TaskCache class from Microsoft.Extensions.TaskCache.Sources (#955)\n\nInstead of Task.FromResult(0)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thdotnet": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1451", "title": "Warning maximum key length for a clustered index", "body": "I'm running SQL script to create the aspnet identity tables, but I'm getting the following warnings on Management Studio:\r\n\r\n> \r\n> Warning! The maximum key length for a clustered index is 900 bytes. The index 'PK_AspNetUserLogins' has maximum length of 1800 bytes. For some combination of large values, the insert/update operation will fail.\r\n> Warning! The maximum key length for a clustered index is 900 bytes. The index 'PK_AspNetUserRoles' has maximum length of 1800 bytes. For some combination of large values, the insert/update operation will fail.\r\n> Warning! The maximum key length for a clustered index is 900 bytes. The index 'PK_AspNetUserTokens' has maximum length of 2700 bytes. For some combination of large values, the insert/update operation will fail.\r\n\r\n\r\nIs that right? Is there any fix for that?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattthr": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1450", "title": "Allow two-factor challenges at random intervals", "body": "Some sites which use two factor authentication - Steam is a good example - do not challenge the user for the authentication code on every visit. This retains many of the advantages of increased security but is less inconvenient for the user.\r\n\r\nAs far as I can tell, Asp.Net identity does not support this out of the box. I tried to roll my own version:\r\n\r\n```\r\nvar result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, shouldLockout: true);\r\nswitch (result)\r\n{\r\n    // other cases\r\n    case SignInStatus.RequiresVerification:\r\n        int challengeFrequency = Convert.ToInt16(ConfigurationManager.AppSettings[\"ChallengeFrequency\"]);\r\n        Random rnd = new Random();\r\n        if (rnd.Next(1, challengeFrequency + 1) == 1)\r\n        {\r\n            return RedirectToAction(\"SendCode\", new { returnUrl = returnUrl });\r\n        }\r\n        else\r\n        {\r\n            var token = await UserManager.GenerateTwoFactorTokenAsync(user.Id, \"Phone Code\");\r\n            await SignInManager.TwoFactorSignInAsync(\"Phone Code\", token, false, false);\r\n            return RedirectToLocal(returnUrl);\r\n        }\r\n}\r\n```\r\n\r\nBut this does not work, for reasons I've been unable to figure out - when triggered this code returns SignInStatus.Failure and puts the user back on the login screen, from where they will be logged on successfully if they submit a second time.\r\n\r\nRegardless of my failures, I still think this would be a useful feature to add to the Identity framework.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajcvickers": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1447", "title": "Document how to customize the EF model", "body": "People often seem to run into issues when attempting to customize the entities in the Entity Framework model. It would be good to have documentation showing the general approach (i.e. talk about OnModelCreating, that the model needs to remain in a consistent state, etc) as well as common scenarios (adding a property, adding an FK, changing to use a composite key, etc.)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1260", "title": "API Review for new Identity Service code", "body": "Discussed this with @HaoK today as something we should do to ensure that the new stuff is fully baked and not burnt on the outside with a soggy bottom. \ud83c\udf70 This includes packages, and whether or not they should live here or elsewhere.\r\n\r\nPossibly also code reviews as well as just API review reviews.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/dcafefd1ab20c2e450c4e8d4ce76e9b82f997eac", "message": "Update in-memory tests to used named database."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e7c039caca4749f25c09678e046059eacd395024", "message": "Remove obsolete file."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45130759", "body": "@Eilon Currently at least with the fallback DI container it will call a constructor with null if the service is not registered. We use this in at least one place in EF. If this isn't supposed to work then I will file a bug on DI for it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45130759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46507590", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46507590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46602930", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46602930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/6664427", "body": "+1 to what @divega said.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "svethors": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1445", "title": "PasswordValidator.IsLower and .IsUpper only reconizing the english alphabet", "body": "When validating passwords and requiring either upper or lower case characters, non-english characters are not properly recognized as being upper or lower case. For example the Norwegian character '\u00c6' is the upper case of '\u00e6', but will not be regarded as either, and so setting PasswordOptions.RequireLowercase = true will result in an error even if the lower case '\u00e6' is present in a password.\r\n\r\nThe code leading to the problem is found in Microsoft.AspNetCore.Identity.PasswordValidator:\r\nLine 96:\r\n```\r\npublic virtual bool IsLower(char c)\r\n{\r\n    return c >= 'a' && c <= 'z';\r\n}\r\n```\r\nAnd line 106:\r\n```\r\npublic virtual bool IsUpper(char c)\r\n{\r\n    return c >= 'A' && c <= 'Z';\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natelaff": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1443", "title": "Issue with IdentityUserToken Id data type", "body": "Branching this into a new issue from https://github.com/aspnet/Identity/issues/1364 because I believe it's a bug and can reproduce it.\r\n\r\nI override my datatypes in Identity with Guid. Nothing fancy. But getting this as of upgrade to 2.0.\r\n\r\nArgumentException: The key value at position 0 of the call to 'DbSet<IdentityUserToken>.Find' was of type 'Guid', which does not match the property type of 'string'.\r\n\r\nBasically, start a new project with individual auth.\r\n\r\n```C#\r\n    public class User : IdentityUser<Guid>\r\n    {\r\n        public string MyProperty { get; set; }\r\n    }\r\n\r\n    public class Role : IdentityRole<Guid>\r\n    {\r\n        public string MyProperty { get; set; }\r\n    }\r\n\r\n\r\n    protected override void OnModelCreating(ModelBuilder builder)\r\n    {\r\n        base.OnModelCreating(builder);\r\n\r\n        builder.Entity<User>().ToTable(\"User\").HasKey(u => u.Id);\r\n        builder.Entity<Role>().ToTable(\"Role\").HasKey(u => u.Id);\r\n        builder.Entity<IdentityUserClaim<Guid>>().ToTable(\"UserClaim\").HasKey(uc => uc.Id);\r\n        builder.Entity<IdentityUserLogin<Guid>>().ToTable(\"UserLogin\").HasKey(ul => new { ul.LoginProvider, ul.ProviderKey });\r\n        builder.Entity<IdentityUserRole<Guid>>().ToTable(\"UserRole\").HasKey(ur => new { ur.UserId, ur.RoleId }); ;\r\n        builder.Entity<IdentityRoleClaim<Guid>>().ToTable(\"RoleClaim\").HasKey(rc => rc.Id);\r\n        builder.Entity<IdentityUserToken<Guid>>().ToTable(\"UserToken\").HasKey(ut => new { ut.LoginProvider, ut.UserId, ut.Name });\r\n    }\r\n```\r\nNothing crazy happening here. Just making the key a Guid and renaming the tables.\r\nReplace appropriate methods to use that User/Role/Key type.\r\nRun, create a user, then go to Two Factor Auth page and you'll hit it on the call to _userManager.GetAuthenticatorKeyAsync(user)", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1011", "title": "Return more detail in UserManager.GetValidTwoFactorProvidersAsync()", "body": "I would like to see UserManager.GetValidTwoFactorProvidersAsync return more detail about the providers so that in the select list we can easily show an obfuscated version of where the message will be delivered.\r\n\r\nI.e. \r\n\r\nEmail (txxxxxt@outlook.com)\r\nText (xxx-xxx-5555)\r\n\r\nEDIT: GitHub formatted my asterisk, but you get the idea.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dfederm": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1441", "title": "UserManager.Logger is virtual and set in the constructor", "body": "Pretty much as the title says.\r\n\r\nThis is considered bad practice, as ctor order is the most base class to the most derived class, so if the property is overridden in a subclass it may not be properly initialized.\r\n\r\nStatic Analysis even has a rule against this: https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2214-do-not-call-overridable-methods-in-constructors (note that properties are effectively just a pair of methods, so the rule does in fact apply).\r\n\r\nHere's a hypothetical example of something that could go wrong:\r\n\r\n```\r\npublic class ApplicationUserManager : UserManager<ApplicationUser>\r\n{\r\n    private IObserver observer;\r\n\r\n    public ApplicationUserManager(IObserver observer)\r\n        : base(/* ... omitted for brevity ... */)\r\n    {\r\n        this.observer = observer;\r\n    }\r\n\r\n    public override ILogger Logger\r\n    {\r\n        get\r\n        {\r\n            this.observer.RecordPropertyGet(nameof(Logger));\r\n            return base.Logger;\r\n        }\r\n        set\r\n        {\r\n            this.observer.RecordPropertySet(nameof(Logger), value);\r\n            base.Logger = value;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn that example, the base class will set the `Logger` property, which will be the derived classes's impl, which uses `this.observer`, but oops it's null at that point in time since `ApplicationUserManager`'s ctor hasn't actually executed yet.\r\n\r\nI am curious btw why this prop is virtual to begin with. It's a bit odd to see a virtual autoprop.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NorDroN": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1429", "title": "How can I replace base64 in GenerateEmailConfirmationTokenAsync?", "body": "Hi!\r\nI'm developing a dotnet core template based on JavaScriptServices (angular 4) and OpenIddict - https://github.com/NorDroN/AngularTemplate \r\n\r\nI've tried to add an email confirmation, but it turned up not so simple:\r\nMicrosoft.AspNetCore.Identity use base64 when generates token (GenerateEmailConfirmationTokenAsync), but base64 can contain slash (/) and also base64 is case sensitive\r\nI've tried to solve this problems:\r\n1) I've tried to add Encode in my code for token ( / -> %2F), but angular can understand this ( %2F -> / ) and parse it as part of url :(\r\n2) angular also replaces my url with base64 code to url in lowercase (I don't know why, but it's so) and of course when I try to check it I get an error\r\n\r\nHow can I replace base64 to base32 or may be something else?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brockallen": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1409", "title": "Refactor AddIdentity splitting out Authentication from core identity", "body": "ASP.NET Identity is a library, and should not have such an opinion and side-effect on a hosting application. By setting the default signin scheme to external, you're making assumptions about the hosting application. If the hosting app wants to use external cookies, then it should do that configuration itself. \r\n\r\nI understand why it was added in here -- it makes the templates easier. But it's a bad library design choice (especially since the behavior is not relied upon anywhere in the ASP.NET Identity library itself). You might have an app that uses some NuGet library with a transitive dependency on ASP.NET Identity and it'd be incredibly confusing to have this behavioral change in the hosting app as a result of just adding a library.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1409/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1015", "title": "IdentityUserClaim and IdentityRoleClaim Id primary key assumes identity column", "body": "Both the `IdentityUserClaim` and `IdentityRoleClaim` have an `int Id` property for primary keys. When running with SqlServer these work fine because somehow in the creation of the SqlServer DB the schema knows that these are to be identity column types. But when running with Postgres under RDS (https://en.wikipedia.org/wiki/Amazon_Relational_Database_Service) the DB does not because there is no explicit configuration for this in `OnModelCreating`. This is what is looks like:\r\n\r\n```\r\nbuilder.Entity<TUserClaim>(b => \r\n            {\r\n                b.HasKey(uc => uc.Id);\r\n                b.ToTable(\"AspNetUserClaims\");\r\n            });\r\n```\r\n\r\nAt runtime when trying to add a claim:\r\n\r\n```\r\nawait mgr.AddClaimAsync(user, new Claim(\"name\", \"Jon Doe\"));\r\n```\r\n\r\nI'm getting an exception at runtime saying that Id is not being set (presumably by the DB at insert time):\r\n\r\n> {Npgsql.PostgresException: 23502: null value in column \"Id\" violates not-null constraint\r\n   at Npgsql.NpgsqlConnector.<DoReadMessageAsync>d__6.MoveNext()\r\n\r\nI'm wondering if `OnModelCreating` should have an additional:\r\n\r\n```\r\nb.Property(x => x.Id).ValueGeneratedOnAdd()\r\n```\r\n\r\nI assume this tells the DB schema to make the column an identity column?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1015/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/626", "title": "GUIDs for security stamp", "body": "So a GUID is being used for the security stamp. On windows that has ~96 bits of entropy (according to @GrabYourPitchforks), but on linux there's no guarantee (unless that's changed and something in CoreCLR addresses this). So I worry that somehow the lack of entropy could be used to abuse ASP.NET Identity if/when running on linux, and perhaps crypto RNG is better.\n\nIf this is still an issue, then it will be true of any DNX code (perhaps in ~/security repo as well -- i've not checked if there is any Guid.NewGuid code being used there).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/626/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57245019", "body": "When writing custom middleware, it's often useful to have access to the host's IDataProtector. Is this what you're proposing to remove from DI?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57245019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kwameg-a": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1402", "title": "AspNet Core 2.0 MVC/Web API Identity Service Issue", "body": "I get this error \"**System.InvalidOperationException: Unable to configure HTTPS endpoint.  System.Collections.Generic.KeyNotFoundException: No certificate named 'HTTPS' found in configuration for the current environment (Production).**\" - when I do Update-Database in Visual Studio Package Manager console after I have done file-new-project with an individual user account for an MVC or Web API.\r\n\r\nThis means I'm unable to add profile data for application users by adding properties to the ApplicationUser class", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bhubanstha": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1397", "title": "Changing datatype of primary key ", "body": "Shouldn't we consider changing string or guid datatype to int for PK in identity. Well there might be some cases where guid or string PK is unavoidable but I think most of us use int for PK. So leaving string/guid as PK one has to create lots of identity related classes wasting time that was supposed to minimize by identity. I personally feel if int was used instead of string one can start writing other code instead of customizing identity classes for his/her desired datatype just for PK.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PinpointTownes": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1381", "title": "Consider updating AddIdentity() to avoid overriding default schemes when they were previously set", "body": "> Identity is indeed a bit greedy and if you try to register your default scheme before calling `AddIdentity()`, it will be ignored.\r\n\r\n> @HaoK would that be worth considering updating services.AddIdentity() to avoid overriding the default schemes when they are not null (i.e when already set by the developer?).\r\n\r\nhttps://github.com/aspnet/Identity/blob/f3e251167212f18825506de9099a06e35350269c/src/Microsoft.AspNetCore.Identity/IdentityServiceCollectionExtensions.cs#L66-L71", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1245", "title": "Consider updating IdentityUserClaim to store the claim value type", "body": "> Be aware that ASP.NET Identity doesn\u2019t store claim value types, so even in cases where the claim is always an integer (as in this example), it will be stored and returned as a string. Later in this post, I explain how non-string claims can be included in JWT tokens.\r\n\r\nhttps://blogs.msdn.microsoft.com/webdev/2016/10/27/bearer-token-authentication-in-asp-net-core/", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nphmuller": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1380", "title": "Consider adding AddDefaultTokenProviders() to Identity.Core", "body": "`UserManager`, which is available in Identity.Core, contains methods like `GeneratePasswordResetTokenAsync` and `GenerateEmailConfirmationTokenAsync`. For these to work I would have to add a token provider via `IdentityBuilder.AddTokenProvider`, in which I would have to specifiy the provider name and provider type.\r\n\r\nPreviously I simply used `AddDefaultTokenProviders()` which took care of all the details I don't really care about, since I use the default providers. This method is however only available in AspNetCore.Identity and not in Extensions.Identity.Core.\r\n\r\nIf we take it a step further, `AddDefaultTokenProviders()` might even be a part of `AddIdentityCore()`.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chassq": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1374", "title": "Cannot get AuthenticateInfo in Extended SignInManager Class", "body": "How in Core 2.0 would we get the Microsoft.AspNetCore.Http.Authentication.AuthenticateInfo class if we are extending the SignInManager<TUser> class. In Specific we have a ctor:\r\n\r\n```\r\n        public AppUserSignInManager(UserManager<TUser> userManager, \r\n            IHttpContextAccessor contextAccessor, \r\n            IUserClaimsPrincipalFactory<TUser> claimsFactory, \r\n            IOptions<IdentityOptions> optionsAccessor, \r\n            ILogger<SignInManager<TUser>> logger,\r\n            IAuthenticationSchemeProvider schemeProvider) : base(userManager, contextAccessor, claimsFactory, optionsAccessor, logger, schemeProvider) \r\n```\r\n\r\nAnd an override method:\r\n\r\n`public override async Task SignInAsync(TUser user, bool isPersistent, string authenticationMethod = null)`\r\n\r\nIn the method we need the AuthenticateInfo:\r\n`var scheme = await SchemeProvider.GetSchemeAsync(Microsoft.AspNetCore.Identity.IdentityConstants.ExternalScheme);`\r\n`var ai = await Context.Authentication.GetAuthenticateInfoAsync(scheme.Name);`\r\n\r\nBut this does not seem to work now.\r\n\r\nStartup.cs looks like:\r\n```\r\n            services.AddIdentity<AppUser, AppRole>()\r\n                .AddUserManager<AppUserManager<AppUser>>()\r\n                .AddUserStore<AppUserStore<AppUser>>()\r\n                .AddRoleStore<AppRoleStore<AppRole>>()\r\n                .AddDefaultTokenProviders();\r\n```\r\n```\r\n            services.ConfigureApplicationCookie(config =>\r\n            {\r\n                config.Cookie.Name = lib.util.constants.IdentityConstants.CookieName;\r\n                config.LoginPath = new PathString(\"/account/login\");\r\n                config.LogoutPath = new PathString(\"/account/logout\");\r\n                config.AccessDeniedPath = new PathString(\"/unauthorized\");\r\n                config.ExpireTimeSpan = TimeSpan.FromDays(1);\r\n                config.SlidingExpiration = true;\r\n                config.ReturnUrlParameter = \"returnUrl\";\r\n            });\r\n\r\n            services.Configure<IdentityOptions>(options =>\r\n            {\r\n                options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromDays(1);\r\n                options.Lockout.MaxFailedAccessAttempts = 5;\r\n                options.Password.RequireDigit = true;\r\n                options.Password.RequireNonAlphanumeric = true;\r\n                options.Password.RequireLowercase = true;\r\n                options.Password.RequireUppercase = true;\r\n                options.Password.RequiredLength = 8;\r\n            });\r\n```\r\n\r\nAny help appreciated. THanks!\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mxa0079": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1370", "title": "`UnauthorizedAccessException`  thrown when checking if a user is SignedIn while using IIS Windows Authentication and ", "body": "When using EF Identity along with IIS Windows Authentication, the [SignInManager](https://github.com/aspnet/Identity/blob/eb3ff7fc32dbfff65a1ba6dfdca16487e0f6fc41/src/Microsoft.AspNetCore.Identity/SignInManager.cs) throws a `UnauthorizedAccessException` when checking if the user is signed in (line 120).\r\n\r\nThe root cause of the issue [is described here](https://github.com/aspnet/IISIntegration/issues/231) (in the comment by ph1ll) -- the call to [`i.AuthenticationType`](https://github.com/aspnet/Identity/blob/eb3ff7fc32dbfff65a1ba6dfdca16487e0f6fc41/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L127) makes a win32 call to LsaGetLogonSessionData, which requires the caller to be the session owner or the local admin; something quite unlikely in a web application inside an enterprise environment.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1377", "title": "Fixes issue #1370", "body": "As described in the issue #1370 -- the method `SignInManager.IsSignedIn(ClaimsPrincipal)` throws when the request has a Windows Identity attached to it.\r\n\r\nThe root cause for this is described in Ph1ll's comment on [this issue](https://github.com/aspnet/IISIntegration/issues/231). \r\n\r\nI believe this proposed solution keeps the expected behavior of the method, while fixing a relevant issue for applications on the enterprise.\r\n\r\nThis issue is blocking adoption of ASP.NET Core as it is preventing the deployment to production of an application in a Fortune 500 pharmaceutical company.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HaoK": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1364", "title": "2.0 Migration Questions/Issues", "body": "Consolidated thread for any migration questions and issues for identity\r\n\r\nOfficial migration doc: https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/identity-2x", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1364/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1291", "title": "Revisit RequireConfirmedEmail behavior/design", "body": "Related: https://github.com/aspnet/Templates/issues/832#issuecomment-311758344\r\n\r\nWe also should rationalize if we need a concept of AccountConfirmation which a more generic class what EmailConfirmation is today.\r\n\r\n- Should this flag affect external login providers, or only password flows?\r\n- Do we need a AccountDisabled flag that replaces this for use in ExternalSignIns?\r\n\r\nDo we need to do anything here for 2.0 or can this wait til 2.1?  \r\n\r\n@ajcvickers @blowdart ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1248", "title": "Consider renaming Identity.EntityFrameworkCore from AspNet => Extensions", "body": "If we move IdentityBuilder to Core, nothing in the EF store implementation depends on AspNet, so we should consider making that clear in the package (and maybe namespace?).", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1244", "title": "Support concept of ClientApplication in identity core", "body": "Should try to roll that into the 2.0 schema and eliminate the Microsoft.AspNetCore.Identity.Service.EntityFrameworkCore\r\n\r\nThis would likely look something like:\r\n`Microsoft.Extensions.Identity`:\r\n+ `ClientApplicationManager`, `IClientApplicationStore`\r\n\r\n`Microsoft.Extensions.Identity.Stores`:\r\n+ `IdentityClientApplication`, `IdentityClientApplicationClaim`, `IdentityClientApplicationScope`, `IdentityClientApplicationRedirectUri`\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1168", "title": "Reenable API check", "body": "disabled to unblock build to get Auth 2.0 build unblocked", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/682", "title": "Interop with 4.5 (doc/sample story)", "body": "Need to clean up a few things still:\n- Add initial EF6 migration\n- Add code to do property updating of normalized columns as part of SaveChanges\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/670", "title": "XPlat tests: EntityFramework Store Tests need replacement for localdb", "body": "Currently Identity.EntityFramework provider tests are skipped for SqlServer since there's no LocalDb on xplat.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/99", "title": "Support password expiration", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/f1ed482c26df6e242b1e4eca0948dc77ba5b8fa9", "message": "Add PersonalData tab/functionality"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/435ab653dbb7611c0e936e91279f3337d4071622", "message": "Update initial migration for DefaultUI sample (#1561)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/b07a95dd09b07b5ab6d2a9b1f2b1fcfa08c2f0b0", "message": "Add Store.MaxLengthForKeys (#1555)\n\n* Add Store.MaxLengthForKeys\r\n\r\nIf set this will set max length of things we use for composite keys in\r\nUserTokens/Logins\r\n\r\nNeeded for https://github.com/aspnet/templating/issues/62"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/85f8a49aef68bf9763cd9854ce1dd4a26a7c5d3c", "message": "Shorten folder names"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/669aaea3f3d9e55f8edb33679910a49bdebfd9fc", "message": "Fix additional code path and add a test"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/794bd54cdbbd952d62674c9db76e6bd6a6e6b02f", "message": "Fix issue with AddEntityFrameworkStores and user only store"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/87bbff65867710b5a49265fdf09de4a6d539ac8d", "message": "Alternative fix to GenerateChangePhoneNumber"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8c47b90677c0f544844151418ba94f24d9f2a094", "message": "Update fix to ChangePhoneNumber\n\n- Added Quirk mode to control default provider\n- Fixed new regression"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f147951d92ff5b4413d7ffdd55dcc91dfcfdfdca", "message": "Revert \"use WebHost.CreateDefaultBuilder in IdentitySample.Mvc\"\n\nThis reverts commit 20ec50d5d26f2052afcfcf640c69c6049208e799."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c69b0423a4d9dbab470931453b21792e62ccdad7", "message": "Revert \"add Microsoft.AspNetCore dependency\"\n\nThis reverts commit 9842863695d4fa41e1ba250227a0f43a08652714."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/707be3dca0e4ea363172c7cd22d22d6bf4b8c50e", "message": "Fix comment of variance time for Rfc6238"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d1c5f8d78cfa189533d728227b11e6494c0b1680", "message": "Fix regression with ChangePhoneNumber tokens"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/73afa0af5e27b09aeaea684731bbe7a338e21903", "message": "[2.0.1] Allow use of base identity pocos (#1385)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/bc75b1a0e73d782fbe221fb6f12855d1a337a5b1", "message": "Rename more generic parameters (#1417)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3a208fe41c8bf60d5b84b41c803f8d5492868c97", "message": "Fix params name and AddRoles (#1406)\n\nAddRoles should not be adding a store, that's done by the store\r\nimplementation, it should only be registering the role services.  Also\r\nfixed the TUser/TRole generic parameters names since they were actually\r\nthe store types"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/b865d5878623077eeb715e600d75fa9c24dbb5a1", "message": "[2.0.1] Allow use of base identity pocos (#1385)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e36e681d5477e8fc4de7cc46717bb73f5fe92a0b", "message": "Fix regression with ChangePhoneNumber tokens (#1392)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f3e251167212f18825506de9099a06e35350269c", "message": "Expose some internal helpers (#1348)\n\nValidate/UpdateUser/Role are now protected"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3a13eec82922b17ee6c13acdb8afa902a026b998", "message": "Make token purpose consts public (#1344)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/49ed145e24a2b563f6bdc24aa5c3b099a9eedbde", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/b355f59a013f263e7d41dbeca518ea96866640f0", "message": "TFA tweaks for templates (#1299)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ef411276d689d8f56fae84d3e65bbee5a91682c2", "message": "Switch to new Auth API (#1296)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/eb3ff7fc32dbfff65a1ba6dfdca16487e0f6fc41", "message": "Move IdentityOptions namespace"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/dc4db92d5c3763ba14ee0d53ebb7c656172582cd", "message": "Remove usage of IOptionsCache (#1287)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/980206cc260a438b390ca5154fee6ea236b171bc", "message": "Revert IdentityDbContext breaking change (#1286)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f555a26b4a554f73eea70b4b34fca823fab9a643", "message": "Make roles optional in Extensions.Identity"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a1b9857d94926b47e9d6acef779458e5658fa8fd", "message": "Pass cancellationToken"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a9192d99dc79e64c6ebc8bc434917af8bea02573", "message": "Rollback optional stores + activity features (#1281)\n\n* Rollback optional features/store versioning"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c55eda677faf6b073baf9b711730638e4b8c82f2", "message": "Merge branch 'rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/55e85e09cee3c1460123baa4c6c2c34edacd3b67", "message": "Remove ConfigureDefaultOptions"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/be8232d3f9c7a312314ab42dfe37047ec3b16665", "message": "Add support for store versioning + IUserActivityStore"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/45f9780d32bc83a0ce8b7de3d6620427672df9c0", "message": "Switch back to netstandard2.0"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/34e7a8df279b52d88bd3b78431378c8609debebe", "message": "Switch to new default config options support"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d78e986bcf133915c37686510501c677f065ebbe", "message": "React to HttpAbstractions changes"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e6f3ebf5810c793edc6f3b4ca3438194786b86a2", "message": "Refactor Identity into Core + Stores"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e594854cd28dfe89bc87606d9c49a2a99a1700d0", "message": "Add normalize back"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8a47c1768599d5164bb86ba160838363ffb4a198", "message": "Remove soon to be removed DisplayName set"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7f421a0403497d2fca0b0f9a44faaecd9aa83abd", "message": "Update tests"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/bc757faebaa5e06a50838fcc6497c3373b1b5fb7", "message": "Add GetExternalAuthenticationSchemes back"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c142085695dc636a5655e52eb8ad8d4b673f4e5d", "message": "UseIdentity => UseAuthentication"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4aafafe6f9181f8bc0e4b85b9b7c2fb992c21254", "message": "Update sample"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2b343726897b2cece524537d56aea4c80ac265bd", "message": "Disable API check for now"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/14b4bea964875b605cef5a0fef7ed21ceb51aa6f", "message": "Identity => Auth 2.0"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/5894b58e1a11e5a57f01ff8310d017371a5dae73", "message": "Merge pull request #1152 from aspnet/FixTests\n\nRemove call to Normlize() for now"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/1ddc6b111aa4fe3bd4e2f6ebbbe71d7fc6e9d9ae", "message": "Remove call to Normlize() for now\n\nhttps://github.com/aspnet/Identity/issues/1149#issuecomment-290142263\r\n\r\nCan bring it back once we are on 2.0"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/12aa4a3f810648f94c7146e06e1a3c792a7eb1db", "message": "Reenable email validation"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c9404e53d38889c1288a3f1d5b5e50bdcf0c7947", "message": "Rename tests"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/119eb3fa684dca448ee9156dd7981b1445a15aa0", "message": "Add test verifying SetEmail invalidates token"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/da276142939c8e5532ac83bcbd8a1b436f3d121f", "message": "Merge branch 'haok/fix' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/1b537e31fc97e81eb46f62fcab696a5b49169869", "message": "React to clock changes"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2d157783465505bd0d36480ebe2e595543faff34", "message": "UserStore: Add protected virtuals for queries"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7fbc36c56684769d3535cf1dfd1cddf88fb26343", "message": "Remove cancellation token overload"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/b64a32f089f06c8c403f8bb9ee085a580c9555e2", "message": "Expose options/other services on managers"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/57a25d080d1d0337b3b2dd8a2906f74a6e94370c", "message": "AddEFStores: Infer generics from DbContext"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/5aed9742a4f1a35558f5ca644e981398df7017c1", "message": "Add authenticator support"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ff5a8f33d5fa6d70b0ff310185c69cee2724d963", "message": "Barf on this policheck."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f62ae89d7834649ad4a4dd7d4c7e592a16fade33", "message": "Remove System.Collections from project.json"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/5e4e9ccdf164b622872c397c27b75d2bc8a329da", "message": "Add Identity.Specfification.Tests"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4dd38e8ca81a25d55fd94d7efd25b1ff256b65ab", "message": "Guard against null security stamps"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/13ae7b21f3459e97cd5853b6e6ccb229dac1bafe", "message": "Improve generic support for AddEntityFrameworkStores"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ee83dfe9be3dc17fa8367a0031ff355392db8a76", "message": "Clean up sample"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/aba7cf96b9ac7c910ee7db5e34fa7cf78516116a", "message": "Add OnSecurityStampReplacingPrincipal event"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/971292544a466921c125bc2d9f1a10c7fd9fa605", "message": "EF: Switch to Find where possible"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d18ae5cad12700e3b18fab8feeb36eb486fc9db4", "message": "Add ProviderInstance for use in 2FA TokenProvider"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/5d759abcde8e652fa83ad1a7099fffffb53ca648", "message": "Make role name index unique by default"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/dbec1c6236ac5cc6bc31db52686259c64c89a7d3", "message": "Expose more for extensibility"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1577", "title": "Add ForgetMachine TFA button", "body": "Part of https://github.com/aspnet/Identity/issues/1342\r\n\r\nAdd ability to forget this machine for purposes of TFA signin.\r\n\r\n@pranavkm @javiercn @blowdart @ajcvickers ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1562", "title": "Initial EncryptPersonalData support", "body": "- new StoreOptions.EncryptPersonalData setting\r\n- new IPersonalDataEncryptor and IEncryptedUserStore interfaces that live in core\r\n- new `AddPersonalDataEncryptor<MyEncryptor>()` helper method on IdentityBuilder\r\n- The two concrete user stores in EF now implement IEncryptedUserStore\r\n- UserManager ctor throws if EncryptPersonalData is true if store is not IEncryptedUserStore, or if IPersonalDataEncryptor service not found\r\n- base IdentityUserContext hooks up ValueConverter using IPersonalDataEncryptor on UserName, NormalizedUserName, Email, NormalizedEmail, PhoneNumber columns when EncryptPersonalData is true.\r\n\r\nSo all of the normal store tests except one pass when turning this on with a dummy reverse encryptor. \r\n There's a test that that directly uses the DbSet as an IQueryable to look for users like so: `UserManager.Users.Count(u => u.UserName.StartsWith(\"CanFindUsersViaUserQuerable\"))` which fails because this probably bypasses the converters... @ajcvickers ?\r\n\r\ncc @blowdart @javiercn ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1442", "title": "[WIP] Add Identity.SignIn[.Cookies]", "body": "Work for https://github.com/aspnet/Identity/issues/1409\r\n\r\n- Moves SignInManager into new Identity.SignIn package\r\n- Moves Identity auth cookie configuration into Identity.SignIn.Cookies\r\n- Main identity package depends on Identity.SignIn but not SignIn.Cookies since AddIdentity needs to continue to work as it did before\r\n\r\nNew startup code for refactored identity:\r\n\r\n```C#            \r\nservices.AddIdentityCore<ApplicationUser>()\r\n                .AddRoles<IdentityRole>()\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddSignIn() // Adds SignInManager (works against IdentityConstant schemes)\r\n                .AddDefaultCookies() // Adds and configures default cookie auth\r\n                .AddDefaultTokenProviders();\r\n```\r\n\r\nYou can also directly add the identity cookies you want via new extension methods on `AuthenticationBuilder` which is useful if you want to exclude some of the cookies\r\n\r\n```C#\r\nservices.AddAuthentication()\r\n         .AddApplicationCookie(o => { })\r\n         .AddExternalCookie(o => { })\r\n         .AddTwoFactorRememberMeCookie(o => { })\r\n         .AddTwoFactorUserIdCookie(o => { })\r\n```\r\n\r\nThoughts @ajcvickers @davidfowl @blowdart ?", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1435", "title": "Always validate email", "body": "Fixes https://github.com/aspnet/Identity/issues/1189\r\n\r\n@ajcvickers ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1351", "title": "TFA cookies now validate security stamp", "body": "Part of https://github.com/aspnet/Identity/issues/1342\r\n\r\nWhen security stamp is updated, the TFA remember me cookie will be invalidated\r\n\r\n@ajcvickers @Tratcher @blowdart ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1262", "title": "[Design] Add ClientManager/Store/interfaces into Core - Iteration 1", "body": "Issue: https://github.com/aspnet/Identity/issues/1244\r\n\r\n## Iteration 1\r\n- I'm starting on these PRs now to make sure we have all the support we need in core identity to do this later. \r\n- We can also use these PRs to review each of the interfaces/methods as we are adding them to core.\r\n- The main change other than moving stuff was renaming Application => Client (new placeholder name, open to other ideas).\r\n- This iteration focuses on pulling everything in from Microsoft.AspNetCore.Identity.Service.EntityFrameworkCore and also will focus on defining the surface area of ClientManager/ClientStore/IdentityClient and associated related entities. (aka the low level building blocks)\r\n- The next iteration will flesh out registration AddIdentity overloads, and how to opt into/out of Roles/Client functionality/schema, and absorbing the IdentityServiceSpecfication tests. (aka make it all work again)\r\n\r\n## New types\r\n`Microsoft.Extensions.Identity.Core`:\r\n+ `IdentityBuilder` <= `Microsoft.AspNet.Identity`\r\n+ `ClientManager`\r\n+ `IClientStore`\r\n+ `IClientClaimsPrincipalFactory`\r\n+ `IClientClaimStore`\r\n+ `IClientRedirectUriStore`\r\n+ `IClientScopeStore`\r\n+ `IClientSecretStore`\r\n+ `IClientValidator`\r\n+ `IQueryableClientStore`\r\n\r\n`Microsoft.Extensions.Identity.Stores`:\r\n+ `ClientStoreBase`\r\n+ `IdentityClient`\r\n+ `IdentityClientClaim`\r\n+ `IdentityClientRedirectUri`\r\n+ `IdentityClientScope`\r\n\r\n`Microsoft.AspNet.Identity.EntityFrameworkCore`:\r\n+ `ClientStore`\r\n\r\n@javiercn take a look when you have a chance, since you basically followed the existing manager/store patterns, most of the classes were moved as is with some slight renaming + refactoring.\r\n\r\nI did have a question about Application's ClientId/UserId.  Today Application's have both a TKey id and a clientId, but clientId's must be unique since you can look them up via the Store API.  So Is there any reason we can't just use the ClientId as the key?  Its much nicer since its always a string so it eliminates a generic.  Also are all Applications tied to a single user since there's a FindByUserId as well?\r\n\r\ncc @ajcvickers @danroth27 @blowdart \r\n\r\n\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34366992", "body": "I was actually just testing out how to create a pull request, hence I didn't add anything other than the directory.  The DI change is an actual change I want to make :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34366992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34376591", "body": "pushed to dev\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34376591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37064012", "body": "@GrabYourPitchforks Switched to DataProtection instead of Rfc2898 now, can you review?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37064012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37318535", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37318535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37458524", "body": "@Eilon Updated with fixes from PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37458524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37970890", "body": "Changes are already in\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37970890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38233213", "body": "This was a bug specific to the 2.0.0 release\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38233213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38233249", "body": "There are no sync extensions in K\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38233249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39520477", "body": "Merged as part of another PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39520477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39900081", "body": ":shipit: Will this cause any issues with Dev12 VS? (Do I need to install new tooling?)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39900081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40648897", "body": "Moved IdentityUser pocos to Core\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40648897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40649009", "body": "InMemory store now uses the core poco classes, so there is no longer any InMemory versions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40649009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40649137", "body": "Its protected virtual now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40649137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40660582", "body": "MVC did something like this:\nhttp://weblogs.asp.net/imranbaloch/archive/2013/03/31/localizing-default-error-messages-in-asp-net-mvc-and-web-form.aspx\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40660582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40848403", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40848403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41094564", "body": "https://github.com/aspnet/Identity/commit/d827b9fff2b2648935d4297c98a986766eb6ee8e\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41094564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41213561", "body": "looks much nicer! :shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41213561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42246108", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42246108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42349147", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42349147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42474726", "body": "This pull request replaces this one https://github.com/aspnet/Identity/pull/61\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42474726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42474835", "body": "Fixed in latest bits\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42474835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42474993", "body": "This was due to the default constructor which has been removed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42474993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42476268", "body": "This has been reenabled\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42476268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42501842", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42501842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42501905", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42501905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42879282", "body": "This works for me on latest bits now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42879282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42879387", "body": "No support for case sensitive indexes is coming\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42879387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42879524", "body": "AddUserManager/RoleManager used Scoped by default\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42879524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42879681", "body": "Dupe of https://github.com/aspnet/Identity/issues/52  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42879681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43022301", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43022301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43263510", "body": "Fixed in https://github.com/aspnet/Identity/pull/88\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43263510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43263574", "body": "Fixed https://github.com/aspnet/Identity/pull/88\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43263574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43263633", "body": "Fixed https://github.com/aspnet/Identity/pull/88\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43263633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43264917", "body": "Dupe of this https://github.com/aspnet/Identity/issues/86\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43264917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43299465", "body": "How about AddIdentityWithEntityFramework and AddHttpSignIn?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43299465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43300241", "body": "We could just keep it nested and live with the duplicate ApplicationUser generic argument too if that's the lesser evil:\n\n```\nAddIdentity<ApplicationUser>().AddEntity<ApplicationDbContext, ApplicationUser>()\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43300241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43364323", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43364323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43556089", "body": "Updated with new design that's portable friendly, IAuthenticationManager abstracts what Owin sign in does, so alternate impelementations will just work if they implement the corresponding interface.  HttpAuthenticationManager just calls existing Context apis.  Also added two factor support back to ensure the new design works.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43556089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44474670", "body": "Moved to new PR\nhttps://github.com/aspnet/Identity/pull/100\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44474670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44480114", "body": "Dupe of: https://github.com/aspnet/Identity/issues/62\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44480114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44701525", "body": "Tracked by https://github.com/aspnet/Identity/issues/102\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44701525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44708817", "body": "Fixed in https://github.com/aspnet/Identity/pull/100\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44708817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44708829", "body": "Fixed in https://github.com/aspnet/Identity/pull/100\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44708829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44708848", "body": "Fixed in https://github.com/aspnet/Identity/pull/100\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44708848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44708901", "body": "Track in https://github.com/aspnet/Identity/issues/92\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44708901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44709092", "body": "Dupe of https://github.com/aspnet/Identity/issues/70\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44709092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45025541", "body": "Won't that require a RoleValidator to be registered?  Or do all DI implementations pass in null to the constructor if no validator service is registered?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45025541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559187", "body": "SignInManager actually owns the complexity around signing in (lockout, two factor, password expiration).  The UserManager itself has all of the lower level apis (including lockout), but SignInManager exposes APIs that weave all of the complexity into things like PasswordSignIn, ExternalSignIn, TwoFactorSignIn etc.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559338", "body": "Break this down into specific features that are missing for tracking, this is too vague\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559576", "body": "@alexsandro-xpt You can always extend and plug in your own custom ClaimsIdentityFactory, the idea is to make it easier to use the default implementation.  Role claims(permissions) is what we are looking at currently.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559631", "body": "Fixed in https://github.com/aspnet/Identity/pull/109\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559695", "body": "Mostly fixed in https://github.com/aspnet/Identity/pull/109\n\nFile specific bugs for mores specific missing functionality for tracking purposes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559750", "body": "We are keeping the entity\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45559750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560104", "body": "Keeping the IServiceProvider for both UserManager/RoleManager for now.  Having a constructor with a handful of IEnumerable<TOptionalService> for all the other optional services looks pretty ugly\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560213", "body": "Will be fixed in PR: https://github.com/aspnet/Identity/pull/109\n\nMoving to Composite keys fixes the issue\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560322", "body": "I'm not sure I understand the issue exactly.  UserName != Email unless the app chooses to use email and user name to be the same.  The Find method that takes username and password is looking only at username.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560536", "body": "We should not be turning 'read' operations into 'write' operations automagically.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560653", "body": "Tracking with https://github.com/aspnet/Identity/issues/110\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560763", "body": "Consider a subbuilder?\n\n``` c#\n        services.AddIdentity<ApplicationUser>()\n            .AddEntityFramework(builder => builder.AddDbContext<ApplicationDbContext>())\n            .AddHttpSignIn();\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560775", "body": "Tracking via https://github.com/aspnet/Identity/issues/92\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45560775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45764026", "body": "Is it incorrect to just use GetServiceOrDefault instead of taking all of the optional services?  Taking so many arguments in the user manager looks a bit ugly\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45764026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45778403", "body": "Ok seems fine then :shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45778403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45949992", "body": "https://github.com/aspnet/Identity/issues/117\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45949992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45953242", "body": "https://github.com/aspnet/Identity/issues/122\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45953242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45953347", "body": "Tracking with https://github.com/aspnet/Identity/issues/120\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45953347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45953388", "body": "tracking via https://github.com/aspnet/Identity/issues/120\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45953388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45955560", "body": "Created new PR to reduce rebase noise: https://github.com/aspnet/Identity/pull/124\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45955560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46483869", "body": "Sure, added it to the PR since it is a simple fix: https://github.com/aspnet/Identity/pull/124\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46483869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/47146555", "body": "The basic design was that except for the query style operations: FindByX, all of the get/set methods on interfaces will take an user instance.  Then all of the manager APis tend to fall into the following pattern of query for a user, do all the various store operations against that user instance, and finally Update to commit the changes.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/47146555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/47272164", "body": "No work to be done here, in memory already validates this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/47272164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/47377980", "body": "Yeah the text is perhaps unclear, the intent is the password should have at least one non alphanumeric character.  (one non letter or non digit character)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/47377980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48515021", "body": "First there was the async infection, now there is the DI infection :)  Until we have a mechanism for DI to resolve constructors better we can't really do much here in terms of adding syntactic sugar constructors to the base class.  We could put that in some helper static factory method to wire up everything with the defaults, but I think we should wait to see if we have real use cases like Diego says.  You should be able to use DI in a console app as well.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48515021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49069707", "body": "Also the core manager classes can be disposed after every lookup even if the stores are meant to be singleton/persistent as the managers get the stores from DI.  If it becomes necessary to override the default lifetimes, we can add an overload that takes the lifecycle in the future as well.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49069707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49078998", "body": "Test issue fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49078998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49079090", "body": "Discussed and we will keep string for now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49079090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49079147", "body": "Fxied in https://github.com/aspnet/Identity/pull/144\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49079147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49213413", "body": "Hi, this is on our list already in this issue: https://github.com/aspnet/Identity/issues/123\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49213413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49640867", "body": "Framework features are done, only thing that remains is the default token providers for 2FA\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49640867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49644762", "body": "SecurityStamp validator fixed in vNext and Identity 2.2 to remember IsPersistent state when regenerating\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49644762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49644917", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49644917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49645082", "body": "Decided on AddIdentitySqlServer for now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49645082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49645202", "body": "No more EF specific POCOs, everything now uses IdentityUser/et all from Core\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49645202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49778650", "body": "Fixed in https://github.com/aspnet/Identity/pull/154\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49778650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49778774", "body": "Fixed in https://github.com/aspnet/Identity/pull/153\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49778774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49779010", "body": "Keeping name for now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49779010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49788102", "body": "Maybe @GrabYourPitchforks can do a quick pass?  But this is basically the same code from Identity 2 just slightly tweaked to match the new Identity 3 APIs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49788102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49949813", "body": "rebased 076ea0385f50a23ec9ac14d3c93497f6e7da9508\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49949813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49949888", "body": "Decided against this for now from previous discussions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49949888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50192182", "body": "Rebased 7942d2bc82449a4fa2499be9a07ece3235e03b71\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50192182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50192215", "body": "Fixed 7942d2bc82449a4fa2499be9a07ece3235e03b71\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50192215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50535023", "body": "Fixed in https://github.com/aspnet/Identity/pull/162\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50535023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50535137", "body": "We can probably do this in the context of SignInManager now if desired\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50535137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50657643", "body": "rebased 626362d8a22625e82a2af1b7076796f161510a97\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50657643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51239631", "body": "Dupe https://github.com/aspnet/Identity/issues/169\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51239631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51271616", "body": "Note: This does not repro if I change the lifetime of the SignInManager service to transient\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51271616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51418972", "body": "Issue was Identity was resolving the service against ApplicationServices instead of RequestServices.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51418972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51548829", "body": "Actually looks like I was a bit premature, we do need the container class for GetLogins to return all the info together :(  So we have to keep the Info class for the GetLogins API, we can stop using it for the RemoveLogin method though, and leave it for AddLogin only.  Does that sound reasonable?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51548829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51638015", "body": "rebased 097925a3e4b1ff4e22529f132d388655f2485a39\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51638015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51638075", "body": "Rebased 7d4aed4e3b19da4af20d7e8097718b0f361687b6\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51638075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51643559", "body": "Rebased 2a45a851a52811d78350fa38e7eec4236e4abf78\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51643559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51985264", "body": "Updated the PR with the changes to the login apis, also cleaned up the cancellationtoken apis to all use default(CancellationToken).  Also finally normalized the tests to one shared UserManagerTestBase since this required changes to a bunch of tests.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51985264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51985491", "body": "Scenario 1 is broken by design.  This is a UserManager flag, it will not magically fix data.  \nScenario 2 will be fixed by just having the UserValidator do email validation against the user name if the flag is set.\n\nEmail isn't required so we can't really have the flag work that way.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51985491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51985818", "body": "Not to mention this will be hideously slow as it loads every user in the database.  We can add this API.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51985818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51986104", "body": "Need some way to efficiently invalidate the cookie, currently we load the user and check the security stamp.  The ask is to see if we can make this better in 3.0\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51986104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51988943", "body": "Are you sure that scenario #1 is actually broken?  If you call FindByEmail after the flag is set, you are really calling FindByUserName, not email\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51988943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51989288", "body": "Just to clarify what I mean, you can't actually find by email after the flag is set, so whether or not the email column is null in the database is meaningless, since you can't actually query against it once the flag is set using the UserManager apis.  Of course they can always just do user.Email.  So I don't think there's any issue with scenario 1.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51989288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51992789", "body": "So changing the value of this flag is explicitly a breaking change for your app, its not just going to magically work.  It changes the meaning and behavior of the UserName/Email apis.  \n\nWhen going from False -> True,the app could replace all Email related apis with user name (and if user names are not valid emails already, that is something the needs to be fixed outside of identity).  Going from True to false, will now hit the email column, which has no guarantee of being populated either.  \n\nBut I really don't think this is a setting that is meant to just be toggled on and off.  The setting should be tied to whether the app wants to treat emails distinct from user names, that decision should be made once, and if its changed, the app (or data) probably will have to be fixed to accommodate. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51992789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52097385", "body": "Currently, we already set the username when the flag is set if they try to set the email.  But we don't set the email when calling SetUserName.  I can make the tweak to also set the email when set username is called, but unfortunately this won't really affect the mainline register scenario which uses the property setter on User rather than explicitly calling SetUserName.  We would have to also change update to explicitly copy the value of UserName to email on every update, that doesn't sound too unreasonable I guess.  Thoughts?  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52097385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52098607", "body": "Just to be clear, the proposed additional behavior will basically be blasting username into email as part of every update when the flag is true.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52098607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52247547", "body": "Updated PR with changes for Add to take a UserLoginInfo again\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52247547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52253123", "body": "After discussing this further, we are going to revert the new option, email and user name will remain seperate, apps can set them to be the same at creation time if desired\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52253123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52253760", "body": "Fixed in https://github.com/aspnet/Identity/pull/166\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52253760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52253859", "body": "Dupe of https://github.com/aspnet/Identity/issues/179\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52253859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52253959", "body": "Not going to add any special support for this after discussion\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52253959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52538477", "body": "c80ec3f326a0709dae53105c7f876ffae4804599\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52538477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52988029", "body": "Generic primary keys are still supported, they just have been pushed into the store implementation only.  In 2.0 the generic key was exposed on the user manager, this wasn't really desired or needed as it caused a few bad things: cascading TKeys on all related types and APIs, and also resulted in type conversion issues for the UserId when extracting from the ClaimsIdentity.  \n\nIn 3.0 we decided to get rid of the IUser requirement and instead make the Id/UserName properties methods on IUserStore instead, this way we ended up with the original intent to allow Identity to always treat the IDs as strings, but allow stores to implement the persistence and actual key type however they like so long as they can stringify it.  So the default EF UserStore continues to support generic TKeys, but that type is not exposed outside of the particular store implementation in 3.0.  There should already be overloads on the DI extension methods for AddIdentitySqlServer which take a TKey.  Also if you look at the tests for EntityFramework, you can see how to wire up an int or guid user store.\n\nhttps://github.com/aspnet/Identity/blob/dev/test/Microsoft.AspNet.Identity.EntityFramework.Test/UserStoreGuidKeyTest.cs\n\nHope that clears it up.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52988029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53112701", "body": "Note: this will break all existing identity passwords as the password hasher behavior changes, migration from 2.0 -> 3.0 will also be an issue, do we want to consider keeping the old hasher behavior for version 0 and use a version 1 for this change?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53112701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53309314", "body": "Rebased 952bc6af882f495d7efcd4ca6b2bb570c258b849\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53309314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53349683", "body": "ChallengeResult is in MVC\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53349683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54862898", "body": "Yeah so the compromise I was going to take was just to add one new test at the end of each Test file which drops the database so we don't leave databases around across runs.  There already is a test that is supposed to run first that recreates the database.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54862898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54863387", "body": "It shouldn't affect the time all that much, it will add the time it takes to run a DbContext.Database.Delete 5-6 times at the end of the runs, we were already creating new databases in the runs (so they were already kinda slow)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54863387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54866636", "body": "Current SqlServer tests (90 tests x 4 configurations [string, int, guid, default] stores) takes 14.7 seconds to run\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54866636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55046076", "body": "Fixed: https://github.com/aspnet/Identity/pull/200\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55046076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55047407", "body": "After discussing this, we decided to only support EF stores that support DateTimeOffset by default\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55047407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55047606", "body": "Keeping Microsoft.AspNet.Identity name for now, focusing on web only\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55047606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55203884", "body": "Please use codeplex for Identity 1/2 issues: https://aspnetidentity.codeplex.com/\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55203884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55620756", "body": "After discussion we decided the only constructor should be (IServiceProvider, DbContextOptions)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55620756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55669753", "body": "Address as part of user events hopefully (Creation event)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55669753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55670056", "body": "This abstraction is going away entirely with the Auth merge, everything hangs off of SignInManager so these methods no longer exist\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55670056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55676964", "body": "Closing as dupe of 187\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55676964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55677044", "body": "We should try and standardize on one NameNormalizaitonService and use it everywhere, instead of having a UserName, RoleName and Email NormalizationService\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55677044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55811224", "body": "Done as part of: https://github.com/aspnet/Identity/pull/196\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55811224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55811603", "body": "Done as part of https://github.com/aspnet/Identity/pull/196\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55811603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56725003", "body": "Fixed as part of https://github.com/aspnet/Identity/pull/196\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56725003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56725057", "body": "Will be fixed as part of https://github.com/aspnet/Identity/pull/196\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56725057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56726013", "body": "Fixed as part of https://github.com/aspnet/Identity/pull/196\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56726013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56747032", "body": "GetTwoFactorAuthenticationUserAsync is the replacement for K\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56747032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56747082", "body": "GetTwoFactorAuthenticationUserAsync is the replacement\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56747082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56747164", "body": "Check if the user is null for the equivalent of HasBeenVerfied()\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56747164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56747231", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56747231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56750428", "body": "rebased 57002ba35960fcc58380b52229695e7f6d1975c8\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56750428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56750456", "body": "Rebased in 57002ba35960fcc58380b52229695e7f6d1975c8\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56750456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56896424", "body": "Fixed default to 5 min expires\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56896424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57022321", "body": "Thanks, fixed that one as well\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57022321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57246006", "body": "Sorry the description is a bit unclear, but the basic jist is to see if identity can pull out an actual configured instance of IDataProtector, or if we need to pull out the IDataProtectorProvider service and create a new instance using identity configuration instead. (My guess is the latter)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57246006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57370527", "body": "Current thinking is to do something fairly similar how Resx/ResourceManager works.  \n1. IdentityResult no longer contains error strings, instead it will contain a list of FailureCodes (which are constants defined by identity mapping to things like DuplicateUserName, PasswordMismatch, etc)\n2. There will be a IdentityFailureDescriber service which generates error strings from the codes, we can provide the default implementation which will be the strings we have today.\n3. Replacing the describer service works like any other services via DI\n4. As part of this, remove SignInStatus enum and roll that into known codes, and return IdentityResult from SignInManager methods as well \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57370527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57540714", "body": "Currently we don't have interfaces for these since the default implementation should always be good enough for at least a base class, are you suggesting we introduce interfaces for these classes?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57540714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57846458", "body": "The main issue with this is that RequireUnique email is not mandatory, so this API is not always possible\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57846458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/58435660", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/58435660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59150281", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59150281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59150286", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59150286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59150327", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59150327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59407923", "body": "Fixed 78f472fd205599850119dfbd70f46b7334c06936\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59407923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59434777", "body": "Post beta we should remove all non default constructors\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59434777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59439704", "body": "3a9036a69fa5c46422b00a2ea8901982d6c7ebb3\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59439704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59439745", "body": "3a9036a69fa5c46422b00a2ea8901982d6c7ebb3\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59439745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59451169", "body": "I removed all the constructors already actually I left the comment when I wasn't going to check in until post beta\n\nOn Oct 16, 2014, at 5:16 PM, \"Diego Vega\" <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nShouldn't we keep the item open for the remaining post-beta work?\n\n## \n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/issues/132#issuecomment-59450304.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59451169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59853700", "body": "@GrabYourPitchforks Can you review the IDataProtectionProvider changes? removed the Ephermerial reference and now rely on DI providing the service\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59853700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/60008699", "body": "Adding an overload of SignInManager.PasswordSignIn that takes a TUser should be sufficient, they can query for a user however they like before calling this method\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/60008699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/60009204", "body": "Sure, go ahead and submit a PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/60009204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/60011929", "body": "Dupe of https://github.com/aspnet/Identity/issues/224\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/60011929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/6654098", "body": "If we do that, we could just kill the base interface since the enum is what's defining the strings currently.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654128", "body": "So as it stands today, that would mean we only use this for things that go into IdentityResult (strings), and leave exception messages alone?  We actually throw very few exception messages in identity core, so what appears to be an 'exception message' most likely gets turned into a failure inside of a IdentityResult.  Its the Stores that tend to throw exceptions, and are not part of this change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/8960010", "body": "Fair enough, filed https://github.com/aspnet/Identity/issues/287\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8960010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/9812763", "body": "No the authorize attribute just moved from MVC to Security\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/9812763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/10177933", "body": "Broke music store. Razor has user as I principal. Can't change this until Mvc fixes that. I filed an issue in Mvc. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/10177933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/12702539", "body": "Thanks for fixing this, I got force upgraded to Windows 10 yesterday so doing anything was a struggle with a constantly rebooting laptop :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/12702539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/24167510", "body": "Good catch, sure you can submit a pr, it can just say something like:\r\n\r\n\"The scheme provider that is used enumerate the authentication schemes.\"", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/24167510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360104", "body": "@Eilon How about if we just do something silly like just using the HashCode as a string: \n\n```\nreturn password.GetHashCode().ToString();\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360341", "body": "@Eilon Well then I have to comment out all my unit tests since we require a PasswordHasher (no easy way to store plain text passwords, unless you write a no-op passwordhasher like this).  None of the password related apis will work if the default passwordhasher throws...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10362400", "body": "@Eilon I would rather just #if def the entire passwordhasher class and leave the property null in UserManager if we are in k10 instead of having methods throw.  The only value in implementing this class was for the unit tests so they were already running before I got Crypto working.  We can just wait to enable everything at once instead(passwordhasher with crypto)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10362400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10482897", "body": "@Eilon These are meant to be only English, so if someone wanted to support non English digit/lower/upper they would override this to do the appropriate thing for their language.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10482897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10484807", "body": "@Eilon So that's what we had in identity 1.0, the idea was that they would implement their own UserValidator/PasswordValidator to do anything different.  That option is still available in 2.0, but we were trying to make things public/virtual where it made sense, so developers can also extend/override for reuse.  In K, we will be using DI to fetch the IUserValidator and IPasswordValidator as you mention, but they might still find it useful to derive from the basic validators we provide to start.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10484807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182550", "body": "Mock can't bind to expressions with optional parameters unfortunately :(  So I do have to always specify them everywhere, so there is a bit of unit test tax...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182650", "body": "I will do so for the real Data implementation, but I don't want any extra complexity in the InMemory one.  The InMemory already doesn't do any of validations that the real stores do (null checks, Disposed checks, etc).  The InMemory stores are effectively only unit test stores...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182935", "body": "My intent was to hide the cancellationtoken virus as much as possible, in general for the sub interfaces like ClaimsIdentityFactory and User/PasswordValidator, I really don't think forcing this onto implementers is worth it, since we are mostly doing this as best practice/consistency as opposed to expecting these cancellation tokens to be used very often.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11185261", "body": "I guess its really moot, from this article: http://blogs.msdn.com/b/ericlippert/archive/2011/05/09/optional-argument-corner-cases-part-one.aspx\n\nBasically the signature requires the cancellationToken, whether they make it optional or not, is totally up to the implementer of the interface.  I think we still add value making it optional on the interface, thus signaling to them, that they can do the same (and just ignore it), as opposed to if we didn't do provide a default, that would require more effort for them to figure out what to do with this new cancellationToken.  So my preference is to keep the optional parameters on the interface.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11185261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272753", "body": "Ok I will remove the comment\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272783", "body": "I'll talk to Pranav and see if he's okay with the switch, seems like it should be fine to change\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272785", "body": "Will remove\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272807", "body": "Yep, bug in RoleStore, Resharper warning too, I will make a pass in this file\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276008", "body": "We were mostly mimicking DbContext, which has an SaveChangesAsync()\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276015", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276071", "body": "I will implement this once I'm unblocked, I can't test any of these codepaths currently, so I just left it simple for the initial commit\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276101", "body": "Ok I will make a pass to add [NotNull], perhaps as part of the Async rename PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276458", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276500", "body": "Will switch to int in a separate PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11364926", "body": "@Eilon this is actually a copy paste bug (I copied the class from IEmailStore and missed fixing the comments :p)  UserNames don't have to be emails.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11364926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11504671", "body": "Yup I will try to get rid of these as soon as I can (but I'm going to wait until the Sql version is ready to make sure there are no issues there)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11504671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11504706", "body": "Yeah Composite keys don't appear to work yet in with EF, I had to do this temporarily to get my tests to pass.  I will try to isolate a small repo and file a bug in the Data repo for this, and add a Todo\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11504706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11504763", "body": "Because we are using the shared POCO now, the shared poco uses a child entity to represent claims (IdentityUserClaim),  Prior, we didn't clone and just used the claim as is.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11504763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11814310", "body": "Switched to static readonly (2)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11814310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11814892", "body": "I wasn't sure whether to make this Identity builder and have both RoleManager and UserManager here, or have a UserManagerBuilder and a RoleManager builder.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11814892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11825737", "body": "Okay renamed UserBuilder/Services to IdentityBuilder/Services, still needed a specific GetDefaultServices method per manager, but they share the same builder.  The only downside of this that I can see, is that it forces thinking about TRole even if roles aren't being used\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11825737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11869514", "body": "Fixed IdentityBuilder return type and also added overload that takes just TUser and defaults to IdentityRole\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11869514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969297", "body": "So the pattern I went with was to pickup the defaults from options, but you can still modify each instance directly via its properties.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969373", "body": "This is injectable with an IdentityOptions constructor already I thought?  I'm currently fetching the instance of this from DI already\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11975410", "body": "Fixed all constructors to take Accessor instead\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11975410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11975416", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11975416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11975433", "body": "Fixed now using the injected IdentityOptionsAccessor which takes care of creating the IdentityOptions instance itself\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11975433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12292912", "body": "My understanding was this is the pattern to enforce required non optional constructor arguments.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12292912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12414928", "body": "Yeah I hardcoded a default, mostly for the unit tests (MusicStore overrides this to look at config), we could just throw or do whatever happens when no connection string is specified in a DbContext.  What is the right thing to do here?  In Identity 2.0 we looked for a \"DefaultConnection\" by default.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12414928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12712802", "body": "Yeah we decided there was no good solution, https://github.com/aspnet/Identity/issues/64 is tracking the connection string logic\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12712802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12712851", "body": "Will rename to IdentityEntityServiceCollectionExtensions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12712851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13194398", "body": "I don't think so, MVC doesn't do anything special it looks like: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/UrlHelper.cs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13194398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13197014", "body": "Can't use same name as that confuses the compiler to call the wrong one, as they are identical methods just with different constraints on the generic types.  The InMemory ones should go away soon, so I'll just remove these for now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13197014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13205255", "body": "Changed to EntityIdentityBuilderExtensions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13205255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13205273", "body": "Went with AddEntityFrameworkInMemory for now, since I can't remove yet\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13205273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13934738", "body": "the navigation properties/fixups aren't working completely yet.  I'm working on those changes next\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13934738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13934776", "body": "No, this PR is big enough without more features :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13934776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036017", "body": "Yeah this was copied from MVC, and its not run as part of the build, you have to run build stylecop to run it, which is what i prefer\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036238", "body": "I guess I don't understand that pattern, why would the IdentityBuilder extensions which live in Microsoft.AspNet.Identity show up when you import DI instead of automatically when you import Identity?  That makes sense for ServiceCollection which lives in DI, but not as much for the identity specific builder\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036275", "body": "This PR doesn't address normalizing the POCOs, the SQL implementation is using its own User POCO for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036327", "body": "Yeah this is temporary, eventually there hopefully will only be IdentityUser and IdentityRole, or I guess if we have to, IdentityDbUser for the EF specific one\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036425", "body": "Filed: https://github.com/aspnet/Identity/issues/132\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036479", "body": "Sure, I can do that as part of this change since this will effect music store already\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036521", "body": "The TKeys are currently in the shared pocos, I wasn't removing anything.  I just wasn't adding it to the EF specific poco (User). \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036596", "body": "Because its not identical, the pocos are not fully rationalized yet.  Once we decide finally whether TKey is needed or not, then I'll normalize them all\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036768", "body": "I understand that pattern, but the target type in this case is Identity builder which lives in Microsoft.AspNet.identity not DI...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14804967", "body": "This code is in a test project I just moved it there as is.\n\nOn Jul 10, 2014, at 4:56 PM, \"Diego Vega\" <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nIn test/Microsoft.AspNet.Identity.EntityFramework.InMemory.Test/EntityInMemoryServiceCollectionExtensions.cs:\n\n> ```\n>  {\n> ```\n> -        public static IdentityBuilder<TUser, TRole> AddEntityFrameworkInMemory<TUser, TRole, TDbContext>(this IdentityBuilder<TUser, TRole> builder)\n> -        public static IdentityBuilder<TUser, TRole> AddIdentityInMemory<TUser, TRole, TDbContext>(this ServiceCollection services)\n\nWeren't we going to remove this from product code?\n\n## \n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/144/files#r14800688.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14804967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14951764", "body": "We don't require it, but I just copied all of the current AddIdentity overloads to be consistent, are you recommending we remove that overload as well?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14951764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14952246", "body": "Filed https://github.com/aspnet/Identity/issues/149\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14952246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14952487", "body": "Yeah I filed a bug tracking this name issue because its a bit cludgey, IdentityClaimsOptions works, but what it really is doing, is configuring what the ClaimTypes we use when creating a ClaimsIdentity, i.e. the User Id => ClaimTypes.NameIdentifier.  User Name => ClaimTypes.Name, etc.  Its already under IdentityOptions, so none of the other child options have an Identity prefix, so we could just call it ClaimsOptions, it only is used by the ClaimsIdentityFactory below, which is why I named it as such.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14952487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14952557", "body": "Yeah this was a bit weird, but basically this typically is using the Options that the SignInManager passes in, which itself uses the options off of the UserManager.  It could also get an instance of the Options itself, but currently it just reuses the instance off the user manager.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14952557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14956692", "body": "Tracking bug: https://github.com/aspnet/Identity/issues/136\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14956692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15550498", "body": "Yup, its in System.Globalization.Extensions for K, added ref\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15550498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15968612", "body": "The property is settable, so it can be null if they do UserManager.UserNameNormzlier = null, which is what we want to allow to easily turn this off.  But by default it won't be null\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15968612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15968934", "body": "Passing in an IEnumerable looks pretty ugly :(  I think I prefer option #4: we just do nothing and require developers to create their own Noop/null user name normalizer to change the behavior of the normalizer.  It seems like a very uncommon scenario.  \n\nFor unit tests at least, just nulling out the property is nice, but I can switch this to a null test normalizer instead.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15968934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15970146", "body": "Tracking this in https://github.com/aspnet/Identity/issues/177 as its not just the normalizer that has the pattern, I'll make this change in a separate dedicated for this issue PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15970146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15970513", "body": "I'm not a huge fan of the suffix so I only use it for public apis, but I can add it for you, if you like :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15970513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15972361", "body": "This is actually a bug, filed https://github.com/aspnet/Identity/issues/178 to fix\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15972361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15971955", "body": "Yep will reenable\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15971955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/16204910", "body": "Actually this is not far enough, this is currently dead code since we don't have social logins for templates/samples and I didn't get around to writing the unit test that would have caught this yet (I'll update PR with the fix and test).  Two issues here: this should be passing ProviderKey not DisplayName, and this ExternalLogin API should be taking provider key/ login provider as well.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/16204910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17744247", "body": "Maybe we are ok then: http://msdn.microsoft.com/en-us/library/gg578045(v=vs.110).aspx\n\n\"You can call a static pattern-matching method, such as Regex.Match(String, String). This does not require instantiation of a regular expression object.\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17744247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17744317", "body": "\"By default, the last 15 most recently used static regular expression patterns are cached. For applications that require a larger number of cached static regular expressions, the size of the cache can be adjusted by setting the Regex.CacheSize property.\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17744317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17744765", "body": "Sure, renamed to UserNameValidationRegex\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17744765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422155", "body": "Samples weren't fixed in the dev branch I guess.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422343", "body": "yeah probably, so I didn't fix them as part of the build break fix.  But I would for sure notice samples not working in my working branch :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19194071", "body": "I believe none of the other frameworks currently aren't registering option services, and are leaving it up to the app/consumer of the framework to add the services they use.  Did you need this change to get the config passed into the Options services or just for unit tests?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19194071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19196659", "body": "That was already true for identity most classes already took mandatory IOptions.  Also none  of the other frameworks like MVC/SIgnalR, add OptionsServices in their Framework.GetDefaultServices either.  At runtime, options is typically automatically registered by Hosting either during UseServices or ConfigureServices today, so they would be registered twice if the frameworks also registered them.\n\nMost unit tests just explicitly register the OptionServices as part of the setup, see\n\nhttps://github.com/aspnet/SignalR-Server/blob/dev/src/Microsoft.AspNet.SignalR.Server/SignalRServices.cs\nhttps://github.com/aspnet/SignalR-Server/blob/dev/test/Microsoft.AspNet.SignalR.Server.Tests/Infrastructure/ServiceProviderHelper.cs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19196659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19196738", "body": "I don't think this PR has been rebased after pranav's change yet, so this will probably go away as a merge conflict\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19196738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19236046", "body": "[:shipit:]\n\nOn Oct 22, 2014, at 10:45 AM, \"Levi B.\" <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nIn src/Microsoft.AspNet.Identity/IdentityServices.cs:\n\n> ```\n>          }\n>          else\n>          {\n>              describe = new ServiceDescriber(config);\n> ```\n> -                optionsDescriptors = OptionsServices.GetDefaultServices(config);\n\nSounds good. I'll undo these lines then.\n\n## \n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/237/files#r19230753.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19236046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19753711", "body": "So claims are not necessarily unique, I'm assuming the correct behavior is actually to replace all instances of claims with the matching type/value instead of just the first.  Do you agree?  Basically just iterate and remove all matching claims instead of FirstOrDefault..\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19753711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19753996", "body": "I'm also not sure whether the EF store should be updating the existing POCO or deleting it and creating a new one, but that's an implementation detail for the Store I guess, but this does more closely match an update semantic you originally intended.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19753996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754329", "body": "That's fine, go ahead and file an issue regarding claims uniqueness, that most likely will boil down to a new user option called RequireUniqueUserClaims or something like that.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754562", "body": "Yeah its fine for now, can you also file an issue to track whether this code should be updating the POCO as opposed to creating a new one?  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19765722", "body": "I will once Redis supports auto generating int keys like SqlServer :)  Do you want me to file an issue tracking this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19765722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19765928", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19765928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19765939", "body": "Renamed class\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19765939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19768251", "body": "Looks like I already filed a bug: https://github.com/aspnet/EntityFramework/issues/651  And it was closed as fixed, do I need to do something to use this feature?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19768251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20337979", "body": "I think you want ToListAsync not ToList()\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20337979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20838605", "body": "Move this test to UserManagerTestBase instead\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20838605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21207503", "body": "We aren't trying to block the scenario where they want to have no validation, if a developer wishes to have no manager level validation, they should have a way to do it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21207503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21206500", "body": "Updating email is a security related change, so yeah I think so.  @blowdart agree?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21206500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272481", "body": "Don't ignore case for the value\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272532", "body": "Use Ordinal only, and verify the query\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272733", "body": "Consider Skip/Take \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272850", "body": "Forget skip/take, go ahead and return the user\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272937", "body": "Return user here as well\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358078", "body": "Yeah, now that we are using the normal EF UserStore in the tests, you can delete this class now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358113", "body": "We also no longer need this extension method since we can just use the AddEntityFrameworkStores method now right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358147", "body": "The pattern i chose everywhere else, was to throw ObjectDisposed first, followed by NotSupported, then argument validation, so this is consistent with the rest of the code currently\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358160", "body": "Note: GetClaimStore is doing validation that will throw NotSupported\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358180", "body": "Yeah I don't think any of the EF query's are currently passing in the token\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358190", "body": "Yeah looks like you can nuke this entire file as well\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21859159", "body": "Putting on my Diego hat, you can just return the task and not await\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21859159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21861400", "body": "Ah right, PR truncated this to make it look like CreateAsync was the method...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21861400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20926115", "body": "Yeah this https://github.com/aspnet/Identity/issues/187 is tracking role/email normalization\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20926115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20926193", "body": "I'm not sure, but today the navigation properties aren't properly loaded at all (since we weren't Including them), so I just commented out all references to them until we either fix them, or remove them\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20926193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272035", "body": "change to\n\n```\nprotected IQueryable<TUser> LoadUserAggregate(Expression<Func<TUser, bool>> filter)\n```\n\nreturn base(filter).Include(u => u.Address) \n\nOr we can remove this and all support for child entities\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21272035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22018456", "body": "Suhas's PR are addressing this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22018456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240640", "body": "Main reason I didn't do that was because every time I add a new error message it will be rev'ing an interface and a breaking change if we do that\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240664", "body": "No, I just copied the signature from the Resources.resx apis. we can split and use string here if we think its better\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "blowdart": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1343", "title": "Formalize interfaces for 2fa providers", "body": "Mail providers, text providers etc.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1342", "title": "Revisit and tidy up TOTP flow", "body": "Must\r\n- [x] Ability to back out of rolling keys\r\n- [ ] Forget this machine\r\n- [ ] Link \"remember this machine\" to security stamp that gets bounced when key is regenerated\r\n- [ ] Add ability to logout everywhere when key is regenerated\r\n\r\nNice to Have\r\n- [ ] Ability to turn off individual 2fa providers\r\n- [ ] Support for multiple tokens (Yubikey etc)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1341", "title": "GDPR Support", "body": "- [ ] Extension points to enable encryption of user data\r\n- [x] Extension point to enable downloading of user data\r\n- [x] Extension point to enable deletion of user data", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1341/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1254", "title": "Schema Migration Tracking & Verification", "body": "- [ ] Test migrations from 1.1 schema.\r\n\r\n- [ ]  Check interop with database sharing from a 1.0/1.1 app.\r\n\r\n- [ ]  Ensure it's opt-in for existing code, and opt-in automatically for File -> New Project\r\n\r\n- [ ]  Document how to create change scripts\r\n\r\n- [ ]  Test how VS Publish would apply migrations to azure, and document", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/d4669453bad638cc53b4b0efdce67b7d8c40b1d8", "message": "Merge pull request #1161 from Nordic-Dev/dev\n\nFixing minor typo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21248811", "body": "Agree, because where do password resets go :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21248811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "penihel": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1339", "title": "Error on CreateUserPrincipalAsync when UserId is Guid.Empty", "body": "I have a User (GUID as PK) that PK value is Guid.Empty (like a defult user)\r\n\r\nWhen i call\r\n`           \r\nvar user = await _userManager.FindByIdAsync(Guid.Empty);\r\nvar principal = await _signInManager.CreateUserPrincipalAsync(user);\r\n`\r\nthrows a Exception \"value source is null\"\r\n\r\nDue this....\r\nhttps://github.com/aspnet/Identity/blob/b355f59a013f263e7d41dbeca518ea96866640f0/src/Microsoft.Extensions.Identity.Stores/UserStoreBase.cs#L255\r\n\r\nIs really necessary this if?\r\n\r\n`public virtual string ConvertIdToString(TKey id)\r\n        {\r\n            if (object.Equals(id, default(TKey)))\r\n            {\r\n                return null;\r\n            }\r\n            return id.ToString();\r\n        }\r\n`", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "craigahanson": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1333", "title": "Very difficult to unit test with SignInManager", "body": "I am really struggling to add unit tests over a service I have developed which has a dependency on the SignInManager<TUser>. Is there a reason there is no interface for the sign in manager?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1333/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vicchy-platform": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1284", "title": "Improvement for external provider flow when user already has local account", "body": "Hi:\r\n\r\nI am testing the case where a user creates a local account (e.g., test@gmail.com) and comes back to the site a time after and does not remember if it created a local account or used a external provider (e.g., Google), so it decides to attempt to login with its Google account; or simply, a user that does not remember its password and he hates the password recovery process so it decides to attempt to login with its Google account.\r\n\r\nIn such scenario, when the user attempts to login with Google, it gets to /Account/ExternalLoginCallback , which shows \"Register\", \"Associate your Google account\", \"You've successfully authenticated with Google\".\r\n\r\nWhen the user clicks Register button, without changing its email test@gmail.com, it gets the error message \"User name 'test@gmail.com' is already taken\", and the message \"You've successfully authenticated with\" [which LACKS the provider name Google ]. \r\n\r\n(to solve this small issue, instead of persisting the LoginProvider in ViewData I included it in ExternalLoginConfirmationViewModel and used a input/hiiden in the form)\r\n\r\nI believe this flow is not appropriate for this case because obviosly this user does not want to Register, so I think that when a user coming from an external provider attemps to login for the first time (that it seems to be registering to the service), the system should verify if the email account is already taken because in such case there is a high probability that the user is not attempting to create another account in the system but to login to its account. So, if taken, there should be a different flow that helps the user link the external provider to its account, or at least give options :\r\n\r\nDo you want to create a new account OR link your \"Google\" account to the existing account for test@gmail.com?\r\n\r\nHope this helps improve the system.\r\n\r\nThanks\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexsorokoletov": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1283", "title": "Passwordless authentication example with bearer token", "body": "### How to implement passwordless authentication with ASP.NET Identity and bearer token \r\nI'd like to add a passwordless authentication to my Web API project so that I can get a bearer token using phone number and one-time code.\r\n\r\nWith that, I also would like to keep login/password token authentication in place (for example, for web).\r\n\r\n### Expected result\r\nWould be great to have a supported and more or less straightforward way to implement that.\r\n\r\n### Actual result\r\nCurrently, only way to get token is to make a HTTP call to token endpoint and provide login/password parameters\r\n\r\nThere are several articles how to implement passwordless authentication with Auth0 and PwdLess. I don't want to use 3rd party frameworks for that.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1283/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ponant": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1276", "title": "Consider splitting SignInResult.NotAllowed into SignInResult.EmailConfirmationRequired and SignInResult.PhoneNumberConfirmationRequired", "body": "`SignInResult.NotAllowed` is used in one place here\r\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L748 .\r\nIt does not distinguish between `IsEmailConfirmedAsync ` and `IsPhoneNumberConfirmedAsync`.\r\nDistinguishing will make the code cleaner as it becomes more precise in returning signin results to the dev and then the end UI user (see discussion here https://github.com/aspnet/Identity/issues/1265).\r\nWe could remove `SignInResult.NotAllowed` and do instead\r\n`SignInResult.EmailConfirmationRequired`\r\nand \r\n`SignInResult.PhoneNumberConfirmationRequired`\r\ntogether with the correct Boolean flags to be caught in e.g. a Login Action.\r\n\r\nI am aware that redefining the return type will propagate through methods, but it should not be too difficult. `PreSignInCheck` will become cleaner and we could profit from this to make `PasswordSigninAsync` cleaner as per the discussion in the referenced thread above. I can attempt a PR if you wish and even update the ASP.NET Identity Template. Let me know, otherwise I will stop proposing changes as I do not really need it for my own. Cheers", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1276/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1265", "title": "Illogical flow for PasswordSignInAsync through PreSignInCheck when RequireConfirmedEmail = true", "body": "App Requirement: require confirmed email before user can login.\r\nWhen you require a confirmed email in `Startup.cs`, checking whether the email is confirmed or not makes little sense until the POST username and pwd match what is in the DB. \r\n\r\nThe current flow for login violates this because `PasswordSignInAsync` calls `PreSignInCheck` prior to `CheckPasswordAsync`, an order which makes sense only for checking `LockOut ` but not for email confirmation. `PreSignInCheck` will return ` SignInResult.NotAllowed` for an unconfirmed email.\r\n\r\nThis flow makes it unnatural to fulfil the following likely scenario:\r\n-User registers and an email is sent to him. He never receives this email or forgets to confirm it.\r\n-He tries nevertheless to login, and enters the **correct credentials** . \r\n-Since he entered the correct credentials, we can reveal to him that he should first confirm his email before we persist the cookie and we could propose him to resend a confirmation email. This flow will be safer than the one in the docs because the user entered the correct credentials (hence confirming his identity)\r\n\r\nI tried to override `PasswordSignInAsync `but I hit `SignInOrTwoFactorAsync`, which is private.\r\nThe more natural way to avoid unnecessary code checks would be something around the following for \r\n`CheckPasswordSignInAsync`\r\n```\r\nuser IsLockedOut?\r\n       Yes-->NotAllowed\r\n       No-->Continue\r\nUserName and Password Match?\r\n       Yes -->EmailConfirmed?\r\n                   -->Yes-->Success\r\n                   -->No-->result=\"EmailNotConfirmedYet\"\r\n       No--> LockoutIncrement\r\n```\r\nPhoneNumber confirmation not mentioned. Unfortunatly the `SignInResult ` may need to be extended to become more granular such that `NotAllowed ` becomes split into\r\n```\r\n--UnconfirmedEmail\r\n--UnconfirmedPhone\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/98263cca298fb234344c436dd2ee866ab9567a22", "message": "Enlarged access to SignInOrTwoFactorAsync (#1279)\n\nDoes https://github.com/aspnet/Identity/issues/1274"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vRITHNER": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1275", "title": "still get ArgumentException: Options.ClientId must be provided Parameter name: ClientId with latest Template ", "body": "Template ASPNET Core MVC Authentication Individual with latest version of VS2017 enterprise Version 15.3.0 Preview 2. \r\nThe same error happens each time I simple press F5 or Ctrl+F5:\r\n\r\n> ArgumentException: Options.ClientId must be provided Parameter name: ClientId\r\n\r\nThe appsettings.json contains the clientId, so I don't get it\r\n\r\n`\"Authentication\": { \"IdentityService\": { \"ClientId\": \"D67625E3-714E-4A2E-9E1E-365AB5744B05\", \"TokenRedirectUrn\": \"urn:self:aspnet:identity:integrated\" }`\r\n\r\n```\r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0-preview2-25149\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0-preview2-25149\" PrivateAssets=\"All\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0-preview2-25149\" PrivateAssets=\"All\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0-preview2-25149\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0-preview2-25149\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0-preview2-25149\" />\r\n  </ItemGroup>\r\n```\r\n\r\n```\r\nProduct Information:\r\n Version:            2.0.0-preview2-006215\r\n Commit SHA-1 hash:  e67962b0de\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16199\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Users\\vrith\\.dotnet\\x64\\sdk\\2.0.0-preview2-006215\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview2-25319-02\r\n  Build    : 7983b575ebcbdc3a825eea4b141ff7fb69d25f9d\r\n\r\n```\r\n\r\n\r\nps:\r\nGuys, I know this is a preview, but it could be cool to get a working template when we try to learn stuff.  ;-)\r\nThanks", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1266", "title": "Fix and unskip broken tests", "body": "ValidateLogoutUri_FailsIfTheUriIsRelative and ValidateRedirectUri_FailsIfTheUriIsRelative were failing, they're skipped for preview2 so we can get a passing build of identity as a whole.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/f3ff51f1130d822700a621b5f5b19ef551d9a051", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e85a935d45a0a60842d3d44e62993207c44bf552", "message": "Add RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/33281499ed7080389495a99ab708093cb68bdea0", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/89b55679f2dc322f9ffb68a9c2446e72924e906b", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f9fa765fe835ff8bf3a5565fc5c8a270d79bb08a", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/51eed9332ba0dfac446ebe5f17e87befcd39fe75", "message": "Update VersionPrefix"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e9841001cbcc35f91931af115392823b06918903", "message": "Set AspNetCoreVersion"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f181b4d361669db3e1bb17f6f21039826620bc12", "message": "2.0.0-rtm to 2.1.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8f055d2544a1165b0b1fede6b061101944d5d573", "message": "Skip first time experience on Appveyor"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4cb7f030ba2bc7a1c6b22c10e1bc55a91363df40", "message": "Set \"TreatWarningsAsErrors\" before NuGet restore\n\n* Ensures our build stays clean of NuGet warnings"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/333316131327e80cf9ce45990ef7c9c7633ac987", "message": "Remove TargetFallback"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/609cac9c75c93c062a5273c5d4f913911c9b9e84", "message": "Remove NETStandard.Library.NETFramework and update Moq"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/c4d2fa9e505a8394b6f5bfbde3765cd2700046eb", "message": "Skip failing tests"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/fe72b3233eaa6032825437bc45a7d3a98a694ce1", "message": "Skip failing tests"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danroth27": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1259", "title": "Add extension method overloads that take a specific config section to bind to ", "body": "By default the identity service has a default config schema, but you should be able to specify a specific config section to bind to.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1235", "title": "Provide Sign-in & Sign-up UI that works with MSAL in native clients", "body": "Looks like the browser used by MSAL for native clients (like WPF) is a bit of an antique (IE7 or something similar). We will need to make sure our sign-in & sign-up UI works in this scenario.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1235/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1234", "title": "Consider enriching client validation interfaces", "body": "These interfaces essentially return booleans. We should consider returning result types instead so that we can be more descriptive about why a specific validation failed or to provide extra information based on the validation.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1234/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1233", "title": "Use Async suffix for async methods", "body": "IAuthorizationResponseParameterProvider.AddParameters\r\nITokenResponseParameterProvider.AddParameters", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1232", "title": "Always return the granted scopes in authorize and token responses", "body": "While not technically required when all scopes have been granted, MSAL expects all the scopes to be returned in these responses.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1231", "title": "Fix JsonTextWriter usage if necessary", "body": "MVC had the following issue filed:\r\naspnet/Mvc#5413\r\n\r\nJson.Net 10.0.1 has a property on JsonTextWriter which fixes this\r\nhttp://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_JsonWriter_AutoCompleteOnClose.htm\r\n\r\nIdentityService currently uses text writer in a few places. Check if these locations need to be fixed too.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1230", "title": "Consider support for other grant types in TokenRequestFactory", "body": "We currently support authorization_code and refresh_token as consent grants. We might want to consider future support for other oauth 2.0 grant types like client credentials or resource owner credentials, which might require tweaks in the design of TokenRequestFactory.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1229", "title": "Normalize values that we use for comparisons in queries", "body": "We should normalize values that we use in queries to the database unless we need to do a case sensitive comparison.\r\n\r\nFor case sensitive comparisons we should perform the database query and then repeat the case sensitive comparison in C# as we don't know what the options are for the different databases out there.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1227", "title": "Versioning strategy", "body": "What is our plan for versioning across the wire?\r\nWe should talk about what we'll do for:\r\nToken format changes.\r\nRequest/Response changes.\r\nToken content changes.\r\nDatabase schema changes.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1226", "title": "Add clock skew to options", "body": "Add clock skew to options and take it into account when we calculate validity periods.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1225", "title": "Consider moving away from EpochTime in favor of ToUnixTimeSeconds()", "body": "ToUnixTimeSeconds is the .NET Framework implementation and it's available on all our TFMs.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1224", "title": "Generate default issuer", "body": "You have to configure the issuer today. The configuration endpoint should generate a default issuer based on where the app is hosted. Configuring a specific issuer would override the default.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1223", "title": "Consider adding more validation in token creation", "body": "When we create a token (The logical representation, not the serialized version)\r\nWe validate the arity of the set of passed claims.\r\n(We ensure that some claims are unique and present, we ensure that some claims are unique when present and we ensure some claims are present).\r\nHowever, all the checks that we perform on a claim are independent of the presence or absence of other claims, for example:\r\nOn an id_token, the presence of a at_hash and c_hash claims is required only when an access_token and code are emitted at the same time as the id_token.\r\nIn the validation for creating the id_token we just validate that the at_hash and c_hash claims are unique if present, but we don't have a way to know, during the creation of the token, that the other tokens were present.\r\n\r\nGiven that the process for selecting which set of claims go into which token is not trivial (a set of IClaimsTokenProviders colaborate between each other to produce the set of claims) we can consider adding an intermediate validation step that validates the claims for a token after they've been generated and then constructs the token.\r\n\r\nTo be more clear. Instead of:\r\n```c#\r\nvar claims = GenerateClaims(ctx);\r\nvar token = new IdToken(claims);\r\n...\r\npublic IdToken(IEnumerable<Claim> claim)\r\n{\r\n    EnsureUniqueClaim(claims,IdentityServiceClaimTypes.Expires);\r\n}\r\n```\r\n```c#\r\nvar claims = GenerateClaims(ctx);\r\nvar token = tokenValidator.ValidateToken(TokenTypes.IdToken, claims, ctx);\r\n```\r\n\r\nThe change is to move the validation logic away from the token and to introduce a new abstractions that validates the claims for a given token and then constructs a valid instance of the token.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1222", "title": "Consider selecting the signing certificate based on the time left of the expiration of the first certificate", "body": "We currently select the first certificate in our list of certificates (which is conveniently ordered) for signing tokens.\r\nHowever this has the slight change of signing a token with a credential that will expire sooner than the expiration time of the token. For example\r\nSigning certificate expires in 30 minutes.\r\nToken to be signed has an expiration of 2h.\r\nThis means that for 1h:30 the token would be signed with a set of credentials that has expired.\r\nWhile the window for this to happen is small, we should start using a new certificate for signing if the expected validity of the token is greater than the current expiration of the certificate.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1221", "title": "Remove IConfiguration parameter from UseDevelopmentCertificateErrorPage", "body": "You currently have to pass in an `IConfiguration` to `UseDevelopmentCertificateErrorPage`, but it doesn't look like it is used for anything.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1207", "title": "App management UI", "body": "To be able to use ASP.NET Core Identity for multiple apps you need to be able to manage the registered apps with some sort of UI:\r\n- List, edit, remove, add registered application\r\n- List, edit, remove, add redirect URIs\r\n- List, edit, remove, add scopes\r\n- Generate client secrets\r\n\r\nThis UI will ship as part of the templates.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1206", "title": "Integrated Web API client", "body": "In order for you to use JWT bearer tokens with Identity, you need to configure the JWT bearer settings to know which singing key to use to validate the tokens. We optimize this today to avoid an HTTP client call for this but it is in the actual Web API project template. This work would factor that into the framework so that the template just needs to call that code.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1201", "title": "Find a place for everything in the identity area Extensions folder", "body": "Basically all this stuff in the templates needs to move into this package:\r\n\r\nhttps://github.com/dotnet/templating/tree/rel/vs2017/3-Preview2/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Areas/IdentityService/Extensions", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1200", "title": "Find a place for the ClientInfoProvider", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1199", "title": "Simplify setup of ambient claims by providing defaults", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1198", "title": "Consider renaming the Identity.Service packages", "body": "Rename to avoid confusion with IdentityServer\r\nAlso make clearer the alignment with Azure AD B2C (without implying a dependency on it)", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1155", "title": "Attribute model for mapping user properties to claims", "body": "You should be able to attribute user properties and have them get preserved as claims in the principal that identity creates. This will become more important as we move to exposing identity as a service.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1121", "title": "Include an auth_time claim on the set of generated tokens", "body": "We need Identity to provide time at which the user was signed in so that it can be included as an auth_time claim.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "justin-ruffin": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1247", "title": "IdentityServiceApplication Generic Type Parameter Issue", "body": "The \"IdentityServiceApplication\" class has a generic constraint of  \"where TUserKey : IEquatable<TUserKey>\". \r\n\r\nThis constraint prevents you from defining TUserKey as System.Nullable&lsaquo;Guid&rsaquo; \r\n\r\nThe override IdentityServiceDbContext.OnModelCreating\" has the foreign key defined as optional, and EF requires the TUserKey column to be nullable. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muratg": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1243", "title": "Usermanager.GetuserAsync and User.IsInRole don't work with v. 2.0.0-xxxxxx", "body": "_From @vRITHNER on May 23, 2017 14:23_\n\nHi,\r\n\r\nI don't know if I'm in right repo to speak about that but with 2.0.0-preview1-final\r\nmy web mvc app with identity individual \r\n` services.AddIdentityServiceAuthentication();`\r\n\r\nwith 1,1.0, my controller or view used a method:\r\n`await _userManager.GetUserAsync(User);` to get user properties\r\n\r\nwith 2.0.xxx\r\nplease find attached the result in the capture:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/238842/26358830/1a0fd068-3fd4-11e7-824b-221ed4eccb93.png)\r\n\r\n\r\nWhat am I missing  or the all model to get access to the stuff changed ?\r\nTxs\r\n-Vince\n\n_Copied from original issue: aspnet/Security#1228_", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ibro": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1239", "title": "Updating Default DbContext and models in MVC Individual Accounts auth template - ASP.NET Core 2.0 preview 1", "body": "I created default MVC app with auth for individual accounts. I added some models in IdentityServiceDbContext and tried to add the migration.\r\n\r\n\r\nRunning\r\n`dotnet ef migrations add Initial`\r\n\r\nproduces the following error:\r\n\r\n> System.InvalidOperationException: Cannot resolve scoped service 'MvcAuth.Identity.Data.IdentityServiceDbContext' from root provider.\r\n>    at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator.ValidateResolution(Type serviceType, ServiceProvider serviceProvider)\r\n>    at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n>    at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n>    at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n>    at MvcAuth.Identity.Data.IdentityServiceDbContextFactory.Create(String[] args) in C:\\Users\\coder\\Documents\\Visual Studio 2017\\Projects\\MvcAuth\\MvcAuth\\Areas\\IdentityService\\Data\\IdentityServiceDbContextFactory.cs:line 13\r\n>    at Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations.<>c__DisplayClass10_0.<FindContextTypes>b__3()\r\n>    at Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations.CreateContext(Func`1 factory)\r\n>    at Microsoft.EntityFrameworkCore.Design.Internal.DbContextOperations.CreateContext(String contextType)\r\n>    at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)\r\n>    at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigrationImpl(String name, String outputDir, String contextType)\r\n>    at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigration.<>c__DisplayClass0_1.<.ctor>b__0()\r\n>    at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.<>c__DisplayClass3_0`1.<Execute>b__0()\r\n>    at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)\r\n> Cannot resolve scoped service 'MvcAuth.Identity.Data.IdentityServiceDbContext' from root provider.\r\n\r\n\r\nHow do I run migrations once I update dbcontext and models?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Eilon": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1215", "title": "Identity Signout with v 2.0.0-preview1-final doesn't work right", "body": "_From @livarcocc on May 16, 2017 18:5_\n\n_From @vRITHNER on May 16, 2017 11:31_\n\nHi, \r\n\r\n## Steps to reproduce\r\n```\r\nFrom VS2017 preview, create new dotnet web mvc -auth  Individual\r\nF5 to Debug\r\nFrom a created + logged account\r\nClick Signout\r\n```\r\n\r\n## Expected  behavior\r\nreturnUrl  to Home/Index not signed\r\n\r\n## Actual behavior\r\n```\r\nAn unhandled exception occurred while processing the request.\r\n\r\nNullReferenceException: Object reference not set to an instance of an object.\r\nAspNetCore._Areas_IdentityService_Views_IdentityService_InvalidLogoutRedirect_cshtml+<ExecuteAsync>d__0.MoveNext() in InvalidLogoutRedirect.cshtml, line 7\r\nAspNetCore._Areas_IdentityService_Views_IdentityService_InvalidLogoutRedirect_cshtml+<ExecuteAsync>d__0.MoveNext() in InvalidLogoutRedirect.cshtml\r\n+\r\n<p class=\"text-warning\">@Model.ErrorDescription</p>\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n....\r\n```\r\n\r\n## Environment data\r\n.NET Command Line Tools (2.0.0-preview1-005977)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview1-005977\r\n Commit SHA-1 hash:  414cab8a0b\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16193\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview1-005977\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n\r\nTxs\r\n-Vince\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#6609_\n\n_Copied from original issue: aspnet/Mvc#6279_", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/1214", "title": "Identity Register/SignIn with v 2.0.0-preview1-final doesn't work right", "body": "_From @livarcocc on May 16, 2017 18:6_\n\n_From @vRITHNER on May 16, 2017 11:42_\n\n## Steps to reproduce\r\n\r\n- From VS2017 preview, create new dotnet web mvc -auth  Individual\r\n- F5 to Debug\r\n- From SignIn page, register new Account\r\n- Click Register\r\n\r\n## Expected  behavior\r\nCreate account\r\nRedirect to Home signed\r\n\r\n## Actual behavior\r\n```\r\nAn unhandled exception occurred while processing the request.\r\n\r\nAggregateException: Unhandled remote failure. (Correlation failed.)\r\nMicrosoft.AspNetCore.Authentication.RemoteAuthenticationHandler+<HandleRequestAsync>d__20.MoveNext()\r\n\r\nException: Correlation failed.\r\nMicrosoft.AspNetCore.Authentication.RemoteAuthenticationHandler+<HandleRequestAsync>d__20.MoveNext()\r\nMicrosoft.AspNetCore.Authentication.RemoteAuthenticationHandler+<HandleRequestAsync>d__20.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n```\r\n\r\nReturn url:\r\n`http://localhost:5001/tfp/IdentityService/signinsignup/oauth2/v2.0/logout?post_logout_redirect_uri=urn%3Aself%3Aaspnet%3Aidentity%3Aintegrated&state=CfDJ8FtFvJqI8W1MkXfXi3JXTy9QL3XCUDgZpUn3J7YcCvNhYhHg9Rw0m7Tp0tJVCbgoHwL8FpLnkjaN7A8A7YXKUeObIn264d_EfmK2WlrDBWIUfhzV4MJAdvF1KcZbF67usZpRpTj6NtOUlwlc8tP4i5SIykDnKcJVriNuRR3cyy_oqBLsWDVUoR0aIdeTlP1WDw&x-client-SKU=ID_NET&x-client-ver=2.1.3.0`\r\n\r\n## Environment data\r\n```\r\n.NET Command Line Tools (2.0.0-preview1-005977)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview1-005977\r\n Commit SHA-1 hash:  414cab8a0b\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16193\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview1-005977\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n\r\n```\r\n\r\nTxs\r\n-Vince\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#6610_\n\n_Copied from original issue: aspnet/Mvc#6280_", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/b17cc007b51a574cf4035843de59a534d590639b", "message": "Add period to project.json description."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34011722", "body": "Do you need a project.json for this? Also I'm not sure how to run unit tests in K builds right now... maybe @davidfowl has ideas?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34011722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34382790", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/34382790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/36319171", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/36319171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37490089", "body": "Minutes a couple of tpyos, :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37490089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39765314", "body": "General note: Would be good to put a _little_ more info in the commit description (and the PR) description. E.g. why are we removing what we're removing?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39765314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40888541", "body": "Yeah what MVC did certainly _worked_ but there are likely better approaches. The problem with MVC's approach is that it worked exclusively with .NET's built-in resource management system, which not everyone uses. I think having that as a default is probably fine - though we should discuss with the engineering team before doing that. A more flexible approach would be to have the user specify a delegate that returns the string - that way they can plug in whatever resource loading code they want.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40888541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43109628", "body": "@gblmarquez we are working on allowing code contributions to this project but unfortunately it's not an option right now. But please do share your thoughts on this and perhaps it is something we can collaborate on in the very near future.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43109628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43233635", "body": "Note from an email discussion:\n\nIf Identity has content that can be displayed to end users (i.e. people visiting a site built using Identity) then we need to add a feature to Identity to allow app developers to customize the text. We had this in MVC where some of the validation messages would be displayed to end users and we had a pattern to allow an app developer to load their own resource strings. See this property as an example: http://msdn.microsoft.com/en-us/library/system.web.mvc.html.validationextensions.resourceclasskey(v=vs.118).aspx\n\nBTW I\u2019m not suggesting we exactly follow MVC\u2019s example because it was rather restrictive. I\u2019m sure we can do better by having a user do it more dynamically and programmatically somehow.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43233635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43233891", "body": "@tugberkugurlu these ASP.NET vNext components can run on full .NET Framework as well so as a partial story you might be able to get things more easily running in that scenario. And then at the same time perhaps investigate what it would take to get RavenDB and MongoDB clients working on CoreCLR. In some experiments that we've done it turns out that some components are super easy to port: sometimes as simple as changing a few assembly references and maybe `#ifdef`-ing one or two lines. Of course, some components are a bit more involved to port...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43233891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43288712", "body": "Yeah this name is ummm... yeah... it leaves something to be desired. Can we come up with a better name fairly soon?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43288712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43290033", "body": "I'd really like to not see that name in a template. We did a lot of great naming work for alpha so we should try to keep the bar pretty high.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43290033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45129923", "body": "DI will never pass in `null`. You can instead take in `IEnumerable<IFoo>` and you'll get back 0 or more instances of the item. Not sure that's what we want here though.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45129923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45143969", "body": "@ajcvickers hmm what I stated was indeed my understanding of the system - or at least part of the minimum contract that needed to be supported. It could very well be a bug that it doesn't.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45143969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57401060", "body": "The describer thing sounds pretty interesting. I still recommend waiting a bit before working on this because we have some discussions that will soon happen with the CLR team on how loc will work in this new world in general. Some of those decisions could affect some details on this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57401060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57557982", "body": "I don't think I'd say there is any known technical problem - but it certainly stands out as being \"not like the others.\" At the moment these are the only concrete classes that are put into DI by a framework component. Is there any reason to _not_ have interfaces for these?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57557982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57578576", "body": "Agreed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57578576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/6656411", "body": "There's a much bigger feature here that we will likely want to support across all of vNext. Can we skip doing this now until we can discuss more broadly? MVC needs this as well, and we don't even have any story at all for how app developers will localize their apps.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656546", "body": "Yeah I'd love to see what we can come up with. I think a programmatic approach seems rather complex relative to the simplicity of the task at hand. Having a more conventional approach based more directly on resources could be both easier to implement as well as easier for users to work with.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664116", "body": "I can set up a localization LaB and include this as a topic. Shall I?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6665040", "body": "There's some thinking here that it might all just be one problem with one solution. For example, if by default we used a super simple approach to localization such as PO files, the user could just tweak whatever they want for whatever language they want, including easily adding new languages. We would still no doubt have a \"resource manager\" story for more advanced programmatic scenarios, such as reading strings from a database or other format, but I think this is still all one solution.\n\nI agree we should chat. Will stop by in a bit.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6665040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/9124049", "body": "Might want to look at the consistency of these errors. Sometimes `UserName`, sometimes `User name`; same goes for `Role name`. I recommend the purely English variations, such as `user name` and `role name` because this is an error message to a site visitor, not the developer.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/9124049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/9890461", "body": "Might as well split these out into one top-level class per file.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/9890461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359397", "body": "Should we just have this throw NotImplementedException for now? Otherwise this kind of worries me...\n\nAnd we can log a bug to track implementing it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359493", "body": "@pranavkm you are officially a :trollface: :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10359493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360153", "body": "Is there a reason we need to do anything at all? Is there a downside to throwing an exception?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360397", "body": "Can we #ifdef the unit tests? I want to make all our code is always @GrabYourPitchforks -approved (Levi).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10360397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10364419", "body": "Ultimately, I defer this kind of thing to @GrabYourPitchforks in terms of whether it's OK to have it checked in. But then ultimately it's up to you if you just don't want to do it at all just yet :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10364419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10458342", "body": "Any reason for these methods to be virtual? How could someone override this with any other implementation?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10458342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10483684", "body": "I see. The very concept of \"uppercase and lowercase\" does not apply to most languages, though. Should there instead be a password complexity verification service, of which we have but one default implementation? And then someone else can just go plug in their own implementation that does whatever they want? I'm not sure these specific virtual methods are very useful on their own because they're already far too culturally-specific.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10483684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10500270", "body": "I chatted with @divega and I think it's fine to leave for now - I'm sure we'll later revisit our extensibility story.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10500270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535583", "body": "This class sounds like a \"Util\" class, which is an anti-pattern (\"junk pile\"). Would a more specific name be something like `IdentityResultAssert` with these methods?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535612", "body": "Style: Would it be easier to read with each attribute on one line?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535673", "body": "This test isn't actually using the `input` parameter :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535724", "body": "A unit test should be testing only one thing. This could probably be structured as a Theory test with flags to control which behaviors are expected.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535774", "body": "The test name should be clearer about what it is testing and what it is expecting to happen. (I think a few other tests could have their names polished a bit too.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535844", "body": "I think we're starting to build up several of these other assertion helpers. I'd love for someone to volunteer to aggregate some of these into a new library that all our tests can use...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10535844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10549679", "body": "Tpyo :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10549679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10549686", "body": "File name has a tpyo :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10549686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10683784", "body": "We generally bracket each attribute in its own square brackets so that they are more easily copy-pastable. Might want to do a pass on these to clean up.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10683784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11357648", "body": "This always kind of bugged me. The type is `IUserNameStore` yet it's about email addresses... and none of the API names say anything about email. Do we want to clarify that for once and for all? Are usernames _required_ to be email addresses?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11357648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11365392", "body": "Now that's a big relief, thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11365392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11800490", "body": "Can these checks be replaced with `[NotNull]` attributes on the parameter?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11800490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11800479", "body": "1. Should this be `const` or `static readonly`?\n2. If `static readonly` then should the value be `typeof(DefaultAuthenticationTypes).Namespace + \"Application\"`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11800479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11800470", "body": "Is this one of those \"do we store 'data' in the DI container\" cases? If so, should we? If not, what am I missing? :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11800470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11835020", "body": "Yes, a fascinating subject indeed :smile: BTW this is not a blocker for me right now at all. I'm sure at some future point in time we'll have to review _everything_ we _ever_ put into DI and rationalize it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11835020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12333747", "body": "The error could potentially be better when the DI system throws, because the DI system will presumably have more context available. E.g. it might say `\"<XYZ_Inject> could not construct an object of type 'Baz' with parameters of type 'Qux, Quux, Quux' because there is no registered object of type 'IBanana'\"`. If we get everything directly from the service provider and _that_ throws then the error would presumably be more obscure, e.g. `\"<XYZ_Inject> has no registered object of type 'IBanana'\"`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12333747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14029832", "body": "MVC team has been experimenting with StyleCop, including having a bot that runs it when you submit a PR (before you even push). I'm fine with people experimenting with it like this - I'm sure we'll want to standardize it at some point. Ultimately StyleCop is just about... style... and I think _having_ a consistent style is currently more important than automating it, but for anyone wanting to have it automated that is fine with me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14029832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21922759", "body": "Should change `login` to `log in` while you're at it :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21922759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "scttstrck": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1194", "title": "Add the ability for getting users having a type of claim", "body": "The UserManager exposes the method GetUsersForClaimAsync(Claim claim).\r\nThis method takes a claim and returns a list of users with that claim.\r\nSometimes it is needed to find all users by a specific claim type, ignoring the value.\r\n\r\nA method like GetUsersForClaimTypeAsync(string claimType) would be great.\r\nIt would need to be added to the IUserClaimStore<TUser> interface, and thus the UserStore(s) too.\r\n\r\nDoing this by inheritance is a pain since the UserClaims property is private.\r\nOtherwise a slightly modified query as from the GetUsersForClaimAsync is all that is needed, where claimType is a string.\r\n\r\n`            var query = from userclaims in UserClaims\r\n                        join user in Users on userclaims.UserId equals user.Id\r\n                        where userclaims.ClaimType == claimType\r\n                        select user;`\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1194/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hubaozhang": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1191", "title": "How to combine the aspnetusers table and my current user table?", "body": "My understanding is there are two functions for PasswordSignInAsync in SignInManager (sign in the user in using the user name and password): (1) verify the user name and password against the ones saved in the Aspnetusers table; (2) create sign in cookie. \r\n\r\nI have my own user table, users. How to do combine the two tables? What are common practices? ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CMircea": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1189", "title": "Allowing duplicate emails results in email not being validated", "body": "https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserValidator.cs#L51'\r\n\r\nValidateEmail should be called regardless of RequireUniqueEmail. There should be a separate method that checks if the email is unique and only call that if necessary, but always validate the email address.\r\n\r\nHowever, the better design is to make unique email validation a requirement for the UserStore to fulfill (the same for usernames), because in this situation there is a race condition. The UserStore must be able to ensure the uniqueness of emails/usernames if requested (in SQL it's an unique index, in some document DB's you store a special document with the email as the document key).", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alataffective": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1186", "title": "Allow null UserName values", "body": "To avoid potential enumeration of usernames, I want to set them only after the user has registered with, and confirmed their email address. Until the username is set, I would like it to be null.\r\n\r\nAs far as I can tell, to allow null usernames I have to provide my own implementation of `IUserValidator<TUser>`.\r\n\r\nOne way to do this, is to override `UserValidator<TUser>` (see https://stackoverflow.com/questions/43807787/how-to-allow-a-null-username-in-asp-net-core-identity). However, doing this means I lose email validation as it is not possible to override validation of username and email separately.\r\n\r\nIt's possible there's an elegant solution staring me in the face, but the best I can come up with so far is to provide a full implementation of `ValidateAsync`, not calling into `UserValidator<TUser>.ValidateAsync`.\r\n\r\nAll this seems a bit heavy going, just to support a null username.\r\n\r\nI guess having something on `UserOptions`, e.g. `UserOptions.AllowNullUserName` would do it (though adding such options could start to get out of hand, unless representing a common requirement).\r\n\r\nAlternatively or additionally, allow `UserValidator.ValidateUserName` and `UserValidator.ValidateEmail` to be overridden (they're currently private). This would give the needed flexibility but allow maximum reuse of existing code.\r\n\r\nAny thoughts?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WilliamWsyHK": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1178", "title": "Cannot Query Claims from RoleManager<ApplicationRole>", "body": "Hi, when I tried to query some default Roles and RoleClaims from the database (I am using MySQL, and connector from Pomelo.EntityFrameworkCore.MySql 1.1.1) using EF Core, the RoleManager<ApplicationRole> does not return any claims for that role.\r\n(ApplicationRole is inherited from IdentityRole)\r\n\r\n**Background:** One Role associate with only zero / one Claim.\r\n\r\n**Some short description of the flow:**\r\nFirst check if the default exists in the database, if no then create the role with corresponding claims; if exists, check if there is the claim for this role, if the claim is not in the database, add it back.\r\n\r\n**Expected behavior:** If the default claim exists, no action need to be done.\r\n**Actual behavior:** No matter how many claims in the database associated with the role, RoleManager<ApplicationRole> will always return Claims with Count 0.\r\n\r\nHere are some code, implementing the flow mentioned,\r\n```C#\r\n// role has type KeyValuePair<string, string>\r\nforeach (var role in Roles)\r\n{\r\n    if (!await roleManager.RoleExistsAsync(role.Key))\r\n    {\r\n        var identityRole = new ApplicationRole(role.Key);\r\n        identityRole.Claims.Add(new IdentityRoleClaim<string>()\r\n        {\r\n            ClaimType = role.Key,\r\n            ClaimValue = role.Value\r\n        });\r\n        var result = await roleManager.CreateAsync(identityRole);\r\n        if (!result.Succeeded)\r\n        {\r\n            var exceptionStringBuilder = new StringBuilder()\r\n                .AppendLine($\"Default role \\\"{role.Key}\\\" cannot be created.\");\r\n            foreach (var error in result.Errors)\r\n            {\r\n                exceptionStringBuilder.AppendLine($\"    {error.Code}: {error.Description}\");\r\n            }\r\n            throw new Exception(exceptionStringBuilder.ToString());\r\n        }\r\n    }\r\n    else\r\n    {\r\n        var identityRole = await roleManager.FindByNameAsync(role.Key);\r\n        // ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n        // The above row returned Claims.Count == 0,\r\n        // which I expect at least 1.\r\n        // ||||||||||||||||||||||||||||||||||||||\r\n        if (identityRole.Claims?.Count == 0)\r\n        {\r\n            var claim = new IdentityRoleClaim<string>()\r\n            {\r\n                ClaimType = role.Key,\r\n                ClaimValue = role.Value\r\n            };\r\n            var result = await roleManager.AddClaimAsync(identityRole, claim.ToClaim());\r\n            if (!result.Succeeded)\r\n            {\r\n                var exceptionStringBuilder = new StringBuilder()\r\n                    .AppendLine($\"Default role \\\"{role.Key}\\\" cannot add claim with value \\\"{role.Value}\\\".\");\r\n                foreach (var error in result.Errors)\r\n                {\r\n                    exceptionStringBuilder.AppendLine($\"    {error.Code}: {error.Description}\");\r\n                }\r\n                throw new Exception(exceptionStringBuilder.ToString());\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThank you,\r\nWilliamW", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VR-Architect": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1175", "title": "Obsolete: options.Cookies.ApplicationCookie", "body": "After upgrading to 2.0 from a working ASP.NET CORE WebApp v1.1, I get an error on my setting of cookie values in Startup.cs:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0619\t'IdentityCookieOptions.ApplicationCookie' is obsolete: 'See https://go.microsoft.com/fwlink/?linkid=845470'\tWebAppCore\tC:\\Scott\\POC2\\WebAppCore\\Startup.cs\t105\tActive\r\n```\r\n\r\n\r\nHere is my versions from *.cproj\r\n```\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeFrameworkVersion>2.0.0-preview2-002066-00</RuntimeFrameworkVersion>\r\n\r\n```\r\nHere is the code from Startup.cs\r\n```\r\nservices.Configure<IdentityOptions>(options =>\r\n            {\r\n                // Password settings\r\n                options.Password.RequireDigit = true;\r\n                options.Password.RequiredLength = 8;\r\n                options.Password.RequireNonAlphanumeric = true;\r\n                options.Password.RequireUppercase = true;\r\n                options.Password.RequireLowercase = true;\r\n\r\n                // Lockout settings\r\n                options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);\r\n                options.Lockout.MaxFailedAccessAttempts = 10;\r\n                options.Lockout.AllowedForNewUsers = true;\r\n\r\n                // Cookie settings\r\n                options.Cookies.ApplicationCookie.CookieName = \"FCS\";\r\n                options.Cookies.ApplicationCookie.ExpireTimeSpan = TimeSpan.FromDays(150);\r\n                options.Cookies.ApplicationCookie.LoginPath = \"/Account/LogIn\";\r\n                options.Cookies.ApplicationCookie.LogoutPath = \"/Account/LogOff\";\r\n                options.Cookies.ApplicationCookie.AccessDeniedPath = \"/Account/AccessDenied\";\r\n                options.Cookies.ApplicationCookie.AutomaticAuthenticate = true;\r\n                options.Cookies.ApplicationCookie.AuthenticationScheme = Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationDefaults.AuthenticationScheme;\r\n                options.Cookies.ApplicationCookie.ReturnUrlParameter = Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationDefaults.ReturnUrlParameter;\r\n\r\n                // User settings\r\n                options.User.RequireUniqueEmail = true;\r\n            });\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1175/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kodithuwa": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1170", "title": "Change claims on middleware", "body": "Hi,\r\nMy requirement is to remove existing (System.Security.Claims.ClaimsPrincipal) User claims and add new claims for suspended users.\r\nIs this possible ?\r\nThanks\r\nChaminda", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xinunix": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1157", "title": "Is there an option for prefetching Claims with UserManager find functions?", "body": "Wondering if there is a way (via an option in startup or something) to prefetch claims when you retrieve a user via the UserManager.FindUserByXXXAsync methods?  We have a scenario where when we fetch a user we always want to get their claims back as well.  I read in another post that the User.Claims navigation property can't be trusted to consistently be populated and I think I understand that it is done automatically for the currently logged in principal but what options are available to get the claims for a user when they are looked up via a one of the UserManager find functions?  I know I can make a second call to UserManager.GetClaimsAsync(user) to get an `IList<Claim> ` but there doesn't seem to be an obvious way to then associate those with the ApplicationUser b/c the type of the claims collection on ApplicationUser is `Microsoft.AspNet.Identity.EntityFrameworkCore.IdentityUserClaim<string>` but the` IList<Claim>`\r\n returned by GetClaimsAsync is System.Security.Claims.Claim.  It seems like there should be a way to do this cleanly and maybe there is and we are just missing it?\r\n\r\nI will add that we have noticed that immediately after calling UserManager.AddClaimAsync(user, claim) that the corresponding user object does then have the newly added claim in User.Claims and it is persisted to the db store.  But that doesn't appear to get re-fetched when the user is looked up later via UserManager find functions...", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PartyArk": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1142", "title": "Avoiding Lockout / Username disclosure", "body": "After _x_ tries at a username / password combination, we have the option of locking out the user for a period of time. \r\n\r\nOnce locked out, we need to let the user know they're locked out. Come back in five minutes. It's a useful feature to prevent brute force attacks etc.\r\n\r\nThe trouble is, I can abuse this feature to find out if a username (usually email) is a registered user. Just make _x_ attempts, and see if I get the lockout. If the username is _not_ registered, I can try indefinitely: I'll never be locked out, because there's nothing to lock me out from.\r\n\r\nUnhelpfully, I can't think of a solution.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mdmoura": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1135", "title": "Not able to create User in Console Application and SignIn with it in Web Application", "body": "Using ASP.NET Core 1.1.1 I am creating a User as follows:\r\n\r\n    DataContext context = new DataContext();\r\n\r\n    User user = new User {\r\n      Email = \"john@company.com\",\r\n      Username = \"john@company.com\r\n    };\r\n\r\n    var userStore = new UserStore<DataContext>(context);\r\n\r\n    var userManager = new UserManager<User>(userStore, null, null, null, null, null, null, null, null);\r\n\r\n    await userManager.CreateAsync(user, \"johnpass\");\r\n\r\nThe user is created but the login fails in my Web Application when doing it this way:\r\n\r\n    var result = await _signInManager.PasswordSignInAsync(\"john@company.com\", \"johnpass\", false, true); \r\n\r\nIf I create the user on my Web Application Startup getting the UserManager from services then the login works.\r\n\r\nAm I missing something?\r\n\r\nWhat ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alienlike": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1120", "title": "Documentation", "body": "Before the ASP.Net Core docs were migrated away from RTD, I seem to recall there being some pretty in-depth content on how to implement Identity. Now I'm looking again and the Identity docs contain mostly point-and-click, integration-oriented material. I'm trying to do a custom implementation for Oracle. Is there anything out there for people like me?", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1120/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianharwell": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1113", "title": "Security issue with UserManager.CreateAsync", "body": "The latest code in the repository for the UserManager.CreateAsync method is as follows...\r\n\r\n```` c#\r\npublic virtual async Task<IdentityResult> CreateAsync(TUser user, string password)\r\n        {\r\n            ThrowIfDisposed();\r\n            var passwordStore = GetPasswordStore();\r\n            if (user == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(user));\r\n            }\r\n            if (password == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(password));\r\n            }\r\n            var result = await UpdatePasswordHash(passwordStore, user, password);\r\n            if (!result.Succeeded)\r\n            {\r\n                return result;\r\n            }\r\n            return await CreateAsync(user);\r\n        }\r\n````\r\n\r\nThis is a security issue because the UpdatePasswordHash method occurs before CreateAsync. This allows for the changing of an existing user's password.\r\n\r\nIt also doesn't make sense to update a password before creating a user.\r\n\r\nMy guess is this is a way to validate the password and if that is the case a call to `PasswordValidator.ValidateAsync` would be better.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rtpHarry": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1079", "title": "You can easily get into a mess with social logins", "body": "Social logins doesn't seem very well supported. I've enabled the facebook logins and its working ok but the way it works feels like it's going to confuse a lot of customers.\r\n\r\n  1. The register page doesn't show the active external services.\r\n  1. The log in page automatically registers a new account if you \"log in\" with a new external service. There is no way to prevent this.\r\n  1. The is no way to merge accounts once you have accidentally ended up with two accounts because of this.\r\n  1. Once that external service has a made that new account going to your real local account and trying to add the social login shows a forbidden page.\r\n  1. There is no way to delete your accounts.\r\n\r\nIdeally I would like to be able to use the facebook login button and if the returned account matches an existing local account I should be given the opportunity to merge the social login onto the local login account. \r\n\r\nOr alternatively some way to stop the mess from happening. So a setting that means you can only log in with social accounts not register a new account.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msmolka": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1058", "title": "Expose a public CanSignInAsync() method", "body": "It would be good to use PreSignInCheck separately. I have external logic that requires whole precess except real ASP.NET sign in, so check if user can be successfully signed in. For UserName and Password I can n use CheckPasswordSignInAsync but for external login I don't have such possibility.\r\n\r\nSo either make PreSignInCheck public or add new CheckExternalSignInAsync method which will behave in the same way.", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zhng66": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/1045", "title": "something about phone number when identify ", "body": "why there is some method about email like **FindByEmailAsync** **GenerateEmailConfirmationTokenAsync**  but non the same method about phonenumber ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/1045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "furlanrapha": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/991", "title": "Create default `IdentityErrorDescriber` for some languages", "body": "Hi, I know that we have the ability to extend `IdentityErrorDescriber` and create our custom messages but shouldn't be better if we have already some default `IdentityErrorDescriber` for the most used languages? (I don't know right now the most used languages)\n\nThis is just an issue I would like to comment because I'm translating it right now, but for sure another person is doing the same in his code. So everybody need to create a custom in each new project?\n\nWell, if someone falls into this issue searching how to do it, follow this steps:\n- Create a class with the name `CustomIdentityErrorDescriber`, copy the code below:\n\n``` csharp\nusing Microsoft.AspNetCore.Identity;\nnamespace YourNamespace\n{\n    public class CustomIdentityErrorDescriber : IdentityErrorDescriber\n    {\n        public override IdentityError DefaultError() { return new IdentityError { Code = nameof(DefaultError), Description = $\"Um erro desconhecido ocorreu.\" }; }\n        public override IdentityError ConcurrencyFailure() { return new IdentityError { Code = nameof(ConcurrencyFailure), Description = \"Falha de concorr\u00eancia otimista, o objeto foi modificado.\" }; }\n        public override IdentityError PasswordMismatch() { return new IdentityError { Code = nameof(PasswordMismatch), Description = \"Senha incorreta.\" }; }\n        public override IdentityError InvalidToken() { return new IdentityError { Code = nameof(InvalidToken), Description = \"Token inv\u00e1lido.\" }; }\n        public override IdentityError LoginAlreadyAssociated() { return new IdentityError { Code = nameof(LoginAlreadyAssociated), Description = \"J\u00e1 existe um usu\u00e1rio com este login.\" }; }\n        public override IdentityError InvalidUserName(string userName) { return new IdentityError { Code = nameof(InvalidUserName), Description = $\"Login '{userName}' \u00e9 inv\u00e1lido, pode conter apenas letras ou d\u00edgitos.\" }; }\n        public override IdentityError InvalidEmail(string email) { return new IdentityError { Code = nameof(InvalidEmail), Description = $\"Email '{email}' \u00e9 inv\u00e1lido.\" }; }\n        public override IdentityError DuplicateUserName(string userName) { return new IdentityError { Code = nameof(DuplicateUserName), Description = $\"Login '{userName}' j\u00e1 est\u00e1 sendo utilizado.\" }; }\n        public override IdentityError DuplicateEmail(string email) { return new IdentityError { Code = nameof(DuplicateEmail), Description = $\"Email '{email}' j\u00e1 est\u00e1 sendo utilizado.\" }; }\n        public override IdentityError InvalidRoleName(string role) { return new IdentityError { Code = nameof(InvalidRoleName), Description = $\"A permiss\u00e3o '{role}' \u00e9 inv\u00e1lida.\" }; }\n        public override IdentityError DuplicateRoleName(string role) { return new IdentityError { Code = nameof(DuplicateRoleName), Description = $\"A permiss\u00e3o '{role}' j\u00e1 est\u00e1 sendo utilizada.\" }; }\n        public override IdentityError UserAlreadyHasPassword() { return new IdentityError { Code = nameof(UserAlreadyHasPassword), Description = \"Usu\u00e1rio j\u00e1 possui uma senha definida.\" }; }\n        public override IdentityError UserLockoutNotEnabled() { return new IdentityError { Code = nameof(UserLockoutNotEnabled), Description = \"Lockout n\u00e3o est\u00e1 habilitado para este usu\u00e1rio.\" }; }\n        public override IdentityError UserAlreadyInRole(string role) { return new IdentityError { Code = nameof(UserAlreadyInRole), Description = $\"Usu\u00e1rio j\u00e1 possui a permiss\u00e3o '{role}'.\" }; }\n        public override IdentityError UserNotInRole(string role) { return new IdentityError { Code = nameof(UserNotInRole), Description = $\"Usu\u00e1rio n\u00e3o tem a permiss\u00e3o '{role}'.\" }; }\n        public override IdentityError PasswordTooShort(int length) { return new IdentityError { Code = nameof(PasswordTooShort), Description = $\"Senhas devem conter ao menos {length} caracteres.\" }; }\n        public override IdentityError PasswordRequiresNonAlphanumeric() { return new IdentityError { Code = nameof(PasswordRequiresNonAlphanumeric), Description = \"Senhas devem conter ao menos um caracter n\u00e3o alfanum\u00e9rico.\" }; }\n        public override IdentityError PasswordRequiresDigit() { return new IdentityError { Code = nameof(PasswordRequiresDigit), Description = \"Senhas devem conter ao menos um digito ('0'-'9').\" }; }\n        public override IdentityError PasswordRequiresLower() { return new IdentityError { Code = nameof(PasswordRequiresLower), Description = \"Senhas devem conter ao menos um caracter em caixa baixa ('a'-'z').\" }; }\n        public override IdentityError PasswordRequiresUpper() { return new IdentityError { Code = nameof(PasswordRequiresUpper), Description = \"Senhas devem conter ao menos um caracter em caixa alta ('A'-'Z').\" }; }\n    }\n}\n```\n- Go into your `Startup.cs` and when configuring the `services.AddIdentity` part, add the following code:\n\n``` csharp\nservices.AddIdentity<User, IdentityRole>()\n        .AddErrorDescriber<CustomIdentityErrorDescriber>();\n```\n\nIn this example, the code was translated to `pt-BR`.\n\nWould be nice if we have all those translations ready in the Identity package. The custom implementation is really nice but I don't know if it's just me felling that I will have to copy and paste this custom class into each project that I need to use.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/991/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/926", "title": "Give me all users and all of their roles...BY NAME", "body": "This is among the most simple of Use-Cases and yet does not appear to be allowed. When administering my site's users I need to be able to get a complete list of my users with their basic properties, one of which is the collection of roles assigned to the user. Using the  ApplicationUser and UserManager \"out of the box\" and this code: _(ok, yes, mgr and org represent properties which have been added to ApplicationUser, but they don't change the present case)_\n\n`var results = UserManager.Users.Where(u => u.mgr == appUser.org || appUser.org == \"corp\");`\n\nI get all of the expected users ... but their \"role\" property only gives me the \"RoleId\" (and UserId) NOT the role's name. Since the database does enforce referential integrity between AspNetUserRoles and AspNetRoles it really SHOULD be a simple matter of including role names as part of this query...but does not appear to be so. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "twilliamsgsnetx": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/887", "title": "Should I not be using multiple contexts?", "body": "I'm really scratching my head right now, as I'm expanding upon my project. I could really use some help to get me on the straight and narrow.\n\nWhat I'm building is a data aggregation platform, which has dashboards and other things that my company staff members will use. I am using Identity to determine who is using it, and all across the app I will have different unrelated subapps that may or may not need to allow user preferences/ownership to be persisted.\n\nI'm currently modeling things with different DbContext's. For my dashboard, I have my own separate DbContext. For one of my other tools completely unrelated to the dashboard, I have a separate DbContext. It turns out though, that both need to store user preferences/data ownership and for that I am needing to utilize Identity.\n\nIt's gotten to the point now that I'm stuck, facing all sorts of errors when I'm attempting to establish relationships between the different contexts to the identity context.\n\nI've been doing a lot of research and there seems to be a lot of favor to the idea of using a singular DbContext that handles all of these concerns... and that it's bad to attempt what I'm currently doing.\n\nCan I get some clarification on this? For all the stuff I'm doing that will require even a minimal association with user data, should it be in the single DbContext that extends IdentityDbContext?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jvelezc": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/811", "title": "AspNetClaims updating a claim from a role ", "body": "The fact that an extension method is needed to remove claims in either the aspnetuserclaim and aspnetuserroleclaims is not the best way to interact with the system. It would be best if \njust like there is \npseudo code\nRoleManager<ApplicationRole> _roleManager = \nExist today\n_roleManager.AddClaimAsync\n_roleManager.RemoveClaimAsync\nMy proposal: \nThere should also be UpdateClaimAsync\n\nhttp://stackoverflow.com/questions/24587414/how-to-update-a-claim-in-asp-net-identity\n\nCan I do a PR?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/811/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ciel": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/801", "title": "Doc comments: Explain UserName is a unique login identity and different from User.Name", "body": "I spent a few hours trying to hunt down what was going wrong with my site - as no matter what I tried, when I would create a new user, their `Name` field continued to come up lowercase ('Normalized').\n\nEventually I traced it back to the `UserManager<T>` and how it calls for `SetNormalizedUserNameAsync`, etc, on the implementation of `IUserStore<T>`.\n\nThe problem here is one of interpretation. Obviously, now that I realize what is going on, I just update `SetNormalizedUserNameAsync`, `GetNormalizedUserNameAsync`, `SetUserName`, `GetUserName`, etc, to be the field I'm personally equating to a unique login identity.\n\nBut this naming convention, I feel, could be clearer. I think the intent is that it's supposed to normalize whatever field you're using as a unique identifier (`username`). I actually translated it as a literal `User.Name` - a field where the user's name would be stored.\n\nIt might be a bit clearer with a verbose `SetNormalizedUniqueIdentifierAsync` or something that makes it pretty apparent it's used for that purpose. \n\nEven the documentation isn't really obvious about its intent; Here is the actual docs for `SetNormalizedUserNameAsync`\n\n```\n/// <summary>\n/// Sets the given normalized name for the specified <paramref name=\"user\"/>.\n/// </summary>\n/// <param name=\"user\">The user whose name should be set.</param>\n/// <param name=\"normalizedName\">The normalized name to set.</param>\n/// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> used to propagate notifications that the operation should be canceled.</param>\n/// <returns>The <see cref=\"Task\"/> that represents the asynchronous operation.</returns>\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/801/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "markusvt": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/765", "title": "Show all Users from a given Role (and all related query scenarios)", "body": "Hello, i spent the last day to figure out how to do it, but it seems with the given functions of UserManager and RoleManager, the only possible way to achieve this is to enumerate all Users and check if the user has specified role.\n\nIs there a way to do this better than enumerate over all user?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TerribleDev": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/628", "title": "Improve mechanism for flowing additional claims to identity cookie on SignIn", "body": "In ExternalLoginCallback there are claims set by middlewear components that are being dropped in ExternalLoginSignInAsync.\n\nSpecifically, I am using the [github](https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/blob/dev/src/AspNet.Security.OAuth.GitHub/GitHubAuthenticationHandler.cs#L35) external provider which sets a bunch of claims, and I see the claims during ExternalLoginCallback, but they are not carried through. What I want to get at is the auth token which is set as a claim when configured.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/628/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sergeyzwezdin": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/554", "title": "Configure email/phone confirmation requrement separatelly for each authentication method", "body": "I would like to configure email/phone confirmation requrement separatelly for each authentication method. For example, require email confirmation for password based sign in and don't for google auth.\n\nI noticed it's impossible now, as there is check for all authentication methods - https://github.com/aspnet/Identity/blob/670614cdc59200f70a8045a7a5f346165d816fa1/src/Microsoft.AspNet.Identity/SignInManager.cs#L90-L94\n\nHow about changing this to be able to configure per each method?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexjusti": {"issues": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/503", "title": "OAuth 2.0 Bearer Token authentication", "body": "I've been doing some digging, and I can't find anything regarding ASP.Net 5 and OAuth token based authentication.  Is this a planned feature for a later release, or am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/fbb0dde2a4c32eca8a4f0c11ea49609a3107b3a0", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f15e49fa99cd65e1dc7404b9f5496e3995e9c7d3", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f3c1ab6b0c92c34ead9ce43a54074ef86ae3892a", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/f05baec284760b9450739a5a905b4bc033a2d245", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/6204b822e516cc7bba7d3f001703c094afe62446", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d79018aca6ea1ded7cfb3aa76a1884da1fc9dfbc", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rynowak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/0baa738120084472c5388901fec11ec58ff61c99", "message": "Merge pull request #1551 from aspnet/rynowak/allow-pages\n\nReact to breaking change in MVC"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/de9a35cec68190e7cb8be0dbdf365f7bb3da80cc", "message": "React to breaking change in MVC\n\n/cc @javiercn"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Zarickan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/6a31f73984097c2814e1f0409b23c665d4cf2e31", "message": "Corrected typo in IUserTwoFactorTokenProvider.cs\n\n- Corrected typo: \"heck\" should be \"check\""}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maqduni": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/c59fda0e1be36c8007ac706ad9b35d054d5111eb", "message": "Add alternative RavenDB provider by maqduni."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tugberkugurlu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/9842863695d4fa41e1ba250227a0f43a08652714", "message": "add Microsoft.AspNetCore dependency"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/20ec50d5d26f2052afcfcf640c69c6049208e799", "message": "use WebHost.CreateDefaultBuilder in IdentitySample.Mvc\n\nso that it picks up the logging config from the `appsettings.json`"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/6ab39281e577044b34b55e68926c0646c6223876", "message": "Rename IUserAuthenticatorInfoStore.cs to IUserAuthenticatorKeyStore.cs"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/4af4a434c563bc89064b18ff6867fb52d6bfd7d6", "message": "remove About and Contact links from the sample\n\nTheir corresponding views are missing and when clicked, it gives 404. Not sure if removing is OK (seems so)."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/cd87b3db7e6d8f99718a4a033ba87c07036dbc66", "message": "Delete Helios.cmd\n\nI believe it's not used anymore"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43170501", "body": "This would be actually interesting to keep the other implementations inside the core repository. However, not sure how easy the integration would be right now. \n\nFor example, I have the RavenDB and MongoDB implementations of the ASP.NET Identity. As far as I can guess, integration with K10 would be not possible as neither RavenDB nor MongoDB has K10 compliant clients yet.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43170501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754074", "body": "@HaoK I agree within this context. I'll change accordingly. \n\n> Note: However, I have doubts about claims being not unique. I am feeling that there should be some uniqueness constraint around claims but I'm not sure where they should fit in. Also, that's outside the scope of this PR I think :smile: I'll probably open up another issue to discuss that later.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754252", "body": "@HaoK right. This implementation looks like an update operation but it's actually the replace at the same time as type and the value are the only stored details. Leaving as is?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754541", "body": "It's really interesting that you brought that up :smile: as I have problems with that approach, too :smile: I'll raise that concern, too (I promise, I'm stopping cluttering this PR with unrelated stuff now :smiley:)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19754541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19766027", "body": "@HaoK sure, will do that once this's merged (to be able to point to a place).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19766027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "khellang": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/8136fc5306df052c4afd22ad6707e845a1755307", "message": "Use AddHttpContextAccessor method added in aspnet/HttpAbstractions#947"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scottsauber": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/700c2afc21fa95060f7b42727cbdfd047ec1aa38", "message": "- Add summary to LockoutOptions AllowedForNewUsers.\n- Move defaults to summary for better intellisense.\n- Added defaults to xml docs where missing."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JudahGabriel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/b442d1af2fa87d925db6188370dff49e9eb8c9f1", "message": "Added RavenDB identity provider."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hangy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/388fea2ed6510bcf29c19d30572d37b45e16f3e1", "message": "Fix ResetPasswordAsync documentation\n\nThis seems like it should be the other way around."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/9977c35d80434e583c8f8ee63c1884cd927addb8", "message": "Increase Minimum Version of Visual Studio to 15.3.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesrcounts": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/e2ef51b57c916345a09e1ba1f58f54b58efb723f", "message": "Update UserValidator.cs (#1340)\n\nFix typo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JunTaoLuo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/de1e3a627318b9c0d3db3970341cd2c509bdbe4c", "message": "Ensure fallback to curl after failed wget"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a7490d7e396f5cc3b2f9c0e9213b8674c83cfc4f", "message": "Update __get_remote_file logic"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/255d2442410a06d6a542c28ec931b1fa4f78db9b", "message": "Update Microsoft.Azure.KeyVault version"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/8baaf1f0c10e8e46e9c93ca9693cba2e11e84e0f", "message": "Merge branch 'rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2354d87497600e131fa29a9548eb17e6f64e1c57", "message": "Update Microsoft.IdentityModel.Clients.ActiveDirectory version to 3.13.9"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/b1d1d85aee521b9ea615a5a144d39cf25e36f796", "message": "Remove cyclic dependency"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a5ca720ff1bb361bdc4e4cb92652be26eae4b1ee", "message": "Upgrading to VS 2017"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikeharder": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/8d3af67ce7354bd91a35252d77daf813be31bec4", "message": "Merge pull request #1318 from aspnet/rel/2.0.0\n\nRename Owin version property for consistency (#1317)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/43e5c8699c64bd4ec7a778c31560c8ee4f39b80d", "message": "Rename Owin version property for consistency (#1317)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/e2305e112c42a0fdcb33079674b6acd1553e8b92", "message": "Merge remote-tracking branch 'origin/rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/25308845b855aa49a07ba6d0dbe29d8e75d682b4", "message": "Update IdentityModel to latest (#1314)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/475170283b50c397224b93ea51937ee4a72df7aa", "message": "Merge remote-tracking branch 'origin/rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2ecfebe11b9e0d09b53bc363e3c9113ce5fc1cd7", "message": "Enable Travis and AppVeyor for release branches (#1315)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d98c7e42637efcb4420efb2c020bc181db867310", "message": "Enable Travis and AppVeyor for release branches (#1315)"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/24d4694ec5f8aa8c83d340b51ac11a7925a33061", "message": "React to Authentication changes (#1295)\n\n* https://github.com/aspnet/HttpAbstractions/commit/271faf11bbd5b05cd758f1c7e83eb59d45b6db59\r\n* https://github.com/aspnet/Security/commit/ff9f145a8e89c9756ea12ff10c6d47f2f7eb345f"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kichalla": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/91a0f3cb530f5cd82dff813ad7685b97e6023247", "message": "Merge branch 'rel/2.0.0-preview2' into dev-gate"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2ac96dc904e558e2fc90c1b04439325a4a8e28f2", "message": "Changed all references of PackageTargetFallback to AssetTargetFallback"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a923e3db28e02f14adce4cf0d43636a1131b13b6", "message": "Merge branch 'rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/6480e88f96e140f3784d0ffeb7fcb9d117484979", "message": "Removed unnecessary references"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/3e7ac46d7050a76ac1aaadf1b44486041e38b948", "message": "Updated to use the latest shared runtime"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/7e051d92cb06738583cf90e4efd11f9e8f7c49de", "message": "Converted samples and test projects to run on netcoreapp2.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bchavez": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/8682cc74c87c847053cce151206fe06a999a3073", "message": "Fixes #1098. Allows derived types of UserClaimsPrincipalFactory to return their own ClaimsPrincipals."}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1400", "title": "House Cleaning - Spell check and grammar.", "body": "House Cleaning - Spell check and grammar. :shower:\r\n\r\n:ear_of_rice: :stew: ***[\"Out here in the fields... I fight for my meals... It's only teenage wasteland...\"](https://www.youtube.com/watch?v=IXWNSb4nUDY)***\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/24164730", "body": "Hi @HaoK seems like you made a copy/paste mistake in the XML doc comment for `SignInManager`'s `schemes` parameter. If you'd like me to send you a PR for this let me know what it should read. Either way, I think it should be corrected. Stumbled on this checking the diffs between Identity 1 and 2. Thanks. -Brian", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/24164730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/24177412", "body": "Thanks @HaoK , corrected as part of PR: #1400 ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/24177412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "olsh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/795040a8a19be9e4530f4729f9bcc8d2d0a2891e", "message": "Remove excessive periods in comments. (#1162)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ffMathy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/a664d38ecdc004a5ab1e5628bbe3c89184663fa0", "message": "fix for capitalization of file name (#1166)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anurse": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/1909240393648694b3cc14b5c3c26aca4a21e0e0", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/d19f44124bd00f1a5c435c68b795f9c3c227f29e", "message": "netcoreapp2.0 (#1183)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/12695165", "body": "https://github.com/aspnet/Identity/commit/f26b20b7ee7eb8c202b598fb8c84c4bcbe14eb99\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/12695165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/12695172", "body": "Someday I'll find a workflow for temporarily changing the feed value :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/12695172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/12702593", "body": "No worries :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/12702593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "bricelam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/dff2a3a559a0dde279a884f4ea475c70180dd535", "message": "Temporarily disable DotNetCliToolReference in samples until aspnet/Universe#506 is resolved"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37244184", "body": ":shipit: Although you may want a second pair of eyes with more Identity knowledge.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37244184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37247389", "body": "@AndriySvyryd lol, seems weird for someone not from the Identity team to be involved. I'll wait for one of them to sign-off too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37247389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42918172", "body": "FYI, I was able to re-implement the password hasher using the [Windows.Security.Cryptography namespace](http://msdn.microsoft.com/en-us/library/windows/apps/windows.security.cryptography.aspx).\n\n``` C#\npublic static string HashPassword(string password)\n{\n    var salt = CryptographicBuffer.GenerateRandom(SaltSize);\n    var passwordBytes = CryptographicBuffer.ConvertStringToBinary(password, BinaryStringEncoding.Utf8);\n    var deriver = KeyDerivationAlgorithmProvider.OpenAlgorithm(KeyDerivationAlgorithmNames.Pbkdf2Sha1);\n    var passwordKey = deriver.CreateKey(passwordBytes);\n    var parameters = KeyDerivationParameters.BuildForPbkdf2(salt, Pbkdf2IterCount);\n    var subkey = CryptographicEngine.DeriveKeyMaterial(passwordKey, parameters, Pbkdf2SubkeyLength);\n\n    var outputBytes = new byte[1 + SaltSize + Pbkdf2SubkeyLength];\n    Buffer.BlockCopy(salt.ToArray(), 0, outputBytes, 1, SaltSize);\n    Buffer.BlockCopy(subkey.ToArray(), 0, outputBytes, 1 + SaltSize, Pbkdf2SubkeyLength);\n\n    return Convert.ToBase64String(outputBytes);\n}\n\npublic static bool VerifyHashedPassword(string hashedPassword, string password)\n{\n    var hashedPasswordBytes = Convert.FromBase64String(hashedPassword);\n\n    if (hashedPasswordBytes.Length != 1 + SaltSize + Pbkdf2SubkeyLength || hashedPasswordBytes[0] != 0)\n        return false;\n\n    var salt = new byte[SaltSize];\n    Buffer.BlockCopy(hashedPasswordBytes, 1, salt, 0, SaltSize);\n    var storedSubkey = new byte[Pbkdf2SubkeyLength];\n    Buffer.BlockCopy(hashedPasswordBytes, 1 + SaltSize, storedSubkey, 0, Pbkdf2SubkeyLength);\n    var passwordBytes = CryptographicBuffer.ConvertStringToBinary(password, BinaryStringEncoding.Utf8);\n    var deriver = KeyDerivationAlgorithmProvider.OpenAlgorithm(KeyDerivationAlgorithmNames.Pbkdf2Sha1);\n    var passwordKey = deriver.CreateKey(passwordBytes);\n    var parameters = KeyDerivationParameters.BuildForPbkdf2(salt.AsBuffer(), Pbkdf2IterCount);\n    var generatedSubkey = CryptographicEngine.DeriveKeyMaterial(passwordKey, parameters, Pbkdf2SubkeyLength);\n\n    return CryptographicBuffer.Compare(storedSubkey.AsBuffer(), generatedSubkey);\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42918172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42978488", "body": "@davidfowl I talked to @divega and @rustd about the scenarios I'm hoping for. I think the plan is to have some building-block components that are portable (like `UserManager`) that the OWIN-specific parts would build on top of (and tie together into nicer APIs).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42978488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46598259", "body": "Oops, I need to update the .sln and .kproj files too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46598259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10454254", "body": "Could surround with #if NET45 to keep coverage on net45\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10454254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "smitpatel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/660525a8ac62fca0981c538603dbc12c6363529b", "message": "Update API Check related files\nReact to aspnet/BuildTools#238"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlecPapierniak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/6b65ed2d83d2f083babebe984a1dd0a5dc75421b", "message": "Fixing minor typo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/eed9bd668effdb837b4ae87839774042ce335bc7", "message": "Merge pull request #1126 from aspnet/no-mono\n\nNo mono"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ea66d3e0c98c305ed8d565fa93afbcaeafed30db", "message": "Update .travis.yml"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37719153", "body": ":shipit: Tho it doesn't merge anymore\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37719153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39914752", "body": "@HaoK yes you do (hopefully it won't cause issues). Check out https://github.com/aspnet/Tooling/blob/master/README.md\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39914752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42258304", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42258304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42258966", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42258966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42919024", "body": "Which components in particular? Do we need another repository split out from this out from this one?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42919024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45710175", "body": "Change net45 in your project.json to net451\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45710175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45717201", "body": "A good way to keep up with the changes would be to look at mvc music store (the dev branch) https://github.com/aspnet/MusicStore/blob/dev/src/MusicStore/Startup.cs\nhttps://github.com/aspnet/MusicStore/blob/dev/src/MusicStore/Controllers/AccountController.cs\n\nSo you can avoid filing these bugs in the future.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45717201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/10177894", "body": "Porque?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/10177894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/10178461", "body": "Let's just fix MVC.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/10178461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/12681587", "body": "Uh wtf?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/12681587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/12681589", "body": "ah\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/12681589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11792982", "body": "Nuke this, we're not exposing this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11792982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11792983", "body": "This type should never call build\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11792983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "jamiewest": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/b10c8ec0b8140b6b40026e10c81497140de0cb79", "message": "Update IdentityBuilder.cs <typeparam> tag definition\n\nUpdated the <typeparam> tag used for AddUserStore<T> to match the definition used for AddRoleStore<T>."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cesarbs": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/fc56cba8e77d38324cf731441e39335b48efd87d", "message": "Bump Microsoft.AspNetCore.Identity.Specification.Tests to net452."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dougbu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/ccea27d05cd4525cdcf97237ec9fa6531c896553", "message": "Bump test projects up to .NET 4.5.2\n- aspnet/Testing#248\n- xUnit no longer supports .NET 4.5.1\n- build tests for desktop .NET only on Windows"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/2a03500acecc5a4eadba5a68454e980aaa222599", "message": "Increase .travis.yml consistency between repos\n- aspnet/Universe#349\n- minimize `dotnet` setup time; no need for caching"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38869217", "body": ":ship: it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38869217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "sebastienros": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/addb9a45cbe02a924fd4709b6ca1fcce5d77137a", "message": "Implementing PasswordOptions.RequiredUniqueChars (#1100)\n\nFixes #1097"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/5480aa182bad3fb3b729a0169d0462873331e306", "message": "Clearing up FindByEmailAsync usage\n\nMakes it explicit that the parameter can be any email, but the query will be based on the normalized value."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fabiano": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/d4d105d5b529c8e1701010cb49bc115f0aa23ed0", "message": "Set ConcurrencyStamp current value using lambdas."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/830a1863a1da097e3ebb9845cf6d605b6595c69a", "message": "Fix property name."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jyunderwood": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/9e59e79a94d995dcc2edbcdfab43889c26a7156e", "message": "Sample: use FindByEmailAsync in ResetPassword flow"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajaybhargavb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/a9ce48b911c246b7db185492ab7910dc33a63870", "message": "Updating missed projects to 4.4 CoreFx packages"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/34519a43f67553b42c1e61863897c5a09ba7ae9a", "message": "Removed packages list in NuGetPackageVerifier.json"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "halter73": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/1b394a1830e28a29b8f7383795774ebecec2d5e4", "message": "Barf even less (and move spec tests in sln)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45776220", "body": "Using GetServiceOrDefault in the two constructors I modified would mean following the service locator (anti)pattern. Since these dependencies should all be registered with the DI container and are required,  @loudej and I decided it would be better to make all the dependencies explicit constructor arguments.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45776220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "NTaylorMullen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/c8b17ac86b1fb2d5aa5444ab846be408487532f1", "message": "Update .travis.yml osx image to xcode7.3."}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/a2919e07b5e65b6160be61a3332490895a7676bb", "message": "Pin global.json SDK to 1.0.0-preview2-1-003177."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ili": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/bf71121a7e6444027849a965040cca394248e856", "message": "Update README.md"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarcoMiltenburg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/bb60afba28d7775e610afafd85cce810c9200374", "message": "There's no need to check IsLockedOut() anymore as this is already done in PreSignInCheck()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ketrex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/0332e91a08bc99de09d501c7a7fa188ac7fafa27", "message": "Update UserStore.cs\n\nFixed incorrect code comment"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "troydai": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Identity/commits/37297ec11a24fda6019014c4d3a23a7886cb57ad", "message": "Merge pull request #942 from tugberkugurlu/patch-1\n\nlist community maintained store providers on Readme"}, {"url": "https://api.github.com/repos/aspnet/Identity/commits/ca66dfc895170f373770bd59bea83544e9f4c045", "message": "Merge pull request #943 from tugberkugurlu/patch-2\n\nDelete Helios.cmd"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkulubya": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1557", "title": "Fix small typo in method docs", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "reaction1989": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1545", "title": "Remove IConfiguration from use development certificate error page", "body": "fixes #1221", "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/1544", "title": "make Logger non virtual in UserManager", "body": "Fixes #1441 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neyromant": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1512", "title": "Additional verifications in IdentityBuilder", "body": "Summary of the changes:\r\n - IdentityBuilder.AddPasswordValidator<TValidator> method was updated: a verification that TValidator implements IPasswordValidator<{UserType}> has been added.\r\n - IdentityBuilder.AddUserStore<TStore> method was updated: a verification that TStore implements IUserStore<{UserType}> has been added.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmerkel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1499", "title": "Password validation failure does not propagate", "body": "If validation fails, but no errors were returned in the Errors collection, add a default so the failure result propagates.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DamirAinullin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1399", "title": "Fix for couple of obvious typos", "body": "Fix for couple of obvious typos.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "denis32000": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1087", "title": "Added verification and password reset by phone", "body": "Modified GeneratePasswordResetTokenAsync and ResetPasswordAsync.\r\n\r\nAdded VerifyPhoneResetPasswordTokenAsync.\r\n\r\nAdded GeneratePhoneConfirmationTokenAsync, ConfirmPhoneNumberAsync, VerifyConfirmPhoneNumberTokenAsync for phone confirmation.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RainingNight": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1055", "title": "Add FindByPhoneNumberAsync", "body": "Used to phonenumber login.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "devhammer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/1003", "title": "Update UserManager docs for spelling/clarity", "body": "Updated /// comments for several method definitions for spelling/clarity.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GrabYourPitchforks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/36965981", "body": "We shouldn't get in the habit of checking in placeholder insecure code.  These unfortunately have a nasty habit of making their way into finished products and causing grief for us and our customers after release.\n\nI have a pending pull request in the DataProtection library that exposes a replacement for RNGCryptoServiceProvider and Rfc2898DeriveBytes.  You can use these APIs if you want.  See https://github.com/aspnet/DataProtection/pull/6 for more information.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/36965981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37072763", "body": "@HaoK looks good - thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37072763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38136301", "body": "ConfigureAwait(false) is a no-op going forward since none of the hosts will have a sync context.  (There's still an open question as to whether the sync context class even exists in K, which would render this whole thing moot.)\n\nI have a separate thread with Eric where we're working on ways to flow culture across await boundaries.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38136301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45787164", "body": ":shipit:\n\nRe: HMACSHA1, you should be able to call HMACSHA1.Create(), HMAC.Create(\"HMACSHA1\"), or something similar.  I forget the exact syntax offhand.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45787164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53118879", "body": "Yeah, you definitely need to bump the version byte in front of the hashed password for this to work.  This is the scenario that SuccessRehashNeeded was intended for.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53118879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19195504", "body": "PasswordHasher now takes a mandatory IOptions in its ctor, which means that Options must be registered here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19195504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19230721", "body": "Yes, this line will go away.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19230721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19230753", "body": "Sounds good.  I'll undo these lines then.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19230753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "AndriySvyryd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37247275", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37247275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "divega": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37878854", "body": ":shipit: but please squash your commits before you push\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/37878854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38127197", "body": "I say :shipit: based on my current understanding and bugs like http://aspnetidentity.codeplex.com/workitem/2060. It would be good to get other eyes into it though, e.g. @GrabYourPitchforks, @AndriySvyryd, @davidfowl and try to arrive to a common way to handle this in K as much as possible. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/38127197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39271536", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39271536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39515763", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39515763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39605429", "body": ":shipit:  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/39605429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40252979", "body": "Besides the suggestion to add a few TODOs, this looks :shipit: to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/40252979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41093910", "body": "Looks :shipit: to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41093910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42497012", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42497012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42909785", "body": "Can you please split this in two separate bugs? :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42909785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42992572", "body": "As we talked about yesterday afternoon with @haok, we need to move the definition of the abstraction of the SignInManager to Core, then we make the \"web security\" implementation of it rely on OWIN. This should not only give us what Brice wanted but also nice DI registration extension methods.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42992572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43263438", "body": "besides the feedback, :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43263438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43288358", "body": "I hope we can find better naming but this unblocks the template improvements. :shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43288358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43288922", "body": "Yes. @rustd just filed a bug: #92. @eilon you think we need better names for the templates, i.e. today?\n\nSent from my Windows Phone\n\n---\n\nFrom: Eilon Liptonmailto:notifications@github.com\nSent: \u00fd5/\u00fd15/\u00fd2014 19:16\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Add AddIdentityEntityFramework (#91)\n\nYeah this name is ummm... yeah... it leaves something to be desired. Can we come up with a better name fairly soon?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/91#issuecomment-43288712.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43288922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43292254", "body": "Ok. We need a name that represents adding Identity services but that is specific to the EF implementation. This avoids chaining methods that have duplicate generic arguments to configure the Identity services. My first idea for this was `AddIdentityWithDbContext<ApplicationDbContext, ApplicationUser>()`. Other options considered were AddEntityFrameworkIdentity, AddIdentityDbContext, AddIdentityWithEF, etc.\n\nI also think we should rename AddSecurity to something else, e.g. AddHttpSecurity or AddWebSecurity.\n\nSent from my Windows Phone\n\n---\n\nFrom: Eilon Liptonmailto:notifications@github.com\nSent: \u00fd5/\u00fd15/\u00fd2014 19:47\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Add AddIdentityEntityFramework (#91)\n\nI'd really like to not see that name in a template. We did a lot of great naming work for alpha so we should try to keep the bar pretty high.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/91#issuecomment-43290033.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43292254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43364753", "body": "belated :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43364753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45055726", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45055726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46706822", "body": "Besides the actionable comments :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46706822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48510186", "body": "We rely on application startup to setup up the dependencies correctly so that they can be resolved later via DI without violating the layering: some of those dependencies live in Microsoft.AspNet.Identity.EntityFramework.dll and Microsoft.AspNet.Idetity.Authentication.dll, while UserManager is defined in the root Microsoft.AspNet.Identity.dll. \n\nA possible alternative to DI is to wire up explicitly the dependencies in a method that is executed once per UserManager instance, e.g. similar to the OnConfiguring method that EF's DbContext provides and that can be overridden in a derived DbContext. \n\nBut before we try to do anything like that we should discuss what exactly it mean to \"get the UserManager locally\". It is not clear to me that there is a compelling scenario there for us.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48510186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48679800", "body": "Minus the feedback, this looks :shipit: to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48679800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48679871", "body": "We discussed this offline. It has nothing to do with MusicStore anymore, but it is an Identity sample that we will maintain from now on.\n\n:shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48679871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48960393", "body": "Thanks for the feedback. The idea is to encourage other providers for Identity to supply their own setup extension methods so that dependencies can be wired up as it is most appropriate. That can include setting up custom stores that use other persistence means but also setting up the lifetime of dependencies differently.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48960393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48962088", "body": "Just to clarify a bit: we are moving towards having the extension methods defined on the provider, e.g. in [one of our latest PRs](https://github.com/aspnet/Identity/pull/144) we have AddIdentitySqlServer defined in Microsoft.AspNet.Identity.EntityFramework which will do all the appropriate setup to make EF + SQL Server work. We still have AddIdentity  defined in Microsoft.AspNet.Identity but right now it is not super clear who should be using that.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48962088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49095295", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49095295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49485147", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49485147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49771761", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49771761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49787816", "body": "Looks :shipit: to me. Do we need any additional reviews for this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49787816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50056728", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50056728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50418479", "body": "Besides the feedback, this looks :shipit: to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50418479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50536653", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/50536653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51540985", "body": "Besides the feedback, looks :shipit: to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51540985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51545723", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51545723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51548161", "body": "@HaoK and I talked, and we agreed to try getting rid of the UserLoginInfo abstraction altogether. It will mean that AddLogin and RemoveLogin will take the necessary discrete parameter directly. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51548161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51549223", "body": "Actually I believe it would be ok to only return it from the GetLogins API. AddLogin and RemoveLogin can use discrete parameters (and create an instance of UserLoginInfo inside if necessary).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51549223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51549331", "body": "Besides #178 looks ok to me. :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51549331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52076475", "body": "The design seems to be well thought and formally correct, but I am afraid it can be a bit confusing for customers (it seems it is already a bit confusing to some of us). I think we should consider tweaking it to keep storing both properties when the flag is set to true. It seems to me that would go a long way smoothing the rough edges.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52076475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52085213", "body": ":shipit: but would like to chat about the change to loginInfo in AddLoginAsync and RemoveLoginAsync to be sure it is right.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52085213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52094472", "body": "The return value of `EnsureCreated()` indicates whether the database or tables were created (we currently don't have actual doc comments on the API but we have a TODO comment on this). As the name tries to convey, the method won't try to create the database and tables if the database and tables already exist. \n\nIn the template code we don't pay attention to the return value, and the _created static flag is just an optimization to avoid calling EnsureCreated on every request (which would be undesirable because it would cause extra database roundtrips per request) and to call it only once after the application starts and the first context is created.\n\nAnyway we don't want to have this code in the template and we are building a completely different solution based on Migrations which avoids ever automatically creating the database on behalf of the user. See https://github.com/aspnet/EntityFramework/pull/524/.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52094472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52094804", "body": "If we were planning to keep this solution for the long term I agree the _created name isn't clear. Something like _ensureCreatedInvoked would be better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52094804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52099726", "body": "It sounds right.\n\nSent from my Windows Phone\n\n---\n\nFrom: Haomailto:notifications@github.com\nSent: \u00fd8/\u00fd13/\u00fd2014 12:33\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Revisit UseUsernameAsEmail scenarios (#182)\n\nJust to be clear, the proposed additional behavior will basically be blasting username into email as part of every update when the flag is true.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/issues/182#issuecomment-52098607.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52099726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52268807", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52268807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52709386", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52709386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54862575", "body": "On the other hand having to recreate databases on each test run can be slow. There is a compromise between speed and robustness here. Having to delete the databases should be a rare occurrence.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54862575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54863139", "body": "Let me know how this affects the time it takes to run all the tests.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/54863139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55629357", "body": "And this is temporary until we remove the requirement to provide that constructor in EF.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55629357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55669810", "body": "I was thinking about this a bit more and I think @HaoK is right that removing the normalized properties from the POCOs and using shadow properties for the EF store would make it harder for other implementations that don't have shadow state. The key is that the normalizer is a pluggable service written in C# and we can't assume we can compute the normalization on the store, so a computed index won't cut it. Same reasoning we did last time, it is only hard to remember :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55669810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55983687", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55983687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56081901", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56081901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57564280", "body": "Using abstract contracts (i.e. interfaces) to register dependencies may have some advantages but I don't think we are currently doing it consistently across the board, e.g. I believe AddEntityFramework() puts types in the container that are not interfaces or abstract base classes, let alone application code. I think this is a point we should debate first and when we come up with guidance we should apply it consistently. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57564280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57870489", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/57870489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/58428803", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/58428803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59450304", "body": "Shouldn't we keep the item open for the remaining post-beta work?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59450304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59453308", "body": "Cool!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59453308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/6654049", "body": "Isn't this more of an exception message that would halt the application rather than a text we display in the page? I think we should only do this for the later, but I see some things in this list that to me look like they are exception messages.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654056", "body": "I would prefer to have a separate virtual method for each error message we want to replace instead of creating a separate enum.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6654056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656507", "body": "Hao and I met today and discussed a different approach. I would like him to try that without committing. I think it can be a useful input to that discussion.\n\nSent from my Windows Phone\n\n---\n\nFrom: Eilon Liptonmailto:notifications@github.com\nSent: \u00fd6/\u00fd12/\u00fd2014 18:42\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Initial resource manager changes (92b721f)\n\nThere's a much bigger feature here that we will likely want to support across all of vNext. Can we skip doing this now until we can discuss more broadly? MVC needs this as well, and we don't even have any story at all for how app developers will localize their apps.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/commit/92b721fab6ecca2995bee0bfaaddbd636f5eb1a9#commitcomment-6656411.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656562", "body": "I am not sure what we are cooking is what you have in mind, but I don't I understand what you you have in mind :)\n\nSent from my Windows Phone\n\n---\n\nFrom: Eilon Liptonmailto:notifications@github.com\nSent: \u00fd6/\u00fd12/\u00fd2014 19:04\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Initial resource manager changes (92b721f)\n\nYeah I'd love to see what we can come up with. I think a programmatic approach seems rather complex relative to the simplicity of the task at hand. Having a more conventional approach based more directly on resources could be both easier to implement as well as easier for users to work with.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/commit/92b721fab6ecca2995bee0bfaaddbd636f5eb1a9#commitcomment-6656546.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6656562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664389", "body": "This is where I am not sure we are talking about the same thing... The main problem we need to address for Identity is not localization of all our resources but customization of the messages shown in the UI. Not saying that the localization problem doesn't exist or that there can't be an overlap in the solution but if we optimize for simple customization of UI messages for a framework such as Identity we can define the problem very well, and most likely a programmatic solution aligns better with everything we are doing regarding extensibility and services/DI.\n\nAt this point I think it would be better to chat to decide whether we need a meeting.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/6664389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/8092501", "body": "@SonjaKhan this is where I mentioned we added EF's NullLoggerFactory to Identity tests. We should fix when the class get's moved to Logging.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8092501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/8203822", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8203822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10500442", "body": "It would be good to leave something we can track about this, e.g. a TODO comment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10500442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10779729", "body": "Nit: some of the non-essential changes in this PR make it hard to review. Next time please consider splitting :smile:   \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/10779729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11181809", "body": "We should be aware that having this on a method of an interface will have limited effects, e.g.: \n- For someone consuming the an instance typed as the interface, it will look like an optional parameter. \n- Also, when we ask the IDE to implement the interface it will conveniently copy the default value into our method\n- However, this does not force an implementation of the interface to have the parameter as optional nor to have the same default value\n\nGive that, if this interface is not generally consumed or implemented by user code directly it could possibly be simpler to just leave the cancellation token as non-optional.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11181809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11181892", "body": "On the other hand, if the interface is commonly implemented or consumed by user code I have no reservations on leaving it as is. In either case I don't feel very strongly about it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11181892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182185", "body": "Is there a compelling reason not to add cancellationToken.ThrowIfCancellationRequested() at the top of these methods? It would give you an excuse to write new tests :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182236", "body": "Sounds like we shouldn't need to add these. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11182236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11183672", "body": "I am fine with this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11183672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11183941", "body": "Sounds reasonable but I am not sure what the conclusion is :smile:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11183941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11183971", "body": "Got it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11183971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11186456", "body": "Ok, let's go with that and see what we learn.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11186456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11271412", "body": "I am not sure this would be right. The Entity<TEntity> call is not only a way to \"select into a type that implements the interface\" but it also informs the model builder that TEntity is an entity type. If we make IUser<TKey> the entity type (we might enable that) then all the other custom properties that exist in TEntity that are not defined in IUser<TKey> would be ignored, or EF would consider that there are two types in an inheritance hierarchy.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11271412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272599", "body": "I think because we have not identified in EF any scenario in which Delete would cause any I/O. I would just remove this comment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272673", "body": "Is there an overload that takes a CancellationToken?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272723", "body": "Why doesn't this one take a CancellationToken?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272742", "body": "Why do we need this one to be async?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272904", "body": "Is there an async version of this? I am almost certain we have an extension method for it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272945", "body": "Idem.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273018", "body": "Can we issue separate queries for the three other things that we used to Include? It might require some expression stitching to build the predicates for the other guys.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273079", "body": "Can we start using the [NotNull] attribute? No need to use the Check.NotNull() helper from EF, but we are planning to leverage Roslyn to write the null checks automatically for the attribute.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273204", "body": "Re-enabling GetUserAggregate[Anync] would be ideal, but in the meanwhile, can we use the async version of the query methods?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273594", "body": "Nah, I just realized the implementation of those is still mostly empty. Ignore these for now. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273613", "body": "Or even better, add a TODO.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273785", "body": "ToListAsync with CancellationToken (I believe that one actually works :smile:)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273826", "body": "//TODO to change to FirstOrDefaultAsync(Exp<>, CancellationToken)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11273826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276753", "body": "Let's implement the decision to bring back the Async suffix. As far as I am concerned you don't need to do it in this commit.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11276753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272408", "body": "I keep learning about Identity... You probably know this already but random (i.e. client-generated GUIDs) cause SQL clustered indexes to be very inefficient (for an example I just found in bing, see http://www.sqlskills.com/blogs/paul/clustered-or-nonclustered-index-on-a-random-guid/) and is commonly considered a bad practice. One of the common solutions is to use store-generated GUIDs with newsequentialid() but that is not available in SQL Azure (and the fact that you need to convert it to string may make it more complicated). In SQL Azure the recommended practice AFAIK is to make your PK not be a clustered index and use a simpler surrogate key (e.g. an int identity) as the clustered index (SQL Azure does not support tables without clustered indexes). I believe it would much better to just switch our default to use an Integer.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11272408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11277096", "body": "What I mean is that it should be ok to make it a non-async method and just return the Task from Context.SaveChangesAsync() without an await, or if AutoSaveChanges isn't set, just a Task.FromResult(0).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11277096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11277159", "body": "Sounds good.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11277159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11466912", "body": "Is the rename temporary until we consolidate?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11466912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11466935", "body": "Got what you are doing. Sounds good. I just hope we can get rid of these :smile:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11466935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11467529", "body": "Why is this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11467529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11467539", "body": "Why is this changed?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11467539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11467548", "body": "Limitation of EF?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11467548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11467697", "body": "I assume in the in-memory store it doesn't matter because it will never be production ready, but I am curious why you need to clone the object... Do we support custom IdentityUserClaims?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11467697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11551705", "body": "I see. Consider adding a TODO wherever you had to do this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11551705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11794649", "body": "I think this shouldn't be here but it should be defined somewhere else as an extension method over ServiceCollection, with an overload that takes an `Action<UserManagerBuilder<TUser>>`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11794649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11794837", "body": "Moreover, it could be `public static ServiceCollection AddIdentity<TUser>(this ServiceCollection services, Action<UserManagerBuilder<TUser>> builderAction)`, taking the TUser generic argument at the very start. Do we need to configure things around TRole as well?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11794837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11823362", "body": "I don't see much value in having the separate at this level, but we can chat in person in case I am missing something.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11823362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11825997", "body": "This should return the services collection instead of the identity builder, so that you can chain it with AddMvc(), AddEntityFramework(), etc.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11825997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11826246", "body": "Also, to the issue with forcing everyone to think about TRole even if they are not using it, could we have an overload of this that only takes TUser and defaults TRole to the POCO IdentityRole or whatever is more appropriate? An alternative would be to have two different iIdentity builder classes, e.g. `IdentityBuilder<TUser>` and `IdentityBuilderWithRole<TUser, TRole>: IdentityBuilder<TUser>` that the two overloads would use.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11826246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11832707", "body": "A few of us talked about this today. Seems to be a genuine case of service - configuration duality :wink: Stretching it a bit towards the service side, although we have this simple implementation nothing prevents replacing it with something more complicated... On the other hand this is clearly just a fancy code-based way to pass some (presumably application-wide) configuration settings to the UserManager by having DI resolve the instance. There might be a better general pattern for doing this and we are open to suggestions. One attribute I personally feel is missing on this one is that you cannot easily override the default of just one of the properties without knowing and repeating the values for the other ones. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11832707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11968605", "body": "Can you start adding the [NotNull] attributes in new code? Not blocking on this though.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11968605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969154", "body": "Are these still default values? Otherwise why would we need the properties on this class to be settable?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969242", "body": "Would it make sense to make this one injectable as well?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969377", "body": "Could make the constant static?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969662", "body": "I just wonder if keeping \"Default\" on the name would help understand what the options are about, e.g. for things that you only change in the Options they are not \"defaults\" but something for which the IdentityOptions just provides an initial value for a property that you can later change on a case by case basis is a \"default\".\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969742", "body": "I think you need to make the parameter an accessor for it to be injectable.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969994", "body": "I believe singleton is probably right, but what needs to be registered here are IOptionsSetup<IdentityOptions>, and we need help from @loudej and @davidfowl to figure out how to register ordered collections of those.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11969994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12308332", "body": "It seems that if DI cannot resolve the dependencies this will at most be a runtime exception (as opposed to a compiler error) either way, so I am not sure what value such pattern provides. @lodejard, @davidfowl  what is your take on this?\n\nFWIW, I don't like the fact that we are taking the IServiceProvider but we probably need it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12308332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12412574", "body": "Eh? Do we have this hardcoded? :frowning:  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12412574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12412500", "body": "@anpete should this work? Otherwise what do we need to do?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12412500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12417490", "body": "I see. The best thing here would be to capture the connection strings configuration into an 'options' object that can be passed through an accessor in the constructor of the DbContext. Unfortunately I cannot think of any simplified version of that which would be substantially better than hardcoding it as you have it right now. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12417490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12712411", "body": "Rename to something that is more Identity-specific.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12712411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12712619", "body": "I remember we discussed this but I don't remember the conclusion. In general I don't think we should have hardcoded this. We should later also discuss how we separate the EF stuff from the SQL Server specific stuff. Currently we are assuming SQL Server and that doesn't quite work.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12712619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13165417", "body": "Nit: a EF specific name for this sponsor class would be better because it would potentially avoid collisions. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13165417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13165457", "body": "AddEntityFramework like the one a few lines below?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13165457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13165511", "body": "Curious, is there a common pattern we need to follow to avoid throwing NREs in code like this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13165511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13372250", "body": "Not sure the extension methods should be in this namespace. We said previously we would put them in the target namespace of the object the extension methods apply to, and I think we had it in DependencyInjection for that reason in one of our previous attempts. Anyway, the whole class needs much work, so I am ok with leaving it like this for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13372250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14027222", "body": "Is stylecop adding a lot of value right now? Last time I heard we were thinking about using it and adopting common rules across all repos. Are these the same rules as in MVC? Otherwise I would probably hold off of adding it or I would prefer to have a bug to track discussing it with the engineering team. @Eilon, any thoughts on this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14027222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14027779", "body": "Actually this should stay as a TODO or the namespace should change to Microsoft.Framework.DependencyInjection. In other places we are doing it like that, e.g. SignalR and EF.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14027779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14027922", "body": "I notice this is `<User, IdentityRole>` and not `<IdentityUser, IdentityRole>` or `<User, Role>`. Is this temporary? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14027922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14028431", "body": "Same as before, why the base user class is called User and the base role class is IdentityRole? Should probably be consistent.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14028431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14028618", "body": "We should probably have a bug or a TODO tracking rationalizing these constructors when EF does, e.g. this should probably take a IOptionsSetup<DbContextOptions> instead of DbContextOptions directly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14028618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14028813", "body": "Thinking about it more, these constructors on the base DbContext type are not necessarily there for DI. There is probably always going to be one that takes DbContextOptions directly on DbContext for usage in direct user code. The question is, should we have that on IdentityContext?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14028813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14028915", "body": "Was this class called IdentityDbContext in 2.0? We rename it back to that unless we have strong reason. Same for the generic version. Not necessarily as part of this change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14028915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14030656", "body": "Please remember to rename the namespace when you re-base with the package/assembly renames.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14030656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14031937", "body": "Aren't we removing TKeys for now?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14031937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14032021", "body": "Next time please separate formatting changes in their own PR :sweat_smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14032021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14032074", "body": "Sounds great.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14032074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036431", "body": "We decided some time ago we would try defining our extension methods on the namespace of the target type, as opposed to the normal framework namespace of the sponsor class. That way where this is used, e.g. in the start up class you only need to bring the DI namespace and that will put all the extension methods that apply to DI in scope, from all the dependencies declared from the application.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14036431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14793995", "body": "Why use the same class name that EF uses? This one should be something else.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14793995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14794651", "body": "Can you remind me why we need this overload? At first glance it seems that with it you can do the same inside the parenthesis (with a nested closure) that you could do after the parenthesis (with method chaining). \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14794651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14794725", "body": "We should socialize and proactively ask for feedback on this name and on the thought process that lead us to it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14794725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14795430", "body": "Have a TODO here saying that we should remove all the hacks when proper relationship configuration APIs are added to the model builder?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14795430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14795897", "body": "Is this a child of the bigger IdentityOptions class? Sorry if the answer is somewhere in the PR already... \nPlease ignore. Found it below.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14795897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14796010", "body": "Also, just wondering if this is the best name, e.g. why not IdentityClaimsOptions :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14796010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14796688", "body": "Passing options objects like this seems a bit strange. Makes me wonder if someone else is responsible from resolving the IOptionsAccessor<IdentityOptions> so that the \"ClaimsIdentityOptions\" instance can be passed here or if the constructor of the concrete IClaimsIdentityFactory should get through injection.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14796688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14800659", "body": "Again, we shouldn't be using the same sponsor class name as EF.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14800659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14800688", "body": "Weren't we going to remove this from product code?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14800688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14805257", "body": "Got it. Sorry I missed that.\n\nSent from my Windows Phone\n\n---\n\nFrom: Haomailto:notifications@github.com\nSent: \u00fd7/\u00fd10/\u00fd2014 20:00\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Cleanup work (#144)\n\nIn test/Microsoft.AspNet.Identity.EntityFramework.InMemory.Test/EntityInMemoryServiceCollectionExtensions.cs:\n\n> ```\n>  {\n> ```\n> -        public static IdentityBuilder<TUser, TRole> AddEntityFrameworkInMemory<TUser, TRole, TDbContext>(this IdentityBuilder<TUser, TRole> builder)\n> -        public static IdentityBuilder<TUser, TRole> AddIdentityInMemory<TUser, TRole, TDbContext>(this ServiceCollection services)\n\nThis code is in a test project I just moved it there as is. On Jul 10, 2014, at 4:56 PM, \"Diego Vega\" <notifications@github.com<mailto:notifications@github.com>> wrote: In test/Microsoft.AspNet.Identity.EntityFramework.InMemory.Test/EntityInMemoryServiceCollectionExtensions.cs:\n{ - public static IdentityBuilder<TUser, TRole> AddEntityFrameworkInMemory<TUser, TRole, TDbContext>(this IdentityBuilder<TUser, TRole> builder) + public static IdentityBuilder<TUser, TRole> AddIdentityInMemory<TUser, TRole, TDbContext>(this ServiceCollection services)\nWeren't we going to remove this from product code? - Reply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/144/files#r14800688.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/144/files#r14804967.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14805257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15248572", "body": "Hard to parse.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15248572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15249881", "body": "nit: SMS?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15249881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15498780", "body": "I think we should call String.Normalize() as well. Is it always available?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15498780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15499070", "body": "Consider making this public so that customers that already have a UserManager instance and use it to convert a user name (e.g. coming from user input) into something they can pass to our APIs.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15499070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15499142", "body": "Consider making this public so that customers writing custom code can more easily use the configured normalizer service to fixup the names in the user instance before saving it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15499142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15968518", "body": "From what I understand currently this will never be null if the user manager is instantiated using DI, i.e. either the service is resolved and passed of the constructor or we will get an exception from DI. If we want to make it optional, we have some options:\n1. Have the constructor of UserManager take an IEnumerable<IUserNameNormalizer>\n2. Create some sort of NullUserNameNormalizer that can be registered in DI instead of the standard one\n3. Have a flag in Options that controls whether the default IUserNameNormalizer does something. \n\nI think I prefer option 1.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15968518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15968729", "body": "I see, but they need to know exactly when to do that. Feels like a very ad-hoc pattern for configuring the behavior that adds to the standard ones in Options and DI.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15968729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15969739", "body": "Sounds fine, then let's make the property read-only and stop checking for null here :smile:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15969739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15970419", "body": "UpdateUserNameAsync? I am somewhat ok with not doing it if we are currently only using the Async suffix for public API :smile:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15970419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15970606", "body": "You don't have to add it, but I cannot promise I won't ask for it again :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15970606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15972109", "body": "Nit: Having `new CancellationToken()` looks a bit funny to me because it is value type. It didn't occur to me that this pattern would work :) Can we use `CancellationToken cancellationToken = default(CancellationToken)` instead? We are doing that in most other places.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15972109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15971366", "body": "Can't this be enabled now?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/15971366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/16192295", "body": "Do you feel we went too far with this one?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/16192295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17704796", "body": "Can we call this UserNameValidationRegex? My motivation is to try to make it as easy as possible to grok, because while UserNameRegex is an order of magnitude more powerful it is also an order of magnitude harder to understand than AllowOnlyAlphanumericNames for someone who just wants to switch the behavior between one and the other. (I understand from the code below that you can set this to null if you just want to allow everything).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17704796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17704833", "body": "Do we know the runtime/memory impact?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17704833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17745083", "body": "Sounds good!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/17745083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422110", "body": "You have this on the same branch you did primary constructors removal? Do you need to rebase?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422280", "body": "Ah, maybe because we don't build them by default?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422345", "body": "@loudej We are renaming this method as our conversation with @HaoK Do you think we should rename the IOptionsSetup<> interface as well? To what?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/18422345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19194931", "body": "@pranavkm heads up that this change is also here, but is slightly different. I prefer to make it private as you have it in your PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19194931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20332988", "body": "For cases like this in which the await is on the tail of the method it is more efficient and cleaner remove the async keyword from the method and just do a return at the end.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20332988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20333062", "body": "Same case as before. GetClaimsAsync doesn't need to be marked as \"async\".\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20333062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20339825", "body": "You are right. We use await to unwrap the task and rewrap it as a `Task<IList<>>`. Whish there was a better way.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20339825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21282481", "body": "> ... and verify the query\n\nIf the comparisons are not included in the WHERE clause we should talk to @anpete. Since we are currently evaluating the clause again in-memory it sounds reasonable that we could support translating `Equals()` with some values of `StringComparison` to predicates in the WHERE clause loosely as long as the rows returned from the database are a superset of the matching rows with in-memory semantics.\n\nIf this gets scoped out of EF7 RTM we can always write the query explicitly the way we want it, e.g. with a simple `Equals()` (assuming that one does get translated to an equality predicate in the WHERE clause), then switching to in-memory with `AsEnumerable()`  and finally preforming the filtering using `Equals()` with the right StringComparison value. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21282481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357147", "body": "nit: do you need the parenthesis?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357254", "body": "Make the method async and return `await query.ToListAsync(cancellationToken)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357269", "body": "Return `await query.ToListAsync(cancellationToken)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357292", "body": "Use the overload of `FirstOrDefaultAsync()` that takes a `CancellationToken`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357336", "body": "Also, could you review this file and check that we are passing the `CancellationToken` on every EF query?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357416", "body": "nit: wouldn't it be (slightly) better to do the argument validation first?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357491", "body": "Do we still need our own `InMemoryStore` for the tests or could be just use the standard EF store that is in the product with the `InMemoryDbContext`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21357491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358518", "body": "Ok, no problem with keeping tge same pattern then.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21358518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21391060", "body": "Yes, it does have the same issue. That is why I said the method should be made async :smile: But besides, we should make sure all our EF queries are async.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21391060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21861276", "body": "I think this is same case a we saw before in which we need to await to do the cast, right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21861276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20910177", "body": "If you are not planning to use navigation properties anymore (which so far has been your choice :smile:), you should get rid of this comment and write three additional queries to explicitly load Claims, Logins and Roles related to the user. However you are starting with an `Expression<Func<TUser, bool>>` filter, and EF does not currently support navigation properties, so you will have to do some refactoring around this code or rewrite the expressions to express them in terms of key equality  :smile:\n\nOn the other hand, @anpete believes this query (e.g. the one you get if you uncomment the `Includes()`) is already supported by EF7, but there is a bug somewhere else in which we are not configuring the navigation properties correctly. \n\nGiven that I would recommend embracing navigation properties for the EF implementation of the store, at least for this part.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20910177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20910387", "body": "Do we have a bug for having a normalized role name (see the code above that does `r.Name.ToUpper() == roleName.ToUpper()`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20910387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20910433", "body": "Is adding the userRole row to the database enough to get the graph fixed up? If yes why comment these lines instead of removing them? If now, what do you propose to use instead of the navigation properties?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20910433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20910580", "body": "Similar to the change before this one... is the object graph correctly fixed up by just removing the userRole? If yes, why comment this code instead of removing it? If no, what do you propose we use instead of the navigation property?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20910580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20911046", "body": "Could you verify if EF7 + SQL Server is currently producing a good/efficient SQL query for this? We might need to consider other alternatives.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20911046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20911061", "body": "If it doesn't please file a bug.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20911061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20911096", "body": "Same as before: is the graph of objects in memory going to be correctly fixed up after this? Otherwise consider keeping the line.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20911096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20911099", "body": "Same.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20911099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22239543", "body": "Is there a good reason the service type and the restriction can't be on an interface? Can't remember if we came to a conclusion that would apply to this case...  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22239543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22239617", "body": "Is there a good reason the parameters are of type object instead of something more specific like string?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22239617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22239681", "body": "BTW, I don't feel strongly that it needs to be an interface. Just calling it out for the sake of consistency across the frameworks. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22239681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22239962", "body": "I am ok with checking this in but I would like to chat with you about this (and also the similar change with null options that I see a few lines above) as a general trend, i.e.:\n1. Is this going to be null only if DI wasn't correctly setup or is there a use case in which it will be null. \n2. If there is no use case then should the system really fall back to something we consider reasonable if things were not setup or is it more useful to let the user know that DI isn't correctly setup?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22239962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240446", "body": "Do we need the setter?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240679", "body": "Yeah, that makes sense to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240694", "body": "I do think it is better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22240694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "lodejard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41329836", "body": "Coincidentally, I was also looking into something last night that also needed some site options (for nuget restore). Here's a gist to compare - you might want to steal the the `OptionsAccessor<>`.\n\nhttps://gist.github.com/lodejard/9b8481271d24c19f45e5\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41329836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11970361", "body": "Yeah, inject `IOptionsAccessor<IdentityOptions>` and use accessor.Options where needed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11970361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11970845", "body": "`IdentityOptions` itself is a model, not a service, so wouldn't be registered\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/11970845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "victorhurdugaci": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41423299", "body": "Here is the DI bug that tracks constructor matching logic (related) https://github.com/aspnet/DependencyInjection/issues/69\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/41423299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42616199", "body": "This doesn't seem to be fixed. I still cannot create users/login in music store\n@suhasj can you check?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42616199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42616992", "body": "Try running k web, not Helios\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42616992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8547811", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8547811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/comments/8722042", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8722042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12292841", "body": "Why does it need the second and third arguments when it has access to the service provider? Why not just resolve them from there?\nAccepting both the container (service provider) and concrete dependencies sounds like a very strange pattern.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/12292841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rustd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42498579", "body": "@HaoK can you please take a look?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42498579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42892211", "body": "Should this be in Identity/ EF or MVC\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42892211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42991349", "body": "Closing this issue as it does not repro\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42991349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42991573", "body": "AccountLockout and TwoFactorAuth checks are defined in SignInManager which pulls in OWIN as well. Users should able to do AccountLockOut in Desktop/ Store and PhoneApps so we should split this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42991573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43292852", "body": "AddHttpSecurity is better and it also gels well the Microsoft.AspNet.Http*\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43292852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53113643", "body": "can't we change the hash used for the old passwords?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53113643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55663680", "body": "Use a Regex says @blowdart \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55663680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55663912", "body": "JWT is a well known standard. If you want your own token format then you can implement your own Auth Server and look up end points\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55663912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55664695", "body": "#188 We should rationalize where we are normalizing names and emails. Try using shadow copy.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55664695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55666108", "body": "True by default\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55666108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55666463", "body": "Samples only.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55666463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55666591", "body": "Each provider will have its own lifetime\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55666591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55666937", "body": "We are tracking a feature called Account activity where you would be able to see when the PIN was confirmed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55666937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55667122", "body": "I will open a bug in EF repo\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55667122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55668126", "body": "Show in documentation only\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/55668126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Praburaj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42616604", "body": "It worked for me yesterday. But now does the app even compile with the latest bits? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42616604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51235228", "body": "@HaoK @suhasj \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51235228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51496542", "body": "Wrong repository. This one should go to http://katanaproject.codeplex.com/. If you have any more questions open a bug in katana repository. \n\nA little bit of background:\nFor some reason Microsoft GraphApiEndpoint chose to return this email as the \"preferred\" one and all the MicrosoftAccount middleware does is processes the JSON payload returned and puts it in the ClaimsIdentity. Checkout this piece of code where it processes that. \n\nhttp://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin.Security.MicrosoftAccount/Provider/MicrosoftAccountAuthenticatedContext.cs\n\nThat said you can try to implement the `Authenticated` provider method in the Microsoft Account middleware to see if the additional emails you are looking for are also found in the JSON response. The JSON object returned will be in the context's User property. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51496542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53778025", "body": "This is resolved with the latest CoreCLR bits. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53778025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22217779", "body": "System namespaces at top.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22217779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22217793", "body": "system namespace at top? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22217793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22217877", "body": "as a side note: MusicStore will also need this change. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22217877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22221085", "body": "And presumably templates also need change. @balachir\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/22221085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "suhasj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42616779", "body": "I am able to compile with the latest bits. but getting error for missing System.Diagnostics.TraceSource\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/42616779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43712226", "body": "This is the friendly name for the Login Provider for OAuth for example, Windows Live, Facebook etc\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43712226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45148669", "body": "This should not hang of Identity since it is related to external logins and can be multiple of them. This friendly name is needed for each of them may be for example displaying them\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45148669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48511615", "body": "A simple example is a console application where we need to instantiate usermanager without setting up DI. I was working on populating a database or even running a one time migration code and creating a usermanager object felt tedious.\n\n In 2.0 instantiating usermanager was as simple as\n\n```\nvar usermanager = new UserManager<User>(new UserStore<User>(new DbContext()));   \n```\n\nWith current stack, the constructor takes more dependencies which makes coding a little more work than needed. I would agree that this doesn't qualify for the average case scenario but this is one experience we have weakened from 2.0. Even in the unit test, if we look at the MockHelpers class, setting up UserManager is through ServiceCollection. Should that be the case all the time ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/48511615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51988474", "body": "Discussed this with @divega and we should think about Scenario 1 since it looks fairly common \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51988474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51992053", "body": "Yeah when the flag is set to false from true, any FindByEmail will throw null exception which would work fine with the flag set to true. Would the developer not use this method when the flag is set to true, that i don't know about.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51992053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52098253", "body": "Keeps username and email in sync and persisted in the db so sounds fine.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52098253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53117457", "body": "SuccessRehashNeeded ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/53117457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59133305", "body": "https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNet.Identity/BuilderExtensions.cs \n\nTypo. We are adding it twice. @HaoK is fixing it. Good catch !\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59133305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13893325", "body": "why can't we do role.Claims. Why do we need to use the property instead ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13893325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13893446", "body": "Can this be fixed in this PR \nhttps://github.com/aspnet/Identity/issues/97 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/13893446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14035134", "body": "Can we do away with the new class ? Why can't we use it as IdentityUser<string> ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/14035134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20337885", "body": "@HaoK This had a redundant async keyword so I fixed this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20337885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20337932", "body": "@divega In this scenario when the return type is Task<IList<foo>>, directly returning the Linq query throws an error saying cannot convert Task<List<foo>> to Task<IList<foo>>. Hence had to do this workaround\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/20337932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21207392", "body": "Should we also check if Count() is greater than zero else throw ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21207392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21256177", "body": "Sure. I thought it would be at par with the earlier experience that if no validator is passed we throw an error. If are choosing to be non blocking that is fine too\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21256177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21204954", "body": "In cases where username != email, is it necessary to update the internal stamp ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21204954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21337737", "body": "with profiler I was able to see that having the `StringComparison` in the query doesn't issue `Where` in the sql queries generated. I'll talk to @anpete regarding this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21337737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21389688", "body": "I had deleted this file.. i did not rebase correctly and screwed parts of my PR :( Will clean up\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21389688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21390579", "body": "This has the same issue with the previous PR where we cannot convert `List<TUser>` to `IList<TUser>` hence this approach. I believe we won't change the return type from `IList` to `List` right ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21390579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21393640", "body": "Ok i got it. I was able to add the async with the cancellation token\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21393640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21394009", "body": "I'll make a pass and make the changes to take in a cancellation token\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21394009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21397894", "body": "Let me know if I need to add more tests here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21397894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21867641", "body": "The cast is not needed so yeah I have kept the code as is\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/21867641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gblmarquez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43270708", "body": "@Eilon OK. I'll keep up to date to contribute on this feature, thanks! I already implemented and using on production a version of Identity with Azure Table Storage. It's so dame fast!\n\n@tugberkugurlu We'll need to check if the SDK will be compliante, thanks for sharing your thoughts.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43270708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alexsandro-xpt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43704749", "body": "The friendly name as you mentioned is from User.Identity.GetUserName() ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43704749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43758320", "body": "I guess, to do that, is only extend method for IIdentity like User.Identity.GetFriendlyName() to get a claim that represent a friendly name.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/43758320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44531701", "body": "Is this really necessary? Actually I do all over in ClaimsIdentityFactory.\n\nSee: https://gist.github.com/alexsandro-xpt/cbf2de56d95ad638df01\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/44531701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SlavaBobik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45108791", "body": "@Yi-Shiuan  why finding user by name is wrong?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45108791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Yi-Shiuan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45170446", "body": "Login page is use email (I know it can change, but usually use email to account) identification user, so I hope find user by email\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45170446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lucamorelli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45716769", "body": "thanks, this reduces a lot the errors, remain those:\nC:\\Sorgenti\\SecondoK\\SecondoK\\Models\\IdentityModels.cs(18,71): error CS0246: The type or namespace name 'IOptionsAccessor<DbContextOptions>' could not be found (are you missing a using directive or an assembly reference?)\nC:\\Sorgenti\\SecondoK\\SecondoK\\Controllers\\AccountController.cs(81,80): error CS1739: The best overload for 'SignInAsync'  does not have a parameter named 'rememberBrowser'\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/45716769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Li-Yanzhi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46110105", "body": "After I remove the following code from ApplicationDbContext onModelCreating method:\n\n```\n    modelBuilder.Entity<ApplicationUser>().HasMany<IdentityUserRole>((ApplicationUser u) => u.Roles);\n    modelBuilder.Entity<IdentityUserRole>().HasKey((IdentityUserRole r) =>\n            new { UserId = r.UserId, RoleId = r.RoleId }).ToTable(\"AspNetUserRoles\");\n```\n\nAfter re-inited migration database,  AspNetUserRoles table only contain two fields of UserId and RoleId,  then UserManager.RemoveFromRole work as expected.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/46110105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zam6ak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49238619", "body": "I just saw this issue after having [some trouble myself](https://aspnetidentity.codeplex.com/workitem/2318#CommentContainer) w/ console app...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/49238619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "michaelfrye": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51948604", "body": "I'm having this issue too and I cannot seem to recreate the database with only two fields. Here's a screenshot\n![fsdfsdfsf](https://cloud.githubusercontent.com/assets/1864357/3894697/0d67a92e-2247-11e4-8c22-df9e3dd28139.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/51948604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "craigsmitham": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52986001", "body": "@HaoK looking at latest sources compared to current release it seems support for generic primary keys have been dropped. Not too troubled by this, just wondering if it's true. Are generic primary keys part of Identity for vnext? I'm working on building some complementary libraries and would like to follow the same approach as Identity.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52986001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52988267", "body": "Excellent. Makes perfect sense. I can see the headache it could have caused supporting it in the UserManager - plus it really just doesn't make sense. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/52988267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "anfomin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56986614", "body": "The last overload still extends class `ServiceCollection`:\n\n``` C#\npublic static IdentityBuilder<TUser, TRole> AddIdentitySqlServer<TContext, TUser, TRole, TKey>(this ServiceCollection services)\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/56986614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Tratcher": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59133165", "body": "Initial theory: there are two CookieAuthMiddleware with the same configuration.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/issues/comments/59133165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "anpete": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/5300881", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/5300881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "SonjaKhan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8100162", "body": "@divega thanks for pointing this out!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8100162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "idrayv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8675720", "body": "Did it worked in the past? \u043e_0\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8675720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "giggio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/8941959", "body": "This is confusing. I was getting an ArgumentNullException on the `optionAccessor`, and could not understand why, as it was not null. I had to read the source to understand what was going on.\nPlease don't throw an ArgumentNullException if the problem is that a property in the argument is null, not the argument itself, throw something else, maybe an ArgumentException.\nThis anti-pattern is happening in several places in this class (maybe in this project).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/8941959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "MisterFantastic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/9803318", "body": "Was there any code changes related to these namespace additions ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/9803318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wspnet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/15080227", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/15080227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mhannaford-oncore": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/21663885", "body": "@HaoK can you confirm what release this went into? I am using Identity version 1.1.1 and it doesn't appear to be fixed there. I'm still somewhat new to github but as I looked around in what look like the 1.1.0 and 1.1.1 release branches I don't see your fix there. Thank you!", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/21663885/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "samuelhmorgan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/comments/22700620", "body": "What about the case where IdentityUser is  IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin, TUserToken> ?\r\nThis will throw an exception in the line below because FindGenericBaseType will return null.. ", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/comments/22700620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lajones": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19764521", "body": "You should probably rename this to \"IdentityRedisTests-redis-server\" or something similar.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19764521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19764807", "body": "We've had problems with multithreading where the tests share a context like this - so we're not recommending this pattern any more. DbContext is not thread-safe. If you have a look at e.g. the Redis FunctionalTests SimpleTest.cs file we now recreate the context for each test. E.g.:\n\nusing (var context = CreateContext(...))\n{\n    // rest of test\n}\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19764807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19765053", "body": "Nit: Are you planning on uncommenting this line some time later?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19765053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19767906", "body": "Yes please - unless your scenario is covered by the RedisSequenceValueGenerator class that already exists?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19767906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19768892", "body": "Nope. The service should be added whenever you call UseRedis(). If you like there are some examples of that service being used RedisSequenceValuegeneratorTest.cs in the Redis Tests (not the Functional Tests, the other project).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Identity/pulls/comments/19768892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}