{"_default": {"1": {"ShadowDancer": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1955", "title": "Razor view becomes stuck randomly", "body": "Sometimes a view in my asp.net core 1.4 app breaks with this message inside razor compilation code:\r\n`Unexpected error writing debug information -- 'Windows PDB writer is not available -- could not find Microsoft.DiaSymReader.Native.amd64.dll'`\r\n\r\nSuch a view is dead, and I need to manually restart application to make it work again. Other views are rendered correctly, but that one is stuck. It occurs randomly (when the view is recompiled?). Fix was to include Microsoft.DiaSymReader.Native nuget package.\r\n\r\nI am using self-contained deployment (I have <RuntimeIdentifier>win7-x64</RuntimeIdentifier> in my .csproj), and assembly (DiaSymReader) is not generated to output (unless added by nuget).\r\nI can find assembly in %programfiles%/dotnet directory.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajaybhargavb": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1954", "title": "Build server: Logging cleanup", "body": "Meta issue - #1921 \r\n\r\nCurrently we log all over the place with different types of loggers (MSBuild logging, CompilerServerLogger). We need to clean it up and make it better. ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1953", "title": "Build server: Resolve how many/what tools we have", "body": "Meta issue - #1921\r\n\r\nCurrently we duplicate our tools for build server and cli tools. We need to unify them.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1943", "title": "Build server: Get tag helper discovery and code generation working end to end", "body": "Meta issue - https://github.com/aspnet/Razor/issues/1921\r\n\r\nWe want it to be off by default for now.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1464", "title": "Having breakpoints in cshtml files that are not open in the editor breaks debugging", "body": "Steps to reproduce:\r\n- Create a new Web application\r\n- Add a breakpoint in `Index.cshtml`\r\n![image](https://user-images.githubusercontent.com/1579269/27502798-9c4785d4-582b-11e7-969b-2aa2f4bcf016.png)\r\n- Close the file in the editor\r\n- Press F5 to run the app\r\n- Press F5 again when the breakpoint is hit\r\n![image](https://user-images.githubusercontent.com/1579269/27502830-e852308c-582b-11e7-8fc7-220c70d9c12e.png)\r\n\r\nI think this is probably a tooling issue but I am not sure.\r\n\r\nVS version: 26621.2.d15rel", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1202", "title": "Need to optimize HtmlContentIRNode code generation", "body": "From https://github.com/aspnet/Razor/pull/1198#discussion_r110717465 and https://github.com/aspnet/Razor/pull/1198#discussion_r110743500\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1150", "title": "Figure out line pragma generation behavior for CSharpStatementIRNode", "body": "The current behavior is that we generate line pragma for the entire node and not for each of it's children. This is fine as long as the statement is single line or contiguous. But when they are separated by some thing else like an ExtensionIRNode, we might need to generate line pragmas separately. We need to think about what line pragma generation behavior we want for this case.\r\n\r\n@NTaylorMullen @rynowak ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1101", "title": "Refactor our TagHelperDescriptor tests to test diagnostics separately", "body": "From https://github.com/aspnet/Razor/pull/1100#discussion_r107298336\r\n\r\nSince we validate as part of Build(), the diagnostics are same for both the expected and actual descriptors which makes the tests pass even when we introduce new diagnostics errors. This make our tests less effective.\r\n\r\nWe could have a switch in our builders to turn off validation as part of build.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1082", "title": "Refactor RequiredAttributeParser and decouple it from the builder", "body": "From https://github.com/aspnet/Razor/pull/1054#discussion_r106078442\r\n\r\n@rynowak @NTaylorMullen ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/eb107092d9aa0304ed33b86b42d55464193332a7", "message": "Upgrade dependencies"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d238c0dcfc742b5d8128aae806fc401c649016d3", "message": "Some pre-requisites for for Razor build server"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b68d9cf01fcc2ab39bedfb1d167e455de3f2efa9", "message": "Always deserialize to DefaultRazorDiagnostic"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/98e74b9a69b7b277fc9a78c068de967185104d69", "message": "Added TagHelperSerializationBenchmark"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/988d1b3c347b0f7dde0f502c000c4740d43037c8", "message": "Use common BDN runner and config"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/52a06e93bcbf1a6c7449d97646523da0f9208d3e", "message": "Added test for DefaultRazorSyntaxFactsService"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/34fe4099c2cded613e3bb5e67621af8877e8e4c2", "message": "Removed LegacyRazorDiagnostic and RazorError"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/439c742dece5e8a4376eaab59f0316b444d84668", "message": "Removed LegacyResources.resx"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/80af17fc4b134b8bf30ea151b3bbda3adefd9a93", "message": "Moved TagHelperParseTreeRewriter out of LegacyRazorDiagnostic"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d419566534ac2ec8f7b261349e6bf56e77de0c44", "message": "Revert \"Revert \"Include LineIndex and CharacterIndex when comparing SourceLocation\"\"\n\nThis reverts commit bace4a381808072f143f785fea165797d642e75c."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b3be0ebb91791b2679a0267a33c4c043fd200b3a", "message": "Moved TokenizerBackerParser out of LegacyRazorDiagnostic"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/7d4fb5dcab2f60197b1f69da736bdbfbee1733f1", "message": "Moved HtmlMarkupParser out of LegacyRazorDiagnostic"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bace4a381808072f143f785fea165797d642e75c", "message": "Revert \"Include LineIndex and CharacterIndex when comparing SourceLocation\"\n\nThis reverts commit 0e20ea5178049d60656bc85472a381097be9c5bb."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/0e20ea5178049d60656bc85472a381097be9c5bb", "message": "Include LineIndex and CharacterIndex when comparing SourceLocation"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/808f539297646ba69dda4356f3d1757c8ac502a9", "message": "Moved CSharpCodeParser out of LegacyRazorDiagnostic"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/18ce7f07ac78377b2674ad4a2714f0315d6fb381", "message": "Moved CSharpTokenizer errors out of legacy diagnostic"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/05e1271b3c8a8f2d9f2138e1855cb3ef1375b51c", "message": "Goodbye Slim :("}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8fcb04634570c07d50346e93ddd51736a2e126a2", "message": "Moved the test infrastructure to depend on RazorDiagnostic instead of RazorError"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/085838e83a8ab04596760ac57ba717f0e09114f8", "message": "Make ErrorSink and Tokenizer depend on RazorDiagnostic instead of RazorError"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6bbd063e263ac2bf79fcfa1240cceffeb0c4ca71", "message": "Use DefaultRazorDiagnostic in DefaultDirectiveSyntaxTreePass"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/7654f73c545cd86431acfa59c83c4a2ee2d146c2", "message": "Assert foreground thread before dispatching events"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f208b27bd73c5e3944d4395b5bfd1e656bc65c0a", "message": "Moved TextBufferProjectService from Mef to ILanguageService"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6b8223b5442a13c11bbc83aaabbb9bf6c53bf5c8", "message": "Moved RazorTextBufferProvider from Mef to ILanguageService"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/fb68a31ad5ec921935f6eca12eaa151f03f1d064", "message": "Moved RazorCodeDocumentProvider from Mef to ILanguageService"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f708c463d9a7603786a8e5d670dd9901e48c0a74", "message": "Export RazorDocumentManager using roslyn services"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6be80e7bede5f9a8e29690f29b96e577ece398b3", "message": "Use windows VS error reporter instead of the no-op default"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8abbaa46ccc28abf30d39f841a73a69df9b9a3bc", "message": "Added imports tracking to TagHelper project system\n- #1744"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/0a76ad70172f29721173b07ef2707bc558a4c367", "message": "Added TagHelper discovery to Razor project systen"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/90120f6a3b713b08aac9c9abb442e17c80e36dfc", "message": "Added necessary infrastructure for Tag helper project system imports\ntracking"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/9a2e3ceab64f04f933b3a4ab2886d7293f508eb3", "message": "Added public api changes for TagHelper project system"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/7002dbf20a841466a1e339f689db3d8411b6780e", "message": "Added Name and Documentation to DirectiveTokenDescriptor"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f4e9ddad22f78a704317dcfcfa655bedb6a35096", "message": "Link syntax tree Span nodes"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b50ead28e28dd49321585fdd1ab514e67cb21395", "message": "Merge branch 'rel/vs15.5' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/fea4095833b42c9771b1248759b427096d55f6f3", "message": "Match BlockKindInternal values with BlockKind"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f41dc2aef94e873df96b3d72acdf1c8d50bf5119", "message": "Only handle indentation for open curly brace instead of all metacode"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bd8e9ecc318946e70e33e406a43e31b3ea307d9c", "message": "Added RazorParserFeatureFlags and added support for minimized bool tag\nhelper bound attributes\n - Fixes #1678, #431"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/aa445ee9b45d780cb1a33e0ff0f153879e5a1a4a", "message": "Add error for using single quotes in add/remove taghelper directive"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/32d5391ff03849f121409a14d775d4709acbc9e1", "message": "Moved GetDesiredIndentation to a new service"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/040b5eb179bb3a4212c1ac164e17a9b0b7d741f6", "message": "Removed unnecessary files"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/5cb11b9bf4a1bcb66a0066eeb61d2800bf5a8ed9", "message": "Implmement a project system for Razor"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4b68a48f1d05c48f208040fc9e005ff113831953", "message": "Fix: Broken intellisense for extensible directives"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b12683a35d7c73065103b09e33cdd781f1a18935", "message": "Mark trailing whitespace after type name in directives as markup"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f3d121cacf5d4b98e1cb49c3e7cbbe04c98d2830", "message": "Mark whitespace between tag helper directive and its value as Markup"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/1b5bd4afacbcdc0a8b8e9837d91460e0411491ab", "message": "Added ParentIsTagHelper property to AttributeCompletionContext"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/fa6fde2b202e94f6daad198d156212d7efbca729", "message": "Moved TagHelper directive validation and parsing from TagHelperBinder to\nCSharpCodeParser"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/9b6420dbfc683d734620241b9eac90336c02c321", "message": "Include currently selected attribute in TagHelper completion results"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bf6370454706a61d4e9ebc9e51b0e5ffb3014516", "message": "Renamed solutions"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d726be6dd1f1a31cd38692554be0c5d230199cc1", "message": "Removed duplicate extension methods"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/45732a5dd38d987acbf294b2df7aea6c0f5162c4", "message": "Fix: Nested tag helpers do not work when tag helper prefix is set"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8d2a9e59291df7358b62fc9e51ea21d9cfd110f6", "message": "Support tuples for type directive tokens"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/655a693e4a0566da4745d9a33dd0471c404f51b8", "message": "Make ViewComponentTagHelper use extension intermediate nodes"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/364fc1a55d6fa47dca795491189be4c6a354974c", "message": "Allow nullable types with generic arguments in directives"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4fe07f2298f0fe3233a18dc0f23522133c02d101", "message": "Added unit tests for DefaultTemplateEngineFactoryService"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/dbcac41be7ca731d07ea296423758ccfbd3bf383", "message": "Get the correct version of Mvc for multitargeting"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4fcad1548ee9b222fffc72fae8bd9b641ea19824", "message": "Added support for multitargeting\n\n- Added 1_X src project for multitargeting\n\n- Added 1_X test project for multitargeting\n\n- Added 1_X test MvcShim for multitargeting\n\n- Make section directive generate the correct code the appropriate version\n\n- Added another sln"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ce689b0449db04a9fed4250c9465d4be7beb7cc5", "message": "Fixed DebuggerDisplay in DefaultTagHelperContent\n- Also refactored it in few other places"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/31e971018683f894609493b43ddc19eebc6ee66a", "message": "Added unit test for DefaultTagHelperOptimizationPass"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ee64ee7e1a6e2ab18dc76faa1d4a85c94447fe28", "message": "Removed warning in ViewImports integration test"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b70815e317298c3078fff7ed6e21fa9b5738949f", "message": "Made `RazorCodeGenerationOptionsBuilder.DesignTime` getter only\n- Made RazorCodeGenerationOptions consistent with RazorParserOptions"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/267b3fab0a54c93baec7db30bae46056abd63407", "message": "Made IntermediateNodeWalker.Ancestors indexable"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/49eab4172692fbcab08425b90ac8d7f801b32af7", "message": "Made CodeTargetBuilder an abstract class"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d6e892b30c34307014ae60dfb353913e7ea566aa", "message": "Adjusted verbosity of some property names and made\nTagHelperIntermediateNode.TagHelpers and IList"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6fdd4d653c71c8fc8013335057a7ae4385fe74fa", "message": "Made InvalidNonWhitespaceHtmlCharacters internal"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/1941", "title": "Build server working end to end", "body": "#1943 \r\nMeta issue - #1921 \r\n\r\nThe build server now takes care of both discovering tag helpers and generating Razor CSharp documents. This saves about 1.8s of build time when the server is warm. (Perf data: https://github.com/aspnet/Razor/issues/1921#issuecomment-358096928)\r\n\r\n- Added a switch to enable/disable server compilation\r\n- Limited PipeName length to workaround limitations of socket length in Unix systems\r\n- Some more general cleanup\r\n\r\n\r\nThings that need to be done in a future PR: (Checklist here https://github.com/aspnet/Razor/issues/1921#issue-286973192)\r\n- Currently there is code duplication between `GenerateTool`, `TagHelperTool` and `Razor.Tools`. Need to unify them\r\n- Figure out when/how server shutdown should happen\r\n- More cleanup around `BuildProtocol`\r\n\r\nFYI @mkArtakMSFT ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/12696764", "body": "I don't think it should. Right now we remove the trailing whitespace and a single newline. If we remove all blank lines there, we will be restricting a way for users to intentionally add blank lines.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/12696764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13356037", "body": "Suggest adding one more variation with `Environment.NewLine` before `=`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13356037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13356040", "body": "Sorry for commenting on commit.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13356040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/21597173", "body": "Oh no :see_no_evil:", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/21597173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/22439931", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/22439931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/24158630", "body": "Yolo merge \ud83d\ude48 ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/24158630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/24334929", "body": "\ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/24334929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/25878307", "body": "This design  came up after discussion with @rynowak on his comment https://github.com/aspnet/Razor/pull/1781#discussion_r152149902.\r\n\r\nBasically the point of this change was to move the control away from the DocumentTracker and the DocumentManager will have the logic to decide when to subscribe and unsubscribe. We wouldn't even need the manager if we choose to let the tracker decide (that was how it was before).\r\n\r\n> Heck, if you really wanted to we could get rid of subscribe/unsubscribe entirely and always be attached\r\n\r\nThis again provides no control to the manager and thereby rendering it pointless. ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/25878307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Eilon": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1951", "title": "Microsoft.NET.Sdk with Razor support", "body": "_From @bgever on August 10, 2017 9:55_\r\n\r\nI'm trying to get Razor syntax support for Visual Studio 2017 in a `Microsoft.NET.Sdk` library, which is dynamically loaded into a `Microsoft.NET.Sdk.Web` project.\r\n\r\nI've noticed that when I change the library to the Web SDK, .cshtml files get proper support for Razor code, so that I can access `@Html` or `@Context` with IntelliSense, and reports no longer errors (red squiggles).\r\n\r\nHowever, with that SDK I have to add an app entry point, and the output is an EXE. Moreover, when loading the library as an Application Part in MVC, similar to https://github.com/dotnet/sdk/issues/1213, then I get the below exception.\r\n\r\n```\r\nSystem.InvalidOperationException: Can not find compilation library location for package 'quantifeed.webapp.cub'\r\n   at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths()\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.<>c.<GetReferencePaths>b__8_0(CompilationLibrary library)\r\n   at System.Linq.Enumerable.<SelectManyIterator>d__16`2.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable`1 parts, MetadataReferenceFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorReferenceManager.GetCompilationReferences()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorReferenceManager.get_CompilationReferences()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRoslynCompilationService.CreateCompilation(String compilationContent, String assemblyName)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRoslynCompilationService.Compile(RelativeFileInfo fileInfo, String compilationContent)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorCompilationService.Compile(RelativeFileInfo file)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.CreateCacheEntry(String relativePath, String normalizedPath, Func`2 compile)\r\n```\r\n\r\nIs there a way to get Razor support in VS 2017 with a `Microsoft.NET.Sdk`  SDK?\r\n\r\n\r\n\r\n\r\n_Copied from original issue: dotnet/sdk#1481_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1135", "title": "Non-string taghelper attribute value containing @@ is not recognized as code", "body": "_From @ajaybhargavb on August 26, 2016 23:12_\n\nRelated issue - https://github.com/aspnet/Razor/issues/819\r\n\r\nFor non-string tag helper attributes, I'd expect the `@@DateTime.Now` to be recognized as code\r\n![image](https://cloud.githubusercontent.com/assets/1579269/18022829/1c6a0db2-6ba7-11e6-9d33-c5b63058872b.png)\r\n\r\nIt works as expected for other cases like,\r\n![image](https://cloud.githubusercontent.com/assets/1579269/18022856/7b2a92b8-6ba7-11e6-8dd5-2400c94c1bf2.png)\r\n![image](https://cloud.githubusercontent.com/assets/1579269/18022862/8d0dbde8-6ba7-11e6-9386-cf3f594d0d7d.png)\r\n\r\nTo reproduce this issue, you'll need the changes I made locally [here](https://github.com/aspnet/Razor/commit/8142b37d88faca6482113669d7dc5585c1c3c04f) to fix the referenced Razor issue.\r\n@ToddGrun @NTaylorMullen \r\n\n\n_Copied from original issue: aspnet/RazorTooling#95_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616329", "body": "Question: How do we plan to prevent (or avoid?) the compiler warning regarding not using `await` in an `async` method?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616767", "body": "@pranavkm I'm pretty sure users will want to see compiler warnings in their views - it's code just like any other code really. The `#pragma` block will definitely work but we should carefully evaluate if it's the correct solution. For example, in theory we might be able to be super smart and maybe use Roslyn to determine if the method _needs_ the `await` keyword and then selectively apply it. Or something like that.\n\n@NTaylorMullen do you want to log an issue to track this? I just want to make sure we don't lose track of this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37664781", "body": "(BTW what I _actually_ meant in my previous comment was to use Roslyn to determine whether the `async` keyword was needed, not `await`.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37664781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37716601", "body": "I'm concerned about correctness here. Unconditionally disabling the warning for the whole `Execute` method sounds dangerous. For example, the user might have other code in there (such as declaring delegates) that could be async, and they would presumably want to know that they forgot to put an `await` within that delegate. But if we disable the warning, they'll never know.\n\nI'm not doubting the difficulty ( :smile: ) but I think for this feature to match a user's expectations, we have to be cautious about how the user might be affected by it (especially if they unknowingly have a bug in their code because of something that we did).\n\nHere's the totally realistic code I'm thinking of (but you can easily imagine more realistic code that they might have):\n\n```\nFunc<int, Task<int>> x = async z => z + 1;\n```\n\nAnd that normally produces this warning:\n\n> 1>c:\\Program.cs(13,38,13,54): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.\n\nAnd I think it's fair to argue that a user would want to see this warning if they wrote that code in a Razor page.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37716601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43119868", "body": "We could at least be smarter about it. Producing invalid code is the main thing we need to be concerned about. Whether we use \"@\" or some name transformation is another question.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43119868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46268215", "body": ":shipit: from me. @yishaigalatzer ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46268215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53449702", "body": "Looks good to me, but I'll let someone more familiar with the design do the sign-off.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53449702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/10850370", "body": "Looks a bit difficult to parse... Is the second sentence really `The '{2}' property of the tag attribute must match the key it is added with.`? Just because an word in the error message happens to match a parameter name doesn't mean it's really `nameof(thatParameterName)`. I think in this case it's just the word \"key\" as opposed to the parameter \"key\" for the `{2}`.\n\nSo in full: `Cannot add an attribute with the key '{1}' and the name '{3}'. The '{2}' property of the tag attribute must match the key it is added with.`\n\n(And then get rid of `{0}`.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10850370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13253937", "body": "HTML seems to have two different definitions: \"space\" (very restricted) and \"whitespace\" (same as Unicode). So I guess it depends on which one is actually right here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13253937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633921", "body": "`html` --> `HTML` where it's English (as opposed to variables/identifiers/etc.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633922", "body": "(Scan all text please :smile: )\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633924", "body": "`ToLower` --> `ToLowerInvariant`? Might want to check other uses too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633926", "body": "`false` is the default, no?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633931", "body": "This code looks waaaaay too simple. Converting a `Type` to a C# type declaration is a _lot_ more complicated than this. Nested generics come to mind.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633932", "body": "You also need to deal with array types. And in theory ref types as well (`&SomeType` in unsafe code or something like that, though those would be quite rare.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633934", "body": "Why is all this tag helper stuff in a `TagHelpers` folder but not in the matching namespace? I recommend moving this to a sub-namespace.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16633934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16668312", "body": "Sent you some code for doing a pretty-print of types in case you're interested. Might be useful at least for comparison purposes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16668312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rynowak": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1921", "title": "Meta: Add Razor build server", "body": "Checklist:\r\n\r\n- [ ] Get tag helper discovery and code generation working end to end (off by default) (https://github.com/aspnet/Razor/issues/1943)\r\n- [ ] Resolve how many/what tools we have (https://github.com/aspnet/Razor/issues/1953)\r\n- [ ] Server timeout after a certain time\r\n- [ ] Server should support different Razor toolset versions at the same time\r\n- [ ] Include more data as part of the inputs to the server\r\n- [ ] Logging cleanup (https://github.com/aspnet/Razor/issues/1954)\r\n- [ ] Integrate in to the build\r\n- [ ] Turn it on by default when it is in good shape\r\n- [ ] Tests\r\n- [ ] Get automated perf measurements working", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1912", "title": "RazorGenerate and RazorCompile can't be invoked directly with multi-targeting", "body": "You can't call these targets at the command line using `dotnet msbuild /t:RazorGenerate` if the project does multi-targeting", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1892", "title": "Turn Razor MSBuild support into an SDK", "body": "The design of this looks roughly like:\r\n\r\n`Microsoft.Net.Razor.Sdk` - contains the compilation (CSC) targets as well as the targets and properties that hook into the build lifecycle. This SDK defines the primary properties that users will want to configure. This package versions with the SDK and moves slowly.\r\n\r\n`Microsoft.AspNetCore.Razor.Xyz` - contains the actual tools used for tag helper discovery and code generation, as well as any version-specific settings. This package moves with the runtime and can version/change quickly. There's a stable contract between this package and the main SDK. Once things stabilize, functionality can move from here into the SDK.\r\n\r\n`Microsoft.AspNetCore.Mvc.Xyz` - contains the 'targeting pack' for MVC. This package moves with the runtime and can version/change quickly.\r\n\r\n---\r\n\r\nWe need to cobble what we have into this shape for preview 2 and then get the `Microsoft.Net.Razor.Sdk` package into the CLI Build.\r\n\r\n---\r\n\r\nRequirements:\r\n- [ ] Define a capability for Razor (that our tooling understands)", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1888", "title": "Flaky Test: RazorGenerate_BuildsIncrementally", "body": "This failed on Travis (Mac): https://travis-ci.org/aspnet/Razor/jobs/322388123", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1888/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1849", "title": "Meta-issue: Potential Razor Changes in 15.7", "body": "We're not planning any big IDE features for Razor in 15.7, but we will need to do an insertion if we make any language/feature changes that are user-visible. \r\n\r\nThis item tracks any changes that we need to ship in 15.7.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1847", "title": "Move path munging in Microsoft.AspNetCore.Razor.GenerateTool into MSBuild ", "body": "Right now `Microsoft.AspNetCore.Razor.GenerateTool` does a bunch of path manipulation to figure out what view engine paths and generated file names should be used. This should all live in MSBuild so it can be reused by a future design time build from Razor.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1846", "title": "Figure out the story for Design Time Builds + Microsoft.AspNetCore.Razor.Design", "body": "We need to add a test to verify that we're not regressing design time builds with any of our targets. The best way to test this might be to run a design time build but add `/clp:PerformanceSummary` and verify that our targets don't show up.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1844", "title": "Make Razor.Design work well with MvcPrecompilation installed", "body": "Discussed with @Eilon and @DamianEdwards \r\n\r\nThe main concern here is that both `Razor.Design` and `MvcPrecompilation` will be part of the metapackage, so we need to ensure that both of these packages can coexist.\r\n\r\nThe desire that that `Razor.Design` would become the new default experience for *Razor-on-Publish*, but that we can fall back to `MvcPrecompilation` if the developer has done anything explicit to customize it.\r\n\r\n-----\r\n\r\nSome notes about what we need to address:\r\n- [x] How do we no-op when a user wants to use MvcPrecompilation\r\n- [x] Exclude view files from publishing \r\n- [x] Exclude ref assemblies from publishing\r\n- [x] `Razor.Design` should compile on publish by default\r\n- [ ] Should `Razor.Design` use a different assembly name?\r\n\r\nThis looks like the main delta between the two systems.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1829", "title": "Razor MSBuild needs to handle linked files properly", "body": "Creating an item to track this because we don't do this correctly today for precompilation. \r\n\r\nThis is fundamentally a problem because precompilation looks at files on disk, rather than where a file is linked into the project. \r\n\r\nLinks 'just work' when you use runtime compilation, we need to make sure this works well at build-time and in VS.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1828", "title": "Get rid of MvcTemplateEngine", "body": "I've been doing some thinking about the interface between Project -> Engine -> TemplateEngine. \r\n\r\nWe need to provide similar kinds of extensibility to these concepts as the Engine has. \r\n\r\nThe implementation choice for MVC to replace the TemplateEngine rather than customize facets of it means that we need to bring a few new concepts to the top level with dedicated extensibility.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1782", "title": "Try simplifying our workarounds for ProjectReference", "body": "See the set of workarounds here: https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/a70d5e6687ac818a85fe8c9760f0caf5a78dce99/StyleCop.Analyzers/StyleCop.Analyzers.Vsix/StyleCop.Analyzers.Vsix.csproj#L47-L53\r\n\r\nThis might be better than what we're currently doing to make our VSIX work with project references.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1739", "title": "Investigate Pre-Loading Roslyn", "body": "Measuring process cold startup for an MVC starter site, we've found that tag helpers and Roslyn JITting take a really significant amount of time. We're wondering if queueing up a Tag Helper discovery or 'empty' compilation to parallelize the startup cost will make a difference.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1723", "title": "Bug with wrapping in div inside code block", "body": "Original posted at https://github.com/aspnet/Razor/issues/1628#issuecomment-336562669 by @tomeks666 \r\n\r\n---------------------------------\r\n\r\nI do not know if this is related to Razor Tooling or something else. I noticed that Wrap in Div (Alt-Shift-W) appears to have a bug. The opening div tag has 2 additional spaces\r\n\r\n`< div > <input/> </div>`\r\n\r\nThis does not happen always. It happens when the wrapping is attempted in a code block following @using e.g.\r\n\r\n`@using(Html.BeginForm(\"Action\", \"Home\") { < div > <Input /> </div> }`\r\n\r\nCould somebody try to reproduce it? Just put an input tag in a using block select it and press Alt-Shift-W", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1553", "title": "Consider moving some Razor functionality into a library independent from MVC", "body": "_From @tuespetre on May 1, 2016 3:55_\n\nI am currently working on a library that extends Razor by adding certain directives, removing others, and so forth. It will follow a pattern similar to MVC as far as:\n- Loading template files by following a default convention while allowing this convention to be altered or replaced\n- Compiling the template to an executable class with ExecuteAsync and whatnot\n- Utilizing some caching mechanism for performance\n\nOverall I am extremely pleased with how easy it is to extend Razor now without taking on MVC as a  dependency. I just feel that the functionality outlined above that is currently implemented within MVC could be split into its own generic library independent of MVC to help facilitate the extension of Razor by other developers. \n\n**Edit:** The view file location expansion and caching mechanisms may be small and particular enough to exclude from this scope, but I feel that the compilation mechanism is complex enough to warrant separating it out; it does not appear to have any direct ties to MVC-related concepts, either.\n\n\n_Copied from original issue: aspnet/Mvc#4569_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1553/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1552", "title": "Default injected chunks \\ all @inject chunks need a way to be able to specify documentation", "body": "_From @pranavkm on August 27, 2015 22:28_\n\nFor the few properties we inject by default the lack of documentation along with the mangled page name that appears in the property tooltip makes it appear less polished:\n#### MVC5\n\n![untitled](https://cloud.githubusercontent.com/assets/174281/9534640/ce4797aa-4cce-11e5-8350-de0ab95620ec.png)\n#### MVC6\n\n![untitled](https://cloud.githubusercontent.com/assets/174281/9534658/eddb4f30-4cce-11e5-9d4b-620afd8c896d.png)\n\nThis would also be a problem for user injected properties, but less so.\n\n\n_Copied from original issue: aspnet/Mvc#3050_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1497", "title": "Make Razor Codegen warning safe", "body": "We weren't checking for warnings in the Razor tests that do compilation, which allows some warnings to slip through and break the build. \r\n\r\nWe need to do some work to make sure we're clean.\r\n\r\nCurrently known issues:\r\n- [x] test:_ViewImports_Runtime\r\n- [x] test:_ViewImports_DesignTime\r\n- [ ] find a way to run with actual compilation in more of our tests so we can find more", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1497/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1361", "title": "Parser options should have the ability to parse all leading directives", "body": "Currently we parse just the first leading directive, we should parse all *simple* directives before the first markup or code block.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1354", "title": "Get rid of Taylor's /* */ style comments", "body": "We don't use this style \ud83d\ude06 ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1354/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1263", "title": "RazorPage WriteLiteral could more compact/fast-path types", "body": "_From @benaadams on April 27, 2017 10:2_\n\nCurrently it uses `string` which means each time a page is rendered it needs to convert from UTF16 to the output encoding (likely utf8)\r\n```\r\n  IL_0019:  ldstr      \"\\r\\nDuis sollicitudin mauris nec molestie molestie. \"\r\n    + \"Etiam ipsum quam, tincidunt quis egestas non, euismod id lacus. Nulla n\"\r\n    + \"isi magna, auctor vitae turpis ut, congue interdum lectus. Nulla vehicu\"\r\n    + \"la, dui id venenatis tincidunt, magna lacus tristique enim, ut sodales \"\r\n    + \"nulla neque quis ligula. Vivamus volutpat laoreet molestie. Pellentesqu\"\r\n    + \"e elementum porta volutpat. Curabitur dui sapien, imperdiet nec velit i\"\r\n    + \"nterdum, venenatis pulvinar neque. Vivamus venenatis hendrerit nunc, ve\"\r\n    + \"l mattis justo tristique nec. Mauris ullamcorper posuere tellus, eget c\"\r\n    + \"ongue ipsum sagittis eget. Integer ultrices sit amet nisl at venenatis.\"\r\n    + \" Sed vel venenatis urna, ac scelerisque augue.\"\r\nIL_001e:  callvirt   instance void [Microsoft.AspNetCore.Mvc.Razor]\r\n    Microsoft.AspNetCore.Mvc.Razor.RazorPage::WriteLiteral(object)\r\n```\r\n\r\nInstead they could be stored as an new type `asciiBytes` and if non-ascii chars were encountered in the compilation `utf8Bytes` in class readonly static which would be shims on `byte[]`.\r\n\r\nThis would mean they would use on average half the memory; and could if output encoding was compatible just be put directly on the wire without re-encoding. (Hence ascii/utf8 split as more encodings are compatible with ascii); then only re-encode if it needs to switch.\r\n\r\n`string` could still be used for shorter literals (< *n* chars) e.g. tag names to make use of string interning; if a custom interning scheme wasn't to be devised.\r\n\r\nThis would allow larger chunks of html in pages to be stored and output more efficiently.\n\n_Copied from original issue: aspnet/Mvc#6216_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1093", "title": "Clean up + test RazorSyntaxFactsService", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/920", "title": "Fix TagHelperBlockRewriterTest add location comparison to SymbolBase", "body": "Right now we don't compare the locations of Symbols, we had to remove this during a parser refactor because it breaks a lot of tests.\r\n\r\nThe only blocker to bringing this back is the tests in `TagHelperBlockRewriterTest`. Right now every phase before taghelper rewriting works fine. We need to figure out what's going on with these tests and then add this verification back.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/854", "title": "Tooling Standalone: Define model for discovery and loading of Razor extensibility", "body": "We need to define a model for discovering and loading 'plugins' for Razor that works **without** building the user's app. This will be used by VS and at runtime and should not be tied to VS", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/854/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/b9db1ac7c85f27c5c0e0b3d051fd668f0e244ad9", "message": "update deps"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/233e67d0e0ff2413af4699ebf257efe9a7ac83ce", "message": "Prepare for Web SDK changes\n\nThe Web SDK is going to set a new msbuild property to tell us that the\nRazor SDK should be active. This hasn't been integrated into our build\nsystem yet, so I'm temporarily hacking it until we get that change. At\nthat time I'll remove the special cases in these projects."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d4ed8a7b7742a995f1f9da301e5dd97fc02086f3", "message": "Prefer BeforeTargets/AfterTargets over evaluation\n\nWe can't rely on property evaluation to attach targets to the build\nlifecycle, as we rely on the web sdk to set these properties and they\nrun after us."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/eaa201703db7abc44ff8bf85943870c24e77a222", "message": "Fix build break\n\nWe didn't have a test for the case where RazorCompileOnPublish is false\nand Publish is being called. This is breaking the precompilation repo."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d1cfc51c9d9b087af7c4cb3e0fb276e7d8541618", "message": "Add a property so the web sdk can know that the Razor compiler is available."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/0584fe3ecfd95c451502b749029dd524dfac48a6", "message": "Make RazorCompileOnPublish the default"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/627696677ce5b4eeabe71866b58bbee0b62ab742", "message": "Split up Razor SDK logic (#1934)\n\n* Split up Razor SDK logic\r\n\r\nSplitting the fragile parts of code generation into its own file. We're\r\npossibly separating the Razor SDK into a part that ships in the dotnet\r\nSDK and part that ships in a nupkg with the compiler.\r\n\r\nThis means defining more of a fixed lifecycle in the main file, and\r\ntreating our actual work as more like extensibility."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/e8af1141cb6d65b769cad14d3706bd75c0acb006", "message": "Attempt to fix Razor CI flakiness\n\nWe're seeing some test failures on the CI where the build has no output.\nSure enough, using Process.Exited is trap. It doesn't guarantee that all\nof the output has been written when it's trigger.\n\nThis is a different approach that shouldn't suffer from the same\nproblem."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8c1623695a0c06e138a8d21c50179d9f4eed4a06", "message": "Update deps"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b5554a8038cb9a5e8a7e60503cdda4e1f8588a49", "message": "Make Razor SDK support refs and views on publish\n\nThese are default behaviors for precompilation."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d1984aa44ba7434c8b57f8a3993a8f451f5bee5c", "message": "Add hook for precompilation"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/14cea3c1b9b913d2ec23c25e3e595be418303a86", "message": "Move properties"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f0c3843a5b2cefa791eace25d1aec7b6783eefa9", "message": "Implment support for publish"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/07a63d2dddb65e574c5646ccbc38de0a6d1f5805", "message": "Add tests for RazorCompile target\n\nThis target should be callable on its own without using Build so it\ndeserves a few tests."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/e0d876deb9db29efbd438079e6bacda8b6214e66", "message": "Skip flaky test on OSX"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/2555c5bab1a6a76a3b6bbd0d83e55595919649f5", "message": "WIP"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6bab1c682d0c021e50df2961afb738ae547dcbed", "message": "Fix a build break introduced by new SDK\n\nThis is failing on the CI due to an issue with a newer build of the SDK.\nI opened https://github.com/dotnet/sdk/issues/1854 to track the SDK bug.\n\n- update korebuild\n- upgrade deps\n- remove System.Diagnostics.DiagnosticSource from test projects"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/5f501710aaad63acc13318ff4f2262119bdc3dd7", "message": " Make Razor targets noop with no razor files"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bb0aa9464af4b14019fe249263dae5fe1664455b", "message": "Add support and tests for Pack and P2P reference"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/34954c36684ffc4cefc8beb4dad130326008d7c3", "message": "Code dump of WIP razor compiler server\n\nThis builds, but isn't fully implemented yet.t"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/03dea86c4e4f4b19a3379f0c1b9f6ff40bd1edec", "message": "Adding more tests and clarity around file paths\n\nI noticed we were really undertesting all of the things that handle\npaths and file names. I gave this some love and a little clean up where\nwe weren't doing the right thing in RazorSourceDocument.\n\nAlso changed the template engine tests to use the\nFileSystemRazorProject. These tests are already using the files on disk\nas inputs. I turned off checksums for these since they now have the full\nfile path, and that would not be portable."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/fbb73bccd055b31037c41557ca520909bc06d213", "message": "Update our version of the RazorCoreCompile\n\nUpdating RazorCoreCompile to be based on a much newer\nversion of the Core.CSharp.targets.\n\nThis adds support for some things we're missing like determinism and\nanalzyers."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/595d05965af9fa6c70c5bec0e018997ac680a94d", "message": "Rename some things"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b7415502bfedf811851ad43739548d2b80c7c502", "message": "Add RelativePhysicalPath\n\nThe FilePath property on RPI isn't what we want for use in the compiler,\nit's more of a view engine concept. Adding a property that does what we\nwant."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/16324c3126f36ef0537830cd73d2f6411962f610", "message": "Add an Identifier by default\n\nUsing the MVC view engine convention for identifiers seems to make the\nmost sense, and we already use that convention for RazorProject so I\nguess we're stuck with it."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b93bab9c044c23384ac7684a74c667740a61c83b", "message": "Remove Get/SetRelativePath"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d602f9d770cf186f14446305bf596d04d32f08dd", "message": "Add relative path to source document\n\nAdding this via a properties object that encompasses all of the optional\nproperties. This way if we need to add more items that are optional we\ncan continue to do so without overload explosion."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d49d4328987cc59a572db2741bc9d33d0c7690e1", "message": "Fix tag helper discovery in our tool"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6fc028afb01a15d51a6d74a1b71b287a37ee1f5d", "message": "Attempt to fix travis again"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/186e5733c053d1845819cc433080ce0bfa96731d", "message": "Add metadata to Razor (#1894)\n\n* Add metadata to Razor\r\n\r\nThis PR introduces standard metadata to Razor. This change begins to\r\nformalize the contract between generated code produced by Razor and\r\nruntimes that want to load and interact with this code.\r\n\r\nThis is a step on making MVC a 'plugin' to Razor rather than the only\r\npossible implementation. Since we're doing MSBuild work - this is the\r\nright time to designate the current interaction between Razor and MVC as\r\n'legacy' and move forward.\r\n\r\nAdditionally, we need the source thumbprinting to make re-compilation of\r\nRazor a thing.\r\n\r\n-----\r\n\r\nAlso I noticed that our source document doesn't expose the hash\r\nalgorithm by name. We really should have this, so I added it and\r\nhardened the code that deals with checksums in c# generation."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f8b7adb98794bc36052144e08c6322811330e0f4", "message": "Attempt to fix travis\n\nI think our .nuspec is ending up with paths like:\ntools//Microsoft.CodeAnalysis.CSharp.dll\n\nNote the double-slash. This is an attempt to avoid double-slashing."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/2717cf8e77372fbe97dfbcbab59779fc4699966a", "message": "Fix #1893 - fix formatting of RazorCompile"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ee72ea73da7d97bb939ee55e9951ad457328ae7a", "message": "Add exclusions for NPV for non-ASP.NET assemblies"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/948af4ce6f4a6c2cab0c995de6ce781587d672ea", "message": "Add descriptions for Razor infrastructure\n\nNeeded to pass NuGetPackageVerifier. These ship IN a package, even if\nthey are not in their own packages."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ed17bd549bbefd00bd8a1b8832a3a7d9eb840ff2", "message": "Update to latest korebuild\n\nContains a fix to avoid crashing on Roslyn's version format"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/54c8bc82db68248aa37d8612af6eef70296853b2", "message": "Fix #1874 (#1879)\n\n* Fix #1874\r\n\r\nThe tools and tasks were missing from the package.\r\n\r\nAlso added some hardening to the targets so we can detect regressions."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/3f948ad3c5cd7c0745ba5f1580acd2b8b52f72fc", "message": "Verify support for reporting errors using MSBuild (#1867)\n\n* Verify support for reporting errors using MSBuild\r\n* Verifies that CSC errors get mapped to the right place\r\n\r\nResolves #1850"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/2c27272e4d1fd3650a2164c0d1c0eb3060483e9e", "message": "Adding a basic test for RazorGenerate\n\nLotsa cleanup"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b900a82bc363607256a6ddae3b1713c73926b2b5", "message": "Refocus Razor runtime assemblies\n\nMicrosoft.AspNetCore.Razor becomes the home for TagHelper-related types\nthat you use in your code.\n\nMicrosoft.AspNetCore.Razor.Runtime becomes the home type types you need\nto build a view engine. User code should not need this package anymore.\n\nNone of these are breaking changes due to typeforwards."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/06c2cf31d48b59b8ab85328d088c0206a8026f87", "message": "Hardcode Debug in test"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/5425c69df6eae203c58a5f00c9a65baa97e4765f", "message": "Use path.combine instead"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/a3fef5eeaa0463b739ea5d0b1c61d894ba5ef548", "message": "Adds support for Razor compilation at build-time\n\nThis PR adds two new tools as well as a tasks project. None of these\nprojects produce a package and they ship as part of\nMicrosoft.AspNetCore.Razor.Design. For now this is a 'fat' package that\ncontains all of the dependencies, but we plan to strip them out in the\nfuture.\n\nThe support for compilation at build-time will start as **off** by\ndefault. The immediate goal here is to get this to flow through the\nbuild so that we can test it as part of the inner loop effort. We will\nenable this feature by default once we've done more thorough testing.\n\nSince this is mostly a code dump, I plan to address blocking and minor\nfeedback only. If there are design issues that are non-critical, I will\nopen follow up items.\n\nThe next step will be to start adding more detailed tests."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/c0eecc87e77fd2cfd83342bf0eee4f62e66b20a3", "message": "Add tools and tasks for Razor MSBuild support"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/1962989ffca01e20b4e1667b06e92d0ae4099ae2", "message": "Implement a .Design package and some testing for MSBuild\n\nThis is the first step in adding support for Razor compilation at build\ntime. Additional steps will complete this by adding tag helper\ndiscovery, code generation and finally a call to CsC.\n\nI want to get this in now to get the package into the build system and\nto lay down the general infrastructure for testing.\n\n---\n\nThe strategy for testing here is to use checked in projects that have\neverything Razor needs to compile code. We already have shims for the\nAPIs Razor uses by default in this repo and I'm using them in the\nproject.\n\nThe test infrastructure creates a temporary directory, copies the\nproject, and fixes up a few small things to cooperate with outputs we've\nalready built so that the test can use the new versions of Razor bits\nbuilt from this repo.\n\nWe can then call various MSBuild targets and verify the files on disk. I\nenvision tests that verify incrementalism as well as the basic E2E.\n\nWe will test the E2E in general in other places, since it's part of the\nnew default experience. This repo will test things at a higher level of\ndetail, but in slightly artifical scenarios."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/984713c29700de4c5666183581a8b422e8dcb9f4", "message": "Add an opt-out for building the VSIX\n\nEx:\n.\\build.cmd /p:BuildVSIX=false"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b6d01fda46cea97d04e1d3c0285ba7b5a6061024", "message": "Target 15.6 for the VSIX in dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/cf141cf11930b34ef0caa936026b071eaa6391cc", "message": "Create new template engine when version changes"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f23ff9452c5c738eba2ec5fcf3ee8f17f8861cfa", "message": "[Design] Create Template engine from project snapshot"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/12e61d75a7d38eca31335fa9db3f28bbd4706c40", "message": "remove ifdefs, our tests compile release sometimes"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6e6a24cbb4e03995c819e9400bc26d224800c23a", "message": "Add a background listener for notifications\n\nThis change adds an actual background worker for listening to project\nchange notifications and starts sending updates when the project's razor\ndependencies change.\n\nI had to do a litle surgery to get things working. There were plenty of\nsmall bug fixes.\n\nAdditionally I got rid of the WeakReferences for tracking listeners. I\nwas seeing TextBuffers hanging around in VS longer than I expected and\nthe WeakReferences weren't getting cleaned up. I think it's better that\nwe just track the lifetime."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/7a0abc3f674f6ac372a717b8ba5039189ba523df", "message": "Add test for #1684"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/e05faf2347aef8c52ebf156ae6138ea46f80b652", "message": "Fix #1684 - CompletionProvider null ref\n\nThe CompletionProvider will be called in cases where the document\ndoesn't have a FilePath - such as the C# interactive window. This is\ncausing a null ref."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/7cca8618ea81037290c6d29ed16664a3aeac315c", "message": "Change notifications for the project manager\n\nThere's still nothing processing the notifications in the background.\nThis is all the plumbing for dirty checking and publishing updates."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/82866d9442ae7914980576fd821e162d6c30ecbb", "message": "Refactor project snapshot manager\n\nSplits the 'trigger' out from the change manager. The next change will\nadd more functionality to DPSMBase."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/1806d26e9a8d3cb6cc41ce9b5858ee61c5373922", "message": "Merge branch 'rynowak/foreground-theory' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/5ee4c8ec4d94e1c79a09bf7ddcf369c47ba3264c", "message": "Add [ForegroundTheory]"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/00dc95098f862079b1dc03965446dbb53e75e629", "message": "Update our diagnostics window\n\nUpdates our diagnostics window to use the 'in the box' version of the\nassembly/version discovery logic."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ca844afe5aa74a9061e9cdff7771bdbc134d256d", "message": "Add a subsystem for detecting versions\n\nThis adds the beginning of an API for detecting versions from the\nproject. We will flesh out this API more when we do tooling\nextensiblity."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f6f8c15f2e0d79d0f0ed141291cdb6a48b66a129", "message": "Suppress API Check for the MVC 1.X shim\n\nThis is a tooling-only package. We have no compatibility requirement for\nit."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ae925049bb8923dcf8ca9393889c67ef850529b0", "message": "Add an example"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/9dfe2a0a81f63cd5b508ac7b431cd1689460c10d", "message": "PR feedback"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d8431067a5a5725d5fe4174eb76b80fe36f376a6", "message": "Add TaskSchedulers to the dispatcher abstraction"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/c94c110de3424ac103be3f60c3cd92bb34b7d51b", "message": "Move dispatcher to workspaces."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f3fecabe04baf700b307e5e6dd83017e3ec27f0f", "message": "Bump Roslyn to a 2.6.0 build\n\nFixes #1654"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/7ca8255d6f92470493cb24537967786d326acc78", "message": "Add a default VS foregrounddispatcher"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/a9a86fa3bf7afcbb34f64f798e6dc93d817e3537", "message": "Add foreground dispatcher"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d87e0f7fbd26b83fd90d383c9dfb47892ffed8aa", "message": "Fixes #1632 - track textviews in the document tracker\n\nI've stripped out some of the dead code and complexity from the document\ntracker in an attempt to simplify it. I will bring this back as part of\nthe multi-targeting work."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/5161ebaf8a5228e9ec6cff74f1248f7e4fbefcc4", "message": "Enables the Razor Document Tracker\n\nThis enables the tracking of events that change the 'razor' state of a\ndocument that's open in the editor.\n\nAlso fixed a crash that can occur when creating a new project with the\nRazor Info window open."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8bbfecb0dabcd7bec4f6bf68ee890a2b4fc5772c", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/59d3fb433bc6df0369deac0f6d51be6114e8660f", "message": "Fix #1555\n\nRevert validation that file-scoped directives appear before HTML or\ncode."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/1d5dfcc6b41b6f401394b823cf7c4b55d2ce944f", "message": "Update our VSIX version to 15.5"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/9c0a8a5c9651c5afef215260983f610f915bfcd0", "message": "Rename properties on taghelper nodes"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ff40124594b58b17988d50841175430a4b73d1a9", "message": "Convert most of CodeWriter into extensions\n\nWe don't really want to ship what we have as a contract. As an emergency\nmeasure we are making it into internal extension methods so we can have\na do-over in 2.1."}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/1956", "title": "Add support for MvcPrecompilation settings", "body": "Adds support to the Razor SDK for various legacy features of the MVC\r\nPrecompilation tool.\r\n\r\n- MvcRazorCompileOnPublish\r\n- MvcRazorExcludeViewFilesFromPublish\r\n- MvcRazorExcludeRefAssembliesFromPublish\r\n- MvcRazorOutputPath\r\n- MvcRazorContentRoot\r\n- MvcRazorEmbedViewSources\r\n- MvcRazorFilesToCompile", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827765", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33839960", "body": "your picture is disappointingly small\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33839960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/38309308", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/38309308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42915006", "body": "History here is that when the version of rosalyn is different than the reference nupkg, it produces a warning. If warnings as errors is on this will fail at runtime trying to run your app. We should look into disabling that specific warning for this project (and razor.host) and turning warnings as errors back on.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42915006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44453851", "body": "try turning on warnings as errors in the project.json\n\nIt's also possible that some rosalyn changes happened\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44453851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44803314", "body": ":shipit: \n\nDude, you should get **pumped** about using the `new` keyword, it's awesome!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44803314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45141622", "body": ":shipit: again in case you weren't paying attention\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45141622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45142721", "body": ":shipit: \n\nOnly major feedback is to consider pushing that thing you wrote for argument exception into the Testing repo to encourage reuse.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45142721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52677507", "body": "/cc @NTaylorMullen \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52677507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52680088", "body": "/cc @yishaigalatzer @anurse \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52680088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52705597", "body": "updated\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52705597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52832161", "body": "@yishaigalatzer branch updated\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52832161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52838126", "body": "ff944e59481a7dbf7cea5f009b014ad12c56a02a\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52838126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53608792", "body": "Be careful with this, per earlier discussion with @anurse - a lot of the code intentionally handles a variety of linebreaks regardless of platform.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53608792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54219100", "body": "Individual bugs opened for follow up + fixes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54219100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56121674", "body": "/cc @NTaylorMullen \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56121674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56228073", "body": "@NTaylorMullen we're just going to go ahead with with the buffer change for now and revert the state machine part. PR updated\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56228073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56228203", "body": "Instead of doing something small here we want to take more time and consider a bigger design change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56228203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56417706", "body": "2d9b3dd4fb0d09f9b992e2a14a77ddb91cb9a455\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56417706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56429803", "body": "131c973853f1dd31d50823e233f7a3197a9b72b8\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56429803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/21720163", "body": "No, this isn't thanks.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/21720163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/22212561", "body": "ah good catch", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/22212561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/23861622", "body": "Nah, this is for all of our VS-related tooling", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/23861622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400707", "body": "\"Todo\" items should be work items in Jira not in comments; if it's important open a work item.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400836", "body": "Should these objects also have access to the context?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400875", "body": "nitpick: consider just _context here for symmetry with the properrty.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400922", "body": "Why is this added? consider putting whatever type needs this in .Generator\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9697431", "body": "One of these guys doesn't trim... do it in the constructor instead? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9697431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16444735", "body": "suggestion? It's literally an 'index' into the string. To me `index` and `i` convey the same amount of meaning.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16444735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16445038", "body": "IMO it's **perfect** already :laughing: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16445038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16445094", "body": "per @pranavkm in person feedback will change to type `private struct Nada { }` and will rename to `patience`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16445094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16501513", "body": "changing this to use _writer.NewLine instead - then we're not making an assumption.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16501513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16501656", "body": "I wanted to preserve the old behavior that `Write(null)` can trigger an indent. I found that this method is definitely called with `null`, and it broadens the scope of this change to investigate wither or not the possible indent side-effect is important.\n\nThat said, there are some subtle bugs with the way indenting works here, and I found evidence that there are workaround elsewhere in the code for issues with the `_newLine` field. For instance, notice that none of my new code touches `_newLine` even though I'm detecting newlines. I didn't want to kick that hornets' nest.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16501656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "JeanCollas": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1898", "title": "Consider adding HTML templates", "body": "Would adding custom local HTML templates not be a good option to consider?\r\nSomething similar to the following would be an option for the implementation:\r\n\r\n```\r\n\r\n@functions{\r\n    IHtmlContent DispItem(string id, string name, string description)\r\n    {\r\n        <li>\r\n            <a href=\"/manage/@id\">@name</a>\r\n            <span>@description</span>\r\n        </li>\r\n    }\r\n}\r\n...\r\n<ul id=\"list1\">\r\n    @foreach(var item in items1)\r\n    {\r\n        DispItem(item.Id, item.Name, item.Description)\r\n    }\r\n</ul>\r\n\r\n<ul id=\"list2\">\r\n    @foreach(var item in items2)\r\n    {\r\n        DispItem(item.Id, item.Name, item.Description)\r\n    }\r\n</ul>\r\n\r\n\r\n```\r\n\r\nCreating a separate file and model for this kind of display is sometimes too much as compared as what it intends to do. \r\nSimplifying this by allowing local templates would be helpful. \r\n\r\nExcept if I missed it, it is not possible at this time (except by using html strings concat or external sub-pages/components).\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkArtakMSFT": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1884", "title": "seal the RestrictChildrenAttribute attribute", "body": "This results in a lot of non-supported scenario requests, so we should close the gap by marking the class as sealed.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1884/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1809", "title": "Improve support for precompilation of razor views in class libraries (embedded ui)", "body": "_From @evil-shrike on October 17, 2017 15:31_\n\nAs continue of https://github.com/aspnet/MvcPrecompilation/issues/187\r\n\r\nThe problem: I need a class library with embedded UI. \r\nCurrently it's hard implement such setup when a class library in a solution contains pre-compilable razor views. Lloading views from embedded resource is another option and it works fine. \r\n\r\nAt the end of the mentioned discussion (#187) there was posted a link to blog post about how to implement embedded UI - https://dzone.com/articles/self-contained-ui-running-one-aspnet-core-mvc-site \r\nIt seems to work well. But looks hacky, too much cleaver things should be done in csproj. Another problem it's not documented in official docs.\r\n\r\nSo this issue is an suggestion to have more simplified approach for \"embedded UI\", i.e. keeping razor views in class libraries and automatically compile **and** deploy them.\r\n\r\nSome nuances which should be elaborated:\r\n* a solution with app and lib both can contain views and identical routes (like \"Home/Index\")\r\n* solution should start with F5/CtrlF5 in VS (views should be compiled and deploy)\r\n* on deployment assemblies with pre-compiled views should be deployed correctly\r\n* ideally there shouldn't be required to make a library project \"runnable\" (set `Sdk=\"Microsoft.NET.Sdk.Web\"` and declare `static Main` method) but it's not critical indeed, at least it should be documented\r\n\r\nCurrently (aspnetcore2.0) we have to do the following (thanks to @dasMulli for describing it in this comment - https://github.com/aspnet/MVCPrecompilation/issues/71#issuecomment-282494937)\r\n\r\n1.\r\n```\r\n\t\t<MvcRazorCompileOnPublish>true</MvcRazorCompileOnPublish>\r\n```\r\n2. \r\n```\r\n\t<Target Name=\"SetMvcRazorOutputPath\">\r\n\t\t<PropertyGroup>\r\n\t\t\t<MvcRazorOutputPath>$(OutputPath)</MvcRazorOutputPath>\r\n\t\t</PropertyGroup>\r\n\t</Target>\r\n\t<Target Name=\"_MvcRazorPrecompileOnBuild\" DependsOnTargets=\"SetMvcRazorOutputPath;MvcRazorPrecompile\" AfterTargets=\"Build\" Condition=\" '$(IsCrossTargetingBuild)' != 'true' \" />\r\n\t<Target Name=\"IncludePrecompiledViewsInPublishOutput\" DependsOnTargets=\"_MvcRazorPrecompileOnBuild\" BeforeTargets=\"PrepareForPublish\" Condition=\" '$(IsCrossTargetingBuild)' != 'true' \">\r\n\t\t<ItemGroup>\r\n\t\t\t<_PrecompiledViewsOutput Include=\"$(MvcRazorOutputPath)$(MSBuildProjectName).PrecompiledViews.dll\" />\r\n\t\t\t<_PrecompiledViewsOutput Include=\"$(MvcRazorOutputPath)$(MSBuildProjectName).PrecompiledViews.pdb\" />\r\n\t\t\t<ContentWithTargetPath Include=\"@(_PrecompiledViewsOutput->'%(FullPath)')\" RelativePath=\"%(_PrecompiledViewsOutput.Identity)\" TargetPath=\"%(_PrecompiledViewsOutput.Filename)%(_PrecompiledViewsOutput.Extension)\" CopyToPublishDirectory=\"PreserveNewest\" />\r\n\t\t</ItemGroup>\r\n\t</Target>\r\n```\r\n\r\nOff the top of my head I'd suggest to introduce `MvcRazorCompile=true`.\n\n_Copied from original issue: aspnet/MvcPrecompilation#214_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1809/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NTaylorMullen": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1876", "title": "Add API to RazorSourceLineCollection to enable better understanding of lines in a RazorSourceDocument", "body": "Today the `RazorSourceLineCollection` has too minimal of an API to get enough information about a source document. For instance, you can't go from line Index => line content; this is primarily driven by not being able to get the start position of a given line index.\r\n\r\nTried using this API to improve on our indentation facts service but it didn't have enough information.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1841", "title": "Re-think some of the core concept of the RazorSyntaxTree", "body": "Points of concern here are:\r\n- [ ] Removing chunk generators. Today they're only used as markers to generate IR.\r\n- [ ] Re-think how edit handlers work.\r\n- [ ] Change provisional parsing to be represented in the SyntaxTree. Instead of changing the meaning of provisional items in the SyntaxTree we should represent those items as having dual states (markup or code depending on the interaction).", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1840", "title": "Change BackgroundParser to not be stateful and not spin up threads.", "body": "I imagine this being a way for a user to await a parse. Aka `await FooBGParser.DoAParseOrSomething()`", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1838", "title": "Add IDE service focused integration tests", "body": "These tests would be a lot like our existing baseline tests where they would indicate how a specific service would act at a certain point in the document.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1835", "title": "Publish Razor Addin mpack to a feed.", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1826", "title": "Re-discover TagHelpers when dependent project builds", "body": "In Tooling if you have the following structure:\r\n\r\n```\r\nWebApp\r\n- Index.cshtml\r\n\r\nTestLib\r\n- TestTagHelper.cs\r\n```\r\n\r\nAnd `WebApp` depends on `TestLib`. When you build TestLib after changing `TestTagHelper` the available TagHelpers in `Index.cshtml` aren't refreshed.\r\n\r\nIn order to get refreshed TagHelpers you must build `WebApp` directly.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1824", "title": "ProjectManagerSnapshot infrastructure doesn't work at runtime in VS for Mac", "body": "This is because the IDE doesn't update the Roslyn representations of the world; it just forwards all calls to creation of documents, projects etc. to their own structures and don't bidirectionally show that data. Aka, Roslyn's Workspace will show 0 projects but the Ide's workspace (not Roslyn based) will show all the active projects.\r\n\r\nCreating this issue for tracking purposes.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1813", "title": "Consume new C# completion APIs to avoid loading Razor binaries in non-Razor scenarios", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1760", "title": "Make TagHelperDescriptorFactory errors provide more information", "body": "For instance, when a `TagHelper`s tag name or attribute name is null or whitespace we don't provide the TagHelper type that we're looking at. If we put that information in the error it would be much easier to diagnose issues.\r\n\r\nFor instance: https://github.com/aspnet/Mvc/issues/7029", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1743", "title": "Auto-completing a Razor directive with space results in two spaces being added.", "body": "\r\n\r\n![](https://i.imgur.com/HtThKy3.gif)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1725", "title": "DocumentTrackers need to be refreshed when their impacted document is moved.", "body": "The documents configuration, project, basically everything needs to be recomputed when a cshtml file is moved.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1715", "title": "Tie into ICompletionBroker.Dismissed event to determine provisional reparses.", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1658", "title": "Make directive completions snippet-complete.", "body": "After completing a directive you are placed at the end of the directive name. We should extract token information and translate that into a snippet-based completion. For example, if you were to auto-complete `@model` it'd write out `@model <type>` and then have `<type>` highlighted to be replaced.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1657", "title": "Add token information to directive completions", "body": "With #291 we'll get completions that look like:\r\n\r\n![image](https://user-images.githubusercontent.com/2008729/29832484-41087c9a-8c9d-11e7-80ac-dde0d8db41ea.png)\r\n\r\nWe should extract token information from each directive and conditionally provide information on the directives format. For `@model` this might look like:\r\n```\r\nSpecify the model or page handler for the current document.\r\n@model <type>\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1635", "title": "Move TagHelper directive parsing to make use of Razors Parser/Tokenizer concepts.", "body": "Today TagHelper directives (`@addTagHelper`, `@removeTagHelper`, `@tagHelperPrefix`) utilize string manipulation in order to validate the format of a directive. As a follow up to https://github.com/aspnet/Razor/issues/945 we should move the string manipulation approach to one that is consistent with how all other directives are parsed in order to mitigate future errors.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1616", "title": "Transform @model DirectiveIntermediateNode into a custom directive node type.", "body": "Today our GetModel resolution code assumes that the `DirectiveIntermediateNode` will be in the document. This isn't a safe assumption since we have a directive removal pass that nukes the existence of that node.\r\n\r\nToday this works but it's very fragile.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1596", "title": "SetNamespace does not work when Razor is extended by Mvc", "body": "Today the `builder.SetNamespace(...)` method does not work when registering MVC pieces on `RazorEngine` due to how it attempts to mutate the namespace. Today it tries to add a new document classifier to modify the namespace.\r\n\r\nFor those watching this you can work around this issue by creating a new IR pass that changes the namespace. Example:\r\n\r\n```C#\r\npublic class ChangeNamespacePass : IntermediateNodePassBase, IRazorDocumentClassifierPass\r\n{\r\n    public override int Order => 1100;\r\n\r\n    protected override void ExecuteCore(RazorCodeDocument codeDocument, DocumentIntermediateNode documentNode)\r\n    {\r\n        var @namespace = documentNode.FindPrimaryNamespace();\r\n        @namespace.Content = \"TheNamespaceYouWant\";\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1537", "title": "Investigate owning editor projections and updates", "body": "Today the editor owns projections and its one of the most expensive aspects of the editor. We should see how much we can own.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1451", "title": "Expose a way to have a sanitized class name when writing your own document classifier", "body": "When attempting to create a document classifier you typically want to re-use Razor's class name sanitization logic. The problem is that [API is internal]((https://github.com/aspnet/Razor/blob/d2469e078a649bb10b423e73427ede1a4606a4d0/src/Microsoft.AspNetCore.Mvc.Razor.Extensions/CSharpIdentifier.cs)) and we hardcode the behavior in our Mvc view and page classifier passes.\r\n\r\nI suggest we do one of the following:\r\n- By default create a class name off of the current file path.\r\n- Expose `CSharpIdnetifier` as public instead of internal.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1428", "title": "Introduce [OutputAttributeHint] to allow attributes to function as known HTML attributes when used in the editor", "body": "_From @stap123 on June 12, 2017 9:13_\n\nWhen using the <a> tag helper and a target attribute simultaneously VS2017 gives a warning saying \"Attribute is allowed only when 'href' is present\".  I guess it's pretty obvious why it's happening as it tells us but not sure it's the desired behaviour.\r\n\r\nExample of tag:\r\n\r\n```\r\n<a class=\"list-group-item\" asp-controller=\"Home\" asp-action=\"CPDRedirect\" asp-route-id=\"2\" target=\"_blank\">View all activities</a>\r\n```\r\n\r\nThis is obviously not stopping anything working but thought you might like to know (and it's a little annoying to have warnings when there isn't anything wrong).\r\n\r\nIf this isn't the correct repo, can you let me know the correct one and I will raise there.\n\n_Copied from original issue: aspnet/Mvc#6391_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1248", "title": "TagHelper directives don't record incomplete quote errors correctly.", "body": "Today our quote completion logic is slightly flawed when dealing with a single quote and error reporting. Due to [these lines](https://github.com/aspnet/Razor/blob/f31b45d84a23f52fc564b4892327e5e3e981d66a/src/Microsoft.AspNetCore.Razor.Language/Legacy/CSharpCodeParser.cs#L1869-L1871) when there's a single quote we think the content of a TagHelper directive starts and ends with quotes when in reality it does not.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1237", "title": "Generated class for Razor Pages shows up in VS Solution Explorer when the CSHTML file is open in the editor", "body": "_From @DamianEdwards on March 13, 2017 20:28_\n\n![image](https://cloud.githubusercontent.com/assets/249088/23873906/f624e348-07f0-11e7-8a02-a712a8b76692.png)\r\n\n\n_Copied from original issue: aspnet/Mvc#5957_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1229", "title": "Consider moving @section off of extensible directives", "body": "Today `@section` expects 1 identifier. We accomplished this by creating an extensible directive that accepts 1 member token. This isn't entirely correct though; it ends up looking like:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/2008729/25053925/3e56ea3a-210f-11e7-9ef0-680d3a5bc211.png)\r\n\r\nAnd if you hover over the member you get:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/2008729/25053945/5305aa3e-210f-11e7-83c6-e42e890db145.png)\r\n\r\nWe may want to move section off of the extensible directive infrastructure and have it just be a built-in TagHelper.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1218", "title": "Implicit Expressions do not work for complex doubles", "body": "Trying to use an implicit expression `@AnImplicitExpression` does not work when you specify douples with dots, underscores etc.\r\n\r\nThe following does **not** work (never has):\r\n\r\n- `@1.234`\r\n- `@1.234e23`\r\n- `@1.234_567_890`\r\n- `@1.234_567_890e23`", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1208", "title": "Razor Language Service sign off activities.", "body": "- [ ] TagHelpers highlight in pre-opened files.\r\n- [ ] TagHelpers from primary application refresh on change.\r\n- [x] TagHelpers from packages highlight without build.\r\n- [x] TagHelpers from primary application highlight without build.\r\n- [x] TagHelpers from referenced libraries highlight.\r\n- [x] TagHelpers from referenced libraries refresh on change.\r\n- [x] TagHelpers highlight when restore completes.\r\n- [x] TagHelpers get auto-complete entries when typing elements.\r\n- [x] TagHelpers get auto-complete entries when typing attributes.\r\n- [x] `@addTagHelper` can turn on TagHelpers for an entire assembly\r\n- [x] `@addTagHelper` can turn on a single TagHelper\r\n- [x] `@addTagHelper` can be used in _ViewImports.cshtml\r\n- [x] `@addTagHelper` can be used directly on a view\r\n- [x] `@removeTagHelper` can turn off TagHelpers for an entire assembly\r\n- [x] `@removeTagHelper` can turn off a single TagHelper\r\n- [x] `@removeTagHelper` can be used in _ViewImports.cshtml\r\n- [x] `@removeTagHelper` can be used directly on a view\r\n- [x] `@tagHelperPrefix` works as expected.\r\n- [x] `@tagHelperPrefix` can be used in _ViewImports.cshtml\r\n- [x] `@tagHelperPrefix` can be used directly on a view\r\n- [x] The extension has an icon.\r\n- [x] ViewComponents do not cause errors in views.\r\n- [x] The extension can be upgraded.\r\n- [x] Breakpoints can be hit in cshtml files.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/930", "title": "Verify that localized document for tag helpers works in the IDE", "body": "We now rely on Roslyn to fetch TagHelper documentation to provide at DesignTime. Due to this we need to build dummy packages or something equivalent to mock our existing localized documentation tests.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/883", "title": "Wrong parsing/colorization of comments in Razor files when inline on a tag", "body": "_From @javiercn on December 7, 2016 0:6_\n\nRepro steps:\r\nCreate a Razor file and paste the following contents.\r\n\r\nThe first comment will be colorized in green, the second one in red and blue.\r\n\r\n@*style=\"list-style:none;list-style-type:none\"*@\r\n<ul class=\"list-inline list-unstyled\" @*style=\"list-style:none;list-style-type:none\"*@>\n\n_Copied from original issue: aspnet/Tooling#891_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/858", "title": "VS: Implement out of process support for codegen + extensibility", "body": "This would enable users to modify the Razor parser in ways they haven't been able to before. Being out of process will also enable us to run user code.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/676", "title": "Don't use Span.Content.", "body": "Today we use `Span.Content` in several locations where we don't need to during parse and code gen time. Instead we should be utilizing the Symbols that are available to us to prevent additional allocations.\n\n![image](https://cloud.githubusercontent.com/assets/2008729/12527131/1fd641e0-c12b-11e5-8389-fa1df48499a0.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/675", "title": "Cache Razor Tokens.", "body": "Today Razor has `ISymbol`s aka Tokens (should be renamed) and they are responsible for a large portion of allocations when compiling Razor pages (nearly 10%). We should cache these tokens to reduce their allocation numbers.\n\nI took a stab at doing this and ran into some risky issues which is the reason why I'm writing this issue now. See [here](https://github.com/aspnet/Razor/issues/635#issuecomment-171779141) for details on what the implications of doing this are.\n\n![image](https://cloud.githubusercontent.com/assets/2008729/12527027/a47785be-c129-11e5-9244-622efc217fc4.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/662", "title": "HtmlTargetElement ParentTag doesn't work with @tagHelperPrefix", "body": "Given the following `TagHelper`s:\n\n``` C#\n[HtmlTargetElement(\"row\", ParentTag = \"grid\")]\npublic class RowTagHelper : TagHelper\n{\n}\n\npublic class GridTagHelper : TagHelper\n{\n}\n```\n\nBoth of the following should work, but don't:\n![image](https://cloud.githubusercontent.com/assets/2008729/12279755/e6493fda-b93d-11e5-8c5d-a5901e7e7aff.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/429", "title": "Add ability to specify IntelliSense mode at design time for TagHelper attributes.", "body": "Much like #382 it'd be useful to provide a way to indicate what sort of IntelliSense an attribute should have at design time. This would enable the editor to provide auto-complete options that are useful to the `TagHelper` attribute being used.\n\nEx:\n\n``` C#\npublic class ScriptTagHelper : TagHelper\n{\n...\n    [AttributeIntelliSense(AttributeIntelliSenseModes.ScriptUrlPicker)]\n    public string AspFallbackSrc { get; set; }\n...\n}\n```\n\nShould discuss what modes are available and if we should allow multiple/conflicting `AttributeIntelliSenseAttribute`s.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/401", "title": "String interpolation with nested quotes breaks Razor blocks.", "body": "Today if you are to write the following:\n\n``` HTML\n@{\n    $\"abc{\"123\\\"\"}.def\";\n}\n```\n\nYou end up having a mismatch in curly braces. This is due to Razor not understanding the `{` syntax in string interpolation and therefore parsing the strings incorrectly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/96", "title": "Need to handle C# code in html element tag", "body": "We need to provide a way to handle \"code\" inside of an html tag that happens to be a tag helper.\n\nFor instance:\n\n```\n@{ foo = \"class=\\\"bar\\\"\"; }\n<div @foo style=\"...\">\n```\n\nThis can be handled as an empty \"Key\" or \"Value\" entry into the attributes dictionary OR we could throw an error.\n\n<!---\n@huboard:{\"milestone_order\":96.0,\"order\":96.0,\"custom_state\":\"\"}\n-->\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/96/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/49a3b6bcae7b39b04655a2f8657cd15178c7afe0", "message": "Use ZipArchive task instead of powershell.\n\n#1937"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/968e033e4bc1a437c3a7bf8f1c886ca0f4800a9f", "message": "Make Block and Span cache Length.\n\n- Part of caching length required the `Span`'s `ReplaceWith` method to propagate its changes to its parent so that it can propogate the change to invalidate all parent length caches.\n- Added Span and Block tests to validate the interaction of caching.\n\n#1927"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f025a27f042e13d0a753d559f2f2e9cec8ae0a1c", "message": "Unify how AdhocWorkspace is constructed.\n\n- Created a new `TestWorkspace` type to lock on `AdhocWorkspace` construction. This type can't be constructed/changed in parallel.\n- Updated test usages of `AdhocWorkspace` to make use of `TestWorkspace`.\n- Added a `Microsoft.CodeAnalysis.Razor.Workspaces.Test.Common` project to have the `TestWorkspace` type.\n\n#1913"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8d6b86c76a17067b8fce656cfbab03750b779b15", "message": "Add `RazorLanguage.CoreContentType`.\n\n#1852"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/e2703fe5f6f1cdcb158fbe867e2724655ebf7308", "message": "Added version constant so WebTooling can consume.\n\n- Updated the VS for mac versions to 7.5.\n\n#1918"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/66d244aafc66434dd5b0d42fe00d0d50dfe7d227", "message": "Make unit test work on linux"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d4994eb4a451203f5cf6c5f7dc1543886f940b96", "message": "Added DefaultRazorIndentationFactsService unit tests.\n\n- Already had a good variety of integration tests so refactored the service to properly unit test each piece.\n- Found several pieces of unneeded code (wasn't being used) so removed it.\n- Removed the `LocateOwner` logic that was embedded in the service. We already have an equivalent locate owner on our `SyntaxTreeNode` items.\n\n#1698"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/63aceea121d1eaaf0dc412a09eccb7b2f2256bad", "message": "Change TagHelperBlockRewriter's error usage to use RazorDiagnosticFactory.\n\n- Changed `DefaultRazorDiagnostic` to expose a little more information for tests. This info is only available when casted to the `DefaultRazorDiagnostic` type and only available internally.\n- Changed parameter order of a `DefaultTagHelperTargetExtension` diagnostic.\n- Updated baselines of files in `Razor.Language.Test`.\n- Added a new convenience constructor on `SourceSpan`. The ctor is equivalent to calling the class with a SourceLocation.\n\n#1827"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/926dae0d885a18afc39b0e1fcc99362381b9a7e8", "message": "Move DefaultTagHelperTargetExtension errors to use RazorDiagnosticFactory.\n\n- Added tests validating these errors because we didn't have any before.\n\n#1827"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4b93741610ad4df73a1fcde4106931f261d35b6c", "message": "Add Mac project build change trigger.\n\n- Added a Mac specific implementation of the project build change trigger. It applies to all types of project builds so we need to do a little extra filtering to ensure that we're not operating on a non-ASP.NET Core project.\n- Added tests to validate that the project build event fires correctly.\n\n#1851"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/463e11b73941a9b6a26ad771c50f92ab770de974", "message": "Make SyntaxTree mutations not leak.\n\n- Prior to this when the partial parser would successfully parse a change we'd mutate the returned syntax tree so any data inquired about the tree would then be wrong. We now isolate mutations to copied versions of the syntax tree.\n- Added copy tests to ensure that we were appropriately copying all the various syntax node types.\n\n#1793"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/7234850c9a9234246e226995354c06280a9024f3", "message": "Update MonoDevelop.Sdk to 1.0.1.\n\n- The update includes properly signed binaries so they can be used in tests."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4164821e4c7c8a3fbf31794edc5433bf96a18e25", "message": "Add VS agnostic non-OOP DefaultTagHelperResolver.\n\n- Added tests for the VisualStudio.Editor tag helper resolver.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/1aff9d0031f8846e836d4050aee6ab9de49b5f12", "message": "Make RazorEditorFactoryService VS agnostic.\n\n- Moved the editor factory service into the Editor dll. It did not have any windows specific functionality within it.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f7636fdfc022b303f2811926b107357f10557c34", "message": "Add TextBufferProjectService Mac implementation.\n\n- Was unable to test the text buffer project service class due to signing issues with the MonoDevelop.Sdk dependency.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/1e1630068f9ff71adb5f13331f9032b2d1d82065", "message": "Make DefaultTagHelperResolver use the correct GetTagHelpersAsync.\n\n- Prior to this we weren't overriding the `GetTagHelpersAsync` method resulting in our TagHelper discovery being executed in-process.\n- Removed legacy `ITagHelperResolver` legacy types."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b73c50be410cce7446e3adb7a00c1b8814af3635", "message": "Add Mac implementation of FileChangeTracker.\n\n- Added a LanguageServices Mac test project.\n- Added a few tests for the new `DefaultFileChangeTracker`. There's currently an issue with the MonoDevelop.Core binaries we're compiling against which doesn't allow me to unit test other pieces of the class (they depend on instantiating mono develop objects).\n- Added IVT from product projects to new mac testing project.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4476a72ecfec6d6c6917a74a24bd70182e34a6d9", "message": "Refactor `ImportDocumentManager` to not be windows specific.\n\n- Added a `FileChangeTracker`, `FileChangeTrackerFactory` and corresponding implementations. These types now enable us to implement Windows and Mac file change tracking instead of replacing the entire import manager.\n- Changed the import manager to be a Roslyn based service.\n- Moved import manager implementation to the editor.razor assembly now since it no longer depends on windows.\n- Updated import manager unit tests.\n- Added import manager integration test\n- Added file change tracking tests.\n\n#1804"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/65cdddf5d968c346d6bf0374a53bc9af82739721", "message": "Make DefaultVisualStudioDocumentTrackerFactory VS agnostic.\n\n- Moved `DefaultVisualStudioDocumentTrackerFactory` from language services Razor to editor Razor.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/37eed518f8311a5646668b02a7aebd2d76159343", "message": "Make VisualStudioRazorParserFactory VisualStudio agnostic.\n\n- Removed the `Microsoft.VisualStudio.Language.IntelliSense` dependency from `Microsoft.VisualStudio.Editor.Razor` because it isn't supported in VS for mac.\n- Replaced `ICompletionBroker` usage in the VS agnostic dll with a new abstract type `VisualStudioCompletionBroker`. This also enables us to implement completion\n- Added Mac implementation of new `VisualStudioCompletionBroker`.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/7cd1b6a5d02957517c79e1c0016a8aa1693ab782", "message": "Make BraceSmartIndenterFactory VisualStudio agnostic.\n\n- Moved the `BraceSmartIndenterFactory` into the `Microsoft.VisualStudio.Editor.Razor` assembly so it can be used on Windows and Mac.\n- Changed how the factory is exported since its only used internally. It now uses Roslyn services in the context of a Razor language service to be consistent with how the rest of Razor works.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ba496bf1aff436fbb17e5b1badd35ba5d1131c59", "message": "Add a way for tooling to determine if a span corresponds to a TagHelper.\n\n- This enables the editor to ask us if an HTML parent happens to be a TagHelper.\n\n#1778"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/7ec0e9fb232b9a9b4d31f4b27c5d61d0869bdd4f", "message": "Make GenerateMPack target more resilient."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/a0f410145362457777b6e30938b7c90f48c96665", "message": "Add Mac implementation of ErrorReporter.\n\n- Moved the existing error reporter factory temporarily into the windows specific language service assembly so it did not conflict with the Mac specific implementation. The Windows VS API will be exposed later via https://github.com/aspnet/Razor/issues/1795.\n- Updated the error reporter factory to specify service layers so the VS for mac implementation took priority.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bc8b2c86fdda75380941cae18a57d1c54e736347", "message": "Add Mac implementation of VisualStudioForegroundDispatcher.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f67670927f6e13242d8b3797611a480eb0c336ad", "message": "Add Mac implementation of VisualStudioWorkspaceAccessor.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/cd1d57f97b9051e058fdd800bfdcaa3cf9f22e53", "message": "Add MonoDevelop.Core and MonoDevelop.Ide addin dependencies.\n\n- Added the runtime package dependency to allow for proper assembly building.\n- Added a new external package source for the MonoDevelop.Sdk.\n- Had to change the MPack version to be compliant with VS for mac versioning support.\n\n#1789"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b6fb9bda5000757c6938909c5155cd582d57a3bf", "message": "Remove flaky, already tested test.\n\n- This test was flaky due to the nature of what it was testing and had negative value due to the testing complexities. In the integration test pieces (running VS) this is already tested thoroughly."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/182714c324331ddafd0d79d6f5bb6704010fe2ce", "message": "Move away from WPF text view connection listener.\n\n- Had to add a new NuGet feed to access latest VS bits.\n- Updated tests to react to new ITextViewConnectionListener.\n\n#1735"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/df1d0bbcd45d74d2699ac932a04539091191f87c", "message": "Change text buffer code document provider to follow our public API MEF rules."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/345eb29c62c55d141fb323138b642561e478e9c2", "message": "Update code doc provider to only rely on VSRazorParser.\n\n- Prior to this change the code document provider took in many sub-providers to allow for understanding of the old RazorEditorParser AND VisualStudioRazorParser. Now that RazorEditorParser is gone we can also change the code doc provider."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/00ab6624290d79a33380af836772c435519aedef", "message": "Merge branch 'rel/vs15.6' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4af7a47aac9179aa3030ceba090ab614dc2adb2b", "message": "Change code document provider to work in old Razor.\n\n- Prior to this the old code document provider would utilize the editor factory service which would incorrectly create a parser for older Razor documents. This was wrong on many levels.\n- Updated tests to react to new expectations."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4f7aab7720e9a000d018e34d8902f5b9e079ecb4", "message": "Prevent Razor Core from running in non-core scenarios.\n\n- Also added tests.\n\n#1776"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/fa2d79296abc2b596c4c18a901616ad57fb7dd2a", "message": "Merge branch 'dev' into rel/vs15.6"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6cf78ceb1bbdfd0a8d573925f09fd540f5f146c1", "message": "Move TagHelperCompletionService to VS.Editor.Razor and export it.\n\n- Moved service poco types: `AttributeCompletionContext`, `AttributeCompletionResult`, `ElementCompletionContext` and `ElementCompletionResult`.\n- Exported DefaultTagHelperCompletionService.\n\n#1762"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/458111ad03c8b46a8a1ebab472f3b23f845415c3", "message": "Move TagHelperFactsService and export it.\n\n- Created a `TagHelperFactsServiceInternal` and export its public counterpart in `Microsoft.VisualStudio.Editor.Razor`.\n- Updated tests to react to new naming.\n\n#1762"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/520876e55d3bb86d90b3bf22e4c71db07283dd58", "message": "Re-add some Legacy ITagHelperResolver infrastructure.\n\n- This is required until the TagHelperProjectSystem is completed."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/44b4bf6bc607a3748feb6b1b8a91c42b5e539579", "message": "Cleanup legacy and unintentionally public bits.\n\n- Made `RazorTemplateEngineFactoryService`, `TagHelperResolver`, `RazorDiagnosticJsonConverter` and `RazorLanguageServiceException` internal.\n- Deleted all items in the Legacy folder in VisualStudio.LanguageServices.Razor and `RazorLanguageServiceException`.\n\n#1762"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/44e58740290f8622f8f83ecf7c3ff5c7728b64b6", "message": "Move RazorSyntaxFactsService to VS.Editor.Razor and export it.\n\n- Moved service poco types: `AcceptedCharacters`, `BlockKind`, `ClassifiedSpan`, `SpanKind` and `TagHelperSpan` into VS.Editor.Razor.\n\n#1762"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/de23788019fc83400be7f60335eed6032c60162c", "message": "Move indentation service to VS.Editor.Razor and export it.\n\n- Removed indentation service extensions and made `GetDesiredIndentation` understand `ITextSnapshot`s and `ITextLineSnapshot`.\n- Updated our test `StringTextSnapshot` implementation to have the required features our indentation tests require.\n- Updated indentation service tests to use new API.\n\n#1762"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/44a47182b229ef998c9e520eb5d3a4f5d8c7fae1", "message": "Add EditorSettingsManager as an exported MEF component.\n\n- Internalized the core implementation of `EditorSettingsManagerInternal`.\n- Added a `VisualStudioWorkspaceAccessor` to enable the `Microsoft.VisualStudio.Editor.Razor` project to have access to the current workspace. Only added the Windows specific implementation of this type since the VS for mac implementation will require infrastructural work to make happen.\n\n#1762"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/80fdad0551f320174ee817ef385468547e08dfd6", "message": "Revert \"Only use release VS.\"\n\nThis reverts commit 834fd5a5d06e8a4b3eb9360f2e809ebc8e8807fe."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/801ad075601be8f3d04ff49a0ddf411fb43d32e6", "message": "Add TextBuffer snapshot restriction back to VisualStudioRazorParser."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/399dcca4f2a6b4edfc882a6837c81a3d2a41dcd6", "message": "Make Foreground dispatchable methods noop if parser is disposed.\n\n- Added tests to validate each of the new noopable methods.\n\n#1750"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/834fd5a5d06e8a4b3eb9360f2e809ebc8e8807fe", "message": "Only use release VS."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/a2972ebf1ce0b7bde9da4444523503330f10898d", "message": "Dispatch DocumentStructureChanged event on foreground thread.\n\n- Had to add extra logic to track document structure changes so listeners could know if an event was on its way or not.\n- Added and fixed some tests.\n\n#1748"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ab62ea9321061a75c18badf26ac3f68b8c451f3b", "message": "React to API feedback on VisualStudioRazorParser.\n\n- Changed `ReparseAsync` to be `QueueReparse`. It's now async void to not give the misconception that it blocks until a reparse has been completed.\n- Removed `IContextChangedListener`. People can get the same effect of the interface by retrieving the document tracker interface via the `RazorEditorFactoryService` and then when its context changes getting the parser.\n- Exposed `TryGetParser` to aid in replacing `IContextChangedListener`.\n- Updated tests to not rely on `IContextChangedListener`."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d0276973897e70c7d1793d0c5611c972018ccdc5", "message": "Merge branch 'rel/vs15.5' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6ac0137a9ff9f42ad4ee89df2e7891401a575f23", "message": "Make AtDirectiveCompletionPoint resilient to null owners.\n\n- Added a test to verify the new owner == null case.\n\n#1733"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/fb8aff12f130e39664c097fe94e358a15ae7013e", "message": "Add EditorSettings management to workspaces.\n\n- Built a design where there's a singleton `EditorSettingsManager` that handles the \"current\" settings state in the world. When it detects that settings have changed via an update method being called it dispatches a `Changed` event.\n- Exposed editor settings on the document tracker. When the editor settings change the document tracker dispatches to any listeners that its context has changed.\n- Added tests to validate all the various settings management.\n\n#1718"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/212d97e51170d1df49a6a7569e6a063e66a89c99", "message": "Manage VisualStudioRazorParser lifetime.\n\n- Exposed `VisualStudioRazorParser`, `DocumentStructureChangedEventArgs` and `ICanHasContextChangedListener` as ways to consume the new parser for a Razor document.\n- Split the `VisualStudioRazorParser` into an abstract base and an implementation to avoid internal constructors.\n- Changed the parser and corresponding smart indenter to take in document trackers, template engine factories and parser context change listeners. Of these additions the parser context change listeners will be deprecated once we own the TagHelper discovery mechanisms.\n- Changed how the parser manages its internal parsing life cycle. It now creates template engines when the document tracker tells it to. So when project changes happen or new documents are opened the parser will re-instantiate its internal parser to ensure that it is parsing against the correct configurations.\n- Removed all accessor services in favor of a singular RazorEditorFactoryService. This service is responsible for retrieving/creating various Razor components.\n- Changed the code document provider to now use the parser provider in order to locate code documents associated with buffers. Prior to this that logic was hard coded.\n- Removed old template engine reconstruction logic in the document tracker now that the parser owns that piece.\n- Updated tracker to notify listeners when it's unsubscribing. This is how listeners can know when to tear bits down.\n- Refactored/added pieces to the `DefaultVisualStudioRazorParser` in order to improve its unit/integration testing ability.\n- Updated existing tests to react to new signatures.\n- Added new visual studio razor parser tests, uncommented existing ones, and re-enforced ones that were previously flakey.\n- Added various tests for the new services added, i.e. text buffer factory service tests.\n\n#1630"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/0241e8ff8b87537a31f75750e7fc0ac94a340645", "message": "Pin CodeAnalysis.CSharp to workaround newer VS MSBuild restore fixes.\n\n- Noticed that our VSIX target would fail to restore the project on newer versions of MSBuild 15.0."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/31c16af40bbe10c9fb924be559bd42955aa4e246", "message": "Add smart indentation for brace completion.\n\n- Added a standalone brace smart indenter that listens to `ITextBuffer` changed events to determine when a brace completion event needs to be handled.\n- Added methods to deal with getting document trackers from `ITextBuffer`s.\n- Added a `BraceSmartIndenterTest` and `BraceSmartIndenterIntegrationTest` to verify all parts of the smart indenter.\n- Moved private test infrastructure classes into their own files and expanded on their functionality to enable the brace completion smart indent scenarios.\n\n#1538"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/e3d2b48b8989dc022cd68e14b05521cda7eb4faf", "message": "Fix [ForegroundFact].\n\n#1716"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/786f825a3dbbc62a0daaa1d495587dfa3b23f5c7", "message": "Change powershell zip procedure to work on earlier versions."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/88a950d436a9a6998994684f8560b500cedaf4ff", "message": "Revert \"Revert MonoAddin build steps.\"\n\nThis reverts commit 44519485fd4d0d93fc347484b52375e4bfb1bbd8."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/44519485fd4d0d93fc347484b52375e4bfb1bbd8", "message": "Revert MonoAddin build steps."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/059264ba346aa783b0b48749ab2ad6b05e201c18", "message": "Fix RazorAddin project.\n\n- Move assembly attributes to work with incremental compilation.\n- Utilize Mono.Addins from nuget.org."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/3c73812f8ab78f078edec634fa036b4dd3386091", "message": "Revert \"Revert \"Add Microsoft.MonoDevelop.RazorAddin.\"\"\n\nThis reverts commit fa0990fe008b91600fd1c54acee48de9456ed0dd."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/fa0990fe008b91600fd1c54acee48de9456ed0dd", "message": "Revert \"Add Microsoft.MonoDevelop.RazorAddin.\"\n\nThis reverts commit fca4f238951974dd5ce0c29e77a8a69f1d46cb2c."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/fca4f238951974dd5ce0c29e77a8a69f1d46cb2c", "message": "Add Microsoft.MonoDevelop.RazorAddin.\n\n- As part of this work I also added `Microsoft.VisualStudio.Mac.LanguageServices.Razor` to be the Visual Studio for Mac specific Razor code.\n- Added MSBuild infrastructure to automate creation of MonoDevelop addins (MPacks). This work enables us to not have a dependency on a specific version of monodevelop and does not require us to have tool-prerequisites on the box. Every build outputs the mpacks into the artifacts/build directory.\n- Built in build-level metadata pieces to workaround how addins are typically developed. They are usually authored C# first and then config files are generated after the fact; with this changeset we auto-generate the addin.info and its corresponding assembly attributes. Both of these take information directly from the build system.\n\n#1696"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6c8286eed777afedd5ff7a878e23913273194f9f", "message": "Split LanguageServices.Razor.\n\n- Created a new `Microsoft.VisualStudio.Editor.Razor` assembly to contain Visual Studio platform agnostic info.\n- Added a new `Microsoft.VisualStudio.Editor.Razor.Test.Common` project to be the centerfold for all VisualStudio agnostic test pieces.\n- Added a `Microsoft.VisualStudio.Editor.Razor.Test` project and pulled in LanguageService test files into the the Editor.Razor.Test project to correspond to their movement in the src project.\n\n#1690"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/edcf6857d1d4ad0f63f489feb2c978c8df948b31", "message": "Add x64 service hub json.\n\n- Updated corresponding entries in manifest and csproj to reflect the new json addition.\n\n#1705"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/67f255adca773e12391bd404a98d4a4a01d903de", "message": "Change completion provider to be lazy if not Razor.\n\n#1672"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/0155cf2c735ee4e38c16ebcd11d87e30e219d164", "message": "Fix inherits directive description.\n\n#291"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/61260ddf1cca8ae56797632a3ea80217ca08c3fe", "message": "Add basic Razor directive completion.\n\n- Added APIs to retrieve an `ITextBuffer` from a `Document` and to retrieve a `RazorCodeDocument` from an `ITextBuffer`.\n- The `RazorCodeDocument` from `ITextBuffer` API supports both the new and old Razor parsers so we can transition seamlessly between the two.\n- Added logic in the `RazorDirectiveCompletionProvider` to consume descriptions from `DirectiveDescriptor`s. This is then surfaced via tooltips.\n- Retrieved currently active `RazorCodeDocument` given a Roslyn buffer and harvested all directives to display in the completion list.\n- Added unit tests to validate each new services functionality.\n\n#291"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/347e4158fb7b2c291644cb705f703b6459f691c5", "message": "Skipped flakey tests.\n\n- Instead of utilizing ConditionalFact's we're silently skipping these tests to avoid the mass warnings you get otherwise."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8b4fc0cef6db1d70a3ef6d9044dc5f151e082afa", "message": "Take control of VisualStudioRazorParser reparse test mechanics.\n\n#1644"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/24154ec4c2c64cad32e2e3d3d0a9dcded8bb8555", "message": "Create a VisualStudio parser to handle the editing loop.\n\n- Renamed `RazorEditorParser` => `VisualStudioRazorParser` (maintained a copy of the original in Legacy)\n- Tried to make as little changes as possible to the `BackgroundParser` due to its complexity; mostly just removed the TreeStructureChanged logic since this is re-done on the Razor editor side of things.\n- Split the `RazorEditorParserTest`s into two separate tests. Partial parser tests and the VS parsing tests.\n- Updated `StringTextSnapshot` to support changes in order to test the VS parser.\n\n#1536"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6e42c8d0e4d4cbb53cdb574ecc36607ea141ecac", "message": "Made section 1.X compatibility only apply at design time.\n\n#1637"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/5104e8c806ced91229a092cf78a52dc8b717f651", "message": "Make 2.0 codegen compatible with 1.0 projects until multi-targeting is complete.\n\n#1637"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/db805eb3e306c82e979af8e23c717dc9aef3eabd", "message": "Fix ModelExpression's in section directive blocks.\n\n- Changed `SectionDirectivePass` to move non-token body nodes from the original `DirectiveIntermediateNode` to the `SectionIntermediateNode`. By doing this there's no longer dual references of `SectionIntermediateNode` bodies.\n- Added MVC tests for current and 1_X extensions.\n\n#1614"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/127784e0589717f9a302b91ad8a5994592cf54b7", "message": "Fix clean machine/testing for Mvc.Extensions."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/aa980fc67c72743694b004bc5dd29869c41281fd", "message": "Roslyn-ize our tooling contracts.\n\n- Added `ILanguageServiceFactory` types for all serviceable contracts.\n- Maintained binary compatibility by copy/pasting existing services into a Legacy folder.\n- Added a Workspaces.Test project since their implementations moved.\n- Updated binary incompatible version of `RazorSyntaxFactsService` to not depend on VisualStudio. Added an extension type to the VS.LanguageServices.Razor project to enable easy-access from VisualStudio.\n\nBelow on refers to the binary incompatible copies.\nCore services that were **entirely** moved from VisualStudio.Razor => Razor.Workspaces are as follows:\n- `RazorSyntaxFactsService`, this included mutating the API to not depend on VisualStudio and moving some primitive types such as `AcceptedCharacters`.\n- `TagHelperCompletionService`\n- `TagHelperFactsService`\nThese all have a `ServiceLayer` of `Editor`.\n\nBits that were partially moved:\n- `RazorTemplateEngineFactoryService`. The Default implementation and its corresponding factory still live in VisualStudio.Razor. This way Razor.Workspaces can get by without a reference to Mvc.Razor.Extensions.\n- `ITagHelperResolver` used to exist in VisualStudio.Razor. Removed the type and replaced its usage with the already-existing `TagHelperResolver` type in Razor.Workspaces. Both contracts were nearly identical.\nThese all have a `ServiceLayer` of `Default`.\n\n#1260"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/271de04d15841d1b379dfab5c71d9a2998a68ad6", "message": "Revert \"Add Roslyn feed to work around missing RTM packages.\"\n\nThis reverts commit 28292086ec18dd516d28f91c4efdcd812e19951b."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/184ab74e68e89836ba2de4a1006f0a95217acebb", "message": "Don't render view attributes when in design time.\n\n- This is a temporary work around that's needed until we have multi-targeting support in https://github.com/aspnet/Razor/issues/1535."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/006b4651da5049fc3b1b65dd057a8f8bda7609e1", "message": "Change product code to work with editor expectations.\n\n- Descriptor providers should not be pushing `null` descriptors into the overall list of `TagHelperDescriptor`s; this causes null refs on the editor side of things at design time.\n- Expose `FilePath` on `RazorEditorParser` for the editor. The editor currenlty uses the `RazorEditorParser` as a place to hold some state about the Razor document."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8fac9141d8b68fbf29220dc6af18b1f8bce00f6d", "message": "Revert Roslyn dev dependency increase.\n\n- This is needed for the Razor editor to work inside of VS. Once a version of VS is published that supports 2.6 + then we can undo this change."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/2a69b50a6410558a46ced2686be10e86943b52cd", "message": "Change Razor.Test.Common to not act like an executable.\n\n- There's no need for this test library to have a conditional TFM because it's never run under the desktop TFM when crossplat."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/28292086ec18dd516d28f91c4efdcd812e19951b", "message": "Add Roslyn feed to work around missing RTM packages."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f8d43853f89b7ebbc71d6e4d3b65b00126f768e2", "message": "Re-introduce RazorEditorParser.\n\n- Revived `RazorEditorParser`.\n- Made `PartialParseResult` internal and renamed it to `PartialParseResultInternal`. This fell in line with other syntax tree types.\n- Moved the `RazorEditorParser` implementation away from `TextChange` and `ITextBuffer`. Instead it now relies on `SourceChange` and the VS contract `ITextSnapshot`.\n- Added `RazorEditorParserTest` to ensure the changes in implementation did not impact previous functionality.\n- Removed some obvious tests that unnecessarily re-tested behavior that was already verified.\n- Updated tests.\n- Moved several Language.Test types to the common test project so they could be reused.\n\n#1259"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/99ff9d44a340907d0fbf60e3f230708e7dd9e6bd", "message": "Update repo to utilize ApiCheck.\n\n- Re-enabled api check for `Microsoft.AspNetCore.Razor` and `Microsoft.AspNetCore.Razor.Runtime`. This resulted in me adding known breaking changes for the packages.\n- Added empty baseline files for `Microsoft.AspNetCore.Razor.Language`, `Microsoft.AspNetCore.Mvc.Razor.Extensions` and `Microsoft.CodeAnalysis.Razor`.\n- Disabled ApiCheck for `Microsoft.CodeAnalysis.Razor.Workspaces`, `Microsoft.CodeAnalysis.Remote.Razor`, `RazorPageGenerator` and `Microsoft.VisualStudio.LanguageServices.Razor` to prevent ApiCheck warnings about missing baselines.\n\n#1107"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/02160a04d9c69a4394d342105fac38953d1e3f1b", "message": "Make ViewComponentTagHelperMetadata static.\n\n#1521"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/45fad171a6e006ba7acc425cc6edcd802ad296d8", "message": "Reduce public surface area of some APIs.\n\n- Change `DefaultRazorEngineBuilder.DesignTime` to be getter only\n- Make `DocumentClassifierPassBase.TargetExtensions` private.\n\n#1510"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/d891fae4a9e816e7ec251328dc09729169dc84d7", "message": "Rename ThrowForMissingEngineDependency.\n\n- Rename `RazorEngineFeatureBase.ThrowForMissingEngineDependency` to `ThrowForMissingFeatureDependency`\n- Rename `RazorEnginePhaseBase.ThrowForMissingEngineDependency` to `ThrowForMissingFeatureDependency`\n\n#1510"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bba508c7c649d1efc18ab421316af8f5bcf86080", "message": "Change TagHelperDescriptor APIs to use IReadOnlyList.\n\n- Change `TagHelperDescriptor.AllowedChildTags` to be `IReadOnlyList`.\n- Change `TagHelperDescriptor.BoundAttributes` to be `IReadOnlyList`.\n- Change `TagHelperDescriptor.TagMatchingRules` to be `IReadOnlyList`.\n- Change `TagMatchingRuleDescriptor.Attributes` to be `IReadOnlyList`.\n\n#1510"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/c34a99e188f69a989ae6a9947c333d8327f4b84e", "message": "Update the TagHelperBinding API to use IReadOnlyList.\n\n- Changed `Attributes` to return `IReadOnlyList<KeyValuePair<string, string>>`.\n- Changed `GetBoundRules` to return `IReadOnlyList<TagMatchingRuleDescriptor>`.\n- Updated tests to react to new signature.\n\n#1510"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/cb40da4e0fc1823805e9054c8f365df1f2dc70ff", "message": "Rename ParseOnlyLeadingDirectives.\n\n- Was renamed to `ParseLeadingDirectives`.\n\n#1510"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b68290ddb793fdd8e23f76b1da1abe9137c9235a", "message": "Make `RazorParserOptions` creation more like RazorEngine\n\n- Removed verbose `Create` methods in favor of the `RazorParserOptionsBuilder`. This is similar to how the `RazorEngine` functions.\n- Added a `CreateDesignTime` method.\n- Updated existing tests to use new Create syntax.\n\n#1510"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/87a5435036d184d6fbb9725cc5609f1b3da8276a", "message": "Make `RazorParserOptions.DesignTime` getter only.\n\n- Renamed `IRazorParserOptionsFeature` to `IConfigureRazorParserOptionsFeature`, the original interface was re-purposed to get the options rather than configure them.\n- This involved re-designing how we set design time on the `RazorParserOptions` object. The indicator of `DesignTime` is now configured at the RazorEngine level via a parser options provider feature.\n- Moved options construction from the phase into an `IRazorParserOptionsFeature` type.\n\n#1510"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/1952", "title": "Add support for RazorProjectEngine imports.", "body": "- Added default implementation of the Razor import feature that consumes all expanders in the system.\r\n- Added an `IRazorImportExpander` API that allow implementations to participate in creation of a list of imports given a source file path.\r\n- Added `DefaultImportFeature` to the default list of features added to a `RazorProjectEngine`.\r\n- Added tests for `DefaultImportFeature`\r\n\r\n#1828", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/1949", "title": "[Design] Add key contracts and builders for RazorProjectEngine.", "body": "- These contracts introduce a new `RazorProjectEngine` concept which allows for users to configure 1 entity that's responsible for the RazorEngine and project.\r\n- The `RazorProjectEngineBuilder` has a collection of features that are dispersed on the created `RazorEngine` and the `RazorProjectEngine`.\r\n- Included a complete implementation of `RazorProjectEngine` it introduces the extension points for the project engine. The primary one includes the `IRazorImportFeature`. Allowing multiple imports to take part in import discovery will come later.\r\n- Included a complete project engine builder implementation.\r\n\r\nMy goal for this design was to come up with a pattern that had 1 entry point to configure both the project engine and Razor engine resulting in a user (or framework) never having to create the RazorEngine manually. This allows for a framework to fully customize the Razor code generation process from finding imports to changing how your Razor turns into C#.\r\n\r\nHow this will play out in practice is you'll do:\r\n\r\n```C#\r\nvar mvcEngine = RazorProjectEngine.Create(projectFileSystem, builder =>\r\n{\r\n    // Register all things MVC\r\n    RazorExtensions.Register(builder);\r\n});\r\n\r\nvar blazorEngine = RazorProjectEngine.Create(projectFileSystem, builder =>\r\n{\r\n    // Register all things Blazor\r\n    BlazorExtensions.Register(builder);\r\n});\r\n```\r\n\r\nBig take away is that `RazorProjectEngine` concepts and `RazorEngine` concepts are ambiguous in the `RazorProjectEngineBuilder`; that builder has the knowledge to split the features among the two engine/project engine properly.\r\n\r\n#1828 \r\n\r\n/cc @mkArtakMSFT ", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33838015", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33838015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33840651", "body": "That's the : shipit: (without the first space) symbol :smiley: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33840651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35014533", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35014533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36162955", "body": "Decided to get the core code change in first, working on Test modifications now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36162955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36714820", "body": "Just realized that when I merged this I overrwrote the changes I made on my laptop -_- at work which is why things are still missing.  GAH, re-doing them\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36714820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36715231", "body": "Have the code re-done, will CR in person tomorrow with @pranavkm or @yishaigalatzer \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36715231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37623256", "body": "Yup can definitely do that\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37623256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37678437", "body": "@Eilon that'd be tough because we need to have parity with the view engine.  The generated signature needs to match the abstract RazorView class.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37678437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37765956", "body": "@Eilon Completely agree.  It's something we need to tackle, for now I've filed an issue to discuss it and make changes in the near future.  We'll also need to make changes to allow writes to be async if the user wants because in todays world\n\n```\n@await Foo()\n```\n\nis not valid which is a very valid use case (same thing will also have to be talked about for helpers etc.).  Sooo that being said this PR is the initial piece of the asynchrony work which we are revisiting to address your concerns.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37765956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/38841800", "body": "This is a WebFX issue in resolving Layouts.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/38841800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/39365303", "body": "Do all the other tests pass?  I'd think you'd need to regenerate the test output\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/39365303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/39371529", "body": "If all tests pass :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/39371529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/40432340", "body": "This has been fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/40432340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/40432386", "body": "si\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/40432386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42698237", "body": "Updated PR, let me know if I'm good to get it in.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42698237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42717806", "body": "Code checked in.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42717806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42722065", "body": "@yishaigalatzer I noticed in the linked item that you closed it stating we wont fix.  This also hold true for vnext razor?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42722065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42895038", "body": "Bad version, this was previously fixed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42895038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43014315", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43014315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43118277", "body": "Waiting for signoff\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43118277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43142971", "body": "This applies to any implicit expression, such as:\n\n```\n@DateTime.Now // SELECT @DateTime|.Now|\n@DateTime. // Replace with .\n```\n\nBad intellisense\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43142971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43242859", "body": "Squashed and pushed changes, closing PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43242859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44071997", "body": "I'm not seeing the build errors on my end.  Repro?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44071997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44072090", "body": "@davidfowl is there a way to exclude files in test projects?  Ex: The Razor test project has tons of files that should not be compiled and are currently embeded resources.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44072090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44478116", "body": "Repro'd\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44478116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44676375", "body": "Closing this and going to do a PR that contains both 32 and 18 in one (they end up relying a lot on eachother).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44676375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45153532", "body": "@davidfowl I actually had the lowercase project.json at first and then looked at the MVC repo and they're all Upper case so I undid the lowercaseness :)\n\nShould I lowercase here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45153532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45154156", "body": "Sooo In VS tooling it shows them as uppercase, on the filesystem it's not.  What the hecks up with that? hah\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45154156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45156492", "body": "Moving this to a new PR (rebased on dev since other PR closed).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45156492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45798421", "body": "Going to wit for more testing until I get this in... Stay tuned.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45798421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45810266", "body": "Looks like we got some testing verification.  Am I good to get this in?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45810266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46252455", "body": "bump, @yishaigalatzer @Eilon \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46252455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52096482", "body": "This needs to also handle \"VoidElements\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52096482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52708988", "body": "Solid, :shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52708988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52987129", "body": "Addressed comments and updated PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52987129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53348338", "body": "Addressed comments for all except for the one q: https://github.com/aspnet/Razor/pull/86#discussion_r16681782\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53348338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53371788", "body": "Addressed code review comments.  Added some uses of the new BlockFactory in the tests.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53371788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53385860", "body": "Addressed comments and updated PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53385860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53463428", "body": "Not dup.  69 was the dup of 72\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53463428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53499048", "body": "Will push this in once the test PR is complete.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53499048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53524304", "body": "Add copyrites\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53524304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53524334", "body": "Add copyrites\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53524334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53642245", "body": "6114d5d2698c56832939bc602f52a17a24025b40\nacefdf5f2e5ed5e5d939b5047d4b3bf86c10df20\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53642245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53837505", "body": "Addressed code review comments and updated PR.  Huge thanks @dougbu, went beast mode on this thing :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53837505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53838241", "body": "Also rebased.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53838241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54230974", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54230974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54234225", "body": "/cc @anurse \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54234225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54234275", "body": "/cc @anurse \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54234275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54234375", "body": "@dougbu The next PR will be pretty complex (code generation) but I have no problem moving some of these to that PR, just trying to keep PR's as small as possible.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54234375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54234524", "body": "/cc @anurse \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54234524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54236971", "body": "Closing out this PR to provide its contenst with PR's that provide implementations after talks with @dougbu \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54236971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54252341", "body": "Addressed code review comments and updated.  @dougbu per our convo yesterday we'll catch up in person, did some investigation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54252341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54367925", "body": "Addressed code review comments and updated.  One last check before I :shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54367925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54592089", "body": "Addressed code review comments.  As for the `TheoryData` comments will talk in person tmrw.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54592089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54700903", "body": "Addressed some top level PR comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54700903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54700942", "body": "Addressed a \"few\" code review comments, not the \"bigger\" design questions still mullying around.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54700942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54703669", "body": "Modify `TagHelperAttributeCodeGeneratorTest` to use CodeBuilderContext.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54703669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54738246", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54738246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54739102", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54739102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54740384", "body": "Addressed code review comments except for: https://github.com/aspnet/Razor/pull/114#discussion_r17191516\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54740384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54740714", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54740714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54741259", "body": "Updated comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54741259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54767065", "body": "Going to break out the attribute code generation from this PR.  Filed an issue: https://github.com/aspnet/Razor/issues/119\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54767065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54767927", "body": "Addressed code review comments. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54767927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54768169", "body": "Addressed comments\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54768169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54772835", "body": "Addressed code review comments except for outstanding issue.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54772835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54772854", "body": "Addressed more code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54772854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54894024", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54894024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54906396", "body": "82b45387a1779440d707abe99186d89f61726285\na9f6a63e7fe6b27ea6ca32cc3a8361ba576617c0\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54906396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54906904", "body": "555615f60e97742705544c05147a814732847d56\n489caed17c718faf7e39f7fa5f0f188f69afcb62\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54906904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55038907", "body": "Addressed comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55038907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55066865", "body": "Addressed all CR comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55066865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55188158", "body": "`?.` breaks rendering.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55188158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55188241", "body": "@yishaigalatzer Still being designed, will update when we have a more concrete idea of what we want it to do.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55188241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55204029", "body": "`@DateTime?.Now` Generates:\n\n``` C#\nWrite(DateTime);\nWriteLiteral(\"?.Now\");\n```\n\nWhen it should generate:\n\n``` C#\nWrite(DateTime?.Now);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55204029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55331579", "body": "3cba84104d9c0a67635b48a42740b6beea4797ac\nbb3ad0ede4a1ca720f626b8d477c402148d548ac\n20824f37e0948a6cc14f89b806e8b03719e57d6f\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55331579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55536713", "body": "@davidfowl @yishaigalatzer we talked a bit about this on Friday.  Decided to create an issue so we can discuss it more/ensure we want to do this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55536713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55852682", "body": "I can break this into two PR's if people feel that it helps with the code review process.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55852682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55853643", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55853643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55972695", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55972695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55973508", "body": "@yishaigalatzer It was a port from the existing Razor code generation process when we used code DOM.  The reason why we did during those days was because CodeDOM did it under the covers (pretty much identical logic).  For a specific reason we should consult with @anurse .\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55973508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56104628", "body": "Moving to MVC\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56104628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56131570", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56131570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56132630", "body": "b1b1da0781467ea0464f4a1709577a19460aa5d4\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56132630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56237683", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56237683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56464735", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56464735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56481910", "body": "Addressed comments in this PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56481910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56564528", "body": "Moved to MVC\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56564528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56594480", "body": "Closing this for now, will invest time later into reviewing this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56594480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56608841", "body": "Addressed comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56608841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56609067", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56609067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56779718", "body": "Broke this out into #154 and #155.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56779718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56781387", "body": "This will be broken into two PR's, closing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56781387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56782037", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56782037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56902335", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56902335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56920064", "body": "It's just suppper low priority, if we have time we'll do it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56920064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56920601", "body": "@dougbu #99 passes the lookup text, aka the string in `@addtaghelper \"MyAssembly\"` to a this issues `TagHelperTypeResolver` which is responsible for what that lookup text means.  The default meaning behind the lookup text is:\n\n```\n\"assemblyName\"\n\"assemblyName, #.#.#.#\"\n\"assemblyName, #.#.#.#, specificType\"\n```\n\nThen based on the lookup text it queries the requested `assemblyName` and returns a `Type[]` which contains all of the `TagHelper` types that abides by the lookup text and are valid `TagHelper`s.   Valid tag helpers are defined as follows:\n\n``` C#\n!typeInfo.IsAbstract &&\n!typeInfo.IsGenericType &&\ntypeInfo.IsPublic &&\n!typeInfo.IsNested &&\ntypeof(TagHelper).GetTypeInfo().IsAssignableFrom(tagHelperTypeInfo);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56920601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56921751", "body": "It's slightly different than the `TagHelperDescriptorResolver` because replacing it can completely change what defines where the tag helper types come from.  So this also involves exposing this via an interface so it can eventually be DI'd.   It turn out to be decently large: https://github.com/aspnet/Razor/pull/159\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56921751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56931653", "body": "@yishaigalatzer Not sure, I'm still surprised that this causes a stack overflow for the evaluator to begin with... We could invest some time to see if this is still an issue and if you feel like its worth it.\n\n**As a side note:** We do what CodeDOM used to do and they never solved the problem.  Most likely the reason: It's a supppper edge case, the string needs to be pretty huge to cause an issue... With Razor I do see how you may be able to generate a very large string unintentionally though.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56931653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57017198", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57017198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57017412", "body": "The code was checked in.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57017412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57043159", "body": "Is there an Mvc counterpart to this PR to ensure it calls into the correct `GenerateCode`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57043159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57043180", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57043180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57075098", "body": "I didn't mean for this to be a full `[Design]` PR, it's just labeled `[Design]` because it hasnt been touched yet and we all had that offline discussion about labeling PR's as `[Design]` at first.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57075098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57076539", "body": "@dougbu what do you mean about newly validating the `@addtaghelper` test?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57076539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57077082", "body": "@dougbu Ooo no it does not.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57077082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57078591", "body": "Moving this to #148\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57078591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57103969", "body": "Closing this, incorporating your comments into #148 shortly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57103969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57107811", "body": "Changed pretty much everything about this PR so I didn't bother with an \"addressed code review comment\" commit.  Re-did the description of the PR and updated.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57107811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57107851", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57107851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108106", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108236", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108416", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108553", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108617", "body": "Addressed code review comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57108617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57115424", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57115424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/7883013", "body": "Full link\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/7883013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468825", "body": "It's for testing and internal use.  In testing we pass property info all over the place and internally we just pass the `PropertyInfo` to the descriptor when we find it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9290344", "body": "errors won't be `null`. Might be being too protective here.\n\nAlso:\n\n`!errorSink.Errors.Any()`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9290344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/11166016", "body": "Should leave comment as to why we're wrapping it in a block. Also, the comment above this should probably be inside the block by the code outputting it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/11166016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/11166041", "body": "Add a test validating that the `ConditionalAttributeCollapser` doesn't rewrite attributes with `@@`. If it changes in the future and starts rewriting them that'd be a big nono.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/11166041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13252407", "body": "The alternative would be to do a `.Contains` on an array of all the whitespace characters + '='. This seems cleaner\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13252407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13273563", "body": "~~That wouldn't work due to attribute prefixes. We'd still need to `Trim` :cry:~~\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13273563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13274045", "body": "Had an offline conversation. Could potentially reduce 1 allocation, however it'd be doing more work in the process. \n\nDue to how infrequently this code will be hit we decided to take the path of clarity and leave as is.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13274045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13322167", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13322167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/14515806", "body": "Ahh. Alright will do.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/14515806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/16811840", "body": "Hmm, could potentially cross-compile here and do 1.3 and 1.5 since the only reason we need 1.5 is for `TagHelperDesignTimeDescriptor`s which are normally only ever used via `RazorTooling`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/16811840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/16820439", "body": "No specific reason. Just enables users who don't need to target 1.5 to use it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/16820439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/21597118", "body": "Must not have rebased \ud83d\ude22 ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/21597118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/22212556", "body": "Shouldn't this guy be internal?", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/22212556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/22373362", "body": "Might be worth doing an empty (no code changes) merge into preview2/dev to prevent future conflicts. Thoughts? @rynowak @ajaybhargavb ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/22373362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/22686324", "body": "This doesn't seem to have made its way into dev.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/22686324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/23858291", "body": "Oops, should probably be in the Editor namespace.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/23858291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877634", "body": "Why public? This object still tracks the number of text views and it can choose when to subscribe without being a super god-like object.\r\n\r\nHeck, if you really wanted to we could get rid of subscribe/unsubscribe entirely and always be attached to the editorsettingsmanager changed and project manager changed events. With that approach the Project getter could do the work of doing `_projectManager.GetProjectWithFilePath(_projectPath)` or it could wait for a `_projectManager` change event for the project its concerned with (if the GetProjectWithFilePath failed to resolve a project)", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877654", "body": "Super interesting way to cross-plat this. I like.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877681", "body": "Since we're working with objects in this class now it'd probably be best to throw a better error (or debug assert) if project isn't the type we expect.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877724", "body": "This isn't used publicly, we shouldn't be exporting it. Use a Roslyn service.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877730", "body": "Assert foreground thread in opened/closed.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/25877730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/25879318", "body": "> Basically the point of this change was to move the control away from the DocumentTracker and the DocumentManager will have the logic to decide when to subscribe and unsubscribe. We wouldn't even need the manager if we choose to let the tracker decide (that was how it was before).\r\n\r\n\r\n\r\nI disagree, the `DocumentManager` still must add/remove text views from the tracker and now it's just calling a magic method where the tracker still performs work to associate itself with a project and project manager. If you really wanted to put all the control in the document manager you'd pass the project/project manager into subscribe as a way of telling the tracker \"attach to this\". Even though I disagree it's not the end of the world to keep it as is. We'll live with it for now\r\n\ud83d\ude04\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/25879318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/25879666", "body": "Ah, and we should probably always be subscribed to the editor settings manager changed event (not just when we subscribe)", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/25879666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400504", "body": "Even though in the future we will be generating this 90% of the time in the runtime I think it should still be here.  Undoubtedly we'll still allow an option to pre-compile views resulting in physical files where this comment will be convenient. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400608", "body": "Why's this class in-line?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400846", "body": "The work-item is there, it's just more generic.  There's an overwhelming amount of TODO's from the CodeTree creation so the work-item is more of a catchall.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9400846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9401176", "body": "No need for the whole Context when they only need to know the sourcefile.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9401176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9401282", "body": "For the CodeBuilder\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9401282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9403687", "body": "It is but why is it in the test lol\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9403687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9403770", "body": "Talked with Ryan and having the whole context is a good idea for the following reason:\n\nIn the future for extensibleness reasons we will have people provide Visitors to add features to Razor so we should create an abstract base type that requires the context.  This way Visitors always have \"enough\" information.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9403770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9404108", "body": "Def not a bad idea.  Not to mention there really isn't tooo much external API in Razor\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9404108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9435995", "body": "@pranavkm changed the acceptance criteria to list of chunks from code tree prior because of the name so I renamed it to AcceptTree.  Not a huge fan of the name but couldn't think of anything better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9435995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9444918", "body": "Intellisense on the CodeWriter within the visitor and allowing us to do Writer.Write(\"...\").Write(\"...\") but with CSharpCodeWriter specific methods. .\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9444918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9597044", "body": "Not sure it's worth capturing the \"=>\" as a constant, what would be the benefit?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9597044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9597631", "body": "CodeTree.cshtml is more or less a \"temp\" file and is used in a test that always fails (for now).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9597631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9680513", "body": "For now i'll keep it the long namespace and i'll add a Jira item to flatten everything.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9680513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9680552", "body": "copy and pasted from existing test\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9680552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9680624", "body": "Based on configuration 4/5 can be tabs or spaces\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9680624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9683124", "body": "Copy n pasted :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9683124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9722586", "body": "The trimming was there because we'd pass in values with newlines etc. due to how we parsed the files.  Since this code will not exist in a few iterations and is only there for pre-CodeTree validation code it can be whatever. :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9722586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241733", "body": "Nope, it's literalllly just there to make formatting work, the line pragma isn't used for anything.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241749", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241751", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241790", "body": "Nope, it's always a transition span.  I initially had a Debug.Assert here but even just casting the first child would throw if it happened to be null.  In order to be any sort of expression block you must at least have a transition span aka 1 child.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241805", "body": "Ya it's tough.  Technically it writes info but it also creates LineMapping's for the tooling to consume.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241822", "body": "Hahaha yup, that's how it was originally in the line mappings so I figured it'd be incredibly repetitive to used named arguments here for a test.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241833", "body": "I thought it added benefit in the sense of notifying future devs that the code mapping is purely for the purpose of formatting.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10241833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396648", "body": "Correct due to the `DisposableAction` changes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396668", "body": "The Span.EditHandler does not affect the tagblock.  It represents the items inside of the tagblock.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396739", "body": "I should add a Debug.Assert; the flow does restrict it from being null though.  Essentially before a tagblock wrapper is passed into anything we check for EndOfFile or \"is at special tag\" aka \"!\" or \"?\".  tagBlockWrapper will be null if endoffile = true or we're at a special tag.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397065", "body": "Changed the format of the method to re-work how script tags are represented/for them to be more consistent with the rest of the tree.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397101", "body": "It's poor naming, just utilizing what was already there and following the same pattern as the rest of the parser.  Essentially what optional does is verify that we're at a CloseAngle and we're not at the end of the file.  If so, accept it.\n\nSooo by having this optional like this we can avoid several `if(!EndOfFile)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397102", "body": "see above\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397104", "body": "see above\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397152", "body": "Not sure I follow.  Is this a new Roslyn thing?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17219134", "body": "Misleading comment on my part. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17219134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16625941", "body": "In the Mvc part of TagHelpers we create an MvcTagHelperContext that derives from this.  Wasn't sure of a better way to do this since the raw Razor version is empty. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16625941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16625952", "body": "```\n/// A tag helper provider context that is used to manage tag helpers found in the system.\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16625952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16625967", "body": "Wasn't so sure about the naming here.  Feel free to approve/strongly disapprove etc. :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16625967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16625980", "body": "```\n/// Writes { IsSet = true }\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16625980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16666170", "body": "Probably a bad habbit of mine, I always like to be explicit. Ex: https://github.com/aspnet/Razor/pull/86#discussion_r16626759 :)  Will remove\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16666170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16666733", "body": "Ya this is a fail/overlook on my part (some of my initial \"hack\" code).  Arrays/IEnumerables aren't handled via TagHelpers so in the case of IEnumerables I need to throw.  When I add support for Dictionaries https://github.com/aspnet/Razor/issues/89 i'll revisit this piece.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16666733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16667038", "body": "I actually had everything in the TagHelpers namespace initially and changed the  folder structure.  This is a result of me changing my mind and not reverting the namespaces :smile: back to the correct format.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16667038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16695768", "body": "So i've been looking at the in-depths here a bit more and I forgot one big piece.  This class isn't responsible for rendering things like primitives/enums/enumerables etc.  It's for concrete types only.  In my prototype I add functionality for primitives enums etc. in Mvc and the code generator is determined by the MVC provided resolver so the decisions only happen once.  We talked a bit today about bringing some of this resolving functionality into Razor so maybe those attribute code generators should follow suite.\n\nAnyways, long story short I need to make this method dive into sub-generic parameters and return a proper generic string... Something like\n\n```\n<string, Foo<string, int>>\n```\n\netc.\n\nTracking the other code generators here: https://github.com/aspnet/Razor/issues/102\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16695768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821646", "body": "Yes it's the only behavior which allows \"examining\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821658", "body": "correct. It's essentially an optimization\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821909", "body": "That's a fair point. \n\nWe could break the interface apart into two.  A registration system and a provider system.\n\nSuggestion: `ITagHelperProvider` for GetTagHelpers and `ITagHelperRegistrationContext` for the reg/unreg methods?  Whatcha think.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821917", "body": "https://github.com/aspnet/Razor/pull/97#issuecomment-53524304 :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854414", "body": "1 scenario is the way we used to find tag helpers is changing the \"finding\" mechanisms of tag helpers.  So right now it requires that there be an `@taghelper ...` statement to register a tag helper but someone could potentially replace the provider to make tag helpers 100% reflection based.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854530", "body": "This is used as part of the class generation process to understand how to \"new up\" a Tag Helper's properties which are related directly to html attributes (hence the name).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854602", "body": "We don't yet until https://github.com/aspnet/Razor/issues/99 is completed.  I thought about throwing a descriptor in here but felt that it doesn't necessarily fit since it'd only be used for comment purposes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854666", "body": "No it means that the last piece of the code that is generated should not have a `;`.  Will clarify.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "davidhunt135": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1871", "title": "HtmlConventions -  optional or customizable", "body": "I am currently trying to setup angular 5 with Razor and Asp.Net Core and have some issues with directives not working due to casing of the rendered html. Newer version of angular have updated directives from kebab case to camel case, i.e ng-if is now ngIf and it appears that all html is transformed to lower case by Razor. (I believe its done by HtmlConventions.ToHtmlCase).\r\n\r\nWould it be possible to have some way of disabling or customizing html conventions?", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TessenR": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1818", "title": "Local functions break parsing if followed by html tags", "body": "I'm using VS 15.5.1\r\n\r\n**Steps to reproduce**:\r\n\r\n1. Create default ASP.NET MVC project using VS\r\n2. Change C# language version in web.config to 7\r\n3. Modify about.cshtml to the following:\r\n\r\n```\r\n@{\r\n  ViewBag.Title = \"About\";\r\n\r\n  void Local() { WriteLiteral(\"<strong>Foo</strong>\"); }\r\n  <strong>Bar</strong>\r\n  Local();\r\n}\r\n<h2>@ViewBag.Title.</h2>\r\n<h3>@ViewBag.Message</h3>\r\n\r\n<p>Use this area to provide additional information.</p>\r\n```\r\n\r\n4. Run the project. You'll get the following error:\r\n```\r\nCompilation Error\r\nDescription: An error occurred during the compilation of a resource required to service this request. Please review the following specific error details and modify your source code appropriately.\r\n\r\nCompiler Error Message: CS1525: Invalid expression term '<'\r\n\r\nSource Error:\r\n\r\nLine 2:    ViewBag.Title = \"About\";\r\nLine 3:  \r\nLine 4:    void Local() { WriteLiteral(\"<strong>Foo</strong>\"); }\r\nLine 5:    <strong>Bar</strong>\r\nLine 6:    Local();\r\n\r\nSource File: ..\\Views\\Home\\About.cshtml    Line: 4 \r\n```\r\n\r\n5. Note that local functions which are not directly followed by html tags are parsed correctly and work as expected as you can check by moving the html tag below the local function invocation. I.e. the following code does not have any compilation errors:\r\n```\r\n@{\r\n  ViewBag.Title = \"About\";\r\n\r\n  void Local() { WriteLiteral(\"<strong>Foo</strong>\"); }\r\n  Local();\r\n  <strong>Bar</strong>\r\n}\r\n<h2>@ViewBag.Title.</h2>\r\n<h3>@ViewBag.Message</h3>\r\n\r\n<p>Use this area to provide additional information.</p>\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anurse": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1749", "title": "Add EventSource/EventCounter tracing and metrics for Razor", "body": "Some events listed below. The goal is to add events that will help users solve problems so if these aren't going to do that job, feel free to suggest/discuss others!\r\n\r\n* `Microsoft-AspNetCore-Razor` EventSource\r\n    * `ParseStart` event - Triggered when Razor parsing begins\r\n    * `ParseStop` event - Triggered when Razor parsing ends\r\n    * `ParseFailure` event - Triggered when an error in parsing occurs.\r\n    * `ParseDuration` counter - Measures duration of Razor parsing\r\n    * Would it be worth having separate \"Parse\" and \"CodeGen\" events or just one all-up \"Parse&CodeGen\" event?\r\n\r\nSee https://gist.github.com/anurse/af1859663ac91c6cf69c820cebe92303 for some guidance on adding EventSources and EventCounters to ASP.NET projects.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54338165", "body": "Nothing leaps out as \"whaaaa? why would you Razor like that?\" :). I'll put :shipit: because I'm probably not going to review it further, but don't hold me to it too hard :P.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54338165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54338831", "body": "Ah, just saw you closed this. Mostly ignore my comments then :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54338831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54338956", "body": "Test ALL THE UNITS :shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54338956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "RandyBuchholz": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1747", "title": "Design-Time Directive [Language Feature Proposal]", "body": "This is to open some discussion about an idea for a new language construct in Razor.\r\n## Background\r\nWhile most of what we do is focused on compile and run time resolution, some \"dynamic\" things are better handled at design time. This proposal is to create a design-time directive in the Razor language.  The design time directive indicates that the file contents following the directive will be modified by some process. The design-time directive provides hooks and extension points into a cshtml file to enable actions to take place at design time. These can be trigged manually, by Visual Studio, or other processing.\r\n## Design-Time Directive\r\nThe design-time directive is used to communicate with parsers, file processors, and the Razor Engine.\r\n\r\n- It takes the general form: `@[...]`\r\n- It can take parameters: `@[parser, action, parameters]`\r\n- It can have scope: `@[...]{  ...  }`\r\n\r\nThe design-time directive indicates to a process (external or internal) that an area of the file will/can be modified by the process. The directive has no impact on it's own.\r\n\r\nIt is removed at compile time by the Razor Engine from the resulting html.\r\n## Examples\r\n\r\n### Substitution\r\nThe most trivial use of the directive is to insert a group of characters into the file.\r\nGiven - `@[myText] = \"This is some text to repeat.\"`\r\nUsing - `@[myText]`\r\nProduces => `This is some text to repeat.`\r\nThe directive isn't actually replaced. The text is inserted after the directive.\r\nAny characters can be used - text, tags, code.\r\nIn initial cshtml:\r\n```\r\n  @[myText] \r\n```\r\nAfter the substitution process runs, in cshtml:\r\n```\r\n  @[myText]\r\n  This is some text to repeat.\r\n```\r\nIn html:\r\n```\r\n  This is some text to repeat.\r\n```\r\nChanging the text in the assignment changes the results in all files using the directive when the process runs again. Though the directive doesn't technically have impact on it's own, some features like substitution would be built into the environment.\r\n\r\n### Merging\r\nRazor is especially interesting because it can be a mix of many languages - cs, css, js, html. Setting aside the \"correctness\" of putting css or js in an cshtml file, they provide fair examples. In an html/cshtml file, we can include `<script></script>` and `<style></style>` blocks. For the sake of argument, let's say we have a compelling reason to include content inside them in the file. Writing the code in the page is messy, and can be problematic. Worse, many of us prefer Less and Typescript, which we can't write in-page. The `@[]` directive helps.\r\n\r\nWe can write our css in a Less file - `styles.less`, that compiles into `styles.css`, and our js in `scripts.ts`, that compiles into `scripts.js`. We get full editor and intellisense support. In our `Page.cshml` we can include the results.\r\n```\r\n  @[style, \"~/styles.css\"]\r\n     ... The contents of styles.css are copied into the page here, in a <style> block.\r\n  @[script, \"~/scripts.js]\r\n     ... The contents of scripts.js are copied into the page here in a <script> block.\r\n```\r\nThis happens during design - the file content is modified, triggered manually, by the IDE, or an extension. For example, after Web Essentials compiles a Less file into css, it could also update the pages that reference the css file through design-time directives. Though the end result is much like `@render`, we get a local copy that provides access to the internals, and allows modification if we turn \"auto-update\" off.\r\n\r\nSelectors help keep files small. If we just need a couple of styles or functions, we can only copy them.\r\n```\r\n  @[style, \"~/styles.css\", { .form-controls-block, .nav-link } ]\r\n  @[script, \"~/scripts.js\", { datepicker } ]\r\n```\r\nThis would pull the two styles and single function out of the files, and insert them into the page inside`<style>` and `<script>` blocks. This can be helpful in building small, self-contained, and lightweight components.\r\n\r\n### Templates\r\nHtml Templating is another other possibility. This can be used in regular files or in template/scaffolding engines. An overly simple example is the common label-input-validation set - \r\n  `<label asp-for=\"ModelProperty\"><input asp-for=\"ModelProperty\"></input><...validationstuff...`\r\nThere are many ways to approach this, but one could be (in a cshtml) \r\n```\r\n@[]{\r\n  form-line = \"<label asp-for=\"@[param]\" ... \" \r\n}\r\n\r\n@[form-line, param=\"ModelProperty\"]\r\n   ... Fragment is expanded here, with replacement.\r\n```\r\nTemplates are like advanced, dynamic Snippets, and can be defined in the page or in shared files. They can auto update, or be manually triggered.\r\n\r\n### Targeting\r\nWhen we know we are running a file processor over the file, we can define targets. This can make the processor more efficient, and the file easier to parse. The processor can look for tagged areas to process, or even exclude.\r\n```\r\n  @[fileProcessorName, processingAction, exclude] {\r\n       ... This section is skipped by fileProcessorName when executing processingAction \r\n         - if it is aware of design-time directives.\r\n  }\r\n```\r\n## Discussion Scope\r\nThis proposal isn't about any of the specific examples, but about the concept of being able to provide information to processes that manipulate code files. And if so, is `@[]` a good construct to use? More and more, we run processes against these files - from built-in formatting processes, to refactoring, to analysis processes. A standard way to communicate with these processors might be valuable. \r\n\r\n## Outside the Proposal\r\nThe concept can also extend into other languages.\r\nThough advanced, this could allow things like name refactoring for related items in different technologies. For example, a C# class and Typescript class could have a design-time association. Changing one triggers changes to the other. This is a design-time change - the files are modified directly. The association doesn't exist at compile or run time. This would be a long time coming, but shows possible potential of the overall concept. \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marcusien": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1714", "title": "Add wildcard to tag on HtmlTargetElement", "body": "In a project, I would need to add functional logic on an unknown range of taghelpers. Why unknown ? just because I have a TagHelper on a homemade framework which contains mandatory logic. This framework is referenced by several projects.\r\nOn these several projects, We can write new TagHelpers but those new TagHelpers must call the TagHelper from the framework.\r\n\r\nTo reach our goal, the easiest way would be to apply our \"framework tag helper\" to every tags which begins by something\r\n\r\nFor instance, I'd like to apply my framework taghelper to every tag helpers beginning with \"mytag-*\". So i think allowing wildcard to \"tag\" parameter in HtmlTargetElement would be a great idea. It's already posible with the attributes", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drauch": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1699", "title": "Feature request: mandatory tag helper properties", "body": "Is there a way to mark tag helper properties as \"required\", i.e., mandatory? Optimally, the user would run into a compile-time problem when omitting required properties. An alternative would be to run into a view compilation problem at runtime.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dougbu": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1679", "title": "Add helpers to deal with `IHtmlContent`", "body": "We have a fair amount of code that deals with `IHtmlContent` and related interfaces. To centralize that and ease things for all, add methods like `IsLiteral()`, `IsMixedContent()`, `GetRaw()` and `GetAsItWillBeRendered(HtmlEncoder encoder)`.\r\n\r\nGoal: As a tag helper author, I have an easy way to get the value of an attribute.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827423", "body": "Nice.  Only question is whether all removed usings will also be unused when building other `#if'd` branches.  Have you built all configurations?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45175822", "body": "Would this affect the common case where users want to use one of the `@Html` or `@Url` or injected helpers from a code block?  For example I wrote the following in the legacy EnumSample:\n\n``` C#\n@if (EnumHelper.IsValidForEnumHelper(ViewData.ModelMetadata))\n{\n    @Html.EnumDropDownListFor(model => model, htmlAttributes: new { @class = \"form-control\" })\n}\nelse\n{\n    @Html.TextBoxFor(model => model, htmlAttributes: new { @class = \"form-control\" })\n}\n```\n\nPut another way could a fix for this bug (if we go ahead on it) be specific enough _not_ to affect the switch to writing-return-values mode that the helpers depend on?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45175822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45304957", "body": "Note the MVC5 syntax has an additional `@` which should also be needed now.  That is try `await @Html.PartialAsync(...)`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45304957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45304997", "body": "... I mean `@await Html.ParitalAsync(...)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45304997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45305479", "body": "right, responded before I saw that.  suggest closing this bug since fixing #63 would provide what you need here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45305479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52566736", "body": "nit: this looks much more like a prefix than a namespace.  let's use term \"prefix\" going forward.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52566736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52693564", "body": ":shipit: from me but pls get confirmation from someone more familiar w/ this code.  thx for the offline explanation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52693564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53019287", "body": "fyi canonical example for the second style is `<input type=\"radio\" ... @(checked) />` which, at least when `checked` is a `bool`, generates nothing or `checked=\"checked\"`.  In this case neither key nor value is empty.  With today's `TagBuilder`, would add an entry (or not) prior to the first tag helper.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53019287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53135801", "body": ":shipit: after addressing my few recently-added issues\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53135801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53347081", "body": "Not sure whether I missed a few tests covering spacing within begin, end, and self-closing tags.  Looks like almost everything tested matches `<name>`, `</name>`, and `<name attribute='value'  />`.  Should also test at least `<name  >`, `</name  >`, and `<name  attribute  =  'value'/>`.\n\n(Did see tests using both single and double-quotes to surround the attribute value.  My concern here is optional spacing within parts of the tag.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53347081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53796131", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53796131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54225979", "body": "- please rename this PR so we can understand what these vague \"assets\" are without opening it\n- also prefer not to look at new infrastructure while it's unused.  can you separate things vertically and bring in the low-level pieces while adding each higher-level scenario?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54225979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54226359", "body": "should the new name for this PR include `[Design]` ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54226359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54584284", "body": ":watch: getting close!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54584284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54726685", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54726685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54728266", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54728266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54731511", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54731511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54759232", "body": "this PR is now easily split into two pieces:\n1. the `TagHelperProvider` class, the descriptor types it returns, and anything those descriptors reference\n2. the start of code generation for tag helpers\n\nThe first part seems almost ready to do.  The only missing bit I see is a motivation -- something calling into the provider.  Need a scenario that lights up end-to-end.\nThe second piece isn't working.  Let's take a step back and come at tag helper code generation from the top down rather than the bottom up.  And let's keep it as simple as possible until absolutely required for the scenarios we need in v1.  No extra managers, just one expected `ITagHelperExpression` implementation (in MVC), ...  But that _must_ support assigning user expressions to `IEnumerable<SelectListItem>` tag helper properties out of the box.  The '@' escape hatch isn't optional and all `ITagHelperExpression`s will be initialized using an `Expression<Func<TModel, TValue>>`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54759232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54759983", "body": ":watch: I'm hoping latest question is about a misleading comment rather than a root cause that's not yet corrected.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54759983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54760020", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54760020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54760046", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54760046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54763940", "body": ":watch:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54763940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54905563", "body": ":shipit: modulo my tiny comments; thanks for splitting out the code generation bits\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54905563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54905801", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54905801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54926058", "body": ":watch:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54926058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55003023", "body": "In generated code, this bug means `WriteAttribute()` doesn't get used when it should.  I'm not sure about the downstream impact...\n\nQuick samples:\n- `<div class=@classy/>` separates the attribute and the value expression into their own markup `Block`s in the syntax tree and generates\n\n``` c#\n            WriteAttribute(\"class\", Tuple.Create(\" class=\", 82), Tuple.Create(\"\", 96), \n            Tuple.Create(Tuple.Create(\"\", 89), Tuple.Create<System.Object, System.Int32>(\n#line 6 \"\"\n                classy\n\n#line default\n#line hidden\n```\n- `<div class= @classy/>` includes \" class= \" in the `TagBlock` for `<div` and generates\n\n``` c#\n            WriteLiteral(\"<html>\\r\\n  <head>\\r\\n   <title>This is a title</title>\\r\\n  </head>\\r\\n  <body>\\r\\n    <di\" +\n\"v class =\");\n            Write(\n#line 6 \"\"\n                 classy\n\n#line default\n#line hidden\n            );\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55003023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55005840", "body": ":shipit: once @NTaylorMullen is happy\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55005840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55188866", "body": "please be more specific about the exact way you're using `?.` and what gets broken.  also does the breakage vary depending on\n- what's on either side of the `?.` e.g. `(foo as Bar)?.Beez` versus `foo?.bar` ?\n- whether you use `?.` or `?[` e.g. `foo?.bar` versus `foo?[bar]` or `foo?[42]` ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55188866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55219676", "body": ":shipit: after addressing nits and my comments on comments\n- can decide later whether `ParseSpan()` could be simplified as I suggest since behaviour looks correct, just wasteful\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55219676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55220073", "body": ":shipit: w/ the one small comment fix\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55220073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55222523", "body": ":shipit: after addressing my minor comments\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55222523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56188445", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56188445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56189536", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56189536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56576886", "body": ":watch: but ignore intentionally dumb name suggestions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56576886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56753618", "body": ":watch: will come back to this, #135, and #138 when they reflect our offline design discussions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56753618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56919688", "body": "Thought we recently agreed this wasn't needed for Beta?  We have 16 open Razor issues for Beta1 and it seems fine if this is among the set that doesn't get done in that timeframe.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56919688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56919788", "body": "@NTaylorMullen please clarify how this issue differs from #99 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56919788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56920031", "body": "@NTaylorMullen @danroth27 @yishaigalatzer please unconfuse this issue.  Should either not be in the Beta milestone or be in the Ready column.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56920031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56921234", "body": "I'm not getting it.  why track issues at the per-class or even per-method level?  this still sounds like a small part of the resolution scenario, which replaces the \"manually-inserted `TagHelperDescriptor`\" stopgap.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56921234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57047031", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57047031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57065736", "body": ":watch: at least some of the comments are points about the test code :smiling_imp: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57065736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57066619", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57066619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57068218", "body": "on PR description \"Validated directive syntax tree creation, errors and code generation.\" bullet, looks as if you are only newly validating the `@addtaghelper` directive.  correct?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57068218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57072551", "body": ":watch: \nplease remove test code from this _design_ PR.  just makes it seem more daunting.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57072551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57074436", "body": ":watch:\n\nalso:\n- don't include tests while this is a design PR\n- as mentioned there, should be part of #148.  neither PR adds much without the other and we should have one resolver\n- not clear we have any extensibility requirements in this area for v1\n- do the minimal\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57074436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57075096", "body": ":watch: and please remove tests\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57075096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57075218", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57075218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57076695", "body": "think you're talking about\n\n> on PR description \"Validated directive syntax tree creation, errors and code generation.\" bullet, looks as if you are only newly validating the  @addtaghelper  directive. correct?\n\njust wanted to confirm this PR doesn't contain new validations (that I missed) for something other than the `@addtaghelper` directive.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57076695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57115280", "body": "nit: wouldn't have a conflict if `Bar` had `ContentBehavior.None`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57115280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57115400", "body": "note this is about catching errors prior to compilation of the generated code.  could punt this one if we deem compilation errors sufficient for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57115400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/5262820", "body": "nit: StyleCop won't like two blank lines in a row :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/5262820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/7497460", "body": "remove default initialization\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/7497460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/7524048", "body": "typo on this line?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/7524048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8029695", "body": "nit: format this property and VS will add the missing space\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8029695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8030790", "body": "don't use markdown syntax (backquotes) in resources.  the bare directive name is fine here and at line 121.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8030790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8030876", "body": "as @pranavkm mentioned elsewhere, don't check arguments in test code except to `Assert` they have expected values.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8030876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8032440", "body": "not sure why I thought this was test code.  correct comment (about throwing `ArgumentException`) is visible in the PR\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8032440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036303", "body": "\"user's\" (add apostrophe)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036312", "body": "nits:\n- try to use \"generate\" and its derivatives at least 2 fewer times :smile_cat:\n- IntelliSense (capitalize correctly)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036337", "body": "restore this blank line\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8036337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468017", "body": "use `string.Equals()` to avoid potential NREs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468050", "body": "close.  either \"instance of the ... class\" or \"instance of ...\".  i.e. either add \"the\" or remove \"class\".\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468074", "body": "still not sure why this overload exists.  doesn't save the caller much.  e.g. is this for testing?  either remove or add `<remarks>` about its reason for being.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8468074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8560501", "body": ":shipit: though I see you already have (39accef1ad1e50968cdf965fddbbbbc14e6a838d)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8560501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526789", "body": "use `Assert.Throws<ArgumentException>()` overload that takes the parameter name\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526802", "body": "pass parameter name in and include it when you create the `ArgumentException`.  an `ArgumentException` or subclass with `ParamName == null` is very sad (:crying_cat_face:).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526813", "body": "still think `Lookahead()`'s handling of `count==0` is confusing and unhelpful.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9526813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/9851708", "body": "child -> other everywhere\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/9851708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/10195095", "body": "hmm, guess VS still doesn't know how to nicely wrap an auto-property with an initializer.  how about\n\n``` c#\npublic static ICollection<char> InvalidNonWhitespaceNameCharacters { get; } =\n    new HashSet<char>(new[] { '@', '!', '<', '/', '?', '[', '>', ']', '=', '\"', '\\'' });\n```\n\nor (better if it fits)\n\n``` c#\npublic static ICollection<char> InvalidNonWhitespaceNameCharacters { get; } = new HashSet<char>(\n    new[] { '@', '!', '<', '/', '?', '[', '>', ']', '=', '\"', '\\'' });\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10195095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/10225843", "body": "teensy nit: hit `<Enter>` after `_writer` and let VS do the aligning.  this will just make it harder to change later.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10225843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/10244598", "body": "specify the `CultureInfo`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10244598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/10249947", "body": "trailing whitespace?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/10249947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/12696188", "body": "Should the whitespace eater have munched on the second newline after the comment as well? That is, should we remove blank lines as well as trailing whitespace on the same line (including perhaps a newline) as a comment?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/12696188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/12721718", "body": "The default `Inherited` value is `true`. So this attribute remains inconsistent with `TargetElementAttribute`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/12721718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/12722122", "body": " This does not work the same way as the constructor code. Previously would get `string.Empty` value when `null` passed in. Probably need a backing field and to store `string.Empty` even if explicitly set to `null`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/12722122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/12722142", "body": "No need to initialize `enum` property to its default value.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/12722142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13252167", "body": "`char.IsWhiteSpace()` is scary. Is it appropriate here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13252167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13252417", "body": "I'm split on this line. It'll allocate a `string` that isn't needed most of the time then immediately throw it away if there is any leading or trailing whitespace.\n\nThe alternative -- adding `!string.IsNullOrEmpty(childSpan.Content)` to the `Where()`, checking `Count()` and using `First()` to get the only `string` worth trimming, might not be better. Could end up slower and read less clearly.\n\nSuggest trying out the alternative and see which looks better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13252417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13252884", "body": "The problem is the loads of Unicode characters this method considers whitespace that are not valid HTML whitespace. Let's be messy and correct rather than clean and wrong.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13252884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/14515762", "body": "Sorry for commenting on a commit but this isn't visible in the changed files anymore. My removal comments were specifically about the last sentence. The first paragraph explains what's going on and remains correct. Please restore.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/14515762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/15893413", "body": "param **ref**\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/15893413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396097", "body": "nit: move this comment up one line since it helps to understand the `null` initialization\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396140", "body": "why isn't this `complete && tagBlock != null`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396268", "body": "wrap long line\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396538", "body": "why are we sure `tagBlockWrapper` isn't `null` at this point?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396566", "body": "nit: for consistency w/ the rest of this class, call this `tagBlockWrapper`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396613", "body": "the class doesn't have double-dispose issues (for the case where `CompleteTagBlockWithSpan()` was called), correct?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396861", "body": "? `</script>`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396880", "body": "pls add a comment explaining _why_ we're putting `</blah` back, even in the `</script>` case\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396963", "body": "move w/in the block that's specific to the tag start\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396985", "body": "why is close angle bracket optional?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16396985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397006", "body": "the solidus isn't optional since we know it's coming\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397016", "body": "why is close angle bracket optional here (too)?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397047", "body": "no finalizer anymore.  does this comment still apply?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397237", "body": "ignore the word \"anymore\" in my comment.  nothing appears to call `Dispose(false)` and there's no finalizer in this class.  so what does this comment mean?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16397237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17217217", "body": "this reads better but I'm still not understanding how this `AcceptAndMoveNext()` call could possibly accept a forward slash.  the `NextToken()` call updates `CurrentSymbol` but doesn't accept anything.  that call should leave the tokenizer in exactly the same state it was before the checks for '/' and text matching \"script\".  if it doesn't, something else is wrong (still).  therefore, the tokenizer should be looking at the '<' no matter what.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17217217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16820450", "body": "add blank line before the next member\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16820450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16820565", "body": "Emphasize this is the default behaviour in the summary.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16820565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16820675", "body": "\"body of the generated tag\" is confusing since the InnerHtml will be part of the generation (eventually).  Might be better to describe the tag helper's inner HTML relative to \"anything generated for the children of the target tag.\"  Also reference specific properties -- some combination of `<see cref=\"TagBuilder.InnerHtml\"/>` and the correct member of the helper itself.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16820675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16820977", "body": "In addition to above comments (which apply to the rest of this `enum`), this one should emphasize that any tag helpers (and HTML helpers?) that apply to children of this helper will execute before it.\nSomewhat separately is this the only behaviour in which this tag helper can _examine_ the HTML generated for its children?  Either way this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16820977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821014", "body": "How is this different from `Modify` with the modification being `tagBuilder.InnerHtml = null`?  Does this mean child tag helpers never execute for example?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821025", "body": "manager -> manage\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821051", "body": "copyright header\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821062", "body": "copyright\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821067", "body": "blank lines between members\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821077", "body": "don't need noise words \"that is\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821095", "body": "\"to retrieve tags for\" -> \"to match\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821100", "body": "stick with \"provided\" or (my preference) \"given\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821665", "body": "`Register()` and `Unregister()` don't belong in the same interface as `GetTagHelpers()`.  The same class might implement an interface Razor uses to get tag helpers and an interface Razor or MVC or Uncle Joe uses to declare discovered tag helpers.  But the use of those interfaces is completely separate.\nIf Razor is going to own the registration system, then the `GetTagHelpers()` bit is an internal implementation detail until and unless we provide a _separate_ interface containing a method similar to [`RegEx.IsMatch()`](http://msdn.microsoft.com/en-us/library/3y21t6y4%28v=vs.110%29.aspx) plus a `TagHelperDescriptor` parameter.  That would be an extensibility point for those who wish to change how `TagHelperDescriptor`s match tag names.\nThe other option is for the registration system to be an implementation detail of the provider and the provider will just offer the `GetTagHelpers()` method to Razor.  The provider would be the discovery / registration / matching extensibility point.  Of course our default provider might offer more finely grained extensibility in the future.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821689", "body": "OK, copyrights for every added file in this PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16821689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16842785", "body": "@NTaylorMullen that separation will help but it doesn't quite address the later part of my comment.  Is `ITagHelperRegistrationContext` (maybe `ITagHelperRegistrar` is better?) an interface that _must_ be implemented or a facet of our default `ITagHelperProvider` implementation.  Put another way, what are the scenarios for providing alternate implementations of these interfaces?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16842785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16844527", "body": "(I realize the eight or nine thousand Stylecop violations in this repo prevent using that tool but...) don't introduce new long lines.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16844527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16845423", "body": "Huh?  Is this class a generator or a descriptor?  Why would we create attributes at runtime -- something this description implies will occur?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16845423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16845473", "body": "nit: Don't over-qualify `PropertyInfo`.  You have a `using` for its namespace.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16845473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16845811", "body": "add apostrophe: \"tag helpers\" -> \"tag helper's\"\nand don't we have an interface or class to reference instead of the \"tag helper\" words?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16845811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847122", "body": "pls clarify last sentence in this summary.  does this mean values that contain newlines should escape them using \"\\r\\n\" (assuming Windows) for example?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847220", "body": "not sure this will show up anywhere.  check Object Browser and, if it doesn't show up there, move to a `<remarks/>` element.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847359", "body": "\"code writer\" -> `<see cref=\"CSharpCodeWriter\"/>`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847512", "body": "just \"An object...\" but probably better as \"A `<see cref=\"CodeGeneratorContext\"/>` instance...\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847696", "body": "\"`<see cref=\"Action\"/>` that renders...\"\nand, at some point, about time you mention HTML.  the term \"attribute\" is way overloaded.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16847696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16848269", "body": "- punctuate correctly: comma after \"value\" and semicolon after \"property\"\n- not \"AKA\" but \"i.e. add\"\n- might be better shorter since the called method name implies some of it.  perhaps \"Since there's a value, add `{ IsSet = true }`\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16848269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16848584", "body": "describe how this parameter is used _here_, not the behaviour of calling methods\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16848584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16848741", "body": "(my apologies; only \"5453 errors found\")\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16848741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16850013", "body": "- why is the `Action` required to have the correct `CSharpCodeWriter` in its closure?  could it instead be `Action<CSharpCodeWriter>` and called appropriately here?\n- the `Action` appears to be responsible for conversion to a `string` and escaping e.g. ensure the `string` value doesn't contain double-quotes.  so why isn't it also responsible for the surrounding single or double-quotes?\n- the `Action`'s name implies we can't handle multiple constructor parameters.  if it's \"allowed\" to generate a comma-separated list of arguments to the constructor, needs a better name e.g. `renderConstructorParameters`\n- nit: does the `Action` render or generate?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16850013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16850055", "body": "why would anyone want to override this method?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16850055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16850114", "body": "where the `CSharpCodeWriter` writes to isn't relevant.  what's important is that this method must write using that writer.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16850114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16850328", "body": "see lots of `internal` use in this repo but let's not make this more prevalent. split internal helpers out into a separate class, make everything public, and use a namespace such as `Microsoft.AspNet.Razor.Internal` or `Microsoft.AspNet.Razor.TagHelpers.Internal` (depending on how much implementation detail you expect just for tag helpers)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16850328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854715", "body": "what is a \"build type\"?  is it perhaps the declared type?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854970", "body": "change `do` / `while` nested in an `if` to a simpler `while` loop\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16854970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16855026", "body": "don't do useless initialization\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16855026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "javiercn": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1583", "title": "Intellisense for CSS is lost when intermingling razor code in a style tag", "body": "When I try to write some CSS inline intermingling razor\r\n```\r\n            <style type=\"text/css\">\r\n                .zone-@i {\r\n                }\r\n            </style>\r\n```\r\n\r\nIntellisense for the CSS rules is not being shown.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1583/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1566", "title": "Consider allowing the debugger to stop on the closing curly brace of a block of code.", "body": "When I'm debugging a razor page and I have a block of code like this\r\n\r\n```Razor\r\n@{\r\n  ...\r\n  var variable = someExpresion;\r\n}\r\n```\r\n\r\nI would like to be able to stop the debugger at the closing curly brace in order to inspect the variable. A possible solution for this would be to insert a ';' statement at the end of each block of code and to map that statement to the corresponding closing curly brace;", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/d1cca77852231d16c3c7edae648c1b26a6c06998", "message": "Update API Check baselines to 2.0.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbagga": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1460", "title": "@using directive IntelliSense does not auto complete", "body": "When trying to add a namespace:\r\n\r\n`@using WebApplication1.Models`\r\n\r\nNo IntelliSense appears for WebApplication1 at all. Models appears in the IntelliSense list but selecting it does not autocomplete the statement. (no text is appended to the statement)\r\n\r\nCLI version: 2.0.0-preview2-006497\r\nVS: 26621.2.d15rel\r\n\r\ncc @NTaylorMullen \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "halter73": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1445", "title": "Misaligned breakpoint highlighting", "body": "I spoke to @NTaylorMullen about this. Even though there are certain situations where it's not possible to align the breakpoint highlighting, this apparently isn't one of them.\r\n\r\nThe following would look correct to me if the highlighting was shifted two columns to the right but I'm not sure if the `<p>` tags are meant to be highlighted.\r\n\r\n![image](https://user-images.githubusercontent.com/54385/27247611-23fea1ce-52af-11e7-83ad-138ab4d1df57.png)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danroth27": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1381", "title": "Support quick action in razor for adding using statements", "body": "_From @danroth27 on May 22, 2017 22:19_\n\nIt would be nice if you could use a quick action (ctrl-. or whatever) to add a using statement for a type in Razor. \n\n_Copied from original issue: aspnet/Mvc#6309_", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/433", "title": "Log generic warnings for common errors when using tag helpers", "body": "- Output is not empty and self closing is set to true\n  ...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49671561", "body": "Thanks for the suggestion! We don't have any plans to implement alternative view formats at this time, but the extensibility is there for folks in the community to build on top of (custom view engine and code generator). Admittedly, it is a lot of work to do. If you decide this is something you would be interested in pursuing do let us know if you have questions or run into issues.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49671561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50050651", "body": "Sync up with @jodavis on BrowserLink support for providing the needed instrumentation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50050651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "diryboy": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1266", "title": "ViewComponentTagHelper: Allow optional parameters", "body": "Say we have a ViewComponent class\r\n\r\n```C#\r\nclass MyViewComponent\r\n{\r\n    IViewComponentResult Invoke( bool showSomething = false ) { ... }\r\n}\r\n```\r\n\r\nIt would be great to just only write `<vc:my />` in Razor if one don't want to show that something. Currently you have to write `<vc:my show-something=\"false\" />`.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1266/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DamianEdwards": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1256", "title": "Namespace names are always grayed out in _ViewImports.cshtml", "body": "Consider the following in a project's `_ViewImports.cshtml` file:\r\n``` html\r\n@using RazorPagesWebApplication\r\n@using RazorPagesWebApplication.Data\r\n@using Microsoft.AspNetCore.Identity\r\n```\r\n\r\nThe actual namespaces are all grayed out by the editor suggesting they aren't needed.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/1255", "title": "Parameter info is not displayed automatically after typing opening parens of method invocation in Razor expression", "body": "When typing a Razor expression that invokes a method in the Razor editor, the parameter info is not being displayed automatically after the opening parenthesis is typed. The closing parenthesis is auto-completed however with the cursor placed inside. Manually invoking Parameter Info from the Edit menu (or KB shortcuts) shows it.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/821", "title": "Support creating Tag Helpers using CSHTML files", "body": "Just an initial idea:\n\n**RepeatTagHelper.cshtml**\n\n``` html\n@tagHelper \"repeat\"\n\n@class {\n    [HtmlAttributeName(\"repeat\")]\n    public int Repeat { get; set; }\n}\n\n@{\n    output.TagName = null;\n}\n\n@for (var i = 0; i < Repeat; i++) {\n    @await output.GetChildContentAsync(useCachedValue: false)\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/821/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/791", "title": "Hierarchical Tag Helper binding", "body": "## Summary\n\nThis feature would add support for directly binding Tag Helper properties to child Tag Helper instances from the source document, thus making it much simpler to author related Tag Helpers that are designed to work together in a hierarchy.\n## Background\n\nToday, we provide a number of features to assist with authoring sets of Tag Helpers that are intended to be used together in a logical hierarchy, including:\n- `RestrictChildrenAttribute` to restrict which tags are valid as children of the element a Tag Helper instance is attached to\n- `HtmlTargetElementAttribute.ParentTag` to restrict which tag is valid as a parent of an element a Tag Helper instance is attached to\n- `TagHelperContext.Items` to allow passing of data between different Tag Helpers attached to the same element, and between Tag Helpers attached to an element and Tag Helpers attached to that element's children\n\nThe use of `TagHelperContext.Items` to pass data between related Tag Helpers is somewhat cumbersome, e.g.:\n\n``` c#\npublic class ParentChildContext\n{\n    public string SomeData { get; set; }\n}\n\n[RestrictChildren(\"child\")]\npublic class ParentTagHelper : TagHelper\n{\n    private ParentChildContext _context;\n\n    public override void Init(TagHelperContext context)\n    {\n        _context = new ParentChildContext();\n        context.Items.Add(typeof(ParentChildContext), _context);\n    }\n\n    public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\n    {\n        // Force children to process\n        var childContent = await output.GetChildContentAsync();\n\n        // Read context data set by child here\n        // _context.SomeData\n    }\n}\n\n[HtmlTargetElement(\"child\", ParentTag = \"parent\", TagStructure = TagStructure.WithoutEndTag)]\npublic class ChildTagHelper : TagHelper\n{\n    public string SomeData { get; set; }\n    public override void Process(TagHelperContext context, TagHelperOutput output)\n    {\n        var parentContext = context.Items[typeof(ParentChildContext)];\n        parentContext.SomeData = SomeData;\n    }\n}\n```\n\n``` html\n<parent>\n    <child some-data=\"This will be accessible to the parent\" />\n</parent>\n```\n## Proposal\n\nTag Helper property binding would be expanded to support directly binding Tag Helper instances to properties on a Tag Helper using Tag Helpers attached to the current element's children as the source.\n\nBinding will:\n- Support the binding of any type that implements `ITagHelper`\n  - In the case where multiple children of the matching type are present, the first instance will be bound\n- Support the binding of `IEnumerable<T> where T : ITagHelper` to enable simple access to multiple child Tag Helper instances of the same type\n  - When the binding applies, it will always create and set an `IEnumerable<T>` instance to the property, irrespective of the property's initial value (i.e. it will overwrite any current value of the property)\n- Bind only the first level of children (i.e. it would not perform a \"deep\" or \"recursive\" bind)\n- Only support binding to `public` settable properties (like other bindings)\n- Be implied (i.e. automatic) based on the property being `public` and the type being derived from `ITagHelper`\n  - _Review: Should this be opt-in via a new attribute rather than implied?_\n- Support being disabled via `HtmlAttributeNotBoundAttribute` on the property that would otherwise be bound\n### Example\n\nHere is the example from above reimplemented with the proposed behavior implied:\n\n``` c#\n[RestrictChildren(\"child\")]\npublic class ParentTagHelper : TagHelper\n{\n    public ChildTagHelper Child { get; set; }\n\n    public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\n    {\n        // Force children to process\n        var childContent = await output.GetChildContentAsync();\n\n        // Read data directly from child here\n        // Child.SomeData\n    }\n}\n\n[HtmlTargetElement(\"child\", ParentTag = \"parent\", TagStructure = TagStructure.WithoutEndTag)]\npublic class ChildTagHelper : TagHelper\n{\n    public string SomeData { get; set; }\n}\n```\n\n``` html\n<parent>\n    <child some-data=\"This will be accessible to the parent\" />\n</parent>\n```\n### More Examples\n\n``` c#\n/// <summary>This Tag Helper applies to all elements and effectively creates a server-side DOM, albeit with a single, forward-only pass rather than being stateful.</summary>\n[HtmlTargetElement(\"*\")]\npublic class DomTagHelper : TagHelper\n{\n    public DomTagHelper Parent { get; set; }\n\n    public IEnumerable<DomTagHelper> Children { get; set; }\n\n    public override void Init(TagHelperContext context)\n    {\n        // Set parent on all children\n        foreach (var child in children)\n        {\n            child.Parent = this;\n        }\n    }\n\n    public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\n    {\n        // Run children\n        var childContent = await output.GetChildContentAsync();\n\n        // \n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/791/reactions", "total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/788", "title": "Razor Templating Improvements", "body": "## Introduction\n\nToday, Razor doesn't expose much functionality to enable app developers to leverage Razor templates at runtime. That is, Razor **is** a templating language, but it doesn't have many features that allow the developer to use templates written in Razor as a first-class primitive in view/page composition.\n\nThe one feature that does exist is that of [\"Templated Razor Delegates\"](http://haacked.com/archive/2011/02/27/templated-razor-delegates.aspx/) (or \"Template Expressions\"), which allow for fragments of Razor to be captured as delegates and thus passed into functions, including HTML Helpers, and then executed to produce HTML output. E.g. in the following code, the block `@<li>@item</li>` is the \"template expression\".\n\n**Helpers.cs**\n\n``` c#\npublic static class Helpers\n{\n    public static IHtmlContent ForEach<T>(IEnumerable<T> data, Func<T, IHtmlContent> template)\n    {\n        var builder = new HtmlBuilder();\n        foreach (var item in data)\n        {\n            builder.AppendHtml(template(item));\n        }\n        return builder;\n    }\n}\n```\n\n**View.cshtml**\n\n``` html\n<ul>\n@ForEach(new [] { \"one\", \"two\", \"three\" }, @<li>@item</li>)\n</ul>\n```\n\nThis feature has a number of limitations that if addressed, and expanded upon, can provide a more powerful and expressive set of first-class templating features in Razor.\n## Support Declarative Template Authoring & Re-use via an `@template` Directive\n\nRather than trying to add new features to the existing template expressions feature, which could be limited by issues of backwards compatibility, we'll add a new directive to support declaratively creating Razor templates in CSHTML files:\n\n``` html\n@template HelloWorld(string name) {\n    <div>Hello @name!</div>\n}\n```\n\nThis would be roughly equivalent to (and thus generate):\n\n``` c#\npublic IHtmlContent HelloWorld(string name)\n{\n    var builder = new HtmlBuilder();\n    builder.AppendHtml(\"<div>Hello \");\n    builder.Append(name);\n    builder.AppendHtml(\"!</div>\")\n    return builder;\n}\n```\n\nThis could be declared in any Razor file, including in `_ViewImports.cshtml` in an MVC application, to allow for easy re-use across the application.\n\nThe templates could then be executed directly in Razor files. In this way they're very similar to the `@helper` directive from ASP.NET Web Pages:\n\n``` html\n@HelloWorld(\"Frank\")\n```\n\nThey can also be passed in to other methods that accept the template delegate signature:\n\n```\n@{ var names = new [] { \"Frank\", \"Mary\", \"Jane\" }; }\n@ForEach(names, HelloWorld)\n```\n## Support Truly Async Template Expressions\n\nCurrently, while the delegates generated by template expressions support async statements, they are always evaluated synchronously (i.e. the calling thread is blocked while the delegate is executed). This logic is [actually in MVC](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Razor/HelperResult.cs#L61), so we'd need to make some changes to the contract between Razor and a Razor host, or limit this functionality to the new `@template` directive (see above).\n\n``` html\n@template async HelloWorldAsync(string name) {\n    await Task.Delay(100);\n    <div>Hello @name!</div>\n}\n```\n\nThis would be roughly equivalent to (and thus generate):\n\n``` c#\npublic async Task<IHtmlContent> HelloWorld(string name)\n{\n    await Task.Delay(100);\n    var builder = new HtmlBuilder();\n    builder.AppendHtml(\"<div>Hello \");\n    builder.Append(name);\n    builder.AppendHtml(\"!</div>\")\n    return builder;\n}\n```\n## Support Multiple Arguments\n\nTemplate expressions are currently limited to a single argument. We should extend this to support multiple arguments when using the `@template` directive, e.g.:\n\n``` html\n@template HelloWorld(string firstName, string lastName) {\n    <div>Hello @firstName @lastName!</div>\n}\n```\n\nThis would be roughly equivalent to (and thus generate):\n\n``` c#\npublic IHtmlContent HelloWorld(string firstName, string lastName)\n{\n    var builder = new HtmlBuilder();\n    builder.AppendHtml(\"<div>Hello \");\n    builder.Append(firstName);\n    builder.AppendHtml(\" \");\n    builder.Append(lastName);\n    builder.AppendHtml(\"!</div>\")\n    return builder;\n}\n```\n\nThe templates could then be executed directly in Razor files. In this way they're very similar to the `@helper` directive from ASP.NET Web Pages:\n\n``` html\n@HelloWorld(\"Mary\", \"Lou\")\n```\n\nThey can also be passed in to other methods that accept the template delegate signature:\n\n``` c#\npublic static class Helpers\n{\n    public static IHtmlContent MyHelper<T1, T2>(T1 data, T2 state, Func<T1, T2, IHtmlContent> template)\n    {\n        var builder = new HtmlBuilder();\n        builder.AppendHtml(template(data, state));\n        return builder;\n    }\n}\n```\n## Support Templated Tag Helpers\n\nWe should extend Tag Helpers to make working with templates a first-class experience. Binding templates to properties as well as treating the content or even the entire element of a Tag Helper as a template should be possible.\n\n**Tag Helper with content as a template**\n\n``` c#\n[HtmlTargetElement(\"*\", Attributes = \"asp-repeat\")]\npublic class RepeatTagHelper<TItem> : TemplatedTagHelper<TItem>\n{\n    [HtmlTargetAttribute(\"asp-repeat\")]\n    public IEnumerable<TItem> Items { get; set; }\n\n    public override async Task ProcessAsync(TagHelperContext<TItem> context, TagHelperOutput output)\n    {\n        foreach (var item in Items)\n        {\n            output.AppendHtml(await context.GetChildContentAsync(item));\n        }\n    }\n}\n```\n\n``` html\n@{\n    var customers = DB.GetCustomers().ToList();\n}\n<table>\n    <tbody asp-repeat=\"customers\">\n        <tr>\n            <td>@item.FirstName</td>\n            <td>@item.LastName</td>\n        </tr>\n    </tbody>\n</table>\n```\n\n**Tag Helper with template properties**\n\n``` c#\npublic class ListViewTagHelper<TItem> : TagHelper\n{\n    public IEnumerable<TItem> Data { get; set; }\n\n    public Action<IHtmlContent> HeaderTemplate { get; set; }\n\n    public Func<TItem, IHtmlContent> ItemTemplate { get; set; }\n\n    public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\n    {\n        foreach (var item in Items)\n        {\n            output.AppendHtml(await context.GetChildContentAsync(item));\n        }\n    }\n}\n```\n\n``` html\n@model IEnumerable<Customer>\n@template ContentTemplate(IEnumerable<T> items, Func<T,IHtmlContent> rowTemplate) {\n    <tbody>\n        @foreach (var item in items)\n        {\n            rowTemplate(item);\n        }\n    </tbody>\n}\n@template HeaderTemplate() {\n    <thead>\n        <tr>\n            <th>@Html.DisplayNameFor(m => m.FirstName)</th>\n            <th>@Html.DisplayNameFor(m => m.LastName)</th>\n        </tr>\n    </thead>\n}\n@template CustomerRowTemplate(Customer customer) {\n    <tr>\n            <td>@item.FirstName</td>\n            <td>@item.LastName</td>\n        </tr>\n}\n<table>\n<list-view data=\"customers\" header-template=\"HeaderTemplate\" content-template=\"ContentTemplate\" item-template=\"CustomerRowTemplate\" />\n</table>\n```\n\n_TODO: Update with some details about integration with #791_\n## Support Template Compilation & Packaging\n\nTo enable sharing of declared templates across projects without having to restore to writing them manually in C#, we should build a tool that allows compiling templates from CSHTML files directly to assemblies/NuGet packages. This could be a project tool that works with the .NET Core CLI (e.g. `dotnet razor compile-templates`) or a Roslyn compilation extension/module that allows for templates (and potentially other Razor primitives) to be compiled as part of project compilation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/788/reactions", "total_count": 31, "+1": 26, "-1": 0, "laugh": 0, "hooray": 5, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/443", "title": "Support for attribute grouping to aid in statement completion in editors", "body": "In cases where a Tag Helper has multiple attributes that must be used together to correctly configure and thus enable a particular function, it would be useful to be able to indicate this grouping so that editors could suggest that use of one attribute requires another.\n\nWe tend not to throw runtime exceptions in Tag Helpers for these cases so as to not add extra \"overhead\" to the normal flow of using HTML & C# together, aka normal Razor.\n\nSome suggested approaches:\n\n``` C#\n// This approach allows any property to be associated with another (its partners) via an attribute.\n// Only one property in any given set needs to be decorated with the attribute, the inverse relationship is implied.\npublic class MyTagHelper : TagHelper\n{\n    [PartnerAttributesHint(\"category\")]\n    public string Name { get; set; }\n    public string Category { get; set; }\n    ...\n}\n\n// This attribute allows sets of attributes to be declared on the class, with the HTML attribute names passed in.\n// Multiple sets would be supported on the class.\n[AttributeSetHint(\"name\", \"category\")]\npublic class MyTagHelper : TagHelper\n{\n    public string Name { get; set; }\n    public string Category { get; set; }\n    ...\n}\n\n// This approach allows any property to be added to an arbitrary attribute set by name.\n// The name itself isn't important, they just need to be consistent across the properties in that set.\npublic class MyTagHelper : TagHelper\n{\n    [AttributeSetHint(\"set1\")]\n    public string Name { get; set; }\n    [AttributeSetHint(\"set1\")]\n    public string Category { get; set; }\n    ...\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/239", "title": "Make the TagHelperContext available to content of Tag Helpers", "body": "As part of #221, contents of all Tag Helper invocations will now be wrapped in a delegate to allow for conditional execution, retrieval, or even suppresion, of the content by the surround Tag Helper.\n\nThis delegate should accept a `TagHelperContext tagHelperContext` parameter that is passed in by the page and shared with the surrounding `TagHelper`. When combined with #238, this enables the content to either receive or pass values back to the surrounding Tag Helper (depending on the order of execution).\n\nThis feature would be used by the `CacheTagHelper` (aspnet/mvc#1552) to enable the contents to add cache invalidation triggers.\n\ne.g.\n### Tag Helper Declaration\n\n``` C#\n[TagName(\"my-tag\")]\npublic class MyTagHelper : TagHelper {\n    public override void Process(TagHelperContext context, TagHelperOutput output) {\n        context.Items[\"message\"] = \"This came from the MyTagHelper class!\";\n    }\n}\n```\n### Consumption\n\n``` HTML\n<my-tag>\n    Message from the tag helper: @tagHelperContext.Items[\"message\"]\n</my-tag>\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/237", "title": "Support a single Tag Helper having multiple properties bound to the same HTML attribute", "body": "Sometimes it's desirable to have multiple Tag Helper properties attached to the same HTML attribute within the scope of a single Tag Helper, especially when multiple types could be used to represent the same logical attribute.\n\nE.g.\n### Declaration\n\n``` C#\npublic class CacheTagHelper : TagHelper {\n    [HtmlAttributeName(\"expires\")]\n    public DateTime? ExpiresAbsolute { get; set; }\n\n    [HtmlAttributeName(\"expires\")]\n    public DateTimeOffset? ExpiresAbsoluteOffset { get; set; }\n\n    [HtmlAttributeName(\"expires\")]\n    public TimeSpan ExpiresIn { get; set; }\n\n    public overload void Process(TagHelperContext context, TagHelperOutput output) {\n        if (ExpiresAbsolute.HasValue) {\n            // Use the DateTime value\n            ...\n        }\n        else if (ExpiresAbsoluteOffset.HasValue) {\n            // Use the DateTimeOffset value\n            ...\n        }\n        else if (ExpiresIn != null) {\n            // Use the TimeSpan value\n            ...\n        }\n    }\n}\n```\n### Consumption\n\n``` HTML\n<cache expires=\"DateTime.Now\"></cache>\n<cache expires=\"DateTimeOffset.Now\"></cache>\n<cache expires=\"TimeSpan.FromSeconds(60)\"></cache>\n```\n### Generated Pseudo-code\n\n``` C#\nprivate static class PropertyAssigner_CacheTagHelper {\n    public static void Set_expires(CacheTagHelper helper, DateTime? value) { \n        helper.ExpiresAbsolute = value;\n    }\n    public static void Set_expires(CacheTagHelper helper, DateTimeOffset? value) { \n        helper.ExpiresAbsoluteOffset = value;\n    }\n    public static void Set_expires(CacheTagHelper helper, TimeSpan value) { \n        helper.TimeSpan = value;\n    }\n}\n\n// public async Task ExecuteAsync(...) {\nvar helper = new CacheTagHelper();\nPropertyAssigner_CacheTagHelper.Set_expires(helper, DateTime.Now);\nhelper.Process(context, output);\n\nvar helper = new CacheTagHelper();\nPropertyAssigner_CacheTagHelper.Set_expires(helper, DateTimeOffset.Now);\nhelper.Process(context, output);\n\nvar helper = new CacheTagHelper();\nPropertyAssigner_CacheTagHelper.Set_expires(helper, TimeSpane.FromSeconds(60));\nhelper.Process(context, output);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/200", "title": "Allow Tag Helper to specify a string property is in fact a type name reference and generate code that uses the C# 'nameof' keyword", "body": "Let\u2019s assume that we introduce a new Tag Helper property attribute, `TypeNameStringAttribute`. This is an instruction to the parser to generate code using the `nameof` keyword by default. You can stack these and supply the name of another property on your tag helper and we\u2019ll automatically concatenate them at generation time as type names (add the default() wrapper, separate with \u2018.\u2019, etc.) As usual, using \u2018@\u2019 would escape from this behavior.\n\nThen the anchor Tag Helper declares its Controller and Action properties as this type/attribute:\n\n``` C#\npublic class ATagHelper : TagHelper {\n      [TypeNameString]\n      public string Controller { get; set; }\n      [TypeNameString(\"Controller\")]\n[TypeNameString]\npublic string Action { get; set; }\n\n      public override Process(TagHelperOutput output, TagHelperContext context) {\n            ...\n      }\n}\n```\n\nNow the view could be like this, with the attribute values projected into the generated code as indicated:\n\n``` HTML\n@using WebApplication42.Controllers\n<a controller=\"HomeController\" action=\"Index\">Home</a>\n```\n\n``` C#\n// Generates...\nvar __aTagHelper232 = new ATagHelper {\n    Controller = nameof(HomeController),\n    Action = nameof(default(HomeController).Index())\n};\n__aTagHelper232.Process(output, context);\n```\n\nOr it could be like this:\n\n``` HTML\n<a controller=\"WebApplication42.Controllers.HomeController\" action=\"Index\">Home</a>\n```\n\n``` C#\n// Generates...\nvar __aTagHelper232 = new ATagHelper {\n    Controller = nameof((WebApplication42.Controllers.HomeController),\n    Action = nameof(default(WebApplication42.Controllers.HomeController).Index())\n};\n__aTagHelper232.Process(output, context);\n```\n\nOr they can escape out and go back to the property\u2019s declared type with \u2018@\u2019 like this:\n\n``` HTML\n<a controller='@\"Controller\"' action='@\"Index\"'>Home</a>\n```\n\n``` C#\n// Generates...\nvar __aTagHelper232 = new ATagHelper {\n    Controller = \"Controller\",\n    Action = \"Index\"\n};\n__aTagHelper232.Process(output, context);\n```\n\nFull color image that shows the projections:\n\n![image](https://cloud.githubusercontent.com/assets/249088/4710249/75e0a640-58a7-11e4-89a8-0e2fdb6e2591.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50818121", "body": "I thought we said that we'd just make it Gen an async delegate all the time?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50818121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50829450", "body": "I think we just have RenderSectionAsync and require you to await it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50829450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55043363", "body": "Right now, I'm thinking we make them all equivalent. The alternative seems odd to me and just unnatural given we know what the developer means here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55043363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "tuespetre": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1076", "title": "Indentation problems with code blocks", "body": "I wasn't sure if this should go to VS or if it belongs here (especially with the Evolution work going on.)\r\n\r\nIn Visual Studio, when auto-formatting a Razor document, a code block nested inside of an `if` block will cause the indentation of any code following the `if` block to be increased to match the indentation of the code inside of the code block.\r\n\r\nThis is driving me \ud83d\udd29 \ud83d\udd29 ! \r\n\r\n![bloody-razor](https://cloud.githubusercontent.com/assets/4853540/23904725/e9295060-0896-11e7-902f-91e7edf126ff.png)\r\n\r\nMoving the code out of the code block to be just inside the `if` block seems to clear it up:\r\n\r\n![bloody-razor-2](https://cloud.githubusercontent.com/assets/4853540/23904887/675caa2c-0897-11e7-8657-9b14ddcd8fc7.png)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1076/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NickCraver": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/1047", "title": "Tag Helper Enum shorthand syntax doesn't work for nullable enums", "body": "> Moved from https://github.com/aspnet/Mvc/issues/5881:\r\n\r\nI'm working on a project with a nullable enum property in the tag helper, like this:\r\n```c#\r\n[HtmlTargetElement(\"mini-profiler\", TagStructure = TagStructure.WithoutEndTag)]\r\npublic class MiniProfilerScriptTagHelper : TagHelper\r\n{\r\n    [HtmlAttributeName(\"position\")]\r\n    public RenderPosition? Position { get; set; }\r\n}\r\n```\r\nRelevant enum: \r\n```c#\r\npublic enum RenderPosition\r\n{\r\n    Left = 0,\r\n    Right = 1,\r\n    BottomLeft = 2,\r\n    BottomRight = 3\r\n}\r\n```\r\nYou can pull [the full repo here (specific commit link)](https://github.com/MiniProfiler/dotnet/tree/5c7950d58855e691432c1fa92904248e739f51fc)\r\n\r\nI would expect the shorthand syntax to work in razor, like this:\r\n```xml\r\n<mini-profiler position=\"Right\" />\r\n```\r\nHowever, that only works if `Position` is `RenderPosition` (not-nullable). When it's a nullable (`RenderPosition?`), you get an error:\r\n> The name 'Right' does not exist in the current context.\r\n\r\nInstead, you have to use the full version:\r\n```xml\r\n<mini-profiler position=\"@RenderPosition.Right\" />\r\n```\r\n\r\nCan we please make this work with nullable enums too?\r\n\r\ncc @DamianEdwards @khellang ", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/1047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Yves57": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/873", "title": "Optimize string allocations in parsing", "body": "I have seen that many strings are allocated in the `Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer.EndSymbol()` method.\r\nBut some strings are in fact often the same. So I modified the end of the method like that:\r\n\r\n```\r\n.....\r\nstring tokenContent;\r\nif (Buffer.Length != 1)\r\n{\r\n   tokenContent = Buffer.ToString();\r\n}\r\nelse\r\n{\r\n   if (!_oneCharTokenCache.TryGetValue(Buffer[0], out tokenContent))\r\n   {\r\n      tokenContent = Buffer.ToString();\r\n      _oneCharTokenCache.Add(Buffer[0], tokenContent);\r\n   }\r\n}\r\nsym = CreateSymbol(start, tokenContent, type, errors);\r\n```\r\n\r\nI have made a test with an extrem case ([LargePageMvc page](https://github.com/aspnet/Performance/blob/dev/testapp/LargePageMvc/Views/Home/Index.cshtml)).\r\n\r\nBefore the modification, 215643 strings where allocated. After the optimization, 131577 strings allocations where saved (more than half). And the `_oneCharTokenCache` dictionary had only 17 items inside: some symbols like <, !, >, =, and all digits.\r\n\r\nTwo additional remarks:\r\n- As a bonus, it improves performances from 587ms to call `MarkupParser.ParseDocument()` down to 510ms on my (old!) computer. It can improve a little bit F5 startup scenarios with large pages...\r\n- Of course, we can extend the concept to any `string` lengths, but there is less redundancy, and it will be probably less performant.\r\n\r\nIf you think that it is interesting, I can propose a PR...", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lothistvan": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/697", "title": "Allow C# to exist inside body of a [RestrictChildren] TagHelper", "body": "Version: rc1-final\n\nMy taghelper definition is\n\n```\n[HtmlTargetElement(\"panel\")]\n[RestrictChildren(\"panel-heading\", \"panel-body\", \"panel-footer\")]\npublic class PanelTagHelper : TagHelper\n{\n    ...\n}\n```\n\nThe problem is that I'd like to show the footer depends on something in the model:\n\n```\n<panel>\n   <panel-body>\n   ...\n   </panel-body>\n   @if(Model.NeedsFooter)\n   {\n   <panel-footer>\n      ...\n   </panel-footer>\n   }\n</panel>\n```\n\nThe error message:\n\n> The parent <panel> tag helper does not allow non-tag content. Only child tag helper(s) targeting tag name(s) 'panel-heading, panel-body, panel-footer' are allowed.\n\nPlease let us to use code block inside a taghelper (with restricted childrens).\n\nThanks, \nIstvan\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glennc": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/658", "title": "Invalid script tag inside a TagHelper element invalidates parent", "body": "``` html\n<TagHelperTag>\n    <script src=\"\" />\n</TagHelperTag>\n```\n\nIf TagHelperTag is a TagHelper then you will get an exception stating that your TagHelperTag is invalid, and doesn't have a closing tag, when in fact it is the script tag that is invalid.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SoonDead": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/631", "title": "Go To Definition (F12) on TagHelpers", "body": "<kbd>F12</kbd> works on Html Helpers, but not on TagHelpers in Visual Studio.\n\nShould navigate to the definition of the helper.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "IlyaKhD": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/576", "title": "Hierarchical Parent Tag restriction", "body": "We're working on a custom Tag Helpers package, and one feature we really miss is a parent tag restriction based on tag hierarchy (not only immediate parent).\nWe already described our problems here: https://github.com/aspnet/Razor/issues/474#issuecomment-144108209 and https://github.com/aspnet/Razor/issues/570.\n\nCurrently, we choose the only appropriate Tag Helper in runtime (the `Process` method), but it is ineffective because all applicable Tag Helpers are already instantiated by the moment they are checked, and then rejected.\n\nWe have made a research and found that it is fairly easy to implement hierarchical parent restriction:\nhttps://github.com/IlyaKhD/Razor/commit/53b8141aebab6823a1c6672d99cf7af5dc660c13\n\nConsider adding this feature, please.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/576/reactions", "total_count": 33, "+1": 33, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/559", "title": "RestrictChildren does not allow Razor comments", "body": "``` C#\n[RestrictChildren(\"div\")\npublic class MyTagHelper : TagHelper\n{\n\n}\n```\n\n``` HTML\n<my>\n   @* Some comment *@\n   <div>Child content</div>\n</my>\n```\n\nAdditionally, the error is repeated multiple times over in the intellisense dialog:\n\n![image](https://cloud.githubusercontent.com/assets/174281/10253667/6da5de16-68f3-11e5-9b35-908a54658d21.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/a00569249b6aed86c08a9b2ab22036bc0012b11e", "message": "Fix broken build"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/5232d2352beb0dbc8f85c41a61fa3ec6046674b8", "message": "Use unique names for commonly used properties\n\nFixes #1948"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ecb323b5dcb9abb760db6c55d64197a03302236f", "message": "Use FilePath if RelativePhysicalPath on RazorProjectItem is null"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bf52e0dbf0c2467b2beb76b673be558073476a98", "message": "Add support for CopyBuildOutputToOutputDirectory and CopyOutputSymbolsToOutputDirectory\n\nFixes #1896"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/1849056093d9bd3c35430bfa897993c3e0da92be", "message": "Add support for running tests using desktop msbuild"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/3ae601e4df1d9e61f3e475e77c1f9d47ff22aa17", "message": "Prevent type name collisions when file hierarchy + namespace is identical (#1881)\n\n* Prevent type name collisions when file hierarchy + namespace is identical"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b2e2719e43d4dec1e994cd00be36f1184dabcacb", "message": "Make AspNetCoreSettings actually work"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/36ff269fefeee346c5b923d24f60cc31c6fc01dc", "message": "Use the Muxer path if available\n\nFixes #1848"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bd03c16ee7ccd8efbea1dff0afbb9043c137694d", "message": "Ensure test apps use the same SDK as Razor"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/14fc427068183c5d44fc2488d648157ac66d1335", "message": "Make RazorCodeGen track file renames \\ deletes\n\nFixes #1810"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ee3bc17559a2e62a8bec9c78de9c9cf190fcd54a", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/ece080466b872ececba049682a30c9b2a3d081ac", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/adaa204b0683bf43a5fe70241270de1e808cdbb8", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/82247fbb097d34d310fc7220d4535486986cb4a7", "message": "Update samples and tests to target netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/c61e9b3e84f70d00d0782b91ef3466b29116b8a2", "message": "Preparing to update to 2.2 SDK"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b32db148eaeeba980d1cb48c46170bbaea03678a", "message": "Updating to InternalAspNetCoreSdkVersion 2.1.1-*"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b76a118638b9b5ec386296582c8e3da2b068d709", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/3f26451bc7e4bf1478f148179b2e4b12f4982a5c", "message": "Revert \"Merge branch 'dev' into rel/2.0.0\"\n\nThis reverts commit 8ff9ef7b4c7204128e969997c6d6858b46d300f8, reversing\nchanges made to c02d701e6e18b02a993a0a649ac601354b4977d6."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6c7859bfbabca47af2c97cc1b5aaaa068595b46f", "message": "Generate full pdbs for desktop packages\n\nFixes #1548"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/0d69d9893310d92273f45b02323bf080b4a3a79b", "message": "Merge pull request #1546 from aspnet/rel/2.0.0\n\nUpdate to RoslynDev 2.6.0-* packages"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/c812f9d8852856219619a29c5d58eedde9c37ee0", "message": "Update to RoslynDev 2.6.0-* packages"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f939480372215e70ca85320247e20495c1324773", "message": "Merge remote-tracking branch 'origin/rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8a51fdb39db66fe06aa78a7b4878e744e80ad537", "message": "Revert \"Update to Roslyn 2.3.0\"\n\nThis reverts commit dbf57b9268c949dd69b0bbbac3684f010b6ef55a."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/bc12fccd4d470ff8d3090fd2615e36b244946312", "message": "Merge pull request #1544 from aspnet/rel/2.0.0\n\nUpdate to Roslyn 2.3.0"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/dbf57b9268c949dd69b0bbbac3684f010b6ef55a", "message": "Update to Roslyn 2.3.0"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/3d62e8e08b420afff509d5bafe9c6c7f59502eb4", "message": "Updating KoreBuild branch"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f8d5c0ec8d2a6c074f1f975da6fa1e64cdb33dfb", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/f0794bfe80bebfe8244efa4e33b7167ff5edaded", "message": "Branching for 2.0.0 rtm"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/2a39052100ecac5c2f3c270211332d7e3d2d420d", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/93875f973b45d17c13642e5121e6510dc68139ac", "message": "Update version suffix for 2.0.0 RTM release"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827827", "body": "Yes, both the build from VS and .\\build.cmd work. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/33827827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34102483", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34102483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34217293", "body": "If the CodeTree is generally stable, it might be worthwhile to start looking at writing unit tests for this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34217293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34217312", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34217312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34677426", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34677426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34947259", "body": "@yishaigalatzer There's tests in Mvc around the MvcCsharpRazorHost that need to be revived. This doesn't affect @inherit\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34947259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35037142", "body": ":sheep: it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35037142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36163405", "body": ":sheep: it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36163405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36591810", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/36591810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37605503", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37605503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616653", "body": "@Eilon  given that these are warnings would appear during view compilation, I assumed the user is probably not going to see them. But if we really wanted to suppress it: \n\n``` C#\n#pragma warning disable 1998\npublic async Task Execute()\n{\n   ...\n}\n#pragma warning restore 1998\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/37616653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44072284", "body": "There's a `code` property that you can add to project.json. It has a way to include, but not exclude files.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44072284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44684363", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44684363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45558198", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45558198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46508475", "body": "If this is the only change you're making in all the repos, I'd recommend you don't wait on sign offs. Go ahead and check in the changes. :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46508475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/47293108", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/47293108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50814930", "body": "This would tie into - https://github.com/aspnet/Mvc/issues/845. The last we spoke to @DamianEdwards, and @yishaigalatzer  the plan was to continue having RenderSection and adding a separate overload which does RenderSectionAsync. This would mean we'd need a new syntax for defining async sections - `@section ...{ }` would continue generating the synchronous version.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50814930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50819176", "body": "@DamianEdwards that would require we only have RenderSectionAsync (or block from the RenderSection call). \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50819176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52698240", "body": ":shipit: once you've addressed comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/52698240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53582908", "body": "Looks good overall. Let's talk about the impact of this - https://github.com/aspnet/Razor/pull/87#discussion_r16778831 and then :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53582908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53649488", "body": "cc @DamianEdwards \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53649488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54891583", "body": "Holding off on this until TagHelpers are completed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/54891583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55953972", "body": "Fixed in https://github.com/aspnet/Mvc/commit/bc7241d87a77f8d1ad4e4620a677189ad4781832\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55953972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55973423", "body": "Ideally yes. We work around this today by modifying the CodeBuilder any time we need to do something interesting in Mvc which might be ok for now. Might be worth looking at post beta though.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55973423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56111332", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56111332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57216178", "body": "Yup, I'll send a PR out for that once this is done, but it was a fairly small change (removing the StreamWriter that we created there)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/57216178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/16815689", "body": "Why do we care about targeting `netstandard1.3`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/16815689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/22499072", "body": "@mikeharder - should we be good to revert this? @rynowak says we want this change in this release.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/22499072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/26975530", "body": "Thanks, fixed it in a follow up.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/26975530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402252", "body": "I think the next round of cleanup would be to flatten namespaces? We have one per directory now which I'm not a big fan of. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402282", "body": "That's the generated output :100: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402372", "body": "Maybe. It does make it so that we don't have to modify these methods every time we need to pass in extra stuff\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9402372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9444738", "body": "Is there a benefit to making it this complicated?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9444738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9470142", "body": "Could we call this currentTargetWriterName\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9470142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9470312", "body": "Wouldn't the corresponding cs file also need to be updated? Plus are we losing coverage for the @helper function or does it get covered by replacing the CodeDOM tests?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9470312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656030", "body": "+1. We need to flatten the namespaces from this assembly. What's our recommended strategy:\n1. One namespace per assembly (Well two because we might have some in the .Internal namespace)\n2. Namespaces per feature area (Microsoft.AspNet.Razor.Parser, Microsoft.AspNet.Razor.CodeGenerator)\n3. Alternatives? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656038", "body": "// Arrange, Act, Assert\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656048", "body": "Probably don't named named parameters given that they're quite obvious here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656067", "body": "You could pull this into a PropertyData since it's repeated for the next test\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656092", "body": "Is there any significance to the 4 / 5 padding values in these two tests? Maybe a comment about it would be nice\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656194", "body": "Could you change this compare strings. Something like\n\n``` C#\nstring expected = new string('\\t', numTabs) + new string(' ', numSpaces);\nAssert.Equal(expected, padding);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656226", "body": "This method seems to be part of the setup (Arrange). You shouldn't have to Assert inside of this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656239", "body": "StringComparer.Ordinal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656271", "body": "Could you rephrase this and have it wrap around 120 chars\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9697523", "body": "I don't think we need to trim anymore (it'll generate extra whitespace around the name which is acceptable). I have a feeling this was specifically done because CodeDOM didn't like it. This whole block needs to go away, but I'm leaving that up to @NTaylorMullen \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9697523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10093628", "body": "> so if helper's are formatted they get\n\n_...so that helpers get moved ... when formatted_\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10093628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239772", "body": "EndsWith?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239782", "body": "Could you use a named parameter for the 0?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239810", "body": "Let's not use optional args for public methods. Create an overload instead\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239827", "body": "to _remove_ the space ...\n\nAlso wrap the comment \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239880", "body": "Could you split this to separate invocations? The comment is hard to read here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239903", "body": "Is the firstChild never supposed to be null?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239994", "body": "Create seems like a misnomer. It's just writing lines. WriteCodeChunk \\ WriteRawCodeChunk perhaps?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240006", "body": "Holy magic numbers batman!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240045", "body": "Can we not print the \"This is here ...\" bit?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240077", "body": "The line number seems incorrect?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656226", "body": "This method seems to be part of the setup (Arrange). You shouldn't have to Assert inside of this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656239", "body": "StringComparer.Ordinal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656271", "body": "Could you rephrase this and have it wrap around 120 chars\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9656271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9697523", "body": "I don't think we need to trim anymore (it'll generate extra whitespace around the name which is acceptable). I have a feeling this was specifically done because CodeDOM didn't like it. This whole block needs to go away, but I'm leaving that up to @NTaylorMullen \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9697523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10093628", "body": "> so if helper's are formatted they get\n\n_...so that helpers get moved ... when formatted_\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10093628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239772", "body": "EndsWith?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239782", "body": "Could you use a named parameter for the 0?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239810", "body": "Let's not use optional args for public methods. Create an overload instead\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239827", "body": "to _remove_ the space ...\n\nAlso wrap the comment \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239880", "body": "Could you split this to separate invocations? The comment is hard to read here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239903", "body": "Is the firstChild never supposed to be null?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239994", "body": "Create seems like a misnomer. It's just writing lines. WriteCodeChunk \\ WriteRawCodeChunk perhaps?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10239994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240006", "body": "Holy magic numbers batman!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240045", "body": "Can we not print the \"This is here ...\" bit?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240077", "body": "The line number seems incorrect?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10240077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10242746", "body": "In which case, do you want to .First() instead earlier? Or FirstOrDefault() followed by Contract.Assert\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10242746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10242765", "body": "EndWith here in case you missed it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10242765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10242780", "body": "Perhaps add a comment instead? It seems strange seeing it in the generated file\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10242780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/12604259", "body": "Sure\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/12604259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/12604961", "body": "I need for a way to switch the CodeBuilder with my type in Mvc - https://github.com/aspnet/Mvc/commit/e743d5613735830810bf5e158b0e09811080a729#diff-27d0f31c82c8c4cbbeebd55325e0364dR74\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/12604961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/12605154", "body": "Probably doesn't need to be removed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/12605154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/12605188", "body": "How do you introduce new chunks without this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/12605188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13106866", "body": "Why is this still a csproj? It says \"Transition from csproj to kproj\". But this is still csproj\n\nI demand answers!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13106866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13242924", "body": "Some of this probably needs to have another pass to match coding guidelines (bool versus var, line length). But I think it's fine for it to be this way for now. You could do that as a separate PR once we get @rynowak's StyleCop changes working.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13242924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13243064", "body": "Maybe throw in a TODO? Might be easier for you to scan for them\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13243064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13419935", "body": "Nice catch.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13419935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13420087", "body": "https://github.com/aspnet/KRuntime/issues/289\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/13420087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16423289", "body": "Could you add a comment as to what makes this a special tag?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16423289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16423562", "body": "You could return it from inside the `using` block.\n\n```\nvar complete =  Optional(HtmlSymbolType.CloseAngle);\n...\nOutput(SpanKind.Markup);\nreturn complete;\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16423562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16423599", "body": "`string`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16423599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16423735", "body": "But aren't you looking for a closing `</script>` tag rather than ending in an exclamation?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16423735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16424654", "body": "Does this have to deal with concurrency? If not, it would be much easier to read this piece of code if you simply set a flag and invoked it if it's not set. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16424654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16442406", "body": "Probably needs to use `StringComparison.Ordinal`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16442406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16442486", "body": "Could you rename i to be something more meaningful? It's intent is not very obvious from reading the code. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16442486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16443202", "body": "Nicely done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16443202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16443339", "body": "Could you add a input for this test that does a WriteLine for a string containing new line chars? \n\ne.g. `\"1234\" + Environment.NewLine + \"123\" + Environment.NewLine + \"12\")`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16443339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16444957", "body": "I thought of using absoluteIndex, but we already have that. If you can't think of an alternate name before you merge it in, this can stay as is.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16444957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16777437", "body": "Needs license header\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16777437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16777689", "body": "Could you change this to `var` while you're touching this file?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16777689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16778011", "body": "Looks like there's a bunch of other places with `\\r\\n` instead of using `Environment.NewLine`. Could you send a separate PR for this and leave the new lines here as is for now (since that's unrelated?)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16778011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16778147", "body": "`string` (casing)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16778147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16778831", "body": "Would this mean we'll treat `<text>` as tags and you could write tag helpers for it? It does seem like a change in the parsing behavior for these tags - they were simply transitions earlier, now it's a markup tag and a transition.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16778831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930096", "body": "Is this method intentionally trying to de-duplicate values via `Union`? Or did you want to have `Enumerable.Concat` here instead?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930111", "body": "Could we merge `TagHelperRegistrar` and `TagHelperProvider`? Seems like this type is a simple wrapper around the result of Registrations and doesn't need to be separate?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930116", "body": "Might be ok to simply expose this as an indexer. This way the implementation of the registration doesn't creep into consumers.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930123", "body": "This property seems to be used by the code generator. Is the comment about it being for testing accurate? Also `nameof(IsSet)` if it's referring to the property below.\n\nIgnore the testing bit. `nameof` still works\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930163", "body": "Is there a way to avoid this and actually pass this in as part of the test data? If `GetBuildType` has a bug, you're simply verifying the bug at this point rather than verifying your expectation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930169", "body": "Make this into separate tests - ones that `TagHelperAttributeCodeGenerator_GeneratesValuesCorrectly_ForStringProperties` etc \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930176", "body": "``` C#\nif (!_registrations.TryGetValue(descriptor.TagName, out var value))\n{\n    value = new HashSet<TagHelperDescriptor>();\n   _registrations.Add(value);\n}\n\n_registrations.Add(descriptor);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930177", "body": "Make this a set instead\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930180", "body": "Not super sure on this - if we depend on a type's uniqueness, should it implement `IEquatable<T>`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930187", "body": "Interface maybe?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930199", "body": "`isSet ? \"true\" : \"false\"`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16930199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16962713", "body": "More along the lines of `public List<TagHelperDescription> this[get; set;]` \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16962713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16962743", "body": "If it's always going to be an abstract type that's meant to carry context, an interface is probably nicer. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16962743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16962770", "body": "Yeah. The only scenario that would be affected by removing the Union and using a set instead is when a user registers a helper as both tag specific as well as a catch all. I imagine in that scenario we end up running the helper twice - which might be ok because it's not a very sensible thing to do to start with.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16962770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187395", "body": "Wouldn't this need to conditionally Take `tagBlockChildCount - 2` or `tagBlockChildCount - 1` depending on if it's ending in `>` or `/>`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187577", "body": "@davidfowl mentioned this doesn't work correctly for release builds (https://github.com/aspnet/KRuntime/commit/eb94c849080d63f31b4a423eae76c339da1a557e). Might want to hold off on using this until the next CTP.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187637", "body": "`if ((var generator = childSpan.CodeGenerator as LiteralAttributeCodeGenerator) != null)` would also work.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187778", "body": "Just to make sure this is expected - there seems to be the possibility that `builder.Children[i]` could be null for some `i`s. Is this handled in the consuming code?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187915", "body": "`children[0]`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17187915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188031", "body": "`IsAttributeValueStart`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188276", "body": "`.Count > 0`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188337", "body": "`string.Equals(currentTagHelper.TagName, tagName, StringComparison.Ordinal)`  or `OrdinalIgnoreCase` depending on how it's interpretted?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188516", "body": "`IsRegisteredTagName`? It seems odd to read `IsValidTagHelper(tagName, childBlock) && IsTagHelper(tagName)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188596", "body": "``` C#\nchildBlock.Children.FirstOrDefault();\nDebug.Assert(child != null);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188692", "body": "Do you need to account for casing in the tagName comparison? Also\n\n`return tagName != SyntaxConstants.TextTagName && child.Kind != SpanKind.Transition;`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17188692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17192101", "body": "It might be nicer to have a copy-ctor for this in the base type that you  pass `generatorContext` to.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17192101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17249927", "body": "When `newCodeGenerator` is null and `child.IsBlock` is `false` ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17249927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17384017", "body": ":-1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17384017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17384153", "body": "We only generate a Write statement for expression chunks if the expression is being written (i.e. we have a `Write(foo);` statement. So the instrumentation is conditionally generated. Literals always result in a `WriteLiteral` invocation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17384153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17384225", "body": "Makes it particularly hard to not run Format document before I send a PR and then undo these changes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17384225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17758725", "body": "These shouldn't matter for release builds, should they?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17758725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17783842", "body": "More so, the value always seems to be overwritten by one of the two ctors\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17783842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17883277", "body": "It's clean as it is. I don't think saving one liner per test warrants inheriting from another type\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17883277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17883280", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17883280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17883289", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17883289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17883341", "body": "There's no benefit to it - Instrumentation is a runtime feature. That said, `EnableInstrumentation` accounts for this already - https://github.com/aspnet/Razor/blob/dev/src/Microsoft.AspNet.Razor/RazorEngineHost.cs#L121\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/17883341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131373", "body": "`readonly`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131438", "body": "`static`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131488", "body": "To add to this, does specifying assembly version make sense here? I thought that they were primarily meant for GACed assemblies\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131498", "body": "Isn't it the file at that path though?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131510", "body": "Not that the StreamReader does a particularly good job detecting the encoding via BOM, but why would we assume files on disk are always UTF8 encoded?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131517", "body": "Isn't byte a C# keyword?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18131517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18175314", "body": ":-1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18175314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18296993", "body": "Bad merge. `CreateExpressionCodeMapping` can be removed since it's not referenced\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18296993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18321449", "body": "Could we change `ImportedUsings` to be a `HashSet<string>(StringComparer.Ordinal)` instead? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18321449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18321517", "body": "Do `[NotNull]` instead\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18321517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18321531", "body": "Extra line?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18321531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18321956", "body": "`.Any()`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/18321956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16444957", "body": "I thought of using absoluteIndex, but we already have that. If you can't think of an alternate name before you merge it in, this can stay as is.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16444957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19505252", "body": "You could do that conditionally inside the `RemoveTagHelperDescriptors` code path.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19505252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19505297", "body": "Additionally might also want to add a test to cover that the `Resolve` Setup is invoked once for each `LookupText`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19505297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19505325", "body": "Shouldn't need the `private set;`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19505325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19505399", "body": "Also, might want to go with \"Gets the text used to look up...\". The pattern with property summaries is to specify if it's a read only property (Gets a ...) or a read-write property  (Gets or sets  ..)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19505399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19515738", "body": "Might want to do `typeof(...).FullName` here. Names without namespaces might make it less easy to figure out how fix this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19515738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19536847", "body": "Does this require a test that does single quotes?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19536847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19536894", "body": ":100:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/19536894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396156", "body": "This doesn't necessarily handle errors, more like aggregates them. Maybe call it `ParserErrorSink`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396181", "body": "`public IEnumerable<RazorError> Errors { get; } = _errors;`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396192", "body": "Or leave as is :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396290", "body": "`errorHandlerFactory` perhaps?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396339", "body": "Also, any reason why you couldn't just pass in the actual `ParserErrorHandler` instance (or null) rather than pass in a factory?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20396339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507083", "body": "`return assembly.ExportedTypes`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507095", "body": "cc @davidfowl . Should he be using `IAssemblyLoader` here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507126", "body": "`return Type.EmptyTypes;`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507386", "body": "Is this used often? If not, just have things call the other method with a `ParserErrorSink` instance or create a test helper method for this. Doesn't seem like you need to create a test-only ctor for not passing in one parameter.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507536", "body": "Does it need the `private set`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507864", "body": "Same comment for the other two test only ctors that were introduced.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20507864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20594962", "body": "`Type.EmptyTypes` \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20594962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20666874", "body": "Don't need to use `[NotNull]` in tests.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20666874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681163", "body": "`var`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681294", "body": "Does the distinct guarantee you won't have more than one `descriptor` with the same Name\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681307", "body": "Remove\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681407", "body": "Use `First()` instead of `Single()`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681563", "body": "I'm not sure how we determine the `attributeTypeName` to start with, but is it a value that the user types in? For instance, it prevents the user from saying `string',`String`etc and specifically use`System.String`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/20681563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/21385643", "body": "Maybe call this `GetChildContentDelegate` - we have some precedence for naming delegates it in this fashion elsewhere in Mvc.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/21385643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/21388048", "body": "`executeChildContentAsync: () => Task.FromResult(result: true)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/21388048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/21388355", "body": "Could you write a comment on what's happening here? This is pretty difficult to follow. In particular, why are we making blocking calls?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/21388355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/21869264", "body": "super nit, split the comment into two lines (or more if you're creative). \n\n> When symbols are accepted into SpanBuilders their locations get altered to be offset by the parent. We account for this by marking our start location prior to adding the symbol so we know the location of the attribute value start within the document.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/21869264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/22121058", "body": "Is this the only location where `SourceLocation.One` is used? Doesn't seem like you'd need to define a public field for that purpose.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/22121058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552624", "body": "Why not an interface here? The base type doesn't seem to have have any functional code\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552640", "body": "``` C#\npublic override Encoding Encoding { get; }\n\nEncoding = encoding;\n```\n\nDoes that work?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552709", "body": "Sorted needs to appear before `NotNullAttribute`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552737", "body": "``` C#\nvar result = Assert.Type<TagHelperContent>(output);\nAssert.Equal(\"Hello World\", result.GetContent());\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552748", "body": "Why would the output be null here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552806", "body": "`return _buffer.ToString()`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/25552806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/27808076", "body": "Maybe link to the composite format string link: https://msdn.microsoft.com/en-us/library/txafckwd(v=vs.110).aspx\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/27808076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/27808204", "body": "Might be useful to add a couple of tests to verify composite scenarios (`{0:X}`, alignment etc). This would help in the event we ever switch the underlying implementation like the bug proposes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/27808204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/27808286", "body": "Add a test with `[ReplaceCulture(\"fr-FR\")]` to verify we pick the default culture. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/27808286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28259682", "body": "`KeyEquals`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28259682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28259857", "body": "Let's not do this \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28259857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28260187", "body": "Is this necessary - can we simply have a ctor for this instead?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28260187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28260261", "body": "Maybe make this `IEquatable<IReadOnlyTagHelperAttribute>` instead?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28260261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28260921", "body": "Should this be first attribute?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28260921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28261061", "body": "Consider exposing this via a property\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28261061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28262409", "body": "Wouldn't you need to support other types (ints, bools) etc in that case?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28262409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28276770", "body": "Consider rephrasing this? For instance:\n\n> Content that precedes the HTML element.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28276770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28289065", "body": ":sad panda:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28289065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28292045", "body": "I'm not sure how attached we are to these operators - they are scarcely used in our code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28292045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28292308", "body": "Will fix.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28292308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28300599", "body": "I think we generally avoid throwing the exception from `Ensure` methods to ensure we get the most accurate stack traces.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28300599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28323248", "body": "Nah, it's 2 lines of code - it can stay as is.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28323248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28323282", "body": "I can merge this in - was trying to avoid too much diff.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28323282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28323996", "body": "I wasn't super sure if it made sense to compare file paths. For instance, if you were to try sorting `SourceLocation { FilePath = \"/Views/_GlobalImport\", AbsoluteIndex = 10 }` and `SourceLocation { FilePath = null, AbsoluteIndex = 30 }`, how would you expect the results to be? In Mvc's case, an imported `Chunk` belongs to the page's `CodeTree`, so the one from `GlobalImport` would be first. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28323996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28324015", "body": ":100: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28324015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28324099", "body": "We use this one all over the place - I'm being pretty lazy in this PR and specifically using the other ctor when creating inherited Chunks in Mvc. The existing code continues to use this ctor.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28324099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28324330", "body": "Based on a conversation with @loudej yesterday about case sensitivity in paths - this should be `Ordinal` since it's source is programmatic and not something the user specifies.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28324330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28329767", "body": "We could use property initializers for these now - `public TagHelperContent PreElement { get; } = new DefaultTagHelperContent();`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28329767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28450014", "body": "Also confirmed with Todd that these operators aren't used in tooling.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28450014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28456143", "body": "I guess if we don't necessarily care about the semantics of the Comparison, just the fact that it doesn't throw - I'll use `StringComparison.Ordinal` here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/28456143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "natemcmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/8c7c486641d7fb61d6bf97baadbe989da9a5b0a7", "message": "Update build tools to 2.1.0-preview1-15670 and update list of exclusions for Razor.Design"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/34054339eddc7c6f640f21e5ae7025a75d0c726c", "message": "Upgrade to build tools 2.1.0-preview1-15651"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/82a68d73de819a56a249d735b2bd2ee9c56aeb80", "message": "Include the VSIX and MPack files in the bill of materials"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/5acef44685dec7cba707ea2c49f1b66fe7e295db", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/809dedd40cf971fedb7affe89480bdf480799ae2", "message": "Preserve DotNetPackageVersionPropsPath when restoring with msbuild.exe"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4d737af1675d40283bd7ab87dbdc4e307ca544a4", "message": "Pin tool and package versions to make builds more repeatable\n\nPart of aspnet/Universe#575"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/6c7551d9c7fc7a9e60d29ae6a39d46924960e6e6", "message": "Require the Microsoft.VisualStudio.Component.VSSDK workload to be installed"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b064a28dcfb1c9e1b9c694022b67e6393f2f72db", "message": "Ensure the VSIX project is skipped when executing restore and build from dotnet-cli"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/39c190aa0dc092a0d1d903c4e7bc9686553a3f00", "message": "Preserve the build number when building the VSIX (#1702)"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/471722eba1a5e6ea0ad1b00cd01cd32b5cab02db", "message": "Use PackageLineup to manage PackageReference versions\n\nThis uses a feature of KoreBuild which will select PackageReference\nversions based on a lineup file. This helps unify versions between repos\nand helps us ensure we are consistent across multiple components."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4094e8b8f3bbd507d85133db2954cd7bb97bfb63", "message": "Use PackageReference instead of project.json in the VSIX project (#1642)"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/0c3fff31374d8cfbcaa53cdbd0cf5aa492e8762c", "message": "Upgrade to xunit 2.3.0-beta4 (#1640)\n\nIncludes a few changes required by xunit.analyzers, such as removing unused theory parameters."}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/4cadee2762962dca216abad66a6b4b71b9e0a32a", "message": "Use Directory.Build.props/targets (#1641)"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/244c6ddccd630e313b9a1fd9893ab943c5e15714", "message": "Fix syntax warning when running build.sh on older versions of bash\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/81c596ae58762ecb87f649433af26a8195230f1b", "message": "Update bootstrappers to use the compiled version of KoreBuild\n\n[ci skip]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/26973698", "body": "Missed a rename...\r\n```\r\nbuild\\netstandard2.0\\Microsoft.AspNetCore.Razor.Design.props\" could not be loaded. The '_RazorTaskFolder' start tag on line 25 position 6 does not match the end tag of 'TaskFolder'. Line 25, position 87.\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/26973698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/0452feced7620b7b7302d59d2ea5af56730b24ed", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/2e6c06bc6ff3079db3791e3da6f0de7393b62407", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/1c9c05b64d3b8d66bd5373750598b1aa91c134c9", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/3ee6426503dbdc9dfc1d11741fbfcaed9ab58f9d", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/3da41ae4bb34dfc7ce3aaa75d78630ce22ecdf4b", "message": "Remove unneeded exclusion"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/99cb120571fa68f4176ceb547eddf252ad555a59", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/c28940c915aa35268a05cf580ddac346270c2aba", "message": "Add RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/85634ea4329ecd69a2e5030d821d925d74601192", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/a509de0eb53b00b1e11a509f0332018d9916847b", "message": "Set AspNetCoreVersion"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/643efbe660b2df96b9b29c338e0a84e2dbabd816", "message": "Change version on Binding redirects"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/e7a53597f7e521cf75d54c1780dfdbeabaa690d4", "message": "2.0.0-rtm to 2.1.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/cd81c2a48f004a7a4a35bc71ce224d753f0d0e54", "message": "Skip first time experience on Appveyor"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "evil-shrike": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/a0733ffa919abb06cc2de8c840cf4dbf9e1db1c7", "message": "RazorPageGenerator: extracted creating RazorEngine into a method [refactoring] (#1727)\n\n* RazorPageGenerator: extracted creating RazorEngine into a method to simplify reusing logic in custom generators\r\n\r\nRazorPageGenerator: added optional cli argument with base directory  (previously current dir always was used)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/4d0a7df1c46ca690e3747cdd9f9ab9f4184258bb", "message": "Increase Minimum Version of Visual Studio to 15.3.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JunTaoLuo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/69d68ae62b142a470e0e8912c03dc05bf8b270c6", "message": "Ensure fallback to curl after failed wget"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/08dbc2b4a771a85e8cab11339b20bcb214cdd882", "message": "Update __get_remote_file logic"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikeharder": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Razor/commits/b0fa49b9e19842c6615623b491dd6dc243737b37", "message": "Comment to re-enable package downgrade warnings (#1578)"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/35c8da94bf0ae9e4cc2b04c95e4e08523272f5b2", "message": "Temporarily disable package downgrade warnings (#1576)\n\n- Revert when RoslynDevVersion >= RoslynVersion"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/a92317b2ff9849813259430e8c0550d0f2c9e31e", "message": "Merge pull request #1575 from aspnet/rel/2.0.0\n\nUpdate Roslyn to 2.3.1 (#1574)"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/8ff9ef7b4c7204128e969997c6d6858b46d300f8", "message": "Merge branch 'dev' into rel/2.0.0"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/c02d701e6e18b02a993a0a649ac601354b4977d6", "message": "Update Roslyn to 2.3.1 (#1574)"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/452e3ccfb071880931dc13c9868f1091cb5cf716", "message": "Merge remote-tracking branch 'origin/rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/01fe818dcd39c2148a166216fbf635a97da28d38", "message": "Update dependencies to match Visual Studio 15.3 (#1534)"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/121c20ef264753c6626ac96110c4d5d8dea77224", "message": "Merge remote-tracking branch 'origin/rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/b8f550fdf6d0ef19ff53cd0680764cf89c444f42", "message": "Enable Travis and AppVeyor in \"rel\" branches (#1539)"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/63614919617349d67b66992f35490b00a1aa5747", "message": "Merge remote-tracking branch 'origin/rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Razor/commits/aebb841e41f594896105026a02249b98cbcf23cd", "message": "Upgrade Roslyn to 2.3.0-beta4-* (#1533)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/22500055", "body": "Yes, please revert my revert.  I meant to do this last week but forgot.", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/22500055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34887957", "body": "I like it :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34887957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/39824227", "body": "@NTaylorMullen when you have cycles can you look at this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/39824227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/41970849", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/41970849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/41971594", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/41971594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44803554", "body": "omg\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44803554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45149045", "body": "This script is your friend\n\n```\nfunction FixProjectJsonCasing\n{\n    ls -r project.json | ?{ $_.Name.ToString().StartsWith(\"P\") } | %{ mv $_.FullName \"$($_.FullName)2\" }\n    git add -A\n    git commit -am \"Renamed Project.json to Project.json2\"\n    ls -r Project.json2 | %{ mv $_.FullName $_.FullName.ToLower().Trim('2') }\n    ls -r *.kproj | %{ $s = cat $_; $s= $s.Replace(\"Project.json\", \"project.json\"); [IO.File]::WriteAllLines($_.FullName, $s, [Text.Encoding]::UTF8); }\n    git add -A\n    git commit -am \"Fixed project.json casing\"\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45149045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45153877", "body": "@NTaylorMullen nah dude, I manually ran that script on _all_ the repositories. If you see any repository anywhere with uppercase P let me know.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45153877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/5263037", "body": "nit: StyleCop is stupid\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/5263037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/13324345", "body": "Leave this as empty string\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/13324345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/18770355", "body": "\ud83d\udc4f \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/18770355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "yishaigalatzer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34946882", "body": "Is this change fighting with @inherits ? Or is it supporting both inherit and basetype from the view engine?\n\nIs there a test to verify this change?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/34946882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35966348", "body": "Good to go\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/35966348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42625044", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42625044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42717168", "body": "commonize the consts then\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42717168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42719030", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/42719030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43022461", "body": "Yes we should look at it for this version. But as an opportunistic low priority fix. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43022461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43022585", "body": "I think we shouldn't do this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43022585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43022660", "body": "Hold off for overall feedback and LAB session\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43022660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43023000", "body": "Like you mentioned they are not accepted.\nUnfortunately we can't take a look at them at this point.\n\nAnd here is the link to the guidance (double hop, sorry) https://github.com/aspnet/Razor/blob/dev/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43023000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43235491", "body": ":shipit: once you get a nod from @anandjp & @ToddGrun \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43235491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44675468", "body": "@wendywei345 according to you there are issues in your tests, can you please post data here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44675468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46498484", "body": "fix the type and :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46498484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49340259", "body": "Please provide a code sample of how this is being used.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49340259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49941146", "body": "Thanks for reporting it, we are not quite sure what is the use case for this, and would appreciate if you can provide more use cases.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49941146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50131988", "body": "Adam - Thanks for the info. Just to let you know where we stand at the moment with Razor.\n\nWe are working on another approach to improve Razor, which is where we plan to spend most of the time in the near future that will make razor more fluent by using what we call taghelpers. See https://github.com/aspnet/Razor/issues/75 and similar bugs in the Razor and MVC Repos.\n\nWe will eventually get back to this, though we might also add the support for Generic helpers for supporting the strongly typed ViewComponents (which is related but not exactly what you are asking for here) https://github.com/aspnet/Mvc/issues/612\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50131988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50793953", "body": "Duplicate of #872\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/50793953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53018520", "body": "That will break legacy layout pages, but that might be ok. We can also just go with Pranav's suggestion and call .Wait().\n\n@DamianEdwards do you have strong reason for just keeping one path?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53018520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53297288", "body": "duplicate of #69\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53297288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53299815", "body": "duplicate of #72 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/53299815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55166237", "body": "We changed the design and this issue is no longer needed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55166237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55170205", "body": "This item is to test, and **validate** all the \"special\" cases like enums, dictionaries, collections (array/list/etc.).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55170205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55171056", "body": "This is a regression from Razor 3\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55171056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55171660", "body": "We need to come up with the design for this. \n@rynowak what about `nameof(componentName)` ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55171660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55172806", "body": "This will be done using an attribute only. There is no other planned way to do so, at this point, but we might at some point add a mechanism to provide descriptors using a provider. This might be an interesting case for view components (though we can make view components work through metaprogramming).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55172806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55173158", "body": "The discussion here, is to make the CI pass for Linux and MAC. Not generically to fix the tests.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55173158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55176001", "body": "If we do nothing here, the code will just not compile.\nthe generated code will look something like that:\n\n```\nRazor => { int thevariable = 3 } <MyTag class=\"@thevariable\" />\nC# generated code => int thevariable =3; context.AddAttribute(\"class\", Write(thevariable))\n```\n\nDoug thinks this should actually generate\n\n```\nint thevariable = 3; tagHelper.class = @thevariable;\n```\n\nAnother thing to discuss is that passthrough just doesn't work in this case for `class=\"foo @bar\"` when @bar evaluated to false or null, spaces are being removed and cleanedup, which prevents pass through\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55176001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55176479", "body": "This is necessary infrastructure piece to execute the taghelpers at runtime.\n\n@NTaylorMullen please flesh out what this is going to do.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55176479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55176685", "body": "Duplicate of #24 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55176685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55177605", "body": "@NTaylorMullen let us verify out var in a functions block, and ?. `@Foo.FirstOrDefault()?.Something`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55177605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55178873", "body": "@NTaylorMullen says that the unique thing about this \"Feature\" is that it will enable ifdefing(TM) other directives, as you can already ifdef regular C# code\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55178873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55193972", "body": "@bar that's very true. I'll make sure not to use foo either :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55193972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55924750", "body": "@anandjp do you have a functional test for this scenario?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55924750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55964360", "body": "Thanks for your suggestion. It seems interesting, and we intend to take a look at it at some later point.\n\nThe reason is that we are spending our time on coming up with a different way to address this issue with a new feature called `TagHelpers` it is still currently being built, but it has the concept of nesting \"helper style code\", which is something the traditional Html helpers are not very good at.\n\nUnfortunately I can't show samples yet, it's still all in feature branches, but here is a quick video that talks about all that's new in Razor vNext including tag helpers - http://www.youtube.com/watch?v=Za89_-I25AI\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55964360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55967291", "body": "Here is a simplified repro that can be pasted into a single page:\n\n```\n@functions\n{\n    public static MvcHtmlString DoSomething(Func<dynamic, HelperResult> content)\n    {\n            return MvcHtmlString.Create(content(null).ToHtmlString());\n    }\n}\n\n@DoSomething(\n    @<div>\n        Hello world\n        @{\n            Write(DoSomething(3, @<div> My name is the guy with air</div>));\n        }\n    </div>)\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55967291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55970899", "body": "Talked to @anurse to understand the core issue here.\n\nThe code generated from \n\n```\n@<div> ... </div>\n```\n\nis actually generating a lambda that takes a parameter, something like:\n\n```\n(item) =>\n{\n   // write some code into a helper\n}\n```\n\nWhen you try to nest what would get generated (without changing the current generator)\n\n```\n(item) =>\n{\n    // write something\n    then call a new lambda (item) => \n        // write something else\n}\n```\n\nThe issue is that C# will prevent item from being used in a nested way.\n\n**Alternatives**\nAdd a new syntax that allows creating lambdas without parameters e.g. `@_`\nGenerate item for the basic level, then item1, item2 as you keep nesting in. - This one creates complications when refactoring code, or copying/pasting it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55970899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55971175", "body": "Just like my feedback for #133 we plan to address this with scenario with Tag Helpers, but might be worth looking at some later point.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55971175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55971621", "body": "@NTaylorMullen please add samples.\n\nI'm also moving this out to RC.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55971621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55972095", "body": "From discussion and review with @pranavkm we realized you shouldn't rely on how git checks out your files to match the Environment.NewLine, but should just rely on the code directly.\n\nYou can either include Environment.NewLine in the input, or put the files in the resources (binary so git doesn't affect them), but then use the explicit \"\\r\\n\" or the opposite.\n\nNote that users can copy/deploy files over (both Razor and source) and not just check them out. So relying on the git behavior to match the target will not always work.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55972095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55972627", "body": "@DamianEdwards ping\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55972627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55972677", "body": "@pranavkm do we still need this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55972677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55973184", "body": "Not sure why we break the lines to begin with? These files are not meant to be human readable\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55973184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55973443", "body": "BTW breaking by linebreaks, might reduce memory because literal strings are going to repeat themselves, and with pre compilation they are going to get interned in one assembly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55973443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56069917", "body": "I'm saying that tag helpers address some of the concerns of nesting content. The idea is that in many cases you don't need a helper, you can use a custom tag and that supports nesting.\n\nNevertheless we will look at it after the beta release, as you can see from the fix alternatives, it will require some new syntax or new behavior, so not entirely straightforward.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56069917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56070234", "body": "Tag helpers will have access to the content.\n\nBy default they won't because it incure extra cost, but that doesn't mean it won't be supported. It just means you will have to opt into it when you build your tag helper.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56070234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56106930", "body": ":shipit: to the feature branch. Don't integrate an empty project to dev please :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56106930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56210243", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56210243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56210414", "body": "I would not take this fix. We should factor out the state machine instead. The value of the result seems low (1%)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56210414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56210786", "body": "@grahammendick please open another issue if you want to make a suggestion for tag helpers. But in general you have full control of the rendering in runtime inside the taghelper, but you would not be able to change the mode, because the mode affects the code generation. If you want the full control you would choose modify, and pay some perf cost of buffering the inner result.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56210786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56227933", "body": "Please take if off this thread, look at the tag helper feature and provide specific feedback to how you think it can be improved.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56227933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56929789", "body": "Taylor is this a problem for rosyln too? The bug talks about the mono c# compiler\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56929789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9471530", "body": "is the \" => \" something we should encapsulate in constants?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9471530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9652512", "body": "readonly?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9652512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9652605", "body": "1. we typically don't build up all these extra namespaces\n2. Not sure what compiler means? We are not doing any compilations in this assembly\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/9652605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10021341", "body": "add a comment to what happens inside the using statement\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/10021341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16500913", "body": "why is this not on top of the write method?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16500913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16501107", "body": "grab the diff in absolute index from the writer itself directly?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/pulls/comments/16501107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Praburaj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/41316913", "body": "This seems to work fine now after @NTaylorMullen 's fix. Closing the bug. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/41316913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "thesoftwarejedi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43025109", "body": "I respect that and understand your position.\n\nBy \"no guidance\" I meant no guidance on branch policy (hence submitting on dev), which of course there is no guidance because changes are not accepted.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/43025109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wendywei345": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44687493", "body": "Will do.\n\nFrom: Yishai Galatzer [mailto:notifications@github.com]\nSent: Friday, May 30, 2014 10:14 AM\nTo: aspnet/Razor\nCc: Wendy Wei\nSubject: Re: [Razor] Task: Performance test Razor to see if there are v3 -> v4 regressions (#49)\n\n@wendywei345https://github.com/wendywei345 according to you there are issues in your tests, can you please post data here?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Razor/issues/49#issuecomment-44675468.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/44687493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xqiu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45305303", "body": "Thanks dougbu for replying.  That will cause exception, please see issue https://github.com/aspnet/Razor/issues/63\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45305303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45305997", "body": "Sure\uff0c let me close this one.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/45305997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ajcvickers": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46603107", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/46603107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "am11": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49724651", "body": "@danroth27, thanks for the offer. \n\nI was thinking something like \"Needle\":\n\nNeedle is _sharper_ than Razor and _niftier_ than Slim. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49724651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "schotime": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49950028", "body": "No problems.\n1. Loops.\n\n``` csharp\n@foreach (var item in Model.list) {\n    @Html.TextBoxFor(x=>x.List[i].Name)\n}\n```\n\nThe problem is that you don't have an \"i\" reference. so then you have to put a variable outside of it and increment it at the end, which becomes very ugly. \n\nInstead this would be way better.\n\n``` csharp\n@Model.List.Each(@=> (i) {\n    @Html.TextBoxFor(x=>x.List[i].Name)\n})\n```\n1. Context\n   The only real way to provide context at the moment is to use a using statement that doesn't work for most cases and you have use the using statement which looses its meaning.\n   We use a lot of html conventions and we have the ability to apply certain conventions for certain parts of the page. Some sudo code looks like this.\n\n``` csharp\n@Html.Form<UserInputModel>(@=>(builder, i) {\n    @builder.Input(x=>x.List[i].Name)\n}\n```\n\nThis builder can then have the conventions applied to it for its scope and all Inputs might then have a particular class or what ever the convention may be. At the moment this may have to be stored in the context.Items collection then removed when a using statement disposes or something. Its much easier to close the <form> tag, at the end of the Form call.\n\nHope this provides you with some more context. This style of functional programming makes it super easy to do powerful layouts in Razor.\n\nLet me know if you need and more info...or to test a spike or help out with the syntax or some dev.\nAdam\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/49950028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55193227", "body": "@yishaigalatzer hi, you should stop using my handle for that :p\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55193227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55195166", "body": "@yishaigalatzer beware... foo has bad temper! haha\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55195166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "anandjp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55931803", "body": "Not yet. I am trying this manually. We will add them once it starts working.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/55931803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "grahammendick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56019263", "body": "A big problem with razor/html helpers was that you couldn't have custom content between the start and the end tag, you had to write the whole tag from start to finish in one go. This was the reason that forms had to be done with IDisposable.\n\nThanks for the youtube link, it sounds that the new Tag Helpers will address that issue. Make sure that Tag Helpers have access to the content as a string. It was mentioned this would be an opt in, but I just wanted to stress this is an important feature and don't want it to get lost with the new emphasis on early flushing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56019263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56030164", "body": "Thanks but your response is a bit confusing. Are you saying that Tag Helpers will address it or are you saying you might look at it later?\n\nI can see how Tag Helpers will address #133 but it's not clear how they'll address this scenario. Are HelperResults a thing of the past in Razor vnext? Could you give an indication how Tag Helpers will help?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56030164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56192023", "body": "Can you make the opt in mechanism run time rather than design time so it can be varied by request?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56192023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56213992", "body": "Can't you generate design time code that checks a runtime property?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56213992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Sense545": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56936443", "body": "The default stack sizes are 256 KB for 32-bit ASP.NET apps and 512 KB for 64-bit ASP.NET apps.\nMy code example from the xamarin bug report shows that a stack overflow exception will be thrown when appending 1500 x 80 character lines with a stack size of 512 KB.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/issues/comments/56936443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "victorhurdugaci": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/8547877", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8547877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Razor/comments/8722154", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/8722154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sajayantony": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/16224904", "body": "/cc @mnltejaswini\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/16224904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "campersau": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Razor/comments/21720134", "body": "Is `builder` needed?", "reactions": {"url": "https://api.github.com/repos/aspnet/Razor/comments/21720134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}