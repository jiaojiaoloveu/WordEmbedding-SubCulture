{"_default": {"1": {"jotab123": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10740", "title": "Database with apostrophe in name throws an exception on create", "body": "I'm trying to create a named Test'1 database, the code below throws an exception but creates the database in server. Once the database is created, the code works fine:\r\n\r\n```\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var ctx = new AppContext())\r\n            {\r\n                var entity = new Entity();\r\n                ctx.Add(entity);\r\n                ctx.SaveChanges();\r\n            }\r\n        }\r\n    }\r\n\r\n    public class AppContext : DbContext\r\n    {\r\n        public DbSet<Entity> Entities { get; set; }\r\n\r\n        public AppContext()\r\n        {\r\n            Database.EnsureCreated();\r\n        }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=Test'1;Trusted_Connection=True;\");\r\n        }\r\n    }\r\n\r\n    public class Entity\r\n    {\r\n        public int Id { get; set; }\r\n    }\r\n```\r\n\r\nException message: \r\n> System.Data.SqlClient.SqlException: 'Incorrect syntax near '1'.\r\n> 'READ_COMMITTED_SNAPSHOT' is not a recognized SET option.\r\n> Unclosed quotation mark after the character string ');\r\n> '.'\r\n\r\nStackTrace:  \r\n>  en System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n>    en System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n>    en System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\n>    en System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n>    en System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)\r\n>    en System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)\r\n>    en System.Data.SqlClient.SqlCommand.ExecuteNonQuery()\r\n>    en Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary`2 parameterValues)\r\n>    en Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)\r\n>    en Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)\r\n>    en Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)\r\n>    en Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerDatabaseCreator.Create()\r\n>    en Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated()\r\n>    en Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated()\r\n>    en EFCoreTest.AppContext..ctor() en C:\\Users\\User\\Projects\\EFCoreTest\\EFCoreTest\\Program.cs:l\u00ednea 29\r\n>    en EFCoreTest.Program.Main(String[] args) en C:\\Users\\User\\Projects\\EFCoreTest\\EFCoreTest\\Program.cs:l\u00ednea 14\r\n\r\nIf I use double apostrophe to escape the character in connection string, the database is also created but throws a different error:\r\n`optionsBuilder.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=Test''1;Trusted_Connection=True;\");`\r\n\r\nException message:\r\n> System.Data.SqlClient.SqlException: 'User does not have permission to alter database 'Test'1', the database does not exist, or the database is not in a state that allows access checks.\r\n> ALTER DATABASE statement failed.'\r\n\r\nStackTrace:  \r\n\r\n>    en System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n>    en System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n>    en System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\n>    en System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n>    en System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)\r\n>    en System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)\r\n>    en System.Data.SqlClient.SqlCommand.ExecuteNonQuery()\r\n>    en Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary`2 parameterValues)\r\n>    en Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)\r\n>    en Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)\r\n>    en Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable`1 migrationCommands, IRelationalConnection connection)\r\n>    en Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerDatabaseCreator.Create()\r\n>    en Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated()\r\n>    en Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated()\r\n>    en EFCoreTest.AppContext..ctor() en C:\\Users\\User\\Projects\\EFCoreTest\\EFCoreTest\\Program.cs:l\u00ednea 29\r\n>    en EFCoreTest.Program.Main(String[] args) en C:\\Users\\User\\Projects\\EFCoreTest\\EFCoreTest\\Program.cs:l\u00ednea 14\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.5.4\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10220", "title": "EF Core v2.0 vs v1.1.2 performance", "body": "I am testing (against SqlExpress) the performance of Entity FrameWork Core v2.0, having worse results than v1.1.2.\r\n\r\nThe test takes the elapsed time of one SaveChanges for a number of entities.\r\n\r\n100 entities: \r\n    v1.1.2: 0.030 seconds\r\n    v2.0.0: 0.12 seconds (4 times slower aprox.)\r\n\r\n1000 entities: \r\n    v1.1.2: 0.68 seconds\r\n    v2.0.0: 1.04 seconds (0.4 times slower aprox.)\r\n\r\n10000 entities: \r\n    v1.1.2: 3.59 seconds\r\n    v2.0.0: 3.59 seconds (same time aprox.)\r\n\r\nFor few entities, the performance drops a lot. Does anyone know how to improve it?\r\n\r\nTest code:\r\n\r\n```\r\n\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Diagnostics;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    /*\r\n     * Performance: Entity Framework Core v1.1.2 vs v2.0.0\r\n     * \r\n     */\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            const int count = 10000; // change this at your own !!!\r\n\r\n            using (var test = new EFSqlServerContext())\r\n            {\r\n                // batch\r\n                test.Insert(count);\r\n\r\n                // time\r\n                var watch1 = new Stopwatch();\r\n                watch1.Start();\r\n\r\n                test.SaveChanges();\r\n\r\n                watch1.Stop();\r\n                Debug.WriteLine(\"######### {0} Entities: {1} seconds\", count, watch1.Elapsed.TotalSeconds);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class EFSqlServerContext : DbContext\r\n    {\r\n        public EFSqlServerContext()\r\n        {\r\n            Database.EnsureCreated();\r\n        }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(@\"Data Source=.\\sqlexpress;Initial Catalog=EFPerformanceTest;Integrated Security=True;MultipleActiveResultSets=True\");\r\n        }\r\n\r\n        public DbSet<MyType> MyTypes { get; set; }\r\n\r\n\r\n        public void Insert(int count)\r\n        {\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                var item = Activator.CreateInstance(typeof(MyType));\r\n                this.Add(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    [Serializable]\r\n    public class MyType\r\n    {\r\n        [Key]\r\n        public int Id { get; set; }\r\n\r\n        public int PropertyA { get; set; }\r\n\r\n        public int PropertyB { get; set; }\r\n\r\n        public int PropertyC { get; set; }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roji": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10739", "title": "Support PostgreSQL native inheritance", "body": "PostgreSQL natively supports table inheritance in the database (see [docs here](https://www.postgresql.org/docs/current/static/tutorial-inheritance.html), and also [some current caveats](https://www.postgresql.org/docs/current/static/ddl-inherit.html)). In theory EF Core could map CLR inheritance relations to this scheme as an additional alternative to TPH/TPC/TPT.\r\n\r\n* You use a special DDL to specify that one table (`capitals`) `INHERITS FROM` another table (`cities`).\r\n* The child table (`capitals`) implicitly contains fields from the parent (`cities`), so to get capitals you only need to select from the child table. In that sense it's like TPC.\r\n* However, tables need to be created for both child and parent, in that sense it's like TPT.\r\n* Selecting from the parent table will by default return children rows, so selecting from cities will return *all* cities. A special `SELECT ... FROM ONLY CITIES` syntax can return only the parents.\r\n\r\nRequested in https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL/issues/59 and [this SO](https://stackoverflow.com/questions/37613577/postgresql-table-inheritance-in-entity-framework).\r\n\r\nDisclaimer: I'm opening this after a conversation with @divega in which he expressed interest, but I imagine the internal impact would be really non-trivial and beyond what you'd want to provide.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10739/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/978ff0cbfffa34c21df1c0cc058dd9621a8a9600", "message": "Add orderby in DefaultIfEmpty_in_subquery_nested\n\nWithout an ORDER BY clause the database results come in an undefined\norder, and the assertion against LINQ to Objects fails (happens in\nPostgreSQL)."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10932536", "body": "I'm definitely no expert here, but here are two comments about the change to using `GetValues()`:\n- It is a non-generic way of accessing values, as opposed to the previous `RelationalObjectArrayValueReader` implementation which used `GetFieldValue<T>()`. In Npgsql, using `GetFieldValue<T>()` avoids boxing/unboxing and is therefore much better for memory efficiency\n- Doesn't this method of getting all the `DbDataReader`'s values risk converting values that may ultimately not be used by the user, wasting time and memory?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10932536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10950642", "body": "@ajcvickers thanks for the very patient explanation. I did as you ask and am using `GetFieldValue<T>` and everything is working well.\n\nRegarding boxing/unboxing, the new major of version of Npgsql uses generics all the way to avoid any boxing/unboxing - at no point within Npgsql is the value represented as an object. So I'm not sure how using `GetFieldValue<T>` could result in _more_ boxing... Of course, if EF itself operates on object values, that means the value gets boxed anyway so `GetFieldValue<T>` may not improve anything (I wonder if it's a goal/possibility to achieve complete boxless handling of values in EF through generics, like what we've done in Npgsql).\n\nAnyway thanks again for your time!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10950642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10950902", "body": "Understood @ajcvickers, #2079 definitely looks like a good step forward. Heap allocations due to boxing/unboxing seem like a pretty significant factor for memory churn and it's great if they can be avoided. For ADO.NET providers that do box internally you're right, and it definitely makes sense to allow each provider to choose either typed or untyped value access for this reason...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10950902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13968187", "body": "Won't this prevent tests from passing on non-Windows platforms? I noticed other places as well where \\r\\n is hard-coded.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13968187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17694860", "body": "Left comment\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17694860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "AhmerAli": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10737", "title": "Not creating database using Migration command Update-Database in ASP.Net Core 2", "body": "I created new ASP.Net core project with WebAPI. Using the below link.\r\n\r\njwt-authentication-with-aspnet-core-2-web-api-angular-5-net-core-identity-and-facebook-login\r\n\r\nI have to use add-migration update-database manually.\r\n\r\nHere I add one thing more that I don't know how to debug app in VS Code. After created my project in VS Code I open my project in Visual Studio 2017.\r\n\r\nWhen I about to run the update command Update-Database in Package Manager Console. I encounter below error also in my understanding the above command is for create the database and add migrations tables in it. (Correct me If I'm wrong).\r\n\r\n```\r\nfail: Microsoft.EntityFrameworkCore.Database.Command[20102]\r\n  Failed executing DbCommand(3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\n  CREATE TABLE[AspNetRoles] (\r\n\r\n     [Id] nvarchar(450) NOT NULL,\r\n     [ConcurrencyStamp] nvarchar(max) NULL,\r\n      [Name] nvarchar(256) NULL,\r\n      [NormalizedName] nvarchar(256) NULL,\r\n      CONSTRAINT[PK_AspNetRoles] PRIMARY KEY([Id])\r\n  );\r\n System.Data.SqlClient.SqlException(0x80131904): There is already an object named 'AspNetRoles' in the database.\r\n\r\n at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action1 wrapCloseInAction)\r\n\r\n at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action 1 wrapCloseInAction)\r\n\r\n at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\n\r\n at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n\r\n at System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)\r\n\r\n at System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource1 completion, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite, String methodName)\r\n\r\n at System.Data.SqlClient.SqlCommand.ExecuteNonQuery()\r\n\r\n at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary2 parameterValues)\r\n\r\n ClientConnectionId:56b94f04-73ff-4391-87fc-36a6c256c650\r\n\r\n Error Number:2714,State:6,Class:16\r\n\r\n System.Data.SqlClient.SqlException(0x80131904): There is already an object named 'AspNetRoles' in the database.\r\n\r\n at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action1 wrapCloseInAction)\r\n\r\n at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action1 wrapCloseInAction)\r\n\r\n at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\n\r\n at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n\r\n at System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)\r\n\r\n at System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource1 completion, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite, String methodName)\r\n\r\n at System.Data.SqlClient.SqlCommand.ExecuteNonQuery()\r\n\r\n at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary2 parameterValues)\r\n\r\n at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary2 parameterValues)\r\n\r\n at      Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary2 parameterValues)\r\n\r\n\r\n at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable1 migrationCommands, IRelationalConnection connection)\r\n\r\n at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)\r\n\r\n at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.UpdateDatabase(String targetMigration, String contextType)\r\n\r\n at Microsoft.EntityFrameworkCore.Design.OperationExecutor.UpdateDatabase.<>c__DisplayClass0_1.<.ctor>b__0()\r\n\r\n at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)\r\n\r\n ClientConnectionId:56b94f04-73ff-4391-87fc-36a6c256c650\r\n\r\n Error Number:2714, State:6, Class:16\r\n\r\n There is already an object named 'AspNetRoles' in the database.`\r\n```\r\n\r\nAlso I share some of my code here and upload my app on [github](https://github.com/AhmerAli/ASP.Net-Core-2-webapi-Application)\r\n\r\n### program.cs\r\n\r\n```c#\r\nnamespace server\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();\r\n        }\r\n\r\n        public static IWebHost BuildWebHost(string[] args) =>\r\n             WebHost.CreateDefaultBuilder(args)\r\n            .UseStartup<Startup>()\r\n            .Build();\r\n\r\n    }\r\n}\r\n```\r\n\r\n### Startup.cs\r\n\r\n```c#\r\npublic class Startup\r\n{\r\n    private const string SecretKey = \"iNivDmHLpUA223sqsfhqGbMRdRj1PVkH\"; // todo: get this from somewhere secure\r\n    private readonly SymmetricSecurityKey _signingKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(SecretKey));\r\n\r\n    public Startup(IConfiguration configuration)\r\n    {\r\n        Configuration = configuration;\r\n    }\r\n\r\n    public IConfiguration Configuration { get; }\r\n\r\n    // This method gets called by the runtime. Use this method to add services to the container.\r\n    public void ConfigureServices(IServiceCollection services)\r\n    {\r\n        // Add framework services.\r\n        services.AddDbContext<ApplicationDbContext>(options =>\r\n            options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"),\r\n                b => b.MigrationsAssembly(\"server\")));\r\n\r\n        services.AddSingleton<IJwtFactory, JwtFactory>();\r\n\r\n        // Register the ConfigurationBuilder instance of FacebookAuthSettings\r\n        services.Configure<FacebookAuthSettings>(Configuration.GetSection(nameof(FacebookAuthSettings)));\r\n\r\n        services.TryAddTransient<IHttpContextAccessor, HttpContextAccessor>();\r\n\r\n        // jwt wire up\r\n        // Get options from app settings\r\n        var jwtAppSettingOptions = Configuration.GetSection(nameof(JwtIssuerOptions));\r\n\r\n        // Configure JwtIssuerOptions\r\n        services.Configure<JwtIssuerOptions>(options =>\r\n        {\r\n            options.Issuer = jwtAppSettingOptions[nameof(JwtIssuerOptions.Issuer)];\r\n            options.Audience = jwtAppSettingOptions[nameof(JwtIssuerOptions.Audience)];\r\n            options.SigningCredentials = new SigningCredentials(_signingKey, SecurityAlgorithms.HmacSha256);\r\n        });\r\n\r\n        var tokenValidationParameters = new TokenValidationParameters\r\n        {\r\n            ValidateIssuer = true,\r\n            ValidIssuer = jwtAppSettingOptions[nameof(JwtIssuerOptions.Issuer)],\r\n\r\n            ValidateAudience = true,\r\n            ValidAudience = jwtAppSettingOptions[nameof(JwtIssuerOptions.Audience)],\r\n\r\n            ValidateIssuerSigningKey = true,\r\n            IssuerSigningKey = _signingKey,\r\n\r\n            RequireExpirationTime = false,\r\n            ValidateLifetime = true,\r\n            ClockSkew = TimeSpan.Zero\r\n        };\r\n\r\n        services.AddAuthentication(options =>\r\n        {\r\n            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n\r\n        }).AddJwtBearer(configureOptions =>\r\n        {\r\n            configureOptions.ClaimsIssuer = jwtAppSettingOptions[nameof(JwtIssuerOptions.Issuer)];\r\n            configureOptions.TokenValidationParameters = tokenValidationParameters;\r\n            configureOptions.SaveToken = true;\r\n        });\r\n\r\n        // api user claim policy\r\n        services.AddAuthorization(options =>\r\n        {\r\n            options.AddPolicy(\"ApiUser\", policy => policy.RequireClaim(Constants.Strings.JwtClaimIdentifiers.Rol, Constants.Strings.JwtClaims.ApiAccess));\r\n        });\r\n\r\n        // add identity\r\n        var builder = services.AddIdentityCore<EmployeeProfile>(o =>\r\n        {\r\n            // configure identity options\r\n            o.Password.RequireDigit = false;\r\n            o.Password.RequireLowercase = false;\r\n            o.Password.RequireUppercase = false;\r\n            o.Password.RequireNonAlphanumeric = false;\r\n            o.Password.RequiredLength = 6;\r\n        });\r\n        builder = new IdentityBuilder(builder.UserType, typeof(IdentityRole), builder.Services);\r\n        builder.AddEntityFrameworkStores<ApplicationDbContext>().AddDefaultTokenProviders();\r\n\r\n        services.AddAutoMapper();\r\n        services.AddMvc().AddFluentValidation(fv => fv.RegisterValidatorsFromAssemblyContaining<Startup>());\r\n    }\r\n\r\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n    {\r\n        if (env.IsDevelopment())\r\n        {\r\n            app.UseDeveloperExceptionPage();\r\n        }\r\n\r\n        app.UseExceptionHandler(\r\n            builder =>\r\n            {\r\n                builder.Run(\r\n                    async context =>\r\n                        {\r\n                            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\r\n                            context.Response.Headers.Add(\"Access-Control-Allow-Origin\", \"*\");\r\n\r\n                            var error = context.Features.Get<IExceptionHandlerFeature>();\r\n                            if (error != null)\r\n                            {\r\n                                context.Response.AddApplicationError(error.Error.Message);\r\n                                await context.Response.WriteAsync(error.Error.Message).ConfigureAwait(false);\r\n                            }\r\n                        });\r\n            });\r\n\r\n        app.UseAuthentication();\r\n        app.UseDefaultFiles();\r\n        app.UseStaticFiles();\r\n        app.UseMvc();\r\n    }\r\n}\r\n```\r\n\r\n### ApplicationDbContext.cs\r\n```c#\r\npublic class ApplicationDbContext : IdentityDbContext<EmployeeProfile>\r\n{\r\n    public ApplicationDbContext(DbContextOptions options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n    public DbSet<EmployeeProfile> EmployeeProfiles { get; set; }\r\n}\r\n```\r\n\r\nMy Question is how I create my database using migration update command and what's going wrong in my code.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maumar": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10736", "title": "Query: unify Include pipeline and CorrelatedCollectionOptimization pipeline", "body": "Both have a lot of things in common - CorrelatedCollectionOptimization is a superset of Include, apart from a few aspects (AnonymousObject vs MaterializedAnonymousObject, ability to use DISTINCT in the inner query, fixup for include, more orderings needed for CCs). \r\n\r\nThey should be unified - this would allow us to remove a lot of duplicated code and improve queries for some scenarios (Correlated collections in conjunction with include) ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10733", "title": "Query: we inject redundant MaterializeCollectionNavigation calls into some queries that take advantage of correlated collection optimizations", "body": "During nav rewrite, if we see \"naked\" collection navigation we inject MaterializeCollectionNavigation call. However, later in the pipeline we can optimize some of those collections using with the CorrelateSubquery pattern. CorrelateSubquery performs materialization itself, so the outer MaterializeCollectionNavigation call is no longer needed.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10723", "title": "Query: add correlated collection optimization support for async queries", "body": "#9282 improves translation for correlated collections (effectively removing N+1 queries from those scenarios) but the optimization has several limitations. One of them is that it only works for sync queries. We should add support for async also.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10479", "title": "Query: move \"outer parameter\" functionality to core", "body": "Currently, correlated subqueries that result in N+1 take advantage of \"outer parameter\" functionality, to reduce number of items we pull from the database for the inner queries. This feature is currently in relational. We should move it to core so that Cosmos can take advantage of it as well.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10210", "title": "Query: in case of joins, we shouldn't be materializing Inner if the qsre itself is not present in final projection", "body": "Query:\r\n\r\n```cs\r\nfrom g in ctx.Gears\r\njoin inner in (\r\n     from g2 in ctx.Gears\r\n     select new { g2.Nickname }\r\n     ) on g.Nickname equals inner.Nickname\r\nselect g;\r\n```\r\n\r\nproduces the following query plan:\r\n```\r\n(QueryContext queryContext) => IEnumerable<Gear> _InterceptExceptions(\r\n    source: IEnumerable<Gear> _ShapedQuery(\r\n        queryContext: queryContext, \r\n        shaperCommandContext: SelectExpression: \r\n            SELECT [g].[Nickname], [g].[SquadId], [g].[AssignedCityName], [g].[CityOrBirthName], [g].[Discriminator], [g].[FullName], [g].[HasSoulPatch], [g].[LeaderNickname], [g].[LeaderSquadId], [g].[Rank], [t].[Nickname]\r\n            FROM [Gears] AS [g]\r\n            INNER JOIN (\r\n                SELECT [g2].[Nickname]\r\n                FROM [Gears] AS [g2]\r\n                WHERE [g2].[Discriminator] IN (N'Officer', N'Gear')\r\n            ) AS [t] ON [g].[Nickname] = [t].[Nickname]\r\n            WHERE [g].[Discriminator] IN (N'Officer', N'Gear'), \r\n        shaper: (BufferedOffsetEntityShaper<Gear>\r\n        materializer: (TransparentIdentifier<Gear, <>f__AnonymousType227<string>> t0) => t0.Outer)), \r\n    contextType: TestModels.GearsOfWarModel.GearsOfWarContext, \r\n    logger: DiagnosticsLogger<Query>, \r\n    queryContext: queryContext)\r\n```\r\n\r\nWe actually don't need to materialize inner, so the materializer could be simplified by stripping the transparent identifier.\r\n\r\nAnother case that could also be improved, is when element of the inner is present in the final projection, but the inner qsre is not. In that case, we also don't need to materialize the inner and we can directly bind to the value buffer instead:\r\n\r\n```cs\r\nfrom g in ctx.Gears\r\njoin inner in (\r\n     from g2 in ctx.Gears\r\n     select new { g2.Nickname }\r\n     ) on g.Nickname equals inner.Nickname\r\nselect new { g, inner.Nickname };\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10172", "title": "Query: we don't know how to lift join on qsre projecting a single column", "body": "\r\n```cs\r\nfrom g in ctx.Gears\r\njoin inner in (\r\n\tfrom g2 in ctx.Gears\r\n\tselect g2.Nickname\r\n\t) on g.Nickname equals inner\r\nselect g;\r\n```\r\n\r\nproduces the following query plan:\r\n\r\n```\r\n(QueryContext queryContext) => IEnumerable<Gear> _InterceptExceptions(\r\n    source: IEnumerable<Gear> _Select(\r\n        source: IEnumerable<TransparentIdentifier<Gear, string>> _Join(\r\n            outer: IEnumerable<Gear> _ShapedQuery(\r\n                queryContext: queryContext, \r\n                shaperCommandContext: SelectExpression: \r\n                    SELECT [g].[Nickname], [g].[SquadId], [g].[AssignedCityName], [g].[CityOrBirthName], [g].[Discriminator], [g].[FullName], [g].[HasSoulPatch], [g].[LeaderNickname], [g].[LeaderSquadId], [g].[Rank]\r\n                    FROM [Gears] AS [g]\r\n                    WHERE [g].[Discriminator] IN (N'Officer', N'Gear'), \r\n                shaper: BufferedEntityShaper<Gear>), \r\n            inner: IEnumerable<string> _ShapedQuery(\r\n                queryContext: queryContext, \r\n                shaperCommandContext: SelectExpression: \r\n                    SELECT [t].[Nickname]\r\n                    FROM (\r\n                        SELECT [g2].[Nickname]\r\n                        FROM [Gears] AS [g2]\r\n                        WHERE [g2].[Discriminator] IN (N'Officer', N'Gear')\r\n                    ) AS [t], \r\n                shaper: (TypedProjectionShaper<ValueBufferShaper, ValueBuffer, string>\r\n                materializer: (ValueBuffer g2) => string TryReadValue(g2, 0, Gear.Nickname))), \r\n            outerKeySelector: (Gear g) => g.Nickname, \r\n            innerKeySelector: (string inner) => inner, \r\n            resultSelector: (Gear g | string inner) => TransparentIdentifier<Gear, string> CreateTransparentIdentifier(\r\n                outer: g, \r\n                inner: inner)), \r\n        selector: (TransparentIdentifier<Gear, string> t0) => t0.Outer), \r\n    contextType: TestModels.GearsOfWarModel.GearsOfWarContext, \r\n    logger: DiagnosticsLogger<Query>, \r\n    queryContext: queryContext)\r\n```\r\n\r\n\r\nHowever we are perfectly capable of translating very similar query, that projects single property wrapped in anonymous type:\r\n\r\n```\r\nfrom g in ctx.Gears\r\njoin inner in (\r\n     from g2 in ctx.Gears\r\n     select new { g2.Nickname }\r\n     ) on g.Nickname equals inner.Nickname\r\nselect g;\r\n\r\n```\r\n\r\nproduces:\r\n\r\n```\r\n(QueryContext queryContext) => IEnumerable<Gear> _InterceptExceptions(\r\n    source: IEnumerable<Gear> _ShapedQuery(\r\n        queryContext: queryContext, \r\n        shaperCommandContext: SelectExpression: \r\n            SELECT [g].[Nickname], [g].[SquadId], [g].[AssignedCityName], [g].[CityOrBirthName], [g].[Discriminator], [g].[FullName], [g].[HasSoulPatch], [g].[LeaderNickname], [g].[LeaderSquadId], [g].[Rank], [t].[Nickname]\r\n            FROM [Gears] AS [g]\r\n            INNER JOIN (\r\n                SELECT [g2].[Nickname]\r\n                FROM [Gears] AS [g2]\r\n                WHERE [g2].[Discriminator] IN (N'Officer', N'Gear')\r\n            ) AS [t] ON [g].[Nickname] = [t].[Nickname]\r\n            WHERE [g].[Discriminator] IN (N'Officer', N'Gear'), \r\n        shaper: (BufferedOffsetEntityShaper<Gear>\r\n        materializer: (TransparentIdentifier<Gear, <>f__AnonymousType227<string>> t0) => t0.Outer)), \r\n    contextType: TestModels.GearsOfWarModel.GearsOfWarContext, \r\n    logger: DiagnosticsLogger<Query>, \r\n    queryContext: queryContext)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10163", "title": "Query: improve ValueBuffer logic", "body": "There are some issues with current ValueBuffer implementation:\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/1030467f778be6ac77ef8b76d8bb927cbd97fc84/src/EFCore/Storage/ValueBuffer.cs#L93\r\n\r\nthis logic doesn't work for OffsetValueBuffer", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10153", "title": "Query: add translator for Nullable<>.GetValueOrDefault()", "body": "Could be translated to not noop", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10152", "title": "Query: cast exception when performing sum over client multiplication of nullable<decimal> and int", "body": "repro:\r\n\r\n```cs\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            using (var ctx = new MyContext())\r\n            {\r\n                ctx.Database.EnsureDeleted();\r\n                ctx.Database.EnsureCreated();\r\n\r\n                var p1 = new Product\r\n                {\r\n                    Price = 20,\r\n                };\r\n\r\n                var c1 = new CartItem\r\n                {\r\n                    CartId = \"1\",\r\n                    Quantity = 10,\r\n                    ProductVariant = p1,\r\n                };\r\n\r\n                ctx.Products.Add(p1);\r\n                ctx.CartItems.Add(c1);\r\n                ctx.SaveChanges();\r\n            }\r\n\r\n            using (var ctx = new MyContext())\r\n            {\r\n                var result = ctx.CartItems\r\n                    .Select(c => c.ProductVariant.Price.GetValueOrDefault() * c.Quantity)\r\n                    .Sum();\r\n            }\r\n        }\r\n    }\r\n\r\n    public class MyContext : DbContext\r\n    {\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(@\"Server=.;Database=Repro8652;Trusted_Connection=True;MultipleActiveResultSets=True\");\r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<CartItem>().HasKey(e => e.CartId);\r\n        }\r\n\r\n        public DbSet<CartItem> CartItems { get; set; }\r\n        public DbSet<Product> Products { get; set; }\r\n    }\r\n\r\n    public class CartItem\r\n    {\r\n        public string CartId { get; set; }\r\n        public Product ProductVariant { get; set; }\r\n        public int Quantity { get; set; }\r\n    }\r\n\r\n    public class Product\r\n    {\r\n        public int ProductId { get; set; }\r\n        public decimal? Price { get; set; }\r\n        public string CartId { get; set; }\r\n    }\r\n```\r\n\r\nexception:\r\n\r\n```\r\nUnhandled Exception: System.InvalidOperationException: An exception occurred while reading a database value for property 'CartItem.Quantity'. The expected type was 'System.Nullable`1[System.Decimal]' but the actual value was of type 'System.Int32'. ---> System.InvalidCastException: Unable to cast object of type 'System.Int32' to type 'System.Nullable`1[System.Decimal]'.\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer valueBuffer, Int32 index, IPropertyBase property)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.ThrowReadValueException[TValue](Exception exception, Object value, IPropertyBase property)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityMaterializerSource.TryReadValue[TValue](ValueBuffer valueBuffer, Int32 index, IPropertyBase property)\r\n   at lambda_method(Closure , QueryContext , TransparentIdentifier`2 )\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ProjectionShaper.TypedProjectionShaper`3.Shape(QueryContext queryContext, ValueBuffer valueBuffer)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(Boolean buffer)\r\n   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.<>c__DisplayClass12_0`2.<Execute>b__0(DbContext c, TState s)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, Func`2 operation, Func`2 verifySucceeded, TState state)\r\n   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, TState state, Func`2 operation)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n   at System.Linq.Enumerable.Sum(IEnumerable`1 source)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ResultEnumerable`1.GetEnumerator()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\r\n   at System.Linq.Enumerable.TryGetFirst[TSource](IEnumerable`1 source, Boolean& found)\r\n   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass17_0`1.<CompileQueryCore>b__0(QueryContext qc)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\r\n   at System.Linq.Queryable.Sum(IQueryable`1 source)\r\n```\r\n\r\n\r\nQuery plan:\r\n\r\n```\r\n(QueryContext queryContext) => IEnumerable<decimal> _InterceptExceptions(\r\n    source: IEnumerable<decimal> _ToSequence(() => decimal Sum(IEnumerable<decimal> _ShapedQuery(\r\n                queryContext: queryContext, \r\n                shaperCommandContext: SelectExpression: \r\n                    SELECT [c.ProductVariant].[Price], [c].[Quantity]\r\n                    FROM [CartItems] AS [c]\r\n                    LEFT JOIN [Products] AS [c.ProductVariant] ON [c].[ProductVariantProductId] = [c.ProductVariant].[ProductId], \r\n                shaper: TypedProjectionShaper<TypedCompositeShaper<ValueBufferShaper, ValueBuffer, ValueBufferShaper, ValueBuffer, TransparentIdentifier<ValueBuffer, ValueBuffer>>, TransparentIdentifier<ValueBuffer, ValueBuffer>, decimal>))), \r\n    contextType: Repro8652.MyContext, \r\n    logger: DiagnosticsLogger<Query>, \r\n    queryContext: queryContext)\r\n```\r\n\r\n\r\nShaper (here is the problem) - TryReadValue for Quantity is typed as nullable<decimal> rather than int\r\n\r\n```\r\n(QueryContext queryContext | TransparentIdentifier<ValueBuffer, ValueBuffer> t1) => (decimal)!(t1.Inner.IsEmpty) ? Nullable<decimal> TryReadValue(t1.Inner, 0, Product.Price) : default(Nullable<decimal>)?.GetValueOrDefault()Nullable`1.GetValueOrDefault(?!(t1.Inner.IsEmpty) ? Nullable<decimal> TryReadValue(t1.Inner, 0, Product.Price) : default(Nullable<decimal>)?, ) * (Nullable<decimal>)Nullable<decimal> TryReadValue(t1.Outer, 1, CartItem.Quantity)\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10102", "title": "Query: subquery with orderby but without skip causes client eval - we could inject Skip(0) to allow for full translation", "body": "query:\r\n\r\n```cs\r\n                var query = from g in ctx.Gears\r\n                            join w in ctx.Weapons.OrderBy(ww => ww.Name) on g.FullName equals w.OwnerFullName\r\n                            select new { g, w.Name };\r\n```\r\n\r\ncauses client join, issuing 2 queries to the server. This is because sql doesn't support orderby in a subquery without skip/take\r\n\r\nHowever:\r\n\r\n```cs\r\n                var query = from g in ctx.Gears\r\n                            join w in ctx.Weapons.OrderBy(ww => ww.Name).Skip(0) on g.FullName equals w.OwnerFullName\r\n                            select new { g, w.Name };\r\n```\r\n\r\ntranslates fully into:\r\n\r\n```sql\r\nSELECT [g].[Nickname], [g].[SquadId], [g].[AssignedCityName], [g].[CityOrBirthName], [g].[Discriminator], [g].[FullName], [g].[HasSoulPatch], [g].[LeaderNickname], [g].[LeaderSquadId], [g].[Rank], [t].[Name]\r\nFROM [Gears] AS [g]\r\nINNER JOIN (\r\n    SELECT [ww].*\r\n    FROM [Weapons] AS [ww]\r\n    ORDER BY [ww].[Name]\r\n    OFFSET @__p_0 ROWS\r\n) AS [t] ON [g].[FullName] = [t].[OwnerFullName]\r\nWHERE [g].[Discriminator] IN (N'Officer', N'Gear')\r\n```\r\n\r\nWe should consider recognizing this pattern and injecting Skip(0) to make this query better.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9944", "title": "Query: compilation exception for query projecting negated conditional expression inside anonymous type", "body": "query:\r\n\r\n```cs\r\nctx.Tags.Select(t => new { c = !(t.Gear.HasSoulPatch ? true : t.Gear.HasSoulPatch) });\r\n```\r\n\r\nexception:\r\n\r\n```\r\nSystem.ArgumentException : Argument must be boolean\r\n\tat System.Linq.Expressions.Expression.Condition(Expression test, Expression ifTrue, Expression ifFalse)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(1890,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.BooleanExpressionTranslatingVisitor.ConvertToValue(Expression expression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(1848,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.BooleanExpressionTranslatingVisitor.ApplyConversion(Expression expression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(1828,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.BooleanExpressionTranslatingVisitor.VisitUnary(UnaryExpression unaryExpression)\r\n\tat System.Linq.Expressions.UnaryExpression.Accept(ExpressionVisitor visitor)\r\n\tat System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(1815,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.BooleanExpressionTranslatingVisitor.VisitUnary(UnaryExpression unaryExpression)\r\n\tat System.Linq.Expressions.UnaryExpression.Accept(ExpressionVisitor visitor)\r\n\tat System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Expressions\\AliasExpression.cs(89,0): at Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression.VisitChildren(ExpressionVisitor visitor)\r\n\tat System.Linq.Expressions.ExpressionVisitor.VisitExtension(Expression node)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(1837,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.BooleanExpressionTranslatingVisitor.VisitExtension(Expression extensionExpression)\r\n\tat System.Linq.Expressions.Expression.Accept(ExpressionVisitor visitor)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Expressions\\AliasExpression.cs(69,0): at Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression.Accept(ExpressionVisitor visitor)\r\n\tat System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(1734,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.BooleanExpressionTranslatingVisitor.Translate(Expression expression, Boolean searchCondition)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(334,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ApplyOptimizations(Expression expression, Boolean searchCondition, Boolean joinCondition)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(353,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateProjection(Expression projection)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.SqlServer\\Query\\Sql\\Internal\\SqlServerQuerySqlGenerator.cs(124,0): at Microsoft.EntityFrameworkCore.Query.Sql.Internal.SqlServerQuerySqlGenerator.GenerateProjection(Expression projection)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(466,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateList[T](IReadOnlyList`1 items, Action`1 generationAction, Action`1 joinAction)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(226,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(SelectExpression selectExpression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Expressions\\SelectExpression.cs(1054,0): at Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.Accept(ExpressionVisitor visitor)\r\n\tat Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(Expression expression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Sql\\DefaultQuerySqlGenerator.cs(130,0): at Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(IReadOnlyDictionary`2 parameterValues)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Internal\\RelationalExpressionPrinter.cs(49,0): at Microsoft.EntityFrameworkCore.Query.Internal.RelationalExpressionPrinter.CommandBuilderPrinter.TryPrintConstant(ConstantExpression constantExpression, IndentedStringBuilder stringBuilder, Boolean removeFormatting)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(395,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitConstant(ConstantExpression constantExpression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(220,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.Visit(Expression expression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(583,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitMethodCall(MethodCallExpression methodCallExpression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(244,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.Visit(Expression expression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(583,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitMethodCall(MethodCallExpression methodCallExpression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(244,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.Visit(Expression expression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(459,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.VisitLambda[T](Expression`1 lambdaExpression)\r\n\tat System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n\tat System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(224,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.Visit(Expression expression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(156,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.PrintInternal(Expression expression, Boolean removeFormatting, Nullable`1 characterLimit, Boolean highlightNonreducibleNodes)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\ExpressionPrinter.cs(127,0): at Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter.Print(Expression expression, Boolean removeFormatting, Nullable`1 characterLimit)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Extensions\\Internal\\CoreLoggerExtensions.cs(319,0): at Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.QueryExecutionPlanned(IDiagnosticsLogger`1 diagnostics, IExpressionPrinter expressionPrinter, Expression queryExecutorExpression)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\EntityQueryModelVisitor.cs(634,0): at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda[TResults]()\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\EntityQueryModelVisitor.cs(179,0): at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Storage\\Database.cs(70,0): at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](QueryModel queryModel)\r\n\t--- End of stack trace from previous location where exception was thrown ---\r\n\tat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\QueryCompiler.cs(164,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\QueryCompiler.cs(103,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass15_0`1.<Execute>b__0()\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\CompiledQueryCache.cs(69,0): at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\CompiledQueryCache.cs(44,0): at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\QueryCompiler.cs(99,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n\tD:\\git\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\EntityQueryProvider.cs(62,0): at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\r\n\tat Remotion.Linq.QueryableBase`1.GetEnumerator()\r\n\tat System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n\tat System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9544", "title": "Query: null semantics should apply to GreaterThanOrEqual, LessThanOrEqual, not only strict equality", "body": "This currently manifests in our translation of string.Contains:\r\n\r\n```\r\nSELECT [c].[FirstName]\r\nFROM [FunkyCustomers] AS [c]\r\nWHERE CHARINDEX(NULL, [c].[FirstName]) <= 0\r\n```\r\n\r\nwe should be applying null semantics here instead:\r\n\r\n```\r\nSELECT [c].[FirstName]\r\nFROM [FunkyCustomers] AS [c]\r\nWHERE CHARINDEX(NULL, [c].[FirstName]) <= 0 OR CHARINDEX(NULL, [c].[FirstName]) IS NULL\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9455", "title": "Query/Logging: log contents of compiled code (e.g. materializers inside a shaper) as part of the query plan", "body": "Currently the compiled code is opaque to the expression printer, which makes it harder to debug some of the materializer code. We could improve this by creating a reducible node around shapers that would store the pre-compiled expression, which could be logged by a printer, and the node could prune itself of that extra expression (leaving just the compiled part). This way we keep the information for purpose of logging, but the query plan size is not increased", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/01372d5a45397216677f1fdd062e6039730b672c", "message": "Fix to #10635 - Query: ArgumentOutOfRangeException when using Include and OrderBy by with casting\n\nProblem was that when rewriting QM for Include (or correlated collection optimization) we always assumed that orderbys on the parent collection would be a simple member access. However, in some cases it can be more complicated - if property is declared on interface or base class, there will be a Convert in the tree.\nAlso, orderbys can be specified using EF.Property, which was also not supported."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e1a82f179995adc54c7f1cf14f764a7260f9e736", "message": "Fix to #10743 - Query: order by property's length twice throws NRE exception during query compilation\n\nProblem was that when comparing sql functions (to look for duplicate orderby's) we were not taking into account situation when instance for the function was null"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b95f23ffa4fbba305b3f0ea4c864fe53f456ad58", "message": "Fix to #9282 - Query: optimize queries projecting correlated collections, so that they don't result in N+1 database queries\n\nThis feature optimizes a number of queries that project correlated collections. Previously those would produce N+1 queries. Now, we rewrite queries similarly to how Include pipeline does it, producing only two queries and correlating them on the client.\nTo enable the feature the inner subquery needs to be wrapped around ToList() or ToArray() call.\n\nCurrent limitations:\n- only works for sync queries,\n- doesn't work if the parent query results in a CROSS JOIN,\n- doesn't work with result operators (i.e. Skip/Take/Distinct)\n- doesn't work if outer query needs client evaluation anywhere outside projection (e.g. order by or filter by NonMapped property)\n- doesn't work if inner query is correlated with query two (or more) levels up, (e.g. customers.Select(c => c.Orders.Select(o => o.OrderDetails.Where(od => od.Name == c.Name).ToList()).ToList())\n- doesn't work in nested scenarios where the outer collection is streaming (e.g. customers.Select(c => c.Orders.Select(o => o.OrderDetails.Where(od => od.Name != \"Foo\").ToList())) - to make it work, outer collection must also be wrapped in ToList(). However it is OK to stream inner collection - in that case outer collection will take advantage of the optimization.\n\nOptimization process:\n\noriginal query:\n\nfrom c in ctx.Customers\nwhere c.CustomerID != \"ALFKI\"\norderby c.City descending\nselect (from o in c.Orders\n        where o.OrderID > 100\n        orderby o.EmployeeID\n        select new { o.OrderID, o.CustomerID }).ToList()\n\nnav rewrite converts it to:\n\nfrom c in customers\nwhere c.CustomerID != \"ALFKI\"\norder by c.City descending\nselect\n   (from o in orders\n    where o.OrderID > 100\n    order by o.EmployeeID\n    where c.CustomerID ?= o.CustomerID\n    select new { o.OrderID, o.CustomerID }).ToList()\n\nwhich gets rewritten to (simplified):\n\nfrom c in customers\nwhere c.CustomerID != \"ALFKI\"\norder by c.City desc, c.CustomerID asc\nselect CorrelateSubquery(\n    outerKey: new { c.CustomerID },\n    correlationPredicate: (outer, inner) => outer.GetValue(0) == null || inner.GetValue(0) == null ? false : outer.GetValue(0) == inner.GetValue(0)\n    correlatedCollectionFactory: () =>\n        from o in orders\n        where o.OrderID > 100\n        join _c in\n            from c in customers\n            where c.CustomerID != \"ALFKI\"\n            select new { c.City, c.CustomerID }\n        on o.CustomerID equals _c.GetValue(1)\n        order by _c.GetValue(0) descending, _c.GetValue(1), o.EmployeeID\n        select new\n        {\n            InnerResult = new { o.OrderID, o.CustomerID }\n            InnerKey = new { o.CustomerID },\n            OriginKey = new { _c.GetValue(1) }\n        }).ToList()\n\nCorrelateSubquery is the method that combines results of outer and inner queries. Because order for both queries is the same we can perform only one pass thru inner query.\nWe use correlation predicate (between outerKey parameter passed to CorrelateSubquery and InnerKey which is part of the final result) to determine whether giver result of the inner query belongs to the outer.\nWe also remember latest origin key (i.e. PK of the outer, which is not always the same as outer key). If the origin key changes, it means that all inners for that outer have already been encountered."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a588722e10f34a12b9cea3d655fd26aafd91051b", "message": "Fix to #10441 - Query: Derived include types not inferred for collections\n\nThere is a bug in the compiler that would cause it to not pick the correct overload for the ThenInclude method for collection navigations.\nFix is to remove the additional overloads and re-purpose the current ones, so that users can specify derived includes using them.\n\nPrevious declaration was:\n\ncustomers.Include(SpecialCustomer sc => sc.SpecialOrders).ThenInclude(SpecialOrder so => so.SpecialOrderDetails)\n\nNew declaration is:\n\ncustomers.Include(c => ((SpecialCustomer)c).SpecialOrders).ThenInclude(o => ((SpecialOrder)o).SpecialOrderDetails)\n\nalternatively, using \"as\" operator:\n\ncustomers.Include(c => (c as SpecialCustomer).SpecialOrders).ThenInclude(o => (o as SpecialOrder).SpecialOrderDetails"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/efc0025d555b7f56f64c4a052bf0329a1119c414", "message": "Improving logic around visiting and flattening GroupJoin-SelectMany-DefaultIfEmpty queries.\n\nPreviously, when we encountered this type of expression we would produce LEFT JOIN in the SelectExpression but at the same time rewrite the query model, pruning the GJ and DIE clauses, replacing it with regular join clause.\nThis is problematic, because QM no longer adequately represents the query that is being generated - if the new QM were visited again, we would produce INNER JOIN.\n\nFix is to not modify the QM, but instead keep track of additional from clauses that were flattened (and not visit them in the VisitAdditionalFromClause), as well as properly remap query/shapers to point to additional from clause, rather than the join."}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/9928", "title": "[TINY] Fix to #9577 - Query Testing: Failure of assertion framework should give better information", "body": "Added some logic to TestHelpers.AssertResults to check for IComparable interface on the results that are about to be sorted by a default sorter (i.e. e => e)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5228826", "body": "Should we add public virtual IEnumerable (of TEntity) AddRange(params TEntity[] entities)?\n\nI always miss it when coding my tests\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5228826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8787597", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8787597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21645469", "body": "@MandorSawall you could try breaking the query into multiple calls - feel free to post the problematic query and your model here https://github.com/aspnet/EntityFramework/issues/7944 and maybe I will be able to come up with the workaround", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21645469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21724754", "body": "This is ok in this particular case. Since there is no DiE on the group, the empty inners won't be selected by the SelectMany, effectively being a INNER JOIN. In this example not all Level1s have their Level2 counterpart, so we are not eating anything with respect to L2O.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21724754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21891573", "body": "@jackhamburger 1.1.2 patch release that should be out relatively soon. Best way to find this out in the future is to look at the issue page (https://github.com/aspnet/EntityFramework/issues/7714) - we assign milestones to each of them", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21891573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/155889664", "body": "remove comment", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/155889664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "divega": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10731", "title": "Understand what would \"working better with F# records\" would entail", "body": "Filing this based on community feedback: \r\n\r\n[![image](https://user-images.githubusercontent.com/1253414/35172936-7f5aedba-fd1e-11e7-9261-07d7cab2980c.png)](https://twitter.com/isaac_abraham/status/954246268380942336)\r\n\r\nThis is not necessarily something the EF team is planning to tackle directly but wanted to start this issue to gather more information from the F# community and potentially improve our understanding of gaps in other areas besides the obvious in code generation.\r\n\r\n[F# Records](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/records) have some relevant characteristics that are different from classes, e.g.:\r\n\r\n- Immutable by default and terse copy and update syntax in the language\r\n- Reference types by default but can be structs\r\n- Structural equality \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10514", "title": "Query: allow providers to easily override null compensation and provide simpler translations instead", "body": "We have pretty heavy logic in query that allows translating two-value logic expressions into SQL, which does three-value logic natively. Many popular relational databases besides SQL Server implement alternative patterns to perform equality comparisons with in-memory semantics, e.g. x == y in a LINQ expression could be translated to\r\n\r\n|Translation|Supported by|\r\n|-|-|\r\n|`x is y`|SQLite |\r\n|`x <=> y`|MySQL and MariaDB| \r\n|`decode(x, y, 0, 1) = 0`|DB2 and Oracle|\r\n|`EXISTS (SELECT x INTERSECT SELECT y)`|PostgreSQL, SQLite, SQL Server (as search condition)|\r\n|`EXISTS (VALUES(x) INTERSECT VALUES(y))`|DB2, PostgreSQL, SQL Server|\r\n|`x IS NOT DISTINCT FROM y`|ANSI SQL:2003, PostgreSQL (apparently not sargable)|\r\n\r\nThis article presents an excellent survey of all the alternatives: http://modern-sql.com/feature/is-distinct-from. \r\n\r\nFor cases in which we know if either x or y are non-nullable, we can probably produce a more concise translation, but in more complex cases, the options above could lead to better SQL, even for SQL Server. \r\n\r\nIn any case, it should be possible for a provider to pick the best translation. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10501", "title": "Inconsistent SQL queries in inheritance + FromSql scenarios", "body": "For queries that use `FromSql()` on an entity type that has inheritance we create an additional WHERE clause checking for the discriminator, but only if the query is composed over. \r\n\r\nOn one hand this is following the general rule that if you don't add any operators to a `FromSql()` query, we will just execute the SQL you provided. But on the other hand, if the reason to add the additional checks is that we don't trust the SQL query provided to only contain rows for the types we know about, I would expect us to add the checks regardless. \r\n\r\nRepro:\r\n\r\n``` C#\r\nusing System;\r\nusing System.Linq;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace ConsoleAppFoo\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var context = new MyContext())\r\n\r\n            {\r\n                context.Database.EnsureCreated();\r\n\r\n                var hey = \"hey\";\r\n\r\n                var p1 = context.People.FromSql($@\"\r\n                    SELECT TOP(1) [x].[Id], [x].[Discriminator], [x].[Name], [x].[Year]\r\n                    FROM [People] AS [x]\r\n                    WHERE [x].[Discriminator] IN ('Student', 'Person') AND ([x].[Name] = {hey})\")\r\n                   .AsEnumerable().FirstOrDefault();\r\n\r\n                //exec sp_executesql N'\r\n                //        SELECT TOP(1) [x].[Id], [x].[Discriminator], [x].[Name], [x].[Year]\r\n                //        FROM[People] AS[x]\r\n                //        WHERE[x].[Discriminator] IN(''Student'', ''Person'') AND([x].[Name] = @p0)',N'@p0 nvarchar(4000)',@p0=N'hey'\r\n\r\n\r\n                var p2 = context.People.FromSql($@\"\r\n                    SELECT TOP(1) [x].[Id], [x].[Discriminator], [x].[Name], [x].[Year]\r\n                    FROM [People] AS [x]\r\n                    WHERE [x].[Discriminator] IN ('Student', 'Person') AND ([x].[Name] = {hey})\")\r\n                    .FirstOrDefault();\r\n\r\n\r\n                //exec sp_executesql N'SELECT TOP(1) [p].[Id], [p].[Discriminator], [p].[Name], [p].[Year]\r\n                //FROM(\r\n                //                        SELECT TOP(1)[x].[Id], [x].[Discriminator], [x].[Name], [x].[Year]\r\n                //                        FROM[People] AS[x]\r\n                //                        WHERE[x].[Discriminator] IN(''Student'', ''Person'') AND([x].[Name] = @p0)\r\n                //) AS[p]\r\n                //WHERE[p].[Discriminator] IN(N''Student'', N''Person'')',N'@p0 nvarchar(4000)',@p0=N'hey'\r\n\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class MyContext : DbContext\r\n    {\r\n        public DbSet<Person> People { get; set; }\r\n        public DbSet<Student> Students { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(\r\n                @\"server=(localdb)\\mssqllocaldb;database=foo;integrated security=yes;\");\r\n        }\r\n\r\n    }\r\n\r\n    public class Person\r\n    {\r\n        public int Id { get; set; }\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class Student : Person\r\n    {\r\n        public int Year { get; set; }\r\n    }\r\n}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10403", "title": "Include link in exception messages that direct to report issues", "body": "E.g. in the recursion limit exception. It is not obvious to all our customers where to report issues for EF Core. See https://twitter.com/jesperbook/status/934788283057496070.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9811", "title": "DbFunctions: instance functions on entities", "body": "Consider the scenario originally described at https://github.com/aspnet/EntityFrameworkCore/issues/9213#issuecomment-324115344 (about why instance functions on `DbContext` can be compelling):\r\n\r\n```csharp\r\ndb.Posts.Where(p => db.PostReadCount(p.Id) > 5);\r\n```\r\nIt could actually be even more compelling to be able to do this:\r\n\r\n``` csharp\r\ndb.Posts.Where(p => p.ReadCount() > 5);\r\n```\r\n\r\nThis could work for instance methods, computed properties or even extension method defined over the entity type. \r\n\r\nIt would be convenient for the translation to automatically map the \"this\" entity instance to the key of the entity when invoking the database implementation of the function. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9810", "title": "DbFunctions: self-bootstrapping functions", "body": "### TL;DR\r\n\r\nWe can enable instance functions and extension methods defined on the `DbContext` to be called directly outside of queries, since access to \"this\" `DbContext` instance can infuse the ability to bootstrap server LINQ queries without having to go through a `DbSet<TEntity>`:\r\n\r\n``` csharp\r\n  var count = db.PostReadCount(p.Id);\r\n```\r\n\r\nThis applies to scalar functions as well as TVFs (which would look like any other self-bootstrapping function but would return `IQueryable<T>`).\r\n\r\n### Details \r\n(originally from comment at https://github.com/aspnet/EntityFrameworkCore/issues/9213#issuecomment-326534981) \r\n\r\nOne of the reasons to support instance functions based on `DbContext` (#9213) is to be able to pass the `DbContext` to the implementation of the function, which may involve querying for data that exists in the database.\r\n\r\nThere is another click-stop beyond that which is to be able to use the function directly. E.g. instead of always having to call the function like this:\r\n\r\n``` csharp\r\nforeach(var p in posts.Where(p => db.PostReadCount(p.Id) > 5))\r\n{\r\n  // do something\r\n}\r\n```\r\n\r\nWe can enable calling the function directly in code:\r\n \r\n``` csharp\r\nforeach(var p in posts)\r\n{\r\n  ...\r\n  if (db.PostReadCount(p.Id) > 5)\r\n  {\r\n    // do something\r\n  }\r\n}\r\n```\r\n\r\n(I understand the scenario above is a bit contrived, because in theory calling the function in the query may avoid additional round-trips, but I don't think this example negates the value of self-bootstrapping functions in general)\r\n\r\nSince in the body of the method we have access to \"this\" `DbContext`, we can use it to execute a query in which the method is invoked:\r\n``` csharp\r\npublic int PostReadCount(int postId)\r\n{\r\n  return Posts.Where(p => p.Id == postId).Select(p => db.PostReadCount(p.Id)).FirstOrDefault();  \r\n}\r\n```\r\nAlthough ideally the user should be able to do something like this some day:\r\n\r\n``` csharp\r\npublic int PostReadCount(int postId)\r\n{\r\n  return Execute(db => db.PostReadCount(postId));  \r\n}\r\n```\r\n\r\nWhere assuming there is a `PostReadCount()` scalar function in the database would translate to something like this:\r\n\r\n``` SQL\r\nSELECT dbo.PostReadCount(@postId);\r\n```\r\n\r\nWe actually had this kind of capability in EF6 and even previous versions, and it was useful for mapping scalar functions as well as TVFs, although it wasn't at all easy to setup.\r\n\r\n### Impact of client evaluation\r\n\r\nNote that it was also safer in EF6 to invoke the method through the LINQ provider as part of the implementation of the method, because there was no automatic client evaluation. In EF Core we should probably have a way to fork re-entrant calls to either evaluate in memory or throw if there is no reasonable in-memory implementation. Otherwise there are scenarios that would result into infinite recursion.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9666", "title": "EF Core tooling for .NET UWP", "body": "Currently, EF Core tooling attempts to use .NET Framework to run user code on UWP applications. In the past, we encountered problems with that approach whenever types that were not the same between UWP and .NET Framework. One example of that was DataAnnotations. We addressed those with binding redirects and intercepting assembly resolution.\r\n\r\nWhile testing EF Core 2.0 with .NET UWP 6.0 we found that there are new types that present similar problems. E.g.:\r\n\r\n> System.TypeLoadException: Could not load type 'System.Globalization.CultureInfo' from assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n> System.TypeLoadException: Could not load type 'System.MarshalByRefObject' from assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\r\nThere different ways we can address, in order from short, middle and long term:\r\n\r\n1. Update our guidance for UWP to place the EF Core model in a separate project that is compatible with our tooling\r\n2. Update our tooling to show a nice error pointing to the guidance described above\r\n3. ~~Use more binding redirect and assembly resolution tricks to make more types work (talked to @bricelam, he thinks this is feasible)~~\r\n4. Switch to run the user code in .NET Core, which is a closer match to UWP and is apparently the approach the XAML designer is now using (see [this post](https://blogs.msdn.microsoft.com/visualstudio/2017/09/11/a-significant-update-to-the-xaml-designer/))", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9615", "title": "Consider simplifying roadmap page", "body": "In the [roadmap](https://github.com/aspnet/EntityFrameworkCore/wiki/Roadmap) we currently have:\r\n\r\n1. A list of \"critical O/RM features\" from the backlog\r\n   > These are things we think we need before we can say EF Core is the recommended version of EF for **everyone**. Until we implement these features, although EF Core will be a valid option for many applications (especially on platforms like .NET Core where EF 6 does not work), for many applications the lack of these features will make EF 6 a better choice.\r\n2. A list of \"high priority features\" from the backlog\r\n   > There are many features on our backlog and this is by no means an exhaustive list. These features are high priority but we think EF Core would be a compelling release for the vast majority of applications without them:\r\n3. Things we are actually intending to do in the next release\r\n\r\nIt seems that the difference between (1) and (2) may have become ambiguous, and as for everything that appears to be set in stone, I also think we should question it and review if they are all still valuable to have listed here :smile: \r\n\r\nPerhaps we could merge the two, and possibly leave some of them to become regular backlog items, unless we believe there is value keeping them here. \r\n\r\nThen it would be nice to find a way to structure things so that what we are doing in the next release and what we consider critical could be visualized together rather than having to look manually compare two different lists.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9490", "title": "Consider trying to make it clearer that IDesignTimeDbContextFactory should not be registered as a service", "body": "Comments like https://github.com/aspnet/EntityFrameworkCore/issues/8499#issuecomment-323554888 and others seem to debunk any belief that renaming the type could help clarify how it is used. \r\n\r\nI am not sure anything is going to help significantly but it seems we haven\u2019t taken the chance to say \u201cdo not register this as a service\u201d in the API docs. It is possible we could do better in the conceptual docs as well, and in any exception message that leads to using the type.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9490/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9393", "title": "DbFunctions: first-class server functions in the model with migrations support", "body": "(This is based on the discussion in https://github.com/aspnet/EntityFramework/issues/9368)\r\n\r\nWe could:\r\n- Allow functions to be declared in the model, likely based on the work already implemented by @pmiddleton but the ability to specify an accompanying database implementation (e.g. function body) for them\r\n- ~~Add first class ways to reference these declared functions in parts of the model, as part of computed properties on an entity as a function of the PK of the entity or of a path of properties starting with the entity. E.g. a customer could have a computed property that is computed as the SUM() of the values of all his/her orders.~~ (moved into its own orthogonal feature https://github.com/aspnet/EntityFrameworkCore/issues/9811) \r\n- Add the capability in the model differ to compare function implementations and references to functions\r\n- Add the capability in DDL generation to created, drop, and alter functions, as well as references to functions, so that both migrations and `EnsureCreated()` can start generating those. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9393/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7df93b365bf6c88de01c7dba0ee26057300b1629", "message": "Update README.md"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39769924", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39769924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39809676", "body": ":shipit: from my point of view, you might want to have others review as well.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39809676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40031593", "body": "This is to make the lookup for existing colliding usernames that we do when new users are created faster. We talked about an alternative solution for Identity that could work more generally across different stores and consists on storing the normalized version of the username in a separate property.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40031593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39769924", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39769924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64742810", "body": "FWIW, when we filed the bug we were aware that it wasn't supported in EF 6.x. This was in fact one of the pain points we identified in Identity 2.x with EF 6.x and something we were hoping could become more flexible in the CLR mappings of EF 7, alongside interfaces, fields, methods, etc. All that said I suspect this is not strictly needed for Identity 3.0. @HaoK should be able to confirm.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64742810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153547401", "body": "We support PKs in shadow state that are explicitly created. See https://github.com/aspnet/EntityFramework/issues/3156 for a recent discussion. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153547401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39809676", "body": ":shipit: from my point of view, you might want to have others review as well.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39809676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40031593", "body": "This is to make the lookup for existing colliding usernames that we do when new users are created faster. We talked about an alternative solution for Identity that could work more generally across different stores and consists on storing the normalized version of the username in a separate property.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40031593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40437827", "body": "Not sure if you guys talked about this offline, but regarding the idea of a design-time assembly, to me the point is that some parts of Migrations can be considered more design-time-ish than others, e.g. while the ability to execute a migration is something that can be done at runtime by any application and shouldn't require extra dependencies to do it programmatically, the code generation part is something that is typically only done while in de IDE. Is this reason enough to create a separate assembly? I don't know but seems worth considering.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40437827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/59859553", "body": "We made some progress for beta but we are keeping this item active for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/59859553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71743495", "body": "@smitpatel please talk to @AndriySvyryd about the details.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71743495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/116895036", "body": "We should support StringLength which is a synonym of MaxLength only applicable to strings.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/116895036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/117331624", "body": "+1 for [ForeginKey] and [InverseProperty]\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/117331624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135913761", "body": "@justdmitry In EF7 we support defining indexes using the fluent API but not an attribute, at least no yet. The IndexAttribute you are possibly referring to is something we added to the EF 6.x package at some point but never really became a standard DataAnnotation. \n\nWe don't want to copy the original attribute from EF6 as is because there are a few things in it that we would like to change. Also, having it in DataAnnotations directly would likely make more sense than adding it to the EF7 package. \n\nThe priority is going to be driven by customer feedback.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135913761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135916047", "body": "> The priority is going to be driven by customer feedback.\n\nI should mention though that it is highly unlikely that we will add IndexAttribute in the EF7 RTM timeframe.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135916047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71738345", "body": "@AndriySvyryd and I think this is probably already fixed but we need to verify.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71738345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41098471", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41098471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/144254536", "body": "Just to add more details based on the discussion on #3141: In EF6 we did not support comparing an in-memory entity instance against an expression representing an entity in the database but we did have some support for a few patterns for comparing entities in the database, e.g. joins in grouping on an entity would in some cases work and the translation would expand the comparison between entities into a comparison of all the individual columns that were part of the entity. \n\nIn the future in EF7.x we should consider supporting those scenarios as well, but when we do it we should consider translating comparisons between entities into comparisons between their keys.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/144254536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42067621", "body": "The following is a bit simpler and should work already: \n\n```\nbuilder.Entity<Photo>().Key(\n    p => p.PhotoId);\n\nbuilder.Entity<Photo>().ForeignKeys(\n        o => o.ForeignKey<Gallery>(\n            p => p.Gallery));\n```\n\nThe following is simpler and we should also get it to work (no nested closure for setting one, similar to what we decided with .Properties() vs. .Property(): \n\n```\nbuilder.Entity<Photo>().ForeignKey(\n            p => p.Gallery);\n```\n\nNotice that in this case Eilon was passing a navigation property and not an FK property to the API and it was not failing. Not sure what the expectation is but it seems confusing as the concept of an association seems to trump FKs and FKs are in general optional even for our relational support. It doesn't seem to matter really that much if in the underlying implementation we always have the concept of an FK.\n\nIn general we need to work together to decide how we want this API to look like.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42067621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41315409", "body": "Looks :shipit: to me, would be good to get someone else review.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41315409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41346806", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41346806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42721770", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42721770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42774893", "body": ":shipit: But no tests?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42774893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42775269", "body": "@ajcvickers didn't you add QuoteIdentifier in a recent check-in? Looks like we could have redundant methods now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42775269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42775926", "body": "Maybe for now we should do a minimal change to unblock the scenario for already provisioned databases, even if that involves making Exists return false for an empty SQL azure database. I suspect Create already creates the tables on an existing database, correct @emilcicos?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42775926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43025112", "body": "This might be just a temporary situation and an artifact of how references are working when you compile from Visual Studio vs. command line and/or the current implementation of System.Data.Common which uses type forwarding for .NET 4.5.x but in the future will probably also have an API metadata assembly for compile-time. We should keep this item because in the long run you should just need the reference to System.Data.Common.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43025112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43167888", "body": "It is just not implemented yet.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43167888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/54501617", "body": "This is actually part of #374. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/54501617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42092625", "body": "Looks :shipit: to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42092625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42356707", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42356707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/54547411", "body": "This seems to be a duplicate of #451. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/54547411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/171798669", "body": "I suspect that IN is a non-starter for composite keys. The concatenation will most likely make the query non-sargable. That would apply to this sample query if the navigation between Products and [Order Details] was based on a composite key, but it isn't.\n\nAlso, the CASE statement should be unnecessary and it should be possible to avoid the JOIN in the subquery, e.g. something like this:\n\n``` SQL\nSELECT [p].[ProductID], [p].[Discontinued], [p].[ProductName], [p].[UnitsInStock]\nFROM [Products] AS [p]\nWHERE EXISTS (\n        SELECT NULL\n        FROM (\n                SELECT TOP (1) [o].[ProductID]\n                FROM [Order Details] AS [o]\n                WHERE [o].[Quantity] = 1) as [t1]\n         WHERE   [p].[ProductID] = [t1].[ProductID])\n```\n\nI think we could also use a query based on JOIN instead of EXISTS:\n\n``` SQL\nSELECT [p].[ProductID], [p].[Discontinued], [p].[ProductName], [p].[UnitsInStock]\nFROM [Products] AS [p]\n        INNER JOIN (\n                SELECT TOP (1) [o].[ProductID]\n                FROM [Order Details] AS [o]\n                WHERE [o].[Quantity] = 1) as [t1] ON\n                        [p].[ProductID] = [t1].[ProductID]\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/171798669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44069347", "body": "Assigned to Andrew who already mentioned he will be looking at this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44069347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44479937", "body": "Looks good as far as I can see but we should get a review from @anpete. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44479937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299063", "body": "Rename to FirstClass? :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299068", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7756540", "body": "Thanks @pranavkm!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7756540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8922547", "body": "Maybe that should be chaged now that we require VS 2015 for develpment? Should we chat?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8922547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9877187", "body": "Is this change intentional?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9877187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11441028", "body": ":shipit: \n\nThis only needs to go to dev, right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11441028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12497953", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12497953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13624928", "body": "Interpolation can be can 50% slower than concatenation on my machine. However I think readability (I am personally liking interpolation more and more) could trump this in some cases in non-performance critical code paths. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13624928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13697129", "body": "Hmmm, however I need to put on my :eyeglasses: to be sure that it is always the same phone number passed everywhere :smile:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13697129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13745866", "body": "@whyi This commit is very old and this code has been changed. Even assuming there was an issue in the code and the issue still existed today it would be very time consuming to check and respond to comments made on commits this old.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13745866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21972055", "body": "I am ok with this.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21972055/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22958863", "body": "projectUrl should probably be https://docs.microsoft.com/ef/core/. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22958863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22958961", "body": "but all our packages currently use http://www.asp.net/.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22958961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "AndriySvyryd": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10730", "title": "Rename RelationalForeignKeyBuilderAnnotations.HasConstraintName to HasName", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10715", "title": "Inheritance validation should allow setting base to null", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10672", "title": "Merge ICoreConventionSetBuilder with IConventionSetBuilder", "body": "No reason to keep them separate anymore", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10671", "title": "Remove the static Build method on IConventionSetBuilder implementations", "body": "Dependency changes break it.\r\n\r\nWe should consider replacing it with a method that uses the `IServiceProvider` to avoid breaks and use the correct services, like the logger", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10648", "title": "Investigate/fix tests failing for 2.0 providers", "body": "Most of the failures are expected due to fixes in the providers themselves, so we need to add conditional logic to the tests.\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10618", "title": "Perf: Attaching a graph is slow", "body": "Currently a lot of redundant nodes are created for highly connected graphs.\r\nAllocations can be reduced by not calling `ToList` on collection navigations that are not modified and making `EntityEntryGraphNode` a struct", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10603", "title": "Navigations on attached entities are not fixed up", "body": "See [Repro10603](https://github.com/aspnet/EntityFrameworkCore/compare/Repro10450...Repro10603)\r\n```C#\r\n[Fact]\r\npublic void Can_include_on_loaded_entity()\r\n{\r\n    using (var testDatabase = SqlServerTestStore.CreateInitialized(DatabaseName))\r\n    {\r\n        var options = Fixture.CreateOptions(testDatabase);\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            context.Database.EnsureCreated();\r\n\r\n            var player = new PlayerCharacter(new Level\r\n            {\r\n                Game = new Game()\r\n            });\r\n            var weapon = new Item\r\n            {\r\n                Id = 1,\r\n                Game = player.Game\r\n            };\r\n            player.Items.Add(weapon);\r\n            player.Items.Add(new Item\r\n            {\r\n                Id = 2,\r\n                Game = player.Game\r\n            });\r\n            context.Characters.Add(player);\r\n\r\n            context.SaveChanges();\r\n\r\n            player.CurrentWeapon = weapon;\r\n\r\n            context.SaveChanges();\r\n        }\r\n\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            var player = context.Characters\r\n                .Include(p => p.CurrentWeapon)\r\n                .Single();\r\n\r\n            Assert.Equal(1, player.Items.Count);\r\n\r\n            context.Attach(player);\r\n\r\n            Assert.Equal(1, player.Items.Count);\r\n\r\n            context.Levels\r\n                .Include(l => l.Actors)\r\n                .ThenInclude(a => a.Items)\r\n                .Load();\r\n\r\n            Assert.Equal(2, player.Items.Count);\r\n        }\r\n\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            var player = context.Characters\r\n                .Include(p => p.CurrentWeapon)\r\n                .AsNoTracking()\r\n                .Single();\r\n\r\n            Assert.Equal(0, player.Items.Count);\r\n\r\n            context.Attach(player);\r\n\r\n            // Throws\r\n            Assert.Equal(1, player.Items.Count);\r\n\r\n            context.Levels\r\n                .Include(l => l.Actors)\r\n                .ThenInclude(a => a.Items)\r\n                .Load();\r\n\r\n            // Throws\r\n            Assert.Equal(2, player.Items.Count);\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10507", "title": "Don't configure owned types as weak entity types unless necessary", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10507/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 1, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10465", "title": "Perf: provide a way to batch the generated commands for a complex query", "body": "Some queries (e.g. [ones with multiple collection includes)](https://github.com/AndriySvyryd/UnicornHack/blob/2dd021c0b85d1bb3ebf34c7707cdac57d877350f/src/UnicornHack.Web/Data/GameDbContext.cs#L496) can result in multiple database commands being executed. If the expected results are relatively small data sets the queries could be combined in a single command and the data buffered.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10450", "title": "Adding an item to a collection doesn't mark it as modified", "body": "See [Repro10450](https://github.com/aspnet/EntityFrameworkCore/compare/Repro10449...Repro10450)\r\n```C#\r\n[Fact]\r\npublic void Adding_an_item_to_a_collection_marks_it_as_modified()\r\n{\r\n    using (var testDatabase = SqlServerTestStore.CreateInitialized(DatabaseName))\r\n    {\r\n        var options = Fixture.CreateOptions(testDatabase);\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            context.Database.EnsureCreated();\r\n\r\n            var player = new PlayerCharacter(new Level\r\n            {\r\n                Game = new Game()\r\n            });\r\n            var weapon = new Item\r\n            {\r\n                Id = 1,\r\n                Game = player.Game\r\n            };\r\n            context.Characters.Add(player);\r\n\r\n            context.SaveChanges();\r\n\r\n            player.Items.Add(weapon);\r\n\r\n            context.ChangeTracker.DetectChanges();\r\n            Assert.True(context.Entry(player).Collection(p => p.Items).IsModified);\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10449", "title": "Marking a reference as modified throws for PK-overlapping FK", "body": "See [Repro10449]( https://github.com/aspnet/EntityFrameworkCore/compare/Repro10440...Repro10449)\r\n```C#\r\n[Fact]\r\npublic void Can_set_reference_twice()\r\n{\r\n    using (var testDatabase = SqlServerTestStore.CreateInitialized(DatabaseName))\r\n    {\r\n        var options = Fixture.CreateOptions(testDatabase);\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            context.Database.EnsureCreated();\r\n\r\n            var player = new PlayerCharacter(new Level\r\n            {\r\n                Game = new Game()\r\n            });\r\n            var weapon = new Item\r\n            {\r\n                Id = 1,\r\n                Game = player.Game\r\n            };\r\n            player.Items.Add(weapon);\r\n            context.Characters.Add(player);\r\n\r\n            context.SaveChanges();\r\n\r\n            player.CurrentWeapon = weapon;\r\n            context.SaveChanges();\r\n\r\n            player.CurrentWeapon = null;\r\n            context.SaveChanges();\r\n\r\n            player.CurrentWeapon = weapon;\r\n            context.Entry(player).Reference(p => p.CurrentWeapon).IsModified = true;\r\n            context.SaveChanges();\r\n        }\r\n\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            var player = context.Characters\r\n                .Include(c => c.Items)\r\n                .Include(c => c.CurrentWeapon)\r\n                .ToList().Single();\r\n                    \r\n            Assert.Equal(player.Items.Single(), player.CurrentWeapon);\r\n        }\r\n    }\r\n}\r\n```\r\n>System.InvalidOperationException : The property 'GameId' on entity type 'PlayerCharacter' is part of a key and so cannot be modified or marked as modified. To change the principal of an existing entity with an identifying foreign key first delete the dependent and invoke 'SaveChanges' then associate the dependent with the new principal.\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified(IProperty property, Boolean changeState, Boolean isModified, Boolean isConceptualNull) in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\InternalEntityEntry.cs:line 352\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.SetFkPropertiesModified(InternalEntityEntry internalEntityEntry, Boolean modified) in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\NavigationEntry.cs:line 244\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry.set_IsModified(Boolean value) in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\NavigationEntry.cs:line 200\r\n   at Microsoft.EntityFrameworkCore.SqlServerEndToEndTest.Can_set_reference_twice() in C:\\enlistments\\Universe\\EntityFramework\\test\\EFCore.SqlServer.FunctionalTests\\SqlServerEndToEndTest.cs:line 636", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10448", "title": "Setting a reference twice using the same context fails", "body": "Saving after setting `CurrentWeapon` to `null` doesn't update the relationship snapshot, so the last `SaveChanges` doesn't detect the change.\r\n\r\nSee [Repro10448]( https://github.com/aspnet/EntityFrameworkCore/compare/Repro10440...Repro10448)\r\n\r\n```C#\r\n[Fact]\r\npublic void Can_set_reference_twice()\r\n{\r\n    using (var testDatabase = SqlServerTestStore.CreateInitialized(DatabaseName))\r\n    {\r\n        var options = Fixture.CreateOptions(testDatabase);\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            context.Database.EnsureCreated();\r\n\r\n            var player = new PlayerCharacter(new Level\r\n            {\r\n                Game = new Game()\r\n            });\r\n            var weapon = new Item\r\n            {\r\n                Id = 1,\r\n                Game = player.Game\r\n            };\r\n            player.Items.Add(weapon);\r\n            context.Characters.Add(player);\r\n\r\n            context.SaveChanges();\r\n\r\n            player.CurrentWeapon = weapon;\r\n            context.SaveChanges();\r\n\r\n            player.CurrentWeapon = null;\r\n            context.SaveChanges();\r\n\r\n            player.CurrentWeapon = weapon;\r\n            context.SaveChanges();\r\n        }\r\n\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            var player = context.Characters\r\n                .Include(c => c.Items)\r\n                .ToList().Single();\r\n                    \r\n            Assert.Equal(player.Items.Single(), player.CurrentWeapon);\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10440", "title": "Derived self-ref Include throws in async", "body": "See [Repro10440](https://github.com/aspnet/EntityFrameworkCore/compare/Repro10440)\r\n\r\n```C#\r\n[Fact]\r\npublic async Task Can_include_derived_self_ref()\r\n{\r\n    using (var testDatabase = SqlServerTestStore.CreateInitialized(DatabaseName))\r\n    {\r\n        var options = Fixture.CreateOptions(testDatabase);\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            context.Database.EnsureCreated();\r\n\r\n            var level = new Level{Game = new Game()};\r\n            level.Items.Add(new Item{Id = 1,Game = level.Game});\r\n            var container = new Container{Id = 2,Game = level.Game};\r\n            container.Items.Add(new Item{Id = 3,Game = level.Game});\r\n            level.Items.Add(container);\r\n            context.Levels.Add(level);\r\n\r\n            context.SaveChanges();\r\n        }\r\n\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            // Works\r\n            var level = context.Levels\r\n                    .Include(l => l.Items).ThenInclude<Level, Item, Container, IEnumerable<Item>>(c => c.Items)\r\n                    .ToList().First();\r\n\r\n            Assert.Equal(2, level.Items.Count);\r\n            Assert.Equal(1, level.Items.OfType<Container>().Single().Items.Count);\r\n        }\r\n\r\n        using (var context = new GameDbContext(options))\r\n        {\r\n            // Throws\r\n            var level = (await context.Levels\r\n                .Include(l => l.Items).ThenInclude<Level, Item, Container, IEnumerable<Item>>(c => c.Items)\r\n                .ToListAsync()).First();\r\n\r\n            Assert.Equal(2, level.Items.Count);\r\n            Assert.Equal(1, level.Items.OfType<Container>().Single().Items.Count);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n>System.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.<_IncludeAsync>d__23`1.MoveNext() in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Query\\Internal\\IncludeCompiler.cs:line 349\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.<_ExecuteAsync>d__8`1.MoveNext() in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Query\\ExpressionVisitors\\Internal\\TaskLiftingExpressionVisitor.cs:line 67\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AsyncSelectEnumerable`2.AsyncSelectEnumerator.<MoveNext>d__3.MoveNext() in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Query\\EntityQueryModelVisitor.cs:line 1120\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.<IncludeCollectionAsync>d__12`3.MoveNext() in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Query\\Internal\\QueryBuffer.cs:line 309\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.<_IncludeAsync>d__23`1.MoveNext() in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Query\\Internal\\IncludeCompiler.cs:line 349\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.<_ExecuteAsync>d__8`1.MoveNext() in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Query\\ExpressionVisitors\\Internal\\TaskLiftingExpressionVisitor.cs:line 67\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AsyncSelectEnumerable`2.AsyncSelectEnumerator.<MoveNext>d__3.MoveNext() in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Query\\EntityQueryModelVisitor.cs:line 1120\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext() in C:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Query\\Internal\\AsyncLinqOperatorProvider.cs:line 157\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Linq.AsyncEnumerable.<Aggregate_>d__6`3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.EntityFrameworkCore.SqlServerEndToEndTest.<Can_include_derived_self_ref>d__27.MoveNext() in C:\\enlistments\\Universe\\EntityFramework\\test\\EFCore.SqlServer.FunctionalTests\\SqlServerEndToEndTest.cs:line 579\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10435", "title": "Add logging event for client-side cascade delete", "body": "This is tricky to debug when not intended", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10435/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10337", "title": "Uniquify relational names on demand", "body": "Currently the relational identifiers are uniquified after the model is built, so querying one during the configuration could potentially return a different string.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10119", "title": "Generate idempotent SQL for inserts", "body": "If the entity has client-generated key or concurrency token we could generate idempotent commands to make commit failure handling easier.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10119/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10013", "title": "Add a way of getting navigation diffs", "body": "Expose a public version of `INavigationListener` or add `Added` and `Removed` properties to `CollectionEntry` and `OriginalValue` to `ReferenceEntry`.\r\nThese would allow to implement a front-end facing equivalent of `SaveChanges` without having the front end do navigation fixing again.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10000", "title": "Data Seeding: Add support for navigations", "body": "This depends on #9914", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9999", "title": "Data Seeding: add sugar for shadow properties", "body": "Add `EntityTypeBuilder.SeedData` sugar that takes an entity and a property bag for shadow properties", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9998", "title": "Data Seeding: Generate leaner SQL", "body": "Skip optimistic concurrency checks and `@@ROWCOUNT`, see #7037", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9924", "title": "Add collection methods to CollectionEntry", "body": "`Add`, `Remove` and `Contains` methods would make it easier to use, especially for shadow navs, as the collection would be initialized automatically if needed.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9924/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9914", "title": "Property bag entity types", "body": "There are entity types that don't have a natural mapping to a CLR type, either because they aren't part of the domain model (e.g. many-to-many join types) or because the CLR types are inaccessible (e.g. migration snapshot).  While these could be mapped to shadow entity types #749 that would make working with them harder as they are tightly coupled to the state manager and would need special case handling throughout the stack, especially in the query pipeline.\r\n\r\nProperty bag entity types are still fully specified at model building time, dynamic types are tracked by #2282. The basic implementation would add support for entities backed up by a `Dictionary<string, object>` with a predefined entry that contains the entity type name.\r\n\r\nUsage:\r\n```C#\r\nmodelBuilder.Entity(\"Cat\", c =>\r\n    {\r\n        c.Property<int>(\"Id\");\r\n        c.Property<string>(\"Name\");\r\n    });\r\n```\r\n\r\n```C#\r\ncontext.Add(new Dictionary<string, object>\r\n{\r\n    { \"Entity type name\", \"Cat\" },\r\n    { \"Id\", 123 },\r\n    { \"Name\", \"Tabby\" }\r\n});\r\n```\r\n\r\nRelated to #2968", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9696", "title": "Improve exception for incorrect FK value", "body": "When the FK is set to a value that corresponds to an entity of an incompatible type the exception is not helpful:\r\n\r\nAdd `eagle.EagleId = kiwi.Species;` to `InheritanceContext.SeedData`\r\n\r\n> System.InvalidCastException : Unable to cast object of type 'Microsoft.EntityFrameworkCore.TestModels.Inheritance.Kiwi' to type 'Microsoft.EntityFrameworkCore.TestModels.Inheritance.Eagle'.\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Metadata\\Internal\\ClrICollectionAccessor.cs(146,0): at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.GetCollection(Object instance)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Metadata\\Internal\\ClrICollectionAccessor.cs(122,0): at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.GetOrCreateCollection(Object instance)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Metadata\\Internal\\ClrICollectionAccessor.cs(55,0): at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Add(Object instance, Object value)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\NavigationFixer.cs(887,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.AddToCollection(InternalEntityEntry entry, INavigation navigation, IClrCollectionAccessor collectionAccessor, Object value)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\NavigationFixer.cs(925,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.SetReferenceOrAddToCollection(InternalEntityEntry entry, INavigation navigation, IClrCollectionAccessor collectionAccessor, Object value)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\NavigationFixer.cs(768,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.ToDependentFixup(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\NavigationFixer.cs(554,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.InitialFixup(InternalEntityEntry entry, ISet`1 handledForeignKeys, Boolean fromQuery)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\NavigationFixer.cs(474,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\InternalEntityEntryNotifier.cs(95,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\InternalEntityEntry.cs(258,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\InternalEntityEntry.cs(79,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\EntityGraphAttacher.cs(68,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\EntityEntryGraphIterator.cs(25,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\ChangeTracking\\Internal\\EntityGraphAttacher.cs(34,0): at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState entityState, Boolean forceStateWhenUnknownKey)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\DbContext.cs(601,0): at Microsoft.EntityFrameworkCore.DbContext.SetEntityState(InternalEntityEntry entry, EntityState entityState)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\DbContext.cs(805,0): at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\DbContext.cs(651,0): at Microsoft.EntityFrameworkCore.DbContext.Add[TEntity](TEntity entity)\r\n\tC:\\enlistments\\Universe\\EntityFramework\\src\\EFCore\\Internal\\InternalDbSet.cs(129,0): at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Add(TEntity entity)\r\n\r\nFor 1-1 a similar exception is thrown:\r\n\r\n> System.InvalidCastException: Unable to cast object of type 'Microsoft.EntityFrameworkCore.ModelBuilding.ModelBuilderTest.SpecialOrder' to type 'Microsoft.EntityFrameworkCore.ModelBuilding.ModelBuilderTest.BackOrder'. \r\nat Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetter`2.SetClrValue(Object instance, Object value) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry.WritePropertyValue(IPropertyBase propertyBase, Object value) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(IPropertyBase propertyBase, Object value, Boolean setModified) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.set_Item(IPropertyBase propertyBase, Object value) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.SetNavigation(InternalEntityEntry entry, INavigation navigation, Object value) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.InitialFixup(InternalEntityEntry entry, ISet`1 handledForeignKeys, Boolean fromQuery) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState entityState, Boolean forceStateWhenUnknownKey) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.NavigationCollectionChanged(InternalEntityEntry entry, INavigation navigation, IEnumerable`1 added, IEnumerable`1 removed) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.NavigationCollectionChanged(InternalEntityEntry entry, INavigation navigation, IEnumerable`1 added, IEnumerable`1 removed) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectNavigationChange(InternalEntityEntry entry, INavigation navigation) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(InternalEntityEntry entry) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(IStateManager stateManager) \r\nat Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges() \r\nat Microsoft.EntityFrameworkCore.DbContext.TryDetectChanges() \r\nat Microsoft.EntityFrameworkCore.DbContext.Entry[TEntity](TEntity entity) \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9626", "title": "Throw better exception for .Set<OwnedType>()", "body": "Currently it's\r\n>Cannot create a DbSet for 'OwnedType' because this type is not included in the model for the context. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9543", "title": "Warn for self-referencing PK-to-PK relationships in model validation", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9512", "title": "Review RelationalPropertyAnnotations methods", "body": "Methods `GetDefaultValue`, `GetDefaultValueSql` and `GetComputedColumnSql` will all return `null` when called with `true` on a property that has conflicting configuration.\r\nThey should use the configuration source to resolve the conflict and return the correct value.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9422", "title": "Snapshot change tracking is slow", "body": "The scenario in https://github.com/aspnet/EntityFramework/issues/7582 is slow even in desktop app", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9422/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c0d127c7c23396ab03ce71fe78d0b4f2a79fdfa3", "message": "Undo a breaking change on Internal API\n\nFixes #10708"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a26d3984be9a132ceae731a1a3e0681ed46bfd69", "message": "Consistently do a short-circuit check in logging extensions\n\nFixes #10637"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/40b344787ef24a6d6350f0711f757901f99c45da", "message": "Fix CSharpMigrationsGeneratorTest"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1d14dde3e509e8498b454c647ffaffc6ee9317a0", "message": "Add logging for conventions\n\nFixes #1171\nFixes #10661"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/0cc4127d04ec758044c196f55eb34d6ec9b8dfce", "message": "Add more logging to the model builder\n\nFixes #222"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a62607eead34942f857b02be32c3223d4bfdcc4b", "message": "Add logging to ExecutionStrategy\n\nFixes #6781"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/34511a676e2387f64f9606c4aa9b799b9efc2c38", "message": "Fix more tests for 2.0.0 providers"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/077149cd76ad44556fc15b0329c5510405b8a3d4", "message": "Revert TableSelectionSet and IDbContextTransactionManager breaking changes.\n\nPart of #10545"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/f6bb8c19a37045aae5a7bb37c01a635a40ce6f54", "message": "Add a way to run functional test against shipped providers\n\nFixes #9961"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/53cfbe7b53e9b644ee8ce6199b9b19af3ee8cf9c", "message": "Add Microsoft.EntityFrameworkCore.Attributes assembly\nChange owned entity type configuration API.\n\nPart of #9487"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6d7e51c9fe0a9f14c928caedb385fa4b82fc3eec", "message": "Add more logging to the update pipeline.\n\nFixes #220"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/120700b6cccc9745cb8c17ab97eac036efee913a", "message": "Add seed data batching\n\nFixes #9997"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/f88cda310af0f17a75735332857b61926eea3b11", "message": "Fix some Oracle tests"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1a19b9a1fe763a76c9e72f5276055ebbbd465581", "message": "Add a way to make all instances of an entity type owned using Fluent API or Data Annotations\n\nFixes #9487"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e8fcce13870909944e88a0cfba88b37453fc81f5", "message": "Allow providers to limit the length of the generated identifiers.\nMove identifier uniquification to conventions to make it deterministic.\nFix default decimal type mapping validation in SqlServer.\n\nFixes #9209\nFixes #10213\nFixes #10329"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/569f427ce6b8d1fbe69adcc5a24463fbd3cc8f3b", "message": "Avoid allocating delegates when invoking ExecutionStrategy methods."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e4ab5ad430871e63083287cb8d00ffdd5c2109cf", "message": "Detect temporary values in data seeds during validation.\n\nFixes #10184"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a22e4069f528693a9fdb72d9e2e819b14b3503c3", "message": "Add MinBatchSize option\n\nPart of #9270"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/dc6a719f4ed33d9e26b92c94c75efa12146bf988", "message": "Update Oracle tests"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e8f1aa028be175d1a5dcb7583d6c5b52a912cbc7", "message": "Use ReferenceEquals for navigation value comparison in SetProperty\n\nFixes #10030"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/aaa864cb4958844d97bde24cf6c70c79f6438098", "message": "Allow tracking deleted entities with same identity.\n\nFixes #7340"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c8937a5386f8fc623c8bdd2f8533c616c92dc043", "message": "Add data seeding support for owned types\n\nPart of #629"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/f711fbe7c86c62d5ebb2e0fce74dde30aeac7bc5", "message": "Validate seed data\nFix issues with discriminators and table splitting\n\nPart of #629"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/52efa32cf0e1fe707eedf2566230ef3a0235e38e", "message": "Use EntityMaterializerSource to create entities from property bags\n\nPart of #629"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7dc35f46232149c9956f00f25b738a9547acfde4", "message": "Add change tracking support for shadow navigations to non-shadow entity types\n\nPart of #749"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1c11ab85e075077c3486de829b6e5d28700fc3d2", "message": "Add table splitting and inheritance support to data seeding.\nUse two new instances of StateManager for the source and target model to be able to reference the correct columns.\n\nPart of #629"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/2bab8c1fda86eedfe90026a3efd6fb1eba7eeb69", "message": "Add CommandBatchPreparerDependencies and StateManagerDependencies"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/49064a7582aac2496d81c92c505afbb7a0c29e9a", "message": "Decouple StateManager from DbContext as much as possible by specifying the dependencies explicitly."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7a92224a8bd37a56c505937fc96aeb623de974bb", "message": "Merge branch 'feature/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1e387f10ff2eb7316f9fcdd6c17d7223c27c4b85", "message": "Throw better exception when replacing an owned entity\n\nFixes #9823"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/501184ed60417db2131008a89dedc357ed272d10", "message": "Default to the principal value generation strategy for the primary key columns for entity types sharing the same table.\nValidate that properties sharing the same column have the same value generation strategy.\n\nFixes #9652"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/43ed50362237d4e8fc1b748fbb677788ef03bf55", "message": "Remove failing test"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/5003070c22f7f135b5e8187543ca1aef96097d6a", "message": "Improve IModelCustomizer doc comment"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6187ade3af0d04ed1840ecbe7d1efe0a7f8c5ae8", "message": "Merge branch 'dev' of https://github.com/tinchou/EntityFramework into dev"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10701", "title": "Small conventions optimization", "body": "Reuse last `ConventionNode` when empty\r\nMake read-only check debug-only\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/8865", "title": "Make concurrency check handle re-entrance", "body": "Fixes #7375\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36958640", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36958640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37477483", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37477483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37485150", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37485150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39794940", "body": "Ok, :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39794940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39794940", "body": "Ok, :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39794940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/259010572", "body": "This has been fixed. You can use a cast in the Fluent API to specify the mapped entity type:\n\n``` C#\n builder.Entity<TUser>().HasMany(u => (IEnumerable<TUserClaim>)u.Claims).WithOne();\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/259010572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40841894", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40841894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40845918", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40845918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/130839583", "body": "This should be sufficient as the initial implementation. We'll file separate issues for remaining work.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/130839583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/333624289", "body": "This issue is closed and will not be considered for planning purposes. Please direct all `IndexAttribute` feedback to https://github.com/aspnet/EntityFrameworkCore/issues/4050", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/333624289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/85236514", "body": "Verified on SQL Express\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/85236514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42244846", "body": "This could be related to #141\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42244846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64694400", "body": "No, the test is still disabled\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64694400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42333139", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42333139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42332497", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42332497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7916013", "body": "How are you compiling and what platform are you targeting when you get it?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7916013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7943710", "body": "This should be fixed in the latest nightly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7943710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9466675", "body": "Yes, Brice is right on spot.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9466675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15600478", "body": "Yes. Could you add it?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15600478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19273089", "body": "Sounds reasonable, added to https://github.com/aspnet/EntityFramework/issues/6665\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19273089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19273125", "body": "For now the way to do this is to create an instance of `SqlAzureExecutionStrategy` that does retry on -2 and use it to execute the pure operation. We could add some sugar API if enough users find this too cumbersome.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19273125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/23017625", "body": "Good catch! I've noted this in https://github.com/aspnet/EntityFramework/issues/9098#issuecomment-314214261", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/23017625/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151589717", "body": "This looks like a R# bug. Do you have the newest version?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151589717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137138362", "body": ">IOracleEntityTypeAnnotations [](start = 21, length = 28)\r\n\r\nRemove", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137138362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137138370", "body": ">IOracleIndexAnnotations [](start = 21, length = 23)\r\n\r\nRemove", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137138370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137138392", "body": ">IOracleKeyAnnotations [](start = 21, length = 21)\r\n\r\nRemove", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137138392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137138851", "body": "Why is this needed?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137138851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "neridonk": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10725", "title": "Multiple includes results in empty reference", "body": "Multiple includes  results in empty reference.\r\n\r\n### Steps to reproduce\r\n\r\n```\r\n employee\r\n       .Include(o => o.Details).ThenInclude(o => o.IdCard);\r\n        .Include(o => o.Mails).ThenInclude(o => o.Names).ThenInclude(o => o.Language)\r\n        .Include(o => o.Details).ThenInclude(o => o.Title).ThenInclude(o => o.Language)\r\n        .Include(o => o.Details).ThenInclude(o => o.PhoneNumbers).ThenInclude(o => o.Names).ThenInclude(o => o.Language)\r\n        .Include(o => o.Details).ThenInclude(o => o.Elements).ThenInclude(o => o.Element).ThenInclude(o => o.Names).ThenInclude(o => o.Language);\r\n```\r\n\r\nin the end employee has 0 reference in details.\r\n\r\nA workaround was to split  the include:\r\n\r\n```\r\nvar emp =  employee\r\n       .Include(o => o.Details).ThenInclude(o => o.IdCard);\r\n\r\n return emp \r\n        .Include(o => o.Mails).ThenInclude(o => o.Names).ThenInclude(o => o.Language)\r\n        .Include(o => o.Details).ThenInclude(o => o.Title).ThenInclude(o => o.Language)\r\n        .Include(o => o.Details).ThenInclude(o => o.PhoneNumbers).ThenInclude(o => o.Names).ThenInclude(o => o.Language)\r\n        .Include(o => o.Details).ThenInclude(o => o.Elements).ThenInclude(o => o.Element).ThenInclude(o => o.Names).ThenInclude(o => o.Language);\r\n```\r\n\r\n\r\n\r\n### Further technical details\r\nEF Core version: (found in project.csproj or packages.config) : 2.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: win 10\r\nIDE: Visual Studio 2017 15.4\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Petermarcu": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10724", "title": "Can't publish app using EF on Windows using `win-x64`", "body": "EFCore using Sqlite doesn't support publishing an app to the generic `win-x64` or `win-x86` runtime identifier. In .NET Core 2.0, we moved to telling people to use the generic runtime identifiers of `win-x64`, `linux-x64` and `osx-x64` but this issue prevents that from working on Windows.\r\n\r\nhttps://github.com/ericsink/SQLitePCL.raw/issues/194\r\n\r\nPeople should be able to `dotnet publish -r win-x64` and get a working application on Windows.\r\n\r\nIf you follow [this how to](https://docs.microsoft.com/en-us/ef/core/get-started/netcore/new-db-sqlite) and then try to publish your application using the above command, you will get:\r\n\r\n```\r\nUnhandled Exception: System.TypeInitializationException: The type initializer for 'Microsoft.Data.Sqlite.SqliteConnection' threw an exception. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.DllNotFoundException: Unable to load DLL 'e_sqlite3': The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n   at SQLitePCL.SQLite3Provider_e_sqlite3.NativeMethods.sqlite3_libversion_number()\r\n   at SQLitePCL.SQLite3Provider_e_sqlite3.SQLitePCL.ISQLite3Provider.sqlite3_libversion_number()\r\n   at SQLitePCL.raw.SetProvider(ISQLite3Provider imp)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\r\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\r\n   at Microsoft.Data.Sqlite.Utilities.BundleInitializer.Initialize()\r\n   at Microsoft.Data.Sqlite.SqliteConnection..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqliteRelationalConnection.CreateDbConnection()\r\n   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqliteRelationalConnection.Open(Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction(IsolationLevel isolationLevel)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(Tuple`2 parameters)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IReadOnlyList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Sqlite.Program.Main(String[] args) in C:\\temp\\Sqlite\\Program.cs:line 12\r\n```\r\n\r\nI'm filing this here because I think this should be tracked and likely patched into the 2.0 SDK.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eduherminio": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10722", "title": "Undesired restrictions are applied to composite indexes involving nullable FKs", "body": "### Issue description\r\n\r\nUndesired restrictions are applied to composite indexes/unique constraints when **nullable FKs** are involved.\r\n\r\n\r\nProviding the following restriction and `FK_TO_Entity2` being a nullable FK to another entity:\r\n```\r\n            modelBuilder.Entity<Sample>()\r\n                .HasIndex(entity => new { entity.field, entity.FK_TO_Entity2 })\r\n                .IsUnique();\r\n```\r\n\r\nIn SQLServer, the following index is created:\r\n```sql\r\n          CREATE UNIQUE NONCLUSTERED INDEX[IX_field_FK_TO_Entity2] ON[dbo].[Sample]\r\n          (\r\n            [field] ASC,\r\n            [FK_TO_Entity2] ASC\r\n          )\r\n          WHERE([field] IS NOT NULL AND [FK_TO_Entity2] IS NOT NULL)\r\n```\r\n\r\nThat uniqueness condition is intended to be applied even when `FK_TO_Entity2` is null, but the restriction doesn't allow that to happen.\r\n\r\nPD: `field` is a required property of `Sample`, I haven't tested if the behavior is the same with not-required but not FK fields (which would mean that the issue is related to all nullable fields) or the only restriction applied would only be `WHERE([field] [FK_TO_Entity2] IS NOT NULL` (and therefore, the issue would only have to do with nullable FKs)\r\n\r\n### Steps to reproduce\r\nA full example can be found in [this repo](https://github.com/eduherminio/EFCore-Issue10722).\r\nExpected behavior is fully explained there, with samples.\r\n\r\n### Workaround\r\nSince these undesired constraints are just filters, a workaround we found was to 'override' those filters, by adding a custom, meaningless filter.\r\n\r\nSince, as mentioned, `field` is a required field, unexpected behavior is avoided by using:\r\n```\r\n            modelBuilder.Entity<Sample>()\r\n                .HasIndex(entity=> new { entity.field, user.FK_TO_Entity2 })\r\n                .IsUnique()\r\n                .HasFilter(\"field is not null\");\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer (behaviour tested in Sqlite too)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10665", "title": "Allow direct access to discriminators' value using Fluent Api", "body": "### Issue description\r\nProviding TPH & the following, simplified  model:\r\n```c#\r\n    public class Organization\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n    public class Company : Organization { }\r\n    public class Department : Organization { }\r\n```\r\n`OnModelCreating`: the following restriction is applied to all Organizations, so two Departments with the same name cannot be created.\r\n\r\n```c#\r\n    modelBuilder.Entity<Company>()\r\n        .HasBaseType<Organization>();\r\n\r\n    modelBuilder.Entity<Company>()\r\n        .HasIndex(c => c.Name).IsUnique();\r\n```\r\n### Workaround\r\nWe've found the following workaround, using a custom filter:\r\n```c#\r\n    modelBuilder.Entity<Organization>()\r\n        .HasDiscriminator<int>(\"Discriminator\")\r\n        .HasValue<Company>(1)\r\n        .HasValue<Department>(2);\r\n\r\n    modelBuilder.Entity<Company>()\r\n        .HasIndex(c => c.Name).IsUnique()\r\n        .HasFilter(\"Discriminator IN (1)\");\r\n```\r\n\r\nHowever, a more direct way of configuring it would be desirable.\r\n\r\n### Further technical details\r\nEF Core version:  2.0.1\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10111", "title": "Create additional .NET attributes (like data annotations) for EF Core configuration", "body": "I guess there some good reason not to do it, but here it is the suggestion just in case.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techniq": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10721", "title": "The binary operator AndAlso is not defined for the types 'System.Nullable`1[System.Boolean]' and 'System.Boolean'", "body": "While attempting to run an OData query with a `$filter` that contains 2 conditionals, one of which is on a boolean property, I am receiving the following exception.\r\n\r\n```\r\nException message: System.InvalidOperationException: The binary operator AndAlso is not defined for the types 'System.Nullable`1[System.Boolean]' and 'System.Boolean'.\r\n\r\nStack trace:\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:5000/odata/Employees?$filter=IsActive%20eq%20true%20and%20DepartmentId%20eq%2023&$top=25  \r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]\r\n      Executing action method Dashboard.Api.Controllers.EmployeesController.Get (Dashboard.Api) with arguments ((null)) - ModelState is Valid\r\ninfo: Microsoft.EntityFrameworkCore.Infrastructure[10403]\r\n      Entity Framework Core 2.1.0-preview1-28103 initialized 'DashboardContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None\r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor[1]\r\n      Executing ObjectResult, writing value Microsoft.AspNetCore.Mvc.ControllerContext.\r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]\r\n      Executed action Dashboard.Api.Controllers.EmployeesController.Get (Dashboard.Api) in 5.43ms\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]\r\n      An unhandled exception has occurred while executing the request\r\nSystem.InvalidOperationException: The binary operator AndAlso is not defined for the types 'System.Nullable`1[System.Boolean]' and 'System.Boolean'.\r\n   at System.Linq.Expressions.Expression.AndAlso(Expression left, Expression right, MethodInfo method)\r\n   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.ProcessComparisonExpression(BinaryExpression binaryExpression)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression expression)\r\n   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitWhereClause(WhereClause whereClause, QueryModel queryModel, Int32 index)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses(ObservableCollection`1 bodyClauses, QueryModel queryModel)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, IQueryModelGenerator queryModelGenerator, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n   at Remotion.Linq.QueryableBase`1.System.Collections.IEnumerable.GetEnumerator()\r\n   at Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSetSerializer.WriteResourceSet(IEnumerable enumerable, IEdmTypeReference resourceSetType, ODataWriter writer, ODataSerializerContext writeContext)\r\n   at Microsoft.AspNet.OData.Formatter.ODataOutputFormatterHelper.WriteToStream(Type type, Object value, IEdmModel model, ODataVersion version, Uri baseAddress, MediaTypeHeaderValue contentType, IWebApiUrlHelper internaUrlHelper, IWebApiRequestMessage internalRequest, IWebApiHeaders internalRequestHeaders, Func`2 getODataMessageWrapper, Func`2 getEdmTypeSerializer, Func`2 getODataPayloadSerializer, Func`1 getODataSerializerContext)\r\n   at Microsoft.AspNet.OData.Formatter.ODataOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.<Invoke>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\nwarn: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]\r\n      The response has already started, the error page middleware will not be executed.\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HLAUEM7BGG22\", Request id \"0HLAUEM7BGG22:00000001\": An unhandled exception was thrown by the application.\r\nSystem.InvalidOperationException: The binary operator AndAlso is not defined for the types 'System.Nullable`1[System.Boolean]' and 'System.Boolean'.\r\n   at System.Linq.Expressions.Expression.AndAlso(Expression left, Expression right, MethodInfo method)\r\n   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.ProcessComparisonExpression(BinaryExpression binaryExpression)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression expression)\r\n   at System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitWhereClause(WhereClause whereClause, QueryModel queryModel, Int32 index)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses(ObservableCollection`1 bodyClauses, QueryModel queryModel)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, IQueryModelGenerator queryModelGenerator, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n   at Remotion.Linq.QueryableBase`1.System.Collections.IEnumerable.GetEnumerator()\r\n   at Microsoft.AspNet.OData.Formatter.Serialization.ODataResourceSetSerializer.WriteResourceSet(IEnumerable enumerable, IEdmTypeReference resourceSetType, ODataWriter writer, ODataSerializerContext writeContext)\r\n   at Microsoft.AspNet.OData.Formatter.ODataOutputFormatterHelper.WriteToStream(Type type, Object value, IEdmModel model, ODataVersion version, Uri baseAddress, MediaTypeHeaderValue contentType, IWebApiUrlHelper internaUrlHelper, IWebApiRequestMessage internalRequest, IWebApiHeaders internalRequestHeaders, Func`2 getODataMessageWrapper, Func`2 getEdmTypeSerializer, Func`2 getODataPayloadSerializer, Func`1 getODataSerializerContext)\r\n   at Microsoft.AspNet.OData.Formatter.ODataOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.<Invoke>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Hosting.Internal.RequestServicesContainerMiddleware.<Invoke>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n      Request finished in 20.373ms 200 application/json; odata.metadata=minimal; odata.streaming=true; charset=utf-8\r\n```\r\n\r\nI saw the following related (and closed/merged) issues and PRs (and is the reason I tried the latest nightly, although it did not resolve the issue)\r\n- https://github.com/aspnet/EntityFrameworkCore/issues/5899\r\n- https://github.com/aspnet/EntityFrameworkCore/issues/7061\r\n- https://github.com/aspnet/EntityFrameworkCore/issues/9468\r\n- https://github.com/aspnet/EntityFrameworkCore/pull/10106\r\n\r\n### Steps to reproduce\r\nAttempt to use an OData query with at least 1 boolean property: `/Employees?$filter=IsActive eq true and DepartmentId eq 23&$top=25`\r\n\r\nI would have left an issue on [OData/WebApi](https://github.com/OData/WebApi/issues) but it appears to be specifically an EntityFrameworkCore issue\r\n\r\n### Further technical details\r\nEF Core version: `2.1.0-preview1-28103`\r\nDatabase Provider: `Microsoft.EntityFrameworkCore.SqlServer`\r\nOperating system: Mac\r\nIDE: Visual Studio for Mac / dotnet cli (2.0.3)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bricelam": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10719", "title": "Oracle: Only one column per table can be configured as 'Identity'.", "body": "AFAIK, this restriction shouldn't exist on Oracle...", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10718", "title": "Oracle Migrations: Column is already NOT NULL", "body": "When altering a non-nullable column, DDL like this is generated:\r\n\r\n``` sql\r\nALTER TABLE \"Entities\" MODIFY \"Int32Property\" NUMBER(10) NOT NULL\r\n```\r\n\r\nWhich results in the following error.\r\n\r\n> ORA-01442: column to be modified to NOT NULL is already NOT NULL", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10653", "title": "Tests: Leverage SeedData", "body": "Now that we have first-class support for seed data, we should update our test suite to use it.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10590", "title": "Oracle: Remove OracleCreateUserOperation", "body": "I'm concerned about this code finding its way into an official provider; it feels pretty hacky--it always uses the username as the password and there is no way to specify it literately.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10554", "title": "CLI Tools: Convert to a Dotnet (global) Tool", "body": "Instead of using a `<DotNetCliToolReference>`, tools will have the ability to install globally:\r\n\r\n    dotnet install tool dotnet-ef\r\n    dotnet ef\r\n\r\nWe'll need to create yet another package containing our tooling assemblies.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10534", "title": "SQLite Query: Should we be translating decimal operations?", "body": "Any operation (besides equality comparison) on `decimal` values will be lossy on SQLite since they are implicitly converted to `REAL` on the server. Should we continue translating them?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10487", "title": "SQL Server RevEng: Configure SqlServerDbContextOptionsBuilder", "body": "We could generate things like `UseRowNumberPaging()` and `EnableRetryOnFailure()` depending on the version of SQL Server we're scaffolding from.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10378", "title": "Tools: ef dbcontext script", "body": "We should expose the `DbContext.Database.GenerateCreateScript()` method as a command.\r\n\r\n``` ps1\r\nScript-DbContext\r\n```\r\n``` cmd\r\ndotnet ef dbcontext script\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10378/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10233", "title": "SqlServerMigrationsSqlGenerator missing dependency object", "body": "``` csharp\r\npublic SqlServerMigrationsSqlGenerator(\r\n    MigrationsSqlGeneratorDependencies dependencies,\r\n    IMigrationsAnnotationProvider migrationsAnnotations)\r\n    : base(dependencies)\r\n{\r\n    // ...\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10232", "title": "Make SqlServerHistoryRepository non-Internal", "body": "Right now, the `SqlServerHistoryRepository` class is in a `.Internal` namespace. However, [Customizing the Migrations history table](http://www.bricelam.net/2017/01/04/efcore-history-table.html) should be a supported scenario.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10175", "title": "Migrations: Unused using generated", "body": "The following namespaces are generated in the migraiton designer and model snapshot files.\r\n``` csharp\r\nusing Microsoft.EntityFrameworkCore.Migrations; // Not used by snapshot\r\nusing Microsoft.EntityFrameworkCore.Storage;\r\nusing Microsoft.EntityFrameworkCore.Storage.Internal;\r\n```\r\n\r\nI suspect it's due to annotations that we later filter out.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10059", "title": "Support ColumnAttibute.Order", "body": "#2272 matched the CLR reflection order for columns within a table.\r\n\r\nDuring design, we decided to wait for more feedback before honoring the value of `ColumnAttibute.Order` on the properties.\r\n\r\nIf the implementation of #2272 is insufficient for you and specifying something like `[Column(Order = 1)]` would help, please vote for this issue and add details about your scenario (if not already listed) below.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10059/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9681", "title": "Benchmarks: Run with SQLite provider", "body": "This will help us detect any regressions in both Microsoft.EntityFrameworkCore.Sqlite and Microsoft.Data.Sqlite.\r\n\r\n(For both 2.0.0 and dev)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9388", "title": "Design: Make OperationBase.Execute() protected", "body": "[These methods](https://github.com/aspnet/EntityFramework/blob/rel/2.0.0/src/EFCore.Design/Design/OperationExecutor.cs#L372-L398) should be protected. We didn't get to it in time for 2.0.0, but we should do it in 3.0.0.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/908491ca0f55a27c43a7b5b91a92a3714f7c89cd", "message": "Tools: Work around more class library limitations\n\nChanges our existing workaround to use an MSBuild file in EFCore.Design; adds a workaround for .NET Framework\n\nFixes #10639"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/72439b6d56dcc9786ccad626dc219dba07b0f17f", "message": "Migrations: Better matching\n\nChanges:\n* Stronger matching by table, column, and property names\n* Match by root entity types before others (fixes #10099)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/bfcb1bcafd2532ccd34f4907f2f08cec98bc7c16", "message": "Oracle Migrations: Clean up\n\nChanges:\n- Remove unused code\n- Remove Transact-SQL parsing (fixes #10591)\n- Simplify implementation (let database throw when unsupported)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/96149b9d71871797a06af5b183f37dbab546ee0b", "message": "Merge branch 'ralmsdeveloper-Dev21' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/f9fc84695edb843ab1a22c0eacf138aef20def67", "message": "Add EFCore.Proxies to OracleProvider.sln"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/93680d9a23693bd82e5f24c38b0ac6856965806e", "message": "Add EFCore.Proxies.csproj to EFCore.Runtime.sln"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1e5756a7d891a4ea8ca31143ef2be0caa43e5897", "message": "Tweak PR #10356"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/714e13180f6fd5a107236a0b695db3cdc6ab7d07", "message": ":green_heart: Fix TransactionOracleTest"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a5a010e18934d61d236587f28869443e33bb34bf", "message": ":green_heart: React more to aspnet/Microsoft.Data.Sqlite#475\n\nFixes aspnet/Microsoft.Data.Sqlite#476"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/d7c350faaeace555c727a9b7cc38298e51d1cb46", "message": "Merge branch 'release/2.0.0' into dev\n\n# Conflicts:\n#\tsrc/EFCore.Relational.Specification.Tests/TransactionTestBase.cs\n#\ttest/EFCore.Sqlite.FunctionalTests/TransactionSqliteFixture.cs"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/984c2c87d67d996e2a3c578ff1a7e8e1c4e0da80", "message": ":green_heart: React to aspnet/Microsoft.Data.Sqlite#475"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e1fcb3a4720f1ebc725d2ea1099655bebaafb42a", "message": "Merge branch 'release/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3f802d209f7e50c5b3c1a01d82bf82fc55bf5b22", "message": "PMC Tools: Use File.ReadAllText to support PowerShell 3.0"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e1710e11abe2ee30d289b9fca63858bbc213689f", "message": "Migrations: Enhance DiffContext in MigrationsModelDiffer\n\nPairs model objects earlier to enable better diffing of subsequent objects."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/20619934aab66e54c0ec26e63f524e4bfa3fb2dd", "message": "Migrations: Test owned types, table splitting, and inheritance more\n\nFixes #9873, fixes #10099"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/af8ea3247f2d2122147a1a02a73f90315bb0e8cb", "message": "PMC Tools: Redirect standard error\n\nFixes #10338"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/aab746f88a4dc1639487a5cc305ecaeedce2988f", "message": "Design: Allow referencing additional design-time services\n\nResolves #10154"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/32560114e3cf7926d8e57cbd7312129cb6f2d83d", "message": "SQLite Query: Translate Math.Max, Min & Round\n\nFixes #10526"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/bf1afac05007b6d14bdacff17dee8017619f86ea", "message": "RevEng: Make some APIs public (non-Internal)\n\nThis exposes the entry point into the Reverse Engineer functionality (IReverseEngineerScaffolder); the contract for code generators (IModelCodeGenerator); and the service for selecting a code generator (IModelCodeGeneratorSelector).\n\nIt also adds extension methods for adding our design-time services to an IServiceCollection. (fixes #9339)\n\nThis cleans up some other DI contracts too."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9842ca8472e7b307643563accf564580616ec99d", "message": "Merge branch 'release/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1232de6d64f83826e1d2415fb1809182b56831f2", "message": "PMC Tools: Handle unicode in project.assets.json\n\nFixes #10532"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/764b139bfe0652702526603f81b780fcf9622575", "message": "Design: Refine code generation APIs\n\nThis removes the concept of the programming language from the provider APIs."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/17e41eadf7a43b5755909156bf2d2119ed376ad9", "message": ":green_heart: Oracle Tests: Fix compiler error"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ecb5066eb6e6415c043393bfc200f2f84d8aa604", "message": "Tests: Make TempDirectory more robust\n\nPart of #10456"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ae1d7fa26a95b1f4af9c82b44ea9d98d17e175d0", "message": "RevEng: Decouple IScaffoldingCodeGenerator from I/O\n\nPart of #8853"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6d5ead89b88ea198175e449ba1fbd635c9f89689", "message": "Merge branch 'release/2.0.0' into dev\n\n# Conflicts:\n#\tsrc/EFCore.Tools/tools/EntityFrameworkCore.psd1\n#\tversion.props"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/8438550393fbfb40fd0281d9896cd5ffe6d6c443", "message": ":green_heart: Fix OracleProvider.FunctionalTests"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9d34aa06c9324717d23e459a2a80a88595872ade", "message": "Tools: Force runtime configuration file generation\n\nFixes #10298"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a146836bcf4c0d8b086b508fb3da9542a2924f49", "message": "Bump version to 2.0.2"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6cd4d2405b9d5168d945932058c3ed269ba1135f", "message": ":green_heart: Update column order in test"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6a83914eed629d963f75bfa49f0efd151357a3d0", "message": "Tools: Use project language when scaffolding\n\nGroundwork for #6401 & #8012"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/53c365a3f7c6ade7e4701b32b0f3943ea24a5b27", "message": "Hide System.Object APIs on fluent APIs\n\nResolves #1367"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/dedbedb8cb846444e7e58dfd6506b142d48bb70f", "message": "Remove unused references\n\nFixes #10139"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/f68b585c3a48d4564065ca9945e928004a28b195", "message": "Fix more spelling mistakes"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3c12171913db284a71aba11815d87c3ff48b957e", "message": "Tools: Hook AssemblyResolve on .NET Core\n\nThis enables using a separate migrations assembly when the startup project contains the DbContext."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ed629d65089bc7b1bbd6853c335e541df5a5ae7e", "message": "Migrations: Use reflection order for columns in CreateTable\n\nFixes #2272"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/084149d6bd45cc93fc0462fae69dbe03add7e310", "message": "Spellcheck all the things!\n\nFixes #10073"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/0faaa4c3ccb6ad8b0272c1588282f3829c2b3b19", "message": "Query: Use correct overload of DelimitIdentifier() in DefaultQuerySqlGenerator\n\nFixes #9560"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a4f10809edefb6f95566be197f20d9edb38d04cd", "message": ":green_heart: React to aspnet/Microsoft.Data.Sqlite#420"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e3e76e10ceed8a0610e05fa3f787a2470421abe5", "message": "NuGet: Friendlier .NET Standard 2.0 packages\n\nChanges:\n- Set min client version to 3.6 (fixes #9668)\n- Block metapackage on incompatible frameworks (fixes #9654)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e2d2ca3ca90dab2f428e5ae40410520f21a4a4d5", "message": "SQLite Migrations: Rebuild renamed indices\n\nResolves #7821"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/df68c5e1098b64a44ad5bdd19094d899d633abb7", "message": "Merge branch 'feature/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/38c768e94ec9d0ed3267a2147741a753f67d6fb3", "message": "Revert parts of PMC Tools UWP changes (only for 2.0.1)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a866d1cc3081526395bfce5cb123aed03d2a9679", "message": "Merge branch 'feature/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c944910f1048e05b75e4bc9a109096e157a4f5c0", "message": "Use consistent ID for OracleProvider.csproj"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b9e3db52d73f04c7f33d625b36ea94f2fd0749c1", "message": "Use consistent project IDs between solutions"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38092052", "body": "It looks like the migrations model references the relational metadata model directly. We discussed keeping these separate, and late-binding in the generator only when they were available.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38092052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38295761", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38295761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40226296", "body": "Can the code generation parts be factored into a separate assembly like Microsoft.Data.Migrations.Design? This is an extension of the pay-per-play principle. If you only ever need to execute this code at design-time, it shouldn't be deployed alongside your application at run-time.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40226296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40226296", "body": "Can the code generation parts be factored into a separate assembly like Microsoft.Data.Migrations.Design? This is an extension of the pay-per-play principle. If you only ever need to execute this code at design-time, it shouldn't be deployed alongside your application at run-time.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40226296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40414451", "body": ":shipit: This is coming along very well. The best part is: no Visual Basic generator!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40414451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40982775", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40982775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41834257", "body": "Fixed by #112\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41834257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42699414", "body": "@suhasj MySQL?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42699414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42722533", "body": "This depends on aspnet/DataCommon.SQLite#28\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42722533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42728114", "body": "Closing since Suhas was able to get this working.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42728114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42759581", "body": ":shipit: :wink:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42759581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42760138", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42760138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43006414", "body": "Microsoft.Data.Common unifies on net45, so a reference to System.Data is required there.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43006414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43017043", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43017043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43381912", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43381912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42235648", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42235648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/118223496", "body": "This won't be possible using a NuGet 3 package which we'll have to use if we support UWP. Closing as \"won't fix\".\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/118223496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44449725", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44449725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44581499", "body": "I dug into this a bit more, and there doesn't appear to be any way to get more detailed error messages from the native API. I'll keep looking though.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44581499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44597800", "body": "@julielerman No, this PR was just about getting EF to use the new Microsoft.Data.Common package. Because of the NuGet package dependencies, you shouldn't have to explicitly install that package. Does your project target .NET 4.5.1?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44597800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44599866", "body": "lol true, If we'd just stop generating invalid SQL... :wink:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44599866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/6433144", "body": "Doesn't compile. We have some code issues we need to fix. When build.cmd is updated to run both net45 and k10, I'll update the code and re-add.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/6433144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7020159", "body": "Need to wait for Coherence to pass before new KRE is published. :chicken: & :egg: problem. :) Should be resolved soon.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7020159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7645375", "body": "The net451 assembly produced by kpm will not work when running on the CLR. (It will be compiled against ANIs.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7645375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8922333", "body": "Or other tests still use 2012: `(localdb)\\v11.0`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8922333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9463872", "body": "I suspect it means, \"I forgot to squash this before pushing.\" :wink: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9463872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10763517", "body": "Because it uses portable version 4.6. In reality though, you need Visual Studio 2015 to build since we use C# 6 in our code base.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10763517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11077354", "body": "R# fail. Those parenthesis weren't entirely empty...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11077354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500150", "body": "I don't think so. I think that one is something wrong with the Immutable Collections package and/or NuGet/DNX.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500263", "body": "But it might; I haven't investigated that one yet. There's a ton of churn going on in DNX right now making day-to-day development extremely painful.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12765144", "body": "It's a special non-merging merge commit. It tells git, \"Don't ever bring these changes into dev.\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12765144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12811739", "body": "Shouldn't dnvm's unstable feed also be overridden in our repositories to point to this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12811739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12811927", "body": "Groovy. :v: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12811927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13014066", "body": "#2977\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13014066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13619532", "body": "My two cents:\n\nString interpolation compiles to `string.Format` while concatenation goes to `string.Concat`. Concatenation _is_ faster, so I would hesitate to start using string interpolation as an all-up replacement.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13619532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13691186", "body": "The maintainability characteristics of test code are often different from those of product code. Most coding \"best practices\" are designed to isolate change. This test data will never change. One of the most important characteristics of test code is readability. Extracting this value into a constant could make it harder to understand what is being tested.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13691186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15866104", "body": "Noooooo!!! :scream: lol, this breaks Full .NET. We may be able to remove them entirely thanks to dotnet/cli#1012. I'll look into it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15866104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15985609", "body": "@ErikEJ No. We still cross-compile to net451.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15985609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16649942", "body": "@qbikez Unfortunately, it hasn't been publicly released yet. I think it will be available around the same time as ASP.NET Core RC2.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16649942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715125", "body": "Where was the PR for this? We need to populate these fields... Can you file an issue for the remaining work?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715385", "body": "lol, no worries. I do it all the time. Sorry if I came off a bit brusque. I ain't mad, Bro. Thanks for filing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22871316", "body": "Create an issue. I just kept the existing behavior without really reviewing whether it was correct.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22871316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/128869668", "body": "This won't be available. Should it be `2.0.0-preview2-final` until `2.0.0` ships?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/128869668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/106476869", "body": "Only `SqlServer` is being used. Remove `All`, `Unit`, `Functional` & `Benchmark` groups until we need them.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/106476869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/106477060", "body": "(Their items too)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/106477060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152117185", "body": "Sometimes I feel like we're baking too much into the individual repos, and we could do a better job of separating concerns to decouple them from Universe and other consumers.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152117185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152120910", "body": "Local builds and submodules.\r\n\r\nI get there's no harm in these being here, it just also feels like they may not belong here.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152120910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152121333", "body": "For example, instead of having these flags, have a general hook to override the sources then put the particulars in DotNetBuild and AspNetUniverseBuild", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152121333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152121797", "body": "But it's much more general than just this PR and ultimately probably a non-issue.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152121797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/159301855", "body": "@smitpatel No `IF EXISTS` in PL/SQL", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/159301855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157823978", "body": "On SQL Server, we did this since there is no way to change the default in the `ALTER TABLE..ALTER COLUMN` statement. It looks like Oracle may have better support for this:\r\n\r\n``` sql\r\nALTER TABLE MyTable MODIFY MyColumn DEFAULT 'NewDefault';\r\nALTER TABLE MyTable MODIFY MyColumn DEFAULT NULL;\r\n```\r\nAlthough it can't actually remove the default constraint, it may not matter since setting it to `NULL` effectively disables it.\r\n\r\nI'll leave it up to you whether it's worth simplifying this...", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157823978/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157837124", "body": "What is this code doing? Why is it needed?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157837124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157837479", "body": "Again, this doesn't seem right. Why is it needed? Does Oracle not support statement batching? Instead of using `EXECUTE IMMEDIATE`, we should just put each statement in its own command.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157837479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148312454", "body": "Couldn't this be written as a join (instead of a function)?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148312454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "AhmedRagheb": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10716", "title": "Get the values of Group by using MyGroup.ToList() Throw exception, Must select First", "body": "Get the values of Group by using grp.ToList() Throw exception I must Select First\r\n\r\n```\r\nException message:\r\nStack trace:\r\n```\r\nExpression of type 'System.Linq.IAsyncGrouping`2[x,y]' \r\ncannot be used for parameter of type 'System.Collections.Generic.IEnumerable`1[y]' \r\nof method 'System.Collections.Generic.List`1[y] \r\nToList[y](System.Collections.Generic.IEnumerable`1[y])'\r\nParameter name: arg0\r\n at System.Dynamic.Utils.ExpressionUtils.ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arguments, ParameterInfo pi, String methodParamName, String argumentParamName, Int32 index)\r\n   at System.Linq.Expressions.Expression.Call(MethodInfo method, Expression arg0)\r\n   at System.Linq.Expressions.MethodCallExpression1.Rewrite(Expression instance, IReadOnlyList`1 args)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MemberAccessBindingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(MemberAssignment node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(MemberBinding node)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit[T](ReadOnlyCollection`1 nodes, Func`2 elementVisitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(MemberInitExpression node)\r\n   at System.Linq.Expressions.MemberInitExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(Expression expression, IQuerySource querySource, Boolean inProjection)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass24_0`1.<CompileAsyncQuery>b__0()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.System.Collections.Generic.IAsyncEnumerable<TResult>.GetEnumerator()\r\n   at System.Linq.AsyncEnumerable.<Aggregate_>d__6`3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n### Steps to reproduce\r\n\r\n```c#\r\nvar q =  await (\r\n              from t1 in _context.T1\r\n\t      join t2 in _context.T2 on t1.Id equals t2.Id\r\n              group t2 by t1 into grp\r\n              select new MyModel\r\n\t      {\r\n\t\t  T1 = grp.Key,\r\n\t\t  T2s = grp.ToList() // THROW exception .. should use  grp..Select(x => x).ToList() \r\n\t      }\r\n            ).ToListAsync();\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE:  Visual Studio 2017 15.4\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FabioMorcillo": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10714", "title": "Sequence Decimal Data Type", "body": "Hello,\r\n\r\nData type sequence is decimal in SQL Server and i can\u00b4t change to int or other data type, when i try to savechanges() generate this error:\r\n\r\n\r\n\r\nSystem.ArgumentException occurred\r\n  HResult=0x80070057\r\n  Message=SQL Server sequences cannot be used to generate values for the property 'Id' on entity type 'Fiel' because the property type is 'decimal'. Sequences can only be used with integer properties.\r\n  Source=Microsoft.EntityFrameworkCore.SqlServer\r\n  StackTrace:\r\n   at Microsoft.EntityFrameworkCore.Metadata.SqlServerPropertyAnnotations.SetValueGenerationStrategy(Nullable`1 value)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerPropertyBuilderAnnotations.ValueGenerationStrategy(Nullable`1 value)\r\n   at Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo(PropertyBuilder propertyBuilder, String name, String schema)\r\n   at Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo[TProperty](PropertyBuilder`1 propertyBuilder, String name, String schema)\r\n   at Data.Context.OnModelCreating(ModelBuilder modelBuilder) in C:\\Users\\Fabio\\source\\repos\\OrmTest\\Data\\Context.cs:line 25\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer.Customize(ModelBuilder modelBuilder, DbContext context)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelCustomizer.Customize(ModelBuilder modelBuilder, DbContext context)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass22_0.<RealizeService>b__0(ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_InternalServiceProvider()\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()\r\n   at Microsoft.EntityFrameworkCore.DbContext.EntryWithoutDetectChanges[TEntity](TEntity entity)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)\r\n   at Microsoft.EntityFrameworkCore.DbContext.Add[TEntity](TEntity entity)\r\n   at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Add(TEntity entity)\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\Users\\Fabio\\source\\repos\\OrmTest\\ConsoleApp1\\Program.cs:line 19\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: (e.g. Visual Studio 2017 15.3.3)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zivillian": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10711", "title": "Support ArrayIndex expressions in where clause", "body": "Using an array index expression (`array[i]`) in a where clause results in client side evaluation.\r\n\r\n```c#\r\nvar values = new string[] {\"a\", \"b\"};\r\nvar exists = context.Entities.Any(x => x.Name == values[0]);\r\n```\r\nThe above code issues a warning (`The LINQ expression 'where ([x].Name == __values_0[0])' could not be translated and will be evaluated locally.`) and the generated SQL is missing the WHERE clause:\r\n```sql\r\nSELECT [x].[Name]\r\nFROM [Entities] AS [x]\r\n```\r\n\r\nIntroducing and using a local variable works as expected and the generated SQL contains the expected WHERE clause:\r\n```c#\r\nvar value = values[0];\r\nexists = context.Entities.Any(x => x.Name == value);\r\n```\r\n```sql\r\nSELECT CASE\r\n    WHEN EXISTS (\r\n        SELECT 1\r\n        FROM [Entities] AS [x]\r\n        WHERE [x].[Name] = @__value_0)\r\n    THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)\r\nEND\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.5.3\r\n\r\n### Steps to reproduce\r\nFull console app to reproduce the issue:\r\n```c#\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Linq;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.EntityFrameworkCore.Infrastructure;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var context = new TestContext())\r\n            {\r\n                var serviceProvider = context.GetInfrastructure();\r\n                var loggerFactory = (ILoggerFactory)serviceProvider.GetService(typeof(ILoggerFactory));\r\n                loggerFactory.AddProvider(new EFLoggerProvider());\r\n                context.Database.EnsureCreated();\r\n\r\n                var values = new string[] {\"a\", \"b\"};\r\n                var exists = context.Entities.Any(x => x.Name == values[0]);//broken\r\n                var value = values[0];\r\n                exists = context.Entities.Any(x => x.Name == value);//working\r\n            }\r\n        }\r\n    }\r\n\r\n    public class Entity\r\n    {\r\n        [Key]\r\n        public long Id { get; set; }\r\n\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class TestContext : DbContext\r\n    {\r\n        public DbSet<Entity> Entities { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=TestDb;Trusted_Connection=True;MultipleActiveResultSets=true;\");\r\n        }\r\n    }\r\n\r\n    public class EFLoggerProvider : ILoggerProvider\r\n    {\r\n        public ILogger CreateLogger(string categoryName)\r\n        {\r\n            if (categoryName == \"Microsoft.EntityFrameworkCore.Query\" || categoryName ==\"Microsoft.EntityFrameworkCore.Database.Command\")\r\n            {\r\n                return new EFLogger();\r\n            }\r\n            return new NullLogger();\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            // N/A\r\n        }\r\n\r\n        private class NullLogger : ILogger\r\n        {\r\n            public bool IsEnabled(LogLevel logLevel)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)\r\n            { }\r\n\r\n            public IDisposable BeginScope<TState>(TState state)\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        private class EFLogger : ILogger\r\n        {\r\n            public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)\r\n            {\r\n                if (logLevel == LogLevel.Warning || (logLevel == LogLevel.Information && eventId.Name.EndsWith(\"Executed\")))\r\n                Console.WriteLine(formatter(state, exception));\r\n            }\r\n\r\n            public bool IsEnabled(LogLevel logLevel)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            public IDisposable BeginScope<TState>(TState state)\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "granthoff1107": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10709", "title": "Unable to cast object of type 'System.Int32' to type 'System.Linq.Expressions.LambdaExpression'", "body": "I've already looked at this issue https://github.com/aspnet/EntityFrameworkCore/issues/10271,  \r\n\r\n\r\nI'm aware of the closure issues so I've referenced a variable registered in a singleton.\r\nYet, I still am getting an error \r\n\r\n> Unable to cast object of type 'System.Int32' to type 'System.Linq.Expressions.LambdaExpression'\r\n\r\n\r\nMicrosoft.EntityFrameworkCore -Version 2.0.1\r\n\r\n\r\nMy code:\r\n\r\n```C#\r\n    public class DbAuthorizationOptions\r\n    {\r\n        public ConstraintOptions ConstraintOptions { get; set; } = new ConstraintOptions();\r\n    }\r\n\r\n    public class ConstraintOptions\r\n    {\r\n        protected Dictionary<Type, LambdaExpression> queryConstrations = new Dictionary<Type, LambdaExpression>();\r\n\r\n        public void SetConstraint<T>(Expression<Func<T, bool>> constraint)\r\n        {\r\n            this.queryConstrations[typeof(T)] = constraint;\r\n        }\r\n\r\n        public Expression<Func<T, bool>> GetConstraint<T>()\r\n        {\r\n            return (Expression<Func<T, bool>>)this.queryConstrations[typeof(T)];\r\n        }\r\n\r\n        public IEnumerable<KeyValuePair<Type,LambdaExpression>> GetAllConstraints()\r\n        {\r\n            return this.queryConstrations;\r\n        }\r\n    }\r\n\r\n    public class ContextAuthorizationOptions : DbAuthorizationOptions<AstootContext>\r\n    {\r\n         \r\n         protected int _userId { get; set; } = 1;\r\n\r\n         public ContextAuthorizationOptions(IUserAuthenticationManager authenticationManager)\r\n         {\r\n             ConstraintOptions.SetConstraint<Conversation>(x => x.EmployeeUserId == this._userId);\r\n         }\r\n    }\r\n```\r\nStartup:\r\n\r\n```C#\r\n    services.AddSingleton<DbAuthorizationOptions<AstootContext>, ContextAuthorizationOptions>();`\r\n```\r\nAuthorized context:\r\n\r\n```C#\r\n    protected DbAuthorizationOptions _authorizationOptions;\r\n\r\n    public AuthorizedDbContext(DbContextOptions options, DbAuthorizationOptions authorizationOptions)\r\n    : base(options)\r\n     {\r\n         this._authorizationOptions = authorizationOptions;\r\n     }\r\n\r\n\r\n     protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n     {\r\n        var contraintOptions = this._authorizationOptions.ConstraintOptions;\r\n        foreach (var option in contraintOptions?.GetAllConstraints())\r\n        {\r\n            modelBuilder.Entity(option.Key).HasQueryFilter(option.Value);\r\n        }\r\n\r\n        base.OnModelCreating(modelBuilder);\r\n    }\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NoFear23m": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10707", "title": "CompareString in VB Project will be evaluated locally", "body": "Hy at all. Sorry for my bad english ;-(\r\n\r\nToday i was wondering about the logoutput from EF.\r\nI have the following code:\r\n\r\n```vb\r\nPublic Function GetAllViewModelAndEventDefaultValueValues(viewModelName As String, onEvent As String) As List(Of DefaultValueManager)\r\n        Dim q As IQueryable(Of DefaultValueManager) = ContextInternal.Set(Of DefaultValueManager)() \r\n        q = q.Where(Function(i) i.ViewModel = viewModelName)\r\n        q = q.Where(Function(i) i.OnEvent = onEvent)\r\n        q = q.Where(Function(i) i.IsActive)\r\n        q = q.Select(Function(s) New DefaultValueManager() With {.ClientId = s.ClientId, .WorkspaceId = s.WorkspaceId, .UserId = s.UserId, .DefaultValueManagerId = s.DefaultValueManagerId,\r\n                .DefaultValue = s.DefaultValue, .OnEvent = s.OnEvent, .PropertyName = s.PropertyName, .Title = s.Title, .ViewModel = s.ViewModel}).AsQueryable\r\n        Return q.ToList\r\n    End Function\r\n```\r\n\r\nEF Generates the following log:\r\n\r\n> Compiling query model: \r\n'from DefaultValueManager i in DbSet<DefaultValueManager>\r\nwhere int CompareString(\r\n    Left: [i].ViewModel, \r\n    Right: __$VB$Local_viewModelName_0, \r\n    TextCompare: False) == 0\r\nwhere int CompareString(\r\n    Left: [i].OnEvent, \r\n    Right: __$VB$Local_onEvent_1, \r\n    TextCompare: False) == 0\r\nwhere [i].IsActive\r\nselect new DefaultValueManager{ \r\n    ClientId = [i].ClientId, \r\n    WorkspaceId = [i].WorkspaceId, \r\n    UserId = [i].UserId, \r\n    DefaultValueManagerId = [i].DefaultValueManagerId, \r\n    DefaultValue = [i].DefaultValue, \r\n    OnEvent = [i].OnEvent, \r\n    PropertyName = [i].PropertyName, \r\n    Title = [i].Title, \r\n    ViewModel = [i].ViewModel \r\n}\r\n'\r\nOptimized query model: \r\n'from DefaultValueManager i in DbSet<DefaultValueManager>\r\nwhere int CompareString(\r\n    Left: [i].ViewModel, \r\n    Right: __$VB$Local_viewModelName_0, \r\n    TextCompare: False) == 0\r\nwhere int CompareString(\r\n    Left: [i].OnEvent, \r\n    Right: __$VB$Local_onEvent_1, \r\n    TextCompare: False) == 0\r\nwhere [i].IsActive\r\nselect new DefaultValueManager{ \r\n    ClientId = [i].ClientId, \r\n    WorkspaceId = [i].WorkspaceId, \r\n    UserId = [i].UserId, \r\n    DefaultValueManagerId = [i].DefaultValueManagerId, \r\n    DefaultValue = [i].DefaultValue, \r\n    OnEvent = [i].OnEvent, \r\n    PropertyName = [i].PropertyName, \r\n    Title = [i].Title, \r\n    ViewModel = [i].ViewModel \r\n}\r\n'\r\nThe LINQ expression 'where (CompareString([i].ViewModel, __$VB$Local_viewModelName_0, False) == 0)' could not be translated and will be evaluated locally.\r\nThe LINQ expression 'where (CompareString([i].OnEvent, __$VB$Local_onEvent_1, False) == 0)' could not be translated and will be evaluated locally.\r\nThe LINQ expression 'where [i].IsActive' could not be translated and will be evaluated locally.\r\n(QueryContext queryContext) => IEnumerable<DefaultValueManager> _InterceptExceptions(\r\n    source: IEnumerable<DefaultValueManager> _Select(\r\n        source: IEnumerable<ValueBuffer> _Where(\r\n            source: IEnumerable<ValueBuffer> _Where(\r\n                source: IEnumerable<ValueBuffer> _Where(\r\n                    source: IEnumerable<ValueBuffer> _ShapedQuery(\r\n                        queryContext: queryContext, \r\n                        shaperCommandContext: SelectExpression: \r\n                            SELECT [i].[ViewModel], [i].[OnEvent], [i].[IsActive], [i].[ClientId], [i].[WorkspaceId], [i].[UserId], [i].[DefaultValueManagerId], [i].[DefaultValue], [i].[PropertyName], [i].[Title]\r\n                            FROM [DefaultValueManagers] AS [i]\r\n                            WHERE [i].[IsActive] = 1, \r\n                        shaper: ValueBufferShaper), \r\n                    predicate: (ValueBuffer i) => int CompareString(\r\n                        Left: string TryReadValue(i, 0, DefaultValueManager.ViewModel), \r\n                        Right: string GetParameterValue(\r\n                            queryContext: queryContext, \r\n                            parameterName: \"__$VB$Local_viewModelName_0\"), \r\n                        TextCompare: False) == 0), \r\n                predicate: (ValueBuffer i) => int CompareString(\r\n                    Left: string TryReadValue(i, 1, DefaultValueManager.OnEvent), \r\n                    Right: string GetParameterValue(\r\n                        queryContext: queryContext, \r\n                        parameterName: \"__$VB$Local_onEvent_1\"), \r\n                    TextCompare: False) == 0), \r\n            predicate: (ValueBuffer i) => bool TryReadValue(i, 2, DefaultValueManager.IsActive)), \r\n        selector: (ValueBuffer i) => new DefaultValueManager{ \r\n            ClientId = Nullable<int> TryReadValue(i, 3, DefaultValueManager.ClientId), \r\n            WorkspaceId = Nullable<int> TryReadValue(i, 4, DefaultValueManager.WorkspaceId), \r\n            UserId = Nullable<int> TryReadValue(i, 5, DefaultValueManager.UserId), \r\n            DefaultValueManagerId = int TryReadValue(i, 6, DefaultValueManager.DefaultValueManagerId), \r\n            DefaultValue = string TryReadValue(i, 7, DefaultValueManager.DefaultValue), \r\n            OnEvent = string TryReadValue(i, 1, DefaultValueManager.OnEvent), \r\n            PropertyName = string TryReadValue(i, 8, DefaultValueManager.PropertyName), \r\n            Title = string TryReadValue(i, 9, DefaultValueManager.Title), \r\n            ViewModel = string TryReadValue(i, 0, DefaultValueManager.ViewModel) \r\n        }\r\n    ), \r\n    contextType: SPS.DMS.Repository.BusinessContext.BusinessContext, \r\n    logger: DiagnosticsLogger<Query>, \r\n    queryContext: queryContext)\r\nOpening connection to database 'SPS.DMS.DB' on server '192.168.0.50,1433'.\r\nOpened connection to database 'SPS.DMS.DB' on server '192.168.0.50,1433'.\r\nExecuting DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nSELECT [i].[ViewModel], [i].[OnEvent], [i].[IsActive], [i].[ClientId], [i].[WorkspaceId], [i].[UserId], [i].[DefaultValueManagerId], [i].[DefaultValue], [i].[PropertyName], [i].[Title]\r\nFROM [DefaultValueManagers] AS [i]\r\nWHERE [i].[IsActive] = 1\r\nExecuted DbCommand (27ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nSELECT [i].[ViewModel], [i].[OnEvent], [i].[IsActive], [i].[ClientId], [i].[WorkspaceId], [i].[UserId], [i].[DefaultValueManagerId], [i].[DefaultValue], [i].[PropertyName], [i].[Title]\r\nFROM [DefaultValueManagers] AS [i]\r\nWHERE [i].[IsActive] = 1\r\nA data reader was disposed.\r\nClosing connection to database 'SPS.DMS.DB' on server '192.168.0.50,1433'.\r\nClosed connection to database 'SPS.DMS.DB' on server '192.168.0.50,1433'.[2018-01-14 15:09:52,414] [ValuesManagerBl] [1   ] [DEBUG] - The DataManager returns 2 defaultvalues for viewmodelname SearchBusinesspartnerVm and eventname Loaded\r\n\r\nIt the log i can see the following line for example:\r\n**The LINQ expression 'where (CompareString([i].ViewModel, __$VB$Local_viewModelName_0, False) == 0)' could not be translated and will be evaluated locally.**\r\n\r\n\r\nIs that a mistake from my side? If yes, what can i do?\r\n\r\nEF Version: 2.0.1\r\nVisual Studio 2017 (15.5.3)\r\nLanguage: VB.Net (!!) on .Net Standard 2.0\r\nEF Core version: (found in project.csproj or packages.config)\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 Pro x64 (1709) Build 16299.19\r\n\r\nMany Thanks in advance\r\nSascha\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ileve": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10706", "title": "EF Core 2.0.1 AfterSaveBehavior for read-only identity column is set to PropertySaveBehavior.Save instead of PropertySaveBehavior.Throw", "body": "I noticed that in EF Core 2.0.1 an identity column which is not a primary key, has its `IProperty.AfterSaveBehavior` equal to `PropertySaveBehavior.Save`, although it has a read-only behavior.\r\n\r\nIt is based on my question in stackoverflow.\r\n\r\n[https://stackoverflow.com/questions/48244597/ef-core-2-0-1-aftersavebehavior-for-read-only-identity-column-is-set-to-property](url)\r\n\r\nException message: no exception message\r\nStack trace:\r\n\r\n\r\n### Steps to reproduce\r\nAs a proof of concept i created the following Xunit test. \r\n`step1`\r\nIn order to reproduce it, create xunit test in Visual Studio 2017, by selecting .NET Core -> xUnit Test Project (.NET Core).\r\n\r\n`step2:`\r\nIn order to execute the unit test, we have to install first, the EF Core 2.0.1 and the MSSQL provider by executing the following commands in package manager console.\r\n\r\n`Install-Package Microsoft.EntityFrameworkCore.Tools`\r\n`Install-Package Microsoft.EntityFrameworkCore.SqlServer`\r\n\r\nThe source code of Xunit test is:\r\n\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.EntityFrameworkCore.Metadata;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing Xunit;\r\n\r\n\r\nnamespace EFCoreIdentityColumn\r\n{\r\n    public class DataRecord\r\n    {\r\n        public int ID { get; set; }\r\n        public int IdentityField { get; set; }\r\n    }\r\n\r\n    class IdentityContext : DbContext\r\n    {\r\n        public IdentityContext() { }\r\n        public IdentityContext(DbContextOptions<IdentityContext> options) : base(options) { }\r\n        public DbSet<DataRecord> DataRecords { get; set; }\r\n\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            string conn = \"Server=(localdb)\\\\mssqllocaldb;Database=TESTIDENTITY;Trusted_Connection=True;MultipleActiveResultSets=true\";\r\n            optionsBuilder.UseSqlServer(conn);\r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<DataRecord>()\r\n                .Property(i => i.ID)\r\n                .ValueGeneratedNever();\r\n\r\n            modelBuilder.Entity<DataRecord>()\r\n                .Property(i => i.IdentityField)\r\n                .UseSqlServerIdentityColumn();\r\n        }\r\n    }\r\n\r\n\r\n    public class IdentityColumnXunitTest\r\n    {\r\n        [Fact]\r\n        public void IdentitySaveBehaviorWithMSSQL()\r\n        {\r\n            using (var context = new IdentityContext())\r\n            {\r\n                //examine DataRecord.IdentityField property\r\n                var identityPropInfo = typeof(DataRecord).GetTypeInfo().DeclaredProperties.First(p => p.Name == \"IdentityField\");\r\n                var identityIProperty = context.Model.FindEntityType(typeof(DataRecord)).FindProperty(identityPropInfo);\r\n                Assert.Equal(ValueGenerated.OnAdd, identityIProperty.ValueGenerated);\r\n                Assert.Equal(PropertySaveBehavior.Save, identityIProperty.BeforeSaveBehavior);\r\n                Assert.Equal(PropertySaveBehavior.Save, identityIProperty.AfterSaveBehavior);\r\n                Assert.False(identityIProperty.IsReadOnlyAfterSave);\r\n                Assert.True(identityIProperty.SqlServer().ValueGenerationStrategy\r\n                    == SqlServerValueGenerationStrategy.IdentityColumn);\r\n                Assert.False(identityIProperty.IsNullable);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        void IdentityColumnSaveBehaviorWithMSSQL()\r\n        {\r\n            using (var context = new IdentityContext())\r\n            {\r\n                context.Database.ExecuteSqlCommand(\"TRUNCATE TABLE DataRecords\");\r\n\r\n                DataRecord rec1 = new DataRecord();\r\n                var entry1 = context.Add(rec1);\r\n                Assert.Equal(EntityState.Added, entry1.State);\r\n                Assert.Equal(1, context.SaveChanges()); //one record was added\r\n                Assert.Equal(0, context.DataRecords.First().ID);\r\n                Assert.Equal(1, context.DataRecords.First().IdentityField);\r\n\r\n                //primary key value is readonly after save and cannot be modified\r\n                rec1.ID = 10;\r\n                Assert.Throws<InvalidOperationException>(() => context.SaveChanges());\r\n\r\n            }\r\n\r\n            using (var context = new IdentityContext())\r\n            {\r\n                //we cannot supply a value for identity column\r\n                DataRecord rec2 = new DataRecord()\r\n                {\r\n                    ID = 323,\r\n                    IdentityField = 5\r\n                };\r\n\r\n                var entry2 = context.Add(rec2);\r\n                Assert.Equal(EntityState.Added, entry2.State);\r\n                Assert.Throws<DbUpdateException>(() => context.SaveChanges());\r\n            }\r\n\r\n            using (var context = new IdentityContext())\r\n            {\r\n                DataRecord rec = new DataRecord()\r\n                {\r\n                    ID = 299,\r\n                };\r\n\r\n                var entry = context.Add(rec);\r\n                Assert.Equal(EntityState.Added, entry.State);\r\n                Assert.Equal(1, context.SaveChanges()); //one record was added\r\n                Assert.Equal(299, context.DataRecords.First(i => i.ID == rec.ID).ID);\r\n                Assert.Equal(2, context.DataRecords.First(i => i.ID == rec.ID).IdentityField);\r\n                \r\n                //we cannot update identity column\r\n                Assert.True(context.Entry(rec).State == EntityState.Unchanged);\r\n                rec.IdentityField = 544;\r\n                Assert.True(context.Entry(rec).State == EntityState.Modified);\r\n                Assert.Throws<DbUpdateException>(() => context.SaveChanges());\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n```\r\nIn order to execute the above unit test, we must migrate and update database with the following commands:\r\n\r\n`Add-Migration migration_name`\r\n`Update-Database`\r\n\r\nThe test confirms that although the identity column is read-only in practice, the `AfterSaveBehavior` is set to `PropertySaveBehavior.Save` and `IsReadOnlyAfterSave` is set to `false`. There is a contradiction here.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 7 SP1 x64\r\nIDE: Visual Studio 2017 15.3.1\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "codepb": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10703", "title": "Allow EF to call parameterized entity constructors", "body": "When trying to create classes with only readonly properties, you currently have to use properties with backing fields to be able to construct with Entity Framework, and it is required to have an empty constructor. It would be preferable if Entity Framework could construct the objects by passing the values to a constructor with a parameter of the same name (much like JSON.net can). This would allow truly readonly properties, and keep the class simpler.\r\n\r\n### Steps to reproduce\r\nIt would be preferable to support a class structured like the following:\r\n\r\n```c#\r\npublic class SampleClass\r\n{\r\n    public string Prop1 { get; }\r\n    public int Prop2 { get; }\r\n\r\n    public SampleClass(string prop1, int prop2)\r\n    {\r\n        Prop1 = prop1;\r\n        Prop2 = prop2;\r\n    }\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajcvickers": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10699", "title": "Package manager prompt hangs", "body": "Moved from https://github.com/aspnet/EntityFramework6/issues/434 since this is an EF Core scenario.\r\n\r\nFrom VS Feedback:\r\n\r\nPackage manager prompt is not restored after sucessfully completing add-migration or update-database operation.\r\n\r\nPM> update-database\r\ninfoinfo:\r\nApplying migration '20171216085326_IssueEditedBy'.\r\nDone.\r\n\r\nClosing the Package Manager Console does not help as it is greyed out on the View -> Other Windows list.\r\n\r\nHave to restart Visual Studio to get the functionality back.\r\n\r\nAfter running add-migration the prompt does not return.\r\nThis is because an instance of the dotnet process is still running.\r\nKilling this process using Task Manager completes the action in Visual Studio and the prompt is restored and I can continue to work without restarting Visual Studio.\r\nThe dotnet process is also left running after update-database from the VS package manager console.\r\n\r\nI am using MariaDb and the Pomelo.EntityFrameworkCore.MySql NuGet package in a EF Core / AspNet Core 2 solution.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10654", "title": "Test experience using 2.0 providers with 2.1 EF Core", "body": "The desired experiences are:\r\n* Existing apps using EF Core 2.0 will continue to work using EF Core 2.1 without updating the provider to a new version\r\n* Ideally, new features should work without provider changes, but this will not always be feasible\r\n* For cases where new features don't work, attempting to use the feature should generate a reasonable exception message\r\n\r\nFeatures to test:\r\n- [ ] Value conversions\r\n- [ ] Query types\r\n- [ ] Seeding\r\n- [ ] Lazy loading\r\n\r\n(List to be added to in triage...)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10651", "title": "Remove ISingletonUpdateSqlGenerator delegate registration", "body": "In EntityFrameworkRelationalServicesBuilder. This was added because 2.0 providers register IUpdateSqlGenerator as scoped, but this should be changed to singleton for 3.0\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10641", "title": "Add MaterializationContext parameter object", "body": "Per comment here: https://github.com/aspnet/EntityFrameworkCore/pull/10624#pullrequestreview-86526237", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10640", "title": "Make ILazyLoader disposable", "body": "Because currently it relies on the context.IsDisposed flag, but this could given the wrong result in cases whether context pooling is being used.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10634", "title": "Change parameter log formatting to not show DbType = String when it isn't", "body": "A DbType of String is sometimes set as the default by ADO.NET code--specifically tested with SQLClient. However, this doesn't actually mean that the type of the data is String, especially for nulls. We should change the formatting code to no show DbType = String when there is no real evidence that it actually is a string.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10633", "title": "Update BuiltInDataType tests to ensure batching case is covered", "body": "Since we do not now batch for small numbers of entities it means that the tests that are intended to execise these paths actually use the non-batching paths. Tests should probably change min batch size.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10632", "title": "Allow navigation fixup to be disabled in no-tracking queries", "body": "This could provide perf benefit in scenarios where entities are read and then immediately used to create DTOs without using any navigation properties.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10540", "title": "Make IEntityEntryGraphIterator public", "body": "Implementation can stay internal. See https://github.com/aspnet/EntityFrameworkCore/pull/10517 for discussion. \r\n\r\nConsider fixing #8226 before making public in case it impacts public API in breaking way.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10509", "title": "Implement lazy-loading of navigation properties", "body": "This issue tracks work on lazy-loading of relationships in EF Core. Subscribe to this issue to get updates when progress is made on lazy-loading. This issue is locked for now to reduce noise. Please use issue #3797 for general discussion on lazy-loading in EF Core.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10508", "title": "Implement many-to-many relationships without mapping join table", "body": "This issue tracks work on many-to-many relationships in EF Core. Subscribe to this issue to get updates when progress is made on many-to-many relationships. This issue is locked for now to reduce noise. Please use issue #1368 for general discussion on many-to-many relationships.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10497", "title": "Make it easy to use expression trees from methods", "body": "For example, consider this query from #10471:\r\n```C#\r\nvar popularPosts = ctx.Posts.Where(p => p.Blog != null && p.IsPopular());\r\n```\r\nIf IsPopular can generate an expression tree, then the query pipeline would have a chance of translating it. But it's currently not as simple as it could be to do this.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10434", "title": "Handle type conversions in SQL generation", "body": "Consider cases like #10427 which involves SQL translations for DateTime calculations. If the property has been mapped to some non-datetime type, then this kind of translation will not work anymore. Instead, query should either:\r\n* Do a different translation\r\n* Revert to client evaluation\r\n\r\nProbably client eval is what we can realistically do in the short term, but in the future it would be good to have the type mapping/value conversion participate in generating the translations.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10325", "title": "Can't use Microsoft.EntityFrameworkCore.Sqlite", "body": "VS Feedback:\r\n\r\nIn VS15.5 Preview, I created a Xamarin.Forms projects with .NET Standard code sharing strategy.\r\nAdd Microsoft.EntityFrameworkCore.Sqlite, Android Project can't run, if I run the android project, program will crash and vs will stop. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10265", "title": "Support client evaluation when store evaluation is not appropriate", "body": "This has come up a lot with discussion of value conversions (#242) but is also an issue with the SQLite ADO.NET provider (e.g. #10249 and #10198) and will be an issue for Oracle since it has a limited number of column types just like SQLite.\r\n\r\nThings to consider:\r\n* Developers may want:\r\n  * The sort order to be as it would be if run in .NET on the client\r\n  * The sort order to be as it would be in the server, understanding that this is different due to\r\n    * Conversion of values or value format\r\n    * Different semantics on the server (e.g. collation)\r\n  * Any sort order as long as it is deterministic\r\n    * Even if it is less common for developers to want this, EF still often needs this\r\n* Forcing sorting on the client can have a big perf impact\r\n* Anything done to change this by default would be a breaking change--especially important for SQLite cases\r\n* In some cases it is possible to change the conversions to be order-preserving, but this often results in unnatural data in the database\r\n* Even if it cannot be guaranteed that order will be preserved, it could be that ordering is preserved for the subset of values actually used--consider positive/negative number spaces when converting to strings or byte arrays.\r\n\r\nThings we could do:\r\n* Warn when this may be an issue\r\n* Allow developers to pick type mappings/conversions that preserve order\r\n  * Decide whether this is a _must_ or a _preference_. That is, if EF can't ensure order is preserved, then either:\r\n    * Continue with a warning and use non-order preserving mapping with store ordering\r\n    * Continue with a warning, but force ordering to be done client side\r\n    * Throw and require that the developer make an explicit choice of how to proceed by configuring differently\r\n* Allow developers to use client-side ordering. This could be \r\n  * Opt-in for any ordering \r\n  * Automatically opted in when EF can't guarantee that order is preserved, but with a way to opt-out\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10244", "title": "Fallback to runtime services when resolving design-time services", "body": "And make ReplaceService work for design-time services. This could make it easier for people to replace design-time services in situations where their app already references the design types.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10236", "title": "Turn \"More than twenty 'IServiceProvider'...\" warning to error by default", "body": "Since the application is almost certainly doing something wrong. Note this is a breaking changes and so probably can't happen until 3.0.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10235", "title": "Update \"More than twenty 'IServiceProvider'...\" message to be more helpful", "body": "Specifically add a fwlnk that references at least the documentation here: https://docs.microsoft.com/en-us/ef/core/miscellaneous/logging (Note that  at the time of writing the PR to update these docs has not yet been merged.)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10226", "title": "Make it easy to add custom file header to generated code", "body": "See issue #10203 \r\nThis would make it easy for people to:\r\n* Add their own copyright headers, etc.\r\n* Add auto-generated directive\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10170", "title": "Better SaveChanges exception messages for \"conceptual nulls\"", "body": "The normal \"conceptual null\" message is:\r\n\r\n> The association between entity types 'Blog' and 'Post' has been severed but the foreign key for this relationship cannot be set to null. If the dependent entity should be deleted, then setup the relationship to use cascade deletes.\r\n\r\nHowever, this can be confusing if:\r\n* The relationship was severed because the principal was deleted--the message above is correct, but additional information should be included so that the deletion can be identified as the root cause.\r\n* The key is nullable--in this case it's not that the key can't be set to null, but rather that the relationship is configured with Restrict such that the key is not set to null automatically.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10159", "title": "Allow application code to force query buffering", "body": "EF buffers queries automatically when:\r\n* Running multiple queries internally on providers that don't support MARS\r\n* When using connection resiliency\r\n\r\nWe could add a way to turn buffering on explicitly so that even multiple queries issued by the application would work without changes on a provider that doesn't support MARS.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10131", "title": "Reverse engineer SqlGeometry, SqlGeography, and HierarchyId", "body": "See #1100 and #10110. Since these can now be mapped on .NET Framework, it would be good if the scaffolding tool could correctly reverse engineer them. However, note:\r\n* They don't work with .NET Core\r\n* The application must be setup to reference the appropriate assemblies--EF tooling will not do this\r\n\r\nTherefore, likely the default behavior should be to not map these types, but warn mentioning an option that can be used to turn on this mapping.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10114", "title": "Allow delete fixup and cascade timing to be configured", "body": "Currently:\r\n* Cascade delete happens as part of SaveChanges. This prevents cascades happening when all that is intended is a re-parenting.\r\n* Fixup of non-deleted entities to no longer reference deleted entities happens after SaveChanges. This prevents graph shredding when marking entities as deleted.\r\n\r\nHowever, there are scenarios where it is useful for these things to happen at different times:\r\n* In a data-binding app, cascade delete should probably happen immediately so that the view of the data correlates to what will happen when SaveChanges is called.\r\n  * Similarly, it can be useful to have the fixup to the deleted entities happen\r\n* When attempting audit state before or in SaveChanges, it is useful to know what will be deleted beforehand.\r\n\r\nThere are a few things we could do:\r\n* Add a \"PerformCascades\" method to the context. This would run cascade delete code when called.\r\n* Add a context option to make cascading happen immediately on delete\r\n* Add similar method/option for delete fixup, or have the cascade method/option do the fixup also.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10109", "title": "Better LINQ support for Microsoft.SqlServer.Types", "body": "Methods like STDistance are not easy to translate right now because they are t-sql \"instance\" methods called like this:\r\n```sql\r\nSELECT [Id], [Geography1].STDistance([Geography2]) as [Distance] From [Foos]\r\n```\r\n\r\nFunction registration and method call translation does not support this out-of-the-box, but it shouldn't be too hard to add support. Once this is done, we should consider whether to write the common translations and ship them somewhere or maybe publish them as a sample.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10108", "title": "Figure out testing for EF use of Microsoft.SqlServer.Types", "body": "Testing for Microsoft.SqlServer.Types is problematic because:\r\n* The types are not available on .NET Core\r\n* Setting up a machine to have the correct versions of the correct types in the correct places is fragile and has traditionally causes C.I./build issues.\r\n\r\nFor now I have been using this little test app for most of my functional testing:\r\n```C#\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        var loggerProvider = new MyLoggerProvider();\r\n\r\n        using (var context = new TestDbContext())\r\n        {\r\n            // Create UDT columns\r\n            context.Database.EnsureDeleted();\r\n            context.GetService<ILoggerFactory>().AddProvider(loggerProvider);\r\n            context.Database.EnsureCreated();\r\n\r\n            // Single save\r\n            context.AddRange(NewFoo(0));\r\n            context.SaveChanges();\r\n\r\n            // Batch save\r\n            context.AddRange(NewFoo(1), NewFoo(2));\r\n            context.SaveChanges();\r\n        }\r\n\r\n        using (var context = new TestDbContext())\r\n        {\r\n            // Simple query\r\n            var foos = context.Foos.OrderBy(e => e.Id).ToList();\r\n            AssertFoo(foos[0], 0);\r\n            AssertFoo(foos[1], 1);\r\n            AssertFoo(foos[2], 2);\r\n\r\n            // Equals translation works for HierarchyId but not for spatial types\r\n            var foo = context.Foos.Single(e => e.HierarchyId.Equals(SqlHierarchyIds[1]));\r\n            AssertFoo(foo, 1);\r\n\r\n            // Simple prjection\r\n            var projection = context.Foos.OrderBy(e => e.Id).Skip(1).Select(e => new {foo.Id, foo.Geography1}).First();\r\n            Debug.Assert(projection.Geography1.STEquals(SqlGeographies[1]).IsTrue);\r\n\r\n            // FromSql query using spatial function\r\n            var bars = context.Bars.FromSql(\"SELECT [Id], [Geography1].STDistance([Geography2]) as [Distance] From [Foos]\").OrderBy(e => e.Id).ToList();\r\n            AssertDistance(bars[0].Distance, 0);\r\n            AssertDistance(bars[1].Distance, 1);\r\n            AssertDistance(bars[2].Distance, 2);\r\n\r\n            // Manipulate and send database updates\r\n            for (var i = 0; i < 3; i++)\r\n            {\r\n                foos[i].Geography1 = SqlGeographies[(i + 1) % 3];\r\n                foos[i].Geography2 = SqlGeographies[(i + 2) % 3];\r\n                foos[i].Geometry = SqlGeometries[(i + 1) % 3];\r\n                foos[i].HierarchyId = SqlHierarchyIds[(i + 1) % 3];\r\n            }\r\n            AssertFoo(foos[0], 0, 1);\r\n            AssertFoo(foos[1], 1, 1);\r\n            AssertFoo(foos[2], 2, 1);\r\n\r\n            context.SaveChanges();\r\n        }\r\n\r\n        using (var context = new TestDbContext())\r\n        {\r\n            // Query after update\r\n            var foos = context.Foos.OrderBy(e => e.Id).ToList();\r\n            AssertFoo(foos[0], 0, 1);\r\n            AssertFoo(foos[1], 1, 1);\r\n            AssertFoo(foos[2], 2, 1);\r\n        }\r\n    }\r\n\r\n    private static void AssertFoo(Foo foo, int index, int offset = 0)\r\n    {\r\n        Debug.Assert((foo.HierarchyId == SqlHierarchyIds[(index + offset) % 3]).IsTrue);\r\n        Debug.Assert(foo.Geometry.STEquals(SqlGeometries[(index + offset) % 3]).IsTrue);\r\n        Debug.Assert(foo.Geography1.STEquals(SqlGeographies[(index + offset) % 3]).IsTrue);\r\n        Debug.Assert(foo.Geography2.STEquals(SqlGeographies[(index + offset + 1) % 3]).IsTrue);\r\n    }\r\n\r\n    private static void AssertDistance(double distance, int index) \r\n        => Debug.Assert(\r\n            Math.Abs(SqlGeographies[index].STDistance(SqlGeographies[(index + 1) % 3]).Value - distance) < 1);\r\n\r\n    private static Foo NewFoo(int index)\r\n        => new Foo\r\n        {\r\n            HierarchyId = SqlHierarchyIds[index],\r\n            Geometry = SqlGeometries[index],\r\n            Geography1 = SqlGeographies[index],\r\n            Geography2 = SqlGeographies[(index + 1) % 3]\r\n        };\r\n\r\n    public class Bar\r\n    {\r\n        public int Id { get; set; }\r\n        public double Distance { get; set; }\r\n    }\r\n\r\n    public class Foo\r\n    {\r\n        public int Id { get; set; }\r\n        public SqlHierarchyId HierarchyId { get; set; }\r\n        public SqlGeometry Geometry { get; set; }\r\n        public SqlGeography Geography1 { get; set; }\r\n        public SqlGeography Geography2 { get; set; }\r\n    }\r\n\r\n    public class TestDbContext : DbContext\r\n    {\r\n        public DbSet<Foo> Foos { get; set; }\r\n        public DbSet<Bar> Bars { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder\r\n                .EnableSensitiveDataLogging()\r\n                .UseSqlServer(\r\n                    @\"Server=(localdb)\\mssqllocaldb;Database=TestTypeEF;ConnectRetryCount=0\");\r\n        }\r\n    }\r\n\r\n    private static readonly SqlHierarchyId[] SqlHierarchyIds =\r\n    {\r\n        SqlHierarchyId.Parse(\"/1/1/3/\"),\r\n        SqlHierarchyId.Parse(\"/1/2/3/\"),\r\n        SqlHierarchyId.Parse(\"/2/1/3/\")\r\n    };\r\n\r\n    private static readonly SqlGeometry[] SqlGeometries =\r\n    {\r\n        SqlGeometry.Point(1, 2, 32768),\r\n        SqlGeometry.Point(10, 12, 32768),\r\n        SqlGeometry.Point(20, 22, 32768)\r\n    };\r\n\r\n    private static readonly SqlGeography[] SqlGeographies =\r\n    {\r\n        SqlGeography.Point(77, 88, 4326),\r\n        SqlGeography.Point(7, 8, 4326),\r\n        SqlGeography.Point(45, 21, 4326)\r\n    };\r\n}\r\n\r\npublic class MyLoggerProvider : ILoggerProvider\r\n{\r\n    public ILogger CreateLogger(string categoryName) => new MyLogger();\r\n\r\n    public void Dispose()\r\n    {\r\n    }\r\n\r\n    private class MyLogger : ILogger\r\n    {\r\n        public bool IsEnabled(LogLevel logLevel) => true;\r\n\r\n        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception,\r\n            Func<TState, Exception, string> formatter) \r\n            => Console.WriteLine(formatter(state, exception));\r\n\r\n        public IDisposable BeginScope<TState>(TState state) => null;\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10058", "title": "Add-Migration return Path not found after update to 15.04", "body": "From VS Feedback:\r\n\r\nUnable to resolve startup project ''.\r\nRemove-Migration : Cannot bind argument to parameter 'Path' because it is null.\r\nAt line:1 char:1\r\n+ Add-Migration\r\n    + CategoryInfo          : InvalidData: (:) [Add-Migration], ParameterBindingValidationException\r\n    + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Add-Migration ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10048", "title": "Consider switching SQL Server to use TypedRelationalValueBufferFactoryFactory", "body": "This could lead us down the path of obsoleting and then removing UntypedRelationalValueBufferFactoryFactory.\r\n\r\nWe should test perf impact before making a decision.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10044", "title": "PMC Tools: Exception calling \"AddFromFile\"", "body": "From VS Feedback:\r\n\r\nI just upgraded my solution to .net core 2.0 and also find Entity Framework migrations to be working very inconsistently in the package manager.\r\n\r\nI tend to get the following error on \"add-migrations\"\r\n\r\n\"add-migration : Exception calling \"AddFromFile\" with \"1\" argument(s): \"'basePath' cannot be an empty string (\"\") or start with the null character.\" ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10006", "title": "Handle conflicting type mapping/conversions", "body": "For queries where multiple properties are used in an aggregate, binary expression, etc such that we don't really know what the type/conversion should be for the result. Currently we use the default mapping and conversion for the CLR type in this case.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9965", "title": "Allow parts of model to be parameterized--e.g. schema", "body": "A common mutli-tenant scenario involves using model that only differs by schema. Currently this requires a different model for each tenant. If the model could be parameterized somehow so that the schema used is different depending on the context/connection/tenantid/etc, then this could allow the same model to be used for multiple tenants, which would also mean that needing to change the model cache key would not be needed. We should also consider how this interacts with reverse engineering and migrations. See #9864 for a particular case where this could be useful. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9965/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9913", "title": "Change \"Relational:TypeMapping\" annotation name", "body": "It was a relational annotation, but it is now a core annotation.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9911", "title": "Fix R#/VS settings so they don't conflict", "body": "In particular, the indentation settings should not conflict: see https://github.com/aspnet/EntityFrameworkCore/pull/9903#issuecomment-332504242\r\n\r\nAlso, consider that we have multiple solutions now. All solutions should use the same settings, even if this means duplicating the settings files.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9899", "title": "Entity Framework core fails to generate correct SQL", "body": "Reported via VS:\r\n \r\nFor an asp.net core project, Im using EF to run a complex query that involves an outer join (one where members are joined with a \"friends\" relationship table to ignore blocked members). \r\n\r\nThe EF expression generates correct SQL if I use a single Where clause, but if I add 2 where clauses, the EF compile fails. I get \"m.ID could nbot be bound\" exception. This is because the SQL doesn't seem to generate as a single query.\r\n\r\nNote for triage: @ajcvickers has some additional code not posted here.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9744", "title": "Add query coverage for shadow properties", "body": "Since [the Northwind hack](7489) has gone away...", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9716", "title": "PMC Tools: Build only the active project, not the whole solution", "body": "We tried to do this before, but ran into issues. Hopefully the project system has matured such that it is now possible. See #9515 for more discussion.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9714", "title": "Review ASP.NET Core templates", "body": "We should review:\r\n* Code (including anything that impacts EF tooling)\r\n* Initial generated migration\r\n* Consistency/experience across different platforms\r\n  * See https://github.com/aspnet/templating/issues/4. For consistency, having the same experience regardless of platform would be better. For simplicity of the SQLite experience, having the database file in the template might be better.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9632", "title": "Consider allowing reverse engineering to generate CLR property defaults based on column defaults", "body": "See #9617. For example, if a column State has a default of \"WA\", then the entity type would be generated as:\r\n```C#\r\npublic partial class Customer\r\n{\r\n    public string State { get; set; } = \"WA\";\r\n}\r\n```\r\nConsider also parsing common SQL defaults, like getdate(), and generating a CLR equivalent.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9632/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9630", "title": "Support inheritance for owned types mapped inline", "body": "For example, this from #9536:\r\n\r\n```C#\r\npublic class Friend\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; }\r\n\r\n    public FullAddress Address { get; set; }\r\n}\r\n\r\npublic class LessThanFriend\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; }\r\n\r\n    public CityAddress Address { get; set; }\r\n}\r\n\r\npublic class CityAddress\r\n{\r\n    public string Cap { get; set; }\r\n    public string City { get; set; }\r\n}\r\n\r\npublic class FullAddress : CityAddress\r\n{\r\n    public string Street { get; set; }\r\n}\r\n\r\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\r\n{\r\n    modelBuilder.Entity<Friend>().OwnsOne(e => e.Address);\r\n    modelBuilder.Entity<LessThanFriend>().OwnsOne(e => e.Address);\r\n}\r\n```\r\nThis is ambiguous as to whether LessThanFriend.CityAddress should be mapped to allow inheritance such that either a CityAddress or a FullAddress could be persisted. Typically, we only map inheritance when both types are in the model. However, having both types in the model as Owned types on different entities perhaps does not have the same semantics--especially when thinking of them like complex types.\r\n\r\nBased on triage discussion from #9536, we think we want to support both the simple mapping (just persisting given concrete type, which is what the request on #9536 is for) and the inheritance mapping, which would require, for TPH, and additional discriminator column in the table. We did not come to a final decision on which should be the default, or what the new API will look like to switch between the two.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9630/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9627", "title": "Re-consider how default values are reverse engineered", "body": "Feedback on 2.0 (e.g. #9507 #9617) has made me think about what the real intent is behind having columns with default values. Specifically, I think it is likely wrong to assume that the EF model should have a store-generated property just because there is some default on the column. It may well be the cause the the application will always supply a value and so, when using EF, the default is never used. The default may instead be there because:\r\n* It was needed when adding a new column (either by Migrations or manually)\r\n* It is there for legacy reasons--old/non-EF app made use of it in hand-crafted SQL, but EF never will\r\n* It's just part of the way all columns are created by the DBA or similar--the column gets a default regardless of whether it is needed or not\r\n\r\nGoing beyond the most general case, if the CLR default would generate the same value as the database default, then having EF do store generation is a no-op anyway. If an app was relying on this for bools in 1.1, and we now generate nullable bools, everything will still work, but the app needs to be updated to use nullable bools.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9627/reactions", "total_count": 6, "+1": 5, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9585", "title": "Implement useful mappings in EF.Functions", "body": "@divega Creating this as a placeholder as discussed in triage. We should figure out what more information to add and how to encourage people to contribute these.\r\n\r\n(Updated by @divega) \r\n\r\nEF Core 2.0 includes `EF.Functions` as an entry point for adding support for invoking database functions in LINQ queries. Here are a few details about how this works: \r\n\r\n1. Someone adding support for a new function would define an extension method for `DbFunctions` that represents the database function, and then create and register a translator for it. See the `Like()` method in [DbFunctionsExtensions](https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore/DbFunctionsExtensions.cs) and   [LikeTranslator](https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore.Relational/Query/ExpressionTranslators/Internal/LikeTranslator.cs) as an example.\r\n\r\n2. The extension method should preferably be declared in the Microsoft.EntityFramework namespace, so that application developers don't need to include any additional namespaces.\r\n\r\n3. The location of the method (e.g. the sponsor class) will depend on the applicability of the method, e.g. \r\n   1. If it is general, contribute it to the same `DbFunctionsExtenions` class where `Like()` is declared. \r\n   2. If it is specific to relational, we can discuss creating a relational-specific sponsor class. \r\n   3. If it is specific to provider it should go in a sponsor class in the provider.  \r\n  \r\n4. Preferably extension methods should contain an in-memory implementation, in case they need to be invoked during client-side evaluation (if an adequate in-memory implementation is too complex we can discuss adding an implementation that throws).\r\n\r\n5. If well-known patterns exist which involve invoking methods or properties on types of the .NET base class library that have the same semantics of database functions, adding support for translating these should have precedence over adding an extension method to `EF.Functions`, i.e. they idea is not to create an interminable list of extension methods that represent all the built-in functions on a specific database, but to add a few methods that represent functionality that would not otherwise be available. Things like `DATEDIFF()` (see https://github.com/aspnet/EntityFrameworkCore/issues/9549) or `DATEADD()` may be an exception if supporting translation for equivalent cases based on `DateTime`/`TimeSpan` arithmetic becomes too complex.\r\n\r\n6. A few places to look for inspiration: \r\n   1. EF6's `DbFunctions` and `SqlFunctions`\r\n   2. LINQ to SQL's `SqlMethods`\r\n\r\nOpen issues:\r\n\r\n1. What to do with nullable value types? Makes sense to have multiple overloads?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/972b71ffaf73a73c14e455b18801b7391f27467f", "message": "Lazy-loading proxies package\n\nPart of #10509, #3797.\n\nThis change adds a new package--Microsoft.EntityFrameworkCore.Proxies--that contains a lazy-loading proxy implementation making use of the EF lazy-loading infrastructure and the Castle.Core proxies package. Current plan is for this to ship on NuGet as an optional package for use with EF.\n\nTo use in a normal application, just add a call to `UseLazyLoadingProxies()` on the DbContext options builder.\n\nThere are also `context.CreateProxy()` methods for creating stand-alone proxy instances if needed.\n\nEntity types must be public and navigation properties must be virtual. Also, the entity type and constructor must be \"visible\" to the castle proxies assembly, which usually means public, but could mean internal if \"InternalsVisibleTo\" is used. Exceptions are thrown if these requirements are not met--you don't just not get a proxy like in EF6.\n\nNote that this is an optional package for EF that we chose to create because the infrastructure in place made it easy to do so. It does not preclude a Roslyn-based rewriting solution in the future."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/641b571868614821eda8740887044164e0d22822", "message": "Allow mapping sql_variant on SQL Server\n\nIssue #7043\n\nThe type mapper will now map properties to sql_variant columns if:\n* The property is type object\n* The store type name is specified as sql_variant\n\nAlso #10633 - set min batch size to 1 for type mapping tests so that batching and non-batching are tested."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c5debcee4e2c9a7c89b15e8b2f4119f0a066003b", "message": "Try again on bad merge"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/677dc7a6e5d481e73e587e3cc458f436e27e82b1", "message": "Fix merge issue"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/cfc7b45f3af77d3cd4f0d66ed82727ded3d0659d", "message": "Change to handling value conversion annotations in code generation and more tests\n\nIssue #10638\n\nChange to serialize an actual, but non-functional, ValueConverter so that the type mapper works the same on the snapshot model as it does on the original model."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ee0e850b259f22cd40201679e24b2bfdcd67b5a5", "message": "Handle value conversion annotations in code generation.\n\nIssue #10638\n\nAlso adds tests so that new annotations without any handling are detected.\n\nFor value conversions, only the store type is serialized since it is not possible to serialize an arbitrary ValueConveter. This is an area that will need more testing."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7ee6e3c1279b01881593701b1bcb51d04da2ff75", "message": "Allow RelationalTypeMapper to run in a legacy mode for 2.0 providers\n\nThe internals of RelationalTypeMapper have changed significantly to support type conversions. While this was done in a way that should not break 2.0 providers, it turns out that some 2.0 providers take an interesting approach involving throwing exceptions on methods that were not previously called but now can be. To workaround this, if the provider has not been updated--detected by still calling the obsolete constructor--then the RelationalTypeMapper falls back to working in a similar way to how it did before, which should be much less likely to cause issues. This means type conversions is a feature that needs a new provider, but in general that was already the case.\n\nSee also #10654"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a013066c063bd4939c5bdfa5a4494fda14c05e0d", "message": "Fix some compat issues running 2.1 EF with 2.0 provider\n\nAddresses #10545 plus some more newer breaks\n\n* Added a workaround for IUpdateSqlGenerator scope change to singleton\n* Added back internal method on IEntityMaterializerSource that in-memory provider is calling directly and renamed classes to avoid future confusion (I have some other changes coming to help mitigate this in the future.)\n* Made constructor injection of services behave better if context is not injected (only a problem for in-memory, due to above internal call issue)\n* Disabled some tests that can only work with a provider that supports type conversions"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/47d066d66156b7a5629634f84618abc93615565b", "message": "Initial implementation of lazy-loading and entities with constructors\n\nParts of issues #3342, #240, #10509, #3797\n\nThe main things here are:\n- Support for injecting values into parameterized entity constructors\n  - Property values are injected if the parameter type and name matches\n  - The current DbContext as DbContext or a derived DbContext type\n  - A service from the internal or external service provider\n  - A delegate to a method of a service\n  - The IEntityType for the entity\n- Use of the above to inject lazy loading capabilities into entities\n\nFor lazy loading, either the ILazyLoader service can be injected directly, or a delegate can be injected if the entity class cannot take a dependency on the EF assembly--see the examples below.\n\nCurrently all constructor injection is done by convention.\n\nRemaining work includes:\n- API/attributes to configure the constructor binding\n- Allow factory to be used instead of using the constructor directly. (Functional already, but no API or convention to configure it.)\n- Allow property injection for services\n- Configuration of which entities/properties should be lazy loaded and which should not\n\n### Examples\n\nIn this example EF will use the private constructor passing in values from the database when creating entity instances. (Note that it is assumed that _blogId has been configured as the key.)\n\n```C#\npublic class Blog\n{\n    private int _blogId;\n\n    // This constructor used by EF Core\n    private Blog(\n        int blogId,\n        string title,\n        int? monthlyRevenue)\n    {\n        _blogId = blogId;\n        Title = title;\n        MonthlyRevenue = monthlyRevenue;\n    }\n\n    public Blog(\n        string title,\n        int? monthlyRevenue = null)\n        : this(0, title, monthlyRevenue)\n    {\n    }\n\n    public string Title { get; }\n    public int? MonthlyRevenue { get; set; }\n}\n```\n\nIn this example, EF will inject the ILazyLoader instance, which is then used to enable lazy-loading on navigation properties. Note that the navigation properties must have backing fields and all access by EF will go through the backing fields to prevent EF triggering lazy loading itself.\n\n```C#\npublic class LazyBlog\n{\n    private readonly ILazyLoader _loader;\n    private ICollection<LazyPost> _lazyPosts = new List<LazyPost>();\n\n    public LazyBlog()\n    {\n    }\n\n    private LazyBlog(ILazyLoader loader)\n    {\n        _loader = loader;\n    }\n\n    public int Id { get; set; }\n\n    public ICollection<LazyPost> LazyPosts\n        => _loader.Load(this, ref _lazyPosts);\n}\n\npublic class LazyPost\n{\n    private readonly ILazyLoader _loader;\n    private LazyBlog _lazyBlog;\n\n    public LazyPost()\n    {\n    }\n\n    private LazyPost(ILazyLoader loader)\n    {\n        _loader = loader;\n    }\n\n    public int Id { get; set; }\n\n    public LazyBlog LazyBlog\n    {\n        get => _loader.Load(this, ref _lazyBlog);\n        set => _lazyBlog = value;\n    }\n}\n```\n\nThis example is the same as the last example, except EF is matching the delegate type and parameter name and injecting a delegate for the ILazyLoader.Load method so that the entity class does not need to reference the EF assembly. A small extension method can be included in the entity assembly to make it a bit easier to use the delegate.\n\n```C#\npublic class LazyPocoBlog\n{\n    private readonly Action<object, string> _loader;\n    private ICollection<LazyPocoPost> _lazyPocoPosts = new List<LazyPocoPost>();\n\n    public LazyPocoBlog()\n    {\n    }\n\n    private LazyPocoBlog(Action<object, string> lazyLoader)\n    {\n        _loader = lazyLoader;\n    }\n\n    public int Id { get; set; }\n\n    public ICollection<LazyPocoPost> LazyPocoPosts\n        => _loader.Load(this, ref _lazyPocoPosts);\n}\n\npublic class LazyPocoPost\n{\n    private readonly Action<object, string> _loader;\n    private LazyPocoBlog _lazyPocoBlog;\n\n    public LazyPocoPost()\n    {\n    }\n\n    private LazyPocoPost(Action<object, string> lazyLoader)\n    {\n        _loader = lazyLoader;\n    }\n\n    public int Id { get; set; }\n\n    public LazyPocoBlog LazyPocoBlog\n    {\n        get => _loader.Load(this, ref _lazyPocoBlog);\n        set => _lazyPocoBlog = value;\n    }\n}\n\npublic static class TestPocoLoadingExtensions\n{\n    public static TRelated Load<TRelated>(\n        this Action<object, string> loader,\n        object entity,\n        ref TRelated navigationField,\n        [CallerMemberName] string navigationName = null)\n        where TRelated : class\n    {\n        loader?.Invoke(entity, navigationName);\n\n        return navigationField;\n    }\n}\n```"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/d4bc77cd4be34ef6482cd48334c5bdd166306cc5", "message": "Add API and tests for value converters\n\nPart of issue #242\n\nAs always, fluent API names subject to change in API review.\n\nThis PR also makes a change to never pass nulls to value converters. This makes it significantly easier to write custom converters that compose well with built-in converters and can be used for both PKs and FKs where the nullability is different."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/5c46824f16cdc3074b989cc794d214ed74691d19", "message": "Adds common value conversions and mechanisms for type mapping to pick one\n\nPart of #242\n\nThis change means that providers do not need to add mappings involving conversions. Instead providers will only add mappings for specific types that they handle \"natively\" and if the mapping request for a different type is made, then the type mapper will find a conversion to a type that is supported and automatically use it.\n\nA converter is also automatically found if the model type and the store type specified in the model do not match.\n\nUltimately, any \"common\" type can always be converted to string or bytes, so as long as a provider can map at least one of these, then any common type can always be mapped. There are two tests for this that create type mappers for SQL Server that support only strings or only bytes. The database is then created and the tests are run against only nvarchar or only varbinary columns, even though the model contains all common types."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/8b74b43299cd38618f7f272cc2a1f96e3a3ce5fb", "message": "Test for pattern suggested by @greggbjensen in #7533\n\nUse both a public constructor for the typed options and a protected constructor for the un-typed options on a DbContext type that is intended to be both instantiated and inherited from in the same service provider."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e573acf3f4f03491ce11d43f4023ab47137a0fbf", "message": "Update RelationalAnnotationsBuilder.cs (#10495)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/472c8b7362287cf76fcc2a3e10e6bd1ba1ad49ae", "message": "Add a test helper for creating default service instances\n\nFor some types that have a lot of unit tests there is a lot of code just to call the default constructors for a service, its dependency objects, and its dependencies. This change adds a simple helper that uses the D.I. system to create factories for this code. This greatly reduces the amount of test code that needs to change when a new dependency is added. This change uses the factory for type mappers. Use for other types can be added as needed."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/aa384bbed005c9226edcab6a66b030f4edd6f780", "message": "Small refactoring to RelationalTypeMapper to handle more metadata\n\nAs I have worked on value conversions I have run into the issue that the IProperty is no longer the only input to the type mapping process, since, for example, a value converter may also need to be applied. In the future, things like order preservation are likely to be the same. Therefore, this refactoring introduces parameter object and creates new overloads that using it, while preserving the behavior of existing code that is overriding the old methods."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c0f24418bcadfdcf9e100b6617a087098e9ef561", "message": "Fix bad merge."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/212dc4a25f792be1f6db16e46083402e122893fc", "message": "Merge branch 'rel/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/88551da89e6d26927dc8a80a50f2fd07157a7e22", "message": "By defensive with command and reader access due to issues with MySQL provider\n\nIssue #10147\n\n* MySQL provider sometimes has null Parameters collection\n* MySQL provider sometimes throws when asking for records affected\n\nFix is to be defensive in our code and we will file issues on MySQL provider"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/26624f9f70f7c044da776bfc73a69b0d119c1d3f", "message": "Allow mapping to SqlGeography, SqlGeometry, and HierarchyId columns on .NET Framework\n\nPart of issue #1100\n\nThis change allows properties of type SqlGeography, SqlGeometry, and HierarchyId to be included in entity classes and mapped by convention to corresponding database columns.\n\nWARNING: This is by no-means full spatial support for EF Core. These are the important limitations:\n* It only works when running on .NET Framework. It will not work on .NET Core, since SqlClient for .NET Core does not support these types.\n* Query support is limited:\n  * LINQ queries that don't use the semantics of the SQL types should work.\n  * Queries that need to use the type semantics (e.g. using STDistance) can be done with FromSql queries, but not LINQ\n  * See issue #10108 for some test code and issue #10109 for some ideas to make LINQ work better\n* The SQL Server spatial types do not provide a good client-side programming experience. A proper .NET spatial library is needed for a good, cross-platform experience.\n\nNote that this change also allows more general mapping of types not directly referenced from the provider, and more specifically UDTs on SQL Server."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c8df10e60450890b3b4eb269024c8a7cd266adf3", "message": "Use value converters for enums and allow enums to map to string columns\n\nPart of issues #242 and #1381\n\nInstead of using special code for materialization and parameter creation, type mappings now add an appropriate type converter for enum types that converts two and from the underlying numeric value. (Special code is still present for providers that are not updated and do not create mappings with converters.)\n\nThis means that if the column is instead a string column, then a different converter can be used which converts to and from the string values of the enum. SQL Server and most other providers will get this for free when updating to 2.0 and adding support for value conversions. SQLite is the exception since it has weird type mapping."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/36e12e89d57d76f697759dc0800e5e98f1323e58", "message": "Update SQL Server type mappings\n\nPart of #242 and #6480\n\nThese are the default conversions:\n\n* sbyte -> smallint\n* ushort -> int\n* uint -> bigint\n* ulong -> decimal(20, 0)\n* char -> nchar(1)\n\nThese can be used by changing the store type:\n\n* sbyte -> byte (not order preserving)\n* ushort -> short (not order preserving)\n* uint -> int (not order preserving)\n* ulong -> long (not order preserving)\n* char -> other string types of any size: char, nchar, varchar, nvarchar, text\n* char -> int\n\nAlso cleaned up the SQL Server type mapping tests to make them easier to understand."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/5b3027aa26ca46c12b9886801a1dcba5389b74ad", "message": "Add non-hacked Oracle type mappings for bool, DateTimeOffset, and Guid\n\nParts of issues #9711 and #242\n\nGuid and bool required just type conversions (and some fixes in the product code).\n\nDateTimeOffset cannot be read from the store without using an Oracle-specific call on the DbDataReader service. To enable this there is now an IDataReaderMethodProvider service. This can then be used with a type conversion to get the correct behavior.\n\nThere are still some hacks remaining for other areas--specifically, the cursor parameter hack and some SQL manipulation."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/50f6a2164639b123245e88d692ca036f77a5dc05", "message": "Compile value converter expressions directly into ValueBuffer factory\n\nThis moves converting a store value to happen immediately after the value is read from the data reader. This means that it only needs to happen in one place, which will make it cleaner when implementing more complex conversions; such as those needed for Oracle.\n\nValue converters are now registered as expressions, and the expression is compiled directly into the materializer code with no lambda or method invocation, which should be optimal for perf."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/0dfb8cb9ff1fee0464bbb9e464a70fbfe0b08c67", "message": "Infrastructure changes to allow materializer factory factories to use more information\n\nThis is a prerequisite to moving type conversions to before the value is put in the buffer rather than when it is read from the buffer. Investigation of supporting more constructor patterns and context injection showed they would likely need these changes too.\n\nAlso, ran the SQL Server tests with the typed factory and fixed several issues. This included making exceptions more consistent between typed and untyped factory, and using the property in more places to provide additional info."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/34ef62aba18a46020d70761ab8bf8a417019bfcc", "message": "Add value converter constructors to all type mappings\n\nPart of issue #242"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/5d67be063b19693ec7e6b2470e24c11d15a39c50", "message": "Update Oracle sample for type mapping changes\n\nIssue #242\n\nNote that this PR doesn't fix all the issues with Oracle type mapping; it just gets the tests passing with the types changed to unsigned."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/8c4e619bedbf4d56584552b7e198851999d76823", "message": "Allow build to pass on Oracle sample\n\nIssue #10016"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/eb59076a8ca2e38959b9f99cc2f343c3c7c52bfb", "message": "Fix build break"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/80add73cff2e4d6c8bbcf1dc016c02241f2790fa", "message": "Update type conversion work for GroupBy compat"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/935b7be6fab5e8dfceed4dea84f895f723b8f884", "message": "Add generic type conversion\n\nPart of #242\n\nThis allows conversions to be defined using generics, which means they can be used without additional boxing. However, in our code we often have to deal with things like nullable FKs, null values, non-exact matches (e.g. using a short when the property is an int) and it would not be a great experience to have to define multiple conversion functions to handle all of this. Therefore, we add additional code around the simple generic function to handle these cases. In the materializer, for the common case where the type of the converter matches the type of the property, the non-boxing generic converter is used. In other cases, the compensated converter is used."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9f687a20a5451b3143621760375e41ead330a537", "message": "Use initial type conversions to map unsigned types on SQL Server\n\nPart of #242\n\nThis is not a complete implementation of type conversions. It is enough to get conversions for ulong, uint, ushort, and sbyte mapped on SQL Server. The default mappings for these types are to their signed counterparts. We can discuss if we want to change that to something else--there are pros and cons of every conversion."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/34ffc2bc4b1874e0da9d7a970d838a692d8f68f7", "message": "Only use the store type name for finding a type mapping if it has been explicitly set\n\nIssue #9916"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/cbe654f07493ab988bb97b47d80b994830ee25eb", "message": "Move parts of type mapping to Core to facilitate type conversions\n\nIssue #242\n\nAlso, start depending on runtime always having a type mapping associated with the property. This involves building the history model with conventions and updating tests that build the model manually."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7ad4b8b092d6b1b46f6268e7245d8472e27e55f1", "message": "Fix connection leak in SQLite migrations tests."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ef95d9f0439a4ebb69dc9d7bccc81ad7ace3afb6", "message": "Recover connection state counting after external close\n\nIssue #9524\n\nThe issue here was the reference count was not kept correctly if the connection was closed externally when it was not expected to be. The fix is to keep the count correct in this case."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3d67339561a93b13996f466e98bd922f17cf401b", "message": "Move change tracking flag setting to ModelBuiltConvention\n\nIssue #9509"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35959429", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35959429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36148170", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36148170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36095558", "body": "One of the main jobs of the change tracker, at least how it is currently used, is to find an entity just from its key--for example, when doing identity resolution. What is the plan for this? Would it be to create a temporary entity instance with just the key values set? If so, this is something we will likely have to build into the materializer so that these temp objects can be constructed and thrown away quickly, and hopefully there will not be any side effects from creating partially materialized instances of application entities in this way. Or is there a different way of doing this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36095558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36148412", "body": "We talked about my question in the team room and decided that we will try for creating temporary entity instances when doing key lookups. This depends on the Roslyn or other mechanism for performance, but that is likely true for other areas of the stack anyway.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36148412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36148552", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36148552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36169795", "body": "Thanks Murat and Andrew.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36169795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36396837", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36396837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36903878", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36903878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36542061", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36542061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36769048", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36769048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37489497", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37489497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37681951", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37681951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37705243", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37705243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37981169", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37981169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38091978", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38091978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38188743", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38188743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38327767", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38327767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38593347", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38593347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38705258", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38705258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38955622", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38955622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39034935", "body": ":ship::it::eyes:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39034935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39515549", "body": "I think that there are some things here that probably need to evolve as we move forward, but for now :ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39515549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39597058", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39597058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39597058", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39597058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44333842", "body": "See SequentialGuidEndToEndTest for example.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44333842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40980883", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40980883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42457838", "body": "Identity now works end-to-end.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42457838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42217999", "body": "We now support the following types:\n int\n string\n bool\n Guid\n DateTime\n byte\n double\n short\n long\n float\n byte[]\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42217999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/57226064", "body": "Closing since common facets as decided [here](https://github.com/aspnet/EntityFramework/wiki/Entity-Framework-Design-Meeting-Notes-June-5,-2014#fluent-api) are now done, and provider-specific APIs are being tracked in #587\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/57226064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41304207", "body": "Pushing a new PR with some additional tests/changes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41304207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41218050", "body": ":ship: the :cake:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41218050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/55289352", "body": "We now have the new relationship APIs which don't require explicit setting of FKs in most situations. We also simplified the nested closure pattern for the FK API.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/55289352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41448257", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41448257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42758148", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42758148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42759207", "body": "Updated this pull request to address Diego's comments and to react to SQLite provider check in.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42759207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42760412", "body": "This is triaged for alpha, but are we sure it should go into alpha now given that it is a breaking change from the current API and will break MusicStore and other apps that are using the database creation APIs?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42760412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42775434", "body": "@divega Yes. Currently we have three places where we do different kinds of SQL generation--Migrations for DDL, update pipeline for CUD, and query pipeline for query. We should consider consolidating these, or just consolidating some of the common functionality, but on the other hand the three types of generation are quite different in a lot of ways and so it may be good to keep them separate.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42775434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43108367", "body": "This is now checked in. Leaving the issue open since there has been some discussion on the behavior of HasTables. Right now it returns true if _any_ tables exist. There have been suggestions that it should check only for mapped tables and other suggestions that it should use __MigrationHistory. Will discuss in a design meeting when Rowan has returned.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43108367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43381354", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43381354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43389379", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43389379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42217858", "body": "Now fixed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42217858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42217739", "body": "We now support the following types:\nint\nstring\nbool\nGuid\nDateTime\nbyte\ndouble\nshort\nlong\nfloat\nbyte[]\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42217739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42084614", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42084614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/57660561", "body": "Make sure to re-enable assert that was failing once this is done.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/57660561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42357409", "body": "Checked in a workaround fix that allows null strings to be saved.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42357409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42242219", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42242219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/55289079", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/55289079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44332777", "body": "Moved to a new namespace as part of issue #257.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44332777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44333842", "body": "See SequentialGuidEndToEndTest for example.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44333842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44338478", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44338478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44349258", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44349258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44465281", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44465281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429778", "body": "Changed to _identityMap\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429779", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429783", "body": "Agreed. Hope to be getting to this soon.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429784", "body": "Will fix in next set of changes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5473318", "body": "Kind of, but not really. It's more a way that multiple context instances can make use of the same identity generators so that the context does not, for example, create a new sequence for each context instance.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5473318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5473340", "body": "I figured we would iterate on what the appropriate values are here and whether there should be multiple different settings.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5473340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500710", "body": "Could be an interface, but maybe \"safer\" to use a base class here. I think we should have a conversation with others and come up with a general approach for our API design here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500730", "body": "Will add an optional model back to the configuration which will be used if set, otherwise the loader/model source will be used.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500732", "body": "Source is better.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500756", "body": "DI is doing this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5501609", "body": "The approach here was to just do what we currently need for our tests. It's going to change when we really implement convention model building, so I would make additional changes like this only at that time.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5501609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/6668533", "body": "A few things about the NullEntityKey:\n- I don't believe it needs to know about its entity type\n- I think it should be a Singleton to avoid excessive allocation of key objects--null keys can be quite common.\n- I think that the key factories themselves should return the null key instead of returning nulls which are then converted to the null key. This means we should never have to reason about a key being null.\n- I don't think it should change the fact that we don't allow entities to have null primary keys. The semantics of null primary keys are very ambiguous, especially when the differences between database null semantics and C# null semantics are considered.\n\n(These are basically all the reasons I didn't implement a sentinel here in the first place, but instead decided to wait and see if it would really add value. I think it does add value, but I'm not sure it's worth the cost.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/6668533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10945611", "body": "@roji Each EF provider can choose whether to use GetValues or multiple calls to GetFieldValue<T> by configuring a different factory. Currently SQL Server is using the GetValues mechanism, while SQLite is using GetFieldValue<T>--see the differences in SqlServerEntityServicesBuilderExtensions and SqliteEntityServicesBuilderExtensions. The GetFieldValue<T> version is the most likely to work correctly so certainly you should use this for Npgsql. Using GetValues was at one point faster when using SQL Server, although lots of things have changed and so this may not be the case anymore. Also currently GetFieldValue<T> doesn't work for SQL Server on Mono.\n\nPrevious to this change it was not possible to use the GetFieldValue<T> mechanism. The original IValueReader implementation worked sometimes, but it could cause query to fail because it didn't buffer results. This change is specifically allow GetFieldValue<T> to be used in a way that is compatible with query, which is required for SQLite and it sounds like also for Npgsql.\n\nWith regard to boxing/upboxing. EF currently always creates an object array buffer, and hence always boxes the read value. This may mean that when using GetFieldValue<T> a value is unboxed in the data reader and then boxed again by EF, and hence GetFieldValue<T> may result in more boxing that GetValues--it all depends on how the data reader is implemented. However, we have a bug to potentially change the query buffering such that EF would not box the value coming back from GetFieldValue<T>.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10945611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10950811", "body": "@roji It's great that Npgsql does that, and if we implement #2079, then EF will also not box for most properties. My point was that for some ADO.NET providers the object is boxed already, in which case there may be an unboxing followed by a boxing. But it entirely depends on the ADO.NET provider implementation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10950811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10992989", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10992989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13404547", "body": "@smitpatel Switch the code back temporarily in your local copy while we wait for a coherence build to pass.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13404547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19193370", "body": "@azabluda Filed #6616\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19193370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22957986", "body": "@Eilon @divega Is this really the right project URL for EF?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22957986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22958033", "body": "Also, I didn't see any PR for this. Did I just miss it? Was this discussed somewhere else that I missed?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22958033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137099134", "body": ">OracleEntityTypeBuilderExtensions [](start = 24, length = 33)\r\n\r\nRemove?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137099134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137099419", "body": ">ForOracleUseIdentityColumns [](start = 35, length = 27)\r\n\r\nIs \"Identity Columns\" the appropriate term for Oracle?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137099419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137099700", "body": ">ForOracleUseSequenceHiLo [](start = 38, length = 24)\r\n\r\nShould we file an issue to move this functionality into Relational (or some other place) so it can be re-used across providers?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137099700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137099836", "body": ">AddEntityFrameworkOracle [](start = 41, length = 24)\r\n\r\nConsider AddEntityFrameworkOracleSample? /cc @dievga", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137099836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137100046", "body": "Remove?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137100046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137100421", "body": "Remove?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137100421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137098266", "body": ">IsMemoryOptimizedError [](start = 21, length = 22)\r\n\r\nIs this left over from the SQL Server code? Should it be removed?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137098266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157296078", "body": "Thanks @smitpatel. Let's talk with @anpete on it after the holidays.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157296078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gregveres": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10673", "title": "EF on in-memory data crashes on Left Outer Join", "body": "I have a query that looks like this:\r\n\r\n```C#\r\nfrom user in db.UserTable\r\nfrom purchase in db.PurchaseTable.Where(p => p.UserId == user.Id).DefaultIfEmpty()\r\nWhere user.Id == 1\r\nselect new {\r\n    user = user.Id,\r\n    purchase = (int?)purchase.Id\r\n}.ToListAsync()\r\n\r\n```\r\nyou can define UserTable and PurchaseTable with just public int Id {get; set;}. \r\n\r\nWhen this is executed against the database, it creates a fairly efficient query and it executes without exception because purchase will be Null where the user does not have any purchases and in that case, the purchase value of the returned entry will be null. Fantastic. It works and the SQL is straight forward.\r\n\r\nBut if I then execute this against in-memory data, I get a crash when the in-memory provider is constructing the return value. Even though I can't see the source code in my debugger, I have been able to deduce that it is crashing on accessing Id of purchase because if I only pass in data where every user has a purchase, or if I comment out the purchase = (int?)purchase.Id line, then it works without the crash. \r\n\r\nI am seeing a NullRefereneException. The stack trace is:\r\n\r\n\r\n```\r\nesult StackTrace:\t\r\nat lambda_method(Closure , <>f__AnonymousType150`2 )\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at EntityFramework.Testing.InMemoryDbAsyncEnumerator`1.<MoveNextAsync>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Data.Entity.Infrastructure.IDbAsyncEnumerableExtensions.<ForEachAsync>d__5`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at SquashSpider.Models.CourtBooking.CourtBookingPackageGroup.<FetchMinutesAvailableForUsers>d__26.MoveNext() in C:\\Users\\gregv\\Source\\Repos\\SquashSpider\\SquashSpider\\SquashSpider\\Models\\CourtBooking\\CourtBookingPackage.cs:line 98\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at SquashSpider.Tests.Models.CourtBooking.CourtBookingPackageTests.<FetchMinutesAvailableForUsers_Should_return_one_entry_for_player1_When_player1_has_one_purchase_of_30_minutes_with_no_usages>d__11.MoveNext() in C:\\Users\\gregv\\Source\\Repos\\SquashSpider\\SquashSpider\\SquashSpider.Tests\\Models\\CourtBooking\\CourtBookingPackageTests.cs:line 103\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nResult Message:\t\r\nTest method SquashSpider.Tests.Models.CourtBooking.CourtBookingPackageTests.FetchMinutesAvailableForUsers_Should_return_one_entry_for_player1_When_player1_has_one_purchase_of_30_minutes_with_no_usages threw exception: \r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n```\r\n\r\n### Steps to reproduce\r\nI will work on putting together a full listing. \r\n```c#\r\n\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 6.1.3\r\nDatabase Provider: EntityFramework.SqlServer v6.1.3 (I am not sure which package provides the in-memory provider)\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.4\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nphmuller": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10660", "title": "Migrations: Allow access to IServiceProvider", "body": "Currently (as of version 2.0) when a migration is created with a non-empty constructor the following exception is thrown during migration:\r\n```\r\nSystem.MissingMethodException: No parameterless constructor defined for this object.\r\n````\r\n\r\nSince ConfigureServices is already called during migrations and the ServiceProvider is used to resolve the DbContext it would be really nice if the same ServiceProvider could be used to resolve the constructor of migrations.\r\n\r\nThis would make it possible to inject other services and run them during the migration.\r\n\r\n#### My use-case:\r\n\r\nWe use ElasticSearch as a search index on top of some of our ef model types. When the model scheme is changed, the search index scheme also has to be updated and sometimes data has to be reindexed.\r\n\r\nPreviously we simply used to Migration Id to check if the search index is at the same scheme as the database. If the search index migration id was not the same as the one in the database we simply recreated the index and reindexed all the data.\r\n\r\nRecently our data grow to a size that this is no longer feasonable. It would take way too long. So we only want to update the search index during migrations that would affect the parts of the scheme that are indexed.\r\n\r\nSo what I wanted to do is call the (for example) reindex method from an ef migration, when the search index should be updated. For this I would need the inject the ElasticSearch client into the migration, which is not supported atm. Hence the feature request.\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10275", "title": "Support multiple HasQueryFilter calls", "body": "As of 2.0 multiple `HasQueryFilter()` calls on `EntityTypeBuilder` result in only the latest one being used. It would be nice if multiple query filters could be defined this way.\r\n\r\nExample:\r\n``` c#\r\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\r\n{\r\n    modelBuilder.Entity<MyEntity>()\r\n        .HasQueryFilter(e => e.IsDeleted == isDeleted)\r\n        .HasQueryFilter(e => e.TenantId == tenantId);\r\n}\r\n\r\n// In application code \r\nmyDbContext.Set<MyEntity>().ToList() // executed query only has the tenantId filter.\r\n```\r\n\r\nCurrent workaround is to define all filters in single expression, or rewrite the expression to concat multiple filters.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10257", "title": "Automatically perform required conversions when query filter is defined on interface or base type", "body": "Say I have the following interface that can be implemented on any entity that I want to support soft-deletion.\r\n\r\n``` c#\r\npublic interface ISoftDeletableEntity\r\n{\r\n    bool IsDeleted { get; set; }\r\n}\r\n```\r\n\r\nIt would be nice to be able to define a global query filter for any entity type that implements this interface like this:\r\n``` c#\r\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\r\n{\r\n    modelBuilder.Entity<ISoftDeletableEntity>().HasQueryFilter(e => e.IsDeleted == false);\r\n}\r\n```\r\n\r\nCurrently this throws the following exception: `System.ArgumentException: 'The entity type 'MyApp.ISoftDeletableEntity' provided for the argument 'clrType' must be a reference type.'`", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vslee": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10659", "title": "Creating a one to one relationship on a derived type doesn't work if the table name starts with a capital 'S'. ", "body": "Creating a one to one relationship on a derived type doesn't work if the table name starts with a capital 'S'. The index that is created for the foreign key is usually a conditional index with the filter: \"[RssImageRefId] IS NOT NULL\");. However, if the table name starts with a capital S, the filter does not get applied. It may be easier to understand by trying the simple program below. \r\n```\r\nSqlException: Cannot insert duplicate key row in object 'dbo.SBlogs' with unique index 'IX_SBlogs_RssImageRefId'. The duplicate key value is (<NULL>).\r\nThe statement has been terminated.\r\n```\r\n\r\n### Steps to reproduce\r\nUncommenting the commented line below fixes the problem. \r\n\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System;\r\n\r\nnamespace UniqueIndexTest\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tusing (var myContext = new MyContext())\r\n\t\t\t{\r\n\t\t\t\tvar rssBlog = new RssBlog();\r\n\t\t\t\tvar rssImage = new RssImage();\r\n\t\t\t\trssImage.RssBlogCurrent = rssBlog;\r\n\t\t\t\tmyContext.Add(rssBlog);\r\n\t\t\t\tmyContext.Add(rssImage);\r\n\t\t\t\tmyContext.SaveChanges();\r\n\t\t\t\tmyContext.Add(new Blog());\r\n\t\t\t\tmyContext.Add(new Blog());\r\n\t\t\t\tmyContext.SaveChanges();\r\n\t\t\t}\r\n\t\t\tConsole.ReadLine();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class MyContext : DbContext\r\n\t{\r\n\t\tpublic DbSet<RssImage> RssImages { get; set; }\r\n\t\t// the line below works if you change it to: \r\n\t\t//public DbSet<Blog> Blogs { get; set; }\r\n\t\tpublic DbSet<Blog> SBlogs { get; set; }\r\n\t\tpublic DbSet<RssBlog> RssBlogs { get; set; }\r\n\r\n\t\tprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n\t\t{\r\n\t\t\toptionsBuilder.UseSqlServer(@\"Data Source=\" + System.Environment.MachineName +\r\n\t\t\t\t\";Initial Catalog=uniqueIndexTest;\" + \"Integrated Security=True\" +\r\n\t\t\t\t\";Connect Timeout=15;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\");\r\n\t\t\toptionsBuilder.EnableSensitiveDataLogging();\r\n\t\t\toptionsBuilder.ConfigureWarnings(w => w.Log(\r\n\t\t\t\tMicrosoft.EntityFrameworkCore.Diagnostics.CoreEventId.SensitiveDataLoggingEnabledWarning));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class Blog\r\n\t{\r\n\t\tpublic int Id { get; set; }\r\n\t}\r\n\r\n\tpublic class RssBlog : Blog\r\n\t{\r\n\t\tpublic RssImage RssImageRef { get; set; }\r\n\t\tpublic int RssImageRefId { get; set; }\r\n\t}\r\n\r\n\tpublic class RssImage \r\n\t{\r\n\t\tpublic int Id { get; set; }\r\n\t\tpublic RssBlog RssBlogCurrent { get; set; }\r\n\t}\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer 2.0.1\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.5.2\r\n\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SSkovboiSS": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10656", "title": "Incorrect translation of date substraction.", "body": "```\r\nvar delays = await db\r\n    .Set<Job>()\r\n    .Select(j => (j.StartJob - j.CreateDate).TotalHours)\r\n    .ToListAsync();\r\n```\r\n\r\nGets translated into:\r\n```\r\nSELECT [j].[StartJob] - [j].[CreateDate]\r\nFROM [Job] AS [j]\r\nWHERE [j].[IsDeleted] = 0\r\n```\r\n\r\nWhich in turn throws:\r\n```\r\nSystem.Data.SqlClient.SqlException (0x80131904): Operand data type datetime2 is invalid for subtract operator.\r\n   at System.Data.SqlClient.SqlCommand.<>c.<ExecuteDbDataReaderAsync>b__108_0(Task`1 result)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.<ExecuteAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<BufferlessMoveNext>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.<ExecuteAsync>d__7`2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<MoveNext>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext()\r\nClientConnectionId:c7a3cc04-ddbf-4aab-9957-7477083c909f\r\nError Number:8117,State:1,Class:16\r\n```\r\n\r\nThis query should either be translated into DateDiff if possible or perform subtraction on client but definitely not throw.\r\n\r\n## Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SQLServer\r\nOperating system: Windows 10 1703\r\nIDE: Visual Studio 2017", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10404", "title": "DateTime.DayOfWeek translation", "body": "Currently there is no translation for DayOfWeek property of DateTime value, it evaluates on client.\r\nWhen using in complex queries it can cause a lot of client evaluation:\r\n\r\n```\r\n var requests = await db\r\n                     .Set<Request>()\r\n                     .Where(r => schedules\r\n                        .Any(s => s.DayOfWeek == (int)r.request.Job.StartJob.DayOfWeek\r\n                        && (r.timeStart != 0 && r.timeEnd != 0\r\n                            && r.timeEndUpperBound >= s.TimeStart\r\n                            && r.timeEndLowerBound <= s.TimeEnd\r\n                            && r.timeStartUpperBound >= s.TimeStart\r\n                            && r.timeEndLowerBound <= s.TimeEnd\r\n                        ||\r\n                            r.timeStart == 0\r\n                            && r.timeEndUpperBound >= s.TimeStart\r\n                            && r.timeEndLowerBound <= s.TimeEnd\r\n                        ||\r\n                            r.timeEnd == 0\r\n                            && r.timeStartUpperBound >= s.TimeStart\r\n                            && r.timeStartLowerBound <= s.TimeEnd)))\r\n                    .Select(r => r.request)\r\n                    .OrderBy(x => x.Job.StartJob)\r\n                    .MapToRequestInListDTO()\r\n                    .ToListAsync();\r\n```\r\n\r\n```\r\nThe LINQ expression '\"where (([s].DayOfWeek == ((Convert([x.Job].StartJob.DayOfWeek, Int32) + 6) % 7)) AndAlso ((((((((([r].HoursStart + ([r].MinutesStart / 60)) != 0) AndAlso (([r].HoursEnd + ([r].MinutesEnd / 60)) != 0)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) + __minutesShift_6) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) - __minutesShift_5) <= [s].TimeEnd)) AndAlso ((Convert(([r].HoursStart + ([r].MinutesStart / 60)), Decimal) + __minutesShift_4) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) - __minutesShift_5) <= [s].TimeEnd)) OrElse (((([r].HoursStart + ([r].MinutesStart / 60)) == 0) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) + __minutesShift_6) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) - __minutesShift_5) <= [s].TimeEnd))) OrElse (((([r].HoursEnd + ([r].MinutesEnd / 60)) == 0) AndAlso ((Convert(([r].HoursStart + ([r].MinutesStart / 60)), Decimal) + __minutesShift_4) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursStart + ([r].MinutesStart / 60)), Decimal) - __minutesShift_3) <= [s].TimeEnd))))\"' could not be translated and will be evaluated locally. (011792c6)\r\nThe LINQ expression '\"Any()\"' could not be translated and will be evaluated locally. (011792c6)\r\nThe LINQ expression '\"where {from Schedule s in __schedules_7 where (([s].DayOfWeek == ((Convert([x.Job].StartJob.DayOfWeek, Int32) + 6) % 7)) AndAlso ((((((((([r].HoursStart + ([r].MinutesStart / 60)) != 0) AndAlso (([r].HoursEnd + ([r].MinutesEnd / 60)) != 0)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) + __minutesShift_6) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) - __minutesShift_5) <= [s].TimeEnd)) AndAlso ((Convert(([r].HoursStart + ([r].MinutesStart / 60)), Decimal) + __minutesShift_4) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) - __minutesShift_5) <= [s].TimeEnd)) OrElse (((([r].HoursStart + ([r].MinutesStart / 60)) == 0) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) + __minutesShift_6) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) - __minutesShift_5) <= [s].TimeEnd))) OrElse (((([r].HoursEnd + ([r].MinutesEnd / 60)) == 0) AndAlso ((Convert(([r].HoursStart + ([r].MinutesStart / 60)), Decimal) + __minutesShift_4) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursStart + ([r].MinutesStart / 60)), Decimal) - __minutesShift_3) <= [s].TimeEnd)))) select [s] => Any()}\"' could not be translated and will be evaluated locally. (011792c6)\r\nThe LINQ expression '\"where (([s].DayOfWeek == ((Convert([x.Job].StartJob.DayOfWeek, Int32) + 6) % 7)) AndAlso ((((((((([r].HoursStart + ([r].MinutesStart / 60)) != 0) AndAlso (([r].HoursEnd + ([r].MinutesEnd / 60)) != 0)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) + __minutesShift_6) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) - __minutesShift_5) <= [s].TimeEnd)) AndAlso ((Convert(([r].HoursStart + ([r].MinutesStart / 60)), Decimal) + __minutesShift_4) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) - __minutesShift_5) <= [s].TimeEnd)) OrElse (((([r].HoursStart + ([r].MinutesStart / 60)) == 0) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) + __minutesShift_6) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursEnd + ([r].MinutesEnd / 60)), Decimal) - __minutesShift_5) <= [s].TimeEnd))) OrElse (((([r].HoursEnd + ([r].MinutesEnd / 60)) == 0) AndAlso ((Convert(([r].HoursStart + ([r].MinutesStart / 60)), Decimal) + __minutesShift_4) >= [s].TimeStart)) AndAlso ((Convert(([r].HoursStart + ([r].MinutesStart / 60)), Decimal) - __minutesShift_3) <= [s].TimeEnd))))\"' could not be translated and will be evaluated locally. (011792c6)\r\nThe LINQ expression '\"Any()\"' could not be translated and will be evaluated locally. (011792c6)\r\n```\r\n\r\nI fixed this by rewriting query using EF Core database scalar functions and SQL DATEPART and now it's fully executed on database.\r\n\r\nIf I get things right the main problem with DATEPART is that its result is one-based and depends on @@DATEFIRST value, that's why it cant just be matched to `System.DayOfWeek` enum. On the other hand as you could see it is really important to get it translated.\r\n\r\nP. S. Actual query is a bit simplified, so that log doesn't exactly corresponds to it, but that doesn't really change things a lot.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10284", "title": "EF Core does not cast from Nullable to underlying type", "body": "Having the following mapping:\r\n```\r\n        public static IQueryable<UserInListDTO> MapToUserInListToDTO(this IQueryable<Parent> parents)\r\n            => parents.Select(p => new UserInListDTO\r\n                {\r\n                    Id = p.Id,\r\n                    FirstName = p.FirstName,\r\n                    LastName = p.LastName,\r\n                    Email = p.ApplicationUser != null\r\n                        ? p.ApplicationUser.Email\r\n                        : null,\r\n                    PhoneNumber = p.ApplicationUser != null\r\n                        ? p.ApplicationUser.PhoneNumber\r\n                        : null,\r\n                    Address = p.Address != null\r\n                        ? p.Address.MappedAddress\r\n                        : null,\r\n                    Schools = p.Childs.Select(c => c.School.SchoolName).Distinct(),\r\n                    Status = p.ApplicationUser != null\r\n                        ? p.ApplicationUser.Status.ToFriendlyString()\r\n                        : null,\r\n                    Verified = p.IsVerified,\r\n                         ....\r\n                });\r\n```\r\n\r\nQuery fails with exception on this part:\r\n```\r\nStatus = p.ApplicationUser != null ? p.ApplicationUser.Status.ToFriendlyString() : null\r\n```\r\nStatus property type is enum. Relation beetwen Parent and ApplicationUser:\r\n```\r\n            builder.Entity<ApplicationUser>()\r\n                .HasOne(u => u.Parent)\r\n                .WithOne(p => p.ApplicationUser)\r\n                .IsRequired()\r\n                .HasForeignKey<ApplicationUser>(u => u.ParentId)\r\n                .OnDelete(DeleteBehavior.Cascade);\r\n```\r\n```\r\nSystem.ArgumentException: Expression of type 'System.Nullable`1[KidsCareApp.Model.Enums.UserStatuses]' cannot be used for parameter of type 'KidsCareApp.Model.Enums.UserStatuses' of method 'System.String ToFriendlyString[UserStatuses](KidsCareApp.Model.Enums.UserStatuses)'\r\nParameter name: arg0\r\n   at System.Dynamic.Utils.ExpressionUtils.ValidateOneArgument(MethodBase method, ExpressionType nodeKind, Expression arguments, ParameterInfo pi, String methodParamName, String argumentParamName, Int32 index)\r\n   at System.Linq.Expressions.Expression.Call(Expression instance, MethodInfo method, Expression arg0)\r\n   at System.Linq.Expressions.Expression.Call(Expression instance, MethodInfo method, IEnumerable`1 arguments)\r\n   at System.Linq.Expressions.MethodCallExpression.Update(Expression object, IEnumerable`1 arguments)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.VisitChildren(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitExtension(Expression node)\r\n   at System.Linq.Expressions.Expression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitMemberAssignment(MemberAssignment node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(MemberBinding node)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit[T](ReadOnlyCollection`1 nodes, Func`2 elementVisitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(MemberInitExpression node)\r\n   at System.Linq.Expressions.MemberInitExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at Remotion.Linq.Clauses.SelectClause.TransformExpressions(Func`2 transformation)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.NavigationRewritingQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n   at Remotion.Linq.Clauses.SelectClause.Accept(IQueryModelVisitor visitor, QueryModel queryModel)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.Rewrite(QueryModel queryModel, QueryModel parentQueryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(QueryModel queryModel, Boolean asyncQuery)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.OptimizeQueryModel(QueryModel queryModel, Boolean asyncQuery)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass24_0`1.<CompileAsyncQuery>b__0()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddAsyncQuery[TResult](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync[TResult](Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.System.Collections.Generic.IAsyncEnumerable<TResult>.GetEnumerator()\r\n   at System.Linq.AsyncEnumerable.<Aggregate_>d__6`3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at KidsCareApp.Repository.Services.Admin.AdminUserService.<GetUsersAsync>d__1.MoveNext()\r\n\r\n```\r\n## Further technical details\r\n\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SQLServer\r\nOperating system: Windows 10 Pro 1703 15063.540\r\nIDE: Visual Studio 2017", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/d209ebecf4f7a4ac48d4501c4031d4f23a63d67a", "message": "Query: inline deterministic fields"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/8886d1ca746a6730d4ec01a00e79450620e915f4", "message": "Sqlite: Translators for string methods\n\nResolves #10527"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NArnott": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10642", "title": "SQLite Query: Cast from decimal to double not translated", "body": "When using Sqlite as a database for EFCore, the following expression doesn't work:\r\n\r\n```c#\r\nWhere(x => x.Price > -1)\r\n```\r\n\r\nThis expression will return items where Price is -5. One workaround is to use Decimal.Negate and reverse the expression, but that shouldn't be needed. Both methods work fine with using SQL as the database. \r\n\r\n### Steps to reproduce\r\nGiven Db Model Item:\r\n\r\n```c#\r\nclass Item\r\n{\r\n    public long Id { get; set; }\r\n\r\n    public string Name { get; set; }\r\n\r\n    public decimal Price { get; set; }\r\n}\r\n```\r\n\r\nand db context\r\n\r\n```c#\r\nclass TestDbContext : DbContext\r\n{\r\n    public TestDbContext(DbContextOptions options) : base(options) { }\r\n\r\n    public DbSet<Item> Items { get; set; }\r\n}\r\n```\r\n\r\nand the following repo:\r\n\r\n```c#\r\nstatic async Task Main()\r\n{\r\n    var connection = new SqliteConnection(\"DataSource=:memory:\");\r\n\r\n    connection.Open();\r\n\r\n    var options = new DbContextOptionsBuilder<TestDbContext>()\r\n                        .UseSqlite(connection)\r\n                        .Options;\r\n\r\n    var context = new TestDbContext(options);\r\n\r\n    context.Database.EnsureCreated();\r\n\r\n    var items = new List<Item>\r\n    {\r\n        new Item{Id = 1, Name = \"Item 1\", Price = 100},\r\n        new Item{Id = 2, Name = \"Item 2\", Price = 10},\r\n        new Item{Id = 3, Name = \"Item 3\", Price = 0},\r\n        new Item{Id = 4, Name = \"Item 4\", Price = -1},\r\n        new Item{Id = 5, Name = \"Item 5\", Price = -5}\r\n    };\r\n\r\n    context.Items.AddRange(items);\r\n    context.SaveChanges();\r\n\r\n    var query1 = context.Items.Where(x => x.Price > 0).Select(x => x.Name);\r\n    var results1 = await query1.ToArrayAsync();\r\n    Console.WriteLine($\"Items with price greater than 0 - {string.Join(',', results1)}\");\r\n\r\n    var query2 = context.Items.Where(x => x.Price > -1m).Select(x => x.Name);\r\n    var results2 = await query2.ToArrayAsync();\r\n    Console.WriteLine($\"Items with price greater than -1 - {string.Join(',', results2)}\");\r\n\r\n    var query3 = context.Items.Where(x => decimal.Negate(x.Price) < 1).Select(x => x.Name);\r\n    var results3 = await query3.ToArrayAsync();\r\n    Console.WriteLine($\"Items with price greater than -1 - {string.Join(',', results3)}\");\r\n\r\n    Console.ReadLine();\r\n}\r\n```\r\n\r\nThe result of query2 produces Item 1, 2, 3 and 5, where only Item 1, 2, 3 are expected.\r\n\r\n```c#\r\nConsole.WriteLine(\"Hello World!\");\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.01\r\nDatabase Provider: Microsoft.EntityFrameworkCore.Sqlite 2.0.1)\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.5.2\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mindingdata": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10636", "title": "EF Core Drop Database Command runs the \"ConfigureServices\" method twice", "body": "Running a drop database command in Entity Framework Core runs the \"ConfigureServices\" method twice in an ASP.net Core application. I'm sure this could cause a myriad of issues but in my particular case, something that is being called in ConfigureServices uses a static variable which should only be set once, when it's set a second time the application crashes and the ef command fails. \r\n\r\n### Steps to reproduce\r\nI have created a complete project to replicate the issue. That project can be found here :  https://github.com/mindingdata/EFConfigureServices\r\n\r\nCouple of things to note about the project. It uses a MSSQL Server located on localhost using integrated security. Connection String is located in the ConfigureServices method if you need to change this to replicate the issue. \r\n\r\nThe ConfigureServices method itself has the following : \r\n\r\n```c#\r\nstatic bool hasRan = false;\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n\r\n\tif (hasRan)\r\n\t{\r\n\t\tthrow new Exception(\"Configure services has run twice\");\r\n\t}\r\n\r\n\thasRan = true;\r\n\r\n\tservices.AddMvc();\r\n\tvar connection = @\"Server=.;Database=efconfigureservices;Trusted_Connection=True;ConnectRetryCount=0\";\r\n\tservices.AddDbContext<MyContext>(options => options.UseSqlServer(connection));\r\n}\r\n```\r\n\r\nThis is just a simple replication of the issue, but as I say, I ran into this issue in particular when using the popular mapping library \"Automapper\" which uses static variables to hold configuration. \r\n\r\nWhen the command `dotnet ef database drop` is run on this project, the ConfigureServices, and I assume possibly other parts of the code, are executed twice. This then throws an exception in some cases where code isn't expecting to be run more than once. \r\n\r\nI do not get the same issue when creating migrations or updating the database using the dotnet ef cli. \r\n\r\n### Further technical details\r\nTools version of \"*\". \r\nEF Core version 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer (Originally replicated using npgsql/postgres)\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "archanasoni": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10629", "title": "Question:Design Core(Rev Eng):Context Class: How to add namespace while generating Context class ", "body": "Hi,\r\nWe are working to have Design Core support for our IBM EntityFramework Core provider.\r\nCurrently our dev infra is based on Core 2.0.\r\nWhen we generate model, context class contains default namespace. We require to add here IBM EntityFramework Core provider namespace as well. \r\nTo Do this we had to extend CSharpDbContextGenerator class which is part of Microsoft.EntityFrameworkcore.Design package. \r\nJust for this particular requirement we have to target another package, which we are not willing to do due to some reasons.\r\nIs there any way to achieve the above requirement by targeting Microsoft.EntityFrameworkcore.Relational pkg ?\r\nFor example  IScaffoldingProviderCodeGenerator interface provides us method, through which, we can generate UseDb2.. method code.\r\n\r\nRegards,\r\nArchana\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chenowen": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10627", "title": "InvalidOperationException: The binary operator NotEqual is not defined for the types 'Microsoft.EntityFrameworkCore.Storage.ValueBuffer' and 'Microsoft.EntityFrameworkCore.Storage.ValueBuffer'.", "body": "I use LEFT JOIN to join two tables and need to check a column that possible is NULL.\r\n\r\nIf if remove **x.ScientificName != null**, then **words.All** expresession will throw a null reference exception as ScientificName is NULL sometime.\r\n\r\n```\r\nvar words = keyword.Split(' ', StringSplitOptions.RemoveEmptyEntries);\r\n        var query = from bi in context.Ingredient\r\n                    join sn in context.ScientificName on bi.IngredientId equals sn.IngredientId into DefaultScientificName\r\n                    from defaultSN in DefaultScientificName.DefaultIfEmpty()\r\n                    where bi.IngredientId != id\r\n                    select new\r\n                    {\r\n                        Ingredient = bi,\r\n                        IngredientName = bi.IngredientName,\r\n                        ScientificName = defaultSN.Name,\r\n                    };\r\n\r\n        query = query.Where(x => (x.IngredientName != null && words.All(w => x.IngredientName.IndexOf(w, StringComparison.OrdinalIgnoreCase) >= 0))\r\n                                 || (x.ScientificName != null && words.All(w => x.ScientificName.IndexOf(w, StringComparison.OrdinalIgnoreCase) >= 0)));\r\n```\r\n\r\n```\r\nException message:\r\nSystem.InvalidOperationException: The binary operator NotEqual is not defined for the types 'Microsoft.EntityFrameworkCore.Storage.ValueBuffer' and 'Microsoft.EntityFrameworkCore.Storage.ValueBuffer'.\r\n   at System.Linq.Expressions.Expression.GetEqualityComparisonOperator(ExpressionType binaryType, String opName, Expression left, Expression right, Boolean liftToNull)\r\n   at System.Linq.Expressions.Expression.NotEqual(Expression left, Expression right, Boolean liftToNull, MethodInfo method)\r\n   at System.Linq.Expressions.Expression.NotEqual(Expression left, Expression right)\r\n   at Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Reduce()\r\n   at System.Linq.Expressions.Expression.ReduceAndCheck()\r\n   at System.Linq.Expressions.Expression.ReduceExtensions()\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExtensionExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteVariableAssignment(BinaryExpression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteAssignBinaryExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteBlockExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExtensionExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.Add(Expression expression)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteBinaryExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpressionFreeTemps(Expression expression, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.Rewrite[T](Expression`1 lambda)\r\n   at System.Linq.Expressions.Expression`1.Accept(StackSpiller spiller)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteLambdaExpression(Expression expr)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.Add(Expression expression)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.AddArguments(IArgumentProvider expressions)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteMethodCallExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteLogicalBinaryExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteLogicalBinaryExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpressionFreeTemps(Expression expression, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.Rewrite[T](Expression`1 lambda)\r\n   at System.Linq.Expressions.Expression`1.Accept(StackSpiller spiller)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteLambdaExpression(Expression expr)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.Add(Expression expression)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.AddArguments(IArgumentProvider expressions)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteMethodCallExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.Add(Expression expression)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.AddArguments(IArgumentProvider expressions)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteMethodCallExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.Add(Expression expression)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.AddArguments(IArgumentProvider expressions)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteMethodCallExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.Add(Expression expression)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.AddArguments(IArgumentProvider expressions)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteMethodCallExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.Add(Expression expression)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.AddArguments(IArgumentProvider expressions)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteMethodCallExpression(Expression expr, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpression(Expression node, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.RewriteExpressionFreeTemps(Expression expression, Stack stack)\r\n   at System.Linq.Expressions.Compiler.StackSpiller.Rewrite[T](Expression`1 lambda)\r\n   at System.Linq.Expressions.Expression`1.Accept(StackSpiller spiller)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\r\n   at System.Linq.Expressions.Expression`1.Compile()\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda[TResults]()\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass24_0`1.<CompileAsyncQuery>b__0()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddAsyncQuery[TResult](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync[TResult](Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.System.Collections.Generic.IAsyncEnumerable<TResult>.GetEnumerator()\r\n   at System.Collections.Generic.AsyncEnumerableHelpers.<ToArrayWithLength>d__1`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Collections.Generic.AsyncEnumerableHelpers.<ToArray>d__0`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   \r\n   \r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   \r\n\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Session.SessionMiddleware.<Invoke>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Session.SessionMiddleware.<Invoke>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.5\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10627/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "psibernetic": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10625", "title": "Update in-memory database to use optimistic offline lock for IsRowVersion concurrency", "body": "InMemory provider does not appear to respect ConcurrencyCheck or RowVersion.\r\n\r\n### Steps to reproduce\r\n\r\n```csharp\r\n    public class ConcurrencyCheckTests\r\n    {\r\n        [Fact]\r\n        public async Task ProveConcurrencyCheckIsNotUsed()\r\n        {\r\n            var id = Guid.NewGuid();\r\n\r\n            using (var dbContext = new SampleDbContext())\r\n            {\r\n                dbContext.Data.Add(new Datum\r\n                {\r\n                    Id = id,\r\n                    Counter = 0,\r\n                    CommitTag = Guid.NewGuid()\r\n                });\r\n\r\n                await dbContext.SaveChangesAsync();\r\n            }\r\n\r\n            await Assert.ThrowsAsync<DbUpdateConcurrencyException>(async () =>\r\n            {\r\n                var t1 = Task.Run(async () => await ModifyDataAsync());\r\n                var t2 = Task.Run(async () => await ModifyDataAsync());\r\n                var t3 = Task.Run(async () => await ModifyDataAsync());\r\n                var t4 = Task.Run(async () => await ModifyDataAsync());\r\n\r\n                await Task.WhenAll(t1, t2, t3, t4);\r\n            });\r\n\r\n            using (var dbContext = new SampleDbContext())\r\n            {\r\n                var entity = await dbContext.Data.SingleAsync(datum => datum.Id == id);\r\n\r\n                Assert.Equal(4, entity.Counter);\r\n            }\r\n\r\n            async Task ModifyDataAsync()\r\n            {\r\n                using (var dbContext = new SampleDbContext())\r\n                {\r\n                    var entity = await dbContext.Data.SingleAsync(datum => datum.Id == id);\r\n\r\n                    entity.Counter++;\r\n                    entity.CommitTag = Guid.NewGuid();\r\n\r\n                    await dbContext.SaveChangesAsync();\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public class SampleDbContext\r\n        : DbContext\r\n    {\r\n        public DbSet<Datum> Data { get; set; }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            base.OnModelCreating(modelBuilder);\r\n\r\n            modelBuilder.Entity<Datum>()\r\n                .HasKey(datum => datum.Id);\r\n\r\n            modelBuilder.Entity<Datum>()\r\n                .Property(datum => datum.CommitTag)\r\n                .IsConcurrencyToken();\r\n        }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            base.OnConfiguring(optionsBuilder);\r\n\r\n            optionsBuilder.UseInMemoryDatabase(\"Sample\");\r\n        }\r\n    }\r\n\r\n    public class Datum\r\n    {\r\n        public Guid Id { get; set; }\r\n\r\n        public int Counter { get; set; }\r\n\r\n        public Guid CommitTag { get; set; }\r\n    }\r\n```\r\n\r\nThis fails with the following output:\r\n\r\n```Assert.Throws() Failure\r\nExpected: typeof(Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException)\r\nActual:   (No exception was thrown)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at REstate.Engine.Repositories.SqlServer.Tests.ConcurrencyCheckTests.<ProveConcurrencyCheckIsNotUsed>d__0.MoveNext() in C:\\Users\\Ovan\\source\\REstate\\test\\REstate.Engine.Repositories.SqlServer.Tests\\Class1.cs:line 27\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\nFurthermore, if I bypass the `Assert.ThrowsAsync` the Counter is 1, so the update set the counter to 1 four times.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: (e.g. Microsoft.EntityFrameworkCore.InMemory) 2.0.1\r\nOperating system: Windows 10 x64 build 17075 -pre\r\nIDE: (e.g. Visual Studio 2017 15.5.2)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hejiajun107": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10619", "title": "Add-Migration Issue when users folder has Chinese", "body": "When excute \"add-migration init \"\r\nit shows \"\u65e0\u6cd5\u8bc6\u522b\u7684\u8f6c\u4e49\u5e8f\u5217\"  because of the chinese name in users/ folder in windows 10\r\n\r\n\r\n```\r\nException message:\r\n\u65e0\u6cd5\u8bc6\u522b\u7684\u8f6c\u4e49\u5e8f\u5217\u3002 \r\nStack trace:\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "obelixA": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10617", "title": "dropping many (all?) foreign keys after update from 1.x to 2.x", "body": "Hi\r\nI just tried to update all my packages via nuget.\r\ncompiling works fine, but adding a migration (I made no changes to the source - just tried it out to see if something changes AND IT DOES!)\r\nI can see many of these drops\r\n```\r\nmigrationBuilder.DropForeignKey(\r\n    name: \"FK_AZAbschnitt_AZTage_FK_AZTag\",\r\n    table: \"AZAbschnitt\");\r\n```\r\nonly to see a creation of the keys like\r\n```\r\nmigrationBuilder.AlterColumn<int>(\r\n                name: \"FK_AZTag\",\r\n                table: \"AZAbschnitt\",\r\n                nullable: false,\r\n                oldClrType: typeof(int),\r\n                oldNullable: true);\r\n```\r\nas far as I can see the only difference is, that now the entries are not nullable.\r\nBUT\r\nas I use sqlite the drops are not working. And there is no need to change anything with the source code not changed.\r\nWhat can I add/change/do that my existing databases are still working with the new sqlite-/ef core libraries?\r\n\r\nany hints are welcome :)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vnvizitiu": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10613", "title": "Validate requiredness (nullability) in the in-memory database", "body": "### Description\r\nI created a model that has a name property which I tried setting as required from both the ModelBuilder and using annotations.\r\nWhen inspecting the tracked changes it confirms that the property IsNullable == false, out of this 2 scenarios arise:\r\n* When using entity framework in memory, then the change is saved in memory with the field being null.\r\n* When using a connection string for localdb then the following NullReferenceException appears\r\n\r\n```\r\nException message: Object reference not set to an instance of an object.\r\nStack trace:       at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnNext(KeyValuePair`2 keyValuePair)\r\n   at System.Diagnostics.DiagnosticListener.Write(String name, Object value)\r\n   at Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesFailed(IDiagnosticsLogger`1 diagnostics, DbContext context, Exception exception)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges()\r\n   at EComm.Front.Data.DbInitializer.Initialize(ApplicationDbContext context) in F:\\TFS\\Mine\\E-Comm\\EComm.Front\\Data\\DbInitializer.cs:line 11\r\n```\r\nThis was confirmed through an NUnit test (for the in-memory database) and in an ASP.NET Core 2 application (for the exception version)\r\n\r\n### Steps to reproduce\r\nThe following code is from the Unit Test\r\n\r\n```c#\r\n[TestFixture]\r\npublic class DbInitializeTests\r\n{\r\n        [Test]\r\n        public void WhenInitializingTheDb_ItShouldStoreTheItems()\r\n        {\r\n            //arrange\r\n            var dbOptions = new DbContextOptionsBuilder<ApplicationDbContext>();\r\n            dbOptions.UseInMemoryDatabase(\"testdb\");\r\n            var dbContext = new ApplicationDbContext(dbOptions.Options);\r\n\r\n            //act\r\n            dbContext.Categories.Add(new Category());\r\n\r\n            dbContext.SaveChanges();\r\n\r\n            //assert\r\n            Assert.That(dbContext.Categories, Is.Not.Empty);\r\n            Assert.That(dbContext.Categories.First().Name, Is.Not.Null.Or.Empty); // fails here, as it the save went ok up to here.\r\n        }\r\n}\r\n\r\n    public class Category : Entity<Guid>\r\n    {\r\n        public string Name { get; set; }\r\n\r\n        public string NameInUrlFormat => Name.ToLowerInvariant().Replace(\" \", \"-\");\r\n}\r\n\r\npublic abstract class Entity<T>\r\n{\r\n     public T Id { get; set; }\r\n}\r\n\r\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser>\r\n{\r\n        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\r\n            : base(options)\r\n        {\r\n        }\r\n\r\n        public DbSet<Category> Categories { get; set; }\r\n\r\n        protected override void OnModelCreating(ModelBuilder builder)\r\n        {\r\n            base.OnModelCreating(builder);\r\n            // Customize the ASP.NET Identity model and override the defaults if needed.\r\n            // For example, you can rename the ASP.NET Identity table names and more.\r\n            // Add your customizations after calling base.OnModelCreating(builder);\r\n\r\n            builder.Entity<Category>(\r\n                typeBuilder => \r\n                    typeBuilder.Property(category => category.Name)\r\n                    .IsRequired()\r\n                    .IsUnicode()\r\n                    .HasMaxLength(100));\r\n        }\r\n }\r\n```\r\n### Expected Results\r\nThe SaveChanges() method should have thrown an exception since the model requirements were not fulfiled\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 Pro\r\nIDE: Visual Studio 2017 15.5.2\r\n\r\n### Mentions\r\nThis issue was also mentioned in the documentation found [here](https://docs.microsoft.com/en-us/ef/core/modeling/required-optional) in the first and last comments.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jose8789": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10612", "title": "Collection is read-only", "body": "Cannot include a private collection in an entity\r\n```\r\nSystem.NotSupportedException : Collection is read-only.\r\n   at System.ThrowHelper.ThrowNotSupportedException(ExceptionResource resource)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Add(Object instance, Object value)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.AddToCollection(InternalEntityEntry entry, INavigation navigation, IClrCollectionAccessor collectionAccessor, Object value)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.ToDependentFixup(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.InitialFixup(InternalEntityEntry entry, ISet`1 handledForeignKeys, Boolean fromQuery)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.TrackedFromQuery(InternalEntityEntry entry, ISet`1 handledForeignKeys)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.TrackedFromQuery(InternalEntityEntry entry, ISet`1 handledForeignKeys)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery(ISet`1 handledForeignKeys)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery(IEntityType baseEntityType, Object entity, ValueBuffer valueBuffer, ISet`1 handledForeignKeys)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.StartTracking(Object entity, IEntityType entityType)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.<IncludeCollectionAsync>d__12.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.<_IncludeAsync>d__20`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.<_ExecuteAsync>d__8`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AsyncSelectEnumerable`2.AsyncSelectEnumerator.<MoveNext>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Linq.AsyncEnumerable.<SingleOrDefault_>d__381`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.<MoveNext>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<ExecuteSingletonAsyncQuery>d__23`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at booking.student.infrastructure.Repositories.StudentRepository.<FindAsync>d__6.MoveNext() in /Users/Jose8789/oculos/college/services/booking.student/infrastructure/booking.student.infrastructure/Repositories/StudentRepository.cs:line 36\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at booking.student.tests.StudentManagementTest.<ChangeProgressStatus>d__3.MoveNext() in /Users/Jose8789/oculos/college/services/booking.student/tests/booking.student.tests/StudentManagementTest.cs:line 107\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```c#\r\npublic class Student \r\n    {\r\n        private List<StudentProgress> _progresses;\r\n        protected Student()\r\n        {\r\n            _progresses = new List<StudentProgress>();\r\n        }\r\n        public IEnumerable<StudentProgress> Progresses => _progresses.AsReadOnly();\r\n    }\r\n\r\npublic void Configure(EntityTypeBuilder<Student> studentConfiguration)\r\n        {\r\n            studentConfiguration.HasKey(x => x.Id);\r\n            studentConfiguration.Ignore(x => x.DomainEvents);\r\n\r\n            studentConfiguration.Metadata.FindNavigation(nameof(Student.Progresses))\r\n                .SetPropertyAccessMode(PropertyAccessMode.Field);\r\n        }\r\npublic class StudentProgress : Entity\r\n    {\r\n        public int ProgressStatusId { get; private set; }\r\n        public int Year { get; private set; }\r\n        public Grade Grade { get; private set; }\r\n        public int CourseId { get; private set; }\r\n\r\n        public StudentProgress(Grade grade, int year, int courseId, ProgressStatus progress)\r\n        {\r\n            ProgressStatusId = progress.Id;\r\n            Year = year;\r\n            Grade = grade;\r\n            CourseId = courseId;\r\n        }\r\n    }\r\n\r\nthis is where I'm getting the error:\r\npublic async Task<Student> FindAsync(int identity)\r\n        {\r\n            var student = await _context.Set<Student>()\r\n                .Include(x=>x.Progresses) // this line is generating the error\r\n                .Where(b => b.Id == identity)\r\n                .SingleOrDefaultAsync();\r\n\r\n            return student;\r\n        }\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ErikEJ": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10610", "title": "\"Sql() only\" migrations do not update history table", "body": "https://stackoverflow.com/questions/38223170/no-createstoredprocedure-method-on-entity-framework-core/38226970?noredirect=1#comment82950352_38226970 ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10177", "title": "2.0.1 - test fail with SQLCE provider", "body": "This change was added to 2.0.1:\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/commit/b59da98ee113500bb89ff5677f887a792eaa8d3f\r\n\r\nI am seeing this test error\r\n\r\n```\r\nTest 'Microsoft.EntityFrameworkCore.Query.ComplexNavigationsQuerySqlCeTest.Include_reference_collection_order_by_reference_navigation' failed:\r\n\tAssert.Equal() Failure\r\nExpected: 3\r\nActual:   11\r\n\tat Microsoft.EntityFrameworkCore.Query.ComplexNavigationsQueryTestBase`2.ComplexNavigationsQueryResultAsserter.AssertLevel1(Level1 expected, Level1 actual, IEnumerable`1 expectedIncludes)\r\n\tat Microsoft.EntityFrameworkCore.Query.ComplexNavigationsQueryTestBase`2.ComplexNavigationsQueryResultAsserter.AssertElement[TElement](TElement expected, TElement actual, IEnumerable`1 expectedIncludes)\r\n\tat Microsoft.EntityFrameworkCore.TestUtilities.QueryResultAsserter.AssertCollection[TElement](IEnumerable`1 expected, IEnumerable`1 actual, IEnumerable`1 expectedIncludes)\r\n\tat Microsoft.EntityFrameworkCore.Query.ComplexNavigationsQueryTestBase`2.ComplexNavigationsQueryResultAsserter.AssertCollection[TElement](IEnumerable`1 expected, IEnumerable`1 actual, IEnumerable`1 expectedIncludes)\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1-rtm-203\r\nDatabase Provider: SQLCE\r\nOperating system: Win 10\r\nIDE: Vs 2017 15.3\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9439", "title": "Improve Tools packages descriptions", "body": "See https://stackoverflow.com/questions/45703613/whats-the-difference-between-efcore-tools-and-efcore-tools-dotnet ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ac8c313e4abf58cae4a930c2be2cb5dd7d0938c5", "message": "Update ISSUE_TEMPLATE.md (#10444)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/2942b6035887e97e316b018f518a8150497465b3", "message": "Add GenerateCreateScript extension method on DatabaseFacade (#10136)\n\nAdd GenerateCreateScript extension method on DatabaseFacade\r\n\r\nfixes #2943"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/329bbde6d4c3b008610f3b6256e2924b6bde78e6", "message": "Improve NuGet tags (#9816)\n\nfixes #9776"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/9777", "title": "Update Tools Nuget package descriptions", "body": "fixes #9439\r\n\r\n-verified by building and inspecting generated packages with Nuget Package Explorer\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12130990", "body": "I think for all help sections in this file, this needs to be changed to, ie remove the leading $-sign:\n\n```\n .PARAMETER StartupProject  \n    Specifies the start-up project to use. If omitted, the solution's start-up project is used. \n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12130990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12451871", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12451871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12497866", "body": "LGTM :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12497866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500114", "body": "@bricelam does this fix the \"System.Runtime\" issue? :smile_cat: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500217", "body": "OMG -that could take a while to fix, then, I guess. I will enjoy the sun in the meantime, then :sunglasses: since this is blocking me completely on beta 7\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500278", "body": "Thanks. Will give this a go then, when it is in the daily build.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12500278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12590002", "body": "@ph1ll the update to nuget.config takes care of that issue\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12590002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12633874", "body": "This exposes/requires a lot of \"internal\" stuff ( VerbatimStringLiteral(GeneratorModel.ConnectionString) ) - could it be made simpler? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12633874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12688497", "body": " @noeljiangcc  This was rolled back to 1.1.0 in a later commit\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12688497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12753356", "body": "@pranavkm  Why are you doing this in the dev branch? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12753356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12765181", "body": "I thought I knew a little bit about git, but there you go :smile_cat: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12765181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13821961", "body": "What bug was that? Do you have a KB number?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13821961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822154", "body": "Thanks! Wonder if this fix should be back ported to EF 6,2? http://entityframework.codeplex.com/SourceControl/latest#src/EntityFramework.SqlServer/Resources/System/Data/SqlClient/System.Data.Resources.SqlClient.SqlProviderServices.StoreSchemaDefinition.ssdl \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822244", "body": "Composite? As in multicolumn?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15866619", "body": "Yay!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15866619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15976912", "body": "Does this mean that .NET 4.5.2 is now required??\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15976912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "orobert91": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10600", "title": "Feature proposal: Add support for primitive arrays with InMemoryDatabase", "body": "Most database providers (Npgsql) seem to support primitive arrays (string[], bool[], etc...), but InMemoryDatabase do not. The current workaround is to use a different setter/getter and serialize/deserialize to a string.  It would be nice to add support for this with InMemoryDatabase so we do not have to use different getter/setter methods for testing.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9481", "title": "EF Core joining on the wrong field when using GroupBy", "body": "Here is probably a big bug introduced in EF Core 2.0. The database is PostgreSQL.\r\n\r\nI have this code, which returns a result in EF Core 1.2, and gives no results in EF Core 2.0:\r\n```\r\nIEnumerable<IGrouping<Sport, Team>> groups = dbContext.Teams\r\n                .Include(t => t.Players)\r\n                .Where(t => t.ID == 3)\r\n                .GroupBy(t => t.Sport)\r\n                .ToList();\r\n```\r\n\r\nI have investigated the produced SQL query. The first SQL query that is produced to join  **Team** on **Sport** is correct:\r\n\r\n```\r\nSELECT \"t\".\"id\", \"t\".\"name\", \"t\".\"sport_id\"\r\n\tFROM \"team\" AS \"t\"\r\n\tINNER JOIN \"sport\" AS \"t.Sport\" ON \"t\".\"sport_id\" = \"t.Sport\".\"id\"\r\n\tWHERE \"t\".\"id\" = 3\r\n\tORDER BY \"t.Sport\".\"id\", \"t\".\"id\"\r\n```\r\n\r\nThe second query produced to join **Team** on **Players** has an incorrect join:\r\n\r\n```\r\nSELECT \"t.Players\".\"id\", \"t.Players\".\"team_id\"\r\n\tFROM \"team\" AS \"t.Players\"\r\n\tINNER JOIN (\r\n\t    SELECT DISTINCT \"t.Sport0\".\"id\", \"t0\".\"id\" AS \"id0\"\r\n\t    FROM \"team\" AS \"t0\"\r\n\t    INNER JOIN \"sport\" AS \"t.Sport0\" ON \"t0\".\"sport_id\" = \"t.Sport0\".\"id\"\r\n\t    WHERE \"t0\".\"id\" = 3\r\n\t) AS \"t1\" ON \"t.Players\".\"team_id\" = \"t1\".\"id\"\r\n\tORDER BY \"t0\".\"id\"\r\n```\r\n\r\nEF Core makes its outermost join on **Player** and **Sport** (t1.id), which does not make any sense and obviously gives no result. Instead, it should join on **Player** and **Team** (id0). Running the query manually with the fixed SQL returns the expected record.\r\n\r\nAlso removing the` GroupBy()` clause fixes the problem. The following query produces the expected SQL query and returns the expected results:\r\n\r\n```\r\nIEnumerable<Team> groups = dbContext.Teams\r\n                .Include(t => t.Players)\r\n                .Include(t => t.Sport)\r\n                .Where(t => t.ID == 3)\r\n                .ToList();\r\n```\r\nI can then GroupBy() just fine using LINQ-to-objects,", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wizofaus": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10582", "title": "Translate SequenceEquals for byte arrays", "body": "A `where` clause using == on `byte[]` translates into the SQL to compare the underlying value data, despite the fact that the C# syntax for doing this requires `SequenceEquals()` or similar.\r\n\r\nSpecifically `myTable.Where(r => r.ByteArray == byteArray)` is the only way to produce the SQL, \"WHERE ByteArray = @byteArray\", which works as expected and ensures the data comparison is performed by SQL server, but fails to work using e.g. the InMemory EF provider, or if your data source is any in-memory data structure.\r\n\r\nOTOH, `myTable.Where(r => r.ByteArray.SequenceEquals(byteArray))` works with in-memory data stores, but doesn't translate into SQL, causing the entire table to be loaded into memory.\r\n\r\nGiven the behaviour of == for `byte[]` can't be changed at the .NET level, I would expect `.SequenceEquals( )` to be translated to SQL = for byte arrays.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.4\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrswain": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10571", "title": "NRE thrown during add-migration if primary key is null.", "body": "Other code in migration generators seem to handle the absence of a primary key, but this line\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/69f870ab1f32b3185c3599887fbe020c0f70c445/src/EFCore.Design/Migrations/Design/MigrationsCodeGenerator.cs#L129\r\n\r\ndoes not perform a null check and will pass a null back to the annotations collector thus firing a null pointer exception.\r\n\r\nGiven that other areas of the code generator now properly check for and handle a null for PrimaryKey on CreateTableOperation, I figure this was just overlooked due to code complexity.\r\n\r\n### Further technical details\r\nEF Core version: 2.1.0-preview1-27746\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Win10\r\nIDE:  Visual Studio 2017 15.5\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10115", "title": "Bug in MigrationBuilder", "body": "Calling MigrationBuilder.UpdateData does not persist passed in schema\r\n\r\nIt is due to this method:\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/fbaebcbfb57f245edfded68f0bad78f4978d8867/src/EFCore.Relational/Migrations/MigrationBuilder.cs#L1230\r\n\r\nI stepped through it trying to debug the problem and I noticed it does not pass schema through thus dropping any supplied value.\r\n\r\n### Further technical details\r\nEF Core version: 2.0\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lakeman": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10568", "title": "Failing to sort owned types, when updating different combinations of fields of both parent and owned type at the same time", "body": "I'm not sure I really understand this problem yet....\r\n\r\nI created an owned type to wrap every enum value, so I could save string names instead of numeric values without repeating myself too much. (Side note, this still isn't ideal as it requires each user of any enum to be more careful in how they assign a value, since an implicit cast from T creates a new instance which doesn't seem to be handled...)\r\n\r\n```\r\npublic class EnumWrapper<T> where T : struct // eg enum\r\n{\r\n\tpublic EnumWrapper() : this(Default)\r\n\t{\r\n\t}\r\n\tpublic EnumWrapper(T value) {\r\n\t\tthis.Value = value;\r\n\t}\r\n\r\n\tprivate static T Default = (T)Enum.GetValues(typeof(T)).GetValue(0);\r\n\r\n\t[NotMapped, Required]\r\n\tpublic T Value { get; set; }\r\n\r\n\t[StringLength(20), Required]\r\n\tpublic string _Raw { get { return Value.ToString(); } set { Value = Extensions.ParseEnum<T>(value, Default); } }\r\n}\r\n```\r\nThe model is built by calling this extension method for every use of this type;\r\n```\r\npublic static PropertyBuilder<string> HasEnum<T, E>(this EntityTypeBuilder<T> builder, Expression<Func<T, EnumWrapper<E>>> navigationExpression) \r\n\twhere T : class \r\n\twhere E : struct\r\n{\r\n\tvar entityBuilder = builder.OwnsOne(navigationExpression);\r\n\tentityBuilder.Ignore(e => e.Value);\r\n\treturn entityBuilder\r\n\t\t.Property(e => e._Raw)\r\n\t\t.HasColumnName(Database.ToSnakeCase(entityBuilder.OwnedEntityType.DefiningNavigationName))\r\n\t\t.HasMaxLength(20);\r\n}\r\n```\r\nI can change multiple instances of this type at the same time, unless (I believe) two existing instances have been changed from the same before value to the same after value. Then I'm seeing this exception thrown;\r\n```\r\n An exception occurred in the database while saving changes for context type '<DbContext>'.\r\n System.InvalidOperationException: Failed to compare two elements in the array. ---> System.InvalidOperationException: No backing field could be found for property 'TransactionId' of entity type 'EnumWrapper<TransactionStatus>' and the property does not have a getter.\r\n    at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrAccessorFactory`1.Create(PropertyInfo propertyInfo, IPropertyBase propertyBase)\r\n    at Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized[TParam,TValue](TValue& target, TParam param, Func`2 valueFactory)\r\n    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue(IPropertyBase propertyBase)\r\n    at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.get_Item(IPropertyBase propertyBase)\r\n    at Microsoft.EntityFrameworkCore.Update.Internal.ModificationCommandComparer.Compare(ModificationCommand x, ModificationCommand y)\r\n    at System.Collections.Generic.ArraySortHelper`1.InsertionSort(T[] keys, Int32 lo, Int32 hi, Comparison`1 comparer)\r\n    at System.Collections.Generic.ArraySortHelper`1.IntrospectiveSort(T[] keys, Int32 left, Int32 length, Comparison`1 comparer)\r\n    at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index, Int32 length, IComparer`1 comparer)\r\n    --- End of inner exception stack trace ---\r\n    at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index, Int32 length, IComparer`1 comparer)\r\n    at System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, IComparer`1 comparer)\r\n    at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.<BatchCommands>d__8.MoveNext()\r\n    at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.<ExecuteAsync>d__10.MoveNext()\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smitpatel": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10563", "title": "Oracle: Indexof_with_emptystring fails", "body": "empty string creates parameter and it is sent to server. When it returns it comes as null. (Oracle doesn't differentiate between null/empty string) and we use the value read from server in IndexOf function on client. Which throws Value cannot be null\r\n```\r\nTest 'Microsoft.EntityFrameworkCore.Query.SimpleQueryOracleTest.Indexof_with_emptystring' failed: System.ArgumentNullException : Value cannot be null.\r\nParameter name: value\r\n\tat System.String.IndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType)\r\n\tat lambda_method(Closure , QueryContext , ValueBuffer )\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\ExpressionVisitors\\Internal\\ProjectionShaper.cs(97,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ProjectionShaper.TypedProjectionShaper`3.Shape(QueryContext queryContext, ValueBuffer valueBuffer)\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Internal\\QueryingEnumerable.cs(129,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(DbContext _, Boolean buffer)\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\samples\\OracleProvider\\src\\OracleProvider\\Storage\\Internal\\OracleExecutionStrategy.cs(39,0): at Microsoft.EntityFrameworkCore.Storage.Internal.OracleExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\Internal\\QueryingEnumerable.cs(81,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\LinqOperatorProvider.cs(141,0): at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\TestUtilities\\QueryAsserter.cs(70,0): at Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserter`1.AssertSingleResult[TItem1](Func`2 actualQuery, Func`2 expectedQuery, Action`2 asserter, Int32 entryCount)\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\QueryTestBase.cs(34,0): at Microsoft.EntityFrameworkCore.Query.QueryTestBase`1.AssertSingleResult[TItem1](Func`2 actualQuery, Func`2 expectedQuery, Action`2 asserter, Int32 entryCount)\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\QueryTestBase.cs(26,0): at Microsoft.EntityFrameworkCore.Query.QueryTestBase`1.AssertSingleResult[TItem1](Func`2 query, Action`2 asserter, Int32 entryCount)\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\SimpleQueryTestBase.Functions.cs(839,0): at Microsoft.EntityFrameworkCore.Query.SimpleQueryTestBase`1.Indexof_with_emptystring()\r\n\tD:\\code\\SecondEF\\EntityFrameworkCore\\samples\\OracleProvider\\test\\OracleProvider.FunctionalTests\\Query\\SimpleQueryOracleTest.cs(48,0): at Microsoft.EntityFrameworkCore.Query.SimpleQueryOracleTest.Indexof_with_emptystring()\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10548", "title": "Query: Complex Expression which translates to constant in projection causes client eval", "body": "Test\r\n```\r\nAssertSingleResult<Customer>(\r\n                cs => cs.Where(c => c.CustomerID == \"ALFKI\").Select(c => c.ContactName.IndexOf(\"\")));\r\n```\r\n\r\nIf the translation of IndexOf(\"\") applies optimization like this\r\n```\r\n                return patternExpression is ConstantExpression patternConstantExpression\r\n                    ? (string)patternConstantExpression.Value == string.Empty\r\n                        ? (Expression)Expression.Constant(0)\r\n                        : charIndexExpression\r\n                    : Expression.Condition(\r\n                        Expression.Equal(patternExpression, Expression.Constant(string.Empty)),\r\n                        Expression.Constant(0),\r\n                        charIndexExpression);\r\n```\r\ni.e. Return a constant Expression.\r\n\r\nBased on our past decision as an optimization, whenever the translation of projection is ConstantExpression, we don't put in projection. In this case since translation is converted to ConstantExpression, it is not adding it to projection. But the projection itself is not an constant expression so that causes following SQL with client eval.\r\n```\r\n  SELECT [c].[ContactName]\r\n  FROM [Customers] AS [c]\r\n  WHERE [c].[CustomerID] = N'ALFKI'\r\n```\r\nFetching ContactName is certainly more data then fetching a constant from server. We should only apply optimization of not putting the constant on server if that is not going to do client eval and fetch much more data. (possible idea to check if the projection is constant itself)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10525", "title": "Sqlite: Translate DateTime.AddXxx methods", "body": "Pulling it out of scope of #10468 \r\n\r\nLeaving the class `SqliteDateAddTranslator`\r\n\r\nThe biggest issue lack of test coverage for those methods.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10523", "title": "Sqlite: Translate DateTime.Millisecond", "body": "There is no native support for Millisecond in strftime but we can extract \"%f\" and then process it to pick last 3 digits which would be milliseconds.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10522", "title": "Query: Translate DateTime.TimeOfDay", "body": "It should be easy to generate based on format string.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10520", "title": "Query: SqlFragmentExpression has incorrect type for mixed mode eval", "body": "For Expressions like `DateTime.Now.Date` in Oracle, DateTime.Now gets translated to SqlFragmentExpression but it has type of object defined for all types. This causes error because after translating `DateTime.Now` we re-generate `DateTime.Now.Date` with translated expression.\r\nException:\r\n```\r\nTest 'Microsoft.EntityFrameworkCore.Query.SimpleQueryOracleTest.Where_datetime_today' failed: System.ArgumentException : Instance property 'Date' is not defined for type 'System.Object'\r\n\tat System.Linq.Expressions.Expression.Property(Expression expression, String propertyName)\r\n\tD:\\code\\ContributorEF\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\ExpressionVisitors\\SqlTranslatingExpressionVisitor.cs(700,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMember(MemberExpression memberExpression)\r\n\tat System.Linq.Expressions.MemberExpression.Accept(ExpressionVisitor visitor)\r\n\tat Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(Expression expression)\r\n\tD:\\code\\ContributorEF\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\ExpressionVisitors\\SqlTranslatingExpressionVisitor.cs(127,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n\tD:\\code\\ContributorEF\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\ExpressionVisitors\\SqlTranslatingExpressionVisitor.cs(539,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.ProcessComparisonExpression(BinaryExpression binaryExpression)\r\n\tD:\\code\\ContributorEF\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\ExpressionVisitors\\SqlTranslatingExpressionVisitor.cs(165,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression expression)\r\n\tat System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n````", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10518", "title": "SqlServer for Ubuntu: DbContextPooling & SequenceEndToEnd tests hits frequent timeouts", "body": "Disabled tests on Ubuntu\r\nDouble_dispose_concurrency_test\r\nConcurrency_test\r\nCan_use_sequence_end_to_end\r\nCan_use_sequence_end_to_end_from_multiple_contexts_concurrently_async\r\n\r\nUsing SqlServer 2017 on Ubuntu 16.04", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10515", "title": "Oracle: DateTimeOffset.Minute/Hour is client eval", "body": "See \r\nWhere_datetimeoffset_minute_component\r\nWhere_datetimeoffset_hour_component\r\n\r\nThey generate different results from CLR. Presently client evaluated.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10513", "title": "Query: SqlGeneration optimizations are misplaced for providers to override", "body": "In DefaultQuerySqlGenerator, we have private method `ApplyOptimizations` which runs few visitors over the expression to make it suitable for SqlGeneration. At present they are called from our base methods (providers does not have access to the method). We have provided hooks for providers to override the code but all those hooks are before we run optimizations. Which may not be correct in all cases.\r\nIn the case of Oracle provider, it needs to exclude ordering by constant/parameter. But by the time we apply optimization it has already processed and printed \"ORDER BY\" and there is no way to back out.\r\n\r\nThere are potentially multiple ways to resolve this.\r\n- This is second time, we ran into issue of backing out. First one was #9951 . Ideally, the SQL generation and sql tampering should be separate visitor so generator knows what is exactly the tree before entering any node.\r\n- If we try to optimize both of them by combining into 1 visitor (like current one) then we should pull out all optimizations in QM visitor which are not going to change based on parameters.\r\n- Another approach would be to make method protected for providers to call it themselves.\r\n- Or add more hooks so that providers can get expression while visiting after processing.\r\n\r\nThis also has some intersection with #9143, #10514 \r\n#9143 covers BooleanConditionTranslatingExpressionVisitor which is not needed for postgre but we are applying it anyway in ApplyOptimizations without considering the providers.\r\n#10514 Null semantics at present happens in ApplyOptimizations so providers have no way to influence or opt out of it.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10462", "title": "SqlServer: EF.Functions.FreeText which takes list of columns as parameter", "body": "PR #10408 is adding support for `EF.Functions.FreeText`. In SQL server, `FREETEXT` also takes a list of columns as parameter. Creating this issue to determine design of client side API and implement translation according to that. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10433", "title": "Query: Distinct on non-materialized QSRE could give incorrect result", "body": "https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore.Specification.Tests/Query/GearsOfWarQueryTestBase.cs#L2726-L2738\r\n\r\nGenerates\r\n```SQL\r\nSELECT [t].[HasSoulPatch]\r\nFROM (\r\n    SELECT DISTINCT [ig].*\r\n    FROM [Gears] AS [ig]\r\n    WHERE [ig].[Discriminator] IN (N'Officer', N'Gear')\r\n) AS [t]\r\n```\r\nThis could generate incorrect results if `Gears` table has some non-mapped columns. So even though expectation is distinct records there could be duplicates.\r\nWe should probably expand * projection to full list of mapped properties here to get closer to linq behavior.\r\n\r\n@anpete @divega @ajcvickers - thoughts?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10419", "title": "Query: ApplyOptimizations which are not parameter dependents during compilation", "body": "https://github.com/aspnet/EntityFrameworkCore/blob/82339be400132a6020cb3d594bdc7b716a845e26/src/EFCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs#L291-L340\r\n\r\nA decent amount of processing can be moved to compile time rather than SQL gen time in cases where it does not depend on parameter value.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10410", "title": "Query: Order By (Select 1) can be omitted for Sql without skip/take", "body": "```SQL\r\nSELECT [c].[CustomerID], [c].[Address], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[ContactTitle], [c].[Country], [c].[Fax], [c].[Phone], [c].[PostalCode], [c].[Region]\r\nFROM [Customers] AS [c]\r\nORDER BY (SELECT 1)\r\n```\r\nCan omit Order by here since there is no skip/take. (Test OrderBy_True)\r\nAt present while generating ordering we don't have access to current select expression to look at skip/take.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10301", "title": "Query: QueryFilter with EntityTypeConfiguration are not failing to inject current context values", "body": "```C#\r\nusing System;\r\nusing System.Linq;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace EFSampleApp\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n\r\n\r\n            using (var db = new MyContext())\r\n            {\r\n                // Recreate database\r\n                db.Database.EnsureDeleted();\r\n                db.Database.EnsureCreated();\r\n\r\n                // Seed database\r\n\r\n\r\n                db.SaveChanges();\r\n            }\r\n\r\n            using (var db = new MyContext())\r\n            {\r\n                // Run queries\r\n                db.Blogs.ToList();\r\n                db.Indirection.TenantId = 1;\r\n                db.Blogs.ToList();\r\n                db.Indirection.TenantId = 2;\r\n                db.Blogs.ToList();\r\n                db.Indirection.TenantId = 3;\r\n                db.Blogs.ToList();\r\n            }\r\n\r\n            Console.WriteLine(\"Program finished.\");\r\n        }\r\n    }\r\n\r\n\r\n    public class MyContext : DbContext\r\n    {\r\n        private static ILoggerFactory LoggerFactory => new LoggerFactory().AddConsole(LogLevel.Trace);\r\n        public Indirection Indirection = new Indirection();\r\n\r\n        // Declare DBSets\r\n        public DbSet<Blog> Blogs { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            // Select 1 provider\r\n            optionsBuilder\r\n                .UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=_ModelApp;Trusted_Connection=True;Connect Timeout=5;ConnectRetryCount=0\")\r\n                //.UseSqlite(\"filename=_modelApp.db\")\r\n                //.UseInMemoryDatabase(databaseName: \"_modelApp\")\r\n                .EnableSensitiveDataLogging()\r\n                .UseLoggerFactory(LoggerFactory);\r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            // Configure model\r\n            new Configuration(this).Configure(modelBuilder.Entity<Blog>());\r\n\r\n        }\r\n    }\r\n\r\n    public class Configuration : IEntityTypeConfiguration<Blog>\r\n    {\r\n        public Configuration(MyContext context)\r\n        {\r\n            Context = context;\r\n        }\r\n\r\n        public MyContext Context { get; }\r\n\r\n        public void Configure(EntityTypeBuilder<Blog> builder)\r\n        {\r\n            builder.HasQueryFilter(e => e.Id == Context.Indirection.TenantId);\r\n        }\r\n    }\r\n\r\n    public class Indirection\r\n    {\r\n        public int TenantId { get; set; }\r\n    }\r\n\r\n    public class Blog\r\n    {\r\n        public int Id { get; set; }\r\n    }\r\n}\r\n\r\n```\r\nThe generated SQL is same for all cases causing incorrect results in version: 2.0.0\r\n& throws exception as in #10271 \r\n\r\nWork-around: Configure filter in `OnModelCreating` directly.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10231", "title": "Test: Query: Skip/Take without order by gives rise to non-deterministic results in tests", "body": "https://github.com/aspnet/EntityFrameworkCore/blob/b86eb8548a0deedc1199c3b4bc6b8632bd7824e3/src/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs#L1168-L1178\r\n\r\n&\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/b86eb8548a0deedc1199c3b4bc6b8632bd7824e3/src/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs#L1305-L1314\r\n\r\nProviders where the default ordering of records is not same as ordering by PK fails on the tests. We generate warning for skip/take without order by. We should not write non-deterministic tests. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10228", "title": "SQLite: Make AUTOINCREMENT more first-class", "body": "```C#\r\npublic partial class Preference\r\n{\r\n    public int PreferenceId { get; set; }\r\n    public string Name { get; set; }\r\n    public int? Value { get; set; }\r\n    public string ValueString { get; set; }\r\n}\r\nmodelBuilder.Entity<Preference>(entity =>\r\n{\r\n    entity.HasKey(e => e.PreferenceId);\r\n\r\n    entity.Property(e => e.PreferenceId).HasColumnName(\"PreferenceID\");\r\n\r\n    entity.Property(e => e.Name).HasMaxLength(50);\r\n\r\n    entity.Property(e => e.Value).HasDefaultValueSql(@\"((0))\");\r\n\r\n    entity.Property(e => e.ValueString)\r\n        .HasMaxLength(50)\r\n        .HasDefaultValueSql(@\"('')\");\r\n});\r\n```\r\nGenerates following migration\r\n```C#\r\nmigrationBuilder.CreateTable(\r\n    name: \"Preference\",\r\n    columns: table => new\r\n    {\r\n        PreferenceID = table.Column<int>(nullable: false)\r\n            .Annotation(\"Sqlite:Autoincrement\", true),\r\n        Name = table.Column<string>(maxLength: 50, nullable: true),\r\n        Value = table.Column<int>(nullable: true, defaultValueSql: \"((0))\")\r\n            .Annotation(\"Sqlite:Autoincrement\", true),\r\n        ValueString = table.Column<string>(maxLength: 50, nullable: true, defaultValueSql: \"('')\")\r\n    },\r\n    constraints: table =>\r\n    {\r\n        table.PrimaryKey(\"PK_Preference\", x => x.PreferenceID);\r\n    });\r\n```\r\n\r\nThis is because of ad-hoc logic here \r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/b86eb8548a0deedc1199c3b4bc6b8632bd7824e3/src/EFCore.Sqlite.Core/Migrations/Internal/SqliteMigrationsAnnotationProvider.cs#L34-L38\r\n\r\nAnd due to other hacks, later all annotations which are not on PK gets ignored. We should make autoincrement a first class for provider just like how SqlServer deals with identity.\r\n\r\n@ErikEJ - SqlCE faces the same issue due to similar code and in SQL CE it tries to create multiple Identity columns failing at `Update-Database` command. You would also need to update SQL CE provider. (I found this after talking to customer on slack who hit issue on SQL CE)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10202", "title": "Query: ExpressionPrinter is not flexible", "body": "It only allows to extend constant Expression printing with non-overriding logic format. It should be extensible similar to default query sql gen. Providers should be able to override and provide for their own custom Expressions. In the natural flow, relational should just override VisitConstant method.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10188", "title": "Query: ToList in projection for async query hangs if rooted at context", "body": "Following query works (Fixed in #9128)\r\n```C#\r\nvar asyncNav = db.Blogs\r\n    .Select(a => new\r\n    {\r\n        a.Id,\r\n        Posts = a.Posts.Select(m => new { m.Id }).ToList()\r\n    }).ToListAsync().GetAwaiter().GetResult();\r\n```\r\nBut following hangs (sync version works though)\r\n```C#\r\nvar asyncRoot = db.Blogs\r\n    .Select(a => new\r\n    {\r\n        a.Id,\r\n        Posts = db.Posts.Where(m => m.BlogId == a.Id).Select(m => new { m.Id }).ToList()\r\n    }).ToListAsync().GetAwaiter().GetResult();\r\n```\r\nThe only difference is, using DbSet instead of going through navigation property.\r\n\r\nRepro Code:\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace EFSampleApp\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            using (var db = new MyContext())\r\n            {\r\n                // Recreate database\r\n                db.Database.EnsureDeleted();\r\n                db.Database.EnsureCreated();\r\n\r\n                // Seed database\r\n                db.AddRange(new Blog());\r\n\r\n                db.SaveChanges();\r\n            }\r\n\r\n            using (var db = new MyContext())\r\n            {\r\n                // Run queries\r\n                var syncNav = db.Blogs\r\n                    .Select(a => new\r\n                    {\r\n                        a.Id,\r\n                        Posts = a.Posts.Select(m => new {m.Id}).ToList()\r\n                    }).ToList();\r\n\r\n                var asyncNav = db.Blogs\r\n                    .Select(a => new\r\n                    {\r\n                        a.Id,\r\n                        Posts = a.Posts.Select(m => new { m.Id }).ToList()\r\n                    }).ToListAsync().GetAwaiter().GetResult();\r\n\r\n                var syncRoot = db.Blogs\r\n                    .Select(a => new\r\n                    {\r\n                        a.Id,\r\n                        Posts = db.Posts.Where(m => m.BlogId == a.Id).Select(m => new {m.Id}).ToList()\r\n                    }).ToList();\r\n\r\n                var asyncRoot = db.Blogs\r\n                    .Select(a => new\r\n                    {\r\n                        a.Id,\r\n                        Posts = db.Posts.Where(m => m.BlogId == a.Id).Select(m => new { m.Id }).ToList()\r\n                    }).ToListAsync().GetAwaiter().GetResult();\r\n\r\n            }\r\n\r\n            Console.WriteLine(\"Program finished.\");\r\n        }\r\n    }\r\n\r\n\r\n    public class MyContext : DbContext\r\n    {\r\n        // Declare DBSets\r\n        public DbSet<Blog> Blogs { get; set; }\r\n        public DbSet<Post> Posts { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            // Select 1 provider\r\n            optionsBuilder\r\n                .UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=_ModelApp;Trusted_Connection=True;Connect Timeout=5;ConnectRetryCount=0\")\r\n                //.UseSqlite(\"filename=_modelApp.db\")\r\n                //.UseInMemoryDatabase(databaseName: \"_modelApp\")\r\n                .EnableSensitiveDataLogging()\r\n                .UseLoggerFactory(new LoggerFactory().AddConsole(LogLevel.Trace));\r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            // Configure model\r\n        }\r\n    }\r\n\r\n    public class Blog\r\n    {\r\n        public int Id { get; set; }\r\n        public virtual ICollection<Post> Posts { get; set; }\r\n    }\r\n\r\n    public class Post\r\n    {\r\n        public int Id { get; set; }\r\n        public int BlogId { get; set; }\r\n        public virtual Blog Blog { get; set; }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10116", "title": "Query: OrderBy(entity) mean different things across relational/non-relational providers", "body": "```\r\nvar query = db.Posts.OrderBy(p => p.Blog).ToList();\r\n```\r\nAt present when there is query which is ordering by an entity type, when evaluated on server converts orderby clause to ordering on PK properties. Since this happens during SqlTranslation, InMemory does not do this. Because of this, if entityType does not implement IComparer then InMemory throws exception whereas relational provider would just work fine. On the other hand, if there IComparer implemented and has different comparison order than keys then relational results would be incorrect.\r\n\r\nWe should decide on one behavior and make it consistent across relational/non-relational providers. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10104", "title": "Query: Include should use a robust way to identity nullable QSRE in IncludeResultOperator", "body": "While fixing #10045, we added nullable and convert node around QSRE because during include we lack the information about QSRE. As a side effect during SelectExpression.AddToOrderBy we need to pattern match both ways apart from expressionEqualityComparer. Same is the case in Distinct erasing order by or include trying to find if projection/orderby has been added or not.\r\nInstead we should try to accurately find out nullability of QSRE in include so that rest of stack can be consistent about it and does not require to look for multiple patterns when searching.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10101", "title": "Query: Select.Include.OrderBy ignores the include", "body": "```C#\r\n                    var query2 = context.Set<OrderLine9912>()\r\n                        .Select(o => o.Order)\r\n                        .Include(o => o.Customer)\r\n                        .OrderBy(o => o.Id)\r\n                        .ToList();\r\n```\r\nIf OrderBy is present, we ignore the include, if it is absent then we do include correctly\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10060", "title": "Query: OrderBy OptionalNav.Property fails for InMemory", "body": "Test\r\n```C#\r\n        [ConditionalFact]\r\n        public virtual void Include_reference_collection_order_by_reference_navigation()\r\n        {\r\n            AssertIncludeQuery<Level1>(\r\n                l1s => l1s\r\n                    .Include(l1 => l1.OneToOne_Optional_FK.OneToMany_Optional)\r\n                    .OrderBy(l1 => l1.OneToOne_Optional_FK.Id),\r\n                l1s => l1s\r\n                    .Include(l1 => l1.OneToOne_Optional_FK.OneToMany_Optional)\r\n                    .OrderBy(l1 => MaybeScalar<int>(l1.OneToOne_Optional_FK, () => l1.OneToOne_Optional_FK.Id)),\r\n                expectedIncludes: new List<IExpectedInclude>\r\n                {\r\n                    new ExpectedInclude<Level1>(e => e.OneToOne_Optional_FK, \"OneToOne_Optional_FK\"),\r\n                    new ExpectedInclude<Level2>(e => e.OneToMany_Optional, \"OneToMany_Optional\", \"OneToOne_Optional_FK\")\r\n                });\r\n        }\r\n```\r\n\r\nFails for InMemory, works correctly in SQLite/SqlServer.\r\n\r\nThe query is NRE in L2O because it is accessing property on an optional navigation. We add null-compensation logic but we cast it back to non-nullable type which throws at runtime when encountering null.\r\nWe either need to remove null-compensation in order by or null-compensation should be robust enough not to throw this error.\r\nPlan\r\n```\r\n------ Test started: Assembly: Microsoft.EntityFrameworkCore.InMemory.FunctionalTests.dll ------\r\n\r\nTest 'Microsoft.EntityFrameworkCore.Query.ComplexNavigationsQueryInMemoryTest.Include_reference_collection_order_by_reference_navigation' failed:\r\n\tSystem.InvalidOperationException : Nullable object must have a value.\r\n\tat System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\r\n\tat lambda_method(Closure , TransparentIdentifier`2 )\r\n\tat System.Linq.EnumerableSorter`2.ComputeKeys(TElement[] elements, Int32 count)\r\n\tat System.Linq.EnumerableSorter`1.Sort(TElement[] elements, Int32 count)\r\n\tat System.Linq.OrderedEnumerable`1.<GetEnumerator>d__1.MoveNext()\r\n\tat System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\LinqOperatorProvider.cs(137,0): at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\r\n\tat System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n\tat System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\ComplexNavigationsQueryTestBase.cs(3965,0): at Microsoft.EntityFrameworkCore.Query.ComplexNavigationsQueryTestBase`2.AssertIncludeQuery[TItem1](Func`2 efQuery, Func`2 l2oQuery, List`1 expectedIncludes, Func`2 elementSorter, Func`2 clientProjection)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\ComplexNavigationsQueryTestBase.cs(3680,0): at Microsoft.EntityFrameworkCore.Query.ComplexNavigationsQueryTestBase`2.Include_reference_collection_order_by_reference_navigation()\r\n\tD:\\code\\EntityFrameworkCore\\test\\EFCore.InMemory.FunctionalTests\\Query\\ComplexNavigationsQueryInMemoryTest.cs(31,0): at Microsoft.EntityFrameworkCore.Query.ComplexNavigationsQueryInMemoryTest.Include_reference_collection_order_by_reference_navigation()\r\n\r\nOutput from Microsoft.EntityFrameworkCore.Query.ComplexNavigationsQueryInMemoryTest.Include_reference_collection_order_by_reference_navigation:\r\n  Entity Framework Core 2.0.1-rtm initialized 'ComplexNavigationsContext' using provider 'Microsoft.EntityFrameworkCore.InMemory' with options: StoreName=ComplexNavigationsQueryInMemoryFixture \r\n  Compiling query model: \r\n  'from Level1 l1 in \r\n      (from Level1 l1 in DbSet<Level1>\r\n      select [l1]).Include(\"OneToOne_Optional_FK.OneToMany_Optional\")\r\n  order by [l1].OneToOne_Optional_FK.Id asc\r\n  select [l1]'\r\n  Including navigation: '[l1].OneToOne_Optional_FK.OneToMany_Optional'\r\n  Optimized query model: \r\n  'from Level1 l1 in DbSet<Level1>\r\n  join Level2 l1.OneToOne_Optional_FK in DbSet<Level2>\r\n  on (Nullable<int>)Property([l1], \"Id\") equals Property([l1.OneToOne_Optional_FK], \"Level1_Optional_Id\") into l1.OneToOne_Optional_FK_group\r\n  from Level2 l1.OneToOne_Optional_FK in \r\n      (from Level2 l1.OneToOne_Optional_FK_groupItem in [l1.OneToOne_Optional_FK_group]\r\n      select [l1.OneToOne_Optional_FK_groupItem]).DefaultIfEmpty()\r\n  order by (int)[l1.OneToOne_Optional_FK]?.Id asc\r\n  select Level1 _Include(\r\n      queryContext: queryContext, \r\n      entity: [l1], \r\n      included: new object[]{ [l1.OneToOne_Optional_FK] }, \r\n      fixup: (QueryContext queryContext | Level1 entity | Object[] included) => \r\n      {\r\n          return !(bool ReferenceEquals(included[0], null)) ? \r\n          {\r\n              entity.OneToOne_Optional_FK = (Level2)included[0]\r\n              ((Level2)included[0]).OneToOne_Optional_FK_Inverse = entity\r\n              return Void queryContext.QueryBuffer.IncludeCollection(\r\n                  includeId: 0, \r\n                  navigation: Level2.OneToMany_Optional, \r\n                  inverseNavigation: Level3.OneToMany_Optional_Inverse, \r\n                  targetEntityType: EntityType: Level3, \r\n                  clrCollectionAccessor: ClrICollectionAccessor<Level2, ICollection<Level3>, Level3>, \r\n                  inverseClrPropertySetter: ClrPropertySetter<Level3, Level2>, \r\n                  tracking: False, \r\n                  instance: (Level2)included[0], \r\n                  valuesFactory: () => \r\n                      from Level3 l1.OneToOne_Optional_FK.OneToMany_Optional in DbSet<Level3>\r\n                      join AnonymousObject _l1.OneToOne_Optional_FK in \r\n                          (from Level1 l1 in DbSet<Level1>\r\n                          join Level2 l1.OneToOne_Optional_FK in DbSet<Level2>\r\n                          on (Nullable<int>)Property([l1], \"Id\") equals Property([l1.OneToOne_Optional_FK], \"Level1_Optional_Id\") into l1.OneToOne_Optional_FK_group\r\n                          from Level2 l1.OneToOne_Optional_FK in \r\n                              (from Level2 l1.OneToOne_Optional_FK_groupItem in [l1.OneToOne_Optional_FK_group]\r\n                              select [l1.OneToOne_Optional_FK_groupItem]).DefaultIfEmpty()\r\n                          select new AnonymousObject(new object[]{ (object)(Nullable<int>)EF.Property(?[l1.OneToOne_Optional_FK]?, \"Id\") })).Distinct()\r\n                      on Property([l1.OneToOne_Optional_FK.OneToMany_Optional], \"OneToMany_Optional_InverseId\") equals (Nullable<int>)object [_l1.OneToOne_Optional_FK].GetValue(0)\r\n                      order by object [_l1.OneToOne_Optional_FK].GetValue(0) asc\r\n                      select [l1.OneToOne_Optional_FK.OneToMany_Optional])\r\n          }\r\n           : default(Void)\r\n      }\r\n  )'\r\n  (QueryContext queryContext) => IEnumerable<Level1> _InterceptExceptions(\r\n      source: IEnumerable<Level1> _Select(\r\n          source: IOrderedEnumerable<TransparentIdentifier<TransparentIdentifier<Level1, IEnumerable<Level2>>, Level2>> _OrderBy(\r\n              source: IEnumerable<TransparentIdentifier<TransparentIdentifier<Level1, IEnumerable<Level2>>, Level2>> _SelectMany(\r\n                  source: IEnumerable<TransparentIdentifier<Level1, IEnumerable<Level2>>> _GroupJoin(\r\n                      outer: IEnumerable<Level1> EntityQuery(\r\n                          queryContext: queryContext, \r\n                          entityType: EntityType: Level1, \r\n                          key: Key: Level1.Id PK, \r\n                          materializer: (IEntityType entityType | ValueBuffer valueBuffer) => \r\n                          {\r\n                              instance = new Level1()\r\n                              instance.<Id>k__BackingField = int TryReadValue(valueBuffer, 0, Level1.Id)\r\n                              instance.<Date>k__BackingField = DateTime TryReadValue(valueBuffer, 1, Level1.Date)\r\n                              instance.<Name>k__BackingField = string TryReadValue(valueBuffer, 2, Level1.Name)\r\n                              return instance\r\n                          }\r\n                          , \r\n                          queryStateManager: False), \r\n                      inner: IEnumerable<Level2> EntityQuery(\r\n                          queryContext: queryContext, \r\n                          entityType: EntityType: Level2, \r\n                          key: Key: Level2.Id PK, \r\n                          materializer: (IEntityType entityType | ValueBuffer valueBuffer) => \r\n                          {\r\n                              instance = new Level2()\r\n                              instance.<Id>k__BackingField = int TryReadValue(valueBuffer, 0, Level2.Id)\r\n                              instance.<Date>k__BackingField = DateTime TryReadValue(valueBuffer, 1, Level2.Date)\r\n                              instance.<Level1_Optional_Id>k__BackingField = Nullable<int> TryReadValue(valueBuffer, 2, Level2.Level1_Optional_Id)\r\n                              instance.<Level1_Required_Id>k__BackingField = int TryReadValue(valueBuffer, 3, Level2.Level1_Required_Id)\r\n                              instance.<Name>k__BackingField = string TryReadValue(valueBuffer, 4, Level2.Name)\r\n                              return instance\r\n                          }\r\n                          , \r\n                          queryStateManager: False), \r\n                      outerKeySelector: (Level1 l1) => (Nullable<int>)int GetValueFromEntity(\r\n                          clrPropertyGetter: ClrPropertyGetter<Level1, int>, \r\n                          entity: l1), \r\n                      innerKeySelector: (Level2 l1.OneToOne_Optional_FK) => Nullable<int> GetValueFromEntity(\r\n                          clrPropertyGetter: ClrPropertyGetter<Level2, Nullable<int>>, \r\n                          entity: l1.OneToOne_Optional_FK), \r\n                      resultSelector: (Level1 l1 | IEnumerable<Level2> l1.OneToOne_Optional_FK_group) => TransparentIdentifier<Level1, IEnumerable<Level2>> CreateTransparentIdentifier(\r\n                          outer: l1, \r\n                          inner: l1.OneToOne_Optional_FK_group)), \r\n                  collectionSelector: (TransparentIdentifier<Level1, IEnumerable<Level2>> t0) => IEnumerable<Level2> DefaultIfEmpty(t0.Inner), \r\n                  resultSelector: (TransparentIdentifier<Level1, IEnumerable<Level2>> t0 | Level2 l1.OneToOne_Optional_FK) => TransparentIdentifier<TransparentIdentifier<Level1, IEnumerable<Level2>>, Level2> CreateTransparentIdentifier(\r\n                      outer: t0, \r\n                      inner: l1.OneToOne_Optional_FK)), \r\n              expression: (TransparentIdentifier<TransparentIdentifier<Level1, IEnumerable<Level2>>, Level2> t1) => (int)t1.Inner?.Id, \r\n              orderingDirection: Asc), \r\n          selector: (TransparentIdentifier<TransparentIdentifier<Level1, IEnumerable<Level2>>, Level2> t1) => Level1 _Include(\r\n              queryContext: queryContext, \r\n              entity: t1.Outer.Outer, \r\n              included: new object[]{ t1.Inner }, \r\n              fixup: (QueryContext queryContext | Level1 entity | Object[] included) => \r\n              {\r\n                  return !(bool ReferenceEquals(included[0], null)) ? \r\n                  {\r\n                      entity.OneToOne_Optional_FK = (Level2)included[0]\r\n                      ((Level2)included[0]).OneToOne_Optional_FK_Inverse = entity\r\n                      return Void queryContext.QueryBuffer.IncludeCollection(\r\n                          includeId: 0, \r\n                          navigation: Level2.OneToMany_Optional, \r\n                          inverseNavigation: Level3.OneToMany_Optional_Inverse, \r\n                          targetEntityType: EntityType: Level3, \r\n                          clrCollectionAccessor: ClrICollectionAccessor<Level2, ICollection<Level3>, Level3>, \r\n                          inverseClrPropertySetter: ClrPropertySetter<Level3, Level2>, \r\n                          tracking: False, \r\n                          instance: (Level2)included[0], \r\n                          valuesFactory: () => IOrderedQueryable<Level3> _ToQueryable(\r\n                              source: IEnumerable<Level3> _Select(\r\n                                  source: IOrderedEnumerable<TransparentIdentifier<Level3, AnonymousObject>> _OrderBy(\r\n                                      source: IEnumerable<TransparentIdentifier<Level3, AnonymousObject>> _Join(\r\n                                          outer: IEnumerable<Level3> EntityQuery(\r\n                                              queryContext: queryContext, \r\n                                              entityType: EntityType: Level3, \r\n                                              key: Key: Level3.Id PK, \r\n                                              materializer: (IEntityType entityType | ValueBuffer valueBuffer) => \r\n                                              {\r\n                                                  instance = new Level3()\r\n                                                  instance.<Id>k__BackingField = int TryReadValue(valueBuffer, 0, Level3.Id)\r\n                                                  instance.<Level2_Optional_Id>k__BackingField = Nullable<int> TryReadValue(valueBuffer, 1, Level3.Level2_Optional_Id)\r\n                                                  instance.<Level2_Required_Id>k__BackingField = int TryReadValue(valueBuffer, 2, Level3.Level2_Required_Id)\r\n                                                  instance.<Name>k__BackingField = string TryReadValue(valueBuffer, 3, Level3.Name)\r\n                                                  return instance\r\n                                              }\r\n                                              , \r\n                                              queryStateManager: False), \r\n                                          inner: IEnumerable<AnonymousObject> Distinct(IEnumerable<AnonymousObject> _Select(\r\n                                                  source: IEnumerable<TransparentIdentifier<TransparentIdentifier<ValueBuffer, IEnumerable<ValueBuffer>>, ValueBuffer>> _SelectMany(\r\n                                                      source: IEnumerable<TransparentIdentifier<ValueBuffer, IEnumerable<ValueBuffer>>> _GroupJoin(\r\n                                                          outer: IEnumerable<ValueBuffer> ProjectionQuery(\r\n                                                              queryContext: queryContext, \r\n                                                              entityType: EntityType: Level1), \r\n                                                          inner: IEnumerable<ValueBuffer> ProjectionQuery(\r\n                                                              queryContext: queryContext, \r\n                                                              entityType: EntityType: Level2), \r\n                                                          outerKeySelector: (ValueBuffer l1) => (Nullable<int>)int TryReadValue(l1, 0, Level1.Id), \r\n                                                          innerKeySelector: (ValueBuffer l1.OneToOne_Optional_FK) => Nullable<int> TryReadValue(l1.OneToOne_Optional_FK, 2, Level2.Level1_Optional_Id), \r\n                                                          resultSelector: (ValueBuffer l1 | IEnumerable<ValueBuffer> l1.OneToOne_Optional_FK_group) => TransparentIdentifier<ValueBuffer, IEnumerable<ValueBuffer>> CreateTransparentIdentifier(\r\n                                                              outer: l1, \r\n                                                              inner: l1.OneToOne_Optional_FK_group)), \r\n                                                      collectionSelector: (TransparentIdentifier<ValueBuffer, IEnumerable<ValueBuffer>> t0) => IEnumerable<ValueBuffer> DefaultIfEmpty(t0.Inner), \r\n                                                      resultSelector: (TransparentIdentifier<ValueBuffer, IEnumerable<ValueBuffer>> t0 | ValueBuffer l1.OneToOne_Optional_FK) => TransparentIdentifier<TransparentIdentifier<ValueBuffer, IEnumerable<ValueBuffer>>, ValueBuffer> CreateTransparentIdentifier(\r\n                                                          outer: t0, \r\n                                                          inner: l1.OneToOne_Optional_FK)), \r\n                                                  selector: (TransparentIdentifier<TransparentIdentifier<ValueBuffer, IEnumerable<ValueBuffer>>, ValueBuffer> t1) => new AnonymousObject(new object[]{ (object)(Nullable<int>)!(t1.Inner.IsEmpty) ? Nullable<int> TryReadValue(t1.Inner, 0, Level2.Id) : default(Nullable<int>) }))), \r\n                                          outerKeySelector: (Level3 l1.OneToOne_Optional_FK.OneToMany_Optional) => Nullable<int> GetValue(\r\n                                              queryContext: queryContext, \r\n                                              entity: l1.OneToOne_Optional_FK.OneToMany_Optional, \r\n                                              property: Level3.OneToMany_Optional_InverseId), \r\n                                          innerKeySelector: (AnonymousObject _l1.OneToOne_Optional_FK) => (Nullable<int>)object _l1.OneToOne_Optional_FK.GetValue(0), \r\n                                          resultSelector: (Level3 l1.OneToOne_Optional_FK.OneToMany_Optional | AnonymousObject _l1.OneToOne_Optional_FK) => TransparentIdentifier<Level3, AnonymousObject> CreateTransparentIdentifier(\r\n                                              outer: l1.OneToOne_Optional_FK.OneToMany_Optional, \r\n                                              inner: _l1.OneToOne_Optional_FK)), \r\n                                      expression: (TransparentIdentifier<Level3, AnonymousObject> t0) => object t0.Inner.GetValue(0), \r\n                                      orderingDirection: Asc), \r\n                                  selector: (TransparentIdentifier<Level3, AnonymousObject> t0) => t0.Outer), \r\n                              queryContext: queryContext))\r\n                  }\r\n                   : default(Void)\r\n              }\r\n          )), \r\n      contextType: TestModels.ComplexNavigationsModel.ComplexNavigationsContext, \r\n      logger: DiagnosticsLogger<Query>, \r\n      queryContext: Unhandled parameter: queryContext)\r\n  An exception occurred in the database while iterating the results of a query for context type 'Microsoft.EntityFrameworkCore.TestModels.ComplexNavigationsModel.ComplexNavigationsContext'.\r\n  System.InvalidOperationException: Nullable object must have a value.\r\n     at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\r\n     at lambda_method(Closure , TransparentIdentifier`2 )\r\n     at System.Linq.EnumerableSorter`2.ComputeKeys(TElement[] elements, Int32 count)\r\n     at System.Linq.EnumerableSorter`1.Sort(TElement[] elements, Int32 count)\r\n     at System.Linq.OrderedEnumerable`1.<GetEnumerator>d__1.MoveNext()\r\n     at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n     at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext() in D:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\LinqOperatorProvider.cs:line 131\r\n\r\n0 passed, 1 failed, 0 skipped, took 3.63 seconds (xUnit.net 2.2.0 build 3545).\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10023", "title": "Query: GroupBy Queryable does not use QueryableAdapter ", "body": "```\r\n        [ConditionalFact]\r\n        public virtual void GroupBy_anonymous_subquery()\r\n        {\r\n            AssertQuery<Customer>(\r\n                cs =>\r\n                    cs.Select(c => new { c.City, c.CustomerID })\r\n                        .GroupBy(a => from c2 in cs select c2),\r\n                assertOrder: true);\r\n        }\r\n```\r\nException:\r\n```\r\nTest 'Microsoft.EntityFrameworkCore.Query.GroupByQuerySqlServerTest.GroupBy_anonymous_subquery' failed: System.AggregateException : One or more errors occurred.\r\n---- System.ArgumentException : Expression of type 'System.Collections.Generic.IEnumerable`1[System.Linq.IGrouping`2[System.Collections.Generic.IEnumerable`1[Microsoft.EntityFrameworkCore.TestModels.Northwind.Customer],<>f__AnonymousType34`2[System.String,System.String]]]' cannot be used for return type 'System.Collections.Generic.IEnumerable`1[System.Linq.IGrouping`2[System.Linq.IQueryable`1[Microsoft.EntityFrameworkCore.TestModels.Northwind.Customer],<>f__AnonymousType34`2[System.String,System.String]]]'\r\n\tat System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n\tat System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n\tat System.Threading.Tasks.Task.Wait()\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\QueryTestBase.cs(83,0): at Microsoft.EntityFrameworkCore.Query.QueryTestBase`1.AssertQuery[TItem1](Func`2 query, Func`2 elementSorter, Action`2 elementAsserter, Boolean assertOrder, Int32 entryCount)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\GroupByQueryTestBase.cs(919,0): at Microsoft.EntityFrameworkCore.Query.GroupByQueryTestBase`1.GroupBy_anonymous_subquery()\r\n\tD:\\code\\EntityFrameworkCore\\test\\EFCore.SqlServer.FunctionalTests\\Query\\GroupByQuerySqlServerTest.cs(875,0): at Microsoft.EntityFrameworkCore.Query.GroupByQuerySqlServerTest.GroupBy_anonymous_subquery()\r\n\t----- Inner Stack Trace -----\r\n\tat System.Linq.Expressions.Expression.ValidateLambdaArgs(Type delegateType, Expression& body, ReadOnlyCollection`1 parameters)\r\n\tat System.Linq.Expressions.Expression.Lambda[TDelegate](Expression body, String name, Boolean tailCall, IEnumerable`1 parameters)\r\n\tat System.Linq.Expressions.Expression.Lambda[TDelegate](Expression body, Boolean tailCall, IEnumerable`1 parameters)\r\n\tat System.Linq.Expressions.Expression.Lambda[TDelegate](Expression body, ParameterExpression[] parameters)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\EntityQueryModelVisitor.cs(622,0): at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda[TResults]()\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\EntityQueryModelVisitor.cs(179,0): at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Storage\\Database.cs(70,0): at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](QueryModel queryModel)\r\n\t--- End of stack trace from previous location where exception was thrown ---\r\n\tat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\QueryCompiler.cs(164,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\QueryCompiler.cs(103,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass15_0`1.<Execute>b__0()\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\CompiledQueryCache.cs(69,0): at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\CompiledQueryCache.cs(44,0): at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\QueryCompiler.cs(99,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\EntityQueryProvider.cs(62,0): at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\r\n\tat Remotion.Linq.QueryableBase`1.GetEnumerator()\r\n\tat System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n\tat System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\TestUtilities\\QueryAsserter.cs(333,0): at Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserter`1.<AssertQuery>d__18`1.MoveNext()\r\n```\r\nMismatch here is IGrouping is on IQueryable but when we visit SubQueryExpression, it changes type to IEnumerable. We need to utilize `ProjectionExpressionVisitor.VisitSubQuery` method to introduce queryable adapter. \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10012", "title": "Test: Query: Add tests for composition after GroupBy aggregate", "body": "something like\r\n```C#\r\nvar query = context.Orders.GroupBy(o => o.CustomerID).Select(g => new { g.Key, Count = g.Count() })\r\n.Join(context.Customers, o => o.Key, c => c.CustomerID, (o, c) => new {C = c, o.Count});\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10003", "title": "RevEng: Don't scaffold facets for when type is aliased", "body": "https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore.Design/Scaffolding/Internal/RelationalScaffoldingModelFactory.cs#L846-L857\r\n\r\nWhen we have aliased column type, we use underlying type to generate facets. But then we modify ScaffoldingTypeInfo so that we scaffold `HasColumnType`. But we still leave out other facets. That means for underlying type like `nvarchar(16)` aliased as `MyType` we generate `property.HasColumnType(\"MyType\").HasMaxLength(16);` Which is redundant/ambiguous/incorrect.\r\n\r\nEither we can null out all facets. or We can apply facets to property only if inferred type. Or we can leave facets on property (in case we want to generate maxlength like #9580 ), and skip them while writing out the file.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10001", "title": "Query: Improve SQL for queries which are projecting out single result from collection in projection", "body": "```C#\r\nvar query = db.Users.Select(\r\n        u => new\r\n        {\r\n            u.Text,\r\n            T = u.Notifications.FirstOrDefault()\r\n        })\r\n    .ToList();\r\n```\r\nGenerates following SQL\r\n```SQL\r\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\r\n      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\n      SELECT [u].[Text], [u].[Id]\r\n      FROM [Users] AS [u]\r\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\r\n      Executed DbCommand (3ms) [Parameters=[@_outer_Id='1'], CommandType='Text', CommandTimeout='30']\r\n      SELECT TOP(1) [n].[Id], [n].[Message], [n].[UserId]\r\n      FROM [Notifications] AS [n]\r\n      WHERE @_outer_Id = [n].[UserId]\r\n```\r\nIt is N+1 queries. Since there is `FirstOrDefault` operator (hence only 1 related row max), instead of going through 2 queries form like include, we can just do cross apply (which include tries to avoid with 2 queries) since there is no duplicated data.\r\n\r\nExpected SQL:\r\n```\r\nSELECT [u].[Text], [u].[Id], [t].[Id], [t].[Message], [t].[UserId]\r\nFROM [Users] AS [u]\r\nCROSS APPLY (\r\n\tSELECT TOP(1) [n].[Id], [n].[Message], [n].[UserId]\r\n\tFROM [Notifications] AS [n]\r\n\tWHERE [u].[Id] = [n].[UserId]\r\n) AS [t]\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10001/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9969", "title": "Query: Translate GroupBy constant value followed by aggregate as table aggregate", "body": "Based on https://github.com/aspnet/EntityFrameworkCore/issues/2341#issuecomment-326918994 & https://github.com/aspnet/EntityFrameworkCore/issues/2341#issuecomment-334268880\r\n\r\n```C#\r\nvar query = context.Orders.Where(o => (o.OrderId > 0))\r\n.GroupBy(Param_0 => 0)\r\n.Select(Param_1 => new {\r\nP0 = Param_1.Key,\r\nP1 = Param_1.Count(),\r\nP2 = Param_1.Sum(elem => elem.Freight),\r\nP3 = Param_1.Max(elem => elem.ShipName),\r\nP4 = Param_1.Min(elem => elem.ShipAddress)\r\n});\r\n```\r\n\r\nQueries like above cannot be translated to relational group by since group by constant is invalid SQL\r\n```SQL\r\nselect CustomerID, count(*) from orders\r\ngroup by 0;\r\n```\r\nthrows\r\n```\r\nMsg 164, Level 15, State 1, Line 2\r\nEach GROUP BY expression must contain at least one column that is not an outer reference.\r\n```\r\n\r\nSince the purpose of such queries is just to get full aggregate of whole table rather than group-wise, we can perhaps rewrite QueryModel to simplify the task beforehand so our translation pipeline can work seamlessly. \r\n\r\nAs indicated by @bricelam , some of the frameworks are generating such queries (he can fill in more details), hence we should separately prioritize that work, hence filing this issue.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9969/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9824", "title": "Query: Remove TaskBlockingExpressionVisitor", "body": "It doesn't evaluate whole tree. It just looks at top level and if its Task, it calls .Result. It should be just a method. It will be breaking change because it is in DI.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9761", "title": "Data type 'nvarchar' is not supported in this form should also say which property", "body": "The exception message says what is wrong and how to fix but does not indicate which property it was on. We can probably improve the message.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9742", "title": "Query: Navigation rewrite throws null check on navigation", "body": "```c#\r\n        [Theory]\r\n        [InlineData(false)]\r\n        [InlineData(true)]\r\n        public virtual void Include_collection_with_multiple_conditional_order_by(bool useString)\r\n        {\r\n            using (var context = CreateContext())\r\n            {\r\n                var orders\r\n                    = useString\r\n                        ? context.Orders\r\n                            .Include(\"OrderDetails\")\r\n                            .OrderBy(o => o.OrderID > 0)\r\n                            .ThenBy(o => o.Customer != null ? o.Customer.City : String.Empty)\r\n                            .Take(5)\r\n                            .ToList()\r\n                        : context.Orders\r\n                            .Include(c => c.OrderDetails)\r\n                            .OrderBy(o => o.OrderID > 0)\r\n                            .ThenBy(o => o.Customer != null ? o.Customer.City : String.Empty)\r\n                            .Take(5)\r\n                            .ToList();\r\n\r\n                foreach (var order in orders)\r\n                {\r\n                    CheckIsLoaded(\r\n                        context,\r\n                        order,\r\n                        orderDetailsLoaded: true,\r\n                        productLoaded: false,\r\n                        customerLoaded: false,\r\n                        ordersLoaded: false);\r\n                }\r\n            }\r\n        }\r\n```\r\n```\r\nOutput from Microsoft.EntityFrameworkCore.Query.IncludeSqlServerTest.Include_collection_with_multiple_conditional_order_by(useString: False):\r\n  Entity Framework Core 2.1.0-preview1 initialized 'NorthwindRelationalContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: SensitiveDataLoggingEnabled CommandTimeout=600\r\n  \r\n  Compiling query model: \r\n  '(from Order o in \r\n      (from Order c in DbSet<Order>\r\n      select [c]).Include(\"OrderDetails\")\r\n  order by [o].OrderID > 0 asc, [o].Customer != null ? [o].Customer.City : __Empty_0 asc\r\n  select [o]).Take(__p_1)'\r\n  \r\n  Including navigation: '[c].OrderDetails'\r\nTest 'Microsoft.EntityFrameworkCore.Query.IncludeSqlServerTest.Include_collection_with_multiple_conditional_order_by(useString: True)' failed:\r\n\tSystem.InvalidOperationException : The operands for operator 'NotEqual' do not match the parameters of method 'op_Inequality'.\r\n\tat System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(ExpressionType binaryType, Expression left, Expression right, MethodInfo method, Boolean liftToNull)\r\n\tat System.Linq.Expressions.Expression.NotEqual(Expression left, Expression right, Boolean liftToNull, MethodInfo method)\r\n\tat System.Linq.Expressions.Expression.MakeBinary(ExpressionType binaryType, Expression left, Expression right, Boolean liftToNull, MethodInfo method, LambdaExpression conversion)\r\n\tat System.Linq.Expressions.Expression.MakeBinary(ExpressionType binaryType, Expression left, Expression right, Boolean liftToNull, MethodInfo method)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\ExpressionVisitors\\Internal\\NavigationRewritingExpressionVisitor.cs(372,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitBinary(BinaryExpression node)\r\n\tat System.Linq.Expressions.BinaryExpression.Accept(ExpressionVisitor visitor)\r\n\tat System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\ExpressionVisitors\\Internal\\NavigationRewritingExpressionVisitor.cs(381,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.VisitConditional(ConditionalExpression node)\r\n\tat System.Linq.Expressions.ConditionalExpression.Accept(ExpressionVisitor visitor)\r\n\tat System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n\tat Remotion.Linq.Clauses.Ordering.TransformExpressions(Func`2 transformation)\r\n\tat Remotion.Linq.Clauses.OrderByClause.TransformExpressions(Func`2 transformation)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\ExpressionVisitors\\Internal\\ExpressionTransformingQueryModelVisitor.cs(76,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ExpressionTransformingQueryModelVisitor`1.VisitOrderByClause(OrderByClause orderByClause, QueryModel queryModel, Int32 index)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\ExpressionVisitors\\Internal\\NavigationRewritingExpressionVisitor.cs(1439,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.NavigationRewritingQueryModelVisitor.VisitOrderByClause(OrderByClause orderByClause, QueryModel queryModel, Int32 index)\r\n\tat Remotion.Linq.Clauses.OrderByClause.Accept(IQueryModelVisitor visitor, QueryModel queryModel, Int32 index)\r\n\tat Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses(ObservableCollection`1 bodyClauses, QueryModel queryModel)\r\n\tat Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\ExpressionVisitors\\Internal\\NavigationRewritingExpressionVisitor.cs(238,0): at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.NavigationRewritingExpressionVisitor.Rewrite(QueryModel queryModel, QueryModel parentQueryModel)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\EntityQueryModelVisitor.cs(288,0): at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(QueryModel queryModel, Boolean asyncQuery)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Relational\\Query\\RelationalQueryModelVisitor.cs(1161,0): at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.OptimizeQueryModel(QueryModel queryModel, Boolean asyncQuery)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\EntityQueryModelVisitor.cs(165,0): at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Storage\\Database.cs(70,0): at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](QueryModel queryModel)\r\n\t--- End of stack trace from previous location where exception was thrown ---\r\n\tat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\QueryCompiler.cs(164,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\QueryCompiler.cs(103,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass15_0`1.<Execute>b__0()\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\CompiledQueryCache.cs(69,0): at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\CompiledQueryCache.cs(44,0): at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\QueryCompiler.cs(99,0): at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore\\Query\\Internal\\EntityQueryProvider.cs(62,0): at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\r\n\tat Remotion.Linq.QueryableBase`1.GetEnumerator()\r\n\tat System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n\tat System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\IncludeTestBase.cs(3109,0): at Microsoft.EntityFrameworkCore.Query.IncludeTestBase`1.Include_collection_with_multiple_conditional_order_by(Boolean useString)\r\n\tD:\\code\\EntityFrameworkCore\\test\\EFCore.SqlServer.FunctionalTests\\Query\\IncludeSqlServerTest.cs(1429,0): at Microsoft.EntityFrameworkCore.Query.IncludeSqlServerTest.Include_collection_with_multiple_conditional_order_by(Boolean useString)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9591", "title": "Query: Distinct GroupBy fails for InMemory", "body": "Query\r\n```C#       \r\n        [ConditionalFact]\r\n        public virtual void Select_Distinct_GroupBy()\r\n        {\r\n            AssertQuery<Order>(\r\n                os => os.Select(o => new { o.CustomerID, o.EmployeeID }).OrderBy(a => a.EmployeeID).Distinct().GroupBy(o => o.CustomerID),\r\n                elementSorter: GroupingSorter<string, object>(),\r\n                elementAsserter: GroupingAsserter<string, dynamic>(d => d.EmployeeID));\r\n        }\r\n```\r\nFails in assertion\r\nQuery Plan\r\n```\r\nOutput from Microsoft.EntityFrameworkCore.Query.SimpleQueryInMemoryTest.Select_Distinct_GroupBy:\r\n  Entity Framework Core 2.1.0-preview1 initialized 'NorthwindContext' using provider 'Microsoft.EntityFrameworkCore.InMemory' with options: SensitiveDataLoggingEnabled StoreName=Northwind \r\n  Compiling query model: \r\n  '(from Order o in DbSet<Order>\r\n  order by [o].EmployeeID asc\r\n  select new <>f__AnonymousType273<string, Nullable<int>>(\r\n      [o].CustomerID, \r\n      [o].EmployeeID\r\n  ))\r\n  .Distinct()\r\n  .GroupBy([o].CustomerID, new <>f__AnonymousType273`2(CustomerID = [o].CustomerID, EmployeeID = [o].EmployeeID))'\r\n  Optimized query model: \r\n  '(from Order o in DbSet<Order>\r\n  order by [o].EmployeeID asc\r\n  select new <>f__AnonymousType273<string, Nullable<int>>(\r\n      [o].CustomerID, \r\n      [o].EmployeeID\r\n  ))\r\n  .Distinct()\r\n  .GroupBy([o].CustomerID, new <>f__AnonymousType273`2(CustomerID = [o].CustomerID, EmployeeID = [o].EmployeeID))'\r\n  (QueryContext queryContext) => IEnumerable<IGrouping<string, <>f__AnonymousType273<string, Nullable<int>>>> _InterceptExceptions(\r\n      source: IEnumerable<IGrouping<string, <>f__AnonymousType273<string, Nullable<int>>>> _GroupBy(\r\n          source: IEnumerable<ValueBuffer> Distinct(IOrderedEnumerable<ValueBuffer> _OrderBy(\r\n                  source: IEnumerable<ValueBuffer> ProjectionQuery(\r\n                      queryContext: queryContext, \r\n                      entityType: EntityType: Order), \r\n                  expression: (ValueBuffer o) => Nullable<int> TryReadValue(o, 2, Order.EmployeeID), \r\n                  orderingDirection: Asc)), \r\n          keySelector: (ValueBuffer o) => string TryReadValue(o, 1, Order.CustomerID), \r\n          elementSelector: (ValueBuffer o) => new <>f__AnonymousType273<string, Nullable<int>>(\r\n              string TryReadValue(o, 1, Order.CustomerID), \r\n              Nullable<int> TryReadValue(o, 2, Order.EmployeeID)\r\n          )), \r\n      contextType: TestModels.Northwind.NorthwindContext, \r\n      logger: DiagnosticsLogger<Query>, \r\n      queryContext: queryContext)\r\n```\r\n\r\nThe issue is Distinct is being applied on ValueBuffers which is not going work hence we generate duplicate entries in grouping. The root cause is we are optimizing away the selector in `EntityQueryModelVisitor.VisitSelectClause` to skip for GroupBy or All result operator. But we cannot do that if there are other result operators.\r\n\r\nDisabling test for inmemory for now.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9580", "title": "RevEng: Generate Validation attribute always", "body": "We scaffold `Required` whenever needed.\r\nFor `StringLength`/`MaxLength` we scaffold it unless the type is specified explicitly using `HasColumnType` (which is needed if type is `char(10)` or similar). We may generate the length facet even if that would be redundant so that framework allowing validations can take advantage of it.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9579", "title": "Metadata: Implement IsFixedLength API", "body": "To distinguish between `char` & `nvarchar` So that we can generate `StringLength` for `char(10)` in reveng.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9577", "title": "Query Testing: Failure of assertion framework should give better information", "body": "The following output makes it ambiguous if there was error with linq query or just test. \r\n\r\n```\r\nTest 'Microsoft.EntityFrameworkCore.Query.SimpleQuerySqlServerTest.OrderBy_Skip_GroupBy' failed: System.AggregateException : One or more errors occurred.\r\n---- System.ArgumentException : At least one object must implement IComparable.\r\n\tat System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n\tat System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n\tat System.Threading.Tasks.Task.Wait()\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\QueryTestBase.cs(83,0): at Microsoft.EntityFrameworkCore.Query.QueryTestBase`1.AssertQuery[TItem1](Func`2 query, Func`2 elementSorter, Action`2 elementAsserter, Boolean assertOrder, Int32 entryCount)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\Query\\SimpleQueryTestBase.GroupBy.cs(513,0): at Microsoft.EntityFrameworkCore.Query.SimpleQueryTestBase`1.OrderBy_Skip_GroupBy()\r\n\tD:\\code\\EntityFrameworkCore\\test\\EFCore.SqlServer.FunctionalTests\\Query\\SimpleQuerySqlServerTest.GroupBy.cs(438,0): at Microsoft.EntityFrameworkCore.Query.SimpleQuerySqlServerTest.OrderBy_Skip_GroupBy()\r\n\t----- Inner Stack Trace -----\r\n\tat System.Collections.Comparer.Compare(Object a, Object b)\r\n\tat System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)\r\n\tat System.Linq.EnumerableSorter`2.CompareKeys(Int32 index1, Int32 index2)\r\n\tat System.Linq.EnumerableSorter`1.QuickSort(Int32[] map, Int32 left, Int32 right)\r\n\tat System.Linq.EnumerableSorter`1.Sort(TElement[] elements, Int32 count)\r\n\tat System.Linq.OrderedEnumerable`1.<GetEnumerator>d__1.MoveNext()\r\n\tat System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n\tat System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\TestUtilities\\TestHelpers.cs(428,0): at Microsoft.EntityFrameworkCore.TestUtilities.TestHelpers.AssertResults[T](IList`1 expected, IList`1 actual, Func`2 elementSorter, Action`2 elementAsserter, Boolean verifyOrdered)\r\n\tD:\\code\\EntityFrameworkCore\\src\\EFCore.Specification.Tests\\TestUtilities\\QueryAsserter.cs(354,0): at Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserter`1.<AssertQuery>d__18`1.MoveNext()\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9562", "title": "Query: Cleanup custom method implementations ", "body": "At present we have GroupBy async version in following classes.\r\n- `RelationalResultOperatorHandler`\r\n- `AsyncQueryMethodProvider`\r\n- `AsyncLinqOperatorProvider`\r\n- `ResultOperatorHandler`\r\n\r\nWe have 2 ways of grouping, streaming and pure client eval but we have multiple levels of async pipeline :trollface: \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9457", "title": "Test: Use mix of ConnectionString/Connection in SqlServer functional tests", "body": "The new testing pattern uses shared connection between tests in a fixture. We should have mix of connection string and connection pattern since most of our customers uses connection string.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9396", "title": "Metadata: Exception is not thrown for unmapped navigation property", "body": "Model\r\n```C#\r\npublic class User\r\n{\r\n    public ICollection<Warn> Warns { get; set; }\r\n    public int Id { get; set; }\r\n}\r\n\r\npublic class Warn\r\n{\r\n    public int Id { get; set; }\r\n    public string Reason { get; set; }\r\n    public DateTime Timestamp { get; set; }\r\n    public User Moderator { get; set; }\r\n    public User User { get; set; }\r\n}\r\n\r\n//OnModelCreating\r\nmodelBuilder.Entity<User>();\r\n```\r\n\r\nGenerates schema\r\n```SQL\r\n      CREATE TABLE [User] (\r\n          [Id] int NOT NULL IDENTITY,\r\n          CONSTRAINT [PK_User] PRIMARY KEY ([Id])\r\n      );\r\n```\r\n\r\nSince there are 2 inverse navigation we cannot find out relationship by convention hence we don't discover `Warn` entity type. But we don't throw for unmapped `User.Warns`\r\n*Not a regression*\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9395", "title": "Query: Apply CompositePredicateExpressionVisitor to join predicates", "body": "At present it is applied to `SelectExpression.Predicate` only", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/11de27faaec61e7adeed0e5f4bc78cbec17f308f", "message": "Test: Cross compile Specification.Tests with netcoreapp2.1\n\nResolves #10558"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/778eeb31f5b79d1d47231fc34479d459fc4e7248", "message": "Query: Disable translation to constant expression in IndexOf translator\nWork-around for #10548"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/98f79ba2a9f163a5c16cf0a59ad2007dbe0de877", "message": "Query: Add Sqlite implementation for DateDiff functions\n\nAdd translation for DateTime.Today\nCombine translators for DateTime members in Sqlite\n\nPart of #9585\nResolves #4108\nResolves #10468"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/cc8713ce82d17974702cb46e5929f5f9a5685360", "message": "Benchmarks: Remove coupling with aspnetci\n\nRemove benchmarks from EFCore.sln\nUse fixed package version in project so automation does not update them."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/34949638e9bdc63a50602661eb8bc40b2577ac7d", "message": "Fix Oracle build break\nAdd Oracle.FunctionalTests into Core.sln"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/833ebb78d6bcc5c41ec03495d2497b8183122a60", "message": "Disable flaky tests on Ubuntu\nSee issue#10518"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/4be9492fb3ff12e9661446314bdd69770d1a5df1", "message": "Oracle: Combine DateTime member translator.\n\nClient Eval DateTimeOffset.Hour/Minute (See issue#10515)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ecfe631cc31c9de4525a9bcd9e57a5481122c7b0", "message": "Query: Refine SqlServer DateTime/DateTimeOffset translators\nAdd assertions for Sqlite specific translators"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ee57d618a8202f0d55bd93e8481aee0bc3c62587", "message": "Disabled failing oracle tests"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a1c03d96d16a3754c243b425fed3713af220428f", "message": "Cleanup in FreeText function PR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a14ec863e0b209ee00475fd4884fa2e16509cd43", "message": "Remove unused usings"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/03ff0b7b3cfa3e7152ae9588f0f251faac64737b", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/8e28b7e907dcddb803e9240048be0b5e647fbc8a", "message": "Remove redundant FactAttribute from tests\n\nResolves #8050\n\nWe depend on xunit 2.3.0 which has fix for the issue forcing us to write attributes in derived classes."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6abe09ef446b9cd1017d6b0c4f36d1ab8264237a", "message": "Tools: Add Revert option to Remove-Migration\n\nResolves #1972\n\nAlso updated T4 template for string resources generation. It had some weird issues.\n\nDid manual verification with 1 or more migrations using PMC & dotnet ef both."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/810504a14211d62e693149d23cf0d90ed8342644", "message": "Query: Make InExpression.Equals null safe\nWhen there is InExpression in order by and used with collection include query, we threw NRE when trying to lift the order by in SelectExpression\n\nResolves #9951"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/56219ef35d2263ab8c5e94e8e4c18f09924889cb", "message": "Query: Preserve Schema in SqlFunctionExpression while visiting children\n\nIssue was fixed in #10370\nVisitChildren method was incorrect\n\nThis adds test for the scenario\n\nResolves #10421"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a6ae6251b286c2fb5379d7db46d86cd05c93c328", "message": "Query: Expand value list in InExpression before writing SQL\n\nIssue:\nWhen the InExpression.Values is empty list, expression is always false. We used to expand values from parameters at time of generating SQL.\nWhen OrderBy contains, the InExpression gets expanded to conditional for value type statement and later we find out that InExpression evaluates to false. But by then we have written incorrect SQL already.\n\nFix:\nPre-process and condense InExpression based on parameter values using a visitor. So that ORDER BY is away of final condensed form before writing SQL.\n\nAlso added small optimization\n!(true) -> false & vice-versa.\n\nCombined logic to generate InExpression into SQL in single method.\nP.S. all Generate* method should be void.\n\nFirst Part of #9951"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6281180714df2659604bce00bee793ced5788cf1", "message": "Query: Add support for instance based SqlFunction\n\nPart of #10109"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/82339be400132a6020cb3d594bdc7b716a845e26", "message": "Query: Some cleanup in DefaultQuerySqlGenerator"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9daecfd5b915336c2242ab11de471ac6f3d151ad", "message": "RevEng: Scaffold annotations for key found by convention/annotation\n\n(also broke long lines)\n\nResolves #9530"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/4b0fa8ee598012ecef9de770d1ed410b2d7ac2ea", "message": "Style: Remove enforcement of expression body on methods/constructor due to differences between source/test"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7f7ea6b34b9f54f9bea5de82048f81180cff5be6", "message": "Test: Use CurrentDirectory instead of AppContext.BaseDirectory\n\nAppContext.BaseDirectory points to TestHost which at times may be un-writable\nFor net461 in `dotnet test` its inside dotnet SDK folder\nFor VS its inside VS installation folder\nCurrentDirectory points to bin output of the source hence will always be writable\n\nThis applies to database files which we explicitly create. By default LocalDb will use its default location.\n\nResolves #4553\nRelates to #8902"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/90fc1300b4f059a6b262e960e2a3a2f091891fe4", "message": "More Code Cleanup"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/06a1471047bbe226eee7848305d4f8c2e7b2dacd", "message": "Code Cleanup in Benchmarks Solution\n\nAdded additional config to avoid converting Methods/Ctors to Expression Body. Will add similar to Tests too."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c2b912853eaaf8e08c77875c2a40969902072990", "message": "Query: Process expression to lift properly in LiftOrderBy\n\nWe used to rely on null check rather than properly checking for expression. This improves our logic when to add ordering expression to projection when lifting it from subquery\nWe started hitting this when we added Debug check in `LiftExpressionFromSubquery`"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6744976a66851288634fb54bfe4483a41a975a30", "message": "Add .editorConfig file"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c031c2c73820b815605f845404949e0fb733828e", "message": "Query: Fix an issue in SubqueryProjection creation which caused invalid select expression\n\nIssue: All projections in a subquery are required to be ColumnExpression/AliasExpression/ColumnReferenceExpression so that they can be lifted to outer select expression through LiftExpressionFromSubquery method.\nIn this particular case the expression had convert around it. Because its computed name was unique we did not change it causing invariant to break which later got converted to null projection.\n\nResolves #10273"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/f7f6d6e23c8e47e44a61983827d9e41f2afe5cc7", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a7aa5cf0f9d02feba9ddfb78f113ac42b7fe955f", "message": "Set ProjectStarTable whenever QSRE is being projected out\n\nResolves #10112\n\nIssue here was, we set ProjectStarTable for QSRE only in subquery. But in this case even though it is top level, it later gets pushed down due to Take-Count sequence causing it to be subquery without projection & projectStarTable set.\n\nWhenever we are projecting QSRE, we can set ProjectStarTable regardless of level. It is just a mapping for us between QSRE returned by queryModel & ProjectStarTable returned by SelectExpression."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9fde06e95daecd423a4525e779ee4740a67e120f", "message": "RevEng: Remove incorrect warning about bool column with default being made nullable if the column is already nullable\n\nAlso we marked required column as nullable when we derived nullable clr type\n\nResolves #10144\nResolves #10305"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e7a0c726715fc9b7c8c6727d9c143612a037fedf", "message": "Query: Convert non-context related property accesses to constant in query filters\n\nResolves #10271"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/22955263cad24c9a01329e7980e00dd4cbe667aa", "message": "Code cleanup"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/2178b3755d50862c69cb398f632af25ab90da76c", "message": "Upgrade SqlServer LocalDb version to 2016\n\nResolves #10150"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c1102c9c0665302c4dc0cdf5db3dd45fe371e866", "message": "Test: Run SqlServer.FunctionalTests in own group"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3a5e0c3e6c0636ecdbdbd0e1acd257f620e70363", "message": "Remove defensive code\nResolves #10162"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7b5cc8f3ff01013608f6867838ba5335a17216c7", "message": "Disable running CrossStore.FunctionalTests with SqlServer.FunctionalTests in parallel"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/fc2ee5f288dba5d8dd4b72982300ccd045be556d", "message": "Improve perf of TypeNameHelper\n\nResolves #10191"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/32c336e2115287f309f20981ce2a46cc506f3072", "message": "Design: Put system namespaces first in generated code\nDon't generate empty namespace if context is not in namespce\n\nResolves #10225\nResolves #2467"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/16e99c5faba1f806c8dbd84390ed8efa5972feea", "message": "Query: Apply conditional collapse to comparisons only for truly comparison expressions\n\nIssue:\nWe have optimization to convert `a ? b : c` where a, b, c are all comparison expression to `a && b || c && d`.\nFor this case, while b seemed like comparison expression but it was in such pattern due to being nullable bool. (b == true)\nA true comparison expression is of type bool since it gives true/false answer. If it is not then its value type expression.\nIn user case, since we tried incorrect optimization, we ended up with mismatched types in AndAlso expression.\n\nFix is to improve logic of IsComparisonExpression to only identify boolean expression\n\nResolves #9468"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/192cb70e6620f572d782dac1542d35e356904e4a", "message": "Query: Consider more patterns for matching orderby while generating collection query model for include\n\nResolves #9499"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/746ff59fae3d587269046604ecf964192958c7ec", "message": "RevEng: Rewrite SqlServerDatabaseModelFactory for improved scripts\n\nResolves #6196, #9473, #9526, #9568, #10034\n\nIssue#6196 Sequences are only scaffolded if the schema is in selection list\nIssue#9473 Type aliases are storing fully-specified underlying type\nIssue#9526 Decimal/Numeric always scaffold precision, scale\nIssue#9568 Execute separate query to fetch metadata which are parametrized on table & schema\nIssue#10034 At present we don't have a way to scaffold custom type for Sequence, we always get typemapping based on CLR type. So when alias is used for Sequence, we will send underlying system type for scaffolding"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e14a16a6058daa682e7f1ddf659c0e572dab0986", "message": "Query: Translate Distinct after Include to server\n\nIssue: When visiting Selector with _Include method we could not translate it and ended up setting RequiresClientProjection=true which caused Distinct to not get lifted\nFix: _Include should not cause client eval since it would get removed. This allows us to translate Distinct to server.\nAs a side effect of this in Collection Include case, our distinct order removal logic needs to pattern match more.\n\nResolves #9912"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e129c1a24e7572f5fffb4df2c73feb5633a7437b", "message": "Query: Contains should translate to IN only when operand & from expression both are Sql-Compatible\n\nResolves #10081\nIssue: When trying to translate Contains.Item, we convert `x.Blog` to `x.BlogId` since entity comparison is same as identity comparison on entities.\nBut in case of Contains subquery, we don't visit FromExpression. Instead of validating that FromExpression can be represented in SQL typemapping, we rely on the fact that if translation of Contains.Item can be represented then FromExpression should be.\nBut that assumption is only valid when the type of Contains.Item does not change during translation. (like scenario above). If type changes (because earlier was not compatible in typemapping), then Contains cannot be translated to InExpression.\n\nThis also fixes #9424 in different way since in that case also, Tuple translate to Expression[] changing types."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/97dade81a7e954b3521c05befede4164f4a984fa", "message": "Query: Change prefix for Query Filter parameters\n\nResolves #10052"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/49b9cac0da1566c7e73ec13c09f04a98b5c6c689", "message": "Query: Make GetMappedProjectionTypes to return based on actual projections\n\nResolves #10035\n\nIssue here was, our method to calculated projection types was not entirely accurate. It was not robust enough to handle a case where there is project star & projection both at the same time (Sql Generation handles that pretty well).\nDue to the bug in the method, when we encouter project star with projection list, we returned based on projection only ignoring the star table. At present this kind of structure only arises with RowNumberPaging which ads RowNumber Expression on projection with star.\nHence we got incorrect type in first slot causing InvalidCastException.\n\nAlso changed type for RowNumberExpression since, RowNumber is of type bigint in SqlServer.\n\nThis PR brings projection & materialization on same page w.r.t. CLR types.\n\nAll tests passed when using `TypedRelationalValueBufferFactoryFactory` in SqlServer provider."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/61952a43a17785490c041a71ba573455a04f94b2", "message": "Set RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9547e2a29173ec2a2df366b91dc0ecdbfe8b546d", "message": "Merge branch 'rel/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/81d6c37d360701a30c2c0bbb8a4492f4308be35a", "message": "Add quirks for #10045"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b59da98ee113500bb89ff5677f887a792eaa8d3f", "message": "[2.0.1] Query: Unique-fy ordering & projection created by IncludeCompiler with existing ordering\n\nResolves #10045\n\nThe issue: When you have reference.collection include and orderby reference.property, the ordering is expanded by navigation rewrite and it is null-compensated. Whereas the ordering collection include adds missed null-compensation hence they were not matching property causing multiple orderings/projection in QueryModel, which would map to same SqlFragment causing projection count mismatch.\nThe fix is to unique-fy ordering by including null-compensation. Due to new pattern generated by Include, downstream code needs to understand & match more patterns."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/af9493886007ac842a481cd030895a98cf6421c8", "message": "Disable failing tests in Oracle"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3a096bc0a0ff80544140d671f4db36a0b335b197", "message": "Query: Prefix parameters for QueryFilter with $ to avoid clash with closure variable parameters\n\nResolves #9850"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9ffb512095847d7ff6671c66c7c761a85981cf85", "message": "Linux test"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/98f41f7cc483d1688c23017fbc495a709f308cfb", "message": "Query: Funcletize accessing array element\n\nResolves #6859\n\nArray access is BinaryExpression with node type of ArrayIndex. Since we always used base method for BinaryExpression except logical expression, we would end up evaluating array separately from access hence always caused client evaluation.\nFix is to process array access as whole instead of visiting left & right subtree."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3c88f2d918c6c13e207a69b5199a9fdcd289970e", "message": "Update GroupBy tests for Oracle\nResolves #10016"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/72140bf36ff8b42ed85c6a97dc278c2132163d68", "message": "Merge branch 'rel/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/196400e9ca7ebaac92e6e1e7d638fc1c82446385", "message": "[2.0.1] RevEng: Fix scaffolding for nvarchar(4000)\nTypes which requires length specified returns needs default length of 8000 specified\n\n# Conflicts:\n#\ttest/EFCore.SqlServer.FunctionalTests/Scaffolding/SqlServerDatabaseModelFactoryTest.cs"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/5b1380ae466bd0e12ac0669bd4e19b520652548c", "message": "Query: Add support for translating GroupBy() to SQL when aggregate operator used on group\n\nResolves #2341"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/fee8a6fe5cc173052ead5224be8009dbf9f4f94d", "message": "Merge branch 'rel/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3d6caba2724c58e088a65c43a29451759667a3e4", "message": "[2.0.1] Query: Fix for #9892 GroupJoin to parent with no child throws invalid operation exception\n\nIssue: When we are trying to lift GroupJoin queries without DefaultIfEmpty, we generate LEFT JOIN which means the inner can be null too. But we still have inner key selector doing property access on inner which could throw null ref. If the inner is using EntityShaper then shaper & all access becomes null safe, but in other cases it fails.\nSolution: Since inner is projecting out a non-entity, we would always have TypedProjectionShaper, which does not have null safe mechanism. Hence For such queries we need to block lifting into lift join\n\nResolves #9892"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e298955c3ca7f0aab3d266ca41798743f054b367", "message": "Build: Make sure OracleProvider.sln works\nSteps to build\n```\n.\\build /t:Pin\ncd samples\\OracleProvider\ndotnet restore\n.\\OracleProvider.sln\n```"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/0384ece76a05755e760ac14698cfe32b8589efd5", "message": "Fix bad merge"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a36c09471a1d8c0864476d337cf69f78a7189e09", "message": "Merge branch 'rel/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b432a446d0186516f8383bc4527beae0e58b660e", "message": "Merge commit 'cb2a013' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/021cf120845f6ed99945b556a8e98b695917670c", "message": "Query: Fix for incorrect QueryCache hit when chaining a streaming N+1 query\n\nIssue:\nWhen the query is projecting out a collection object in non-navigation case, we cause N+1 queries.\nTo support streaming behaviour, we inject QueryableAdapter (or async version) which would be evaluated on when enumerated.\n\nWhen we are chaining on the navigation after such query, the QueryableAdapter is captured in ConstantExpression.\nIn our ExpressionEqualityComparer, during GetHashCode, we add such value if ConstantExpression is of type IQueryable. (so that we can fall back to Comparison)\nDuring comparing such ConstantExpressions, we assumed if they are of type IQueryable then they are same. Which is true for IQueryable from DbSet.\nBut for QueryableAdapter which are also IQueryable, it could still evaluate to different results.\nAnother thing is, in `EntityQueryableExpressionVisitor` ConstantExpression of EntityQueryable are evaluated. But rest of them are kept intact.\nSince we returned equality=true for all IQueryable, every subsequent query even though had different QueryableAdapter which gave different results we made cache hit and re-ran compiled query which has older value of QueryableAdapter (due to EntityQueryableExpressionVisitor) and would evaluate to incorrect values.\n\nResolves #9301"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e59c00926f5273586ea586beef7a2f42198fd4f5", "message": "Merge commit '295ac8a1ce5c01195f8f31b0d7f89da77822c570' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/71da83212434b3ed4a1019b7df36500d6450dd19", "message": "[2.0.1] Query: Always evalaute Enum.ToString on client\nSince server would store underlying type of enum hence server eval causes incorrect result\n\nResolves #9894"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/09c9b263d648dac4432b9dfb280f84f651c33949", "message": "Simplify default(T) in C# 7.1"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/29c553849ab298d87df0029ab961a87903022868", "message": "RevEng: Do not sanitize directory names while generating namespace\nResolves #9787"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3548b13af907c3a0dec4ccc66d14067855855333", "message": "Query: Fix for projecting out bool values with ternary expression throws\n\nIssue: When generating conditional expression we generated typed literal for true/false but that was not happening for nullable bools inside converts. Hence whole expression was getting upcasted to int type causing InvalidCastException\n\n\nResolves #9818"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/ab0cd0ad52fd8874c934837097e8356118589b58", "message": "Query: Fix for CompiledQuery with closure variable evaluating to null throws\n\nIssue: In CompiledQuery, since closure variables are not modified after compilation we capture the values of closure variables as constants rather than parameters. Though the logic to create constant expression was faulty when the value is null.\n\nResolves #9844"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e371e9d8df28943350efa6e92435fa9a8330ccc0", "message": "Merge branch 'rel/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3152668c3bd5fd34b53bcafc8a6d473cf00c5603", "message": "[2.0.1] Update the fix for #9038 to make it more robust against multi-collection includes\n\nWhen there are multiple collections being included then we have single fixup task with AwaitMany function which would wait each of the include task. If one of the collection include is after optional reference navigation then only that task in AwaitMany would be null and not whole fixup task."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/423dd6768b2d4f5a95e0f1957606ee53684a468d", "message": "Merge branch 'rel/2.0.1' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/146e210d12180d009bb9f30d49b08eb8bdee43d7", "message": "[2.0.1] Query: Fix for Access to context bound variable can be optimized out\nIssue:\nWe adopted short-circuiting logic in logical expression due to possible exceptions (which compiler would never throw in memory). This works correctly for general cases because the expression tree would have current value of closure variable hence evaluating to correct thing.\nWhen it comes to QueryFilter, the filter has closure member access on context instance which was used during OnModelCreating which may have stale value of context closure variables. We parametrize such closure variables and insert their values through parameters when running query. But if such closure variable is used in complex expression which can short-circuit then we would be using wrong value for short-circuit (by this point we haven't inserted correct value from current context instance) hence generating incorrect query model. The other cause for it is QueryCache has only 1 entry for all the possible values of context bound variables in filter.\n\nSolution:\nSince evaluating filter with context bound variables with different value may not always generate a re-usable query model for all values of variables, whenever we get an expression to evaluate during funcletizing query filter, we replace context, with context parameter (which would be injected later) and return this expression without evaluating anything in-memory. Any exception to be thrown from evaluation of context bound variables will be thrown when actual parameter value will be calculated while running query.\n\nResolves #9825"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/69868513dd6d4e4cfd520dcf642412088f133d7a", "message": "Update EFCore.Runtime.sln.DotSettings to remove absolute path"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/54b6047d6d1cbbf5b4fe14b54bc0824aaa3ed11c", "message": "Fix benchmarks broken by Package Lineup"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c87ba655f6754f0230a463a97a9e98b4f95c3509", "message": "Merge branch 'feature/2.0.1' into dev\n\n# Conflicts:\n#\tsrc/EFCore.Relational/Storage/Internal/RelationalCommand.cs\n#\tsrc/EFCore.Relational/Storage/RelationalDataReader.cs\n#\tsrc/EFCore.SqlServer/Scaffolding/Internal/SqlServerDatabaseModelFactory.cs\n#\ttest/EFCore.SqlServer.Design.FunctionalTests/ReverseEngineering/Expected/NonNullBoolWithDefault.cs\n#\ttest/EFCore.SqlServer.Design.FunctionalTests/ReverseEngineering/SqlServerE2ETests.cs\n#\ttest/EFCore.SqlServer.FunctionalTests/Query/QueryBugsTest.cs"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/50617e8231c843d8ddf11e5c5beaf545afe83c0b", "message": "Clear DbCommand.Parameters only after reader is disposed"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/dfa00f2a3325c2c913638367b72ab5e2b6be890c", "message": "RevEng: Don't generate nullable bool if default value is false"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10592", "title": "[WIP] Add Microsoft.EntityFrameworkCore.DocumentDb package", "body": "Resolves #8443\r\n\r\nThis is WIP. Early feedback is welcome.\r\nTest time for functional tests on Emulator last time was ~5h.\r\n\r\nSimpleQueryTests are passing.\r\nIt translates Predicate to SQL correctly. It supports TPH through discriminator.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/116891011", "body": "filed #2504 & #2505 \nAttributes to be implemented has been added in first post. We need to decide which relationship attributes we want to support.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/116891011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/130475428", "body": "All the attributes mentioned in first post are implemented. Anything else remaining here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/130475428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135137437", "body": "@salarcode - `ColumnAttribute` has been implemented already. You can change column name using the method you have mentioned. :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135137437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8787066", "body": "for sqlserver Generate_when_drop_database_operation() test is failing with this change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8787066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11944413", "body": "missed `)` at the end.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11944413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12818855", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12818855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13404518", "body": "This is breaking my build.\n\n```\nMicrosoft.Dnx.Compilation.CSharp.RoslynCompilationException: D:\\EntityFramework\\test\\EntityFramework.Sqlite.FunctionalTests\\SqliteTestStore.cs(127,17): DNX,Version=v4.5.1 error CS0117: 'SqliteConnectionStringBuilder' does not contain a definition for 'Cache'\nD:\\EntityFramework\\test\\EntityFramework.Sqlite.FunctionalTests\\SqliteTestStore.cs(127,39): DNX,Version=v4.5.1 error CS0103: The name 'SqliteConnectionCacheMode' does not exist in the current context\nD:\\EntityFramework\\test\\EntityFramework.Sqlite.FunctionalTests\\SqliteTestStore.cs(127,74): DNX,Version=v4.5.1 error CS0103: The name 'SqliteConnectionCacheMode' does not exist in the current context\n```\n\nAny fix to resolve this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13404518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14968192", "body": "@rowanmiller \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14968192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15600392", "body": "@AndriySvyryd  - Isn't there supposed to be 4th argument for ModelCacheKeyFactory?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15600392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15600493", "body": "Sure. Running build with it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15600493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15641783", "body": "Missing virtual. Will update in my next commit.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15641783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15694113", "body": "This causes compilation error in VS\n`MSBUILD : .NET for Windows Universal error CS1705: Assembly 'Microsoft.EntityFrameworkCore.Relational.Design' with identity 'Microsoft.EntityFrameworkCore.Relational.Design, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' uses 'System.Runtime, Version=4.0.21.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher version than referenced assembly 'System.Runtime' with identity 'System.Runtime, Version=4.0.20.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15694113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15694182", "body": "Its latest dev which is causing error. :cry: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15694182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15712896", "body": "Can you file an issue to track the removal?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15712896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15777155", "body": "Fixing it in some other way. Wait!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15777155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16574826", "body": "Trying to make it `Expression`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16574826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345660", "body": "build is broken by this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345700", "body": "#5212 doesn't cover API docs. Should file a separate issue to track that.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17737007", "body": "@maumar The sql assertions needs to be inside if condition for SupportsOffset. Build is broken on SqlServer2008\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17737007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21724303", "body": "@maumar - Can you investigate this test to make sure this SQL is correct? The test has group join in c# but translated to Inner Join.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21724303/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22958430", "body": "This was being discussed in MS Teams. @bricelam was on conversation. Regardless, since we don't get notification for commits, PR should have been created. This was reaction to some changes happened in BuildTools. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22958430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/23444785", "body": "Can we stop having commits directly to dev without PRs?\r\ncc: @ajcvickers @divega", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/23444785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124681725", "body": "Yes. Try upgrading it and see test failures \ud83d\ude09 \r\n\r\n#7627 ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124681725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/128873797", "body": "Updated to preview2-final. Will change to 2.0.0 once we ship.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/128873797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/129989228", "body": "https://github.com/aspnet/EntityFramework/issues/9285", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/129989228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/129989382", "body": "https://github.com/aspnet/EntityFramework/issues/9286", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/129989382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/130426739", "body": "@Eilon for 3rd party dependency change approval.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/130426739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/143315022", "body": "Does this mean that we would be building against last RTM release on that particular release cycle locally? How would this be updated if they need to be? Just curious\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/143315022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157111579", "body": "@natemcmaster - This ones can perhaps go away from build infra altogether. They don't change anyway. They are inlined in csproj right now (could be put it in a file too) but regardless, it does not need to interact with universe build/automation.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157111579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157855291", "body": "@natemcmaster @ryanbrandenburg - This is new dependency to add. Where it should be added in Universe for automation?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157855291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/135127280", "body": "Conditional sounds good. I will set it as environment variable in Teamcity configuration.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/135127280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/106486805", "body": "Updated.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/106486805/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/114648052", "body": "I tried singular first. That also did not work.\r\nI will try logger to investigate further.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/114648052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148318180", "body": "This file needs clean up.\r\nRe-Sync this file from SqlServer provider with keeping in mind.\r\n- There are several event ids which are obsolete in SqlServer. They should be removed in Oracle. And also associated enum entries should be removed.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148318180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148602662", "body": "Does oracle have sequences? If not remove.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148602662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148602719", "body": "Does oracle have type aliasing? If not remove.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148602719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148602958", "body": "Also associated logger messages and string resources to be cleaned up\r\n\r\n---\r\nIn reply to: [148602719](https://github.com/aspnet/EntityFramework/pull/10146#discussion_r148602719) [](ancestors = 148602719)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148602958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137398550", "body": "remove", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137398550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137398188", "body": "Does Oracle also have RowNumberPaging restrictions? ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137398188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137398354", "body": "Some of these methods are removed or modified in SQL Server. worth updating?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137398354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148318388", "body": "Same as EventIds, there are logger messages associated with obsolete event ids have been removed. Remove all the methods here who associated event ids get removed.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148318388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151615151", "body": "@AndriySvyryd - I have 2017.2.2 i think. Probably not the latest.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151615151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137398811", "body": "named parameter", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137398811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137399955", "body": "remove ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137399955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/158101989", "body": "Why define a function and not use Exists directly as condition?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/158101989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/158119127", "body": "```\r\nIf Exists (...)\r\nThen ....\r\nElse ....\r\nEnd\r\n```\r\nWhat is wrong with above. What goes inside is different between SqlServer/Oracle.\r\nIf count of something is 0 then selecting without count will give you false for `Exists` query. So unless we are matching count to some specific numbers other than 0 or 1, function is not necessary.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/158119127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137396946", "body": "This import would need to be removed depending on PR [https://github.com/aspnet/EntityFrameworkCore/pull/9628](https://github.com/aspnet/EntityFrameworkCore/pull/9628)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137396946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137397079", "body": "Remove TableSelectionSet was destroyed recently.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137397079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137397152", "body": "This needs to be updated based on #9628", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137397152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137397420", "body": "Include or exclude? What is in that folder which is not auto-picked?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137397420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148318560", "body": "Continuing eventids/logger changes. Remove all string resources which are not being used in LoggerExtensions.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148318560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148682657", "body": "no type alias", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148682657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148682702", "body": "no sequence.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148682702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148682757", "body": "Run T4 template and make sure it generates compile-able code.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148682757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137401216", "body": "rename", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137401216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148317662", "body": "Can you write a short description why this was changed for future references?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148317662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157079663", "body": "@ajcvickers This is the major kind of break OracleProvider is facing. The bug existed earlier (since translation was not safe in all cases). Addition of more testing in specs breaks the provider testing since bugs start surfacing in functional tests. Regardless, user faces the issue.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157079663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137401153", "body": "Just store parameter name?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137401153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137402610", "body": "rename", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137402610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148682833", "body": "prefix private. We use explicit identifiers. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148682833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137403334", "body": "Since Scaffolding is not working at present, would it be better to throw NotImplementedException instead of having code copied from SqlServer here. Scaffolding code is changing (mainly refactoring) based on Update Model from Database. Like TableSelectionSet is removed from codebase. I wonder if keeping this code here would cause more confusion. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137403334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/146448086", "body": "tableList is being ignored while scaffolding tables.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/146448086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148319025", "body": "Inline schemaFilter if not being used for anything else.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148319025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148319233", "body": "Add Missing Schema/table warnings.\r\ni.e. log warning for user specified table/schema which were not found in database and was not scaffolded.\r\nSqlServer has some fancy code for it.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148319233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148319654", "body": "You can inline this in string interpolation above with `?:` to avoid string concatenation.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148319654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148321658", "body": "Does this cause issue if the same table name is in a different schema?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148321658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148321778", "body": "Rename function. It returns different Keys not just FKs", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148321778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148322257", "body": "Use grouping else you would computing all these values for each column in composite key.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148322257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148323053", "body": "This would add partial FK when FK is composite. That would be incorrect model generation. This either needs grouping on FK itself or it has to continue adding columns till FK change and add FK only when FK changes.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148323053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148323379", "body": "For composite PK case, this will cause creation of new PK for every column and PK with only last column will go to model that is incorrect.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148323379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148323717", "body": "Faces same issue as PK/FK for composite index.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148323717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148324096", "body": "Why default is `SetDefault`? What would be behavior in database when this is not set? Other providers tend to return null instead.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148324096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148324349", "body": "No candidate keys scaffolding?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148324349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148325209", "body": "We should be consistent in SQL generated. Since, query generate upper case SQL. \r\nCan you upper case all SQL parts which are not column/table names?\r\nYou can look at SqlServer for guidance. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148325209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148368400", "body": "Remove this. Type Schema is only used for aliased types since aliased types can be in own schema. There is no support of typealias in oracle scaffolding as of now so we don't need to select this.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148368400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148368625", "body": "No need to alias things if not processed. You can use as is. This is provider specific code and it does not need to select exact column names from query.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148368625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148368896", "body": "Let it be null. You can work with null instead of 0 on client side code too.\r\nSame for DATA_SCALE not sure if it is nullable though.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148368896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148369345", "body": "~~~There is no `identity_column` in user_tab_cols. Can you give link to doc?~~\r\nFound it in 12.2c\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148369345/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148370873", "body": "Just select `data_default` and `virtual_column` separately and apply logic on client to figure out it if is default/computed sql.\r\nAll above would allow us to get rid of function/case/coalesce altogether. \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148370873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148409655", "body": "Issue is, for composite case, you would get multiple rows from database for same PK.\r\nEverytime you would read values & compute properties/table of an PK for each column of composite PK. That is unnecessary computation. Further as I commented below, you would end up creating new PK object for each row so incorrect PK computation.\r\n\r\nIn older code we used a pattern where we looped over row and emitted output PK/FK whenever the name changed, collecting the columns while name was same. That's basically how group join works. To make code better we just moved to use group by. \r\n\r\nThis is link to older code https://github.com/aspnet/EntityFrameworkCore/blob/rel/2.0.0/src/EFCore.SqlServer/Scaffolding/Internal/SqlServerDatabaseModelFactory.cs#L756\r\n\r\nLook at how it breaks grouping based on name and accumulates otherwise. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148409655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148603373", "body": "Make database model a local variable rather than a field. It is not used outside this function anyway.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148603373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148604178", "body": "Where schemaFilter var being used apart from this? If we decide to implement scaffolding for sequences then we would be using it there. \r\nI would leave upto you if you want to add code to scaffold sequences also in this PR. If it is not then just inline the variable for now. It can be extracted out later when needed.\r\n\r\n---\r\nIn reply to: [148404452](https://github.com/aspnet/EntityFramework/pull/10146#discussion_r148404452) [](ancestors = 148404452)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148604178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148605155", "body": "Use string interpolation only. Ternary would be code but for its true part you can used nested interpolation.\r\nsomething like this `$\"WHERE ... {tableFilter !=null ? $\"...\" : \"\"};`", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148605155/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148605353", "body": "You can just call it GetConstraints. PK/CK/FK all are constraints only :)\r\n\r\n---\r\nIn reply to: [148324349](https://github.com/aspnet/EntityFramework/pull/10146#discussion_r148324349) [](ancestors = 148324349)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148605353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148605924", "body": "@bricelam - I leave this upto you if we want to apply logic on client side or in SQL. I don't know which would be more performant. If perf difference is really small then client side is better.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148605924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148606417", "body": "Remove case block and both function calls (and function too). Just use the data and virtual_column on client side to do all these processing", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148606417/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "alex-zyl": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10561", "title": "Missing navigated property data when using AsNoTracking, Include, Where", "body": "We have the following entities\r\n\r\n```\r\n        public class SubConfig\r\n        {\r\n            public int Id { get; set; }\r\n            public int ConfigId { get; set; }\r\n            public string Value { get; set; }\r\n        }\r\n\r\n        public class Config\r\n        {\r\n            public int Id { get; set; }\r\n            public int? TenantId { get; set; }\r\n            public string Name { get; set; }\r\n            public string Value { get; set; }\r\n            public DateTimeOffset LastModified { get; set; }\r\n            public virtual ICollection<SubConfig> SubConfigs{ get; set; }\r\n        }\r\n```\r\n\r\nDatabase contains the following rows:\r\n```\r\nId: 1\r\nName: TenantConfig\r\nTenantId: 1\r\nConfigSubItems: { {Id:1}, {Id:2}, {Id:3} \r\n\r\nId: 2\r\nName: SharedConfig\r\nTenantId: null\r\nConfigSubItems: {}\r\n```\r\n\r\nWhen executing the following queries\r\n\r\n```\r\nvar delta = db.Configs.Include(x => x.SubConfigs).AsNoTracking().Where(x=> ((x.LastModified > XXX) || x.TenantId != null)).ToList();\r\nvar deltaFull = db.Configs.Include(x => x.SubConfigs).AsNoTracking().Where(x => delta.Select(c => c.Name).Contains(x.Name)).ToList();\r\n```\r\nusing EF Core 1.1.2:\r\n\r\n**deltaFull** contains **Config** item for **TenantId = 1** and collection of **SubConfigs[3]**\r\n\r\nusing EF Core 2.0.1\r\n\r\n**deltaFull** contains **Config** item for **TenantId = 1** and collection of **SubConfigs[0]**\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nIDE: VS2017 15.5\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nickverschueren": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10551", "title": "Support cascade updates for owned types/aggregates", "body": "When I attach an entity that has an owned type attached to it and I change the state of that entity using the ChangeTracker to EntityState.Added, the owned type should also get the EntityState.Added state, but it doesn't. \r\n\r\n```\r\nException message: The entity of 'Entity' is sharing the table 'Entity' with 'Entity.OwnedType#OwnedType', but there is no entity of this type with the same key value that has been marked as 'Added'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values.'\r\nStack trace:    at Microsoft.EntityFrameworkCore.Update.Internal.ModificationCommandIdentityMap.Validate(Boolean sensitiveLoggingEnabled)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.CreateModificationCommands(IReadOnlyList`1 entries, Func`1 generateParameterName)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.<BatchCommands>d__8.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(Tuple`2 parameters)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, TState state, Func`2 operation)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(IReadOnlyList`1 entries)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IReadOnlyList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges()\r\n   at EfCoreState.Program.Main(String[] args) in c:\\users\\nickv\\source\\repos\\projects\\EfCoreState\\EfCoreState\\Program.cs:line 19\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```c#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var entity = new Entity();\r\n            entity.OwnedType.SomeText = \"Hello world!\";\r\n\r\n            var context = new TestContext();\r\n            context.Database.EnsureCreated();\r\n\r\n            context.Attach(entity);\r\n            context.ChangeTracker.Entries<Entity>().First().State = EntityState.Added;\r\n            context.SaveChanges();\r\n\r\n            context.Database.EnsureDeleted();\r\n        }\r\n    }\r\n\r\n\r\n    public class Entity\r\n    {\r\n        public Entity()\r\n        {\r\n            Id = Guid.NewGuid();\r\n            OwnedType = new OwnedType();\r\n        }\r\n\r\n        public Guid Id { get; set; }\r\n\r\n        public OwnedType OwnedType { get; set; }\r\n    }\r\n\r\n    public class OwnedType\r\n    {\r\n        public string SomeText { get; set; }\r\n    }\r\n\r\n    public class TestContext : DbContext\r\n    {\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(\"Server=(localdb)\\\\mssqllocaldb;Database=Test;Trusted_Connection=True;MultipleActiveResultSets=true\");\r\n\r\n            base.OnConfiguring(optionsBuilder);\r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            var entity = modelBuilder.Entity<Entity>();\r\n            entity.HasKey(e => e.Id);\r\n            entity.OwnsOne(e => e.OwnedType);\r\n\r\n            base.OnModelCreating(modelBuilder);\r\n        }\r\n    }\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 (1703)\r\nIDE: Visual Studio 2017 15.5.1\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Tarig0": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10543", "title": "Migrations: Changing delete behavior from restrict -> ClientSetNull causes FK to be modified", "body": "Describe what is not working as expected.\r\n\r\nWhen changing the delete behavior for a relationship from Restrict -> ClientSetNull; The migration engine will generate a unneeded drop and create.\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Win10\r\nIDE: Visual Studio 2017 15.4\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10186", "title": "When utilizing shadow properties as part of a FK the length is not restored in the down migration", "body": "When creating a relationship that uses a shadow property the length metadata does not seem to be used in the down function.\r\n\r\n```c#\r\nRulesMetaDataGrandKey = table.Column<string>(nullable: false)\r\n```\r\nExpected\r\n```c#\r\nRulesMetaDataGrandKey = table.Column<string>(maxLength: 50, nullable: false)\r\n```\r\n### Steps to reproduce\r\n1. Take the code below and add a migration\r\n2. comment out the lines adding the TRule class to the model\r\n3. Generate another migration taking a look at the column added by the shadow property in the down function.\r\n\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel.DataAnnotations;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n\r\n    public class db : DbContext\r\n    {\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(\"foo\");\r\n        }\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n\r\n            modelBuilder.Entity<RulesMetaData>().HasKey(m => m.GrandKey);\r\n            //drop this on second migration\r\n            modelBuilder.Entity<TRule>().HasKey(nameof(RulesMetaData) + nameof(RulesMetaData.GrandKey), nameof(TRule.Key));\r\n        }\r\n    }\r\n\r\n\r\n    public class RulesMetaData\r\n    {\r\n        [MaxLength(50)]\r\n        public string GrandKey { get; set; }\r\n        //drop this on second migration\r\n        public IEnumerable<TRule> TRules { get; set; }\r\n    }\r\n\r\n    public class TRule\r\n    {\r\n        [MaxLength(50)]\r\n        public String Key { get; set; }\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Further technical details\r\nEF Core version: (found in project.csproj or packages.config)\r\nDatabase Provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nOperating system: \r\nIDE: (e.g. Visual Studio 2015)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10185", "title": "When utilizing shadow properties for multiple level relationships length metadata can be lost", "body": "When using a shadow property as part of a FK for two levels of relationships, if the first level of the relationship has a class name that starts with the full name of the second level the length metadata of the top level column is not detected correctly.\r\n\r\n### Steps to reproduce\r\n1. Use the following code to generate a migration.\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel.DataAnnotations;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n\r\n    public class db : DbContext\r\n    {\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(\"foo\");\r\n        }\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<Company>().HasKey(p => p.GrandKey);\r\n\r\n            modelBuilder.Entity<RulesMetaData>().HasKey(m => m.GrandKey);\r\n            modelBuilder.Entity<RulesMetaData>().HasOne<Company>().WithOne().HasForeignKey<RulesMetaData>(m => m.GrandKey);\r\n\r\n            modelBuilder.Entity<Rule>().HasKey(nameof(RulesMetaData) + nameof(Company.GrandKey), nameof(Rule.Key));\r\n\r\n            modelBuilder.Entity<TRule>().HasKey(nameof(RulesMetaData) + nameof(Company.GrandKey), nameof(TRule.Key));\r\n\r\n            modelBuilder.Entity<Rulet>().HasKey(nameof(RulesMetaData) + nameof(Company.GrandKey), nameof(Rulet.Key));\r\n        }\r\n    }\r\n\r\n    public class Company\r\n    {\r\n        [MaxLength(50)]\r\n        public string GrandKey { get; set; }\r\n    }\r\n\r\n    public class RulesMetaData\r\n    {\r\n        public string GrandKey { get; set; }\r\n        public IEnumerable<Rule> rules { get; set; }\r\n        public IEnumerable<TRule> TRules { get; set; }\r\n        public IEnumerable<Rulet> Rulets { get; set; }\r\n    }\r\n\r\n    public class TRule\r\n    {\r\n        [MaxLength(50)]\r\n        public String Key { get; set; }\r\n    }\r\n\r\n    public class Rulet\r\n    {\r\n        [MaxLength(50)]\r\n        public String Key { get; set; }\r\n    }\r\n//This will have it's GrandKey column set to the default key length instead of 50\r\n    public class Rule\r\n    {\r\n        [MaxLength(50)]\r\n        public String Key { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Win10\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10140", "title": "Allow more flexible conditional mapping for TPH and similar", "body": "I have the following model\r\n\r\n```c#\r\npublic class BaseType\r\n    {\r\n        public string Code {get;set;}\r\n        public string Type {get;set;}\r\n}\r\npublic class ChildType:BaseType\r\n    {\r\n        public ChildType()=> Type = \"ExplicitChild\"\r\n        public string AdditionalData {get;set;}\r\n}\r\n```\r\n\r\nI am able to create a BaseType with a type value as \"Implicit Child\" and save it to the database, but when retrieving the information I can not get a reference to the \"Implicit Child.\"\r\n\r\n```c#\r\ndb.Set<BaseType>().ToList();\r\n```\r\nThis is caused by the discriminator column being present in the where clause at all times.\r\n```sql\r\nWhere [e].[Type] IN (N'ExplicitChild', N'BaseType')\r\n```\r\n\r\nI would expect one of the following\r\n\r\n* Prevent saving of arbitrary discriminator.\r\n* Don't check the discriminator column at all when using the base set without any constraints. <== preferred for my case\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: SqlLite, MSSql\r\nOperating system: Windows 10\r\nIDE:Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9955", "title": "Navigation properties of Principle type in split table regenerate each migration ", "body": "ForignKeys of principal entity's navigations props on split tables continue to be removed and added each migration.\r\n\r\n### Steps to reproduce\r\nTake the following console app and generate migrations twice\r\nExpected the second migration will have a blank up and down\r\n\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n         //noop   \r\n        }\r\n        public class Data : DbContext\r\n        {\r\n            public DbSet<Order> Orders { get; internal set; }\r\n\r\n            protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseSqlite(\"DataSource=:memory:\");\r\n\r\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n            {\r\n                modelBuilder.Entity<Order>().HasOne(o => o.Module).WithOne().HasForeignKey<Module>(nameof(Order.Module));\r\n                modelBuilder.Entity<Module>().HasKey(nameof(Order.Module));\r\n                modelBuilder.Entity<Test>().HasKey(t=>t.Key);\r\n                modelBuilder.Entity<Order>().ToTable(\"Orders\");\r\n                modelBuilder.Entity<Module>().ToTable(\"Orders\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public class Order\r\n    {\r\n        public int Id { get; set; }\r\n        public IEnumerable<Test> _orderCategories { get; set; }\r\n        public Module Module { get; set; }\r\n        \r\n    }\r\n\r\n    public class Module\r\n    {\r\n        public string attributeA { get; set; }\r\n    }\r\n\r\n    public class Test\r\n    {\r\n        public string Key { get; set; }\r\n        public int length { get; set; }\r\n       \r\n        public int Pod { get; set; }\r\n    }\r\n    \r\n\r\n}\r\n\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer + sqlLite\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9858", "title": "boolean Shadow properties as part of Key and Navigation property evaluates the PK before shadow props are set", "body": "The following is a trimmed down version of the issue I am seeing.\r\n\r\nI am trying to push as much of the Data layer out of my model code and experience the following error when I use a non-nullable type as both a navigation key and PK.\r\nThe issue goes away as soon as I switch to a nullable type.\r\n```\r\nException message: Unable to track an entity of type 'b' because primary key property 'code' is null.\r\nStack trace:\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableKeyIdentityMap`1.Add(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState entityState, Boolean forceStateWhenUnknownKey)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState(InternalEntityEntry entry, EntityState entityState)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)\r\n   at Microsoft.EntityFrameworkCore.DbContext.Add[TEntity](TEntity entity)\r\n   at ConsoleApp1.Program.Main(String[] args) in <redacted>Program.cs:line 12\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var model = new b() { a = new a() { code = false}};\r\n            using (var db = new Data())\r\n            {\r\n                db.Add(model);\r\n            }\r\n        }\r\n        private class Data : DbContext\r\n        {\r\n            protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseInMemoryDatabase(\"test\");\r\n            \r\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n            {\r\n                modelBuilder.Entity<a>().HasKey(a => new { a.code });\r\n                modelBuilder.Entity<b>().HasOne(ab => ab.a).WithMany().HasForeignKey(nameof(a.code));\r\n                modelBuilder.Entity<b>().HasKey(nameof(a.code));\r\n            }\r\n        }\r\n        private class a\r\n        {\r\n           public bool code { get; set; }\r\n        }\r\n        private class b\r\n        {\r\n            public a a { get; set; }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: N/A\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TonyHenrique": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10541", "title": "F# .Net Standard 2.0 + Entity Framework Core", "body": "I am trying to use EF Core on F# but this error appears\r\n\r\n```\r\nFS1109\tA reference to the type 'Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder' in assembly 'Microsoft.EntityFrameworkCore' was found, but the type could not be found in that assembly\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```\r\nAdded NuGet package  \r\nMicrosoft.EntityFrameworkCore    2.0.1\r\nMySql.Data.EntityFrameworkCore     8.0.9-dmr\r\n\r\nmodule Contexto\r\n\r\nopen Microsoft.EntityFrameworkCore\r\n\r\ntype BloggingContext() =\r\n    inherit DbContext()\r\n        member val Blogs: DbSet<Blogs> = Unchecked.defaultof<DbSet<library.MyClass>> with get, set    // (*\"valor padrao\")\r\n         //public DbSet<Post> Posts { get; set; }\r\n\r\n        override OnConfiguring(optionsBuilder: DbContextOptionsBuilder) =\r\n            optionsBuilder.UseMySQL(@\"Server=192.168.10.102;Database=myDataBase;Uid=root;Pwd=abcf;\")\r\n            |> ignore\r\n        \r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: MySql.Data.EntityFrameworkCore 8.0.9-dmr\r\nOperating system: Windows 10 Pro 64bits\r\nIDE: Visual Studio 2017 15.6.0 Preview 1.0\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Noctune": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10537", "title": "`Specified cast not valid` when using min or max after decimal to float cast", "body": "Casting from decimal to float before a `Min()` or `Max()` throws an exception with a `specified cast not valid` message and the following stack trace:\r\n\r\n```\r\nat Microsoft.EntityFrameworkCore.Query.QueryMethodProvider.GetResult[TResult](IEnumerable`1 valueBuffers, Boolean throwOnNullResult)\r\nat lambda_method(Closure , QueryContext )\r\nat Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass17_1`1.<CompileQueryCore>b__0(QueryContext qc)\r\nat TestProject.TestProgram.Main() in C:\\...\\Program.cs:line 84\r\n```\r\n\r\nThe bug can be recreated with the following code:\r\n\r\n```c#\r\npublic class TestTable\r\n{\r\n    public int Id { get; set; }\r\n    public decimal Thing { get; set; }\r\n}\r\n\r\npublic class TestContext : DbContext\r\n{\r\n    public DbSet<TestTable> ThingTable { get; set; }\r\n\r\n    protected override void OnConfiguring(DbContextOptionsBuilder builder)\r\n    {\r\n        builder.UseSqlServer(@\"Server=SomeServer;Database=SomeDatabase;Trusted_Connection=True\");\r\n    }\r\n}\r\n\r\nclass TestProgram\r\n{\r\n    public static void Main()\r\n    {\r\n        using (var db = new TestContext())\r\n        {\r\n            db.Database.EnsureCreated();\r\n\r\n            db.ThingTable.Add(new TestTable\r\n            {\r\n                Thing = 20\r\n            });\r\n\r\n            db.SaveChanges();\r\n\r\n            Console.WriteLine(db.ThingTable.Select(x => (float)x.Thing).Min());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`.Sum()` works fine. Also `.Skip(0).Min()` seems to be a workaround, oddly enough.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 15.4\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BenjiZombie": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10529", "title": "GetHashCode(Expression obj) of ExpressionEqualityComparer does not support ExpressionType.Assign", "body": "Hi there,\r\n\r\nI have a homemade mapping/projection library that I use to map/project between DB models and DTOs. In the expression tree that this library builds, there are a few assignments (i.e. Expression.Assign) being made in the logic to support mapping/projection of abstract classes to derived types (i.e. I have the abstract `Field`, and the concrete `BooleanField` entities and the abstract `FieldDto`, and the concret `BooleanFieldDto` DTOs).\r\n\r\nHere is the relevant part in the resulting expression tree:\r\n\r\n```c#\r\n.If (\r\n\t$field .Is Application.Domain.Models.BooleanField\r\n) {\r\n\t.Block(Application.Domain.Models.BooleanField $booleanfield) {\r\n\t\t$booleanfield = (Application.Domain.Models.BooleanField)$field;\r\n\t\t$x = (Web.Models.Schemas.FieldDto).New Web.Models.Schemas.BooleanFieldDto(){\r\n\t\t\tProperties = .New Web.Models.Schemas.BooleanFieldPropertiesDto(){\r\n\t\t\t\tDefaultValue = ($booleanfield.Properties).DefaultValue,\r\n\t\t\t\tLabel = ($booleanfield.Properties).Label,\r\n\t\t\t\tHint = ($booleanfield.Properties).Hint,\r\n\t\t\t\tPlaceholder = ($booleanfield.Properties).Placeholder,\r\n\t\t\t\tIsRequired = ($booleanfield.Properties).IsRequired\r\n\t\t\t},\r\n\t\t\tName = $booleanfield.Name,\r\n\t\t\tFieldTypeName = $booleanfield.FieldTypeName\r\n\t\t}\r\n\t}\r\n} .Else {\r\n\t.Default(System.Void)\r\n};\r\n```\r\n\r\nMapping an existing entity model to its DTO counterpart works as expected, however doing a projection fails with the following exception:\r\n\r\n```c#\r\nAn unhandled exception occurred while processing the request.\r\n\r\nNotImplementedException: The method or operation is not implemented.\r\n\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(Expression obj)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(Expression obj)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode<T>(IList<T> expressions)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(Expression obj)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode<T>(IList<T> expressions)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(Expression obj)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(Expression obj)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(Expression obj)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(Expression obj)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode<T>(IList<T> expressions)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(Expression obj)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode<T>(IList<T> expressions)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer.GetHashCode(Expression obj)\r\nMicrosoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator+CompiledQueryCacheKey.GetHashCode()\r\nMicrosoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator+RelationalCompiledQueryCacheKey.GetHashCode()\r\nSystem.Collections.Generic.ObjectEqualityComparer.GetHashCode(T obj)\r\nSystem.Collections.Concurrent.ConcurrentDictionary.TryGetValue(TKey key, out TValue value)\r\nMicrosoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(object key, out object result)\r\nMicrosoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue<TItem>(IMemoryCache cache, object key, out TItem value)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore<TFunc>(object cacheKey, Func<Func<QueryContext, TFunc>> compiler)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddAsyncQuery<TResult>(object cacheKey, Func<Func<QueryContext, IAsyncEnumerable<TResult>>> compiler)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery<TResult>(Expression query)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync<TResult>(Expression query, CancellationToken cancellationToken)\r\nMicrosoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)\r\nMicrosoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ExecuteAsync<TSource, TResult>(MethodInfo operatorMethodInfo, IQueryable<TSource> source, CancellationToken cancellationToken)\r\nMicrosoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken)\r\nHedgeSoft.Web.Controllers.SchemasController+<Get>d__5.MoveNext() in SchemasController.cs\r\nvar schema = await _mapper.Project<SchemaDetailedDto>(\r\n```\r\nI noticed in the code of `ExpressionEqualityComparer.GetHashCode(Expression obj)`, there is no case for `ExpressionType.Assign`, hence the `NotImplementedException` thrown above. \r\n\r\nIs this something that is not supported, or will be supported by EF?\r\n\r\nAs a workaround, I am fetching the entity normally, then doing a map to a DTO. However I would prefer support for projection for performance reasons.\r\n\r\nThanks in advance!\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: NpgSql\r\nOperating system: Windows 10 Pro\r\nIDE: Visual Studio 2017 15.5.1\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zugzwangm": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10502", "title": "Design: Failure when UseMiddleware(args) is used", "body": "`dotnet ef migrations list`  (and possibly other commands) fails when Startup.Configure() adds a Middleware with `app.UseMiddleware<MyMiddleware>(args)`. **The app works flawlessly while running normally.**\r\n\r\nWorkaround is to avoid using `param object[] args` when calling UseMiddleware(), and inject everything through DI.\r\n\r\n```\r\nApplication startup exception: System.InvalidOperationException: A suitable constructor for type 'MyProject.Web.MasterServer.WebSocketManager.WebSocketManagerMiddleware' could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.MapExtensions.Map(IApplicationBuilder app, PathString pathMatch, Action`1 configuration)\r\n   at MyProject.Web.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env, IServiceProvider serviceProvider, ILoggerFactory loggerFactory, IAntiforgery antiforgery) in D:\\...\\Startup.cs:line 234\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n[2017-12-07 02:12:13] crit: Microsoft.AspNetCore.Hosting.Internal.WebHost[6]\r\n                            Application startup exception\r\nSystem.InvalidOperationException: A suitable constructor for type 'MyProject.Web.MasterServer.WebSocketManager.WebSocketManagerMiddleware' could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.MapExtensions.Map(IApplicationBuilder app, PathString pathMatch, Action`1 configuration)\r\n   at MyProject.Web.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env, IServiceProvider serviceProvider, ILoggerFactory loggerFactory, IAntiforgery antiforgery) in D:\\...\\Startup.cs:line 234\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\nAn error occurred while calling method 'BuildWebHost' on class 'Program'. Continuing without the application service provider. Error: A suitable constructor for type 'MyProject.Web.MasterServer.WebSocketManager.WebSocketManagerMiddleware' could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\r\nUnable to create an object of type 'ApplicationDbContext'. Add an implementation of 'IDesignTimeDbContextFactory<ApplicationDbContext>' to the project, or see https://go.microsoft.com/fwlink/?linkid=851728 for additional patterns supported at design time.\r\nPM> dotnet ef migrations list\r\n```\r\n### Further technical details\r\nEF Core version: 2.0\r\nOperating system: Win10\r\nIDE: Visual Studio 2017 15.4.5\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "julielerman": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10493", "title": "Warn for LastOrDefault without OrderBy", "body": "LastOrDefault is still being evaluated locally and spits out a warning about it at runtime:\r\nThe LINQ expression LastOrDefault could not be translated and will be evaluated locally.\r\nI'm not seeing evidence (searching in this repo, or listed on the roadmap) that it's on target to get implemented. \r\n\r\nAny news?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44563258", "body": "oh yes, i like this one. I have seen this error quite a few times today ;)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44563258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44563360", "body": "is this why I have to explicitly install common?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44563360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44599514", "body": "windows 8.1. I also had to install Microsoft.Framework.ConfigurationModel package explicitly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44599514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44599688", "body": "well when more of the API is fleshed out, there will probably be less of these errors. :)  I was trying to call savechanges & savechangesasync and new that the db was there since I was looking at it in file explorer after calling Create(). :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44599688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mudrz": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10472", "title": "GroupBy Children - N+1 DB trips", "body": "I couldn't find such existing issues or information anywhere\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: SQLite (same with Npgsql.EntityFrameworkCore.PostgreSQL)\r\nOperating system: MacOS High Sierra 10.13.1\r\nIDE: Visual Studio Code 1.18.1\r\n\r\n### Steps to reproduce\r\nA complete solution with the test scenario https://github.com/mudrz/TestsMaxGroupByEF\r\n\r\nIf we query children and group - they get pulled in memory and grouped - expected\r\nIf we query parents and group children - we get N+1 trips to DB\r\n\r\n\r\n### Models\r\n\r\n```c#\r\n    public class Parent\r\n    {\r\n        public int Id { get; set; }\r\n        public virtual ICollection<Child> Children { get; set; }\r\n    }\r\n```\r\n\r\n```c#\r\n    public class Child\r\n    {\r\n        public int Id { get; set; }\r\n        public int Group { get; set; }\r\n        public int ParentId { get; set; }\r\n        public virtual Parent Parent { get; set; }\r\n    }\r\n```\r\n\r\n### Views\r\n```c#\r\n    public class FooVm\r\n    {\r\n        public int? ParentId { get; set; }\r\n        public IEnumerable<BarVm> Bars { get; set; }\r\n    }\r\n```\r\n```c#\r\n    public class BarVm\r\n    {\r\n        public int Group { get; set; }\r\n        public int GroupCount { get; set; }\r\n    }\r\n```\r\n\r\n### Query the children\r\nThis one works as expected\r\n- we query the children and group them\r\n- only column `Group` gets pulled in memory and locally it is grouped.\r\n```shell\r\ncurl localhost:5005/api/group/6\r\n```\r\n```c#\r\n_context.Children\r\n        .Select(c => c.Group)\r\n        .GroupBy(g => g)\r\n        .Select(g => new BarVm\r\n        {\r\n            Group = g.Key,\r\n            GroupCount = g.Count()\r\n        })\r\n```\r\n\r\n### Query the parents\r\nThis one though\r\n- we query the parents and group the children\r\n- we get a separate (N+1) query to the DB for each parent, as if we looped through all parents\r\n```shell\r\ncurl localhost:5005/api/group/2\r\n```\r\n\r\n```c#\r\n_context.Parents\r\n        .Select(p => new FooVm\r\n            {\r\n                ParentId = p.Id,\r\n                Bars = p.Children\r\n                        .Select(c => c.Group)\r\n                        .GroupBy(g => g)\r\n                        .Select(g => new BarVm\r\n                        {\r\n                            Group = g.Key,\r\n                            GroupCount = g.Count()\r\n                        }),\r\n                ChildrenCount = p.Children.Count,\r\n            })\r\n```\r\n\r\nDouble selecting still produced the same result\r\n```c#\r\n_context.Parents\r\n        .Select(p => new\r\n            {\r\n                Groups = p.Children.Select(c => c.Group),\r\n                Parent = p\r\n            })\r\n        .Select(s => new FooVm\r\n            {\r\n                ParentId = s.Parent.Id,\r\n                Bars = s.Groups\r\n                        .GroupBy(g => g)\r\n                        .Select(g => new BarVm\r\n                        {\r\n                            Group = g.Key,\r\n                        }),\r\n            })\r\n```\r\n\r\n\r\n### Questions\r\n- Is this the expected result - multiple queries?\r\n- Is there a way to force select all groups and then group them in memory?\r\n- EF 2.1 will address the in-memory grouping, but will it allow the illustrated example here - grouping of children without multiple queries?\r\n- Is there any other workaround to avoid multiple DB trips, that I am missing (`FromSql` is not a solution, since the real-world scenario pulls various different expressions, merges them dynamically and produces the query)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "felixhacks": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10451", "title": "Allow a second type argument AddDbContext to support inheritance", "body": "I have a project running in different environments with different databases (PostgreSQL / SQL Server). I tried using the same DbContext for both databases but had some problems with migrations since vendor specific code is added (e.g. data types).\r\n\r\nI decided to make two distinct contexts, both extending my dbContext.\r\n\r\n```c#\r\npublic abstract class ParcelLogisticsContext : DbContext\r\n{\r\n\tpublic DbSet<Parcel> Parcel { get; set; }\r\n\tpublic DbSet<HopArrival> HopArrival { get; set; }\r\n\tpublic DbSet<Receipient> Receipient { get; set; }\r\n\tpublic DbSet<Truck> Truck { get; set; }\r\n\tpublic DbSet<Warehouse> Warehouse { get; set; }\r\n\tpublic DbSet<ParcelStorage> ParcelStorage { get; set; }\r\n\r\n\tpublic ParcelLogisticsContext(DbContextOptions options) : base(options)\r\n\t{\r\n\r\n\t}\r\n}\r\n\r\npublic class PgSqlParcelLogisticsContext : ParcelLogisticsContext\r\n{\r\n\tpublic PgSqlParcelLogisticsContext(DbContextOptions options) : base(options)\r\n\t{\r\n\t}\r\n}\r\n\r\npublic class SqlServerParcelLogisticsContext : ParcelLogisticsContext\r\n{\r\n\tpublic SqlServerParcelLogisticsContext(DbContextOptions options) : base(options)\r\n\t{\r\n\t}\r\n}\r\n\r\n```\r\n\r\nFrom now on I added migrations using `Add-Migration -Context PgSqlParcelLogisticsContext ChangedAwesomeFields` and `Add-Migration -Context SqlServerParcelLogisticsContext ChangedAwesomeFields` resulting in different Migrations with vendor specific code in them.\r\n\r\nThe problem i was facing was with dependency injection. When adding EF like below I was unable to use my abstract base class for dependency injection.\r\n\r\n```c#\r\nswitch (Configuration.GetValue<string>(\"UsedDatabase\"))\r\n{\r\n\tcase \"Sql\":\r\n\t\tservices.AddDbContext<SqlServerParcelLogisticsContext>(options => options.UseSqlServer(Configuration.GetConnectionString(\"ParcelLogisticsContext\")));\r\n\tcase \"NpgSql\":\r\n\t\tservices.AddEntityFrameworkNpgsql();\r\n\t\tservices.AddDbContext<PgSqlParcelLogisticsContext>(options => options.UseNpgsql(Configuration.GetConnectionString(\"ParcelLogisticsContext\")));\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tthrow new Exception(\"InvalidUsedDatabase\");\r\n}\r\n```\r\n\r\nNow exceptions are thrown when trying to get a context like so because Dependency Injection could not find a service for type `ParcelLogisticsDbContext`:\r\n\r\n```c#\r\nclass Test\r\n{\r\n\tpublic Test(ParcelLogisticsDbContext context)\r\n\t{\r\n\t}\r\n}\r\n```\r\n\r\nTo resolve this issue I added extension methods so I would be able to use `AddDbContext` with two type arguments in a similar way e.g. `AddScoped` works and I could use it like this:\r\n\r\n```c#\r\nswitch (Configuration.GetValue<string>(\"UsedDatabase\"))\r\n{\r\n\tcase \"Sql\":\r\n\t\tservices.AddDbContext<ParcelLogisticsContext, SqlServerParcelLogisticsContext>(options => options.UseSqlServer(Configuration.GetConnectionString(\"ParcelLogisticsContext\")));\r\n\t\tbreak;\r\n\tcase \"NpgSql\":\r\n\t\tservices.AddEntityFrameworkNpgsql();\r\n\t\tservices.AddDbContext<ParcelLogisticsContext, PgSqlParcelLogisticsContext>(options => options.UseNpgsql(Configuration.GetConnectionString(\"ParcelLogisticsContext\")));\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tthrow new Exception(\"InvalidUsedDatabase\");\r\n}\r\n```\r\n\r\nDo you think this is a good solution or do you have any other ideas? I also submitted a Pull Request  (#10454) and I am happy for feedback! \r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer, Npgsql.EntityFrameworkCore.PostgreSQL\r\nOperating system: Windows 10 Version 1703\r\nIDE: Visual Studio 2017 15.4.5\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10454", "title": "Allows two type arguments for AddDbContext", "body": "To allow inheritance of DbContexts with Dependency Injection, extension methods are created that allow to specify an abstract type and an implementation type similar to `AddTransient`, `AddScoped` and `AddSingleton`.\r\n- `AddDbContext<TContext>()` calls `AddDbContext<TBaseContext, TContext>()` with `TContext` also being the `TBaseContext`\r\n- `AddDbContextPool<TBaseContext, TContext>` is not implemented since its implementation is not so trivial and I wanted some feedback first.\r\n\r\nFixes #10451", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carnaval": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10447", "title": "Navigation property populated twice", "body": "Hey.\r\nIt seems that in some instances it's possible for an `Include`ed navigation list to receive duplicate items when it's being queried while its dbset is being iterated on.\r\n\r\nNow, I'm no EF expert so maybe it's a misunderstanding on my part but I'm assuming that querying is always supposed to be a no-op, whether you use `Include()` or not.\r\n\r\nTo be more explicit, here is a small standalone repro :\r\n```c#\r\n    public class Parent\r\n    {\r\n        [Key]\r\n        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]\r\n        public int Id { get; set; }\r\n        \r\n        public string Name { get; set; }\r\n\r\n        public IEnumerable<Child> Children { get; set; }\r\n    }\r\n\r\n    public class Child {\r\n        [Key]\r\n        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]\r\n        public int Id { get; set; }\r\n\r\n        public Parent Entry { get; set; }\r\n    }\r\n\r\n    public class Ctx : DbContext\r\n    {\r\n        public DbSet<Parent> Parents { get; set; }\r\n        public DbSet<Child> Children { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlite(\"Data Source=./db;\");\r\n        }\r\n    }\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            // populate\r\n            using (var db = new Ctx()) {\r\n                db.Database.EnsureCreated();\r\n                var p1 = new Parent {\r\n                    Name = \"A1\",\r\n                    Children = new List<Child> { }\r\n                };\r\n                var p2 = new Parent {\r\n                    Name = \"A2\",\r\n                    Children = new List<Child> {\r\n                        new Child { },\r\n                    }\r\n                };\r\n                db.Add(p1); db.Add(p2);\r\n                db.SaveChanges();\r\n            }\r\n\r\n            // read back\r\n            using (var db = new Ctx()) {\r\n                foreach (var entry in db.Parents\r\n                                        .Include(e => e.Children)) {\r\n                    // should be no-op ?\r\n                    db.Parents\r\n                        .Include(e => e.Children)\r\n                        .ToList();\r\n                }\r\n\r\n                foreach (var entry in db.Parents\r\n                                        .Include(e => e.Children)) {\r\n                    Console.WriteLine($\"parent {entry.Name} ({entry.Id}) :\");\r\n                    foreach (var child in entry.Children) {\r\n                        Console.WriteLine($\"  child ({child.Id})\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nWhich outputs :\r\n```\r\nparent A1 (1) :\r\nparent A2 (2) :\r\n  child (1)\r\n  child (1)\r\n```\r\nEF core version : 2.0.1\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10447/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "seantarogers": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10446", "title": "Child inheritance generating InvalidCastException ", "body": "### Issue\r\n\r\nI am trying to use Table Per Hierarchy inheritance in conjunction with a one to many relationship.  Both the Parent and child entities use inheritance. I have a very simple entity model. I have a one base parent entity: **Session** which has two entities which extend from it: **QuotingSession** and **BackOfficeSession**. Both of these two parent entities contain a collection of child entities (a one to many relationship). The child entities are also built using inheritance. There is a base child entity: **Policy**. This base child entity is extended by two entities: **QuotingPolicy** and **BackOfficePolicy**. \r\n\r\nWhen I construct either of the Parent entities and attempt to save I receive this exception:\r\n\r\n```\r\nSystem.InvalidCastException: Unable to cast object of type 'NetCore21.QuotingSession' to type 'NetCore21.BackOfficeSession'\r\n```\r\n\r\n**Full stack trace:**\r\n```\r\n{Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while updating the entries. See the inner exception for details. ---> System.InvalidCastException: Unable to cast object of type 'NetCore21.QuotingSession' to type 'NetCore21.BackOfficeSession'.\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.GetCollection(Object instance)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.GetOrCreateCollection(Object instance)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3.Add(Object instance, Object value)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.AddToCollection(InternalEntityEntry entry, INavigation navigation, IClrCollectionAccessor collectionAccessor, Object value)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IReadOnlyList`1 containingPrincipalKeys, IReadOnlyList`1 containingForeignKeys, Object oldValue, Object newValue)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IReadOnlyList`1 keys, IReadOnlyList`1 foreignKeys, Object oldValue, Object newValue)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectKeyChange(InternalEntityEntry entry, IProperty property)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.PropertyChanged(InternalEntityEntry entry, IPropertyBase property, Boolean setModified)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(IPropertyBase propertyBase, Object value, Boolean setModified)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.SetForeignKeyProperties(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey, Boolean setModified)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IReadOnlyList`1 containingPrincipalKeys, IReadOnlyList`1 containingForeignKeys, Object oldValue, Object newValue)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IReadOnlyList`1 keys, IReadOnlyList`1 foreignKeys, Object oldValue, Object newValue)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectKeyChange(InternalEntityEntry entry, IProperty property)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.PropertyChanged(InternalEntityEntry entry, IPropertyBase property, Boolean setModified)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(IPropertyBase propertyBase, Object value, Boolean setModified)\r\n   at Microsoft.EntityFrameworkCore.Update.ModificationCommand.PropagateResults(ValueBuffer valueBuffer)\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetWithPropagation(Int32 commandIndex, RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(Tuple`2 parameters)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IReadOnlyList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at NetCore21.Program.Main(String[] args) in C:\\EFTest-master\\NetCore21\\Program.cs:line 22}\r\n```\r\n\r\n\r\n### Steps to reproduce\r\n\r\n**Reproduction projects**\r\n\r\nHere is a reproduction of the problem in both EF Core 1.1.1 and EF Core 2.0.1, plus a project that successfully saves the same structure in EF 6:\r\n\r\nhttps://github.com/seantarogers/EFTest\r\n\r\n**Database structure I am trying to write to**\r\n\r\n![databaseschema](https://user-images.githubusercontent.com/8544425/33451895-508b819e-d608-11e7-9bc9-c3493d754513.png)\r\n\r\n**Class structure:**\r\n\r\n**1. Session**\r\n```c#\r\nnamespace EFTest\r\n{\r\n    public abstract class Session\r\n    {\r\n        public int Id { get; private set; }\r\n    }\r\n}\r\n```\r\n**2. QuotingSession**\r\n```c#\r\nusing System.Collections.Generic;\r\n\r\nnamespace EFTest\r\n{\r\n    public class QuotingSession : Session\r\n    {\r\n        public string QuotingName { get; private set; }\r\n        public List<QuotingPolicy> Policies { get; private set; }\r\n\r\n        private QuotingSession()\r\n        {\r\n        }\r\n\r\n        public QuotingSession(string name, List<QuotingPolicy> quotingPolicies)\r\n        {\r\n            QuotingName = name;\r\n            Policies = quotingPolicies;\r\n\r\n        }\r\n   }\r\n}\r\n```\r\n**3. BackOfficeSession**\r\n```c#\r\nusing System.Collections.Generic;\r\n\r\nnamespace EFTest\r\n{\r\n    public class BackOfficeSession : Session\r\n    {\r\n        public List<BackOfficePolicy> Policies { get; private set; }\r\n        public string BackOfficeName { get; private set; }\r\n\r\n        private BackOfficeSession()\r\n        {\r\n        }\r\n\r\n        public BackOfficeSession(string name, List<BackOfficePolicy> policies)\r\n        {\r\n            BackOfficeName = name;\r\n            Policies = policies;\r\n        }\r\n    }\r\n}\r\n```\r\n**4. Policy** \r\n```c#\r\nnamespace EFTest\r\n{\r\n    public abstract class Policy\r\n    {\r\n        public int Id { get; set; }\r\n        public int SessionId { get; set; }\r\n    }\r\n}\r\n```\r\n**5. QuotingPolicy** \r\n```c#\r\nnamespace EFTest\r\n{\r\n    public class QuotingPolicy : Policy\r\n    {\r\n        public string QuotingPolicyName { get; private set; }\r\n\r\n        private QuotingPolicy()\r\n        {\r\n\r\n        }\r\n\r\n        public QuotingPolicy(string name)\r\n        {\r\n            QuotingPolicyName = name;\r\n        }\r\n    }\r\n}\r\n```\r\n**6. BackOfficePolicy** \r\n```c#\r\nnamespace EFTest\r\n {\r\n    public class BackOfficePolicy : Policy\r\n    {\r\n        public string BackOfficePolicyName { get; private set; }\r\n\r\n        private BackOfficePolicy()\r\n        {\r\n        }\r\n\r\n        public BackOfficePolicy(string name)\r\n        {\r\n           BackOfficePolicyName = name;\r\n        }\r\n    }\r\n}\r\n```\r\n**7. EF DB Context and Fluent Configuration**\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace EFTest\r\n{\r\n    public class TestDbContext : DbContext\r\n    {\r\n        public TestDbContext(DbContextOptions options)\r\n        : base(options)\r\n        {\r\n        }\r\n\r\n        public DbSet<QuotingSession> QuotingSessions { get; set; }\r\n        public DbSet<BackOfficeSession> BackOfficeSessions { get; set; }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            ConfigureSession(modelBuilder);\r\n            ConfigurePolicy(modelBuilder);\r\n            ConfigureQuotingSession(modelBuilder);\r\n            ConfigureBackOfficeSession(modelBuilder);\r\n            ConfigureBackOfficePolicy(modelBuilder);\r\n            ConfigureQuotingPolicy(modelBuilder);\r\n        }\r\n\r\n        public static void ConfigurePolicy(ModelBuilder modelBuilder)\r\n        {\r\n            var entity = modelBuilder.Entity<Policy>();\r\n            entity.ToTable(\"Policy\", \"dbo\");\r\n            entity.HasKey(x => x.Id);\r\n\r\n            entity.HasDiscriminator<int>(\"SessionType\")\r\n                .HasValue<QuotingPolicy>(1)\r\n                .HasValue<BackOfficePolicy>(2);\r\n        }\r\n\r\n        public static void ConfigureBackOfficePolicy(ModelBuilder modelBuilder)\r\n        {\r\n            var entity = modelBuilder.Entity<BackOfficePolicy>();\r\n            entity.Property(x => x.BackOfficePolicyName);\r\n        }\r\n\r\n        public static void ConfigureQuotingPolicy(ModelBuilder modelBuilder)\r\n        {\r\n            var entity = modelBuilder.Entity<QuotingPolicy>();\r\n            entity.Property(x => x.QuotingPolicyName);\r\n        }\r\n\r\n        public static void ConfigureSession(ModelBuilder modelBuilder)\r\n        {\r\n            var entity = modelBuilder.Entity<Session>();\r\n            entity.ToTable(\"Session\", \"dbo\");\r\n            entity.HasKey(x => x.Id);\r\n\r\n            entity.HasDiscriminator<int>(\"SessionType\")\r\n                .HasValue<QuotingSession>(1)\r\n                .HasValue<BackOfficeSession>(2);\r\n        }\r\n\r\n        public static void ConfigureBackOfficeSession(ModelBuilder modelBuilder)\r\n        {\r\n            var entity = modelBuilder.Entity<BackOfficeSession>();\r\n            entity.Property(x => x.BackOfficeName);\r\n            entity.HasMany(c => c.Policies).WithOne().HasForeignKey(c => c.SessionId);\r\n       // entity.Ignore(c => c.Policies); uncomment this to see it working\r\n        }\r\n\r\n        public static void ConfigureQuotingSession(ModelBuilder modelBuilder)\r\n        {\r\n            var entity = modelBuilder.Entity<QuotingSession>();\r\n            entity.Property(x => x.QuotingName);\r\n            entity.HasMany(c => c.Policies).WithOne().HasForeignKey(c => c.SessionId);\r\n        }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n**8. To test it**\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace EFTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var optionsBuilder = new DbContextOptionsBuilder<TestDbContext>();\r\n            const string conn = \"Server=.\\\\SqlServer2014;Database=EFTest;Trusted_Connection=True\"    \r\n            optionsBuilder.UseSqlServer(conn);\r\n            using (var dbContext = new TestDbContext(optionsBuilder.Options))\r\n            {\r\n                var quotingPolicy = new QuotingPolicy(\"quotingPolicyname\");\r\n                var quotingSession = new QuotingSession(\"quotingSessionName\", new List<QuotingPolicy> {quotingPolicy});\r\n\r\n                dbContext.QuotingSessions.Add(quotingSession);\r\n                dbContext.SaveChanges();  // BLOWS UP HERE!\r\n           }\r\n        }\r\n    }\r\n}\r\n```\r\n### Further technical details\r\nEF Core version: 1.1.1 and 2.0.1\r\nDatabase Provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nOperating system: Windows 7 and Windows 10\r\nIDE: Visual Studio 2017 Enterprise 15.3.0\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10446/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jsacapdev": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10443", "title": "Allow opt-out of rows affected check", "body": "A trigger is created on the database to delete an row if it meets some condition.\r\n\r\nAn entity is added to the table that matches that condition.\r\n\r\nThe call to SaveChanges() throws.\r\n\r\nIs this by design? Is there a workaround? (other than using a third party library)\r\n\r\n```\r\nException message:\r\n\r\n\"Database operation expected to affect 1 row(s) but actually affected 0 row(s). Data may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=527962 for information on understanding and handling optimistic concurrency exceptions.\"\r\n\r\nStack trace:\r\n\r\n\"   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ThrowAggregateUpdateConcurrencyException(Int32 commandIndex, Int32 expectedRowsAffected, Int32 rowsAffected)\\r\\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetWithPropagation(Int32 commandIndex, RelationalDataReader reader)\\r\\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(RelationalDataReader reader)\\r\\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(IRelationalConnection connection)\\r\\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(Tuple`2 parameters)\\r\\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\\r\\n   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, TState state, Func`2 operation)\\r\\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\\r\\n   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(IReadOnlyList`1 entries)\\r\\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IReadOnlyList`1 entriesToSave)\\r\\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\\r\\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\\r\\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges()\\r\\n   at AlrightTriggerConsole.Program.Main(String[] args) in C:\\\\playground\\\\AlrightTrigger\\\\AlrightTriggerConsole\\\\Program.cs:line 30\"\r\n\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n1. Ran the program to create a Blog.\r\n\r\n2. Ran the program to create a post.\r\n\r\n3. Manually created the trigger.\r\n\r\n4. Ran the program again to create a post.\r\n\r\n```c#\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace AlrightTriggerConsole\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                using (var db = new BloggingContext())\r\n                {\r\n                    // if (!db.Blogs.Any())\r\n                    // {\r\n                    //     db.Blogs.Add(new Blog { Url = \"http://blogs.msdn.com/\" });\r\n                    // }\r\n\r\n                    var blog = db.Blogs.FirstOrDefault();\r\n\r\n                    if (blog.Posts == null)\r\n                    {\r\n                        blog.Posts = new List<Post> { };\r\n                    }\r\n\r\n                    blog.Posts.Add(new Post { Content = \"test1\", Title = \"test1\" });\r\n\r\n                    var count = db.SaveChanges();\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(ex.Message);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class BloggingContext : DbContext\r\n    {\r\n        public DbSet<Blog> Blogs { get; set; }\r\n        public DbSet<Post> Posts { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(\"Server=localhost;Database=BlogDb;User Id=sa;Password=Password12345;\");\r\n        }\r\n    }\r\n\r\n    public class Blog\r\n    {\r\n        public int BlogId { get; set; }\r\n        public string Url { get; set; }\r\n\r\n        public List<Post> Posts { get; set; }\r\n    }\r\n\r\n    public class Post\r\n    {\r\n        public int PostId { get; set; }\r\n        public string Title { get; set; }\r\n        public string Content { get; set; }\r\n\r\n        public int BlogId { get; set; }\r\n        public Blog Blog { get; set; }\r\n    }\r\n}\r\n\r\n```\r\n\r\n```T-SQL\r\n\r\nCREATE TRIGGER RemoveTestPosts\r\nON [dbo].[Posts]\r\nFOR INSERT\r\nAS\r\nDELETE FROM [dbo].[Posts] WHERE Content = 'test1'\r\nGO\r\n\r\n```\r\n\r\n\r\n### Further technical details\r\nEF Core version: \r\nMicrosoft.AspNetCore.All 2.0.3\r\nMicrosoft.EntityFrameworkCore 2.0.1\r\n\r\nDatabase Provider: \r\nMicrosoft.EntityFrameworkCore.SqlServer\r\nSQL Server is running in docker\r\n\r\nOperating system: \r\nVisual Studio Code \r\n\r\nDotnet:\r\nPS C:\\playground\\AlrightTrigger\\AlrightTriggerConsole> dotnet --info\r\n.NET Command Line Tools (2.0.3)\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  12f0c7efcc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6e260b49b0d89a032579ce22ae880ec51803bc80", "message": "Summary of the changes\n- Enable response files at command line\n\nManual tests include:\n\n1. dotnet ./dotnet-ef.dll migrations add initial @BloggingContext.ef.config\n\n(BloggingContext.ef.config contents)\n-p\nC:\\playground\\AppToBuilder\\AppToBuilder.csproj\n-s\nC:\\playground\\AppToBuilder\\AppToBuilder.csproj\n\n2. dotnet ./dotnet-ef.dll @BloggingContext.ef.config\n\n(BloggingContext.ef.config contents)\nmigrations\nadd\ninitial\n-p\nC:\\playground\\AppToBuilder\\AppToBuilder.csproj\n-s\nC:\\playground\\AppToBuilder\\AppToBuilder.csproj\n\n3. dotnet ./dotnet-ef.dll migrations add initial @D:/BloggingContext.ef.config (relative path)\n\n4. dotnet ./dotnet-ef.dll migrations add @D:/BloggingContext.ef.config (error condition, results in Missing required argument '<NAME>'.)\n\nFixes #10409"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cincuranet": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10431", "title": "Why are AppendIdentityWhereCondition and AppendRowsAffectedWhereCondition abstract and rest is virtual?", "body": "Why are `AppendIdentityWhereCondition` and `AppendRowsAffectedWhereCondition` abstract and rest is virtual? \r\n\r\nIn _FirebirdClient_ I don't have any code path where these could be used (but I do use other parts from `UpdateSqlGenerator` like i.e. `AppendInsertCommandHeader`), yet I still have to override these and have a dummy code there.\r\n\r\nWould making these virtual brake anything?\r\nMaybe even, given these are very much SQL Server specific (although I can imagine other providers can fit in), these could go into `EFCore.SqlServer` (but that would be breaking change).", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joacar": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10430", "title": "Missing multi-part identifier when executing ToListAsync", "body": "### Failing query\r\n```c#\r\nvar query = await ctx\r\n.Profiles\r\n.Include(i => i.ProfileInstagrams)\r\n.ThenInclude(i => i.Instagram)\r\n.Where(p => !p.Deleted)\r\n.OrderBy(p => (int?)p.ProfileInstagrams.Sum(i => i.Instagram.FollowCount) ?? 0)\r\n.ToListAsync();\r\n```\r\n\r\nCorresponding `ToList()` version works (see code at the bottom). Just paste the code into an empty WebApplication project and launch it.\r\n\r\nThe async version works if the `OrderBy` references a single property e.g. `OrderBy(p => (int?) p.ProfileInstagram.FollowCount) ?? 0)`\r\n\r\nSQL Server Express 13.0.4001.0 (English)\r\n\r\n### StackTrace\r\n```\r\nWebApplication3> System.Data.SqlClient.SqlException (0x80131904): The multi-part identifier \"t.c\" could not be bound.\r\nWebApplication3> The multi-part identifier \"t.Id\" could not be bound.\r\nWebApplication3>    at System.Data.SqlClient.SqlCommand.<>c.<ExecuteDbDataReaderAsync>b__108_0(Task`1 result)\r\nWebApplication3>    at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\nWebApplication3>    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\nWebApplication3>    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\nWebApplication3>    at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.<ExecuteAsync>d__17.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<BufferlessMoveNext>d__10.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.<ExecuteAsync>d__7`2.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.<MoveNext>d__9.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Linq.AsyncEnumerable.JoinAsyncIterator`4.<MoveNextCore>d__20.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\nWebApplication3>    at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\nWebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.QueryBuffer.<IncludeCollectionAsync>d__12.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.<_IncludeAsync>d__20`1.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\nWebApplication3>    at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.TaskLiftingExpressionVisitor.<_ExecuteAsync>d__8`1.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\nWebApplication3>    at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AsyncSelectEnumerable`2.AsyncSelectEnumerator.<MoveNext>d__3.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\nWebApplication3>    at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.<MoveNextCore>d__7.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\nWebApplication3>    at System.Linq.AsyncEnumerable.AsyncIterator`1.<MoveNext>d__10.MoveNext()\r\nWebApplication3> --- End of stack trace from previous location where exception was thrown ---\r\nWebApplication3>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nWebApplication3>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\nWebApplication3>    at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext()\r\nWebApplication3> ClientConnectionId:b8a1ac8b-8515-4c53-a7e8-433b99af31b5\r\nWebApplication3> Error Number:4104,State:1,Class:16\r\n```\r\n\r\n### Further technical details\r\nMicrosoft.AspNetCore.All.2.0.3\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer.2.0.1\r\nOperating system: Windows 10 Pro 1709 16299.64\r\nIDE: Visual Studio Community 2017\r\n\r\n### Steps to reproduce\r\nEmpty WebApp start project then just paste code\r\n```c#\r\n    public class ProfileInstagram\r\n    {\r\n        public int ProfileId { get; set; }\r\n\r\n        public Profile Profile { get; set; }\r\n\r\n        public int InstagramId { get; set; }\r\n\r\n        public Instagram Instagram { get; set; }\r\n    }\r\n\r\n    public class Profile\r\n    {\r\n        public int Id { get; set; }\r\n\r\n        public ICollection<ProfileInstagram> ProfileInstagrams { get; set; }\r\n    }\r\n\r\n    public class Instagram\r\n    {\r\n        public int Id { get; set; }\r\n\r\n        public int FollowCount { get; set; }\r\n\r\n        public ICollection<ProfileInstagram> ProfileInstagrams { get; set; }\r\n    }\r\n\r\n    public class Context : DbContext\r\n    {\r\n        public DbSet<Profile> Profiles { get; set; }\r\n\r\n        public DbSet<Instagram> Instagrams { get; set; }\r\n\r\n        // ReSharper disable once SuggestBaseTypeForParameter\r\n        // Must declare type explicitly when used with pooling\r\n        public Context(DbContextOptions<Context> options) : base(options)\r\n        {\r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<ProfileInstagram>(e =>\r\n            {\r\n                e.HasKey(_ => new\r\n                {\r\n                    _.ProfileId,\r\n                    _.InstagramId\r\n                });\r\n                e.HasOne(_ => _.Profile)\r\n                 .WithMany(_ => _.ProfileInstagrams);\r\n\r\n                e.HasOne(_ => _.Instagram)\r\n                 .WithMany(_ => _.ProfileInstagrams);\r\n            });\r\n            base.OnModelCreating(modelBuilder);\r\n        }\r\n    }\r\n\r\n    public class Startup\r\n    {\r\n        // This method gets called by the runtime. Use this method to add services to the container.\r\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            const string cs =\r\n                \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=Test1;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\";\r\n            services.AddEntityFrameworkSqlServer()\r\n                    .AddDbContext<Context>(options => options.UseSqlServer(cs));\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n        public void Configure(\r\n            IApplicationBuilder app,\r\n            IHostingEnvironment env,\r\n            IServiceProvider prv)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n\r\n            Seed(prv);\r\n\r\n            app.Run(async context => { await Query(prv); });\r\n        }\r\n\r\n        private static async Task Query(IServiceProvider prv)\r\n        {\r\n            // ReSharper disable once ConstantNullCoalescingCondition\r\n            // Force COALESCE in case no Instagram for Profile\r\n            using (var scope = prv.CreateScope())\r\n            {\r\n                var ctx = scope.ServiceProvider.GetRequiredService<Context>();\r\n                var query = ctx\r\n                    .Profiles\r\n                    .Include(i => i.ProfileInstagrams)\r\n                    .ThenInclude(i => i.Instagram)\r\n                    .OrderBy(p => (int?) p.ProfileInstagrams.Sum(i => i.Instagram.FollowCount) ?? 0);\r\n\r\n                var influencers = query.ToList();\r\n                var influencersAsync = await query.ToListAsync();\r\n            }\r\n        }\r\n\r\n        private static void Seed(IServiceProvider prv)\r\n        {\r\n            using (var scope = prv.CreateScope())\r\n            {\r\n                var ctx = scope.ServiceProvider.GetRequiredService<Context>();\r\n                ctx.Database.EnsureDeleted();\r\n                ctx.Database.EnsureCreated();\r\n\r\n                var instagrams = new List<Instagram>\r\n                {\r\n                    new Instagram\r\n                    {\r\n                        FollowCount = 10\r\n                    },\r\n                    new Instagram\r\n                    {\r\n                        FollowCount = 20\r\n                    },\r\n                    new Instagram\r\n                    {\r\n                        FollowCount = 31\r\n                    }\r\n                };\r\n                ctx.Instagrams.AddRange(instagrams);\r\n                var influencers = new List<Profile>\r\n                {\r\n                    new Profile\r\n                    {\r\n                        ProfileInstagrams = new List<ProfileInstagram>\r\n                        {\r\n                            new ProfileInstagram\r\n                            {\r\n                                Instagram = instagrams[0]\r\n                            }\r\n                        }\r\n                    },\r\n                    new Profile\r\n                    {\r\n                        ProfileInstagrams = new List<ProfileInstagram>\r\n                        {\r\n                            new ProfileInstagram\r\n                            {\r\n                                Instagram = instagrams[1]\r\n                            }\r\n                        }\r\n                    },\r\n                    new Profile(),\r\n                    new Profile\r\n                    {\r\n                        ProfileInstagrams = new List<ProfileInstagram>\r\n                        {\r\n                            new ProfileInstagram\r\n                            {\r\n                                Instagram = instagrams[0]\r\n                            },\r\n                            new ProfileInstagram\r\n                            {\r\n                                Instagram = instagrams[1]\r\n                            }\r\n                        }\r\n                    },\r\n                    new Profile\r\n                    {\r\n                        ProfileInstagrams = new List<ProfileInstagram>\r\n                        {\r\n                            new ProfileInstagram\r\n                            {\r\n                                Instagram = instagrams[2]\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                ctx.Profiles.AddRange(influencers);\r\n                ctx.SaveChanges();\r\n            }\r\n        }\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrpmorris": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10426", "title": "CollectionEntry.IsLoaded is false when collection is loaded but empty", "body": "When I execute DbContext.SomeSet.Include(x => x.SomeCollection) and that collection is empty, the EntityCollection for that reference returns IsLoaded=false instead of IsLoaded = true.\r\n\r\n### Steps to reproduce\r\n(See attachment, which includes full test case)\r\n\r\n[EFCoreChildMembersIsLoaded.zip](https://github.com/aspnet/EntityFrameworkCore/files/1513687/EFCoreChildMembersIsLoaded.zip)\r\n\r\n\r\n```c#\r\n    public class MyStructure\r\n    {\r\n        public Guid Id { get; set; }\r\n        public Guid? ParentId { get; set; }\r\n        public MyStructure Parent { get; set; }\r\n        public ICollection<MyStructure> Children { get; set; }\r\n    }\r\n\r\n        [Fact]\r\n        public void IsLoaded_ShouldBeTrue_WhenChildRelationshipIsIncluded_AndChildPropertyIsEmpty()\r\n        {\r\n            Guid id;\r\n            using (var firstContext = new MyDataContext())\r\n            {\r\n                var root = new MyStructure();\r\n                firstContext.Add(root);\r\n                firstContext.SaveChanges();\r\n                id = root.Id;\r\n            }\r\n\r\n            using (var secondContext = new MyDataContext())\r\n            {\r\n                MyStructure root = secondContext.MyStructures.Include(x => x.Children).Single(x => x.Id == id);\r\n\r\n                EntityEntry rootEntry = secondContext.Entry(root);\r\n                CollectionEntry childObjectsMember = rootEntry.Collection(\"Children\");\r\n\r\n                Assert.True(childObjectsMember.IsLoaded);\r\n            }\r\n        }\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 Professional\r\nIDE: Visual Studio 2017 (15.4.0)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kdrapel": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10416", "title": "Scaffolding issue with Oracle function-based index", "body": "When performing a scaffolding from an existing Oracle 11g database (using Devart Dotconnect) with the following command:\r\n\r\nScaffold-DbContext \"DATA SOURCE=(DESCRIPTION= (ADDRESS= (PROTOCOL=TCP) (HOST=XXXXXX) (PORT=1521)) (CONNECT_DATA= (SERVER=DEDICATED) (SERVICE_NAME=YYYY))); PASSWORD=aaaa;USER ID=bbbb\" Devart.Data.Oracle.Entity.EFCore\r\n\r\nI encounter an exception about a \"Value cannot be null\".  After narrowing down the culprit table, it is caused by a function-based index on a table\r\n\r\n```\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: column\r\n   at Microsoft.EntityFrameworkCore.Utilities.Check.NotNull[T](T value, String parameterName)\r\n   at Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory.GetPropertyName(DatabaseColumn column)\r\n   at System.Linq.Enumerable.SelectListIterator`2.ToArray()\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory.VisitIndex(EntityTypeBuilder builder, DatabaseIndex index)\r\n   at Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory.VisitIndexes(EntityTypeBuilder builder, ICollection`1 indexes)\r\n   at Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory.VisitTable(ModelBuilder modelBuilder, DatabaseTable table)\r\n   at Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory.VisitTables(ModelBuilder modelBuilder, ICollection`1 tables)\r\n   at Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory.VisitDatabaseModel(ModelBuilder modelBuilder, DatabaseModel databaseModel)\r\n   at Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory.CreateFromDatabaseModel(DatabaseModel databaseModel, Boolean useDatabaseNames)\r\n   at Microsoft.EntityFrameworkCore.Scaffolding.Internal.RelationalScaffoldingModelFactory.Create(String connectionString, IEnumerable`1 tables, IEnumerable`1 schemas, Boolean useDatabaseNames)\r\n   at Microsoft.EntityFrameworkCore.Scaffolding.Internal.ModelScaffolder.Generate(String connectionString, IEnumerable`1 tables, IEnumerable`1 schemas, String projectPath, String outputPath, String rootNamespace, String contextName, Boolean useDataAnnotations, Boolean overwriteFiles, Boolean useDatabaseNames)\r\n   at Microsoft.EntityFrameworkCore.Design.Internal.DatabaseOperations.ScaffoldContext(String provider, String connectionString, String outputDir, String dbContextClassName, IEnumerable`1 schemas, IEnumerable`1 tables, Boolean useDataAnnotations, Boolean overwriteFiles, Boolean useDatabaseNames)\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.ScaffoldContextImpl(String provider, String connectionString, String outputDir, String dbContextClassName, IEnumerable`1 schemaFilters, IEnumerable`1 tableFilters, Boolean useDataAnnotations, Boolean overwriteFiles, Boolean useDatabaseNames)\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.ScaffoldContext.<>c__DisplayClass0_1.<.ctor>b__0()\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.<>c__DisplayClass3_0`1.<Execute>b__0()\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)\r\n```\r\n\r\n### Steps to reproduce\r\nThe bug will happen as soon as the visitor arrives on a table containing a function-based index like this one below, where USERNAME_TXT is a VARCHAR2 (30 CHAR).\r\n\r\nCREATE INDEX \"FAULTYINDEX\" ON \"TABLE\" (UPPER(\"USERNAME_TXT\")) \r\n\r\nOracle will create this index whose COLUMN_NAME is in fact something like \"SYS_NC00019$\" in my case. **This column does not exist as such on the table** and I think this is what is leading to the problem with the null exception. I had the same issue occuring on another table of the schema that had the same kind of index construction.\r\n\r\n![untitled](https://user-images.githubusercontent.com/12449790/33323661-7f8668a4-d44d-11e7-99ad-c53c02d92c66.png)\r\n\r\nFrom http://www.dba-oracle.com/oracle11g/oracle_11g_function_based_columns.htm:\r\n\r\n_Oracle 11g has introduced a new feature that allows you to create a \"virtual column\", an empty column that contains a function upon other table columns (the function itself is stored in the data dictionary)._\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Devart.Data.Oracle.Entity.EFCore 9.5.399\r\nOperating system: W7\r\nIDE: VS 2017 Community\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hikalkan": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10407", "title": "Changes on #9825 caused an issue", "body": "Hi all,\r\n\r\n#### Problem\r\n\r\nThe changes to solve this issue caused an inconsistent exception for us. We disabled this feature by the code below:\r\n\r\n````C#\r\nAppContext.SetSwitch(\"Microsoft.EntityFrameworkCore.Issue9825\", true);\r\n````\r\n\r\nThen our code worked again. The exception we have (without enabling Microsoft.EntityFrameworkCore.Issue9825 as shown above):\r\n\r\n````C#\r\nSystem.InvalidOperationException: variable 'context' of type 'Abp.EntityFrameworkCore.AbpDbContext' referenced from scope '', but it is not defined\r\n   at System.Linq.Expressions.Compiler.VariableBinder.Reference(ParameterExpression node, VariableStorageKind storage)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.VisitParameter(ParameterExpression node)\r\n   at System.Linq.Expressions.ParameterExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.Visit(Expression node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMember(MemberExpression node)\r\n   at System.Linq.Expressions.MemberExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.Visit(Expression node)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(ReadOnlyCollection`1 nodes)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.VisitInvocation(InvocationExpression node)\r\n   at System.Linq.Expressions.InvocationExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.Visit(Expression node)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.VisitUnary(UnaryExpression node)\r\n   at System.Linq.Expressions.UnaryExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.Visit(Expression node)\r\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.Visit(Expression node)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(ReadOnlyCollection`1 nodes)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.VisitLambda[T](Expression`1 node)\r\n   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.Compiler.VariableBinder.Visit(Expression node)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda[TResults]()\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass24_0`1.<CompileAsyncQuery>b__0()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddAsyncQuery[TResult](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync[TResult](Expression expression, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ExecuteAsync[TSource,TResult](MethodInfo operatorMethodInfo, IQueryable`1 source, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync[TSource](IQueryable`1 source, CancellationToken cancellationToken)\r\n   at Volo.FootbalManager2.Authorization.Users.UserLinkAppService.<GetLinkedUsers>d__7.MoveNext() in C:\\Users\\ismcagdas\\Downloads\\FootbalManager2\\aspnet-core\\src\\Volo.FootbalManager2.Application\\Authorization\\Users\\UserLinkAppService.cs:line 76\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at lambda_method(Closure , Object )\r\n   at Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable.Awaiter.GetResult()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextExceptionFilterAsync>d__23.MoveNext()\r\n````\r\n\r\n#### Query & QueryFilter:\r\n\r\nOur query is like that:\r\n\r\n````C#\r\nprivate IQueryable<LinkedUserDto> CreateLinkedUsersQuery(UserAccount currentUserAccount, string sorting)\r\n{\r\n    var currentUserIdentifier = AbpSession.ToUserIdentifier();\r\n\r\n    return (from userAccount in _userAccountRepository.GetAll()\r\n            join tenant in _tenantRepository.GetAll() on userAccount.TenantId equals tenant.Id into tenantJoined\r\n            from tenant in tenantJoined.DefaultIfEmpty()\r\n            where\r\n                (userAccount.TenantId != currentUserIdentifier.TenantId ||\r\n                userAccount.UserId != currentUserIdentifier.UserId) &&\r\n                userAccount.UserLinkId.HasValue &&\r\n                userAccount.UserLinkId == currentUserAccount.UserLinkId\r\n            select new LinkedUserDto\r\n            {\r\n                Id = userAccount.UserId,\r\n                TenantId = userAccount.TenantId,\r\n                TenancyName = tenant == null ? \".\" : tenant.TenancyName,\r\n                Username = userAccount.UserName,\r\n                LastLoginTime = userAccount.LastLoginTime\r\n            }).OrderBy(sorting);\r\n}\r\n````\r\n\r\nAnd Global Query filter is like that:\r\n\r\nhttps://github.com/aspnetboilerplate/aspnetboilerplate/blob/dev/src/Abp.EntityFrameworkCore/EntityFrameworkCore/AbpDbContext.cs#L153-L193\r\n\r\n(if the return value is null, we don't call ``HasQueryFilter``, so it's not a problem. I also tried to remove CombineExpressions and combine them manually in a single expression).\r\n\r\n#### Extra Info\r\n\r\nUnfortunately, this issue is very inconsistent.\r\n\r\n* Could not repeat it with integration tests (used SQLite in-memory db).\r\n* This issue only a problem when our query is first executed. It does not throw exception for subsequent calls.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DenisKolpakov": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10402", "title": "SQL Server Migrations: CreateIndex for Memory-Optimized Table ignores schema", "body": "There is no chance to create index for memory-optimized table with schema different from [dbo] using migrations. Command does not use schema name to identify db object.\r\n\r\n```\r\nException message: Cannot find the object \"UserInfo\" because it does not exist or you do not have permissions\r\n\r\nStack trace:\r\n      Microsoft.EntityFrameworkCore.Database.Command[20102]\r\n      Failed executing DbCommand (88ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\n      ALTER TABLE [UserInfo] ADD INDEX [IX_NameIndex] NONCLUSTERED ([NameIndex]);\r\nSystem.Data.SqlClient.SqlException (0x80131904): Cannot find the object \"UserInfo\" because it does not exist or you do not have permissions.\r\n   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n...\r\n```\r\n```c#\r\n            migrationBuilder.EnsureSchema(\r\n                name: \"Users\");\r\n\r\n            migrationBuilder.AlterDatabase()\r\n                .Annotation(\"SqlServer:MemoryOptimized\", true);\r\n\r\n            migrationBuilder.CreateTable(\r\n                name: \"UserInfo\",\r\n                schema: \"Users\",\r\n                columns: table => new\r\n                {\r\n                    ...\r\n                })\r\n                .Annotation(\"SqlServer:MemoryOptimized\", true);\r\n\r\n            ...\r\n\r\n            migrationBuilder.CreateIndex(\r\n                name: \"IX_NameIndex\",\r\n                schema: \"Users\",\r\n                table: \"UserInfo\",\r\n                column: \"NameIndex\")\r\n                .Annotation(\"SqlServer:Clustered\", false);\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.1.0-preview1-27654 and earlier\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: No matter (Rider 2017.2.1)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10288", "title": "Error creating filegroup for Memory Optimized Data using migration", "body": "Please, review this code part:\r\n\r\n[SqlServerMigrationsSqlGenerator.cs#L782](https://github.com/aspnet/EntityFrameworkCore/blob/2178b3755d50862c69cb398f632af25ab90da76c/src/EFCore.SqlServer/Migrations/SqlServerMigrationsSqlGenerator.cs#L782)\r\n\r\nWhen I set `.ForSqlServerIsMemoryOptimized()` and then try to apply migration onto my db (`dotnet ef database update`) I receive error message\r\n```\r\nSystem.Data.SqlClient.SqlException (0x80131904): CREATE FILE encountered operating system error 5(Access denied.) while attempting to open or create the physical file 'C:\\Users\\MeDb_MOD'.\r\n```\r\nwith SQL script to create MOD filegroup and db file. I add this below the `DECLARE @new_path`:\r\n```\r\nPRINT @path\r\nPRINT @filename\r\nPRINT @new_path\r\n```\r\nand got next:\r\n```\r\nC:\\Users\\Me\\Db.mdf\r\nDb_MOD\r\nC:\\Users\\MeDb_MOD\r\n```\r\nThere is no slash between username and MOD db file (folder).", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MaklaCof": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10389", "title": "Query: optimize OrderBy on navigation property", "body": "OrderBy could be optimized on navigational property.\r\n\r\nFor example, this query\r\n```c#\r\nthis.context.Parts\r\n    .Select(t => new ViewPartModel()\r\n            {\r\n                id = t.Id,\r\n                title = t.Titles\r\n                    .OrderBy(t2 => t2.IsDefault)\r\n                    .Select(t2 => t2.Translates\r\n                        .Where(t3 => t3.LangISOCode == Lang)\r\n                        .Select(t3 => t3.Title)\r\n                        .FirstOrDefault())\r\n                    .FirstOrDefault()\r\n    }).OrderBy(t => t.title)\r\n    .Skip(0)\r\n    .Take(50)\r\n    .ToArray()\r\n```\r\nproduce this SQL:\r\n```\r\nSELECT [t].[Id], (\r\n    SELECT TOP(1) (\r\n        SELECT TOP(1) [t30].[Title]\r\n        FROM [VarDesign_Parts-Title_Translates] AS [t30]\r\n        WHERE ([t30].[LangISOCode] = 'SLV') AND ([t20].[Id] = [t30].[PartTitleId])\r\n    )\r\n    FROM [VarDesign_Part-Titles] AS [t20]\r\n    WHERE [t].[Id] = [t20].[PartId]\r\n    ORDER BY [t20].[IsDefault]\r\n) AS [title]\r\nFROM [VarDesign_Parts] AS [t]\r\nORDER BY (\r\n    SELECT TOP(1) (\r\n        SELECT TOP(1) [t3].[Title]\r\n        FROM [VarDesign_Parts-Title_Translates] AS [t3]\r\n        WHERE ([t3].[LangISOCode] = 'SLV') AND ([t2].[Id] = [t3].[PartTitleId])\r\n    )\r\n    FROM [VarDesign_Part-Titles] AS [t2]\r\n    WHERE [t].[Id] = [t2].[PartId]\r\n    ORDER BY [t2].[IsDefault]\r\n)\r\nOFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY\r\n```\r\nbut better would be:\r\n```\r\nSELECT [t].[Id], (\r\n    SELECT TOP(1) (\r\n        SELECT TOP(1) [t30].[Title]\r\n        FROM [VarDesign_Parts-Title_Translates] AS [t30]\r\n        WHERE ([t30].[LangISOCode] = 'SLV') AND ([t20].[Id] = [t30].[PartTitleId])\r\n    )\r\n    FROM [VarDesign_Part-Titles] AS [t20]\r\n    WHERE [t].[Id] = [t20].[PartId]\r\n    ORDER BY [t20].[IsDefault]\r\n) AS [title]\r\nFROM [VarDesign_Parts] AS [t]\r\nORDER BY [title]\r\nOFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY\r\n\r\n```\r\nThere is no need to select fields again for ORDER BY, just use already returned field if exists.\r\nI am attaching screenshot for ClientStatistics in Management Studio. Trial 1 and 2 are SQL created by EF. Trial 3 and 4 are when I manually correct sort. The difference in execution is approx half faster.\r\n![2017-11-23_16-15-48](https://user-images.githubusercontent.com/1589573/33179419-a38d1578-d069-11e7-82f2-38a1102b1824.png)\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "synercoder": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10388", "title": "Many2Many relationship with shadow keys after adding state is Unchanged", "body": "When creating a many to many class with only navigation properties (with the key properties as shadow properties), the context doesn't set the entity state to Added when calling the `DbSet<>.Add(...)` method.\r\n\r\nAfter adding the relation object, the entry state is `EntityState.Unchanged`\r\n\r\n### In short\r\nModel:\r\n\r\n    public class FooBar\r\n    {\r\n        public Foo Foo { get; set; }\r\n        public Bar Bar { get; set; }\r\n    }\r\n\r\nOnModelCreating:\r\n\r\n    modelBuilder.Entity<FooBar>().Property(typeof(Guid), \"Foo_Id\");\r\n    modelBuilder.Entity<FooBar>().HasOne(x => x.Foo).WithMany(x => x.FooBars).HasForeignKey(\"Foo_Id\");\r\n    modelBuilder.Entity<FooBar>().Property(typeof(Guid), \"Bar_Id\");\r\n    modelBuilder.Entity<FooBar>().HasOne(x => x.Bar).WithMany(x => x.FooBars).HasForeignKey(\"Bar_Id\");\r\n    modelBuilder.Entity<FooBar>().HasKey(\"Foo_Id\", \"Bar_Id\");\r\n\r\nThen calling:\r\n\r\n    var entry = context.FooBars.Add(new FooBar() { Foo = foo1, Bar = bar1 });\r\n    //Console.WriteLine(entry.State == EntityState.Unchanged); // True\r\n    context.SaveChanges();\r\n\r\nThen nothing is saved...\r\n\r\n\r\n### Steps to reproduce\r\nI created a Gist with a small project to reproduce the problem: https://gist.github.com/synercoder/ca54951d01b75bf07a06c960405e5ec3\r\n\r\nWhen you run the project the first \"round\" will not add the relations.\r\n\r\nI created a workaround (just set the entity state to added) that does add the relations (second \"round\").\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 Pro\r\nIDE: Visual Studio 2017 (15.4.4)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarcoLoetscher": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10347", "title": "Support for Nullable Reference Types (C# 8)", "body": "C# 8 is on the way and better to early than too late should be planned the implementation of the new features ([Introducing Nullable Reference Types in C#](https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/)).\r\n```cs\r\npublic class Blog\r\n{\r\n    public int BlogId { get; set; }\r\n    public string Url { get; set; } //In C# 8 this should be required by default\r\n    public string? Url2 { get; set; } //In C# 8 this should be optional by default\r\n\r\n    //Needs EF support for constructors with parameters\r\n    public Blog(string url) \r\n    {\r\n        Url = url;\r\n    }\r\n}\r\n```\r\nA new logic is needed for mapping of e. g. string: [Required and Optional Properties](https://docs.microsoft.com/de-ch/ef/core/modeling/required-optional)\r\n\r\nSupport for constructors with Parameters is required: [Flexible mapping to CLR types and members (Custom O/C Mapping #240)](https://github.com/aspnet/EntityFrameworkCore/issues/240)\r\n\r\nThis list is probably not complete.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10347/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dev0033": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10312", "title": "ToDictionary won't work, if using with navigation property", "body": "model from [https://docs.microsoft.com/en-us/ef/core/get-started/full-dotnet/new-db](https://docs.microsoft.com/en-us/ef/core/get-started/full-dotnet/new-db)\r\n\r\nIf I try to get #Dictionary and navigation property from query, I'll get an exception.\r\n\r\n# **Exception message:** \r\nNo coercion operator is defined between types 'Intro.Blog' and 'System.String'.\r\n\r\n# **Stack trace:**\r\n```\r\n   at System.Linq.Expressions.Expression.GetUserDefinedCoercionOrThrow(ExpressionType coercionType, Expression expression, Type convertToType)\r\n   at System.Linq.Expressions.Expression.Convert(Expression expression, Type type, MethodInfo method)\r\n   at System.Linq.Expressions.Expression.Convert(Expression expression, Type type)\r\n   at Remotion.Linq.Parsing.RelinqExpressionVisitor.<AdjustArgumentsForNewExpression>d__0.MoveNext()\r\n   at System.Collections.Generic.LargeArrayBuilder`1.AddRange(IEnumerable`1 items)\r\n   at System.Collections.Generic.EnumerableHelpers.ToArray[T](IEnumerable`1 source)\r\n   at System.Dynamic.Utils.CollectionExtensions.ToReadOnly[T](IEnumerable`1 enumerable)\r\n   at System.Linq.Expressions.Expression.New(ConstructorInfo constructor, IEnumerable`1 arguments, IEnumerable`1 members)\r\n   at Remotion.Linq.Parsing.RelinqExpressionVisitor.VisitNew(NewExpression expression)\r\n   at System.Linq.Expressions.NewExpression.Accept(ExpressionVisitor visitor)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass15_0`1.<Execute>b__0()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n   at Remotion.Linq.QueryableBase`1.GetEnumerator()\r\n   at System.Collections.Generic.LargeArrayBuilder`1.AddRange(IEnumerable`1 items)\r\n   at System.Collections.Generic.EnumerableHelpers.ToArray[T](IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at System.Linq.SystemCore_EnumerableDebugView`1.get_Items()\r\n```\r\n# Steps to reproduce\r\n\r\n```\r\nusing Intro;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleApp2\r\n{\r\n  class Program\r\n  {\r\n    static void Main(string[] args)\r\n    {\r\n      using (var db = new BloggingContext())\r\n      {\r\n\r\n        if (!db.Blogs.Any())\r\n        {\r\n          db.Blogs.Add(new Blog { Url = \"http://Blog1.com\" });\r\n          db.Blogs.Add(new Blog { Url = \"http://Blog2.com\" });\r\n          db.SaveChanges();\r\n        }\r\n\r\n        Console.WriteLine(\"All blogs in database:\");\r\n\r\n        var query = db.Blogs.Select(c => new\r\n        {\r\n          Url = c.Url,\r\n          Navigation = c,\r\n          Posts = c.Posts.ToDictionary(a => a.PostId.ToString(), x => x.Title),\r\n        });\r\n\r\n        foreach (var blog in query)\r\n        {\r\n          Console.WriteLine(\" - {0}\", blog.Url);\r\n        }\r\n      }\r\n      Console.ReadKey();\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n# Workaround\r\nchange order of selected fields.\r\nWith query:\r\n```\r\nvar query = db.Blogs.Select(c=>new\r\n        {\r\n          Url = c.Url,\r\n          Posts = c.Posts.ToDictionary(a=>a.PostId.ToString(),x=>x.Title),\r\n          Navigation = c,\r\n        });\r\n```\r\nI can get what I want.\r\n\r\n# Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 Enterprise\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cgehrmann": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10295", "title": "HasQueryFilter doesn't support \"contains\" in List or Array", "body": "The method HasQueryFilter doesn't support \"contains\" and evaluates the Query in memory instead of generating an SQL statement like \r\n\r\n```\r\nSELECT [x].AccountId, [x].Name,  [x].TenantId FROM Account as x where [x].TenantId in ( tenantId_0, ...,  tenantId_n)\r\n```\r\n\r\nLog Output:\r\n\r\n```\r\nCompiling query model: \r\n'from Account x in DbSet<Account>\r\nselect new <>f__AnonymousType0<Guid, string, Guid>(\r\n    [x].AccountId, \r\n    [x].Name, \r\n    [x].TenantId\r\n)'\r\n\r\nThe LINQ expression 'where ___tenantIds_0.Contains([f].TenantId)' could not be translated and will be evaluated locally.\r\n```\r\n\r\n### Steps to reproduce\r\n```c#\r\npublic class Account{\r\n\tpublic Guid AccountId {get;set}\r\n\tpublic string Name {get;set;}\r\n\t\r\n\tpublic Guid TenantId {get;set;}\r\n}\r\n\r\npublic class DemoContext : DbContext\r\n{\r\n\tprivate readonly List<Guid> _tenantIds;\r\n\r\n\tpublic virtual DbSet<Account> Accounts { get; set; }\r\n\r\n\tpublic DemoContext(DbContextOptions<DemoContext> options, IEnumerable<Guid> tenantIds)\r\n\t\t: base(options)\r\n\t{\r\n\t\t_tenantIds = tenantIds.Where(x => x.HasValue).ToList();\r\n\t}\r\n\r\n\tprotected override void OnModelCreating(ModelBuilder modelBuilder)\r\n\t{\r\n\t\tmodelBuilder.Entity<Account>().HasQueryFilter(e => _tenantIds.Contains(e.TenantId));\r\n\t}\r\n}\r\n```\r\n\r\nUsed Query\r\n\r\n```c#\r\nvar data = context.Accounts\r\n\t\t.Select(x => new { x.AccountId, x.Name, x.TenantId })\r\n\t\t.ToList();\r\n```\r\n\r\nIf you use the model without HasQueryFilter\r\n\r\n```c#\r\n var data = context.Accounts\r\n                    .Where(x => tenantIds.Contains(x.TenantId))\r\n                    .Select(x => new { x.AccountId, x.Name, x.TenantId})\r\n                    .ToList();\r\n```\r\n\r\nthe generated Query looks like\r\n\r\n```\r\nSELECT [x].[AccountId], [x].[NAME], [x].[TenantId]\r\nFROM [ng].[Accounts] AS [x]\r\nWHERE [x].[TenantId] IN ('524996ea-5e4e-e611-80bd-0050569e091a', 'd5c43926-d830-e711-80c1-0050569e091a')\r\n```\r\n\r\nand works like expected.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.1\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system:  Windows Server 2016\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shaulbehr": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10294", "title": "Null reference in subquery", "body": "Here's another one that used to work in EF Core 1.1.0:\r\n```\r\nvar q = db.Customers\r\n    .Select(c => new \r\n        { \r\n            c.CustomerId,\r\n            CanSendEmail = c.EmailAddresses.Where(e => e.IsPrimary)\r\n                        .Select(e => CanSendEmail)\r\n                        .FirstOrDefault()\r\n        })\r\n    .ToList();\r\n```\r\nIf the customer doesn't have any emails with `IsPrimary == true`, then the query throws an exception:\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at lambda_method(Closure , QueryContext , ValueBuffer )\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ProjectionShaper.TypedProjectionShaper`3.Shape(QueryContext queryContext, ValueBuffer valueBuffer)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(Boolean buffer)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n```\r\nExpected behavior: the `.FirstOrDefault()` should return `false`, and not attempt to set a null value to a non-nullable property in the anonymous type.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10293", "title": "Invalid cast when using inline \"if\" returning an enum", "body": "This one is easy to repro in EF Core 2.0:\r\n```\r\nvar q = db.SomeTable\r\n    .Select(x => new { EnumValue = x.SomeBoolean ? MyEnum.Yes : MyEnum.No })\r\n    .ToList();\r\n```\r\nthrows exception:\r\n```\r\nSystem.InvalidCastException : Specified cast is not valid.\r\n   at lambda_method(Closure , Object[] )\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.UntypedRelationalValueBufferFactory.Create(DbDataReader dataReader)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(Boolean buffer)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n```\r\nThis used to work in EF Core 1.1.0", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ngbernard": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10283", "title": "HasQueryFilter generates incorrect sql, causing \"multi-part identifier could not be bound\"", "body": "I have two classes, Plant and UserPlant.  UserPlant is a lookup table that ties Users from another data source to Plant (so I'm not mapping User).  Both inherit from a base class that provides some properties common to my data objects.\r\n\r\n```C#\r\npublic class MyDataObject\r\n    {\r\n        public long? Id { get; set; }\r\n        \r\n        public DateTime? Created { get; set; }\r\n        \r\n        public DateTime? Edited { get; set; }\r\n\r\n        public bool? Active { get; set; }\r\n    }\r\n\r\npublic class Plant: MyDataObject\r\n    {\r\n        public string Name { get; set; }\r\n\r\n        public List<UserPlant> UserPlants { get; set; }\r\n    }\r\n\r\npublic class UserPlant: MyDataObject  \r\n    {\r\n        public long PlantId { get; set; }\r\n\r\n        public long UserId { get; set; }\r\n\r\n        public Plant Plant { get; set; }\r\n    }\r\n```\r\n\r\n\r\nMy mappings look like this:\r\n```C#\r\nmodelBuilder.Entity<Plant>().HasKey(x=>x.Id);\r\n\r\nmodelBuilder.Entity<UserPlant>().HasKey(x => new { x.UserId, x.PlantId });\r\nmodelBuilder.Entity<UserPlant>().HasOne(x => x.Plant).WithMany(x => x.UserPlants).HasForeignKey(x=>x.PlantId);\r\nmodelBuilder.Entity<UserPlant>().HasQueryFilter(x => x.Active.HasValue && x.Active.Value);\r\n```\r\n\r\nWhen I run \r\n```C#\r\n_myDbContext.Plant.Include(p => p.UserPlants)\r\n```\r\n\r\nI get \r\n\r\n```\r\nException message:\r\n 'The multi-part identifier \"t.Id\" could not be bound.'\r\n```\r\n\r\nThis is the generated sql:\r\n```SQL\r\nSELECT [p].[Id], [p].[Active], [p].[Created], [p].[Edited], [p].[Name]\r\nFROM [Plant] AS [p]\r\nORDER BY [p].[Id]\r\n\r\nSELECT [u].[UserId], [u].[PlantId], [u].[Active], [u].[Created], [u].[Edited], [u].[Id]\r\nFROM [UserPlant] AS [u]\r\nORDER BY [t].[Id]\r\n```\r\n\r\nThe 2nd query seems to be the problem, referencing an alias 't' that doesn't exist.  However, if I remove the HasQueryFilter mapping, it works.  What am I doing wrong?\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 7\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianlagunas": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10277", "title": "Adding EF Core to Xamarin.Forms Android project crashes app", "body": "Adding the `Microsoft.EntityFrameworkCore.Sqlite` NuGet package to a Xamarin.Forms .Net Standard 2.0 application immediately crashes the app when run.  You do not have to use any of the classes in the package, just add the reference and it will crash.\r\n\r\n### Steps to reproduce\r\nRun the attached project\r\n[BlankApp1.zip](https://github.com/aspnet/EntityFrameworkCore/files/1468298/BlankApp1.zip)\r\n\r\n### Further technical details\r\nMicrosoft.EntityFrameworkCore.Sqlite: 2.0.0\r\nOperating system: Windows 10 FCU\r\nIDE: Visual Studio 2017 15.4.3\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HappyNomad": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10259", "title": "Allow filters to be defined on a derived Entity Type of a hierarchy", "body": "The [What's New doc](https://docs.microsoft.com/en-us/ef/core/what-is-new/) says,\r\n\r\n> Limitations\r\n> - Navigation references are not allowed. This feature may be added based on feedback.\r\n> - Filters can only be defined on the root Entity Type of a hierarchy\r\n\r\nThe first limitation says \"This feature may be added based on feedback.\", and I found #8881 covers it.  The second limitation doesn't say that.  Does that mean that limitation will likely never be removed?\r\n\r\nIt seems I could partially get around the second limitation by writing:\r\n\r\n    HasQueryFilter( a => !(a is Subclass && a.IsFoo) )\r\n\r\nWill this work?  (I haven't been able to confirm yet due to unrelated strange errors.)  What about accessing a property on the subclass like the following?\r\n\r\n    HasQueryFilter( a => !(a is Subclass && a.IsFoo && ((Subclass)a).IsBar) )\r\n\r\nWhen I tried this, I get the error, \"No coercion operator is defined between types\" where one type isn't even used in the expression.  It would be great if it does work, but removing the second limitation would allow nicer syntax.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10117", "title": "Query: Using DbSet property in QueryFilter throws exception", "body": "How would I construct a filter that has the following semantics?  I want one that actually works and runs in the database.\r\n\r\n\tmodelBuilder.Entity<ProductDetail>().HasQueryFilter( d =>\r\n\t\tOrgs.Single( o => o.ID == TenantID ).PurchasedNames.Split( new char[] { ',' } ).Contains( d.Name )\r\n\t);\r\n\r\nMy attempt to run this results in:\r\n\r\n>Microsoft.EntityFrameworkCore.Query:\r\n>\tWarning: The LINQ expression 'where value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Org]).Single(o => (o.ID == __TenantID_0)).PurchasedNames.Split(new [] {,}).Contains([d].Name)' could not be translated and will be evaluated locally.\r\n>\r\n>Exception thrown: 'System.ArgumentNullException' in Microsoft.EntityFrameworkCore.dll\r\n>Exception thrown: 'System.ArgumentNullException' in System.Private.CoreLib.dll\r\n>\r\n>System.ArgumentNullException: Value cannot be null.\r\n>Parameter name: querySource\r\n>   at Microsoft.EntityFrameworkCore.Utilities.Check.NotNull[T](T value, String parameterName)\r\n>   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.FindEntityType(IQuerySource querySource)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitEntityQueryable(Type elementType)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitConstant(ConstantExpression constantExpression)\r\n>   at System.Linq.Expressions.ConstantExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMember(MemberExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMember(MemberExpression node)\r\n>   at System.Linq.Expressions.MemberExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(Expression expression, IQuerySource querySource, Boolean inProjection)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause(WhereClause whereClause, QueryModel queryModel, Int32 index)\r\n>   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitWhereClause(WhereClause whereClause, QueryModel queryModel, Int32 index)\r\n>   at Remotion.Linq.Clauses.WhereClause.Accept(IQueryModelVisitor visitor, QueryModel queryModel, Int32 index)\r\n>   at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses(ObservableCollection`1 bodyClauses, QueryModel queryModel)\r\n>   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitSubQuery(SubQueryExpression expression)\r\n>   at Remotion.Linq.Clauses.Expressions.SubQueryExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitUnary(UnaryExpression node)\r\n>   at System.Linq.Expressions.UnaryExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(ReadOnlyCollection`1 nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitNewArray(NewArrayExpression node)\r\n>   at System.Linq.Expressions.NewArrayExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitBlockExpressions(ExpressionVisitor visitor, BlockExpression block)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitBlock(BlockExpression node)\r\n>   at System.Linq.Expressions.BlockExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMember(MemberExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMember(MemberExpression node)\r\n>   at System.Linq.Expressions.MemberExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(Expression expression, IQuerySource querySource, Boolean inProjection)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n>   at Remotion.Linq.Clauses.SelectClause.Accept(IQueryModelVisitor visitor, QueryModel queryModel)\r\n>   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitSubQuery(SubQueryExpression expression)\r\n>   at Remotion.Linq.Clauses.Expressions.SubQueryExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitUnary(UnaryExpression node)\r\n>   at System.Linq.Expressions.UnaryExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(ReadOnlyCollection`1 nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitNewArray(NewArrayExpression node)\r\n>   at System.Linq.Expressions.NewArrayExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitBlockExpressions(ExpressionVisitor visitor, BlockExpression block)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitBlock(BlockExpression node)\r\n>   at System.Linq.Expressions.BlockExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMember(MemberExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMember(MemberExpression node)\r\n>   at System.Linq.Expressions.MemberExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(Expression expression, IQuerySource querySource, Boolean inProjection)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n>   at Remotion.Linq.Clauses.SelectClause.Accept(IQueryModelVisitor visitor, QueryModel queryModel)\r\n>   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitSubQuery(SubQueryExpression expression)\r\n>   at Remotion.Linq.Clauses.Expressions.SubQueryExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitUnary(UnaryExpression node)\r\n>   at System.Linq.Expressions.UnaryExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(ReadOnlyCollection`1 nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitNewArray(NewArrayExpression node)\r\n>   at System.Linq.Expressions.NewArrayExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitBlockExpressions(ExpressionVisitor visitor, BlockExpression block)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitBlock(BlockExpression node)\r\n>   at System.Linq.Expressions.BlockExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitConditional(ConditionalExpression node)\r\n>   at System.Linq.Expressions.ConditionalExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(ReadOnlyCollection`1 nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitNewArray(NewArrayExpression node)\r\n>   at System.Linq.Expressions.NewArrayExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitBlockExpressions(ExpressionVisitor visitor, BlockExpression block)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitBlock(BlockExpression node)\r\n>   at System.Linq.Expressions.BlockExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n>   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n>   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at System.Linq.Expressions.ExpressionVisitor.VisitMember(MemberExpression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMember(MemberExpression node)\r\n>   at System.Linq.Expressions.MemberExpression.Accept(ExpressionVisitor visitor)\r\n>   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(Expression expression, IQuerySource querySource, Boolean inProjection)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n>   at Remotion.Linq.Clauses.SelectClause.Accept(IQueryModelVisitor visitor, QueryModel queryModel)\r\n>   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor[TResult](QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery[TResult](QueryModel queryModel)\r\n>   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database)\r\n>   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass24_0`1.<CompileAsyncQuery>b__0()\r\n>   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n>   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddAsyncQuery[TResult](Object cacheKey, Func`1 compiler)\r\n>   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery[TResult](Expression query)\r\n>   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query, CancellationToken cancellationToken)\r\n>   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync[TResult](Expression expression, CancellationToken cancellationToken)\r\n>   at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ExecuteAsync[TSource,TResult](MethodInfo operatorMethodInfo, IQueryable`1 source, CancellationToken cancellationToken)\r\n>   at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync[TSource](IQueryable`1 source, CancellationToken cancellationToken)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10117/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rgl88": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10258", "title": "Make it easier to flow custom annotations through to Migrations", "body": "Custom annotations on properties are not included in generated Up/Down migration, but they are correctly included in the BuildTargetModel method\r\nI want reorder columns in up method via my custom 'DisplayOrder' annotation.\r\n\r\nConsider the following example:\r\nCustom Annotations  added to \r\n```\r\n[DbContext(typeof(TestDbContext))]\r\n[Migration(\"13960818210148_TestDb_Migration_v1.0\")]\r\npartial class TestDb_Migration_v10\r\n{\r\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\r\n        {\r\n               modelBuilder.Entity(\"St.Domain.Financial.Bank\", b =>\r\n                {\r\n\t\t\t\t    ...\r\n\t\t\t\t\t\t\r\n                    b.Property<int>(\"Id\")\r\n                        .ValueGeneratedOnAdd();\r\n\r\n                    b.Property<string>(\"Description\")\r\n                        .HasMaxLength(512)\r\n                        .HasAnnotation(\"ColumnOrder\", 4);\r\n\r\n                    b.Property<string>(\"Name\")\r\n                        .IsRequired()\r\n                        .HasMaxLength(128)\r\n                        .HasAnnotation(\"ColumnOrder\", 2);\r\n                    b.ToTable(\"Bank\");\r\n\t\t\t\t\t\r\n\t\t\t\t\t...\r\n                });\r\n        }\r\n}\r\n\r\n```\r\nbut not exist in:\r\n``` \r\npublic partial class TestDb_Migration_v10 : Migration\r\n{\r\n        protected override void Up(MigrationBuilder migrationBuilder)\r\n        {\r\n            migrationBuilder.CreateTable(\r\n                name: \"Bank\",\r\n                columns: table => new\r\n                {\r\n\t\t\t\t    ...\r\n                    Id = table.Column<int>(type: \"int\", nullable: false)\r\n                        .Annotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn),\r\n                    Description = table.Column<string>(type: \"nvarchar(512)\", maxLength: 512, nullable: true),\r\n                    Name = table.Column<string>(type: \"nvarchar(128)\", maxLength: 128, nullable: false)\r\n\t\t\t\t\t...\r\n                });\r\n        }\r\n}\r\n```\r\n\r\nC:\\Users\\User1>dotnet --info\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "we4sz": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10256", "title": "Performance issues when update from 1.1.1", "body": "Okey, so just tried to update from 1.1.1 to 2.0.0 and got some serious performance issues with EF\r\n\r\n\r\n```\r\nawait \r\n  db.Products\r\n  .Include(x => x.Categories)\r\n  .Where(x => x.Categories.Any(cat => categories.Any(catId => catId == cat.CategoryId)))\r\n  .FirstOrDefaultAsync(x => x.Id == id);\r\n```\r\n\r\nWhere categories is a list of 97 GUIDs.\r\nThe request takes about 20 seconds and it's not the DB that is slow.\r\nIn the output you can count 464 thread exited when this is the only active request.\r\n\r\n```\r\n[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:5000/api/product/2b6d5331-2b17-4c29-e1af-08d47f3c1412  \r\nMicrosoft.AspNetCore.Hosting.Internal.WebHost:Information: Request starting HTTP/1.1 GET http://localhost:5000/api/product/2b6d5331-2b17-4c29-e1af-08d47f3c1412  \r\nMicrosoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler:Information: Successfully validated the token.\r\n[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler[2]\r\n      Successfully validated the token.\r\n[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler[8]\r\n      AuthenticationScheme: Bearer was successfully authenticated.\r\nMicrosoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler:Information: AuthenticationScheme: Bearer was successfully authenticated.\r\nMicrosoft.AspNetCore.Authorization.DefaultAuthorizationService:Information: Authorization was successful for user: (null).\r\n[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Authorization.DefaultAuthorizationService[1]\r\n      Authorization was successful for user: (null).\r\n[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker:Information: Executing action method API.Controllers.ProductController.Get (API) with arguments (2b6d5331-2b17-4c29-e1af-08d47f3c1412) - ModelState is Valid\r\n      Executing action method API.Controllers.ProductController.Get (API) with arguments (2b6d5331-2b17-4c29-e1af-08d47f3c1412) - ModelState is Valid\r\nThe thread 8520167 has exited with code 0 (0x0).\r\n[40m[32minfo[39m[22m[49m: Microsoft.EntityFrameworkCore.Database.Command[200101]\r\n      Executed DbCommand (38ms) [Parameters=[@__id_1='?'], CommandType='Text', CommandTimeout='30']\r\n      SELECT [x].[Id], [x].[AmountOfUnits], [x].[Created], [x].[GTIN], [x].[IncrementValue], [x].[Manufacturer], [x].[Name], [x].[Name2], [x].[NumberOfItems], [x].[Unit], [x].[Updated]\r\n      FROM [Products] AS [x]\r\n      WHERE [x].[Id] = @__id_1\r\n      ORDER BY [x].[Id]\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (38ms) [Parameters=[@__id_1='?'], CommandType='Text', CommandTimeout='30']\r\nSELECT [x].[Id], [x].[AmountOfUnits], [x].[Created], [x].[GTIN], [x].[IncrementValue], [x].[Manufacturer], [x].[Name], [x].[Name2], [x].[NumberOfItems], [x].[Unit], [x].[Updated]\r\nFROM [Products] AS [x]\r\nWHERE [x].[Id] = @__id_1\r\nORDER BY [x].[Id]\r\nThe thread 8520179 has exited with code 0 (0x0).\r\n[40m[32minfo[39m[22m[49m: Microsoft.EntityFrameworkCore.Database.Command[200101]\r\n      Executed DbCommand (54ms) [Parameters=[@_outer_Id='?'], CommandType='Text', CommandTimeout='30']\r\n      SELECT [cat0].[CategoryId], [cat0].[ProductId]\r\n      FROM [ProductCategories] AS [cat0]\r\n      WHERE @_outer_Id = [cat0].[ProductId]\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (54ms) [Parameters=[@_outer_Id='?'], CommandType='Text', CommandTimeout='30']\r\nSELECT [cat0].[CategoryId], [cat0].[ProductId]\r\nFROM [ProductCategories] AS [cat0]\r\nWHERE @_outer_Id = [cat0].[ProductId]\r\nThe thread 8520181 has exited with code 0 (0x0).\r\n[40m[32minfo[39m[22m[49m: Microsoft.EntityFrameworkCore.Database.Command[200101]\r\n      Executed DbCommand (52ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\n      SELECT [x.Categories].[Id], [x.Categories].[CategoryId], [x.Categories].[Created], [x.Categories].[ProductId], [x.Categories].[Updated]\r\n      FROM [ProductCategories] AS [x.Categories]\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (52ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nSELECT [x.Categories].[Id], [x.Categories].[CategoryId], [x.Categories].[Created], [x.Categories].[ProductId], [x.Categories].[Updated]\r\nFROM [ProductCategories] AS [x.Categories]\r\nThe thread 8520183 has exited with code 0 (0x0).\r\nThe thread 8520196 has exited with code 0 (0x0).\r\nThe thread 8520203 has exited with code 0 (0x0).\r\nThe thread 8520210 has exited with code 0 (0x0).\r\nThe thread 8520219 has exited with code 0 (0x0).\r\nThe thread 8520224 has exited with code 0 (0x0).\r\nThe thread 8520229 has exited with code 0 (0x0).\r\nThe thread 8520232 has exited with code 0 (0x0).\r\nThe thread 8520235 has exited with code 0 (0x0).\r\nThe thread 8520242 has exited with code 0 (0x0).\r\nThe thread 8520247 has exited with code 0 (0x0).\r\nThe thread 8520254 has exited with code 0 (0x0).\r\nThe thread 8520257 has exited with code 0 (0x0).\r\nThe thread 8520260 has exited with code 0 (0x0).\r\nThe thread 8520263 has exited with code 0 (0x0).\r\nThe thread 8520270 has exited with code 0 (0x0).\r\nThe thread 8520271 has exited with code 0 (0x0).\r\nThe thread 8520272 has exited with code 0 (0x0).\r\nThe thread 8520273 has exited with code 0 (0x0).\r\nThe thread 8520274 has exited with code 0 (0x0).\r\nThe thread 8520275 has exited with code 0 (0x0).\r\nThe thread 8520278 has exited with code 0 (0x0).\r\nThe thread 8520283 has exited with code 0 (0x0).\r\nThe thread 8520290 has exited with code 0 (0x0).\r\nThe thread 8520293 has exited with code 0 (0x0).\r\nThe thread 8520305 has exited with code 0 (0x0).\r\nThe thread 8520312 has exited with code 0 (0x0).\r\nThe thread 8520319 has exited with code 0 (0x0).\r\nThe thread 8520324 has exited with code 0 (0x0).\r\nThe thread 8520329 has exited with code 0 (0x0).\r\nThe thread 8520336 has exited with code 0 (0x0).\r\nThe thread 8520339 has exited with code 0 (0x0).\r\nThe thread 8520346 has exited with code 0 (0x0).\r\nThe thread 8520353 has exited with code 0 (0x0).\r\nThe thread 8520360 has exited with code 0 (0x0).\r\nThe thread 8520367 has exited with code 0 (0x0).\r\nThe thread 8520374 has exited with code 0 (0x0).\r\nThe thread 8520377 has exited with code 0 (0x0).\r\nThe thread 8520380 has exited with code 0 (0x0).\r\nThe thread 8520387 has exited with code 0 (0x0).\r\nThe thread 8520392 has exited with code 0 (0x0).\r\nThe thread 8520399 has exited with code 0 (0x0).\r\nThe thread 8520402 has exited with code 0 (0x0).\r\nThe thread 8520405 has exited with code 0 (0x0).\r\nThe thread 8520408 has exited with code 0 (0x0).\r\nThe thread 8520411 has exited with code 0 (0x0).\r\nThe thread 8520414 has exited with code 0 (0x0).\r\nThe thread 8520421 has exited with code 0 (0x0).\r\nThe thread 8520428 has exited with code 0 (0x0).\r\nThe thread 8520435 has exited with code 0 (0x0).\r\nThe thread 8520442 has exited with code 0 (0x0).\r\nThe thread 8520445 has exited with code 0 (0x0).\r\nThe thread 8520448 has exited with code 0 (0x0).\r\nThe thread 8520453 has exited with code 0 (0x0).\r\nThe thread 8520456 has exited with code 0 (0x0).\r\nThe thread 8520457 has exited with code 0 (0x0).\r\nThe thread 8520458 has exited with code 0 (0x0).\r\nThe thread 8520459 has exited with code 0 (0x0).\r\nThe thread 8520460 has exited with code 0 (0x0).\r\nThe thread 8520461 has exited with code 0 (0x0).\r\nThe thread 8520462 has exited with code 0 (0x0).\r\nThe thread 8520463 has exited with code 0 (0x0).\r\nThe thread 8520464 has exited with code 0 (0x0).\r\nThe thread 8520472 has exited with code 0 (0x0).\r\nThe thread 8520475 has exited with code 0 (0x0).\r\nThe thread 8520478 has exited with code 0 (0x0).\r\nThe thread 8520485 has exited with code 0 (0x0).\r\nThe thread 8520492 has exited with code 0 (0x0).\r\nThe thread 8520495 has exited with code 0 (0x0).\r\nThe thread 8520502 has exited with code 0 (0x0).\r\nThe thread 8520507 has exited with code 0 (0x0).\r\nThe thread 8520510 has exited with code 0 (0x0).\r\nThe thread 8520519 has exited with code 0 (0x0).\r\nThe thread 8520524 has exited with code 0 (0x0).\r\nThe thread 8520527 has exited with code 0 (0x0).\r\nThe thread 8520534 has exited with code 0 (0x0).\r\nThe thread 8520556 has exited with code 0 (0x0).\r\nThe thread 8520566 has exited with code 0 (0x0).\r\nThe thread 8520573 has exited with code 0 (0x0).\r\nThe thread 8520578 has exited with code 0 (0x0).\r\nThe thread 8520583 has exited with code 0 (0x0).\r\nThe thread 8520590 has exited with code 0 (0x0).\r\nThe thread 8520597 has exited with code 0 (0x0).\r\nThe thread 8520600 has exited with code 0 (0x0).\r\nThe thread 8520605 has exited with code 0 (0x0).\r\nThe thread 8520608 has exited with code 0 (0x0).\r\nThe thread 8520613 has exited with code 0 (0x0).\r\nThe thread 8520620 has exited with code 0 (0x0).\r\nThe thread 8520629 has exited with code 0 (0x0).\r\nThe thread 8520636 has exited with code 0 (0x0).\r\nThe thread 8520643 has exited with code 0 (0x0).\r\nThe thread 8520646 has exited with code 0 (0x0).\r\nThe thread 8520653 has exited with code 0 (0x0).\r\nThe thread 8520660 has exited with code 0 (0x0).\r\nThe thread 8520663 has exited with code 0 (0x0).\r\nThe thread 8520670 has exited with code 0 (0x0).\r\nThe thread 8520675 has exited with code 0 (0x0).\r\nThe thread 8520684 has exited with code 0 (0x0).\r\nThe thread 8520691 has exited with code 0 (0x0).\r\nThe thread 8520698 has exited with code 0 (0x0).\r\nThe thread 8520701 has exited with code 0 (0x0).\r\nThe thread 8520708 has exited with code 0 (0x0).\r\nThe thread 8520715 has exited with code 0 (0x0).\r\nThe thread 8520724 has exited with code 0 (0x0).\r\nThe thread 8520727 has exited with code 0 (0x0).\r\nThe thread 8520734 has exited with code 0 (0x0).\r\nThe thread 8520739 has exited with code 0 (0x0).\r\nThe thread 8520748 has exited with code 0 (0x0).\r\nThe thread 8520751 has exited with code 0 (0x0).\r\nThe thread 8520754 has exited with code 0 (0x0).\r\nThe thread 8520761 has exited with code 0 (0x0).\r\nThe thread 8520768 has exited with code 0 (0x0).\r\nThe thread 8520775 has exited with code 0 (0x0).\r\nThe thread 8520782 has exited with code 0 (0x0).\r\nThe thread 8520785 has exited with code 0 (0x0).\r\nThe thread 8520792 has exited with code 0 (0x0).\r\nThe thread 8520799 has exited with code 0 (0x0).\r\nThe thread 8520804 has exited with code 0 (0x0).\r\nThe thread 8520811 has exited with code 0 (0x0).\r\nThe thread 8520818 has exited with code 0 (0x0).\r\nThe thread 8520825 has exited with code 0 (0x0).\r\nThe thread 8520828 has exited with code 0 (0x0).\r\nThe thread 8520835 has exited with code 0 (0x0).\r\nThe thread 8520836 has exited with code 0 (0x0).\r\nThe thread 8520837 has exited with code 0 (0x0).\r\nThe thread 8520838 has exited with code 0 (0x0).\r\nThe thread 8520839 has exited with code 0 (0x0).\r\nThe thread 8520840 has exited with code 0 (0x0).\r\nThe thread 8520841 has exited with code 0 (0x0).\r\nThe thread 8520842 has exited with code 0 (0x0).\r\nThe thread 8520843 has exited with code 0 (0x0).\r\nThe thread 8520844 has exited with code 0 (0x0).\r\nThe thread 8520845 has exited with code 0 (0x0).\r\nThe thread 8520846 has exited with code 0 (0x0).\r\nThe thread 8520847 has exited with code 0 (0x0).\r\nThe thread 8520848 has exited with code 0 (0x0).\r\nThe thread 8520849 has exited with code 0 (0x0).\r\nThe thread 8520851 has exited with code 0 (0x0).\r\nThe thread 8520852 has exited with code 0 (0x0).\r\nThe thread 8520853 has exited with code 0 (0x0).\r\nThe thread 8520854 has exited with code 0 (0x0).\r\nThe thread 8520856 has exited with code 0 (0x0).\r\nThe thread 8520857 has exited with code 0 (0x0).\r\nThe thread 8520859 has exited with code 0 (0x0).\r\nThe thread 8520860 has exited with code 0 (0x0).\r\nThe thread 8520861 has exited with code 0 (0x0).\r\nThe thread 8520862 has exited with code 0 (0x0).\r\nThe thread 8520863 has exited with code 0 (0x0).\r\nThe thread 8520864 has exited with code 0 (0x0).\r\nThe thread 8520865 has exited with code 0 (0x0).\r\nThe thread 8520866 has exited with code 0 (0x0).\r\nThe thread 8520867 has exited with code 0 (0x0).\r\nThe thread 8520868 has exited with code 0 (0x0).\r\nThe thread 8520869 has exited with code 0 (0x0).\r\nThe thread 8520870 has exited with code 0 (0x0).\r\nThe thread 8520871 has exited with code 0 (0x0).\r\nThe thread 8520872 has exited with code 0 (0x0).\r\nThe thread 8520873 has exited with code 0 (0x0).\r\nThe thread 8520874 has exited with code 0 (0x0).\r\nThe thread 8520875 has exited with code 0 (0x0).\r\nThe thread 8520876 has exited with code 0 (0x0).\r\nThe thread 8520877 has exited with code 0 (0x0).\r\nThe thread 8520878 has exited with code 0 (0x0).\r\nThe thread 8520879 has exited with code 0 (0x0).\r\nThe thread 8520880 has exited with code 0 (0x0).\r\nThe thread 8520881 has exited with code 0 (0x0).\r\nThe thread 8520882 has exited with code 0 (0x0).\r\nThe thread 8520883 has exited with code 0 (0x0).\r\nThe thread 8520884 has exited with code 0 (0x0).\r\nThe thread 8520885 has exited with code 0 (0x0).\r\nThe thread 8520886 has exited with code 0 (0x0).\r\nThe thread 8520887 has exited with code 0 (0x0).\r\nThe thread 8520890 has exited with code 0 (0x0).\r\nThe thread 8520891 has exited with code 0 (0x0).\r\nThe thread 8520892 has exited with code 0 (0x0).\r\nThe thread 8520893 has exited with code 0 (0x0).\r\nThe thread 8520894 has exited with code 0 (0x0).\r\nThe thread 8520895 has exited with code 0 (0x0).\r\nThe thread 8520896 has exited with code 0 (0x0).\r\nThe thread 8520897 has exited with code 0 (0x0).\r\nThe thread 8520898 has exited with code 0 (0x0).\r\nThe thread 8520899 has exited with code 0 (0x0).\r\nThe thread 8520900 has exited with code 0 (0x0).\r\nThe thread 8520901 has exited with code 0 (0x0).\r\nThe thread 8520902 has exited with code 0 (0x0).\r\nThe thread 8520905 has exited with code 0 (0x0).\r\nThe thread 8520906 has exited with code 0 (0x0).\r\nThe thread 8520907 has exited with code 0 (0x0).\r\nThe thread 8520908 has exited with code 0 (0x0).\r\nThe thread 8520909 has exited with code 0 (0x0).\r\nThe thread 8520910 has exited with code 0 (0x0).\r\nThe thread 8520911 has exited with code 0 (0x0).\r\nThe thread 8520912 has exited with code 0 (0x0).\r\nThe thread 8520913 has exited with code 0 (0x0).\r\nThe thread 8520914 has exited with code 0 (0x0).\r\nThe thread 8520915 has exited with code 0 (0x0).\r\nThe thread 8520916 has exited with code 0 (0x0).\r\nThe thread 8520918 has exited with code 0 (0x0).\r\nThe thread 8520919 has exited with code 0 (0x0).\r\nThe thread 8520920 has exited with code 0 (0x0).\r\nThe thread 8520921 has exited with code 0 (0x0).\r\nThe thread 8520922 has exited with code 0 (0x0).\r\nThe thread 8520923 has exited with code 0 (0x0).\r\nThe thread 8520924 has exited with code 0 (0x0).\r\nThe thread 8520925 has exited with code 0 (0x0).\r\nThe thread 8520926 has exited with code 0 (0x0).\r\nThe thread 8520927 has exited with code 0 (0x0).\r\nThe thread 8520928 has exited with code 0 (0x0).\r\nThe thread 8520929 has exited with code 0 (0x0).\r\nThe thread 8520930 has exited with code 0 (0x0).\r\nThe thread 8520931 has exited with code 0 (0x0).\r\nThe thread 8520932 has exited with code 0 (0x0).\r\nThe thread 8520933 has exited with code 0 (0x0).\r\nThe thread 8520934 has exited with code 0 (0x0).\r\nThe thread 8520935 has exited with code 0 (0x0).\r\nThe thread 8520936 has exited with code 0 (0x0).\r\nThe thread 8520937 has exited with code 0 (0x0).\r\nThe thread 8520938 has exited with code 0 (0x0).\r\nThe thread 8520939 has exited with code 0 (0x0).\r\nThe thread 8520940 has exited with code 0 (0x0).\r\nThe thread 8520941 has exited with code 0 (0x0).\r\nThe thread 8520942 has exited with code 0 (0x0).\r\nThe thread 8520943 has exited with code 0 (0x0).\r\nThe thread 8520944 has exited with code 0 (0x0).\r\nThe thread 8520945 has exited with code 0 (0x0).\r\nThe thread 8520950 has exited with code 0 (0x0).\r\nThe thread 8520952 has exited with code 0 (0x0).\r\nThe thread 8520953 has exited with code 0 (0x0).\r\nThe thread 8520954 has exited with code 0 (0x0).\r\nThe thread 8520955 has exited with code 0 (0x0).\r\nThe thread 8520956 has exited with code 0 (0x0).\r\nThe thread 8520957 has exited with code 0 (0x0).\r\nThe thread 8520958 has exited with code 0 (0x0).\r\nThe thread 8520959 has exited with code 0 (0x0).\r\nThe thread 8520960 has exited with code 0 (0x0).\r\nThe thread 8520962 has exited with code 0 (0x0).\r\nThe thread 8520963 has exited with code 0 (0x0).\r\nThe thread 8520964 has exited with code 0 (0x0).\r\nThe thread 8520965 has exited with code 0 (0x0).\r\nThe thread 8520966 has exited with code 0 (0x0).\r\nThe thread 8520967 has exited with code 0 (0x0).\r\nThe thread 8520970 has exited with code 0 (0x0).\r\nThe thread 8520971 has exited with code 0 (0x0).\r\nThe thread 8520976 has exited with code 0 (0x0).\r\nThe thread 8520977 has exited with code 0 (0x0).\r\nThe thread 8520978 has exited with code 0 (0x0).\r\nThe thread 8520979 has exited with code 0 (0x0).\r\nThe thread 8520980 has exited with code 0 (0x0).\r\nThe thread 8520981 has exited with code 0 (0x0).\r\nThe thread 8520982 has exited with code 0 (0x0).\r\nThe thread 8520983 has exited with code 0 (0x0).\r\nThe thread 8520984 has exited with code 0 (0x0).\r\nThe thread 8520985 has exited with code 0 (0x0).\r\nThe thread 8520986 has exited with code 0 (0x0).\r\nThe thread 8520987 has exited with code 0 (0x0).\r\nThe thread 8520988 has exited with code 0 (0x0).\r\nThe thread 8520989 has exited with code 0 (0x0).\r\nThe thread 8520990 has exited with code 0 (0x0).\r\nThe thread 8520991 has exited with code 0 (0x0).\r\nThe thread 8520992 has exited with code 0 (0x0).\r\nThe thread 8520993 has exited with code 0 (0x0).\r\nThe thread 8520994 has exited with code 0 (0x0).\r\nThe thread 8520995 has exited with code 0 (0x0).\r\nThe thread 8520996 has exited with code 0 (0x0).\r\nThe thread 8520997 has exited with code 0 (0x0).\r\nThe thread 8520998 has exited with code 0 (0x0).\r\nThe thread 8520999 has exited with code 0 (0x0).\r\nThe thread 8521002 has exited with code 0 (0x0).\r\nThe thread 8521003 has exited with code 0 (0x0).\r\nThe thread 8521004 has exited with code 0 (0x0).\r\nThe thread 8521005 has exited with code 0 (0x0).\r\nThe thread 8521007 has exited with code 0 (0x0).\r\nThe thread 8521008 has exited with code 0 (0x0).\r\nThe thread 8521011 has exited with code 0 (0x0).\r\nThe thread 8521012 has exited with code 0 (0x0).\r\nThe thread 8521013 has exited with code 0 (0x0).\r\nThe thread 8521014 has exited with code 0 (0x0).\r\nThe thread 8521015 has exited with code 0 (0x0).\r\nThe thread 8521016 has exited with code 0 (0x0).\r\nThe thread 8521017 has exited with code 0 (0x0).\r\nThe thread 8521018 has exited with code 0 (0x0).\r\nThe thread 8521019 has exited with code 0 (0x0).\r\nThe thread 8521020 has exited with code 0 (0x0).\r\nThe thread 8521021 has exited with code 0 (0x0).\r\nThe thread 8521022 has exited with code 0 (0x0).\r\nThe thread 8521023 has exited with code 0 (0x0).\r\nThe thread 8521024 has exited with code 0 (0x0).\r\nThe thread 8521025 has exited with code 0 (0x0).\r\nThe thread 8521026 has exited with code 0 (0x0).\r\nThe thread 8521027 has exited with code 0 (0x0).\r\nThe thread 8521028 has exited with code 0 (0x0).\r\nThe thread 8521029 has exited with code 0 (0x0).\r\nThe thread 8521030 has exited with code 0 (0x0).\r\nThe thread 8521031 has exited with code 0 (0x0).\r\nThe thread 8521084 has exited with code 0 (0x0).\r\nThe thread 8521085 has exited with code 0 (0x0).\r\nThe thread 8521086 has exited with code 0 (0x0).\r\nThe thread 8521087 has exited with code 0 (0x0).\r\nThe thread 8521088 has exited with code 0 (0x0).\r\nThe thread 8521089 has exited with code 0 (0x0).\r\nThe thread 8521091 has exited with code 0 (0x0).\r\nThe thread 8521092 has exited with code 0 (0x0).\r\nThe thread 8521093 has exited with code 0 (0x0).\r\nThe thread 8521094 has exited with code 0 (0x0).\r\nThe thread 8521095 has exited with code 0 (0x0).\r\nThe thread 8521096 has exited with code 0 (0x0).\r\nThe thread 8521097 has exited with code 0 (0x0).\r\nThe thread 8521098 has exited with code 0 (0x0).\r\nThe thread 8521099 has exited with code 0 (0x0).\r\nThe thread 8521100 has exited with code 0 (0x0).\r\nThe thread 8521101 has exited with code 0 (0x0).\r\nThe thread 8521102 has exited with code 0 (0x0).\r\nThe thread 8521103 has exited with code 0 (0x0).\r\nThe thread 8521104 has exited with code 0 (0x0).\r\nThe thread 8521105 has exited with code 0 (0x0).\r\nThe thread 8521106 has exited with code 0 (0x0).\r\nThe thread 8521107 has exited with code 0 (0x0).\r\nThe thread 8521108 has exited with code 0 (0x0).\r\nThe thread 8521111 has exited with code 0 (0x0).\r\nThe thread 8521112 has exited with code 0 (0x0).\r\nThe thread 8521113 has exited with code 0 (0x0).\r\nThe thread 8521114 has exited with code 0 (0x0).\r\nThe thread 8521115 has exited with code 0 (0x0).\r\nThe thread 8521116 has exited with code 0 (0x0).\r\nThe thread 8521117 has exited with code 0 (0x0).\r\nThe thread 8521118 has exited with code 0 (0x0).\r\nThe thread 8521119 has exited with code 0 (0x0).\r\nThe thread 8521120 has exited with code 0 (0x0).\r\nThe thread 8521121 has exited with code 0 (0x0).\r\nThe thread 8521122 has exited with code 0 (0x0).\r\nThe thread 8521123 has exited with code 0 (0x0).\r\nThe thread 8521124 has exited with code 0 (0x0).\r\nThe thread 8521125 has exited with code 0 (0x0).\r\nThe thread 8521126 has exited with code 0 (0x0).\r\nThe thread 8521127 has exited with code 0 (0x0).\r\nThe thread 8521128 has exited with code 0 (0x0).\r\nThe thread 8521129 has exited with code 0 (0x0).\r\nThe thread 8521131 has exited with code 0 (0x0).\r\nThe thread 8521132 has exited with code 0 (0x0).\r\nThe thread 8521133 has exited with code 0 (0x0).\r\nThe thread 8521134 has exited with code 0 (0x0).\r\nThe thread 8521135 has exited with code 0 (0x0).\r\nThe thread 8521136 has exited with code 0 (0x0).\r\nThe thread 8521141 has exited with code 0 (0x0).\r\nThe thread 8521142 has exited with code 0 (0x0).\r\nThe thread 8521143 has exited with code 0 (0x0).\r\nThe thread 8521144 has exited with code 0 (0x0).\r\nThe thread 8521145 has exited with code 0 (0x0).\r\nThe thread 8521146 has exited with code 0 (0x0).\r\nThe thread 8521147 has exited with code 0 (0x0).\r\nThe thread 8521148 has exited with code 0 (0x0).\r\nThe thread 8521149 has exited with code 0 (0x0).\r\nThe thread 8521150 has exited with code 0 (0x0).\r\nThe thread 8521151 has exited with code 0 (0x0).\r\nThe thread 8521152 has exited with code 0 (0x0).\r\nThe thread 8521153 has exited with code 0 (0x0).\r\nThe thread 8521154 has exited with code 0 (0x0).\r\nThe thread 8521156 has exited with code 0 (0x0).\r\nThe thread 8521157 has exited with code 0 (0x0).\r\nThe thread 8521158 has exited with code 0 (0x0).\r\nThe thread 8521159 has exited with code 0 (0x0).\r\nThe thread 8521160 has exited with code 0 (0x0).\r\nThe thread 8521161 has exited with code 0 (0x0).\r\nThe thread 8521162 has exited with code 0 (0x0).\r\nThe thread 8521163 has exited with code 0 (0x0).\r\nThe thread 8521164 has exited with code 0 (0x0).\r\nThe thread 8521165 has exited with code 0 (0x0).\r\nThe thread 8521166 has exited with code 0 (0x0).\r\nThe thread 8521167 has exited with code 0 (0x0).\r\nThe thread 8521168 has exited with code 0 (0x0).\r\nThe thread 8521169 has exited with code 0 (0x0).\r\nThe thread 8521170 has exited with code 0 (0x0).\r\nThe thread 8521171 has exited with code 0 (0x0).\r\nThe thread 8521172 has exited with code 0 (0x0).\r\nThe thread 8521173 has exited with code 0 (0x0).\r\nThe thread 8521174 has exited with code 0 (0x0).\r\nThe thread 8521175 has exited with code 0 (0x0).\r\nThe thread 8521176 has exited with code 0 (0x0).\r\nThe thread 8521177 has exited with code 0 (0x0).\r\nThe thread 8521178 has exited with code 0 (0x0).\r\nThe thread 8521179 has exited with code 0 (0x0).\r\nThe thread 8521180 has exited with code 0 (0x0).\r\nThe thread 8521181 has exited with code 0 (0x0).\r\nThe thread 8521182 has exited with code 0 (0x0).\r\nThe thread 8521184 has exited with code 0 (0x0).\r\nThe thread 8521185 has exited with code 0 (0x0).\r\nThe thread 8521186 has exited with code 0 (0x0).\r\nThe thread 8521188 has exited with code 0 (0x0).\r\nThe thread 8521190 has exited with code 0 (0x0).\r\nThe thread 8521191 has exited with code 0 (0x0).\r\nThe thread 8521192 has exited with code 0 (0x0).\r\nThe thread 8521194 has exited with code 0 (0x0).\r\nThe thread 8521195 has exited with code 0 (0x0).\r\nThe thread 8521196 has exited with code 0 (0x0).\r\nThe thread 8521197 has exited with code 0 (0x0).\r\nThe thread 8521198 has exited with code 0 (0x0).\r\nThe thread 8521199 has exited with code 0 (0x0).\r\nThe thread 8521200 has exited with code 0 (0x0).\r\nThe thread 8521201 has exited with code 0 (0x0).\r\nThe thread 8521202 has exited with code 0 (0x0).\r\nThe thread 8521203 has exited with code 0 (0x0).\r\nThe thread 8521204 has exited with code 0 (0x0).\r\nThe thread 8521205 has exited with code 0 (0x0).\r\nThe thread 8521206 has exited with code 0 (0x0).\r\nThe thread 8521207 has exited with code 0 (0x0).\r\nThe thread 8521208 has exited with code 0 (0x0).\r\nThe thread 8521209 has exited with code 0 (0x0).\r\nThe thread 8521210 has exited with code 0 (0x0).\r\nThe thread 8521211 has exited with code 0 (0x0).\r\nThe thread 8521212 has exited with code 0 (0x0).\r\nThe thread 8521213 has exited with code 0 (0x0).\r\nThe thread 8521214 has exited with code 0 (0x0).\r\nThe thread 8521215 has exited with code 0 (0x0).\r\nThe thread 8521216 has exited with code 0 (0x0).\r\nThe thread 8521217 has exited with code 0 (0x0).\r\nThe thread 8521218 has exited with code 0 (0x0).\r\nThe thread 8521219 has exited with code 0 (0x0).\r\nThe thread 8521220 has exited with code 0 (0x0).\r\nThe thread 8521221 has exited with code 0 (0x0).\r\nThe thread 8521222 has exited with code 0 (0x0).\r\nThe thread 8521223 has exited with code 0 (0x0).\r\nThe thread 8521224 has exited with code 0 (0x0).\r\nThe thread 8521225 has exited with code 0 (0x0).\r\nThe thread 8521226 has exited with code 0 (0x0).\r\nThe thread 8521227 has exited with code 0 (0x0).\r\nThe thread 8521228 has exited with code 0 (0x0).\r\nThe thread 8521229 has exited with code 0 (0x0).\r\nThe thread 8521230 has exited with code 0 (0x0).\r\nThe thread 8521231 has exited with code 0 (0x0).\r\nThe thread 8521232 has exited with code 0 (0x0).\r\nThe thread 8521233 has exited with code 0 (0x0).\r\nThe thread 8521234 has exited with code 0 (0x0).\r\nThe thread 8521235 has exited with code 0 (0x0).\r\nThe thread 8521237 has exited with code 0 (0x0).\r\nThe thread 8521238 has exited with code 0 (0x0).\r\nThe thread 8521239 has exited with code 0 (0x0).\r\nThe thread 8521240 has exited with code 0 (0x0).\r\nThe thread 8521242 has exited with code 0 (0x0).\r\nThe thread 8521243 has exited with code 0 (0x0).\r\nThe thread 8521244 has exited with code 0 (0x0).\r\nThe thread 8521245 has exited with code 0 (0x0).\r\nThe thread 8521246 has exited with code 0 (0x0).\r\nThe thread 8521247 has exited with code 0 (0x0).\r\nThe thread 8521248 has exited with code 0 (0x0).\r\nThe thread 8521249 has exited with code 0 (0x0).\r\nThe thread 8521250 has exited with code 0 (0x0).\r\nThe thread 8521251 has exited with code 0 (0x0).\r\nThe thread 8521252 has exited with code 0 (0x0).\r\nThe thread 8521253 has exited with code 0 (0x0).\r\nThe thread 8521254 has exited with code 0 (0x0).\r\nThe thread 8521255 has exited with code 0 (0x0).\r\nThe thread 8521256 has exited with code 0 (0x0).\r\nThe thread 8521257 has exited with code 0 (0x0).\r\nThe thread 8521258 has exited with code 0 (0x0).\r\nThe thread 8521259 has exited with code 0 (0x0).\r\nThe thread 8521260 has exited with code 0 (0x0).\r\nThe thread 8521262 has exited with code 0 (0x0).\r\nThe thread 8521263 has exited with code 0 (0x0).\r\nThe thread 8521264 has exited with code 0 (0x0).\r\nThe thread 8521265 has exited with code 0 (0x0).\r\nThe thread 8521266 has exited with code 0 (0x0).\r\nThe thread 8521267 has exited with code 0 (0x0).\r\nThe thread 8521268 has exited with code 0 (0x0).\r\nThe thread 8521269 has exited with code 0 (0x0).\r\n[40m[32minfo[39m[22m[49m: Microsoft.EntityFrameworkCore.Database.Command[200101]\r\n      Executed DbCommand (14ms) [Parameters=[@__id_1='?'], CommandType='Text', CommandTimeout='30']\r\n      SELECT [x1].[Id]\r\n      FROM [Products] AS [x1]\r\n      WHERE [x1].[Id] = @__id_1\r\n      ORDER BY [x1].[Id]\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (14ms) [Parameters=[@__id_1='?'], CommandType='Text', CommandTimeout='30']\r\nSELECT [x1].[Id]\r\nFROM [Products] AS [x1]\r\nWHERE [x1].[Id] = @__id_1\r\nORDER BY [x1].[Id]\r\nThe thread 8521271 has exited with code 0 (0x0).\r\n[40m[32minfo[39m[22m[49m: Microsoft.EntityFrameworkCore.Database.Command[200101]\r\n      Executed DbCommand (38ms) [Parameters=[@_outer_Id2='?'], CommandType='Text', CommandTimeout='30']\r\n      SELECT [cat4].[CategoryId], [cat4].[ProductId]\r\n      FROM [ProductCategories] AS [cat4]\r\n      WHERE @_outer_Id2 = [cat4].[ProductId]\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (38ms) [Parameters=[@_outer_Id2='?'], CommandType='Text', CommandTimeout='30']\r\nSELECT [cat4].[CategoryId], [cat4].[ProductId]\r\nFROM [ProductCategories] AS [cat4]\r\nWHERE @_outer_Id2 = [cat4].[ProductId]\r\nMicrosoft.AspNetCore.Mvc.Internal.ObjectResultExecutor:Information: Executing ObjectResult, writing value Microsoft.AspNetCore.Mvc.ControllerContext.\r\n[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Mvc.Internal.ObjectResultExecutor[1]\r\n      Executing ObjectResult, writing value Microsoft.AspNetCore.Mvc.ControllerContext.\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker:Information: Executed action API.Controllers.ProductController.Get (API) in 20900.894ms\r\n[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]\r\n      Executed action API.Controllers.ProductController.Get (API) in 20900.894ms\r\n[40m[32minfo[39m[22m[49m: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n      Request finished in 20996.946ms 200 application/json; charset=utf-8\r\nMicrosoft.AspNetCore.Hosting.Internal.WebHost:Information: Request finished in 20996.946ms 200 application/json; charset=utf-8\r\n\r\n```\r\n\r\n\r\n```c#\r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"2.0.0\" />\r\n    \r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Routing\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer.Design\" Version=\"2.0.0-preview1-final\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.EnvironmentVariables\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.FileExtensions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"RestSharp.CoreNet\" Version=\"105.2.4-rc4-24214-03\" />\r\n    <PackageReference Include=\"NEST\" Version=\"5.5.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.ResponseCaching\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"5.1.4\" />\r\n    <PackageReference Include=\"System.IO.Packaging\" Version=\"4.4.0\" />\r\n    <PackageReference Include=\"EPPlus.Core\" Version=\"1.5.2\" />\r\n  </ItemGroup>\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "frogcrush": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10234", "title": "System.IO.FileNotFoundException when using Xamarin Forms", "body": "When trying to use with a Xamarin Forms application, I keep receiving the following error message:\r\n\r\n![image](https://user-images.githubusercontent.com/6116333/32520758-f28f6dde-c3c5-11e7-895e-a456ff7cdb2b.png)\r\n\r\nIt's happened over two computers (one with a fresh VS2017 install). \r\n\r\nMicrosoft.EntityFrameworkcore.Sqlite and Microsoft.EntityframeworkCore is referenced in both the .NET Core \"shared\" project and the .Android project.\r\n\r\n### Steps to reproduce\r\nAttempt to use Microsoft.EntityFrameworkCore.Sqlite with a Xamarin Forms project\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: e.g. Microsoft.EntityFrameworkCore.Sqlite\r\nOperating system: Windows 10\r\nIDE: Visual Studio Community 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10216", "title": "[dotnet-ef] Consider using MSBuild properties for locating deps file and runtime config", "body": "See https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/dotnet-ef/RootCommand.cs#L104-L109\r\n\r\n`ProjectDepsFilePath` and `ProjectRuntimeConfigFilePath` could be gleaned using the target instead of constructing these paths in code.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7831848b2cb96c8e4dcd58ec386acbd42151e74d", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/11b51db20d765379a23f04f5be648824fab46d83", "message": "Import AspNetCoreSettings.props from root Directory.Build.props"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9a7d3d16fa102502c71bffe88c2d3ff2a3195cab", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/804d69916686d7046cab61fa74f08bbb5be99903", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/476ca5ace5d384ddcee0bf97bddc266ac6c03c68", "message": "Update samples and tests to target netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/78834506a35d87dc18223c62064830117f30b37c", "message": "Preparing to update to 2.2 SDK"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/119d30b695f3f12169fd5f4d01d28cced1cf5310", "message": "Merge branch 'rel/2.0.1' into feature/2.0.1"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40856739", "body": "The earlier package was colliding with the one on NuGet.org. Revving it up to a version that is available on MyGet and has the K10 profile binaries\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40856739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290818", "body": "There's a couple of -pre packages on MyGet now. We'll need to remove them if we want -alpha to work correctly. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12760000", "body": "It gets merged back in and overwritten so that future commits from release -> dev don't have to deal with merging this file: https://github.com/aspnet/EntityFramework/blob/dev/NuGet.Config#L7\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12760000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12811909", "body": "Yup. @davidfowl  wanted to rename these feeds, I was holding off on doing that until we sort that out.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12811909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715192", "body": "Sorry about the lack of PR. I'll file a work item.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715222", "body": "https://github.com/aspnet/EntityFramework/issues/4803\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715840", "body": ":smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16715840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16809335", "body": "Yup, it's on our feed as yet. Should be as soon as the CoreCLR build passes \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16809335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345665", "body": "```\nD:\\b\\w\\a6e561eeb4ed13a7\\EntityFramework\\src\\Microsoft.EntityFrameworkCore\\src\\Microsoft.EntityFrameworkCore\\EntityFrameworkServiceCollectionExtensions.cs(72,58): error CS1734: XML comment on 'EntityFrameworkServiceCollectionExtensions.AddDbContext<TContext>(IServiceCollection, ServiceLifetime)' has a paramref tag for 'optionsAction', but there is no parameter by that name\nD:\\b\\w\\a6e561eeb4ed13a7\\EntityFramework\\src\\Microsoft.EntityFrameworkCore\\src\\Microsoft.EntityFrameworkCore\\EntityFrameworkServiceCollectionExtensions.cs(92,26): error CS1572: XML comment has a param tag for 'optionsAction', but there is no parameter by that name\nD:\\b\\w\\a6e561eeb4ed13a7\\EntityFramework\\src\\Microsoft.EntityFrameworkCore\\src\\Microsoft.EntityFrameworkCore\\EntityFrameworkServiceCollectionExtensions.cs(113,29): error CS1573: Parameter 'contextLifetime' has no matching param tag in the XML comment for 'EntityFrameworkServiceCollectionExtensions.AddDbContext<TContext>(IServiceCollection, ServiceLifetime)' (but other parameters do)\nD:\\b\\w\\a6e561eeb4ed13a7\\EntityFramework\\src\\Microsoft.EntityFrameworkCore\\src\\Microsoft.EntityFrameworkCore\\EntityFrameworkServiceCollectionExtensions.cs(72,58): error CS1734: XML comment on 'EntityFrameworkServiceCollectionExtensions.AddDbContext<TContext>(IServiceCollection, ServiceLifetime)' has a paramref tag for 'optionsAction', but there is no parameter by that name\nD:\\b\\w\\a6e561eeb4ed13a7\\EntityFramework\\src\\Microsoft.EntityFrameworkCore\\src\\Microsoft.EntityFrameworkCore\\EntityFrameworkServiceCollectionExtensions.cs(92,26): error CS1572: XML comment has a param tag for 'optionsAction', but there is no parameter by that name\nD:\\b\\w\\a6e561eeb4ed13a7\\EntityFramework\\src\\Microsoft.EntityFrameworkCore\\src\\Microsoft.EntityFrameworkCore\\EntityFrameworkServiceCollectionExtensions.cs(113,29): error CS1573: Parameter 'contextLifetime' has no matching param tag in the XML comment for 'EntityFrameworkServiceCollectionExtensions.AddDbContext<TContext>(IServiceCollection, ServiceLifetime)' (but other parameters do)\nD:\\b\\w\\a6e561eeb4ed13a7\\EntityFramework\\src\\Microsoft.EntityFrameworkCore\\src\\Microsoft.EntityFrameworkCore\\EntityFrameworkServiceCollectionExtensions.cs(72,58): error CS1734: XML comment on 'EntityFrameworkServiceCollectionExtensions.AddDbContext<TContext>(IServiceCollection, ServiceLifetime)' has a paramref tag for 'optionsAction', but there is no parameter by that name\nD:\\b\\w\\a6e561eeb4ed13a7\\EntityFramework\\src\\Microsoft.EntityFrameworkCore\\src\\Microsoft.EntityFrameworkCore\\EntityFrameworkServiceCollectionExtensions.cs(92,26): error CS1572: XML comment has a param tag for 'optionsAction', but there is no parameter by that name\nD:\\b\\w\\a6e561eeb4ed13a7\\EntityFramework\\src\\Microsoft.EntityFrameworkCore\\src\\Microsoft.EntityFrameworkCore\\EntityFrameworkServiceCollectionExtensions.cs(113,29): error CS1573: Parameter 'contextLifetime' has no matching param tag in the XML comment for 'EntityFrameworkServiceCollectionExtensions.AddDbContext<TContext>(IServiceCollection, ServiceLifetime)' (but other parameters do)\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345686", "body": "I was in the midst of filing a bug, but this works too :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17528424", "body": "cc @rowanmiller \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17528424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18249227", "body": "Huh, the CLI fixed this issue as part of RTM. Having `include` does not override default excludes. Are you seeing otherwise? cc @ajaybhargavb \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18249227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18416967", "body": "FYI @natemcmaster. Might need to do this in dev branch too. This works in the regular case because dotnet restore picks up references marked as `type: build` when using P2P references. But doesn't when we try to reference it as a package (by removing src from global.json)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18416967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18417853", "body": "In theory that's what we should be doing in our regular tests too, but for some reason EF has been set up differently (so we recompile the src when running tests). Anyway, this seemed to be the only issue we ran into when doing this. Note: All I did was remove `src` from global.json and left the src directory alone. It did cause the src directory to get recompiled but tests used previously built packages.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18417853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21482448", "body": "It's apparently a VS thing - http://stackoverflow.com/a/22917902/235591", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21482448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/15773904", "body": "Could you change tempPath to `Path.GetTempPath()` in `CanConnectToExistingRedisServer`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/15773904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/41817055", "body": "DNX picked up a new set of Roslyn packages earlier today. Perhaps that caused this issue?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/41817055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43015429", "body": "I essentially undid the changes from my previous commit: https://github.com/aspnet/EntityFramework/commit/7e0ba479a2cc1242ff7d6688687a740bd8a606f4#diff-0346fce18fd5fb2d9f6971bfa089439aL28\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43015429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43027992", "body": "Why does listing these as framework references break on net451?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43027992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43028452", "body": "What's the fix here - add a separate `DNX451` node?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43028452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43038413", "body": "@davidfowl wants to fix this in DNX as a pack time gesture. @davidfowl, would this be an appropriate work item to track this issue: https://github.com/aspnet/dnx/issues/2031?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43038413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/50607280", "body": "Yup! They had some issues with their packaging which was why I was avoiding pulling their packages in, but I could set up the CoreCLR configuration to clone the CLI packages.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/50607280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/54177525", "body": "Shouldn't need the parantheses.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/54177525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/59417790", "body": "Why change these?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/59417790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/59425652", "body": "Shouldn't that go in a separate PR? If the hope here is that eventually we won't have to cross compile for netcore, we could revert this change in entirety.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/59425652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/59425964", "body": "Why are some of these `type: build` and not others?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/59425964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/61008104", "body": "The only reference to this was in `StartupInvoker` which was removed. There's already code that sets up `HostingEnvironment` with the right `ContentRootPath`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/61008104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/61321317", "body": "Yeah, it fails to pack without it :crying_cat_face: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/61321317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/61785725", "body": "cc @natemcmaster \\ @bricelam \n\nI'm commonizing `dotnet-test-xunit` in order to allow us to use the dotnet test runner on desktop and netcoreapp. This line was failing to compile when I moved the dependency. However this project doesn't have any projects of it's own so I moved the runner into `Microsoft.EntityFrameworkCore.Microbenchmarks` and `Microsoft.EntityFrameworkCore.Microbenchmarks.EF6`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/61785725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62386864", "body": "It allows us to specify a build quality on a per project basis.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62386864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/63560599", "body": "Did I miss the other packages here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/63560599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/63628138", "body": "Do you want to make this a tool instead? Might be more reliable to use nuget APIs to do this. Here's what we do in Coherence-Signed: https://github.com/aspnet/Coherence-Signed/blob/dev/src/PushCoherence/Program.cs#L90-L122\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/63628138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64950163", "body": "cc @natemcmaster   \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64950163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64955252", "body": "We could ignore this issue in Coherence if you'd like to stick to 1.1.37. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/64955252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/65760036", "body": "Couldn't you just remove this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/65760036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/66474691", "body": "Is `array` a reserved keyword? If not, this seems like a typo.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/66474691/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/66474856", "body": "Couldn't you sort both the arrays and do an `Assert.Equal`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/66474856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/66475865", "body": "Ahh ok. Maybe use `Assert.Contains(element, orderedDistinct);` in that case. `Assert.True` wouldn't tell what was missing and what the source array was.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/66475865/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/67249195", "body": "The src project references are fine. Test -> test is the one that's broken.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/67249195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/69676204", "body": "Could these changes possibly wait for a bit? @anurse's KoreBuild v2 changes are nearly done and a bunch of this code would have to be transpiled to xml soon. Might as well start off writing this in xml\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/69676204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/69676276", "body": "This is going to be pretty tricky to keep update to date between releases.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/69676276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80961835", "body": "Yes, but we decided it's easier if we just add this to every project. It might also make it easier to independently rev these if we ever create a release where downstream dependencies we own don't get updated.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80961835/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962022", "body": "I could make it `netstandard` specific if this is concerning. My guess was that package trimming should take care of this. cc @Eilon \\ @davidfowl \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962135", "body": "Possibly not. I'll try removing this and check if it the nuspec ends up with the same references\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962279", "body": "\ud83d\ude1e there's a few in Mvc like these. Perhaps we can fix up some of these in 2.0.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/81050110", "body": "I think @DamianEdwards was planning on addressing this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/81050110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/94093494", "body": "I think the behavior changed here - https://github.com/dotnet/corefx/commit/7888677b3c53596085c2fa53860d9a0519eeecfd#diff-d7bff8835e6985ab9107a59a282e1a60L153. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/94093494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/107909443", "body": "Btw, I wasn't sure if you still need the observable types. Are they replaceable by the ones in `NETStandard1.3`? ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/107909443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/67249195", "body": "The src project references are fine. Test -> test is the one that's broken.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/67249195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/69676204", "body": "Could these changes possibly wait for a bit? @anurse's KoreBuild v2 changes are nearly done and a bunch of this code would have to be transpiled to xml soon. Might as well start off writing this in xml\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/69676204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/69676276", "body": "This is going to be pretty tricky to keep update to date between releases.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/69676276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80961835", "body": "Yes, but we decided it's easier if we just add this to every project. It might also make it easier to independently rev these if we ever create a release where downstream dependencies we own don't get updated.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80961835/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962022", "body": "I could make it `netstandard` specific if this is concerning. My guess was that package trimming should take care of this. cc @Eilon \\ @davidfowl \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962135", "body": "Possibly not. I'll try removing this and check if it the nuspec ends up with the same references\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962279", "body": "\ud83d\ude1e there's a few in Mvc like these. Perhaps we can fix up some of these in 2.0.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/80962279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/81050110", "body": "I think @DamianEdwards was planning on addressing this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/81050110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/94093494", "body": "I think the behavior changed here - https://github.com/dotnet/corefx/commit/7888677b3c53596085c2fa53860d9a0519eeecfd#diff-d7bff8835e6985ab9107a59a282e1a60L153. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/94093494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/107909443", "body": "Btw, I wasn't sure if you still need the observable types. Are they replaceable by the ones in `NETStandard1.3`? ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/107909443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/107917574", "body": "I'll merge the PR in to unblock the rest of my work. You can remove this in a follow up if it is indeed removable. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/107917574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124923699", "body": "Missed a closing bracket here", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124923699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151565845", "body": "Sure.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151565845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151578252", "body": "MSBuild's string comparisons aren't case sensitive. I'll change it to `True`", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151578252/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rob2212": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10207", "title": "Query throws Exception with Xamarin iOS -> linking issue", "body": "When I query a DbSet e.g. with a simple ToList() call I get the exception shown below. The exception is only thrown on real iOS device. It works with the iOS emulator.\r\n\r\n`var test = context.Images.ToList();`\r\n\r\n```\r\nException message: The type initializer for 'Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingExpressionNode' threw an exception.\r\nStack trace:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.get_NodeTypeProvider () [0x0000a] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler+<>c__DisplayClass15_0`1[TResult].<Execute>b__0 () [0x00000] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc] (System.Object cacheKey, System.Func`1[TResult] compiler) [0x0001f] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult] (System.Object cacheKey, System.Func`1[TResult] compiler) [0x00000] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult] (System.Linq.Expressions.Expression query) [0x00069] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult] (System.Linq.Expressions.Expression expression) [0x00000] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Remotion.Linq.QueryableBase`1[T].GetEnumerator () [0x0000c] in <4c6b24174f1a4a3a9c2e761b70716a02>:0 \r\n  at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1[TEntity].System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator () [0x00006] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at System.Collections.Generic.List`1[T]..ctor (System.Collections.Generic.IEnumerable`1[T] collection) [0x00062] in <a89624c267f94034b6cf9aa0c56f8864>:0 \r\n  at System.Linq.Enumerable.ToList[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00018] in <773264786149499a986a13db6a7d46fe>:0 \r\n  at Erdmann.FW.LocationDatabase.DatabaseContentBuilder.Run (Erdmann.FW.LocationDatabase.LocationDbContext context) [0x00014] in E:\\IRISSYS\\Source\\OP-Tools\\Erdmann\\Erdmann.FW.LocationDatabase\\Erdmann.FW.LocationDatabase\\DatabaseContentBuilder.cs:25 \r\n  at Erdmann.FW.LocationDatabase.DatabaseManager.FillDatabase (Erdmann.FW.LocationDatabase.DataSources.IDataSource source) [0x0002a] in E:\\IRISSYS\\Source\\OP-Tools\\Erdmann\\Erdmann.FW.LocationDatabase\\Erdmann.FW.LocationDatabase\\DatabaseManager.cs:64 \r\n  at TestApp.MainViewModel.Run () [0x00049] in E:\\IRISSYS\\Source\\OP-Tools\\Erdmann\\Erdmann.FW.LocationDatabase\\TestApp\\TestApp.Shared\\MainViewModel.cs:56 \r\n```\r\nThe problem seems to be the linking behavior with the Xamarin project. I've tried to disable linking for some assemblies in the iOS Xamarin projefct under iOS Build:\r\n\r\n`--linkskip=Microsoft.EntityFrameworkCore --linkskip=Microsoft.EntityFrameworkCore.Relational  --linkskip=Microsoft.EntityFrameworkCore.Sqlite --linkskip=Remotion.Linq`\r\n\r\nThat didn't work. However disable linking completely does work (set Link Behavior to 'Don't Link'). But this can only be a temporary workaround not a final solution for production deployment.\r\n\r\n### Further technical details\r\nEF Core version: v2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.Sqlite\r\nOperating system: Windows 10 / iOS 11.1\r\nIDE: Visual Studio 2017 (15.4.1)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SharpSeeEr": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10200", "title": "Mix of owned and normal entity types in hierarchy should cause validation error", "body": "### Observed Behavior\r\nUsing the following setup with an Address class that is used as an Owned Entity and as a base class for the ContactAddress class:\r\n```c#\r\npublic class OwnedTypesContext : DbContext\r\n{\r\n    public DbSet<House> Houses { get; set; }\r\n    public DbSet<Contact> Contacts { get; set; }\r\n\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {\r\n        optionsBuilder.UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=OwnedTypesInheritence;Trusted_Connection=True;\");\r\n        base.OnConfiguring(optionsBuilder);\r\n    }\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        modelBuilder.Entity<House>()\r\n            .OwnsOne(e => e.Address);\r\n        \r\n        base.OnModelCreating(modelBuilder);\r\n    }\r\n}\r\n\r\npublic class Address\r\n{\r\n    [MaxLength(500)] public string StreetAddress1 { get; set; }\r\n    [MaxLength(200)] public string City { get; set; }\r\n    [MaxLength(2)]   public string State { get; set; }\r\n    [MaxLength(5)]   public string Zip { get; set; }\r\n}\r\n\r\npublic class ContactAddress : Address\r\n{\r\n    public int Id { get; set; }\r\n    public int ContactId { get; set; }\r\n    public Contact Contact { get; set; }\r\n}\r\n\r\npublic class Contact\r\n{\r\n    public int Id { get; set; }\r\n    [MaxLength(100)] public string FirstName { get; set; }\r\n    [MaxLength(200)] public string LastName { get; set; }\r\n    public List<ContactAddress> Addresses { get; set; } = new List<ContactAddress>();\r\n}\r\n\r\npublic class House\r\n{\r\n    public int Id { get; set; }\r\n    public Address Address { get; set; }\r\n    public string OwnerName { get; set; }\r\n}\r\n```\r\nCreating the initial migration works as expected - the ContactAddress table **does not** have a Discriminator column but the ContextModelSnapshot **does** show Discriminator column:\r\n```c#\r\nmodelBuilder.Entity(\"EFCoreOwnedTypeInheritence.ContactAddress\", b =>\r\n    {\r\n        b.Property<int>(\"Id\")\r\n            .ValueGeneratedOnAdd();\r\n\r\n        b.Property<string>(\"City\")\r\n            .HasMaxLength(200);\r\n\r\n        b.Property<int>(\"ContactId\");\r\n\r\n        b.Property<string>(\"Discriminator\") // <---  Exists in Model Snapshot\r\n            .IsRequired();\r\n\r\n        b.Property<string>(\"Label\")\r\n            .HasMaxLength(25);\r\n\r\n        b.Property<string>(\"State\")\r\n            .HasMaxLength(2);\r\n\r\n        b.Property<string>(\"StreetAddress1\")\r\n            .HasMaxLength(500);\r\n\r\n        b.Property<string>(\"Zip\")\r\n            .HasMaxLength(5);\r\n\r\n        b.HasKey(\"Id\");\r\n\r\n        b.HasIndex(\"ContactId\");\r\n\r\n        b.ToTable(\"ContactAddress\");\r\n\r\n        b.HasDiscriminator<string>(\"Discriminator\").HasValue(\"ContactAddress\");\r\n    });\r\n```\r\n All subsequent migrations, even if no changes were made, result in the following:\r\n\r\n```c#\r\nprotected override void Up(MigrationBuilder migrationBuilder)\r\n{\r\n    migrationBuilder.DropColumn(\r\n        name: \"Discriminator\",\r\n        table: \"ContactAddress\");\r\n}\r\n\r\nprotected override void Down(MigrationBuilder migrationBuilder)\r\n{\r\n    migrationBuilder.AddColumn<string>(\r\n        name: \"Discriminator\",\r\n        table: \"ContactAddress\",\r\n        nullable: false,\r\n        defaultValue: \"\");\r\n}\r\n```\r\n\r\nIf you run dotnet ef database update it gives the error:\r\n```\r\nALTER TABLE DROP COLUMN failed because column 'Discriminator' does not exist in table 'ContactAddress'\r\n```\r\n\r\n### Expected Behavior\r\nThe ContextModelSnapshot would not have any reference to a Discriminator column for an Owned Type, and migrations would not continuously `DropColumn(name: \"Discriminator\")` and `AddColumn(name: \"Discriminator\")`\r\n\r\n### Steps to reproduce\r\n1. Clone [Test Case Project](https://github.com/SharpSeeEr/EFCoreOwnedTypeInheritance)\r\n1. Run the following commands:\r\n```powershell\r\ndotnet restore\r\ndotnet ef migrations add Initial\r\ndotnet database update\r\ndotnet ef migrations add Second\r\ndotnet database update\r\n```\r\n1. View the .\\Migrations\\*_Second.cs migration file.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer 2.0.0\r\nOperating system: Microsoft Windows 10 Pro Version 1709 OS Build 16299.19\r\nIDE: Visual Studio 2017 15.4.1, VS Code 1.17.2\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "azabluda": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10183", "title": "Recognize filters created by fluent API and reverse engineer to fluent API.", "body": "I define a unique index for a entity `Folder` with a nullable property `Folder.FolderId` (link to parent folder)\r\n\r\n```cs\r\nmodelBuilder.Entity<Folder>().HasIndex(f => new { f.Name, f.FolderId }).IsUnique();\r\n```\r\n\r\nThe debugger shows a Relational:Filter \"[FOLDER_ID] IS NOT NULL\" annotation defined on that index. The generated DDL looks fine\r\n\r\n```sql\r\nCREATE UNIQUE INDEX [IX_FOLDERS_NAME_FOLDER_ID] ON [ICNG].[FOLDERS] ([NAME], [FOLDER_ID]) WHERE [FOLDER_ID] IS NOT NULL;\r\n```\r\n\r\nNow if I reverse engineer this database\r\n\r\n```cs\r\nvar reporter = new TestOperationReporter();\r\nvar svcColl = new ServiceCollection()\r\n    .AddLogging()\r\n    .AddSingleton<IOperationReporter>(reporter)\r\n    .AddScaffolding(reporter);\r\nnew SqlServerDesignTimeServices().ConfigureDesignTimeServices(svcColl);\r\nIServiceProvider prov = svcColl.BuildServiceProvider();\r\n\r\nvar scaffoldingModelFactory = prov.GetService<IScaffoldingModelFactory>();\r\nvar scaffoldedModel = scaffoldingModelFactory.Create(\r\n    ConnectionString,\r\n    Enumerable.Empty<string>(),\r\n    Enumerable.Empty<string>(),\r\n    true);\r\n```\r\n\r\nthen the Relational:Filter becomes \"([FOLDER_ID] IS NOT NULL)\" (note the two round brackets). Diffing the original and the scaffolded models yields unnecessary DROP/CREATE INDEX operations, which at first glance doesn't look correct. Wouldn't it make sense to reduce the Relational:Filter to a canonical form during scaffolding?\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 Pro\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19187733", "body": "Since it no longer possible to resolve `ICollectionTypeFactory` from DI container, what for do we still have it registered there? Thanks\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19187733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "silarmani": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10182", "title": "If an entity is part of a hierarchy then I am unable to remove it by its PK only", "body": "I am trying to remove all items of a hierarchy by deleting all base items by their PK however however when I try to remove any other entity which has a FK pointing to a derived type then I get an internal casting exception.\r\n\r\nMy sample entities\r\n\r\n```c#\r\n    public class Actor\r\n    {\r\n        public int Id { get; set; }\r\n\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class User : Actor\r\n    {\r\n        public UserDetails Details { get; set; }\r\n    }\r\n\r\n    public class Group : Actor\r\n    {\r\n    }\r\n\r\n    public class UserDetails\r\n    {\r\n        public int ActorId { get; set; }\r\n\r\n        public User Actor { get; set; }\r\n\r\n        public string FirstName { get; set; }\r\n\r\n        public string LastName { get; set; }\r\n\r\n        public string Email { get; set; }\r\n    }\r\n```\r\n\r\nThe deletion\r\n\r\n```c#\r\n            var ctx = new MyDbContext();\r\n\r\n            var toBeDeleted = ctx\r\n                .Actors\r\n                .AsNoTracking()\r\n                .Select(e => new Actor\r\n                {\r\n                    Id = e.Id\r\n                })\r\n                .ToList();\r\n\r\n            ctx.Actors.RemoveRange(toBeDeleted);\r\n\r\n            var toBeDeletedDetails = ctx\r\n                .UserDetails\r\n                .AsNoTracking()\r\n                .Select(e => new UserDetails\r\n                {\r\n                    ActorId = e.ActorId\r\n                })\r\n                .ToList();\r\n\r\n            ctx.UserDetails.RemoveRange(toBeDeletedDetails);\r\n\r\n            ctx.SaveChanges();\r\n```\r\n\r\nThe exception\r\n\r\n```\r\nUnhandled Exception: System.InvalidCastException: Unable to cast object of type 'EfTests3.Actor' to type 'EfTests3.User'.\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetter`2.SetClrValue(Object instance, Object value)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue(IPropertyBase propertyBase, Object value)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(IPropertyBase propertyBase, Object value, Boolean setModified)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.set_Item(IPropertyBase propertyBase, Object value)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.SetNavigation(InternalEntityEntry entry, INavigation navigation, Object value)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.InitialFixup(InternalEntityEntry entry, ISet`1 handledForeignKeys, Boolean fromQuery)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState entityState, Boolean forceStateWhenUnknownKey)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState(InternalEntityEntry entry, EntityState entityState)\r\n   at Microsoft.EntityFrameworkCore.DbContext.RemoveRange(IEnumerable`1 entities)\r\n   at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.RemoveRange(IEnumerable`1 entities)\r\n   at EfTests3.Program.Main1(String[] args) in D:\\code\\tuxedo\\Tests\\EfBugTest3.cs:line 41\r\n   at EfTests3.Program.Main(String[] args) in D:\\code\\tuxedo\\Tests\\EfBugTest3.cs:line 10\r\n```\r\n\r\nWorkaround 1 is to swap the deletion around then it works however this is just small piece of a big puzzle involving maps, reflection, dynamics and etc so the order cannot be guaranteed for every base class and derived class\r\n\r\n```c#\r\n            var ctx = new MyDbContext();\r\n\r\n            // entites depending upon a derived class first\r\n            var toBeDeletedDetails = ctx\r\n                .UserDetails\r\n                .AsNoTracking()\r\n                .Select(e => new UserDetails\r\n                {\r\n                    ActorId = e.ActorId\r\n                })\r\n                .ToList();\r\n\r\n            ctx.UserDetails.RemoveRange(toBeDeletedDetails);\r\n\r\n            // base entity\r\n            var toBeDeleted = ctx\r\n                .Actors\r\n                .AsNoTracking()\r\n                .Select(e => new Actor\r\n                {\r\n                    Id = e.Id\r\n                })\r\n                .ToList();\r\n\r\n            ctx.Actors.RemoveRange(toBeDeleted);\r\n```\r\n\r\nWorkaround 2 is to cast everything into derived entities first however some scenarios contains lots of derived entities so it is just a workaround if there isn't a fix\r\n\r\n```\r\n            var ctx = new MyDbContext();\r\n\r\n            var toBeDeleted = ctx\r\n                .Users\r\n                .AsNoTracking()\r\n                .Select(e => new User { Id = e.Id })\r\n                .Cast<Actor>()\r\n                .Union(ctx\r\n                    .Groups\r\n                    .AsNoTracking()\r\n                    .Select(e => new Group { Id = e.Id })\r\n                )\r\n                .ToList();\r\n\r\n            ctx.Actors.RemoveRange(toBeDeleted);\r\n\r\n            var toBeDeletedDetails = ctx\r\n                .UserDetails\r\n                .AsNoTracking()\r\n                .Select(e => new UserDetails\r\n                {\r\n                    ActorId = e.ActorId\r\n                })\r\n                .ToList();\r\n\r\n            ctx.UserDetails.RemoveRange(toBeDeletedDetails);\r\n\r\n            ctx.SaveChanges();\r\n```\r\n\r\nFull code\r\n\r\n```c#\r\nnamespace EfTests3\r\n{\r\n    class Program\r\n    {\r\n        static int Main(string[] args)\r\n        {\r\n            //Main1(args);\r\n            Main2(args);\r\n            //Main3(args);\r\n\r\n            return 0;\r\n        }\r\n\r\n        // This one breaks\r\n        static int Main1(string[] args)\r\n        {\r\n            var ctx = new MyDbContext();\r\n\r\n            var toBeDeleted = ctx\r\n                .Actors\r\n                .AsNoTracking()\r\n                .Select(e => new Actor\r\n                {\r\n                    Id = e.Id\r\n                })\r\n                .ToList();\r\n\r\n            ctx.Actors.RemoveRange(toBeDeleted);\r\n\r\n            var toBeDeletedDetails = ctx\r\n                .UserDetails\r\n                .AsNoTracking()\r\n                .Select(e => new UserDetails\r\n                {\r\n                    ActorId = e.ActorId\r\n                })\r\n                .ToList();\r\n\r\n            ctx.UserDetails.RemoveRange(toBeDeletedDetails);\r\n\r\n            ctx.SaveChanges();\r\n\r\n            return 0;\r\n        }\r\n\r\n        // Swapping the deletion around works\r\n        static int Main2(string[] args)\r\n        {\r\n            var ctx = new MyDbContext();\r\n\r\n            // entites depending upon a derived class first\r\n            var toBeDeletedDetails = ctx\r\n                .UserDetails\r\n                .AsNoTracking()\r\n                .Select(e => new UserDetails\r\n                {\r\n                    ActorId = e.ActorId\r\n                })\r\n                .ToList();\r\n\r\n            ctx.UserDetails.RemoveRange(toBeDeletedDetails);\r\n\r\n            // base entity\r\n            var toBeDeleted = ctx\r\n                .Actors\r\n                .AsNoTracking()\r\n                .Select(e => new Actor\r\n                {\r\n                    Id = e.Id\r\n                })\r\n                .ToList();\r\n\r\n            ctx.Actors.RemoveRange(toBeDeleted);\r\n\r\n            ctx.SaveChanges();\r\n\r\n            return 0;\r\n        }\r\n\r\n        // Forcing casting also works\r\n        static int Main3(string[] args)\r\n        {\r\n            var ctx = new MyDbContext();\r\n\r\n            var toBeDeleted = ctx\r\n                .Users\r\n                .AsNoTracking()\r\n                .Select(e => new User { Id = e.Id })\r\n                .Cast<Actor>()\r\n                .Union(ctx\r\n                    .Groups\r\n                    .AsNoTracking()\r\n                    .Select(e => new Group { Id = e.Id })\r\n                )\r\n                .ToList();\r\n\r\n            ctx.Actors.RemoveRange(toBeDeleted);\r\n\r\n            var toBeDeletedDetails = ctx\r\n                .UserDetails\r\n                .AsNoTracking()\r\n                .Select(e => new UserDetails\r\n                {\r\n                    ActorId = e.ActorId\r\n                })\r\n                .ToList();\r\n\r\n            ctx.UserDetails.RemoveRange(toBeDeletedDetails);\r\n\r\n            ctx.SaveChanges();\r\n\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    public class Actor\r\n    {\r\n        public int Id { get; set; }\r\n\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class User : Actor\r\n    {\r\n        public UserDetails Details { get; set; }\r\n    }\r\n\r\n    public class Group : Actor\r\n    {\r\n    }\r\n\r\n    public class UserDetails\r\n    {\r\n        public int ActorId { get; set; }\r\n\r\n        public User Actor { get; set; }\r\n\r\n        public string FirstName { get; set; }\r\n\r\n        public string LastName { get; set; }\r\n\r\n        public string Email { get; set; }\r\n    }\r\n\r\n    public class MyDbContext : DbContext\r\n    {\r\n        public DbSet<Actor> Actors { get; set; }\r\n        public DbSet<User> Users { get; set; }\r\n        public DbSet<Group> Groups { get; set; }\r\n        public DbSet<UserDetails> UserDetails { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(\"Server=localhost,1433;Database=ipl_tux;Integrated Security=True;\");            \r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<UserDetails>()\r\n                .HasKey(e => e.ActorId);\r\n\r\n            base.OnModelCreating(modelBuilder);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTo be sure to be sure, this issue isn't a duplicate of neither #10179 nor #10180 however they were all found during my attempt to dynamically purge an entire hierarchy of objects.\r\n\r\nEF Core version: 2.0", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10180", "title": "Unable to remove item by its PK only", "body": "If an entity has extra indices then I am unable to delete it by its PK only\r\n\r\nExample\r\n\r\n```\r\n    class Program\r\n    {\r\n        static int Main(string[] args)\r\n        {\r\n            var ctx = new MyDbContext();\r\n\r\n            **var toBeDeleted = ctx.RiskConsequenceSeverityGroupItems\r\n                .Select(e => new RiskConsequenceSeverityGroupItem { Id = e.Id });**\r\n\r\n            ctx.RiskConsequenceSeverityGroupItems.RemoveRange(toBeDeleted);\r\n\r\n            ctx.SaveChanges();\r\n\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public class RiskConsequenceSeverityGroupItem\r\n    {\r\n        public int Id { get; set; }\r\n\r\n        public int Order { get; set; }\r\n\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class MyDbContext : DbContext\r\n    {\r\n        public DbSet<RiskConsequenceSeverityGroupItem> RiskConsequenceSeverityGroupItems { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(\"Server=localhost,1433;Database=ipl_tux;Integrated Security=True;\");            \r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<RiskConsequenceSeverityGroupItem>()\r\n                .HasIndex(e => new { e.Order })\r\n                .IsUnique();\r\n\r\n            base.OnModelCreating(modelBuilder);\r\n        }\r\n    }\r\n```\r\n\r\nIn this case I get the following execption\r\n\r\nUnhandled Exception: System.ArgumentException: An item with the same key has already been added. Key: System.Object[]\r\n   at System.ThrowHelper.ThrowAddingDuplicateWithKeyArgumentException(Object key)\r\n   at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\r\n   at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.AddUniqueValueEdges(Multigraph`2 commandGraph)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.TopologicalSort(IEnumerable`1 commands)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.<BatchCommands>d__8.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(Tuple`2 parameters)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, TState state, Func`2 operation)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(IReadOnlyList`1 entries)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IReadOnlyList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges()\r\n   at EfTests.Program.Main(String[] args) in D:\\code\\tuxedo\\Tests\\EfBugTest.cs:line 17\r\n\r\nHowever, if I specify the extra column which has an index on then it works fine\r\n\r\nExample\r\n\r\n```\r\n            var toBeDeleted = ctx.RiskConsequenceSeverityGroupItems\r\n                .Select(e => new RiskConsequenceSeverityGroupItem { Id = e.Id**, Order = e.Order** });\r\n\r\n            ctx.RiskConsequenceSeverityGroupItems.RemoveRange(toBeDeleted);\r\n\r\n            ctx.SaveChanges();\r\n```\r\n\r\nHaving to specify that extra column seems to be irrelevant to me if all want to do is to delete it. It works even if I assign random numbers to it.\r\n\r\nExample\r\n\r\n```\r\n            var toBeDeleted = ctx.RiskConsequenceSeverityGroupItems\r\n                .Select(e => new RiskConsequenceSeverityGroupItem { Id = e.Id**, Order = new Random().Next()** });\r\n\r\n            ctx.RiskConsequenceSeverityGroupItems.RemoveRange(toBeDeleted);\r\n\r\n            ctx.SaveChanges();\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10179", "title": "Unable to delete entity by id only if it contains complex types", "body": "I am trying to delete entities just by giving the PK however it fails if the entity contains Complex Type fields\r\n\r\nExample\r\n\r\n```\r\n    public class BowtieCauseDetails\r\n    {\r\n        [Key]\r\n        public int NodeId { get; set; }\r\n\r\n        public BowtieCauseTimeFields Current { get; set; }\r\n\r\n        public BowtieCauseTimeFields Proposed { get; set; }\r\n    }\r\n\r\n    public class BowtieCauseTimeFields\r\n    {\r\n        public BowtieNodeInOutFrequencyFields Outgoing { get; set; }\r\n    }\r\n\r\n    public class BowtieNodeInOutFrequencyFields\r\n    {\r\n        public decimal Frequency { get; set; }\r\n    }\r\n```\r\n\r\nExample\r\n\r\n```\r\n            var ctx = new MyDbContext();\r\n\r\n            var toBeDeleted = ctx\r\n                .BowtieCauseDetails\r\n                .AsNoTracking()\r\n                .Select(e => new BowtieCauseDetails\r\n                {\r\n                    NodeId = e.NodeId // PK only\r\n                })\r\n                .ToList();\r\n\r\n            ctx.BowtieCauseDetails.RemoveRange(toBeDeleted);\r\n\r\n            ctx.SaveChanges();\r\n```\r\n\r\nIt throws the following exception\r\n\r\nUnhandled Exception: System.InvalidOperationException: The entity of 'BowtieCauseDetails' is sharing the table 'BowtieCauseDetails' with 'BowtieCauseDetails.Current#BowtieCauseTimeFields', but there is no entity of this type with the same key value that has been marked as 'Deleted'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values.\r\n\r\nIf I provide empty place holder for those fields, it still fails but with a different message\r\n\r\nExample\r\n\r\n```\r\n            var ctx = new MyDbContext();\r\n\r\n            var toBeDeleted = ctx\r\n                .BowtieCauseDetails\r\n                .AsNoTracking()\r\n                .Select(e => new BowtieCauseDetails\r\n                {\r\n                    NodeId = e.NodeId,\r\n                    Current = new BowtieCauseTimeFields\r\n                    {\r\n                        Outgoing = new BowtieNodeInOutFrequencyFields\r\n                        {\r\n                        }\r\n                    },\r\n                    Proposed = new BowtieCauseTimeFields\r\n                    {\r\n                        Outgoing = new BowtieNodeInOutFrequencyFields\r\n                        {\r\n                        }\r\n                    }\r\n                })\r\n                .ToList();\r\n\r\n            ctx.BowtieCauseDetails.RemoveRange(toBeDeleted);\r\n\r\n            ctx.SaveChanges();\r\n```\r\n\r\nUnhandled Exception: System.InvalidOperationException: The property 'BowtieCauseTimeFieldsBowtieCauseDetailsNodeId' on entity type 'BowtieCauseDetails.Current#BowtieCauseTimeFields.Outgoing#BowtieNodeInOutFrequencyFields' is part of a key and so cannot be modified or marked as modified. To change the principal of an existing entity with an identifying foreign key first delete the dependent and invoke 'SaveChanges' then associate the dependent with the new principal.\r\n\r\nHowever if I get at least one field from the DB then it works\r\n\r\nExample\r\n\r\n```\r\n            var ctx = new MyDbContext();\r\n\r\n            var toBeDeleted = ctx\r\n                .BowtieCauseDetails\r\n                .AsNoTracking()\r\n                .Select(e => new BowtieCauseDetails\r\n                {\r\n                    NodeId = e.NodeId,\r\n                    Current = new BowtieCauseTimeFields\r\n                    {\r\n                        Outgoing = new BowtieNodeInOutFrequencyFields\r\n                        {\r\n                            Frequency = e.Current.Outgoing.Frequency\r\n                        }\r\n                    },\r\n                    Proposed = new BowtieCauseTimeFields\r\n                    {\r\n                        Outgoing = new BowtieNodeInOutFrequencyFields\r\n                        {\r\n                            Frequency = e.Current.Outgoing.Frequency\r\n                        }\r\n                    }\r\n                })\r\n                .ToList();\r\n\r\n            ctx.BowtieCauseDetails.RemoveRange(toBeDeleted);\r\n\r\n            ctx.SaveChanges();\r\n```\r\n\r\nI think it should work by giving the PK only.\r\n\r\nHere is the full sample for easier replication\r\n\r\n```\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Linq;\r\n\r\nnamespace EfTests\r\n{\r\n    class Program\r\n    {\r\n        static int Main(string[] args)\r\n        {\r\n            var ctx = new MyDbContext();\r\n\r\n            var toBeDeleted = ctx\r\n                .BowtieCauseDetails\r\n                .AsNoTracking()\r\n                .Select(e => new BowtieCauseDetails\r\n                {\r\n                    NodeId = e.NodeId,\r\n                    //Current = new BowtieCauseTimeFields\r\n                    //{\r\n                    //    Outgoing = new BowtieNodeInOutFrequencyFields\r\n                    //    {\r\n                    //        Frequency = e.Current.Outgoing.Frequency\r\n                    //    }\r\n                    //},\r\n                    //Proposed = new BowtieCauseTimeFields\r\n                    //{\r\n                    //    Outgoing = new BowtieNodeInOutFrequencyFields\r\n                    //    {\r\n                    //        Frequency = e.Current.Outgoing.Frequency\r\n                    //    }\r\n                    //}\r\n                })\r\n                .ToList();\r\n\r\n            ctx.BowtieCauseDetails.RemoveRange(toBeDeleted);\r\n\r\n            ctx.SaveChanges();\r\n\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public class BowtieCauseDetails\r\n    {\r\n        [Key]\r\n        public int NodeId { get; set; }\r\n\r\n        public BowtieCauseTimeFields Current { get; set; }\r\n\r\n        public BowtieCauseTimeFields Proposed { get; set; }\r\n    }\r\n\r\n    public class BowtieCauseTimeFields\r\n    {\r\n        public BowtieNodeInOutFrequencyFields Outgoing { get; set; }\r\n    }\r\n\r\n    public class BowtieNodeInOutFrequencyFields\r\n    {\r\n        public decimal Frequency { get; set; }\r\n    }\r\n\r\n    public class MyDbContext : DbContext\r\n    {\r\n        public DbSet<BowtieCauseDetails> BowtieCauseDetails { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlServer(\"Server=localhost,1433;Database=ipl_tux;Integrated Security=True;\");            \r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<BowtieCauseDetails>()\r\n                .OwnsOne(c => c.Current)\r\n                .OwnsOne(c => c.Outgoing);\r\n\r\n            modelBuilder.Entity<BowtieCauseDetails>()\r\n                .OwnsOne(c => c.Proposed)\r\n                .OwnsOne(c => c.Outgoing);\r\n\r\n            base.OnModelCreating(modelBuilder);\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ralmsdeveloper": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10176", "title": "Already defined null (Suggestion)", "body": "I think this could be removed\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore/DbContext.cs#L544", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/42e5403c2bb6154703edf8327b3d1672bae4d36b", "message": "Ajustments and Implementation of Migrations for Oracle\n\n**Basics Implementations\n\n*Create Table\n*Create Column\n*Create Index\n*Rename Table\n*Rename Column\n*Rename Index\n*Drop Index\n*Drop Column\n*Drop Table"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/afbb8a79c86a2315f69abf0caf9420d7b0b70dd5", "message": "Query: Add EF.Functions.DateDiff methods\nAdd DateDiff translation for SqlServer\nAdd partial translations for datetime related methods on Sqlite"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/5a1b1b45bba53f42ae49db93654c4e4b5918dc06", "message": "Code Cleanup!"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a447448106695715fcbe4fd2cee79dcf8d4e1e7c", "message": "Simplify code"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/001fb506f2099bba542327026532c0a5ec61c736", "message": "Cleaning of spaces"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b86eb8548a0deedc1199c3b4bc6b8632bd7824e3", "message": "Implementation Scaffolding for Oracle"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/8f388198041e5e624eeebf5bfbd8a45acf9dbe28", "message": "Correction of name"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/2f8de3c0011791a8047e6599112dd5f6ba1ab8ec", "message": "Can_save_changes test correction"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/150084702d1fc996a11bfa97d3305bb95f31cb4b", "message": "Resolves test issues for other regions."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/417cbf7cd8a02588fe73b444d9c6403b860e8f69", "message": "Clear namespace"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/a89f16b44b065c0bed6b45f1e05694a05d982013", "message": "Merge branch 'dev' of https://github.com/aspnet/EntityFrameworkCore into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b84df60654b21ca04a075260021fa6028c31333c", "message": "Oracle - Implementation of Batch Insertion\n\nA combination of the 6 \"commits\" of PR #10071\n\nWith the updated files from the branch dev!"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10741", "title": "Fix #10740: Repair the database name with apostrophe", "body": "Solve #10740 \r\n\r\n* Solve apostrophe problem in database name\r\n\r\nNew SQL output:\r\n\r\n```sql\r\nIF SERVERPROPERTY('EngineEdition') <> 5\r\nBEGIN\r\n    ALTER DATABASE [Migrations'Test] SET READ_COMMITTED_SNAPSHOT ON;\r\nEND;\r\n```\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148337583", "body": "Thanks, I get it, I'm doing it.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148337583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148605567", "body": "Yes there is, but I am not implementing the nessee PR, I will check with other improvements in a near!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148605567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148338445", "body": "Okay, i'm gonna make it now", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148338445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151582160", "body": "@smitpatel Will you use 8 spaces?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151582160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151588136", "body": "@smitpatel , sorry for the silly question, looking better, I saw that in Expression Body Definitions you use 8 spaces!\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151588136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151591154", "body": "Thanks @AndriySvyryd, \r\nI was already getting confused, until I started looking at all code. \r\nthere are many places that are like this!\r\n\r\nAn example:\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore.SqlServer/Internal/SqlServerLoggerExtensions.cs#L141", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/151591154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/158112371", "body": "@smitpatel \r\nThe reason is that we do not have the same SQL Server support to validate if the table exists, so it's necessary, it may seem ugly, but that's the way to do it.\r\n\r\nAll I've seen so far are really weird adaptations, and I did not like it.\r\nThis is a sure way to do this validation.\r\nUnfortunately, there is a limitation, unless you have a better idea.\r\n\r\nI have not seen anything better than that, that it is functional and the query is cleaner.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/158112371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/158129451", "body": "In fact I did not follow his logic, I want to understand.\r\nMy reasoning was if the count is 0 is why there is no table, since we can not use EXISTS here.\r\n  ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/158129451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148395294", "body": "Yes I'll do it!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148395294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148370059", "body": "Yes of course, imagine the following situation:\r\n\r\n_Using sqlplus as an example to create and display._\r\n\r\nSQL> create table efCore (a decimal(10,5), b number (10, 5));\r\n\r\nTable created\r\n\r\nSQL> desc efCore;\r\n```\r\nName    Type        \r\nA       NUMBER(10,5)                  \r\nB       NUMBER(10,5)\r\n```\r\n\r\nNote at this point that the displayed type is NUMBER and not DECIMAL\r\n\r\nIn Oracle this type DECIMAL is treated as a NUMBER\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148370059/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/146449374", "body": "You're right, I did not realize that.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/146449374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/146450139", "body": "Done! ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/146450139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148365356", "body": "Hi @bricelam I also like, may not seem like, but this function is really necessary so I can get convert the default values \u200b\u200bof the fields.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148365356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148374216", "body": "Solving this now!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148374216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148374572", "body": "OK, make this now!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148374572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148379949", "body": "Yes I'll do it!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148379949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148396212", "body": "All right, I'm implementing!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148396212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148397417", "body": "Okay, doing this!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148397417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148398123", "body": "Ok, I'll do that, it was that I looked at SQL Server and it had something like that. But I'm doing it.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148398123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148400809", "body": "I already looked at this, I'll load the fixes!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148400809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148403017", "body": "No, why do I look at this *tablespace_name*", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148403017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148404096", "body": "Okay!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148404096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148404235", "body": "@smitpatel, I made the adjustment on all that I found! ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148404235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148404452", "body": "Now it is!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148404452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148405268", "body": "@smitpatel , Any problems using this?\r\nHere, I already deal with the primary keys and the constraints!\r\n\r\nI found this easier, and funcinal.\r\nI'm analyzing more to improve these things.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148405268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148410310", "body": "@smitpatel , I understand, I'll be doing it, to meet the standard.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/148410310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bjcull": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10171", "title": "1-1 Foreign Key Unique Constraint is missing NULL filter", "body": "When I created my model back on EFCore 1.x the unique constraint on a 1-1 foreign key had a filter so I could have multiple nulls. After upgrading to EFCore 2.x new databases are created running the exact same migrations, but they don't create the filter.\r\n\r\n### Steps to reproduce  \r\n**Create 1-1 Foreign Key**  \r\n\r\n    builder.Entity<Attempt>()\r\n        .HasOne(q => q.Dishonour)\r\n        .WithOne(v => v.Attempt)\r\n        .HasForeignKey<Attempt>(q => q.DishonourId);\r\n\r\n**Resulting Index from EFCore 1.x**\r\n![image](https://user-images.githubusercontent.com/184263/32076326-dc242f3c-ba9f-11e7-9417-3706142e9cc3.png)\r\n\r\n**Resulting Index from EFCore 2.x**\r\n![image](https://user-images.githubusercontent.com/184263/32076343-e8fe8d2e-ba9f-11e7-8205-de6736c3a27f.png)\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017\r\nSql Server: 13.0.4001\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mjohn": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10168", "title": "Complex Type causes wrong sql generation with UseRowNumberForPaging", "body": "When we target our EF Core to use on SQL Server 2008, we use UseRowNumberForPaging as a parameter for SqlServerDbContextOptionsBuilder. It works great untill we use complex type. \r\n\r\n\r\n**Exception message:** The column 'Id' was specified multiple times for 't'.\r\n**Stack trace:**   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\n   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()\r\n   at System.Data.SqlClient.SqlDataReader.get_MetaData()\r\n   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)\r\n   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, SqlDataReader ds)\r\n   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite, String method)\r\n   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at System.Data.Common.DbCommand.ExecuteReader()\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary`2 parameterValues)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(Boolean buffer)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.<_TrackEntities>d__17`2.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\r\n   at System.Collections.Generic.List`1.AddEnumerable(IEnumerable`1 enumerable)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at EFCoreBug.Program.LoadTestDataWithPaging() in c:\\users\\mehmet.kamar\\documents\\visual studio 2017\\Projects\\EFCoreBug\\EFCoreBug\\Program.cs:line 54\r\n   at EFCoreBug.Program.Main(String[] args) in c:\\users\\mehmet.kamar\\documents\\visual studio 2017\\Projects\\EFCoreBug\\EFCoreBug\\Program.cs:line 18\r\n\r\n```c#\r\n  public class Note\r\n    {\r\n        [Key]\r\n        public Guid Id { get; set; }\r\n        public string Text { get; set; }\r\n        public User User { get; set; }\r\n    }\r\n```\r\n```c#\r\n    public class User\r\n    {\r\n        public string Fullname { get; set; }\r\n        public string Email { get; set; }\r\n    }\r\n```\r\nThis method is not working as expected.\r\n```c#\r\n       static List<Note> LoadTestDataWithPaging()\r\n        {\r\n            using (NoteDbContext context = new NoteDbContext())\r\n            {\r\n                var queryableObj =  context.Note.Where(x => x.Text == \"Foo Bar\").AsQueryable();\r\n                return queryableObj.Skip(0).Take(100).ToList();\r\n            }\r\n        }\r\n```\r\nBelow is generated sql\r\n```sql\r\n  SELECT [t].[Id], [t].[Text], [t].[User_Email], [t].[User_Fullname]\r\nFROM (\r\n    SELECT [x].[Id], [x].[Text], [x].[Id], [x].[User_Email], [x].[User_Fullname], ROW_NUMBER() OVER(ORDER BY @@RowCount) AS [__RowNumber__]\r\n    FROM [Note] AS [x]\r\n    WHERE [x].[Text] = N'Foo Bar'\r\n) AS [t]\r\nWHERE ([t].[__RowNumber__] > 0) AND ([t].[__RowNumber__] <= (0 + 100))\r\n```\r\n\r\nEF Core version: 2.0.0\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10, Windows Server 2008 R2\r\nIDE: (e.g. Visual Studio 2017)\r\n\r\nI have also created a repository that produces the problem.\r\nhttps://github.com/mjohn/EFCoreBug", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "J0nKn1ght": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10167", "title": "Identity Column value after DbSet.Add is -2147482647 or similar", "body": "This has been raised in other issues (e.g. #6147 and #7743), which have been closed as 'by design', but could someone explain the rational for doing this when entities are added to a DbSet?\r\n\r\nThe scenario that is causing me a problem is the same one as reported in issue #7743.  I'm developing an ASP.Net Core MVC application, and the problem is when adding a new entity instance to the database.  The model has an int identity column, and a unique index set on one of the properties. The sequence of actions is as follows:\r\n\r\n1) An Add view is rendered with a new instance of the model, containing Id = 0.\r\n2) The model is posted back to the controller action with Id still = 0.\r\n3) The model is added to the DbSet using 'context.Set<T>().Add(model)', which updates the Id to -2147482647.\r\n4) The SaveChangesAsync fails due to a duplicate key value, and this is pushed into ModelState.\r\n5) The view is re-rendered showing the ModelState error, but now the Id control has the value -2147482647.\r\n6) The user fixes the field which contains the duplicate key value, and re-posts the page.\r\n7) The model is added to the DbSet again, as before.\r\n8) The SaveChangesAsync fails, this time with the exception 'Cannot insert explicit value for identity column in table 'XXXX' when IDENTITY_INSERT is set to OFF', because it is now apparently trying to set the identity column value to -2147482647.\r\n\r\nI don't think that this is a particularly outlandish scenario for an MVC application.  I'm using the same partial view to contain the controls for both add and edit actions, so I'd prefer not to have to put in additional code to exclude Id fields when the view is rendered for Add, rather than Edit.\r\n\r\nWhat is the recommended approach to making this work?  Do we have to navigate through the object graph for the model (which in my case contains a number of nested child collections), after the add has failed, and reset any Id field with a negative value to zero?  This functionality in the new version of EF seems very clunky to me, especially as it seems to behave differently to previous versions.\r\n\r\nI'd appreciate your advice.\r\n\r\nTechnical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Sql Server 2012 (localdb)\r\nOperating system: Windows 10 Pro\r\nIDE: Visual Studio 2017 v15.4.1\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexTeixeira": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10142", "title": "Temporary Key issue when inserting Many To Many Relationship and Self Reference", "body": "## Configuration \r\n\r\n**Asp.net core** : 2.0.0\r\n**EF core** : 2.0.0\r\n**Npgsql.EntityFrameworkCore.PostgreSQL** : 2.0.0\r\n**Npgsql.EntityFrameworkCore.PostgreSQL.Design**: 2.0.0-preview-1\r\n\r\n**OS** : macOS High Sierra 10.13\r\n\r\n## Introduction\r\n\r\nThe first investigation come from this issue : https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL/issues/252#issuecomment-338707292\r\n\r\nThe code is in a Repository because after multiple exchanges, @ajcvickers was not able to reproduce the issue.\r\n\r\n## Code\r\n\r\nhttps://github.com/AlexTeixeira/TestEfCoreManyToMany\r\n\r\n\r\n## Step to reproduce\r\n\r\nCreate the database and run the program from the git repository code.\r\n\r\n## Error\r\n\r\nWhen the `SaveChanges()` is called, it throw this error : \r\n```\r\n\r\nSystem.InvalidOperationException: The property 'UserId' on entity type 'FacebookUsersHobbies' has a temporary value. Either set a permanent value explicitly or ensure that the database is configured to generate values for this property.\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.Validate(ModificationCommand modificationCommand)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.<BatchCommands>d__8.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(Tuple`2 parameters)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(IReadOnlyList`1 entries)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IReadOnlyList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n \r\n```\r\n\r\n## Workaround\r\n\r\nCreate the user first and Insert the Id instead of the object.\r\nBut for me it's extra code for \"nothing\"\r\n\r\n## Additionnal informations\r\n\r\nI'm not sure, but it seems that when the project is created is macOs the error raise.\r\nI create a more simple project with Self Referencing & Many to Many Relationship on windows and it works.\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "denis-pujdak-adm-it": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10135", "title": "HasIndex does not work as expected", "body": "I'm trying to map something like that:\r\n```\r\n            b.HasOne(x => x.AppUser)\r\n                .WithMany()\r\n                .IsRequired();\r\n\r\n            b.HasIndex(x => x.AppUser)\r\n                .HasName(\"IX_eo_MyTable_AppUser\");\r\n```\r\nMyTable class:\r\n```\r\npublic class MyTable() {\r\n...\r\npublic virtual User AppUser { get; set; }\r\n...\r\n}\r\n```\r\n\r\nWhen I run the app I receive the following error:\r\n_One or more errors occurred. (Cannot call Property for the property 'AppUser' on entity type 'MyTable' because it is configured as a navigation property. Property can only be used to configure scalar properties.)_\r\n\r\nIt is fine when I remove the code:\r\n```\r\n            b.HasIndex(x => x.AppUser)\r\n                .HasName(\"IX_eo_MyTable_AppUser\");\r\n```\r\n\r\nCould please someone help me? Thanks.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Npgsql.EntityFrameworkCore.PostgreSQL 2.0.0\r\nOperating system: Windows 10 Pro x64 (1703)\r\nIDE: Visual Studio Community 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chadwixk": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10134", "title": "Scaffold from DB issue with default values", "body": "Describe what is not working as expected.\r\nWhen creating the model for table columns that have a default value set via a function, the scaffolding is creating incorrect syntax in the ModelCreating.\r\n\r\nIn sql server, I have a column with a \"Default Vale or Binding\" set as `dbo.Set_To_Zero`.\r\n\r\nThe resulting code created in `protected override void OnModelCreating(ModelBuilder modelBuilder)` was:\r\n\r\n`.HasDefaultValueSql(\"\r\n/****** Object:  Default dbo.Set_To_Zero    Script Date: 8/20/01 1:54:04 PM ******/\r\n\r\n/****** Object:  Default dbo.Set_To_Zero    Script Date: 8/6/01 11:18:06 AM ******/\r\n\r\nCREATE DEFAULT Set_To_Zero\r\n\\tAS 0\r\n\r\n\r\n\r\n\r\n\");`\r\n\r\n### Steps to reproduce\r\nHave a sql server column with a Default Value or Binding set to a db function. \r\nUse DB Scaffold-DbContext to have it create the models.\r\nView result in the resulting Context.cs file.\r\n\r\n### Further technical details\r\nEF Core version: (found in project.csproj or packages.config)\r\n    ```\r\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"1.1.2\" PrivateAssets=\"All\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"1.1.2\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer.Design\" Version=\"1.1.2\" PrivateAssets=\"All\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"1.1.1\" PrivateAssets=\"All\" />\r\n```\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 x64\r\nIDE: e.g. Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HristoKolev": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10128", "title": "Trying to run a query with a subquery but it throws NullReferenceException", "body": "Describe what is not working as expected.\r\n\r\nI'm trying to run a query with a subquery but it throws NullReferenceException\r\n\r\nIf you are seeing an exception, include the full exceptions details (message and stack trace).\r\n\r\n```\r\nException message: Object reference not set to an instance of an object.\r\nStack trace:   at lambda_method(Closure , QueryContext , ValueBuffer )\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ProjectionShaper.TypedProjectionShaper`3.Shape(QueryContext queryContext, ValueBuffer valueBuffer)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(Boolean buffer)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\r\n   at System.Collections.Generic.LargeArrayBuilder`1.AddRange(IEnumerable`1 items)\r\n   at System.Collections.Generic.EnumerableHelpers.ToArray[T](IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at TrackTv.Services.Data.EpisodeRepository.<GetEpisodesSummariesAsync>d__4.MoveNext() in C:\\ncs\\projects\\SourceControl\\TrackTV\\src\\TrackTv.Services\\Data\\EpisodeRepository.cs:line 26\r\n```\r\n\r\n### Steps to reproduce\r\nInclude a complete code listing (or project/solution) that we can run to reproduce the issue.\r\n\r\nPartial code listings, or multiple fragments of code, will slow down our response or cause us to push the issue back to you to provide code to reproduce the issue.\r\n\r\n```c#\r\n    try\r\n            {\r\n                var s =  this.DbContext.Shows.Where(show => showIds.Contains(show.ShowId)).Select(show => new\r\n                {\r\n                    show.ShowId,\r\n                    LastEpisodeId = show.Episodes.Where(e => e.FirstAired != null && e.FirstAired <= time).OrderByDescending(e => e.FirstAired)\r\n                                        .Select(e => e.EpisodeId).FirstOrDefault(),\r\n                    NextEpisodeId = show.Episodes.Where(e => e.FirstAired != null && e.FirstAired > time).OrderBy(e => e.FirstAired)\r\n                                        .Select(e => e.EpisodeId).FirstOrDefault(),\r\n                }).ToArray();\r\n\r\n                Console.WriteLine();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.WriteLine(e);\r\n                throw;\r\n            }\r\n\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 Enterprise\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "havotto": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10124", "title": "Filtered child entities in projection are not tracked", "body": "When child entities are filtered in a projection, these child entities are not tracked, but added to the parent's navigation collection. Also, the inverse navigation properties are not fixed up.\r\n\r\nThis issue is quite related to [issue 7131](https://github.com/aspnet/EntityFrameworkCore/issues/7131)\r\n\r\n### Steps to reproduce\r\nHere is the repo with tests for details: [Repo](https://bitbucket.org/h_otto/efcore2entitytrackingbug.git)\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.Sqlite\r\nOperating system: Win 10\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jefridev": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10122", "title": " No value provided for required parameter '_outer_Id'. v2.0.0", "body": "Error description:\r\n\r\nAfter upgrading to Entity Framework Core 2.0, It started to throw this  exception about not value provided.\r\n\r\nIf you are seeing an exception, include the full exceptions details (message and stack trace).\r\n\r\n```\r\nException message:\r\nError Message:\r\n System.InvalidOperationException : No value provided for required parameter '_outer_Idcliente'.\r\nStack Trace:\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalParameterBase.AddDbParameter(DbCommand command, IReadOnlyDictionary`2 parameterValues)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.CreateCommand(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDicti\r\nonary`2 parameterValues)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary`2 parameterValues)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(Boolean buffer)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded\r\n)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Query.QueryMethodProvider.<_InjectParameters>d__27`1.MoveNext()\r\n   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\r\n   at System.Collections.Generic.List`1.AddEnumerable(IEnumerable`1 enumerable)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at lambda_method(Closure , QueryContext , ValueBuffer )\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ProjectionShaper.TypedProjectionShaper`3.Shape(QueryContext queryContext, ValueBuffer va\r\nlueBuffer)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(Boolean buffer)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded\r\n)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n   at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source)\r\n   at lambda_method(Closure , QueryContext )\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass17_0`1.<CompileQueryCore>b__0(QueryContext qc)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\r\n   at System.Linq.Queryable.SingleOrDefault[TSource](IQueryable`1 source)\r\n   at QueryProject.Tests.UnitTest.TestQueryWithException() in C:\\Users\\Jefri Martinez\\Desktop\\Issues\\QueryProject.Tests\\UnitTest.cs:line 26\r\n   \r\n```\r\n\r\n### Steps to reproduce\r\n\r\nI've created this project with a test and scenario for creating the same issue. \r\nhttps://github.com/jefridev/IssueEntityFramework20 \r\n\r\nSteps to use this project\r\n\r\n-  Create database within ScriptsDB Folder.\r\n-  Change connection string in DbContext , QueryProject.Context.SystemContext - OnConfiguring\r\n-  Run the test project, QueryProject.Tests \r\n\r\n[Note]\r\nIt was working fine on previous version 1.1.1 but after I upgraded my project to 2.0.0 all queries similar to this one throws the \"error no value provided\"\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0.\r\nDatabase Provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nOperating system:  Windows 7 x64, Windows 10 x64, Mac OS,\r\nIDE: (Visual Studio 2017, VS Code, Rider.NET) \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "topguss": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10096", "title": "DbSet<TEntity>.Find for null values", "body": "Is there possible to remove [NotNullAttribute] from Find method in DbSet<TEntity>?\r\nIt will be more useful if we do not need to check if param is null when we call this method.\r\nThat will reduce a hundred line of code per project.\r\n \r\nIn the implementation, if at least one param is null, then immediately return null, without query execution.\r\n\r\nWe need this functionality for null-able FK.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "breyed": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10080", "title": "FormattableString overload on ExecuteSqlCommand invites subtle SQL injection vulverability", "body": "This code is safe:\r\n\r\n```c#\r\ndb.ExecuteSqlCommand($\"delete from Log where Time<{time}\");\r\n```\r\n\r\nBut this is not:\r\n\r\n```c#\r\ndb.ExecuteSqlCommand(useLogA ?\r\n    $\"delete from LogA where Time<{time}\" :\r\n    $\"delete from LogB where Time<{time}\");\r\n```\r\n\r\nLikewise, this is not:\r\n\r\n```c#\r\ndb.ExecuteSqlCommand(\r\n    $\"delete from Log \" +\r\n    $\"where Time<{time}\");\r\n```\r\n\r\nIn the first unsafe case, when two `FormattableString` operands are used with the conditional operator, the expression evaluates to a string, not another `FormattableString`. Unless you know this subtle (and I find rather unintuitive) rule, you might easily write code expecting the argument to be passed as a SQL parameter, only to find you've really dumped unsanitized user content into a SQL command.\r\n\r\nIn the second unsafe case, you're using multiple lines for readability. If you're a big C# fan, you might think C# is awesome enough to use [string literal concatenation](https://stackoverflow.com/q/288794/145173) with interpolated strings. You'll be extra disappointed when your evil hacker trim, who hates C#, thinks otherwise, and proves he's right by bringing down your site.\r\n\r\nIn both unsafe cases the implicit conversion from string to `RawSqlString` causes the unintended overload to be invoked.\r\n\r\nProposed resolution:\r\n\r\n1. Long term: Improve C# string interpolation.\r\n2. Short term: Mark the `FormattableString` overload obsolete so that a warning alerts devs to the potential danger. Create a replacement that simply has a different name from the `RawSqlString` overload, perhaps `ExecuteFormattedSqlCommand`.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vtortola": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10077", "title": "Throw on table splitting with multiple roots", "body": "When using table splitting with more than one child entity it does not work.\r\nFor example, if I have an parent entity, with two children that are configured in table splitting, it will work if I add the parent alone or the parent with only one of the children, but if I set the two children, it will throw  a `InvalidOperationException` (exception details at the end).\r\n\r\nIn the scenario below marked as [ERROR], I notice how right after calling `ctx.Set<PurchaseOrder>().Add(po);`, the property `po.Cancellation` has become `null`, which is very odd.\r\n\r\nDatabase schema was correctly generated.\r\n\r\n### Steps to reproduce\r\n#### Model\r\n```c#\r\npublic class PurchaseOrder\r\n{\r\n    public int Id { get; set; }\r\n    public string Status { get; set; }\r\n    public CancellationTicket Cancellation { get; set; }\r\n    public Customer Customer { get; set; }\r\n}\r\n\r\npublic class CancellationTicket\r\n{\r\n    public string CancelReason { get; set; }\r\n    public DateTime? CancelDate { get; set; }\r\n}\r\n\r\npublic class Customer\r\n{\r\n    public string Name { get; set; }\r\n    public string Surname { get; set; }\r\n}\r\n```\r\n#### Mapping\r\n```c#\r\nclass PurchaseOrderConfig : IEntityTypeConfiguration<PurchaseOrder>\r\n{\r\n    public void Configure(EntityTypeBuilder<PurchaseOrder> builder)\r\n    {\r\n        builder.ToTable(\"purchase_order\");\r\n        builder.HasKey(x => x.Id);\r\n        builder.Property(x => x.Id).HasColumnName(\"id\").ForSqlServerUseSequenceHiLo();\r\n        builder.Property(x => x.Status).HasColumnName(\"status\");\r\n        builder.HasOne(x => x.Cancellation).WithOne().HasForeignKey<PurchaseOrder>(x => x.Id);\r\n        builder.HasOne(x => x.Customer).WithOne().HasForeignKey<PurchaseOrder>(x => x.Id);\r\n    }\r\n}\r\n\r\nclass PurchaseOrderCancellationConfig : IEntityTypeConfiguration<CancellationTicket>\r\n{\r\n    public void Configure(EntityTypeBuilder<CancellationTicket> builder)\r\n    {\r\n        builder.ToTable(\"purchase_order\");\r\n        builder.Property(x => x.CancelReason).HasColumnName(\"cancel_reason\").HasMaxLength(500);\r\n        builder.Property(x => x.CancelDate).HasColumnName(\"cancel_date\").HasColumnType(\"datetime2\");\r\n\r\n        builder.Property<int>(\"Id\").HasColumnName(\"id\").ForSqlServerUseSequenceHiLo();\r\n        builder.HasKey(\"Id\");\r\n    }\r\n}\r\n\r\nclass CustomerConfig : IEntityTypeConfiguration<Customer>\r\n{\r\n    public void Configure(EntityTypeBuilder<Customer> builder)\r\n    {\r\n        builder.ToTable(\"purchase_order\");\r\n        builder.Property(x => x.Name).HasColumnName(\"customer_name\").HasMaxLength(100);\r\n        builder.Property(x => x.Surname).HasColumnName(\"customer_surname\").HasMaxLength(100);\r\n\r\n        builder.Property<int>(\"Id\").HasColumnName(\"id\").ForSqlServerUseSequenceHiLo();\r\n        builder.HasKey(\"Id\");\r\n    }\r\n}\r\n```\r\n#### Generated schema\r\n```sql\r\nCREATE TABLE [dbo].[purchase_order](\r\n\t[id] [int] NOT NULL,\r\n\t[cancel_date] [datetime2](7) NULL,\r\n\t[cancel_reason] [nvarchar](500) NULL,\r\n\t[customer_name] [nvarchar](100) NULL,\r\n\t[customer_surname] [nvarchar](100) NULL,\r\n\t[status] [nvarchar](max) NULL,\r\n CONSTRAINT [PK_purchase_order] PRIMARY KEY CLUSTERED \r\n(\r\n\t[id] ASC\r\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\r\nGO\r\n```\r\n### Scenarios\r\n#### [OK] Add main entity with only first child\r\n```c#\r\nvar po = new PurchaseOrder()\r\n{\r\n    Status = \"hello\",\r\n    Cancellation = new CancellationTicket()\r\n    {\r\n        CancelDate = DateTime.Now,\r\n        CancelReason = \"reason\"\r\n    }\r\n};\r\nctx.Set<PurchaseOrder>().Add(po);\r\nctx.SaveChanges();\r\n```\r\n#### [OK] Add main entity with only second child\r\n```c#\r\nvar po = new PurchaseOrder()\r\n{\r\n    Status = \"hello\",\r\n    Customer = new Customer()\r\n    {\r\n        Name = \"name2\",\r\n        Surname =\"surname2\"\r\n    }\r\n};\r\nctx.Set<PurchaseOrder>().Add(po);\r\nctx.SaveChanges();\r\n```\r\n\r\n#### [ERROR] Add main entity with both children\r\n```c#\r\nvar po = new PurchaseOrder()\r\n{\r\n    Status = \"hello3\",\r\n    Customer = new Customer()\r\n    {\r\n        Name = \"name3\",\r\n        Surname =\"surname3\"\r\n    },\r\n    Cancellation = new CancellationTicket()\r\n    {\r\n        CancelDate = DateTime.Now,\r\n        CancelReason = \"reason 3\"\r\n    }\r\n};\r\nctx.Set<PurchaseOrder>().Add(po);\r\nctx.SaveChanges();\r\n```\r\nERROR:\r\n```\r\nSystem.InvalidOperationException occurred\r\n  HResult=0x80131509\r\n  Message=The entity of 'CancellationTicket' is sharing the table 'purchase_order' with 'PurchaseOrder', but there is no entity of this type with the same key value that has been marked as 'Added'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values.\r\n  Source=<Cannot evaluate the exception source>\r\n  StackTrace:\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.ModificationCommandIdentityMap.Validate(Boolean sensitiveLoggingEnabled)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.CreateModificationCommands(IReadOnlyList`1 entries, Func`1 generateParameterName)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.<BatchCommands>d__8.MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(Tuple`2 parameters)\r\n   at Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, TState state, Func`2 operation)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(IReadOnlyList`1 entries)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IReadOnlyList`1 entriesToSave)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChanges()\r\n   at EFCoreBug.Program.Main(String[] args) in C:\\Users\\valeriano.tortola\\documents\\visual studio 2017\\Projects\\EFCoreBug\\Program.cs:line 51\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: VS 2017 15.3\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10067", "title": "Table Splitting doing redundant table join?", "body": "When using table splitting, EF Core is joining the table with itself to get the second entity field. It seems that [was not the case in EF6](http://www.c-sharpcorner.com/UploadFile/ff2f08/table-splitting-in-entity-framework-6-code-first-approach/)  (see **Select scenario**, test C).\r\n\r\nThe objective is not to load all the columns of a table each time, but group them by functionality and load them when they are going to be used.\r\n\r\nAm I doing anything wrong? Is there anything I can do better?\r\n\r\n### Steps to reproduce\r\n#### Model\r\n```c#\r\npublic class PurchaseOrder\r\n{\r\n    public int Id { get; set; }\r\n    public string Status { get; set; }\r\n    public PurchaseOrderCancellation Cancellation { get; set; }\r\n}\r\n\r\npublic class PurchaseOrderCancellation\r\n{\r\n    public string CancelReason { get; set; }\r\n    public DateTime? CancelDate { get; set; }\r\n}\r\n```\r\n#### Mapping\r\n```c#\r\nclass PurchaseOrderConfig : IEntityTypeConfiguration<PurchaseOrder>\r\n{\r\n    public void Configure(EntityTypeBuilder<PurchaseOrder> builder)\r\n    {\r\n        builder.ToTable(\"purchase_order\");\r\n        builder.HasKey(x => x.Id);\r\n        builder.Property(x => x.Id).HasColumnName(\"id\").ForSqlServerUseSequenceHiLo();\r\n        builder.Property(x => x.Status).HasColumnName(\"status\");\r\n        builder.HasOne(x => x.Cancellation).WithOne().HasForeignKey<PurchaseOrder>(x => x.Id);\r\n    }\r\n}\r\n\r\nclass PurchaseOrderCancellationConfig : IEntityTypeConfiguration<PurchaseOrderCancellation>\r\n{\r\n    public void Configure(EntityTypeBuilder<PurchaseOrderCancellation> builder)\r\n    {\r\n        builder.ToTable(\"purchase_order\");\r\n        builder.Property(x => x.CancelReason).HasColumnName(\"cancel_reason\").HasMaxLength(500);\r\n        builder.Property(x => x.CancelDate).HasColumnName(\"cancel_date\").HasColumnType(\"datetime2\");\r\n        builder.Property<int>(\"Id\").HasColumnName(\"id\").ForSqlServerUseSequenceHiLo();\r\n        builder.HasKey(\"Id\");\r\n    }\r\n}\r\n```\r\n\r\n#### Queries:\r\n##### Without include\r\n```c#\r\nvar query1 = ctx.Set<PurchaseOrder>()\r\n                .Where(x => x.Id == 1)\r\n                .ToArray();\r\n```\r\n\r\n```sql\r\nSELECT [x].[id], [x].[status]\r\nFROM [purchase_order] AS [x]\r\nWHERE [x].[id] = 1\r\n```\r\n\r\n##### With include\r\n```c#\r\nvar query2 = ctx.Set<PurchaseOrder>()\r\n                .Include(x => x.Cancellation)\r\n                .Where(x => x.Id == 1);\r\n```\r\n\r\n```sql\r\nSELECT [x].[id], [x].[status], [x.Cancellation].[id], [x.Cancellation].[cancel_date], [x.Cancellation].[cancel_reason]\r\nFROM [purchase_order] AS [x]\r\nINNER JOIN [purchase_order] AS [x.Cancellation] ON [x].[id] = [x.Cancellation].[id]\r\nWHERE [x].[id] = 1\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: VS2017 15.3", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajbeaven": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10066", "title": "Why does OnDelete action determine EntityCollection.Remove(childEntity) behavior?", "body": "I have the following relationship set up between parent and child entities:\r\n\r\n```\r\nentity.HasOne(d => d.ParentEntity)\r\n    .WithMany(p => p.ChildEntity)\r\n    .HasForeignKey(d => d.IdParentEntity)\r\n    .OnDelete(DeleteBehavior.Restrict)\r\n    .HasConstraintName(\"FK_Name\");\r\n```\r\n\r\nThe DeleteBehavior specified here is for the express purpose of avoiding cyclic cascades. In practice, when I sever the relationship between these two entities, I want to delete the EntityChild.\r\n\r\nI was a bit surprised to receive the following error when I ran the code `parentEntity.Children.Remove(child)`:\r\n\r\n> The association between entity types 'ParentEntity' and 'ChildEntity' has been severed but the foreign key for this relationship cannot be set to null. If the dependent entity should be deleted, then setup the relationship to use cascade deletes.\r\n\r\nMy understanding of the OnDelete action is that it specifies the action to take when _ParentEntity_ is deleted. ParentEntity is not being deleted in the case above, so I question why the OnDelete action has any bearing as to what occurs here.\r\n\r\nI'd like to be able to avoid cyclic cascades and still be able to delete ChildEntities via [EntityCollection.Remove(TEntity)](https://msdn.microsoft.com/en-us/library/bb337024.aspx?f=255&MSPPError=-2147217396). One alternative is to use [ObjectContext.DeleteObject(TEntity)](https://msdn.microsoft.com/en-us/library/system.data.objects.objectcontext.deleteobject.aspx) however the ChildEntity removal is occurring in a ParentEntity method (I'm encapsulating the child collection) where there should be no reference to the ObjectContext.\r\n\r\nI think it makes sense that if the foreign key for the relationship cannot be set to null that deletion occurs irrespective of the relationship's OnDelete behavior. Perhaps the current behavior is typical of how ORMs handle this sort of thing, but I figured I'd log this just in case.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dozer75": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10064", "title": "GroupBy in-memory execution must honor result retrieved by the query executed against database", "body": "When a query that uses a db function is grouped using GroupBy in linq the C# function is executed when the GroupBy is executed in-memory even if it is executed in the database query already. It should not call the db function in these scenarios and rather use the value returned by the query.\r\n\r\nThis is the LINQ statement that causes the exception. Full code is attached in zip file.\r\n\r\n```\r\ncontext.SimpleTables.Select(row => new\r\n                                   {\r\n                                       row.Id,\r\n                                       row.Val1,\r\n                                       row.Val2,\r\n                                       Sum = Functions.MySum(row.Val1, row.Val2)\r\n                                   })\r\n                     .GroupBy(row => row.Id, row => new\r\n                                                    {\r\n                                                        row.Val1,\r\n                                                        row.Val2,\r\n                                                        row.Sum\r\n                                                    })\r\n                     .ToArray();\r\n```\r\n\r\n### Steps to reproduce\r\nThe solution is in whole added to this issue. There is a database script that creates the needed data to reproduce it on SQL Server. The project is an xUnit test that will fail with the NotSupportedException that is specified in the db function definition.\r\n\r\n\r\n[EFCore21GroupByDbFunctions.zip](https://github.com/aspnet/EntityFrameworkCore/files/1381524/EFCore21GroupByDbFunctions.zip)\r\n\r\n### Further technical details\r\nEF Core version: 2.1.0-preview1-27020 (The issue is also in 2.0)\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017.3\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10064/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joesgab": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10042", "title": "Explicit loading and QueryTrackingBehavior.NoTracking not working as expected", "body": "Explicit loading of a `Reference` does not populate the navigation property when `QueryTrackingBehavior.NoTracking` is set and `AsTracking()` is used as an override.\r\n\r\nExplicit loading of a `Collection` does work as expected though.\r\n\r\n### Steps to reproduce\r\nMinimalistic example for various combinations included. The issue arises only in the last assert statement of the second using block.\r\n\r\n#### Program.cs\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace NoTrackingBug\r\n{\r\n    public class BloggingContext : DbContext\r\n    {\r\n        public DbSet<Blog> Blogs { get; set; }\r\n        public DbSet<Post> Posts { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n        {\r\n            optionsBuilder.UseSqlite(\"Data Source=blogging.db\");\r\n        }\r\n    }\r\n\r\n    public class Blog\r\n    {\r\n        public int BlogId { get; set; }\r\n        public string Url { get; set; }\r\n\r\n        public List<Post> Posts { get; set; }\r\n\r\n        public int OwnerId { get; set; }\r\n        public Person Owner { get; set; }\r\n    }\r\n\r\n    public class Post\r\n    {\r\n        public int PostId { get; set; }\r\n        public string Title { get; set; }\r\n\r\n        public int BlogId { get; set; }\r\n        public Blog Blog { get; set; }\r\n    }\r\n\r\n    public class Person\r\n    {\r\n        public int PersonId { get; set; }\r\n        public string Name { get; set; }\r\n\r\n        public List<Blog> OwnedBlogs { get; set; }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            // Setup the example\r\n            using (var db = new BloggingContext())\r\n            {\r\n                if (!db.Blogs.Any())\r\n                {\r\n                    db.Blogs.Add(new Blog\r\n                    {\r\n                        Url = \"http://blogs.msdn.com/adonet\",\r\n                        Posts = new List<Post>{\r\n                            new Post { Title = \"SomeTitle\" }\r\n                        },\r\n                        Owner = new Person\r\n                        {\r\n                            Name = \"Kobert\"\r\n                        }\r\n                    });\r\n\r\n                    db.SaveChanges();\r\n                }\r\n            }\r\n\r\n            // Explicit load and .NoTracking => does not work for References\r\n            using (var db = new BloggingContext())\r\n            {\r\n                db.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;\r\n\r\n                var blog = db.Blogs\r\n                    .AsTracking()\r\n                    .Single();\r\n\r\n                db.Entry(blog)\r\n                    .Collection(b => b.Posts)\r\n                    .Load();\r\n\r\n                db.Entry(blog)\r\n                    .Reference(b => b.Owner)\r\n                    .Load();\r\n\r\n                Debug.Assert(blog.Posts != null);\r\n                Debug.Assert(blog.Owner != null); // <== This will fail!\r\n            }\r\n\r\n            // Eager load and .NoTracking => does work\r\n            using (var db = new BloggingContext())\r\n            {\r\n                db.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;\r\n\r\n                var blog = db.Blogs\r\n                    .Include(b => b.Posts)\r\n                    .Include(b => b.Owner)\r\n                    .AsTracking()\r\n                    .Single();\r\n\r\n                Debug.Assert (blog.Posts != null);\r\n                Debug.Assert (blog.Owner != null);\r\n            }\r\n            \r\n            // Explicit load and .TrackAll => does work\r\n            using (var db = new BloggingContext())\r\n            {\r\n                var blog = db.Blogs\r\n                    .Single();\r\n\r\n                db.Entry(blog)\r\n                    .Collection(b => b.Posts)\r\n                    .Load();\r\n\r\n                db.Entry(blog)\r\n                    .Reference(b => b.Owner)\r\n                    .Load();\r\n\r\n                Debug.Assert(blog.Posts != null);\r\n                Debug.Assert(blog.Owner != null);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 1.1.0 and 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer and Micrisoft.EntityFrameworkCore.Sqlite\r\nOperating system: Windows 7 Enterprise\r\nIDE: Visual Studio 2017 Enterprise and Visual Studio Code\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scottsauber": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10036", "title": "Script output ends up in unexpected directory", "body": "I have two projects.  For simplicity lets call them Widgets.Core and Widgets.UI.  Widgets.Core is a `netstandard2` library and houses all my EF models and DbContexts, so I run my migrations from there.  Widgets.UI is my ASP.NET Core front end running on .NET Core 2.\r\n\r\nI want all my .cs migrations to go to Widgets.Core\\Data\\Migrations.  I also want to generate .sql migrations and have them go to Widgets.Core\\Data\\Migrations\\SQL.\r\n\r\nWhen I'm in the Widgets.Core project at the command land I run:\r\n`dotnet ef migrations add MigrationName --startup-project ..\\Widgets.UI\\Widgets.UI.csproj --output-dir Data\\Migrations` everything works fine\r\n\r\nWithin the same directory if I run\r\n`dotnet ef migrations script --startup-project ..\\Widgets.UI\\Widgets.UI.csproj --output Data\\Migrations\\SQL\\MigrationName.sql`\r\n\r\nThis SQL script ends up in the Widgets.UI, not Widgets.Core.  I would expect `--output-dir` in `ef migrations add` to behave the same as `--output` in `ef migrations script` and output in the my current directory, not the directory of my startup project.\r\n\r\nObviously I can just .. my way back, but would be nice if these behaved the same.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cknaap": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10031", "title": "Reset or invalidate HiLoValueGeneratorState", "body": "I have an application with a function to reset the database (SQL >=2012). In the DbContext I use sequences with UseSqlServerHiLoSequence. When I reset the sequence with a raw SQL command, and then continue with normal operations (create new records), this happens:\r\n\r\n1. Start application.\r\n2. Start inserting entities -> SqlServerSequenceHiLoValueGenerator gets a new Lo value and 'reserves' sequence values 1 - 10.\r\n3. Insert 7 entities, so sequence values 8, 9 and 10 are still available.\r\n4. Reset the sequence with a raw SQL Command.\r\n5. Create a new instance of the DbContext.\r\n6. The remaining numbers before 'Hi' (8, 9 and 10) are still available in the SqlServerSequenceGeneratorState, let's say.\r\n7. Insert 3 more entity, they get id's 8, 9 and 10.\r\n7. Insert 8 more entities.\r\n8. The SqlServerSequenceHiLoValueGenerator gets a new Lo value.\r\n9. The sequence was reset, so it gets value 1 - 10.\r\n10. When it hits nr. 8: exception - Entity with the same ID is being tracked already in the DbContext.\r\n\r\nSo I am looking for a way to invalidate the HiLoValueGeneratorState, other than restarting the application.\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017\r\nDatabase: SQL Server 2016", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Materix": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10008", "title": "Fix-up navigation property after DbContext.Remove", "body": "I have entity which can belong to many different containers (showing only two containers for clarity):\r\n\r\n```c#\r\npublic class Account \r\n{\r\n    [Key]\r\n    public int Id { get; set; }\r\n\r\n    public List<DiagramAccount> Diagrams { get; set; }\r\n\r\n    public List<OtherContainerAccount> OtherContainers { get; set; }\r\n}\r\n```\r\n\r\n```c#\r\npublic class Diagram\r\n{\r\n    [Key]\r\n    public int Id { get; set; }\r\n\r\n    public List<DiagramAccount> Accounts { get; set; }    \r\n}\r\n```\r\n\r\n```c#\r\npublic class OtherContainer\r\n{\r\n    [Key]\r\n    public int Id { get; set; }\r\n\r\n    public List<OtherContainerAccount> Accounts { get; set; }    \r\n}\r\n```\r\n\r\n```c#\r\npublic class DiagramAccount\r\n{\r\n    [Key]\r\n    public int Id { get; set; }\r\n\r\n    public Account Account { get; set; }\r\n    public int AccountId { get; set; }\r\n    public Diagram Diagram { get; set; }\r\n    public int DiagramId { get; set; }\r\n}\r\n```\r\n\r\n```c#\r\npublic class OtherContainerAccount\r\n{\r\n    [Key]\r\n    public int Id { get; set; }\r\n\r\n    public Account Account { get; set; }\r\n    public int AccountId { get; set; }\r\n    public OtherContainer OtherContainer { get; set; }\r\n    public int OtherContainerId { get; set; }\r\n}\r\n```\r\n\r\nI have to detach Account from Diagram (or from any other container) and, if it was last connection, remove that Account and then save changes to database.\r\n\r\n```c#\r\nusing (var context = _accessor.CreateContext())\r\n{\r\n    // Remove join instance\r\n    context.Remove(context.Set<DiagramAccount>().First(da => da.AccountId == accountId && da.DiagramId == diagramId));\r\n\r\n    // Get instance of account without explicity loading DiagramAccount\r\n    var account = context.Set<Account>().First(a => a.Id == accountId);\r\n    // context.SaveChanges(); // I do not want to save it here due to operation consistency\r\n\r\n    // ... other steps\r\n}\r\n```\r\n\r\nAfter getting account from db in account.Diagrams is the same instance of DiagramAccount which was removed in the first line (due to automatic fix-up navigation properties). The account.Diagrams should be empty because the instance of DiagramAccount is actually marked as removed (and it is actually the only one loaded instance of DiagramAccount). Instead of this it contains this removed DiagramAccount instance). After context.SaveChanges() invocation (commented line), account.Diagrams is empty (and this is ok).\r\n\r\nIs there possibility to refresh collection in tracked entity without calling SaveChanges or explicitly removing removed DiagramAccount instance from that collection? \r\nShouldn't it match in memory state of data automatically?\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nTarget Framework: net461\r\nDatabase Provider: Microsoft.EntityFrameworkCore.Sqlite (for unit test)\r\nOperating system: Window 10\r\nIDE: VS2017 15.3", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/10008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "graemeenglish": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9993", "title": "Script-Migration -Idempotent when default schema contains dot", "body": "The generated script fails to run giving the following\r\n\r\n> There is already an object named '__EFMigrationsHistory' in the database.\r\n### Steps to reproduce\r\nConfigure the database with a default schema e.g.\r\n```c#\r\noptions.ConfigureDbContext = builder =>\r\n    builder.UseSqlServer(connectionString, sql =>\r\n        {\r\n            sql.MigrationsAssembly(migrationsAssembly);\r\n            sql.MigrationsHistoryTable(HistoryRepository.DefaultTableName, \"myapp.cfg\");\r\n        }\r\n    );\r\noptions.DefaultSchema = \"myapp.cfg\";\r\n```\r\nIn PMC\r\nScript-Migration -Idempotent\r\n\r\nresults in the following \r\n```SQL\r\nIF OBJECT_ID(N'myapp.cfg.__EFMigrationsHistory') IS NULL\r\nBEGIN\r\n    IF SCHEMA_ID(N'myapp.cfg') IS NULL EXEC(N'CREATE SCHEMA [myapp.cfg];');\r\n    CREATE TABLE [myapp.cfg].[__EFMigrationsHistory] (\r\n        [MigrationId] nvarchar(150) NOT NULL,\r\n        [ProductVersion] nvarchar(32) NOT NULL,\r\n        CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])\r\n    );\r\nEND;\r\n```\r\nModifying the first line to the following resolves the problem:\r\n```SQL\r\nIF OBJECT_ID(N'[idsvr.cfg].__EFMigrationsHistory') IS NULL\r\n```\r\n\r\n\r\n### Further technical details\r\nEF Core version: Microsoft.EntityFrameworkCore (2.0.0)\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: \r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "giggio": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9984", "title": "FileLoadException when migrating with incorrect startup project and and project", "body": "I ran on PowerShell:\r\n\r\n````powershell\r\n dotnet ef migrations add  --startup-project $startupDir --project $projectDir Update -c $dbContext -o .\\Migrations\\\r\n````\r\n\r\nWith `$startupDir` and `$projectDir` set to incorrect directories and I got a not very helpful exception and nothing else.\r\n\r\n```\r\nException message: Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\nStack trace: N/A\r\n```\r\n\r\n### Further technical details\r\n\r\nI had both `$startupDir` and `$projectDir` pointed to a similar project, but outside the project where I was running the command. I actually created a git worktree for a different branch in a different directory and was pointing to the original directory.\r\n\r\nEF should had told me something was wrong. I need a better error message. I am fine with it erroring, but point me to the right direction.\r\n\r\nAs soon as I fixed both variables everything worked.\r\n\r\n````\r\n$ dotnet --version\r\n2.0.0\r\n$ dotnet ef --version\r\nEntity Framework Core .NET Command Line Tools\r\n2.0.0-rtm-26452\r\n````\r\n\r\nEvery package is at `2.0.0` version. This is all under .NET Core 2 as well.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pariesz": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9962", "title": "Adding multiple entities to a join table with a composite key throws", "body": "Note: The exception doesn't occur if both if both properties in the composite key are different.\r\n\r\n```\r\nException message:\r\nSystem.ArgumentNullException : Value cannot be null.\r\nParameter name: key\r\n\r\nStack trace:\r\n   at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\r\n   at System.Collections.Generic.Dictionary`2.Remove(TKey key)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Remove(TKey key, InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Remove(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking(InternalEntityEntry entry)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.ConditionallyNullForeignKeyProperties(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.ToDependentFixup(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.InitialFixup(InternalEntityEntry entry, ISet`1 handledForeignKeys, Boolean fromQuery)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.StateChanged(InternalEntityEntry entry, EntityState oldState, Boolean fromQuery)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState entityState, Boolean forceStateWhenUnknownKey)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState(InternalEntityEntry entry, EntityState entityState)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)\r\n   at Microsoft.EntityFrameworkCore.DbContext.Add[TEntity](TEntity entity)\r\n   at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Add(TEntity entity)\r\n   at Tests.EntityFrameworkBug.Composite_Key_bug() in C:\\Sites\\CentralApi\\Services\\Core.Tests\\EntityFrameworkBug.cs:line 19\r\n```\r\n\r\n### Steps to reproduce\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Xunit;\r\n\r\nnamespace Tests {\r\n    public class EntityFrameworkBug {\r\n        [Fact]\r\n        public void Composite_Key_bug() {\r\n            var opts = new DbContextOptionsBuilder<TestContext>().UseInMemoryDatabase(\"test\").Options;\r\n            using(var db = new TestContext(opts)) {\r\n                var a = new AEntity();\r\n                db.AEntities.Add(a);\r\n\r\n                var b1 = new BEntity();\r\n                var b2 = new BEntity();\r\n                db.BEntities.AddRange(b1, b2);\r\n                db.SaveChanges();\r\n\r\n                db.EntityJoins.Add(new JoinEntity { EntityA = a, EntityB = b1 });\r\n                db.EntityJoins.Add(new JoinEntity { EntityA = a, EntityB = b2 });\r\n            }\r\n        }\r\n\r\n        public class AEntity {\r\n            public int Id { get; set; }\r\n        }\r\n        public class BEntity {\r\n            public int Id { get; set; }\r\n        }\r\n        public class JoinEntity {\r\n            public int EntityAId { get; set; }\r\n            public int EntityBId { get; set; }\r\n            public virtual AEntity EntityA { get; set; }\r\n            public virtual BEntity EntityB { get; set; }\r\n        }\r\n        public class TestContext : DbContext {\r\n            public DbSet<AEntity> AEntities { get; set; }\r\n            public DbSet<BEntity> BEntities { get; set; }\r\n            public DbSet<JoinEntity> EntityJoins { get; set; }\r\n\r\n            public TestContext(DbContextOptions<TestContext> options) : base(options) { }\r\n\r\n            protected override void OnModelCreating(ModelBuilder builder) {\r\n                builder\r\n                    .Entity<AEntity>(c => { c.HasKey(x => x.Id); })\r\n                    .Entity<BEntity>(c => { c.HasKey(x => x.Id); })\r\n                    .Entity<JoinEntity>(c => {\r\n                        c.HasKey(x => new { x.EntityAId, x.EntityBId });\r\n                        c.HasOne(x => x.EntityA).WithOne().HasForeignKey<JoinEntity>(x => x.EntityAId);\r\n                        c.HasOne(x => x.EntityB).WithOne().HasForeignKey<JoinEntity>(x => x.EntityBId);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: In Memory\r\nOperating system: Windows 10 Pro\r\nIDE: Visual Studio Community 2017 Version 15.3.5\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarekLani": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9950", "title": "EF Core 2.0 Scaffold-DbContext null reference", "body": "Hi I am trying to generate model form existing DB in ASP.NET Core 2.0 project with EF 2.0 tooling. After running command below I am getting null reference exception. \r\nScaffold-DbContext \"Server=tcp:mysqlserveraddress,1433;Initial Catalog=mydb;Persist Security Info=False;User ID=user;Password=pass;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;\" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models\r\n\r\nI was following these instructions, while I have used 2.0 tooling: https://ef.readthedocs.io/en/staging/platforms/aspnetcore/existing-db.html \r\n\r\n```\r\nException message: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. \r\nStack trace:\r\n---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.ScaffoldContext..ctor(OperationExecutor executor, Object resultHandler, IDictionary args)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, StackCrawlMark& stackMark)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Activator.CreateInstance(String assemblyString, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, Evidence securityInfo, StackCrawlMark& stackMark)\r\n   at System.Activator.CreateInstance(String assemblyName, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.AppDomain.CreateInstance(String assemblyName, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.AppDomain.CreateInstance(String assemblyName, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at Microsoft.EntityFrameworkCore.Tools.AppDomainOperationExecutor.Execute(String operationName, Object resultHandler, IDictionary arguments)\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid4[T0,T1,T2,T3](CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3)\r\n   at Microsoft.EntityFrameworkCore.Tools.OperationExecutorBase.InvokeOperationImpl(String operationName, IDictionary arguments)\r\n   at Microsoft.EntityFrameworkCore.Tools.OperationExecutorBase.ScaffoldContext(String provider, String connectionString, String outputDir, String dbContextClassName, IEnumerable`1 schemaFilters, IEnumerable`1 tableFilters, Boolean useDataAnnotations, Boolean overwriteFiles)\r\n   at Microsoft.EntityFrameworkCore.Tools.Commands.DbContextScaffoldCommand.Execute()\r\n   at Microsoft.DotNet.Cli.CommandLine.CommandLineApplication.Execute(String[] args)\r\n   at Microsoft.EntityFrameworkCore.Tools.Program.Main(String[] args)\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows\r\nIDE: Visual Studio 2017 Preview 2\r\n\r\nThank you for help in advance.\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9950/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JonPSmith": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9947", "title": "Question: How to replace a service in EF 2.0.0", "body": "I'm trying to create an example of replacing a service inside EF Core as shown in a [Channel 9 video by Rowan Miller](https://channel9.msdn.com/Shows/On-NET/Rowan-Miller-Entity-Framework-Core-11) starting at 45 minutes in.\r\n\r\nMy example (see below) doesn't work. And I can confirm that the constructor is not called, nor the overriden method are called, as my break points are never triggered. Can you tell me what I am doing wrong.\r\n\r\n### Steps to reproduce\r\nHere is one of the versions I have tried (I have tried a few permutations and none work).\r\n\r\nHere is the unit test, with the new `CustomSqlServerTypeMapper `\r\n```c#\r\npublic class CustomSqlServerTypeMapper : SqlServerTypeMapper\r\n{\r\n    public CustomSqlServerTypeMapper(RelationalTypeMapperDependencies dependencies) \r\n        : base(dependencies) {}\r\n\r\n    public override RelationalTypeMapping FindMapping(IProperty property)\r\n    {\r\n        var currentMapping = base.FindMapping(property);\r\n        if (property.ClrType == typeof(string) && property.Name.EndsWith(\"Ascii\"))\r\n            return new StringTypeMapping(currentMapping.StoreType, \r\n                currentMapping.DbType, true, currentMapping.Size);\r\n\r\n        return currentMapping;\r\n    }\r\n\r\n    public override RelationalTypeMapping FindMapping(string storeType)\r\n    {\r\n        return base.FindMapping(storeType);\r\n    }\r\n}\r\n\r\n[Fact]\r\npublic void ReplaceTypeMapperOk()\r\n{\r\n    //SETUP\r\n    var connectionString = AppConstants.ConnectionString;\r\n    var optionsBuilder = new DbContextOptionsBuilder<TestDbContext>();\r\n    optionsBuilder.UseSqlServer(connectionString);\r\n    optionsBuilder.ReplaceService<SqlServerTypeMapper, CustomSqlServerTypeMapper>();\r\n\r\n    using (var context = new TestDbContext(optionsBuilder.Options))\r\n    {\r\n        context.Database.EnsureDeleted();\r\n        context.Database.EnsureCreated();\r\n\r\n        //ATTEMPT \r\n        var entity = context.Model.FindEntityType(typeof(ScalarEntity));\r\n        var mapInfo1 = entity.GetProperty(nameof(ScalarEntity.StringAscii));\r\n\r\n        //VERIFY\r\n        mapInfo1.ClrType.ShouldEqual(typeof(string));\r\n        mapInfo1.IsUnicode().ShouldEqual(false);\r\n\r\n    }\r\n}\r\n```\r\nMy entity class is\r\n```c#\r\npublic class ScalarEntity\r\n{\r\n    public int Id { get; set; }\r\n\r\n    public string StringMax { get; set; }\r\n\r\n    [Required]\r\n    [MaxLength(20)]\r\n    public string String20 { get; set; }\r\n\r\n    public string StringAscii { get; set; }\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: VS2017 15.3\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kbilsted": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9920", "title": "nullreference when during add-migration when migration implementations lack migration attribute", "body": "if you implement a migration hook and forgetting the attribute. Then call `add-migration foo`\r\n\r\n\r\nIf you are seeing an exception, include the full exceptions details (message and stack trace).\r\n\r\n```\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: key\r\n   at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\r\n   at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\r\n   at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)\r\n   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)\r\n   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector)\r\n   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly.<>c__DisplayClass3_0.<.ctor>b__0()\r\n   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()\r\n   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly.get_Migrations()\r\n   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly.FindMigrationId(String nameOrId)\r\n   at Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsScaffolder.ScaffoldMigration(String migrationName, String rootNamespace, String subNamespace)\r\n   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigrationImpl(String name, String outputDir, String contextType)\r\n\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n\r\n```\r\n    [DbContext(typeof(CustomerContext))]\r\n    //[Migration(\"Custom migrations\")]\r\n    class MigrationHook : Migration\r\n    {\r\n        protected override void Up(MigrationBuilder migrationBuilder)\r\n        {\r\n        }\r\n    }\r\n}\r\n``` \r\n\r\n\r\n### Further technical details\r\n\r\nThe problem *is* the below code from `MigrationsAssembly.cs` using `?.` not realizing that you cannot use null as a key. The error message should *not* be nullreferenceexception, but rather that the implementor forgot to apply an attribute.\r\n\r\nSimilarly, if using the attribute, and forgetting the subclassing, and error should be show. This is not the case now where only subclasses are investigated\r\n\r\n\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/888b188731264cf2cebee16ce5a9ad4e65fe6f8c/src/EFCore.Relational/Migrations/Internal/MigrationsAssembly.cs\r\n\r\n    _migrations = new LazyRef<IReadOnlyDictionary<string, TypeInfo>>(\r\n                () => (\r\n                        from t in Assembly.GetConstructableTypes()\r\n                        where t.IsSubclassOf(typeof(Migration))\r\n                              && t.GetCustomAttribute<DbContextAttribute>()?.ContextType == contextType\r\n                        let id = t.GetCustomAttribute<MigrationAttribute>()?.Id\r\n                        orderby id\r\n                        select new { Key = id, Element = t })\r\n                    .ToDictionary(i => i.Key, i => i.Element));\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sir-boformer": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9906", "title": "Use C# structs or classes as value objects", "body": "I was really looking forward to the new Owned Entities feature until I found out that struct types are not supported.\r\n\r\nCommon examples of struct types:\r\n```c#\r\nstruct Vector3 {\r\n    float X { get; set; }\r\n    float Y { get; set; }\r\n    float Z { get; set; }\r\n}\r\n\r\nstruct TimeRange {\r\n    DateTime StartTime { get; set; }\r\n    DateTime EndTime { get; set; }\r\n}\r\n\r\nstruct Date {\r\n    private readonly DateTime _dt;\r\n\r\n    public UtcDate(int year, int month, int day)\r\n    {\r\n        _dt = new DateTime(year, month, day, 0, 0, 0, DateTimeKind.Utc);\r\n    }\r\n    ...\r\n}\r\n```\r\nSimilar Struct Types in third party libraries: [corefxlab](https://github.com/dotnet/corefxlab/blob/master/src/System.Time/System/Date.cs) [NodaTime](https://github.com/nodatime/nodatime/blob/master/src/NodaTime/LocalDate.cs)\r\n\r\nI would like to use these struct types in my entities:\r\n\r\n```c#\r\nclass Event {\r\n    string Name { get;set; }\r\n    TimeRange TimeRange { get; set; }\r\n}\r\n\r\nclass BankHoliday {\r\n    string Name { get;set; }\r\n    Date Date { get; set; }\r\n}\r\n\r\nmodelBuilder.Entity<Event>().OwnsOne(e => e.TimeRange);\r\nmodelBuilder.Entity<BankHoliday>().OwnsOne(e => e.Date);\r\n```\r\n\r\nso that the generated tables look like these:\r\n```\r\nEvent [Name, TimeRange_StartTime, TimeRange_EndTime]\r\nBankHoliday [Name, Date_dt]\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9906/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "myshon": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9902", "title": "Wrong migration when foreign key property belong to base class", "body": "I have following classes (important notice `Parent` inherits `ParentBase`)\r\n\r\n```C#\r\npublic class ParentBase\r\n{\r\n    public Guid ChildId { get; private set; }\r\n\r\n    public ParentBase(Guid childId)\r\n    {\r\n        ChildId = childId;\r\n    }\r\n}\r\n\r\npublic class Parent : ParentBase\r\n{\r\n    public Guid Id { get; private set; }\r\n    \r\n    public string Code { get; private set; }\r\n\r\n    public Parent(Guid id, string code, Guid childId) \r\n\t\t: base(childId)\r\n    {\r\n        Id = id;\r\n        Code = code;\r\n    }\r\n}\r\n\r\npublic class Child\r\n{\r\n    public Guid Id { get; private set; }\r\n\r\n    public Child(Guid id)\r\n    {\r\n        Id = id;\r\n    }\r\n}\r\n```\r\nand following mapping configuration \r\n```C#\r\nmodelBuilder.Entity<Parent>(b =>\r\n{\r\n    b.HasKey(e => e.Id);\r\n    b.HasOne<Child>().WithMany().HasForeignKey(x => x.ChildId).IsRequired();\r\n});\r\n```\r\nWhen I add migration then it generates: \r\n\r\n## Actual result\r\n```C#\r\nmigrationBuilder.CreateTable(\r\n    name: \"Parent\",\r\n    schema: \"Test\",\r\n    columns: table => new\r\n    {\r\n        Id = table.Column<Guid>(type: \"uuid\", nullable: false),\r\n        ChildId = table.Column<Guid>(type: \"uuid\", nullable: false),\r\n        ChildId1 = table.Column<Guid>(type: \"uuid\", nullable: true),\r\n        Code = table.Column<string>(type: \"text\", nullable: true)\r\n    },\r\n    constraints: table =>\r\n    {\r\n        table.PrimaryKey(\"PK_Parent\", x => x.Id);\r\n        table.ForeignKey(\r\n            name: \"FK_Parent_Child_ChildId\",\r\n            column: x => x.ChildId,\r\n            principalSchema: \"Test\",\r\n            principalTable: \"Child\",\r\n            principalColumn: \"Id\",\r\n            onDelete: ReferentialAction.Cascade);\r\n        table.ForeignKey(\r\n            name: \"FK_Parent_Child_ChildId1\",\r\n            column: x => x.ChildId1,\r\n            principalSchema: \"Test\",\r\n            principalTable: \"Child\",\r\n            principalColumn: \"Id\",\r\n            onDelete: ReferentialAction.Restrict);\r\n    });\r\n```\r\n\r\nAs you see, there is additional nullable column  `ChildId1` which is wrong. When I remove `ParentBase` and move properties `ChildId` to `Parent` class then it generates correct migration as excepted result. \r\n\r\n## Expected result\r\n```C#\r\nmigrationBuilder.CreateTable(\r\n    name: \"Parent\",\r\n    schema: \"Test\",\r\n    columns: table => new\r\n    {\r\n        Id = table.Column<Guid>(type: \"uuid\", nullable: false),\r\n        ChildId = table.Column<Guid>(type: \"uuid\", nullable: false),\r\n        Code = table.Column<string>(type: \"text\", nullable: true)\r\n    },\r\n    constraints: table =>\r\n    {\r\n        table.PrimaryKey(\"PK_Parent\", x => x.Id);\r\n        table.ForeignKey(\r\n            name: \"FK_Parent_Child_ChildId\",\r\n            column: x => x.ChildId,\r\n            principalSchema: \"Test\",\r\n            principalTable: \"Child\",\r\n            principalColumn: \"Id\",\r\n            onDelete: ReferentialAction.Cascade);\r\n    });\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Npgsql.EntityFrameworkCore.PostgresSQL 2.0.0\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grahamehorner": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9895", "title": "ServiceFabric", "body": "Please consider creating an in memory provider for ServiceFabric using Reliable Collections\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danobri": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9882", "title": "Support for ExecuteScalar", "body": "AFAIK the only way to call a stored procedure that returns a scalar value is to use the underlying ADO.Net API like this:\r\n\r\n```c#\r\nusing (var connection = context.Database.GetDbConnection())\r\n{\r\n  connection.Open();\r\n\r\n  using (var command = connection.CreateCommand())\r\n  {\r\n    command.CommandType = CommandType.StoredProcedure;\r\n    command.CommandText = \"SomeStoredProc\";\r\n\r\n    return command.ExecuteScalar();\r\n  }\r\n}\r\n```\r\n\r\nAlternatively, the stored procedure can be written to use an output parameter, and can then be called using the context.Database.ExecuteSqlCommand function, but that feels unnecessarily complicated, and requires existing procedures to be re-written.\r\n\r\nIs there any reason the EF Core team has chosen not to include ExecuteScalar / ExecuteScalarAsync methods on the context.Database object?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9882/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ManuelHaas": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9856", "title": "Incrorrect EntityState in ChangeTracker when assigning RowVersion directly", "body": "When assigning the RowVersion property by using the setter method of the OriginalValue property the state of the database entity changes from 'Unchanged' to 'Modified' even if the RowVersion property has not been changed.\r\n`var entryVersion = db.Entry(dbEntry).Property(u => u.RowVersion);`\r\n`entryVersion.OriginalValue = data.RowVersion;`\r\n\r\nIn the above example the state of dbEntry always changes to 'Modified' even if the assigned RowVersion property holds the same byte value.\r\n\r\nAm I doing something wrong? Is there another way of checking for concurrency that would be suggested instead of the above or is this a bug?\r\n\r\nEF Core version: 2.0.0\r\nDatabase Provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nOperating system: Windows 10\r\nIDE: (Visual Studio 2017 (15.3.5))\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mbashov": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9848", "title": "Queryable.Cast<T?> causes ArgumentException", "body": "Materializing a query containing a Cast method fails on EntityFramework Core 2.0.0 with ArgumentException:\r\n\r\n```\r\ncontext.Set<Simple>().Select(s => s.Id).Cast<int?>().FirstOrDefault();\r\n\r\npublic class Simple\r\n{\r\n    public int Id { get; set; }\r\n}\r\n```\r\n\r\n```\r\nException message: \r\nExpression of type 'System.Collections.Generic.IEnumerable`1[System.Int32]' cannot be used for return type 'System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]]'\r\n\r\nStack trace:\r\n   at System.Linq.Expressions.Expression.ValidateLambdaArgs(Type delegateType, Expression& body, ReadOnlyCollection`1 parameters)\r\n   at System.Linq.Expressions.Expression.Lambda[TDelegate](Expression body, String name, Boolean tailCall, IEnumerable`1 parameters)\r\n   at System.Linq.Expressions.Expression.Lambda[TDelegate](Expression body, Boolean tailCall, IEnumerable`1 parameters)\r\n   at System.Linq.Expressions.Expression.Lambda[TDelegate](Expression body, ParameterExpression[] parameters)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda[TResults]()\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass15_0`1.<Execute>b__0()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\r\n   at System.Linq.Queryable.FirstOrDefault[TSource](IQueryable`1 source)\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "footedr": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9841", "title": "EF Core 2 Migrations in VSTS CD Release", "body": "Attempting to execute the following batch script that runs an EF Core 2 migration against published code in a VSTS continuous delivery release (adapted from Ben Day's article located here:  https://www.benday.com/2017/03/17/deploy-entity-framework-core-migrations-from-a-dll/).\r\n\r\n`set EfMigrationsNamespace=%1\r\nset EfMigrationsDllName=%2.dll\r\nset EfMigrationsDllDepsJson=%2.deps.json\r\nset DllDir=%cd%\r\nset PathToNuGetPackages=%USERPROFILE%\\.nuget\\packages\r\nset NuGetFallbackFolder=\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\"\r\nset PathToEfDll=\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.tools.dotnet\\2.0.0\\tools\\netcoreapp2.0\\ef.dll\"\r\n\r\ndotnet exec --depsfile .\\%EfMigrationsDllDepsJson% --additionalprobingpath %PathToNuGetPackages% --additionalprobingpath %NuGetFallbackFolder% %PathToEfDll% database update --assembly .\\%EfMigrationsDllName% --startup-assembly .\\%EfMigrationsDllName% --project-dir . --data-dir %DllDir% --verbose --root-namespace %EfMigrationsNamespace%`\r\n\r\nThis works locally, but fails in the hosted agent because it cannot find the location of %PathtoEfDll%. Where can I reliably locate the ef.dll on the hosted vs2017 build agent?\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Oleksandr-Tokmakov": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9836", "title": "Migrator with multiple schemas throws Database already exists.", "body": "Hi. I'm trying to use schema per tenant approach in sql database. I override multiple services... and it almost works. I can create tables with different schemas, migrations works.\r\nBut when I created set of tables for tenant A and I tried to create another set of tables under another schema for tenant B I got exception:\r\n```\r\nException message: SqlException: Database 'name' already exists. Choose a different database name.\r\nStack trace:\r\nSystem.Data.SqlClient.SqlConnection.OnError(SqlException exception, bool breakConnection, Action<Action> wrapCloseInAction)\r\nSystem.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, bool breakConnection, Action<Action> wrapCloseInAction)\r\nSystem.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, bool callerHasConnectionLock, bool asyncClose)\r\nSystem.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, out bool dataReady)\r\nSystem.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(string methodName, bool async, int timeout, bool asyncWrite)\r\nSystem.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource<object> completion, string methodName, bool sendToPipe, int timeout, out bool usedCache, bool asyncWrite, bool inRetry)\r\nSystem.Data.SqlClient.SqlCommand.ExecuteNonQuery()\r\nMicrosoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.Execute(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary<string, object> parameterValues)\r\nMicrosoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary<string, object> parameterValues)\r\nMicrosoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary<string, object> parameterValues)\r\nMicrosoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(IEnumerable<MigrationCommand> migrationCommands, IRelationalConnection connection)\r\nMicrosoft.EntityFrameworkCore.Storage.Internal.SqlServerDatabaseCreator.Create()\r\nMicrosoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(string targetMigration)\r\nMicrosoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate(DatabaseFacade databaseFacade)\r\n```\r\nI downloaded source from git hub and did small investigation. In Migrator class of Microsoft.EntityFrameworkCore.Migrations.Internal namespace there is a method:\r\npublic virtual void Migrate(string targetMigration = null)\r\nand it has following lines:\r\n```\r\n_logger.MigrateUsingConnection(this, _connection);\r\n\r\n            if (!_historyRepository.Exists())\r\n            {\r\n                if (!_databaseCreator.Exists())\r\n                {\r\n                    _databaseCreator.Create();\r\n                }\r\n\r\n                var command = _rawSqlCommandBuilder.Build(_historyRepository.GetCreateScript());\r\n\r\n                command.ExecuteNonQuery(_connection);\r\n            }\r\n\r\n            var commandLists = GetMigrationCommandLists(_historyRepository.GetAppliedMigrations(), targetMigration);\r\n            foreach (var commandList in commandLists)\r\n            {\r\n                _migrationCommandExecutor.ExecuteNonQuery(commandList(), _connection);\r\n            }\r\n```\r\nI thought the problem in this place because it calls _databaseCreator.Create();. When I try to execute migrations for second tenant(new schema) it checks is history table exists and it returns false because for current schema there is no history tables. Next it checks for existence of database. And I'd like to think that it's source of the issue but looking at stack trace it's more likely that it's _migrationCommandExecutor.ExecuteNonQuery(commandList(), _connection);\r\n\r\nGetMigrationCommandLists get's migrations from IMigrationsAssembly implementation. In my IMigrationsAssembly service there are only 3 migrations. It might be it tries to create db from model snapshot. I don't know. \r\nIt looks that I'm very close to make it working but I need help here.\r\n\r\nSo why EF tries to create db when I change schema and try to apply migrations?\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: windows 10 pro\r\nIDE: Visual Studio 2017", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xoro91": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9835", "title": "DbContext.SaveChanges() doesn't work after DbContext.Dbset<T>.Add(Entity) InvalidOperationException", "body": "I have a simple model named Person that has ID (PK) , Name and Surname properties wich are combined AlternateKey. \r\nThere is one record in database Id=1, Name=\"John\" Surname=\"Smith\"\r\nAfter creating and loading whole data by DBSet.Load()\r\ni'm trying to add a new person in DbSet with Name=\"John\", Surname=\"Smith\" (wich cause uniqe conflit) with DbSet.Add(Person) and getting a InvalidOperation Exception, After, i'm removing entity from context by DBContext.DbSet.Remove(Person) and adding another Person with Name=\"aaa\" Surname=\"bbb\" and do SaveChanges() and get 0 for result and no exception. \r\n**Question: WHY those operations doesn't add second added Person to database.**\r\n\r\n\r\nException message when adding unique name,surname pair to DbSet: \"The instance of entity type 'Customer' cannot be tracked because another instance with the same key value for {'Name', 'Surname'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.\"\r\n\r\nStack trace:\r\n\"   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)\\r\\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableKeyIdentityMap`1.Add(InternalEntityEntry entry)\\r\\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)\\r\\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges)\\r\\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey)\\r\\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node)\\r\\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode)\\r\\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState entityState, Boolean forceStateWhenUnknownKey)\\r\\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState(InternalEntityEntry entry, EntityState entityState)\\r\\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)\\r\\n   at Microsoft.EntityFrameworkCore.DbContext.Add[TEntity](TEntity entity)\\r\\n   at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.Add(TEntity entity)\\r\\n   at Store.MainForm.button1_Click_1(Object sender, EventArgs e) in line 232\"\r\n\r\n\r\nc#\r\n\r\n``` C#\r\n public class Person\r\n    {\r\n        public int Id { get; set; }\r\n        public string Name { get; set; }\r\n        public string Surname { get; set; }\r\n    }\r\n    public class PersonConfiguratinon : IEntityTypeConfiguration<Person>\r\n   {\r\n        public void Configure(EntityTypeBuilder<Person> builder)\r\n        {\r\n           builder.HasKey(p => p.Id);\r\n           builder.Property(p => p.Name).IsRequired().HasMaxLength(200);\r\n          builder.Property(p => p.Name).IsRequired(false).HasMaxLength(200);\r\n       }\r\n    }\r\n    public class StoreContext : DbContext\r\n    {\r\n        public virtual DbSet<Person> People { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n           {\r\n  \r\n             optionsBuilder.UseSqlServer(ConfigurationManager\r\n                            .ConnectionStrings[\"StoreContext\"].ConnectionString);\r\n            optionsBuilder.ConfigureWarnings(warnings => warnings\r\n                              .Throw(new EventId[]\r\n                                  {\r\n                                       CoreEventId.IncludeIgnoredWarning,\r\n                                       RelationalEventId.QueryClientEvaluationWarning\r\n                                  }));\r\n           }\r\n\r\n            protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n                   {\r\n                       modelBuilder.ApplyConfiguration(new PersonConfiguratinon());\r\n                       modelBuilder.Entity<Person>().HasAlternateKey(c => new { c.Name, c.Surname });\r\n                   }\r\n}\r\n```\r\nCode\r\n``` C#\r\n using (StoreContext context = new StoreContext())\r\n            {\r\n                Person person = new Person\r\n                {\r\n                    Name = \"John\",\r\n                    Surname = \"Smith\",\r\n                };\r\n                context.People.Add(person);\r\n                context.SaveChanges();\r\n            }\r\n            using (StoreContext context = new StoreContext())\r\n            {\r\n                \r\n                context.People.Load();\r\n                Person person = new Person\r\n                {\r\n                    Name = \"John\",\r\n                    Surname = \"Smith\",\r\n                };\r\n\r\n                try\r\n                {\r\n                    context.People.Add(person);\r\n                }\r\n                catch (Exception)\r\n                { \r\n                   //Exception because of unique Name and Surname\r\n                    context.People.Remove(person);\r\n                }\r\n                var anotherPerson = new Person\r\n                {\r\n                    Name = \"aaa\",\r\n                    Surname = \"bbb\",\r\n                };\r\n                context.People.Add(anotherPerson);\r\n                int i = context.SaveChanges(); // i=0 fater SaveChanges()\r\n            }\r\n```\r\ntechnical details\r\nEF Core version: Microsoft.EntityFrameworkCore\" version=\"2.0.0\" targetFramework=\"net47\"\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10 x64\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shytikov": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9817", "title": "EF generates very unclear error message in case too generic key types in M:M relationship", "body": "I have `many-to-many` relationship entity that accidentally got property of type `object`. This happened by accident \u2014 during automatic creation of the property by Visual Studio. Later that property was set as a key by `FluentAPI`.\r\n\r\nDuring start-up my application ensures that database created, and as soon it reaches that place \u2014 following exception fired:\r\n\r\n```\r\nException message: The property 'Sprint.TempId' is of type 'object' which is not supported by current database provider. Either change the property CLR type or ignore the property using the '[NotMapped]' attribute or by using 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.\r\nStack trace:    at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.PropertyMappingValidationConvention.Apply(InternalModelBuilder modelBuilder)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.ImmediateConventionScope.OnModelBuilt(InternalModelBuilder modelBuilder)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher.OnModelBuilt(InternalModelBuilder modelBuilder)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.Model.Validate()\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Validate()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass22_0.<RealizeService>b__0(ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_InternalServiceProvider()\r\n   at Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService[TService](IInfrastructure`1 accessor)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.get_DatabaseCreator()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated()\r\n   at Web.Startup.ConfigureServices(IServiceCollection services)\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n1. Create 2 entities. In my case `Issue` and `Sprint`;\r\n1. Create N:N relation entity. In my case `IssueSprint`;\r\n1. Set type of a property to `object`. In my case `SprintId`;\r\n1. Use that property as key by FluentAPI;\r\n1. Try to create database;\r\n\r\nFrom `N:N` relation entity:\r\n```c#\r\npublic class IssueSprint\r\n    {\r\n        #region Public Constructors\r\n\r\n        public IssueSprint(Issue issue, Sprint sprint)\r\n        {\r\n            Issue = issue;\r\n            IssueId = issue.Id;\r\n\r\n            Sprint = sprint;\r\n            SprintId = sprint.Id;\r\n        }\r\n\r\n        #endregion Public Constructors\r\n\r\n        #region Public Properties\r\n\r\n        public Issue Issue\r\n        {\r\n            get;\r\n            private set;\r\n        }\r\n\r\n        public string IssueId\r\n        {\r\n            get;\r\n            private set;\r\n        }\r\n\r\n        public Sprint Sprint\r\n        {\r\n            get;\r\n            private set;\r\n        }\r\n\r\n        public object SprintId  // <-- note generic type `object`. It should be `string` as for `IssueId`\r\n        {\r\n            get;\r\n            private set;\r\n        }\r\n\r\n        #endregion Public Properties\r\n\r\n        #region Public Methods\r\n\r\n        public override string ToString()\r\n        {\r\n            return $\"{IssueId} <-> {SprintId}\";\r\n        }\r\n\r\n        #endregion Public Methods\r\n    }\r\n```\r\nFrom `DbContext.cs`:\r\n```c#\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<IssueSprint>()\r\n                .HasKey(record => new { record.IssueId, record.SprintId });\r\n\r\n            // 1:N connection from relation entity to issue\r\n            modelBuilder.Entity<IssueSprint>()\r\n                .HasOne(relation => relation.Issue)\r\n                .WithMany(issue => issue.Sprints)\r\n                .HasForeignKey(relation => relation.IssueId);\r\n\r\n            // 1:N connection from relation entity to sprint\r\n            modelBuilder.Entity<IssueSprint>()\r\n                .HasOne(relation => relation.Sprint)\r\n                .WithMany(sprint => sprint.Issues)\r\n                .HasForeignKey(relation => relation.SprintId);\r\n\r\n            base.OnModelCreating(modelBuilder);\r\n        }\r\n```\r\n\r\nFrom `Startup.cs`:\r\n```c#\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddMvc();\r\n\r\n            using (var context = new DbContext())\r\n            {\r\n                context.Database.EnsureCreated();\r\n            }\r\n        }\r\n```\r\n\r\n*Problem*: Error message tells about problem with `Sprint.TempId` field. Which does not exist anywhere. While in reality `IssueSprint.SprintId` is the main reason of that exception. Switching type from `object` to less generic type (`string` in my case) has fixed the issue. \r\n\r\nAlthough just by reading this error message it is almost impossible to find real cause. \r\n\r\nI believe error message should be updated to point user to correct location in the code, that triggers the issue.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.Sqlite\r\nOperating system: Windows 10 x64\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xrkolovos": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9775", "title": "Create a page in docs to explain how we should handle migrations when targeting multi-databases providers", "body": "Create a page in docs to explain best practices with migrations when targeting multi-databases providers.\r\nIt sees difficult to handle, and migrations created for one provider doesn't work in the other.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9775/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ChristopherHaws": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9771", "title": "Owned types throw when setting the primary key constraint name", "body": "I am trying to set the primary key constraint name of the parent of an owned type and I am getting an exception:\r\n\r\n```\r\nException type: InvalidOperationException\r\nException message: Cannot use table 'Orders' for entity type 'Order' since it is being used for entity type 'Order.OrderDetails#OrderDetails' and the name 'PK_OrderKey' of the primary key {'Id'} does not match the name 'PK_Orders' of the primary key {'PK_OrderKey'}.\r\nStack trace:\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedTableCompatibility(IReadOnlyList`1 mappedTypes, String tableName)\r\n   at Microsoft.EntityFrameworkCore.Internal.SqlServerModelValidator.ValidateSharedTableCompatibility(IReadOnlyList`1 mappedTypes, String tableName)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedTableCompatibility(IModel model)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.Validate(IModel model)\r\n   at Microsoft.EntityFrameworkCore.Internal.SqlServerModelValidator.Validate(IModel model)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass22_0.<RealizeService>b__0(ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_InternalServiceProvider()\r\n   at Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService[TService](IInfrastructure`1 accessor)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.get_DatabaseCreator()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeleted()\r\n   at EFCore2Samples.Program.Main(String[] args) in C:\\Users\\chaws\\source\\repos\\EFCore2Samples\\EFCore2Samples\\Program.cs:line 17\r\n```\r\n\r\n### Steps to reproduce\r\nUsing the following code in a new console application will replicate the issue. Note that if you remove `.HasName(\"PK_OrderKey\");` then the application will run without issue.\r\n\r\n```c#\r\nusing System;\r\nusing System.Linq;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace EFCore2Samples\r\n{\r\n    class Program\r\n    {\r\n        static void Main(String[] args)\r\n        {\r\n            using (var db = new OrderContext())\r\n            {\r\n                db.Database.EnsureDeleted();\r\n                db.Database.EnsureCreated();\r\n\r\n                db.Orders.Add(new Order\r\n                {\r\n                    OrderNumber = \"PO0001\",\r\n                    OrderDetails = new OrderDetails\r\n                    {\r\n                        BillingAddress = new StreetAddress\r\n                        {\r\n                            City = \"City 1\",\r\n                            Street = \"Street 1\"\r\n                        },\r\n                        ShippingAddress = new StreetAddress\r\n                        {\r\n                            City = \"City 2\",\r\n                            Street = \"Street 2\"\r\n                        }\r\n                    }\r\n                });\r\n\r\n                db.SaveChanges();\r\n            }\r\n\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n\r\n    public class OrderContext : DbContext\r\n    {\r\n        public DbSet<Order> Orders { get; set; }\r\n\r\n        protected override void OnConfiguring(DbContextOptionsBuilder options)\r\n        {\r\n            options.UseSqlServer(\"Server=(localdb)\\\\mssqllocaldb; Database=EfTest\");\r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder builder)\r\n        {\r\n            builder.Entity<Order>(entity =>\r\n            {\r\n            \t// If I take out the .HasName(\"PK_OrderKey\"); this work as expected.\r\n                entity.HasKey(x => x.Id).HasName(\"PK_OrderKey\");\r\n\r\n                entity.OwnsOne(p => p.OrderDetails, cb =>\r\n                {\r\n                    cb.OwnsOne(c => c.BillingAddress, billing =>\r\n                    {\r\n                        billing.Property(x => x.City).HasColumnName(\"BillingCity\");\r\n                        billing.Property(x => x.Street).HasColumnName(\"BillingStreet\");\r\n                    });\r\n\r\n                    cb.OwnsOne(c => c.ShippingAddress, shipping =>\r\n                    {\r\n                        shipping.Property(x => x.City).HasColumnName(\"ShippingCity\");\r\n                        shipping.Property(x => x.Street).HasColumnName(\"ShippingStreet\");\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public class Order\r\n    {\r\n        public Int32 Id { get; set; }\r\n        public String OrderNumber { get; set; }\r\n        public OrderDetails OrderDetails { get; set; }\r\n    }\r\n\r\n    public class OrderDetails\r\n    {\r\n        public StreetAddress BillingAddress { get; set; }\r\n        public StreetAddress ShippingAddress { get; set; }\r\n    }\r\n\r\n    public class StreetAddress\r\n    {\r\n        public String Street { get; set; }\r\n        public String City { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer 2.0.0\r\nOperating system: Windows 10 Redstone 3\r\nIDE: Visual Studio 2017 (15.4.0 Preview 1.0)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sveinungh": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9758", "title": "ArgumentOutOfRangeException when ordering by a constant", "body": "This case is kind of silly and can easily be worked around. Ill post it anyway since it could be a symptom\r\nof something more serious. First call works but when sorting by a constant first an Exception is thrown. No data needed for this test.\r\n\r\n```\r\n at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.Collections.Generic.List`1.get_Item(Int32 index)\r\n   at Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression.BindSubqueryProjectionIndex(Int32 projectionIndex, IQuerySource querySource)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression methodCallExpression)\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(Expression expression)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitOrderByClause(OrderByClause orderByClause, QueryModel queryModel, Int32 index)\r\n   at Remotion.Linq.Clauses.OrderByClause.Accept(IQueryModelVisitor visitor, QueryModel queryModel, Int32 index)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses(ObservableCollection`1 bodyClauses, QueryModel queryModel)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitSubQuery(SubQueryExpression expression)\r\n   at Remotion.Linq.Clauses.Expressions.SubQueryExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitBlockExpressions(ExpressionVisitor visitor, BlockExpression block)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitBlock(BlockExpression node)\r\n   at System.Linq.Expressions.BlockExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase.VisitLambda[T](Expression`1 node)\r\n   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at System.Dynamic.Utils.ExpressionVisitorUtils.VisitArguments(ExpressionVisitor visitor, IArgumentProvider nodes)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.RelationalEntityQueryableExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(Expression expression, IQuerySource querySource, Boolean inProjection)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitSelectClause(SelectClause selectClause, QueryModel queryModel)\r\n   at Remotion.Linq.Clauses.SelectClause.Accept(IQueryModelVisitor visitor, QueryModel queryModel)\r\n   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](QueryModel queryModel)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, INodeTypeProvider nodeTypeProvider, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass15_0`1.<Execute>b__0()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)\r\n   at System.Linq.Queryable.FirstOrDefault[TSource](IQueryable`1 source)\r\n   at EFDebug.Program.Main(String[] args) in E:\\asp_net\\tests\\EFDebug\\EFDebug\\Program.cs:line 18\r\n\r\n```\r\n\r\n```c#\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace EFDebug\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var loggerFactory = new LoggerFactory();\r\n            loggerFactory.AddDebug();\r\n            var connection = @\"\";\r\n            var ctx = new MyContext(new DbContextOptionsBuilder().UseSqlServer(connection).UseLoggerFactory(loggerFactory).Options);\r\n            var f = ctx.Parent.Include(p => p.Children).OrderBy(p => p.Id).FirstOrDefault();\r\n            var first = ctx.Parent.Include(p => p.Children).OrderBy(p => true).ThenBy(p => p.Id).FirstOrDefault();\r\n        }\r\n    }\r\n    public class Parent\r\n    {\r\n        public int Id { get; set; }\r\n        public string Name { get; set; }        \r\n\r\n        public virtual ICollection<Child> Children { get; set; }\r\n\r\n\r\n    }\r\n\r\n    public class Child\r\n    {\r\n        public int Id { get; set; }\r\n        public string Name { get; set; }\r\n\r\n\r\n        public int ParentId { get; set; }       \r\n    }\r\n    public class MyContext : DbContext\r\n    {\r\n        public MyContext(DbContextOptions options)\r\n            : base(options)\r\n        {\r\n\r\n        }\r\n        public DbSet<Parent> Parent { get; set; }\r\n    }\r\n\r\n/*\r\ncreate table Parent\r\n(\r\n\tId int identity primary key,\r\n\tName varchar(255)\t\r\n)\r\n\r\ncreate table Child\r\n(\r\n\tId int identity primary key,\r\n\tName varchar(255),\r\n\tParentId int references parent(id)\r\n)\r\n*/\r\n}\r\n\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0 and latest preview\r\nDatabase Provider: SQL, Azure and Express\r\nOperating system:  Windows\r\nIDE: VS2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dejvid-smth": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9753", "title": "Support change tracking of non-primitive types", "body": "ChangeTracker does not detect changes to properties of type Dictionary<,>. In provider for PostgreSQL database database column type hstore is mapped to .net type Dictionary<string,string> but this feature can not be used properly if we do not have change tracking for those properties. One solution would be to use ImmutableDictionary but we want to avoid that.\r\n\r\n### Steps to reproduce\r\n\r\n```c#\r\npublic class HStoreContext : DbContext\r\n{\r\n   public DbSet<SomeEntity> SomeEntities { get; set; }\r\n}\r\n\r\npublic class SomeEntity\r\n{\r\n   public int Id { get; set; }\r\n   public Dictionary<string, string> Tags { get; set; }\r\n}\r\n\r\nusing (HStoreContext ctx = CreateContext())\r\n{\r\n   var entity = new SomeEntity()\r\n   {\r\n       Tags = new Dictionary<string, string>()\r\n   };\r\n   ctx.SomeEntities.Add(entity);\r\n   var num = ctx.SaveChanges();\r\n\r\n   Assert.Equal(1, num);\r\n\r\n   var entry = ctx.Entry(entity);\r\n   Assert.Equal(EntityState.Unchanged, entry.State);\r\n\r\n   entity.Tags.Add(\"kind\", \"new\");\r\n   ctx.ChangeTracker.DetectChanges();\r\n\r\n   Assert.Equal(EntityState.Modified, entry.State); // This fails\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.PostgreSQL\r\nOperating system: \r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SolalPirelli": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9751", "title": "Nested Where->Count query crashes when done in two operations", "body": "My real-life scenario is a DB with users and teams, where users have a reference to the team they are in; I'd like to get all teams T where the number of users in T is less than a certain number.\r\n\r\nA simplified (hopefully minimal) repro is below - as you can see, doing this in one operation (`.Where(...).Count()`) works fine, but doing a `Select` first (which is convenient so I can get the object itself and not just the count of related objects) and then a `Count` fails. But only if it's in a `Where`, using a `Select` with the same condition works fine. Also, the in-memory and SQLite providers differ in their error messages for one case, but not for a very close query that also returns an error.\r\n\r\n### Steps to reproduce\r\n\r\nFull repro, including queries that do not crash even though they're pretty close:\r\n\r\n```c#\r\nusing System.Linq;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nclass Program\r\n{\r\n    class A\r\n    {\r\n        public string Id { get; set; }\r\n    }\r\n\r\n    class Context : DbContext\r\n    {\r\n        public DbSet<A> As { get; set; }\r\n\r\n        protected override void OnConfiguring( DbContextOptionsBuilder optionsBuilder )\r\n        {\r\n            optionsBuilder.UseInMemoryDatabase(\"test\");\r\n            //optionsBuilder.UseSqlite( \"Data Source=test\" );\r\n        }\r\n    }\r\n\r\n    static void Main( string[] args )\r\n    {\r\n        var context = new Context();\r\n        context.Database.EnsureCreated();\r\n\r\n        // OK\r\n        context.As.Select( a => context.As.Where( a2 => a2.Id == \"a\" ).Count() )\r\n                  .ToArray();\r\n\r\n        // OK\r\n        context.As.Where( a => context.As.Where( a2 => a2.Id == \"a\" ).Count() == 0 )\r\n                  .ToArray();\r\n\r\n        // OK\r\n        context.As.Select( a => context.As.Where( a2 => a2.Id == \"a\" ) )\r\n                  .Select( x => x.Count() )\r\n                  .ToArray();\r\n\r\n        // OK\r\n        context.As.Select( a => context.As.Where( a2 => a2.Id == \"a\" ) )\r\n                  .Select( x => x.Count() == 0 )\r\n                  .ToArray();\r\n        \r\n        // Fails on SQLite: 'must be reducible node'\r\n        // Fails on InMemory: 'variable 'a2' of type 'Microsoft.EntityFrameworkCore.Storage.ValueBuffer' referenced from scope '', but it is not defined'\r\n        context.As.Select( a => context.As.Where( a2 => a2.Id == \"a\" ) )\r\n                  .Where( x => x.Count() == 0 )\r\n                  .ToArray();\r\n\r\n        // Fails on both: 'variable 'a2' of type 'Microsoft.EntityFrameworkCore.Storage.ValueBuffer' referenced from scope '', but it is not defined'\r\n        context.As.Select( a => context.As.Where( a2 => a2 != null ) )\r\n                  .Where( x => x.Count() == 0 )\r\n                  .ToArray();\r\n    }\r\n}\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: InMemory and SQLite (I haven't tested with others)\r\nOperating system: Windows 10 (15063.540)\r\nIDE: VS 2017 15.3.3", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slubowsky": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9726", "title": "Max causes QueryClientEvaluationWarning", "body": "Using Max in a Linq query causes QueryClientEvaluationWarning to be thrown but if not configured to throw on this warning then looking at the generated SQL I can see that the Max is actually done on the server, not on the client.\r\n\r\nMy code:\r\n```\r\nawait context.People.Where(a => a.CompanyId == companyId).MaxAsync(or => or.SystemNumber)\r\n```\r\nThe generated SQL (seen in log and profiler) when not throwing on warning:\r\n```\r\nSELECT MAX([a].[SystemNumber])\r\nFROM [People] AS [a]\r\nWHERE [a].[CompanyId] = @__companyId_0\r\n```\r\n\r\nException message when configured to throw on warning:\r\n`Warning as error exception for warning 'Microsoft.EntityFrameworkCore.Query.QueryClientEvaluationWarning': The LINQ expression 'Max()' could not be translated and will be evaluated locally. To suppress this Exception use the DbContextOptionsBuilder.ConfigureWarnings API. ConfigureWarnings can be used when overriding the DbContext.OnConfiguring method or using AddDbContext on the application service provider.`\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0 (and latest 2.1.0 preview)\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: e.g. Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9726/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chassq": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9723", "title": "Allow namespace in code generated by tools to be specified on the command line", "body": "When using scaffold to write to a relative directory in the project the namespace of the target folder does not seem to be honored. For example:\r\n\r\n`dotnet ef dbcontext scaffold \"Server=localhost\\SQLEXPRESS;Database=<dbname>;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -c ApplicationDbContext --force --output-dir ..\\lib.dal.sql\\models`\r\n\r\nNote that we are writing to a folder of another project. However the namespace of the files created is that of the project namespace not of the folder. The namespace is in this case lib.dal.sql but should be lib.dal.sql.models\r\n\r\n### Steps to reproduce\r\nCreate a scaffold project but write the output to another directory in another project.\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Win 10 latest patches\r\nIDE: Visual Studio 2017 latest patches\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Chrille79": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9720", "title": "Add-Migration ends siliently if the project is located in a network path", "body": "If the project is in a network path \\\\\\\\ad\\profile\\myproject\r\n\r\nAdd-Migration command ends without an error or work\r\n\r\nTo workaround the issue. \r\n\r\nCopy the project to a local path \"c:\\myproject\r\nthen Add-Migration works like it should.\r\n\r\n### Expected Result\r\nWorks on a network path or an output from Add-Migration that explain the issue\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nOperating system: W10\r\nIDE: (e.g. Visual Studio 2017)\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anpete": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9712", "title": "Relational: Move ValueGenerationStrategy annotation to Relational.", "body": "Uncovered during Oracle sample provider work.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9711", "title": "Relational: Investigate OracleRelationalCommandBuilderFactory \"hacks\" in Oracle sample", "body": "Some ad hoc type mapping was required in OracleRelationalCommandBuilderFactory. We should make corresponding improvements to Relational/Core to remove the need for these changes.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9710", "title": "Relational: DRY up ByteArrayTypeMapping and subclasses", "body": "Uncovered during Oracle sample provider work.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9708", "title": "Relational: Move SequenceHiLo to Relational", "body": "Uncovered during Oracle sample provider work.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9708/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9558", "title": "Relational: UDF calls are generated unquoted", "body": "When we generate a call to a user defined database function, the function name is unquoted. Should it be?\r\n```sql\r\nSELECT [dbo].EmployeeOrderCount(@__employeeId_0)\r\nFROM [Employees] AS [e]\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e4ff0b2b199a0fa0b64b9d5d24a62f811111decd", "message": "Fix: #9210: Owned type is not being included on a query that includes its owner type as a navigation property.\n\nModified IncludeCompiler to bring in eager loaded navigations when building the include load tree."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/06b77e463f4aaad4aa8aaf02dc6962b549109be5", "message": "Fixing Oracle build."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1325b6ec1816c4372b92de16bae4b5e811223a18", "message": "Query Types: CR feedback."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7bcbe543f18d111d52ab6033c1957e4a4ad41e01", "message": "Feature: 2.1: Initial impl. of Query Types.\n\nAdds Query Types to the type system. Query Types are like Entity Types but do not require a key to be defined and can only be used for querying. Query Types allow for ad-hoc querying (like anonymous types), but are more flexible because they allow mapping configuration to be specified. E.g. ToTable, HasColumnName etc. Many advanced mapping capabilities are supported, too, such as inheritance mapping and navigations (dependent -> principal only)."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/8790253a195064fcd8b0151fb15165523489731e", "message": "Merge branch 'dev' of https://github.com/aspnet/EntityFrameworkCore into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/4306ed80dbb43f886c62bb3a0b717e32a951b6f1", "message": "Enable navigations in filters."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b6aed320cc805aaf7449912ad87f674b4879ec66", "message": "Query: Filters: Fix 10463 - Error when referencing DbSet in filter"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/98150afa7e61564949fdb18c0dc72b9259fda200", "message": "Refactoring. Extract query parsing and expression parameterization logic out of QueryCompiler."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c7c7d455ed9877f56164e6531d23fedffa104dc7", "message": "Query: Perf: Reduce per-iteration allocations during query execution.\n\n- Prevent delegate creation in QueryingEnumerator.\n- Create a single instance of ExecutionStrategy per query (instead of per iteration!)\n- Remove allocation of temp list and enumerator during IncludeCollection.\n\nAllocations reduced by ~17% during execution of single Include query return ~500K results."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7938e90122e2b29488c8c012f4d61c3b81d5583e", "message": "Fix #10222 - Using .Any() on table with owned entities causes IncludeIgnoredWarning\n\n- Added flag to IncludeResultOperator that tracks whether the Include was implicit. I.e. Added because of IsEagerLoad in model."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/c81d716cc27013d6ff5ca3eb5fa60cdbaa782bd3", "message": "Removing line-breaks from filters sample regions."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/de8b70df7df641ee821e2d4b84baedc463a7be15", "message": "Adding docs regions to filters sample."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/3885333f04d22a9ea75ec9e8357deb02ef74d112", "message": "Testing sample code linking"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/48dfa5a03f7a619d49b3b51b788024f2cedf7e88", "message": "Adds Explicit Compiled Queries and DbContext Pooling samples."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1030467f778be6ac77ef8b76d8bb927cbd97fc84", "message": "Adds query filters sample."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9bf8dc31a8e1b075d60a6894a0bce9c3a2ab5678", "message": "Merge pull request #10132 from ralmsdeveloper/Dev\n\nCan_save_changes test correction"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/203c34e526467325cd25eb6dfde098ecf1572826", "message": "Merge branch 'dev' of https://github.com/aspnet/EntityFrameworkCore into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/eaff15c85788f44b882bbbae9e34cabe87cc3057", "message": "Disabling Oracle OracleEndToEndTest.Can_save_changes temporarily."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/1d1df2b7a94b2fd0c0126809fe8c57df4e688b59", "message": "Merge branch 'ralmsdeveloper-dev' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/281369cabdf760d910db66766ab49d09e817eaad", "message": "Merge branch 'dev' of https://github.com/ralmsdeveloper/EntityFrameworkCore into ralmsdeveloper-dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/bf5e2c566c121065ff7a65890d68a265b035c512", "message": "Fix #9923 - Perf Regression: AddDbContextPool in asp.net core System.InvalidOperationException\n\nIntroduces a \"lease\" object, which is a scoped object that manages ownership of a pooled context instance. In particular, the lease object is responsible for returning instances to the pool at the end of the scope. This removes the complexity/race condition from DbContext.Dispose and greatly simplifies pooling in general."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/4bb6c386ac244ed7ee53c66cfeb13e1d014bbfc5", "message": "Fix #800 - Query: Sum should return zero for empty collections regardless of the type.\n\n- Special case Sum for nullable types: result should be (T?)default(T)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/28a2af652ffb4e82e0b8fdcc2cc6f03ec9e09e8c", "message": "Fixes to Oracle for CI."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6e3132c555d38d390d1a58f961532139133808f6", "message": "Merge remote-tracking branch 'refs/remotes/origin/dev' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/edb7fb67ab7fc52a452ef4a6c6c5e5f79cae204f", "message": "Merge commit '265e1e12b90dd92' into dev"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/d00c4dc791caed0670b0830ec4e62f375b0b3072", "message": "Fix #9741 - AddDbContextPool in asp.net core System.InvalidOperationException\n\nProblem: Pooling was not resilient to multiple DbContext.Dispose calls, which meant that a context instance could incorrectly be returned to the pool twice.\nSolution: Adds a DbContext async local to track which \"context\" (e.g. request scope) owns the context and use it to ensure a single return to the pool."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/9b3a5140214c10feec5a0ef40b8a94dfb3fec8af", "message": "Add quirks for #9551"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/265e1e12b90dd921ba1689443cccac3ac8d528f4", "message": "[2.0.1] - Fix #9551 - Expression of type 'System.Object' cannot be used for parameter of type 'Microsoft.EntityFrameworkCore.Metadata.IEntityType'\n\n- Modify QuerySourceTracingExpressionVisitor so that it can return the \"deepest\" GroupBy QueryModel if one exists.\n- Update the Include compiler to target the correct QueryModel when GroupBy is in play."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/bba7c7b187aa0721f5aa2e7bf7828d9db7fd444c", "message": "Fix #9849 - Using Include with InMemory and empty database throws\n\nTweak ExpressionVisitorBase to not visit parameters during VisitLambda."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/f7a71fff5a9a76dbd3ef574370fbcdbaf2cf4f9f", "message": "Restore GetAwaiter behavior of TaskBlockingExpressionVisitor."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/fa8091b1bda9f68207f63d007af9be27868f6821", "message": "[2.0.1] - Fix #9570 - Exception in Client vs. Server Evaluation with async/await in EF Core 2.0.0\n\nTwo issues:\n\n1) CollectionNavigationSetOperatorSubqueryInjector would incorrectly introduce MaterializeCollectionNavigation calls around\nsubqueries. Fix is to reset the ShouldInject flag when visiting subqueries.\n2) After fixing 1, we would deadlock due to blocking on the subquery call. Extended task lifting to deal with this case."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/7ecc4e5d9af1c412a6039fcd589bf32055f117c3", "message": "Query: Include: Adds an optimized collection include client join predicate code path.\n\n- Avoids the use of IIncludeKeyComparer and ValueBuffers when neither of the entity types involved have any shadow key properties."}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/0784cc1c4651b33a11b5f36bf3e52e4d8f6bf071", "message": "Adds quirk for #9128"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35927875", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35927875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36156129", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36156129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36284175", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36284175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36374315", "body": "Clarified with Arthur and confirmed that there was in fact no issue in EntityType.AddProperty. Multiple threads adding properties would always result in the correct number of properties being added. That said we hadn't yet enabled full thread-safety in metadata - and we don't really want to. Instead, we are going to do the build and freeze thing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36374315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36375033", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36375033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36403722", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36403722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36537498", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36537498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36550569", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36550569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36915130", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36915130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37360395", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37360395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37681959", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37681959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37973997", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37973997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38087216", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38087216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38226098", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38226098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38327574", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38327574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38327712", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38327712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38599050", "body": ":ship: :it: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38599050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38626244", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38626244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38635424", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38635424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39872572", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39872572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40844809", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40844809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40859351", "body": ":shipit: Thanks @pranavkm!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40859351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41217865", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41217865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41425787", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41425787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41702717", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41702717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43018731", "body": ":shaved_ice: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43018731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42074430", "body": "Investigating. Looks like we are leaking in the State Manager. Will keep digging...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42074430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42082353", "body": "Traced to DI, moving issue there.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42082353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42115153", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42115153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/48241452", "body": "Found it. Cause by this bug in IX-Async: Reactive-Extensions/Rx.NET#5\n\nIt has been fixed and they should be publishing a new build very soon.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/48241452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64693602", "body": "@rowanmiller Our workaround addresses the bug but we need the new version to remove the workaround and for #889\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64693602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42337892", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42337892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44566348", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44566348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219504", "body": "We are going to merge Core into Entity.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219571", "body": "This needs to be updated after assembly merge\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219578", "body": "Signed off with comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5219578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5285097", "body": "I need to re-add the proj file - It was ignored by default, which I constantly forget :-)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5285097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5298472", "body": "@Eilon, Yes, we use this to view log output such as generated SQL from test runners etc.\n@davidfowl, Want me to send a PR to Logging? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5298472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299048", "body": "Hello\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299057", "body": "@ajcvickers Fix it!!!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299758", "body": "@Eilon Will do.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5403975", "body": "Type, DeclaringType -> typo?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5403975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5424515", "body": "Not sure. @loudej implemented this separately in hosting. I would be fine with it in DI.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5424515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429115", "body": "ChangeTrackerEntry?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429271", "body": "Consider _identityMap or even _trackedEntities\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429307", "body": "Or, it could be that the convention based startup just sets the instance on to the config somehow...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429316", "body": "ChangeTracker is per-context. Not sure if it needs to be substitutable, but if so, we need a factory.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429325", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5429325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5473190", "body": "This seems to combine several concepts?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5473190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5473193", "body": "Is this a cache?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5473193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500348", "body": "Interface? Seems pretty focused.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500393", "body": "Consider \"Source\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500463", "body": "Should be able to just use a model instance if I have one.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5513670", "body": "@davidfowl , yeah, I was wondering why we didn't just do this too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5513670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5514657", "body": "@davidfowl, made the change but now net45 isn't built from cmd line. This expected?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5514657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5526795", "body": "Thanks @davidfowl - Chatted to @bricelam who informs me that this is in-flight. :thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5526795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/6423964", "body": "Nice! @bricelam \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/6423964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7212274", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7212274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915063", "body": "Why this? Use a context per test like we do elsewhere. DbContext is not threadsafe.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915098", "body": "Why are these needed? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8801087", "body": "You don't need to pass this here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8801087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8801102", "body": "I don't think _queryAnnotations is ever null here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8801102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12914998", "body": "@maumar See my comment on the PR about this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12914998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13005199", "body": "Why not just remove the delimiters?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13005199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13005218", "body": "Why introduce schema?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13005218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13005226", "body": "Don't we have provider APIs for this stuff?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13005226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13448572", "body": "Can we pare this back to just have one version of each method? The implementations can still have the overloads as protected virtuals.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13448572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13448581", "body": "Also consider the extension method pattern for overloads, too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13448581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13505777", "body": "Good catch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13505777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13891938", "body": "ulong\n\ncc @natemcmaster \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13891938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13891939", "body": "ulong\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13891939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14721549", "body": "Can we reduce the number of methods. Do they all need to be Find?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14721549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15455717", "body": "@natemcmaster Thanks, investigating,\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15455717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16867235", "body": "@natemcmaster Hmmm, perhaps the comparison to \"M\u00e9xico D.F.\"? Are you able to tell if the other two asserts are successful?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16867235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17029726", "body": "nit: blank line\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17029726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19600350", "body": "@laskoviymishka No worries. Reminder to also run full Build.cmd as we have a bunch of API consistency tests that check this stuff.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19600350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21960051", "body": "@divega @ajcvickers @AndriySvyryd Heads up: new query operator API, please review naming.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21960051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21972185", "body": "Redundant. ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21972185/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21972217", "body": "Again, I'm not sure this is correct. \"Orders\" is a nav prop and it is defined on Customer, which is an ET.\r\n\r\nThe key point here is that the Include path _originates_ from a non-ET- Tuple in this case.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21972217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21972220", "body": "cc @divega ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21972220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22044371", "body": "@smitpatel Prototype of join elimination. All tests pass but I'm sure there are some things I've missed, would be great to get your feedback \ud83d\ude04 \r\n\r\nNB: Rewriting SE is pretty hacky at the moment.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22044371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22311662", "body": "@smitpatel This isn't needed.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22311662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418422", "body": "Will try and prune.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129576", "body": "Will remove.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418331", "body": "Going away", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129633", "body": "Yeah, they support it.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129902", "body": "Unless there was a reason this was not done in the first place - Postgres has sequences, too.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129977", "body": "Will remove.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137401645", "body": "No.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137401645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418396", "body": "Will try and prune unused.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129989", "body": "Will remove.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418310", "body": "Will do", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137422848", "body": "Will do.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137422848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137422839", "body": "Will do.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137422839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137422830", "body": "Will do.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137422830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137415064", "body": "Going away.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137415064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137415180", "body": "Will remove.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137415180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418528", "body": "Excluded \"Design\"", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129529", "body": "Will remove.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137129529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137329371", "body": "Removed", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137329371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137403111", "body": "WIll do.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137403111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418153", "body": "This may be dead code, investigating", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137403085", "body": "IOracleOptions is going away", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137403085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418011", "body": "Will try and remove", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/137418011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10547406", "body": "Does this matter for privates?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10547406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10547696", "body": "Oops, thanks, copy and paste goodness\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10547696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10547743", "body": "Will do.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10547743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10621254", "body": "Can you lift Create() outside of test and set loop?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10621254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10621883", "body": "Yeah, will address.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10621883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10712120", "body": "I could be missing something, but are these the migration fluent APIs? They don't look like what we have now..\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10712120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10712183", "body": "Delegate to up/down strategy impls instead of switching everywhere.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10712183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10712320", "body": "This was based on the current impl. Fine to change it if there is a better way.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10712320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10719563", "body": "But _sets is LazyRef?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10719563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10722988", "body": "Do you think we will use the term as part of the EF domain language; or something else? I'm not sure there is anything better, so perhaps we should just commit (for now)...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10722988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10723501", "body": "None that I know of. :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10723501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10772134", "body": "@emilcicos, @bricelam Bear in mind that you still need .Ordinal as donuts for the FxCop.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10772134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10958928", "body": "Use TypeCode here instead of strings. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10958928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10958975", "body": "Even better, just use dynamic to dispatch to the strongly typed overloads below. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10958975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10958982", "body": "Any\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10958982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10959044", "body": "Not sure what DiffSource means here. I would consider creating a separate operation builder class instead.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/10959044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11076832", "body": "I don't think this concept belongs on Column.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11076832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11086085", "body": "Do this in the front end.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11086085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11086110", "body": "EntityStateExtensions.IsDirty?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11086110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11088073", "body": "Ya. Only send what needs to be saved.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11088073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11088171", "body": "Poor mans DI is fine, usually to make testing easier.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11088171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11088247", "body": "Not sure, what relational aspect on Column does this map to?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11088247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11089017", "body": "I don't think we want to couple the relational model directly to Metadata. I also don't think this concept maps well to relational columns. Rather, a column can have a default value, and in some databases, an identity spec.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11089017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11785005", "body": "Not currently because this method is defined in re-linq. We don't have to use the re-linq front-end glue - I have more work to do in this area and this is just a first cut at enabling async with relinq.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11785005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11785038", "body": "Impl. detail.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11785038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11785478", "body": "Not opposed to it if we find a need.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11785478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11785822", "body": "Unless we also mock IAsyncEnumerator.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11785822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11787020", "body": "French?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11787020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11924690", "body": "\"modelBuilder\" (pedantic)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11924690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11924759", "body": "\"KeySuffix\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/11924759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "fgheysels": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9705", "title": "Properties with private setters in base class are not saved", "body": "### Description\r\n\r\nWhen I save a class that inherits from a base-class that has automatic properties with a public getter and a private setter, the values for those properties are not saved.\r\nIt seems that no columns are created in the table for  those properties (in a code first approach), and thereby the property values are not saved.\r\n\r\nWhen I specify in OnModelCreating that a (private) backing field must be used to set the property, then it works like a charm: the property is saved and correctly retrieved.\r\n\r\n\r\nI believe that EF must be able to correctly save the property when it is an auto-property.  Only if the property is declared as 'NotMapped', then it should not be saved.\r\n\r\n### Demo code\r\n\r\nA little console-application that demonstrates this behaviour can be downloaded [here](https://1drv.ms/u/s!ApGywS96rSAlpzv00YUg6dAb67fy)\r\n\r\n\r\n### Further technical details\r\nEF Core version: EntityFramework.Core 2.0.0\r\nDatabase Provider: tested with InMemory and Sqlite DB\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Wain123": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9703", "title": "Update DeleteBehavior.Restrict to not apply when navigations are changed", "body": "Since #9686 and #8633 have been closed despite not being resolved at all, I feel that there is some fundamental misunderstanding of what the issues are asking about. I will try to explain more clearly.\r\n\r\nI want a relationship that behaves exactly like a nullable FK in a database.\r\n\r\nThe foreign key should do exactly what the navigation property does. If I set the navigation to null, the FK becomes null. If I set the navigation to an object, the FK becomes the PK of that object. This part currently works perfectly in EFCore 2.1 with a nullable FK, ClientSetNull, ChangingAndChangedNotificationsWithOriginalValues and a navigation property setter that automatically invokes PropertyChanged.\r\n\r\nThe navigation and FK should ONLY change if I explicitly tell them to change - either by assigning a value to the navigation, or performing add/remove on the collection side. Just like a FK in a database.\r\n\r\nIf I try to delete the parent while a child points to him, then this is a bug in my code (or a mistake on the end user's part), and I want to be notified of the mistake so I have a chance to correct it. Just like the database tells me that I can't delete the parent because \"ORA-02292: integrity constraint [...] violated - child record found\". I don't want the FK to be quietly set to null or the child to be cascade deleted or anything of that sort.\r\n\r\nWhen I call SaveChanges, I want the current value of the FK to be saved to the database. If that is an inconsistent state, then I want to get an error telling me I made a mistake. I don't want EF to attempt to guess which consistent state I \"meant\" to get (because it tends to guess wrong!).\r\n\r\nSince issue #8633 has been marked as fixed by ClientSetNull, one would think that ClientSetNull does absolutely nothing on parent deletion and on SaveChanges (as #8633 describes). But in reality, ClientSetNull sets the FK to null in that case. If this is working as intended, then please remove the \"fixed\" label from issue #8633.\r\n\r\nIssue #9686 has been closed with the comment that a non-nullable FK would help. It wouldn't, because I need an optional (i.e. nullable) relationship.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9693", "title": "Setting a navigation property to null and then back to a value doesn't update the FK when using ChangingAndChangedNotificationsWithOriginalValues", "body": "Can't reopen #9688, posting a new issue.\r\n\r\nThe problem in #9688 is not about detecting changes. OnModelCreating contains:\r\n`modelBuilder.HasChangeTrackingStrategy(ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues);`\r\nAnd Post contains the navigation property:\r\n```\r\npublic Blog Blog {\r\n\tget {\r\n\t\treturn _blog;\r\n\t}\r\n\tset {\r\n\t\tPropertyChanging?.Invoke(this, new PropertyChangingEventArgs(\"Blog\"));\r\n\t\t_blog = value;\r\n\t\tPropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"Blog\"));\r\n\t}\r\n}\r\n```\r\nAlso, as you can see in the output in #9688, the changes are indeed properly detected and the FK is set correctly in some cases, but not in all cases.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Tasteful": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9695", "title": "Missing thread safety in ModelSource._models", "body": "Concurrency problem in `ModelSource`, the [_models](https://github.com/aspnet/EntityFrameworkCore/blob/38403efd2e8121002902bffb72784b5beb80f7d6/src/Microsoft.EntityFrameworkCore/Infrastructure/ModelSource.cs#L27) is not thread safe.\r\n\r\nWe will rewrite our code to not use the `HashSet` described as below but still think that the `ModelSource` should use an `ConcurrentDictionary<object, Lazy<IModel>>` to get thread safety.\r\n\r\n### Steps to reproduce\r\nDon't have any steps that I can use to reproduce the issue. It happens randomly when the application is starting up and got multiple threads that is fetching the model.\r\n\r\nThread 1\r\n```txt\r\n0000002cc95ea4c0 00007ff97a7ec9c6 (MethodDesc 00007ff97a3956e0 +0x16 System.Collections.Generic.EqualityComparer`1[[System.__Canon, mscorlib]].get_Default()), calling clr!JIT_GetGenericsGCStaticBase\r\n0000002cc95ea500 00007ff924670a90 (MethodDesc 00007ff9247eccc8 +0x40 System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]].Equals(System.ValueTuple`2<System.__Canon,System.__Canon>)), calling (MethodDesc 00007ff97a3956e0 +0 System.Collections.Generic.EqualityComparer`1[[System.__Canon, mscorlib]].get_Default())\r\n0000002cc95ea550 00007ff924670a26 (MethodDesc 00007ff9247fdb80 +0x66 System.Collections.Generic.GenericEqualityComparer`1[[System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]], System.ValueTuple]].Equals(System.ValueTuple`2<System.__Canon,System.__Canon>, System.ValueTuple`2<System.__Canon,System.__Canon>))\r\n0000002cc95ea570 00007ff97a746de1 (MethodDesc 00007ff97a397390 +0x31 System.Collections.Generic.ObjectEqualityComparer`1[[System.__Canon, mscorlib]].Equals(System.__Canon, System.__Canon))\r\n0000002cc95ea5a0 00007ff92466eb7f (MethodDesc 00007ff9247fcd60 +0x12f System.Collections.Generic.HashSet`1[[System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]], System.ValueTuple]].AddIfNotPresent(System.ValueTuple`2<System.__Canon,System.__Canon>))\r\n0000002cc95ea640 00007ff92466ea29 (MethodDesc 00007ff9247fccc0 +0x9 System.Collections.Generic.HashSet`1[[System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]], System.ValueTuple]].Add(System.ValueTuple`2<System.__Canon,System.__Canon>)), calling (MethodDesc 00007ff9247fcd60 +0 System.Collections.Generic.HashSet`1[[System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]], System.ValueTuple]].AddIfNotPresent(System.ValueTuple`2<System.__Canon,System.__Canon>))\r\n0000002cc95ea670 00007ff924667e38 (MethodDesc 00007ff9247ea788 +0x5f8 Company.Application.FieldFramework.Data.FieldFrameworkDataExtensions.HasFieldData[[System.__Canon, mscorlib],[System.Guid, mscorlib],[System.__Canon, mscorlib],[System.__Canon, mscorlib]](Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1<System.__Canon>, Microsoft.EntityFrameworkCore.ModelBuilder, System.Linq.Expressions.Expression`1<System.Func`2<System.__Canon,System.Collections.Generic.IEnumerable`1<System.__Canon>>>))\r\n0000002cc95ea730 00007ff92466721b (MethodDesc 00007ff923202f68 +0x21b Company.Application.Products.Data.DataModel+<>c__DisplayClass0_0.<OnModelCreating>b__0(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1<Company.Application.Products.Data.FieldDefinitionEntity>)), calling (MethodDesc 00007ff9247ea788 +0 Company.Application.FieldFramework.Data.FieldFrameworkDataExtensions.HasFieldData[[System.__Canon, mscorlib],[System.Guid, mscorlib],[System.__Canon, mscorlib],[System.__Canon, mscorlib]](Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1<System.__Canon>, Microsoft.EntityFrameworkCore.ModelBuilder, System.Linq.Expressions.Expression`1<System.Func`2<System.__Canon,System.Collections.Generic.IEnumerable`1<System.__Canon>>>))\r\n0000002cc95ea790 00007ff923e5abdc (MethodDesc 00007ff9245fd010 +0x8c Microsoft.EntityFrameworkCore.ModelBuilder.Entity[[System.__Canon, mscorlib]](System.Action`1<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1<System.__Canon>>))\r\n0000002cc95ea7e0 00007ff924665555 (MethodDesc 00007ff9231aecc8 +0x85 Company.Application.Products.Data.DataModel.OnModelCreating(Microsoft.EntityFrameworkCore.DbContext, Microsoft.EntityFrameworkCore.ModelBuilder))\r\n0000002cc95ea850 00007ff923e5a0a8 (MethodDesc 00007ff9231dc678 +0x88 Company.Application.Data.CompanyDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder))\r\n0000002cc95ea8c0 00007ff923e53ec3 (MethodDesc 00007ff923a201a8 +0x103 Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(Microsoft.EntityFrameworkCore.DbContext, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder, Microsoft.EntityFrameworkCore.Internal.IModelValidator))\r\n0000002cc95ea920 00007ff97b1459d4 (MethodDesc 00007ff97a3ae798 +0x54 System.Collections.Concurrent.ConcurrentDictionary`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]].GetOrAdd(System.__Canon, System.Func`2<System.__Canon,System.__Canon>))\r\n0000002cc95ea930 00007ff923e53870 (MethodDesc 00007ff923a201a0 +0xa0 Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder, Microsoft.EntityFrameworkCore.Internal.IModelValidator)), calling clr!JIT_WriteBarrier\r\n0000002cc95ea940 00007ff923a535e7 (MethodDesc 00007ff9237339e8 +0x57 Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[[System.__Canon, mscorlib]](System.IServiceProvider)), calling clr!JIT_ChkCastAny\r\n0000002cc95ea950 00007ff923e53684 (MethodDesc 00007ff9239ddcf0 +0x24 Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseProviderServices.get_ModelValidator()), calling clr!JIT_VirtualFunctionPointer\r\n0000002cc95ea980 00007ff923e504c1 (MethodDesc 00007ff923a2ff80 +0xd1 Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel())\r\n0000002cc95ea9e0 00007ff923e503b2 (MethodDesc 00007ff9245b4ef8 +0x22 Microsoft.EntityFrameworkCore.Internal.LazyRef`1[[System.__Canon, mscorlib]].get_Value())\r\n0000002cc95eaa20 00007ff923e5036c (MethodDesc 00007ff923a2ff98 +0x3c Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()), calling (MethodDesc 00007ff9245b4ef8 +0 Microsoft.EntityFrameworkCore.Internal.LazyRef`1[[System.__Canon, mscorlib]].get_Value())\r\n```\r\n\r\nThread 2\r\n```txt\r\n0000002eef61df80 00007ff97a7ec9c6 (MethodDesc 00007ff97a3956e0 +0x16 System.Collections.Generic.EqualityComparer`1[[System.__Canon, mscorlib]].get_Default()), calling clr!JIT_GetGenericsGCStaticBase\r\n0000002eef61dfc0 00007ff924670a90 (MethodDesc 00007ff9247eccc8 +0x40 System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]].Equals(System.ValueTuple`2<System.__Canon,System.__Canon>)), calling (MethodDesc 00007ff97a3956e0 +0 System.Collections.Generic.EqualityComparer`1[[System.__Canon, mscorlib]].get_Default())\r\n0000002eef61e010 00007ff924670a26 (MethodDesc 00007ff9247fdb80 +0x66 System.Collections.Generic.GenericEqualityComparer`1[[System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]], System.ValueTuple]].Equals(System.ValueTuple`2<System.__Canon,System.__Canon>, System.ValueTuple`2<System.__Canon,System.__Canon>))\r\n0000002eef61e020 00007ff9811f10c6 clr!RedirectedHandledJITCaseForGCThreadControl_Stub+0x26, calling clr!Thread::RedirectedHandledJITCaseForGCThreadControl\r\n0000002eef61e060 00007ff92466eb7f (MethodDesc 00007ff9247fcd60 +0x12f System.Collections.Generic.HashSet`1[[System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]], System.ValueTuple]].AddIfNotPresent(System.ValueTuple`2<System.__Canon,System.__Canon>))\r\n0000002eef61e100 00007ff92466ea29 (MethodDesc 00007ff9247fccc0 +0x9 System.Collections.Generic.HashSet`1[[System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]], System.ValueTuple]].Add(System.ValueTuple`2<System.__Canon,System.__Canon>)), calling (MethodDesc 00007ff9247fcd60 +0 System.Collections.Generic.HashSet`1[[System.ValueTuple`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]], System.ValueTuple]].AddIfNotPresent(System.ValueTuple`2<System.__Canon,System.__Canon>))\r\n0000002eef61e130 00007ff924667e38 (MethodDesc 00007ff9247ea788 +0x5f8 Company.Application.FieldFramework.Data.FieldFrameworkDataExtensions.HasFieldData[[System.__Canon, mscorlib],[System.Guid, mscorlib],[System.__Canon, mscorlib],[System.__Canon, mscorlib]](Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1<System.__Canon>, Microsoft.EntityFrameworkCore.ModelBuilder, System.Linq.Expressions.Expression`1<System.Func`2<System.__Canon,System.Collections.Generic.IEnumerable`1<System.__Canon>>>))\r\n0000002eef61e1f0 00007ff924673b56 (MethodDesc 00007ff923202f98 +0x2d6 Company.Application.Products.Data.DataModel+<>c__DisplayClass0_0.<OnModelCreating>b__3(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1<Company.Application.Products.Data.AssortmentEntity>)), calling (MethodDesc 00007ff9247ea788 +0 Company.Application.FieldFramework.Data.FieldFrameworkDataExtensions.HasFieldData[[System.__Canon, mscorlib],[System.Guid, mscorlib],[System.__Canon, mscorlib],[System.__Canon, mscorlib]](Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1<System.__Canon>, Microsoft.EntityFrameworkCore.ModelBuilder, System.Linq.Expressions.Expression`1<System.Func`2<System.__Canon,System.Collections.Generic.IEnumerable`1<System.__Canon>>>))\r\n0000002eef61e250 00007ff923e5abdc (MethodDesc 00007ff9245fd010 +0x8c Microsoft.EntityFrameworkCore.ModelBuilder.Entity[[System.__Canon, mscorlib]](System.Action`1<Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1<System.__Canon>>))\r\n0000002eef61e2a0 00007ff9246656e5 (MethodDesc 00007ff9231aecc8 +0x215 Company.Application.Products.Data.DataModel.OnModelCreating(Microsoft.EntityFrameworkCore.DbContext, Microsoft.EntityFrameworkCore.ModelBuilder))\r\n0000002eef61e310 00007ff923e5a0a8 (MethodDesc 00007ff9231dc678 +0x88 Company.Application.Data.CompanyDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder))\r\n0000002eef61e380 00007ff923e53ec3 (MethodDesc 00007ff923a201a8 +0x103 Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(Microsoft.EntityFrameworkCore.DbContext, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder, Microsoft.EntityFrameworkCore.Internal.IModelValidator))\r\n0000002eef61e3e0 00007ff97b1459d4 (MethodDesc 00007ff97a3ae798 +0x54 System.Collections.Concurrent.ConcurrentDictionary`2[[System.__Canon, mscorlib],[System.__Canon, mscorlib]].GetOrAdd(System.__Canon, System.Func`2<System.__Canon,System.__Canon>))\r\n0000002eef61e440 00007ff923e504c1 (MethodDesc 00007ff923a2ff80 +0xd1 Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel())\r\n0000002eef61e4a0 00007ff923e503b2 (MethodDesc 00007ff9245b4ef8 +0x22 Microsoft.EntityFrameworkCore.Internal.LazyRef`1[[System.__Canon, mscorlib]].get_Value())\r\n0000002eef61e4e0 00007ff923e5036c (MethodDesc 00007ff923a2ff98 +0x3c Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()), calling (MethodDesc 00007ff9245b4ef8 +0 Microsoft.EntityFrameworkCore.Internal.LazyRef`1[[System.__Canon, mscorlib]].get_Value())\r\n```\r\n\r\nThis start failing in our environment when I added a static variable of `HashSet` with a `ValueType` of two functions in the class, ISet definition `ISet<(Func<DbContext, Guid, IEnumerable<IMessage>> GetEvents, Action<DbContext, string> RemoveEntities)>`.\r\n\r\nMinidump-file can be sent on request.\r\n\r\n### Further technical details\r\nEF Core version: 1.1.2\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Win 10\r\nIDE: Visual Studio 2017.3\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/63998839", "body": "I have now added so the clear/adding orderby is in condition\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/63998839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/65305070", "body": "@smitpatel @divega Fix in `ColumnExpression.Equals()` was because of an NRE. Another solution to not allow null property in the `ColumnExpression` is to add a new expression, lets say `AliasColumnExpression` that will do the same as `ColumnExpression` that not have an property assigned. If that should be introduced my feeling is that it's another PR because it will change other places where the `ColumnExpression` is used also.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/65305070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "John0King": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9621", "title": "Can we have a `DeleteBehaviorAttribute`  ", "body": "Data annotations is a much easier way to configure model than Fluent API.\r\nAnd we can only configure `DeleteBehavior` via Fluent API today, that means we need configure foreign key again in fluent api.\r\nCan we have a `DeleteBebaviorAttribute(DeleteBehavior behavior)`   in `Microsoft.EntityFramework` Namespace ?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maciejjarzynski": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9603", "title": "Configuring Property with a string cannot discover private fields from base class", "body": "At first, I'd like to sorry for maybe non-descriptive-enough title, but I couldn't think of anything better right now ;)\r\nThe problem looks like regression, it used to work with EF Core 1.1.2.\r\nWhen configuring entity property with a string-name (`Property(\"propertyName\")`) when the given field is a private field in a base class throws an exception in `OnModelCreating` method.\r\nI've read breaking changes in EF Core 2.0 and also some other articles, but I couldn't find anything mentioning such a change.\r\nThe actions that are fixing this behaviour:\r\n\r\n- making that field protected/public\r\n- declaring type explicitely like `Property<string>(\"propertyName\")`\r\n\r\nException message:\r\n````\r\nSystem.InvalidOperationException: The property 'date' cannot be added to the type 'Entity' because there was no property type specified and there is no corresponding CLR property or field. To add a shadow state property the property type must be specified.\r\n````\r\nStack trace:\r\n```\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddProperty(String name, Type propertyType, MemberInfo memberInfo, ConfigurationSource configurationSource, Nullable`1 typeConfigurationSource)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.AddProperty(String name, Type propertyType, ConfigurationSource configurationSource, Nullable`1 typeConfigurationSource)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(Property existingProperty, String propertyName, Type propertyType, MemberInfo clrProperty, Nullable`1 configurationSource, Nullable`1 typeConfigurationSource)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(String propertyName, Type propertyType, MemberInfo memberInfo, Nullable`1 configurationSource, Nullable`1 typeConfigurationSource)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(String propertyName, ConfigurationSource configurationSource)\r\n   at Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(String propertyName)\r\n   at ef_repro.Context.<>c.<OnModelCreating>b__1_0(EntityTypeBuilder`1 e) in c:\\...Program.cs:line 17\r\n   at Microsoft.EntityFrameworkCore.ModelBuilder.Entity[TEntity](Action`1 buildAction)\r\n   at ef_repro.Context.OnModelCreating(ModelBuilder modelBuilder) in c:\\...\\Program.cs:line 13\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer.Customize(ModelBuilder modelBuilder, DbContext context)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.<>c__DisplayClass5_0.<GetModel>b__0(Object k)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass22_0.<RealizeService>b__0(ServiceProvider provider)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_InternalServiceProvider()\r\n   at Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService[TService](IInfrastructure`1 accessor)\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.get_DatabaseCreator()\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeleted()\r\n````\r\n\r\n### Steps to reproduce\r\n\r\n```c#\r\npublic class Context : DbContext\r\n    {\r\n        public Context(DbContextOptions options) : base(options) { }\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity<Entity>(e =>\r\n            {\r\n                e.HasKey(p => p.Id);\r\n                e.Ignore(p => p.Date);\r\n                e.Property(\"date\");\r\n            });\r\n\r\n            base.OnModelCreating(modelBuilder);\r\n        }\r\n    }\r\n\r\n    public class Entity : EntityBase\r\n    {\r\n        public int Id { get; set; }\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class EntityBase\r\n    {\r\n        private string date;\r\n\r\n        public DateTime Date\r\n        {\r\n            get { return DateTime.Parse(this.date); }\r\n            set { this.date = value.ToString(); }\r\n        }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var ctx = new Context(new DbContextOptionsBuilder<Context>().UseInMemoryDatabase(\"test_db\").Options);\r\n            ctx.Database.EnsureDeleted();\r\n            ctx.Database.EnsureCreated();\r\n\r\n            ctx.Set<Entity>().Add(new Entity() { Date = DateTime.Now });\r\n            ctx.SaveChanges();\r\n            var e = ctx.Set<Entity>().FirstOrDefault();            \r\n        }\r\n    }\r\n```\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: (e.g. Microsoft.EntityFrameworkCore.InMemory, Npgsql.EntityFrameworkCore.PostgreSQL)\r\nOperating system: Windows 10 Professional 15063.540\r\nIDE: Visual Studio Professional 2017 15.3.2\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JeanCollas": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9599", "title": "Insert entity in non existing table throws NullException", "body": "**The following code generates a -not dev-friendly- error** \r\n\r\n            builder.Entity<MyEntity>(b =>\r\n            {\r\n                b.HasKey(e => e.Guid);\r\n                b.ToTable(\"NotExistingTable\");\r\n            });\r\n\r\n        public DbSet<MyEntity> MyTable { get; set; }\r\n\r\n\r\n```\r\nDbContext.MyTable.Add(new MyEntity(){SomeField=\"test\"});\r\nawait DbContext.SaveChangesAsync();\r\n\r\n```\r\n\r\n**The error:** \r\n\r\nMessage:\r\n> Object reference not set to an instance of an object.\r\n\r\n```\r\n   at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnNext(KeyValuePair`2 keyValuePair)\r\n   at System.Diagnostics.DiagnosticListener.Write(String name, Object value)\r\n   at Microsoft.EntityFrameworkCore.Internal.CoreLoggerExtensions.SaveChangesFailed(IDiagnosticsLogger`1 diagnostics, DbContext context, Exception exception)\r\n   at Microsoft.EntityFrameworkCore.DbContext.<SaveChangesAsync>d__48.MoveNext()\r\n\r\n```\r\n\r\nIt would be nice to have something saying that the table could not be found or something like this :) ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9599/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fchiumeo": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9582", "title": "Query on field non unicode string should not append N", "body": "I have setting all string use non unicode varchar and select append N in generated SQL\r\n\r\n### Steps to reproduce\r\n```c#\r\nDbContext\r\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            foreach (var property in modelBuilder.Model.GetEntityTypes().SelectMany(e => e.GetProperties().Where(p => p.ClrType == typeof(string))))\r\n            {\r\n                property.IsUnicode(false);\r\n            }\r\n        }\r\n```\r\n```c#\r\n public class TipoServicioConfig : IEntityTypeConfiguration<TipoServicio>\r\n    {\r\n        public void Configure(EntityTypeBuilder<TipoServicio> builder)\r\n        {\r\n            builder.HasKey(ts => ts.Id);\r\n\r\n            builder.Property(ts => ts.Id).IsRequired();\r\n            builder.Property(ts => ts.Nombre).IsRequired().HasMaxLength(20);\r\n            \r\n           //it does not work either\r\n          //builder.Property(ts => ts.Nombre).IsRequired().HasMaxLength(20).HasColumnType(\"varchar(20)\");\r\n        }\r\n    }\r\n```\r\n\r\n```c#\r\n   public class TipoServicio\r\n    {\r\n \r\n        public int Id{ get; set; }\r\n        public string Nombre { get; set; }\r\n\r\n    }\r\n```\r\n```c#\r\nvar query = DbContext.Set<TipoServicio>().Where(xx => xx.Nombre.Contains(\"lla\")).ToList();\r\n```\r\n\r\n```sql\r\n      SELECT [xx].[Id], [xx].[Nombre]\r\n      FROM [TipoServicio] AS [xx]\r\n      WHERE CHARINDEX(N'lla', [xx].[Nombre]) > 0\r\n```\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Windows 10\r\nIDE: Visual Studio 2017 (15.3)\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skysurfer72": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9552", "title": "EF Core 2 INSERT error (The property 'ID' on entity type 'xxx' has a temporary value)", "body": "This is my model (semplified):\r\nPRAT is the main table\r\n\r\n```\r\npublic partial class PRAT\r\n{\r\n    public int ID { get; set; }\r\n    public string PRATICA { get; set; }\r\n    public int ANNO { get; set; }\r\n    public string VARIANTE { get; set; }\r\n\r\n    [ForeignKey(\"ID\")]\r\n    public VW_PRATICHE_CONTIPO VW_PRATICHE_CONTIPO { get; set; }\r\n}\r\n```\r\nVW_PRATICHE_CONTIPO is a View (not a table!) in the database that contains some data related to PRAT table (1 to 1 relationship)\r\n\r\n```\r\npublic class VW_PRATICHE_CONTIPO\r\n{\r\n    public int ID { get; set; }\r\n    public DateTime? DATAPRES { get; set; }\r\n    public string PROTGEN { get; set; }\r\n    public string TIPO { get; set; }\r\n    public string TIPOEXTRA { get; set; }\r\n    public string TIPOISTANZA { get; set; }\r\n    public string TIPOPRAT { get; set; }\r\n}\r\n```\r\nThe one-to-one relation between the table and the View is based on the ID field.\r\n\r\nI need this because I want to do a query like this:\r\n```\r\ncontext.PRAT.Include(x=> x.VW_PRATICHE_CONTIPO)\r\n```\r\nThis query works as exptected.\r\n\r\nThe problem happens when I try to save a new entity in PRAT.\r\n\r\nWhen i do this:\r\n```\r\ncontext.PRAT.Add(prat);\r\nawait context.SaveChangesAsync();\r\n```\r\n\r\nI got this error:\r\n```\r\nThe property 'ID' on entity type 'PRAT' has a temporary value. Either set a permanent value explicitly or ensure that the database is configured to generate values for this property.\r\n```\r\nIf I remove the navigation property from PRAT all works fine, but I can't do the Include in my Query.\r\n\r\nCan anybody help me?\r\n\r\nThank you.\r\n\r\n### Further technical details\r\nEF Core version: 2.0\r\nDatabase Provider:  Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: MS Windows 7\r\nIDE: Visual Studio 2017\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bubibubi": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9536", "title": "Conventions shouldn't try to set the base type for owned types", "body": "For example an owned type Address { Street : string, City : City  }  and an owned type City { Name : string , State : string}\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "youclk": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9535", "title": "Rownumber paging generates invalid SQL with DTO projection and orderby", "body": "I find a bug \uff0cif use `RowNumber` of paging\uff1a\r\n```csharp\r\nservices.AddDbContext<EFDbContext>(\r\n    options => options.UseSqlServer(Configuration.GetConnectionString(\"XXX\"), x => x.UseRowNumberForPaging())\r\n    );\r\n```\r\nAt this point, the orderby fields and select the fields can't be the same\uff1a\r\n```csharp\r\nvar test = await _users.OrderBy(i => i.Id)\r\n    .Select(i => new UserInfo\r\n    {\r\n        Id = i.Id\r\n    }).Skip(0).Take(30).ToListAsync();\r\n```\r\nthe translation of sql\uff1a\r\n```sql\r\nexec sp_executesql N'SELECT [t].[Id]\r\nFROM (\r\n    SELECT [i].[UserID] AS [Id], ROW_NUMBER() OVER(ORDER BY [Id] DESC) AS [__RowNumber__]\r\n    FROM [User] AS [i]\r\n) AS [t]\r\nWHERE ([t].[__RowNumber__] > @__p_0) AND ([t].[__RowNumber__] <= (@__p_0 + @__p_1))',N'@__p_0 int,@__p_1 int',@__p_0=0,@__p_1=30\r\n```\r\nError info \uff1a`the column name 'Id' is invalid`\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amirreza58": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9440", "title": "EF Core 2.0 includes not accessible in WHERE with NotMapped Property", "body": "I have 2 entity \r\n```c#\r\n    public class ProductsTable\r\n    {\r\n\r\n        [Key]\r\n        public int id { get; set; }\r\n\r\n        public string name { get; set; }\r\n\r\n        public bool track_inventory { get; set; }\r\n        .\r\n        .\r\n        .\r\n        .\r\n        .\r\n\r\n        /* ---------------------------------------------------------------------- */\r\n        /*\tRelations\r\n        /* ---------------------------------------------------------------------- */\r\n        public virtual ProductsInventoryTable ProductsInventory { get; set; }\r\n\r\n\r\n        /* ---------------------------------------------------------------------- */\r\n        /*\tExtra \r\n        /* ---------------------------------------------------------------------- */\r\n\r\n        [NotMapped]\r\n        public int view_availability\r\n        {\r\n            get\r\n            {\r\n                int retValue = 0;\r\n\r\n                .\r\n                .\r\n                .\r\n\r\n                if (track_inventory) {\r\n                    if (ProductsInventory.stock <= 0)\r\n                    {\r\n                        return 1;\r\n                    }\r\n                }\r\n\r\n                return retValue;\r\n\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n```\r\n```c#\r\npublic class ProductsInventoryTable\r\n    {\r\n\r\n        public ProductsInventoryTable()\r\n        {\r\n            stock = 0;\r\n        }\r\n\r\n\r\n        [Key]\r\n        public int id { get; set; }\r\n\r\n        public int product_id { get; set; }\r\n        public int stock { get; set; }\r\n\r\n        public virtual ProductsTable Product { get; set; }\r\n\r\n```\r\nand there relations (works well in EF core 1.x)\r\n\r\nthis code works well in EF core 1.x:\r\n\r\n```c#\r\n                _dbContext.products\r\n                        .Include(x => x.ProductsInventory)\r\n                        .Where(x => x.view_availability == 0)\r\n                        .AsNoTracking()\r\n                        .ToList();\r\n\r\n\r\n```\r\nafter upgrading to EF core 2.0.0 with same database :\r\n\r\n```\r\nException message: NullReferenceException: Object reference not set to an instance of an object.\r\nStack trace: (ProductsInventory.stock == 0) { return 1; }\r\n```\r\nNullReferenceException for ProductsInventory ,its looks like view_availability property dose not access to ProductsInventory \r\n\r\n\r\nthis code works :\r\n```c#\r\n                _dbContext.products\r\n                        ...\r\n                        .Where(x => x.ProductsInventory.stock > 0)\r\n                        ...\r\n                        .ToList();\r\n\r\n```\r\nso my ProductsInventory is not null\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system: Server 2016\r\nIDE: Visual Studio 2017 15.3\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "twistedtwig": {"issues": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9416", "title": "Multiple context operations in parallel - how to find - call stack in thread pool", "body": "I'm getting this exception -\r\n\r\n```\r\nSystem.InvalidOperationException: 'A second operation started on this context before a previous operation completed. Any instance members are not guaranteed to be thread safe.'\r\n```\r\n\r\nI understand the reason for this, however I've carefully checked and there's no async / multithreaded code I can see anywhere.  The stack trace is simply:\r\n\r\n```\r\n>\tMicrosoft.EntityFrameworkCore.dll!Microsoft.EntityFrameworkCore.Internal.ConcurrencyDetector.EnterCriticalSection()\tUnknown\tNon-user code. Skipped loading symbols.\r\n \t[Aspect Code]\t\tAnnotated Frame\r\n \tSystem.Private.CoreLib.ni.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\tUnknown\tNon-user code. Skipped loading symbols.\r\n \tSystem.Private.CoreLib.ni.dll!System.Threading.QueueUserWorkItemCallbackDefaultContext.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\tUnknown\tNon-user code. Skipped loading symbols.\r\n \tSystem.Private.CoreLib.ni.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()\tUnknown\tNon-user code. Skipped loading symbols.\r\n```\r\n\r\n### Steps to reproduce\r\nBig and complex project - can you assist with some tips as to how to track down which query is being executed, etc?  There are no async calls I can see, and no multithreaded code.\r\n\r\n### Further technical details\r\nEF Core version: 1.1.2\r\nDatabase Provider: Microsoft.EntityFrameworkCore.SqlServer\r\nOperating system:  Windows 10\r\nIDE: VS 2017 15.3 Preview 7\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/9416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tonysneed": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b271241a28c7f19fdf259add3a576880ec72a710", "message": "Generate DbContext Class in a Different Location\n- Add outputDbContextDir to ReverseEngineerScaffolder.Save\n- Add outputDbContextDir to OperationExecutor.ScaffoldContext\n- Add outputDbContextDir to DbContextScaffoldCommand"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/f44eaa4bbd80e0223cf5888d67627405f14629eb", "message": "Change private methods to protected virtual in DbContext and EntityType generators.\n- CSharpDbContextGenerator: GenerateClass, GenerateOnConfiguring, GenerateOnModelCreating\n- CSharpEntityTypeGenerator: GenerateClass, GenerateConstructor, GenerateProperties, GenerateNavigationProperties, GenerateEntityTypeDataAnnotations, GeneratePropertyDataAnnotations"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/06e5d9256963b8eca7decab7f8005feb249bcfb3", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/2fba6acf814f589082e9d7abed630392a0aa521c", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b1d0b41d0cc8da905e57436ca19a4eba06e8b960", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/305b1a92ffb78f518feb63318e100911fbd13632", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemcmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e0a5cc1c89cf1d324afb489307ea68e0adb27cb1", "message": "Add DebugNoBenchmarks and ReleaseNoBenchmarks configurations to EFCore.sln"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/8af0dbe6327e08e47c7cff7ae31a83bd55f7539e", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config (#10355)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e76f8f3d179ff274e5f2ac4c716b206880ab1781", "message": "Pin tool and package versions to make builds more repeatable"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/98f4a94b89bec705bc9377e2609c5c0807d01417", "message": "Update build tools to 2.0.2-rc1-15526 and dependencies to 2.0.1-rtm-105"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/af922b9bfa36fb4681136b22f9e424f1f59fab6f", "message": "Merge branch 'rel/2.0.1' into dev\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/f0ba982b5827c9f9cf32de03af8448036dc1da9d", "message": "Remove floating versions, disable myget feeds during a Universe build, and use package-specific variable names"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/03a6bfe4fab266eda13596b9c08af1ed8477b0a4", "message": "Workaround xunit/xunit#1487 (#9988)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/cb2a01342373454d57a02331b038f5d6590bd7c6", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/dfcff475df3a9961d90075d42c1a511e5b2e0bd8", "message": "Import dependencies.props last to ensure TargetFramework is set first"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/295ac8a1ce5c01195f8f31b0d7f89da77822c570", "message": "Update build scripts, tools, and dependencies for 2.0.x"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/0c3c6f85ab38dbd44f59ca1e47b428f83aa613e5", "message": "Update the list of packages patching in 2.0.x"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/655660fecccd750ac4f8104c04c1edf5a247538d", "message": "Append build number to the version suffix (#9845)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/43f5e886bd994955aa8cee8eb99ecdfd50f31f7e", "message": "Update package feeds and dependencies for 2.0.1  (#9843)"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b3fad08997b417f04093b13a2374f303a4feedf7", "message": "Add PackageType to EFCore.Tools.DotNet.csproj so cross-repo analysis recognizes this is not a normal PackageReference"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/06d2931bd86ade1ca3204d49d6604b732d4482b1", "message": "Update version.props and set PackageId in csproj"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43961233", "body": "Issues to consider:\n- [ ] Server generated values. ATS does not generate values. --> ignore or throw an error when a property is configured as server-generated?\n- [ ] Handling updates to modified objects. Should this be an Update or Replace? https://github.com/aspnet/EntityFramework/pull/181#discussion_r12900588\n- [x] Composite key support. ATS requires ParitionKey and RowKey, the combination of which must be unique\n- [x] Mapping an entity in ATS to a POCO when the entity in ATS does not match the properties/fields expected.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43961233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44556064", "body": "Oops, accidentally merged this by pushing to the wrong repo. Had to recreate this pull request here: #267 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44556064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7019798", "body": "@bricelam My build fails after this commit. I had to manually create ~/.kpm/packages, but KPM doesn't restore packages to this dir. Do I need to change my config somewhere?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7019798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13404724", "body": "@smitpatel you can also pull the latest Microsoft.Data.Sqlite (\u2265 15626) from CI drops (or the aspnetvolatiledev feed).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13404724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13505718", "body": "Debug?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13505718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13808410", "body": "@wangkanai already did 2 weeks ago: https://github.com/aspnet/EntityFramework/commit/a87fe44345d3b07b202044d299ad69672c591400\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13808410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822016", "body": "It was localdb only. I didn't bother looking for a KB number.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822215", "body": "I don't believe we have the same issue there. This was specific to EF7's composite foreign keys.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822254", "body": "Yup.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13822254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13929896", "body": "Will these package versions still work on UWP?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13929896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13935157", "body": "We needed this section for UWP to work. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13935157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15455358", "body": "@anpete this actually causes the test to fail in InMemory (maybe others too)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15455358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15687021", "body": "Are we intentionally not changing the sln file? e.g. `EntityFramework.sln` to `EntityFrameworkCore.sln`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15687021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15687144", "body": "Definitely a nit picky change. I wouldn't worry about it. The repo name is still `EntityFramework` anyways\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15687144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15694163", "body": "Can you open a bug and include your project json and project lock json files?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15694163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15694861", "body": "Oh, I misread your comment. I thought you meant adding to a UWP project caused a build error. I'll update to fix.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15694861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15711979", "body": "Note: (since can't put TODOs in JSON): This was to fix the Visual Studio compiler (still using DNX) even though dotnet compile works just fine. We can removed this TFM once VS tooling updates.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15711979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16574796", "body": "This is not safe to include since \"f__AnonymousType104\" can change from run to run.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16574796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16787916", "body": "@pranavkm compile errors still :( aspnetcidev still has an old version Microsoft.Extensions.DependencyModel 1.0.0-beta-001584 \n\ncc @mikary @bricelam \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16787916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16809133", "body": "Is this version change in RC2 packages as well? I could only find RC3 packages with \"4.1.0\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16809133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16866986", "body": "@anpete this appears to have some issues on .NET Core/Linux....not sure why.\n\n```\nAsyncQuerySqlServerTest.Concurrent_async_queries_are_serialized [FAIL]\n\nAssert.Equal() Failure\nExpected: 5\nActual:   0\n   at Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.AsyncQuerySqlServerTest.<Concurrent_async_queries_are_serialized>d__7.MoveNext()\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16866986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16867592", "body": "@anpete if it fails w/ comparison to \"M\u00e9xico D.F.\", then there could be an underlying Linux i18n bug. Reordering the tests will show if the others pass.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16867592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16868905", "body": "I'm gonna open another issue to investigate this more. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16868905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345630", "body": "...why?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345633", "body": "Where can I get the package that has these new apis? My compiler can't find Microsoft.DotNet.InternalAbstractions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345633/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345674", "body": "Ok. Reopening https://github.com/aspnet/EntityFramework/issues/5212 to track the fix\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17345674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17387977", "body": "Looks like we missed one: Microsoft.EntityFrameworkCore.Tools.Cli is still \"1.0.0-*\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17387977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17511791", "body": "Looks like some tests starting failing as a result of this \n\ncc @dougbu \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17511791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17653980", "body": "cc @cesarbs \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17653980/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17683890", "body": "@lajones this change causes the tests to fail against SQL 2008.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17683890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18249199", "body": "We need this!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18249199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18249277", "body": "Yes, I'm using cli 3180 and the glob \"`**/*.sql`\" is still pulling files from bin/.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18249277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18417009", "body": "Is building and running tests w/o src something we need to support? If so, this is likely only one of many problems you'll encounter.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18417009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18419539", "body": "> for some reason EF has been set up differently\n\nEnd-to-end tests for `dotnet-ef` is one reason. In 1.0 they don't run on CI because they are flaky, but w/o src they will fail....but that's probably not important for the patch release\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18419539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/143315214", "body": "Yes, this means you're building against the last successful build, at least at the moment. The plan is to make tools to automate updating dependencies.props. We'll build these tools before we put this on dev.\r\n\r\nFor now, if you need to work on rel/2.0.1, feel free to manually update any 2.0.1-rtm-* packages to newer builds as needed.\r\n\r\nAlso FYI - the versions in this file are overridden during a run of aspnet/Universe.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/143315214/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157857545", "body": "https://github.com/aspnet/Universe/blob/dev/build/external-dependencies.props", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/157857545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/135126075", "body": "FYI - this will also be installed by default when you run `build.cmd` or `build.cmd /t:Restore`. Since it's not needed for a regular run, we could introduce a new condition, something like this:\r\n\r\n```xml\r\n<DotNetCoreRuntime Include=\"1.1.2\"  Condition=\"'$(IsBuildingBenchmarks)' == 'true\"/>\r\n```\r\n\r\nThoughts @smitpatel ?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/135126075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/114637145", "body": "Try `TargetFramework=` (singular).", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/114637145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/114639631", "body": "Second idea: use the binary logger feature I emailed the team about yesterday. Search for the TestProjects target and look so see that the EFCore.SqlServer.FunctionalTests project is correctly invoked with TargetFramework. The binary logger will show you details about property reassignment as well, so you should be able to see what's causing the TargetFrameworks value to be ignored.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/114639631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152120390", "body": "Who are your other consumers?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152120390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152139789", "body": "Yeah, this issue is larger than this particular PR.  Code in EFCore versus code in aspnet/Universe is an issue I'm not prepared to tackle yet. I have ideas for how we might solve this one, but definitely out of scope.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/152139789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Djangoum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/2a6ccad8821f9360ae753bce41d63811185b8912", "message": "Implementation of FreeText translation for SqlServer"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/cefd7f6af7413923ec3f797c76a9906e0572d17a", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6fbd2ba72226d2190cb3d792bd61ece6099c3241", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/64dd90669f7e53c065ecf6e2ca7eb3db114fcb03", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/5ec68abad388d23946f04df2abbd04627ef7edf9", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/b177b899ef187bdc3b7311275ea05d2f74295626", "message": "Update bootstrappers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124681594", "body": "Is there a specific reason you guys are on 4.6.38-alpha instead of 4.7.1 like the rest of the repos? Is so we might have to find another solution for you.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124681594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124856206", "body": "Hmm, ok. @mikeharder and I were wanting all the Universe repos to be warning free for 2.0.0. Do we think getting #7627 done for 2.0.0 is realistic or do we need to pursue another solution?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124856206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Xtrophic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/36bbec18a84d7eb3f94f7fdfa22e2002eea878ab", "message": "Adding a null check to prevent SqlCommand exception trying to assign an UDT type to an empty parameter value. #10214 (#10455)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LucyParry": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/199c5b863e51fc0cf43cf73c226265d7bb6f472f", "message": "Fixed typo - accomadate -> accommodate"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mardoxx": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/2197ef2c0dcc06fa162b0525d66757ad52e01257", "message": "Fix log time output (#10246)\n\n* fix #10223\r\n\r\n* RelationalLoggerExtensionsTest -> DbParameterCollectionExtensionsTest"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shaynevanasperen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/e70d7daef78b7ef76f989277c0b63bc6a666acf6", "message": "Add checks for concurrency tokens in Update and Delete methods of InMemoryTable. Fixes #10157 (#10158)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "javiercn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/d1cdf277a49f4fb3c0d68b1a5adb3b75ee98896a", "message": "Mark the reference to Microsoft.AspNetCore.Hosting.WebHostBuilderFactory.Sources with PrivateAssets=All"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/28a581535b6f84932eb41015472709fe1b1c6af4", "message": "Update AppServiceProviderFactory to use WebHostFactoryResolver"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pmiddleton": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/843929da0c1bc90813178e8fa16edf9dbbeb58df", "message": "Add support for private and protected methods in DbFunctions"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/52e28929631c2cdc06a58ec510fd360f0b6f7002", "message": "Convert UdfDbFunctionSqlServerTests to use AssertSql pattern"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/0edbe21da611c535eab455cbac16db107f2bfe9d", "message": "DBFunctions - Add support for instance methods."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chrisAmelinckx": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/83fa1989af47ee8c7c656191349ba12829580ad5", "message": "Resolves #9820 use-database-names for Scaffolding DBContext columns, tests"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikeharder": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/6a74dbe089dabe9148a209de5ff10a279f042eb0", "message": "Change line endings in git index from \"crlf\" to \"lf\" (#9990)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124862755", "body": "I can try to upgrade Moq and see if I can fix the test failures.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/124862755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nathankodilla": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/4984cbc9a0ba8b354855de5d70fb455216bce381", "message": "Fixed spelling mistake"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/commits/fde3acb2fdea413829d8d6870b1ea9ca0f083aef", "message": "Update Minimum Version of Visual Studio to 15.3.0 (#9875)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KallDrexx": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/10438", "title": "Added scaffold line argument to not put connection string in dbcontext", "body": "Current database-first workflows require running the `dotnet ef scaffold` command any time database updates have been done so the `DbContext` (and all associated POCOs) reflect the current schema.  \r\n\r\nHowever, the current scaffold command creates a `DbContext` that contains an `OnConfiguring()` method that contains the connection string that was used for context generation.  When running scaffold command after every update it is easy to forget to strip the connection string out prior to committing to source control.  It can also lead to accidental scenarios where the `DbContext` is using this connection string instead of the proper one for its environment (e.g. development database when it should be connecting to production).\r\n\r\nTo remedy this I added a command line option for the scaffold command of `--dont-add-connection-string`.  When this is provided it scaffolds the `OnConfiguring()` method (so users can see that the override exists) but it does not add the connection string to the generated code.\r\n\r\nThis will allow users to execute scaffolding without having to worry about sensitive information being checked into source control.\r\n\r\nReferences issue #10432\r\n\r\n\r\n**Please check if the PR fulfills these requirements**\r\n\r\n- [x] The code builds and tests pass (verified by our automated build checks)\r\n- [x] Commit messages follow this format\r\n```\r\n    Summary of the changes\r\n    - Detail 1\r\n    - Detail 2\r\n\r\n    Fixes #bugnumber\r\n```\r\n- [ ] Tests for the changes have been added (for bug fixes / features) **Not done since no scaffolding tests could be found**\r\n- [x] Code meets the expectations our engineering guidelines. https://github.com/aspnet/Home/wiki/Engineering-guidelines.\r\n\r\nPlease review the guidelines for CONTRIBUTING.md for more details.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/98145576", "body": ":+1: \nPlease also provide annotation for uniqueness constraint as a model `convention`, so we don't have to \"drop down\" to [manual model builder](https://github.com/aspnet/EntityFramework/pull/866#issuecomment-98000296) `configuration` probably like so:\n\n``` c#\n[Unique]\npublic int MySurrogateKey { get; set; }\n// here MySurrogateKey can be null as a unique value\n```\n\n``` c#\n[UniqueNotNull]\npublic int MySurrogateKey { get; set; }\n// here MySurrogateKey can not be null\n```\n\n``` c#\n[UniqueAllowNull]\npublic int MySurrogateKey { get; set; }\n// here MySurrogateKey can be null multiple times, but non-null values should be unique\n```\n\ncopy: @Tratcher, @davidfowl, @NTaylorMullen\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/98145576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/114485782", "body": "I'd like to voice my need for `ON DELETE SET NULL` support.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/114485782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/97934734", "body": "Could you please elaborate how to use it without configuring the dbcontext via model? Is it so that we can use it in model as follow:\n\n``` c#\n[Unique]\npublic int SomeSurrogateKey { get; set; }\n```\n\nIf such an attribute is available now, please consider putting it in some news highlight blog/article, because as far as I can tell, this feature (marking property as key using C# decorator in model) has high demand in ASP.NET MVC dev community.\n\nThanks in advance.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/97934734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/60868932", "body": "This is basically disconnected graph support.  How disconnected graph support is not Priorty numero uno I have no clue.  Just what applications being built keep their entities connected?  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/60868932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/269396418", "body": "So curious about when, if ever, this is going to be implemented. \r\n\r\nThis is a complete blocker for our adoption of EntityFramework Core, and obviously a blocker for a lot of other teams based on the commentary. I recognize the complexity of the problem, but this, along with lazy loading, are the reason we've stayed away from core in general.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/269396418/reactions", "total_count": 21, "+1": 14, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 7}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71396775", "body": "The old version of EF weakened the need for creating repository abstractions since DbContext and DbSet seem to function as the unit-of-work and repository.  The newer version of EF 7 takes this a step further with the introduction of nosql databases.  The repositories that developers created end up being a repository repository when its used in conjuction with EF.  \n\nUsing xml requires an extra layer of abstraction in order to switch between xml and EF currently, though that may not need to be the case. \n\nAn EF xml/whatever data provider (for lack of a better term at the moment) could be very useful for:\n- applications that start small\n- prototypes that are developed to show off to users in order to gain feedback quickly.\n- applications that ride the line of needing something small up to a sql database depending on the consumer.\n\nInmemory is only for testing purposes, at least that is my take from it. Maybe the storage doesn't have to be xml, but what I can see is that there is value in having a data provider between the levels of inmemory and sql-server.  \n\nAn application would no longer require an extra layer of abstraction and work just start off with something simple before moving towards using a database.  \n\nIt would give a developer peace of mind that they could  switch their application to using a database later with minimum effort and minimize the loss of work. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71396775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71468812", "body": "The primary two things that I'm looking at are building prototypes or just starting an application.  \n\nThese are times where one doesn't want to get too attached to the prototype, application, or schema.  With a sql database, there are extra mental processes and effort/time devoted to getting the schema right and sometimes wrestling with the quirks of the database.  You can also get caught up in fiddling too much with the schema migrations.  The more time you invest into any of the above, the harder it becomes to just throw it all away.  \n\nAlso you want the focus of your time to be on building out things that users are more interested in. \n\nIn these cases, dealing with SQL can be more of a hinderance. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71468812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71505094", "body": "That would be sufficient. \n\nIt would fall in line with opting into things as you need them. \n\nIt also would help startups to be more willing to throw away their prototypes in order to pivot. And it would free up those of us that work on side projects to focus more on the creative side of things than dealing with the DAL too much upfront.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/71505094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162982953", "body": "@divega, @rowanmiller, wouldn't it make sense to keep this issue opened and add a label <kbd>up for grabs</kbd>. This looks pretty blunt in a wrong way to close the issue when clearly many consumers are asking for `IndexAttribute` feature. At least keep the discussion open to avoid duplicate issues (currently there are 5 closed issues on which people are +1'ing the same feature.. https://github.com/aspnet/EntityFramework/issues/107#issuecomment-162855173).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162982953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/163888718", "body": "@rowanmiller, should https://github.com/aspnet/EntityFramework/issues/2675 be reopened?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/163888718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/107819088", "body": "Sorry for that answer so late, ok for me with the latest nightly build.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/107819088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125653546", "body": "~~Having the same issue with Visual Studio 2013 Update 5. Any fix avl. for that?~~\nOk, this looks like this is another issue.\nWhen I install Visual Studio 2015 Update 5, then \"Entity Framework 5.dll\" can't be found by Add-Migration and Update-Database command.\n\n``` powershell\nPM> Add-Migration test\nException calling \"CreateInstanceFrom\" with \"8\" argument(s): \"Could not load file or assembly 'EntityFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' or one of its \ndependencies. Das System kann die angegebene Datei nicht finden.\"\nAt C:\\Source\\pegasus7\\packages\\EntityFramework.5.0.0\\tools\\EntityFramework.psm1:431 char:5\n+     $domain.CreateInstanceFrom(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : FileNotFoundException\n\n```\n\nWokraround: add Entity Framework 5.dll\" to GAC\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125653546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/126881595", "body": "Is this fixed and shipped with beta6 and VS2015 RTM? \nIn which case should this be closed as resolved?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/126881595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/121758952", "body": "I really dislike the name change. I guess I need to understand the SXS issue and the rationale behind people wanting to do it. To me it seems completely nuts and is asking for trouble. \n\nFurthermore, I believe that this will strongly set the wrong precedence for other package authors and generally make a mess of NuGet. Major version changes will no longer be discoverable through NuGet instead increasing reliance on blogs etc. \n\nDoesn't Entity Framework 7 v1.0.0 seem just a bit odd? \n\nPlease, for the love of the community, don't do this. \n\n:-1:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/121758952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/121087922", "body": "I autocreated a code based model from a datasource. There was a VARCHAR column marked as NOT NULL from the datasources schema, which EF translated into a string field with a RequiredAttribute. However, for this field, EF converts an empty string value to a null value, which then cause validation to fail. Adding the AllowEmptyStrings option to the RequiredAttribute then also requires adding the ConvertEmptyStringToNull option to the DisplayFormatAttribute in order for EF to just leave the value alone even when being set only from code (never displayed); i.e. null is NULL, and different from an empty string being a NON NULL zero length VARCHAR. I suppose adding those two options is not exactly difficult.\n\nMy question is, will EF7 also assume an empty string is the same thing as a null string unless otherwise explicitly told not to via 2 or more Attributes? It's not intuitive that the default behavior when setting a field to an empty string in code, is for EF to then convert it to NULL and then complain a required field does not have a value, when it did and its value was an empty string.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/121087922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/124800379", "body": "Thank you kindly for articulating.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/124800379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125496729", "body": "Also persist on dnx beta7-12275 with entityframework beta7-13844\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125496729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125674128", "body": "I delete the migration files for each update of entity framework.\nIn the new migration files is missing an using on the assembly which include the SqlServerIdentityStrategy. \nI use the command dnx . ef migration add initial\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/125674128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/126197468", "body": "Exactly, i have added the ToString() for each SqlServerIdentityStrategy.IdentityColumn because IdentityColumn is of type enum.\n\nCompilation all right but when applied the migration file with\n\n```\n dnx . ef migration apply initial\n```\n\nI have the error below\n\n```\ndnx.exe : System.InvalidCastException: Le cast sp\u201acifi\u201a n'est pas valide.At line:1 char:1\n+ dnx . ef migration apply initial\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (System.InvalidC...est pas valide.:String) [], RemoteException\n    + FullyQualifiedErrorId : NativeCommandError\n\n   \u2026 Microsoft.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.ColumnDefinition(String schema, String table, String name, String type, Boolean nullable, Object defaultValue, String defau\nltValueSql, String computedColumnSql, IAnnotatable annotatable, IModel model, SqlBatchBuilder builder)\n   \u2026 Microsoft.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ColumnDefinition(AddColumnOperation operation, IModel model, SqlBatchBuilder builder)\n   \u2026 Microsoft.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(CreateTableOperation operation, IModel model, SqlBatchBuilder builder)\n   \u2026 CallSite.Target(Closure , CallSite , Object , Object , IModel , SqlBatchBuilder )\n   \u2026 System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid4[T0,T1,T2,T3](CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3)\n   \u2026 Microsoft.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(IReadOnlyList`1 operations, IModel model)\n   \u2026 Microsoft.Data.Entity.Migrations.Migrator.ApplyMigration(Migration migration)\n   \u2026 Microsoft.Data.Entity.Migrations.Migrator.ApplyMigrations(String targetMigration)\n   \u2026 Microsoft.Data.Entity.Commands.MigrationTool.ApplyMigration(String migrationName, String contextTypeName, String startupAssemblyName)\n   \u2026 Microsoft.Data.Entity.Commands.Program.<>c__DisplayClass13_0.<ApplyMigration>b__0()\n   \u2026 Microsoft.Data.Entity.Commands.Program.Execute(String startupProject, Func`1 invoke)\n   \u2026 Microsoft.Data.Entity.Commands.Program.ApplyMigration(String migration, String context, String startupProject)\n   \u2026 Microsoft.Data.Entity.Commands.Program.<>c__DisplayClass10_3.<Main>b__9()\n   \u2026 Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args)\n   \u2026 Microsoft.Data.Entity.Commands.Program.Main(String[] args)\n--- Fin de la trace de la pile \u2026 partir de l'emplacement pr\u201ac\u201adent au niveau duquel l'exception a \u201at\u201a lev\u201ae ---\n   \u2026 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   \u2026 Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   \u2026 Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   \u2026 Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n--- Fin de la trace de la pile \u2026 partir de l'emplacement pr\u201ac\u201adent au niveau duquel l'exception a \u201at\u201a lev\u201ae ---\n   \u2026 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   \u2026 Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   \u2026 dnx.host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\n   \u2026 dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   \u2026 dnx.host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n```\n\nI think that the string \"1\" is unrecognized by the Annotation method, may be \"IdentityColumn\" ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/126197468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153131281", "body": "Hummm... I have 79 classes and i don't know these that throw the exception :(\nI will load the entity framework into visual studio 2015 and break the methods above.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153131281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153617918", "body": "Well, once loading the entity framework in the solution, i have a new exception in the EntityFramework.Commands \n\n```\ndnx.exe : System.TypeInitializationException: Une exception a \u201at\u201a lev\u201ae par l'initialiseur de type pour 'Microsoft.Data.Entity.Commands.Program'. ---> System.IO.FileLoadException: Impossible de charger le fichier \nou l'assembly 'Microsoft.Extensions.PlatformAbstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' ou une de ses d\u201apendances. Un assembly avec un nom fort est requis. (Exception de \nHRESULT : 0x80131044) ---> System.IO.FileLoadException: Un assembly avec un nom fort est requis. (Exception de HRESULT : 0x80131044)At line:1 char:1\n+ dnx ef migrations add initial --context MediagralV2Entities\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (System.TypeInit...T : 0x80131044):String) [], RemoteException\n    + FullyQualifiedErrorId : NativeCommandError\n\n   --- Fin de la trace de la pile d'exception interne ---\n   \u2026 Microsoft.Data.Entity.Commands.Program..cctor()\n   --- Fin de la trace de la pile d'exception interne ---\n   \u2026 Microsoft.Data.Entity.Commands.Program..ctor()\n\nSystem.IO.FileLoadException: Impossible de charger le fichier ou l'assembly 'Microsoft.Extensions.PlatformAbstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' ou une de ses d\u201apendances. \nUn assembly avec un nom fort est requis. (\nException de HRESULT : 0x80131044)\nNom de fichier\u00ff: 'Microsoft.Extensions.PlatformAbstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' ---> System.IO.FileLoadException: Un assembly avec un nom fort est requis. (Exception \nde HRESULT : 0x80131044)\n   \u2026 Microsoft.Data.Entity.Commands.Program..cctor()\n\n\nSystem.IO.FileLoadException: Un assembly avec un nom fort est requis. (Exception de HRESULT : 0x80131044)\n```\n\nThe Microsoft.Extensions.PlatformAbstractions assembly or one dependencies required an assembly with a strong name.\nHow can i debug the program ? otherwise an archive which contain the entities and MediagralV2Entities that's the dbContext [Entities](http://uptobox.com/y4xd43z6kekz)\n\nUPDATE \nAfter a complete update of the whole package and a pull of entity framework, the exception not occurred\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153617918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153640733", "body": "I deleted the hierarchies proceeding by step to detect an eventually intermediate error without success, now the migration no generate errors, but the entities are very ugly :(\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153640733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153712213", "body": "Ok i find the entities which throw the exception, they are the entities of base class product and entity,\nI don't declare of discriminator for these classes.\n\nThe exception is throw in Generate of CSharpMigrationOperationGenerator line 39\n\nMy latest migration with any error is 7.0.0-rc1-15945, i think it is just before that the migration verify the root in the declaration of discriminator.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/153712213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/158637301", "body": "Well, the exception occurred because i have the same property into two derived classes and the fluent api use an discriminator for the base class. Just added the entity name and the property name in the message that simplifying research.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/158637301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/159499432", "body": "Oops, I was on the beta 8 for the test, after correction the error appear still on the rc1.\nAnd also I have the error, describe above, on rc1 that seeks to apply the discriminator on all tables with base class without discriminator defined by the fluent api.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/159499432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162447698", "body": "Yes, it's a dupe of [#3061](https://github.com/aspnet/EntityFramework/issues/3061)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162447698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/163879242", "body": "The issue is closed but l don't see throw exception code in the command operation to know which table and column is already added, i tested with rc2. I find useful, right ? \nI started the changes in the class because I need it, I can send you by modifcations pull request? if you are interested.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/163879242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/168260137", "body": "@rowanmiller That is just what I wanted thanks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/168260137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/168681412", "body": "How would I be able to detect if the property (using the method above) was an `autoincrement` like the traditional id field?\n\nI can find out if it was a `primary key`, but that does not mean it will `autoincrement`. The reason I would like that information is so that I can flag up a validation error in my application if a value is not supplied for that field, however if its an `autoincrement` I do not need to error since the DB will handle that. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/168681412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/193190848", "body": "@alexkeh (Oracle Corp.), could you please provide some sort of hint whether Oracle team is interested in / working on delivering the EF7 provider sometime around the EF7 RTM (which is pretty soon now)? Is there anything the community can do to expedite this feature request?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/193190848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/98145576", "body": ":+1: \nPlease also provide annotation for uniqueness constraint as a model `convention`, so we don't have to \"drop down\" to [manual model builder](https://github.com/aspnet/EntityFramework/pull/866#issuecomment-98000296) `configuration` probably like so:\n\n``` c#\n[Unique]\npublic int MySurrogateKey { get; set; }\n// here MySurrogateKey can be null as a unique value\n```\n\n``` c#\n[UniqueNotNull]\npublic int MySurrogateKey { get; set; }\n// here MySurrogateKey can not be null\n```\n\n``` c#\n[UniqueAllowNull]\npublic int MySurrogateKey { get; set; }\n// here MySurrogateKey can be null multiple times, but non-null values should be unique\n```\n\ncopy: @Tratcher, @davidfowl, @NTaylorMullen\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/98145576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "moozzyk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35786057", "body": "Looks good to me (and I need StorageName)\n:shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35786057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35783045", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35783045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36575854", "body": "Thanks Andrew!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36575854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36576692", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36576692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37221408", "body": "Thanks Murat!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37221408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37221454", "body": "#febc89e08a\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37221454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37479336", "body": "Thanks Andriy!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37479336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38093274", "body": "Thanks Arthur!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38093274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38227181", "body": "Thanks Andrew!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38227181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38233647", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38233647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38710452", "body": "Thanks Arthur!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38710452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38741326", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38741326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39376418", "body": "Updated the remote branch with a version rebased on the latest changes from the repo.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39376418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39386783", "body": "Thanks Emil and Andrew!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39386783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39515415", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39515415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39519463", "body": "This was just first cut - it will have to evolve for sure especially when we start processing dependent entities and will have to propagate results for them.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39519463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39519570", "body": "Thanks Arthur!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39519570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39597497", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39597497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39597497", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39597497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "muratg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35935974", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/35935974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37051399", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37051399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37212969", "body": ":shipit:  (I've only glanced through the test cases)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37212969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38830530", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38830530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42063027", "body": "(edited this comment below)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42063027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43241809", "body": "@sprengr Did you mean to file an EF6 bug?  Please file EF6 related bugs on CodePlex (http://entityframework.codeplex.com)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43241809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44471113", "body": ":ship::it:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44471113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500736", "body": "Should this return DefaultModelLoader if this is not configured instead?  (If DI already is doing that, maybe the second check is moot)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5500736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5501040", "body": "I know this is temporary, but should we check the last two letters of the name instead?  Folks are used to using \"BlogId\" or similar.  Though this would probably cause issues with FKs.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5501040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5501061", "body": ":shipit: (loved the funny test cases!)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5501061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "emilcicos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36047745", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/36047745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37631996", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37631996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38039731", "body": "Closing. A bunch of stuff here needs to be changed based on the discussions we had.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38039731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38103498", "body": "For the create operations we need a way to specify what needs to be created. The simplest way to do that is to use objects from relational metadata. Otherwise we would have to come up with similar structures, which seems unnecessary to me. The other operations don't refer the relational metadata, unless I missed something.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38103498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39259862", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39259862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39364681", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39364681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39378468", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39378468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39503117", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39503117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39527521", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39527521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40392620", "body": "Brice, if my understanding is correct the whole ...Migrations assembly includes \"design-time\" functionality and is not really needed at run-time, so I am don't think it is necessary to separate the code generation parts into a different assembly. But if you can think of a real-world scenario were that would be helpful, I can easily move those parts into a new assembly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40392620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40392620", "body": "Brice, if my understanding is correct the whole ...Migrations assembly includes \"design-time\" functionality and is not really needed at run-time, so I am don't think it is necessary to separate the code generation parts into a different assembly. But if you can think of a real-world scenario were that would be helpful, I can easily move those parts into a new assembly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40392620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40513003", "body": "I will move the code generation class into a separate assembly as Brice suggested. However, it may be better to move the migration operations into the Relational assembly in which case there won't be a need to create this extra assembly with one class. Those operations are practically database operations, not really migration operations.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40513003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42776065", "body": "Ok, added unit test.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42776065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42454972", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42454972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44468852", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44468852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7955404", "body": "It is not right and will change. I probably tried to verify something quickly by adding a reference in VS (instead of manually adding a PackageReference, running build.cmd initialize, etc), then I checked-in so I can continue from home. Note that this is a private branch with work in progress.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7955404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "lajones": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37705358", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37705358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37884713", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/37884713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40246022", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40246022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40246022", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/40246022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42496589", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42496589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44317600", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44317600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44475571", "body": "Looks good to me. :shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44475571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5442665", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5442665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5504786", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5504786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7212186", "body": "@anpete Apparently GetTempPath() has been overridden on the CI machines to return a directory under the C:\\BuildAgent dir. have updated to use the TMP environment variable instead.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7212186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915188", "body": "Specific to Azure Table Storage\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915229", "body": "OK. Will do.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12138262", "body": "Well-spotted! Will do.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12138262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12644663", "body": "@ErikEJ You mean make it so the provider-writer only has to provide the string \"UseSqlServer\" and everything else is done for them in DbContextGeneratorHelper? Sure. I can do it that way. \n\nUpdate: I've added a new commit so that now all the provider has to provide is the name of the UseXXX() method.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12644663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12958890", "body": "Will remove the commented out code below.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12958890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14836484", "body": "Will remove this empty `ItemGroup`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14836484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "rowanmiller": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38977871", "body": "Updated with review feedback thus far\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/38977871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39503327", "body": "Hey, yeah this is a known limitation. We currently don't have an 'AcceptChanges' implementation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/39503327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41832807", "body": "@rustd Can you provide some more details on what this means? :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41832807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64700076", "body": "@HaoK - Can you check if this works now?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64700076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64700122", "body": "@AndriySvyryd  Consider this with convention based discovery\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64700122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64703330", "body": "@HaoK @AndriySvyryd Ignore previous comments, we missed that the nav prop has a target type that is an unmapped base type. This won't work and we aren't planning to implement it now. Also didn't work on EF6.x.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64703330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44305930", "body": "Closed as demo for HuBoard, reopening :smile_cat: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44305930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41832401", "body": "Identity will keep an upper/lower version of the name in separate properties.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41832401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41832281", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41832281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42466256", "body": "Checked in\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42466256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43822733", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43822733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64703442", "body": "This is being covered as part of https://github.com/aspnet/EntityFramework/issues/192\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64703442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42465877", "body": "We're happy with what we have and will continue to evolve as DI and EF evolve.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42465877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/117258096", "body": "+1 for `[StringLength]`\nWe also need to discuss `[ForeignKey]` and `[InverseProperty]`. My gut feel is we should probably support them with the same rules we had in EF6.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/117258096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43822810", "body": "Currently blocked on where the WindowsIdentity bits are going to live.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43822810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64700602", "body": "Blocked on getting working build from SQL team\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64700602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41599222", "body": "I'm not able to reproduce this. Just looked at a repro with @Praburaj and it had mismatched versions of SqlServer and the other Microsoft.Data.\\* packages. This all works with the latest ones (confirmed on @Praburaj machine too).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41599222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64692311", "body": "@AndriySvyryd @divega - Can this be closed? (it has the Done tag on it)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64692311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64693057", "body": "@divega @anpete  - This is tagged as Done but I think we are still waiting on updated Ix-async build? If so, I'll move it back and mark it as blocked.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64693057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/65872018", "body": "Closing this as we decided in triage that we only need one issue to track removing the workaround once we upgrade ix-async (https://github.com/aspnet/EntityFramework/issues/1173)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/65872018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44024510", "body": "Couple of thoughts\n- I think throwing makes the most sense if you try to configure a store generated value\n- I envision some form of Row/Partition Key extension methods to the model builder which would also take care of configuring the two properties as a composite key with the core metadata API.\n- I think we probably need to look at shadow state to make sure we can handle additional fields that may vary per row. This concept is common to many non-relational stores.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44024510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44305930", "body": "Closed as demo for HuBoard, reopening :smile_cat: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44305930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44445857", "body": "Probably a dupe of #255\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44445857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44446103", "body": "Dupe of https://github.com/aspnet/EntityFramework/issues/182\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44446103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44598990", "body": "This is a duplicate of #137\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44598990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9269496", "body": "@lukewaters - You can hang CommandTimeout off RelationalDbContextOptions from this commit\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9269496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270313", "body": "You use it in OnConfiguring rather than OnModelCreating. \n\n```\nbuilder.UseSqlServer(\"...\").CommandTimeout(4000);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9283364", "body": "Sorry, I meant options rather than builder :smile: \nThe idea is that each provider exposes APIs for the things it supports. Some providers may not support batch size etc. so they only have APIs for what you can actually use.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9283364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9878343", "body": "No... must have happened in the rebase I just did, will fix it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9878343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9879544", "body": "Actually it was ReSharper code cleanup (just tested it after reverting)...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9879544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14993259", "body": "If this same string is used elsewhere then we should just create two copies of it (one to use while saving and the other in DDL). For SaveChanges, it's important that we make it clear that the cycle is in data and not the schema.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14993259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17346479", "body": "I'm already working on this, no need for an issue. I was working on the merge from release => dev for this change, but this merge got pushed before I got mine in. There were no merge conflicts - so it wouldn't have been obvious the merge needed work, but the docs didn't match the dev API.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17346479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17356031", "body": "Revert reverted in https://github.com/aspnet/EntityFramework/commit/f33b76c0a070d08a191d67c09650f52c26e34052 \ud83d\ude04 \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17356031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "rustd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41839075", "body": "@HaoK @divega \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41839075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44604123", "body": "@HaoK can you take a look and use it in Identity\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44604123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "HaoK": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41839702", "body": "We'd like to define our navigation properties using a generic base type.  Currently we are forced to take a concrete type which has no generic parameters for EF to work correctly \n\n```\npublic class User<TKey> {\n    public ICollection<UserClaim<Tkey>> Claims\n}\npublic class UserClaim<TKey> {\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41839702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64747819", "body": "Yeah Identity can work around any navigation property issues in general, so this shouldn't be blocking.  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/64747819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42224368", "body": "It looks like the default logic for strings needs nullable support?  I can work around this bug by setting all the string properties to \"\" in the constructor for default values.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42224368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ghk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/139820417", "body": "+1 for IndexAttribute\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/139820417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "reekoheek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162855173", "body": "+1 for IndexAttribute\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/162855173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Yorie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/143804276", "body": "+1 for IndexAttribute, that was nice feature. Of course in parallel with \"fluent API\" implementation.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/143804276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "salarcode": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/134932646", "body": "How about the ability to change column name?\n\n```\n[Column(Name = \"\")]\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/134932646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135944107", "body": "+1 for IndexAttribute\nI don't know what changes you think of, but the Index itself and the IsUnique property is essential in my opinion, other properties are not that much.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135944107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rposener": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/157532756", "body": "+1 for IndexAttribute\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/157532756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pauldalyii": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/91295450", "body": "I ran into another scenario where this issue causes problems.  \n\nBecause .MaxLengh() isn't being honored on string properties, nvarchar(MAX) fields are generated in the db.  Unique constraints aren't supported on nvarchar(MAX) fields, so an error is thrown during db generation not for applying the .MaxLength() annotation, but when you apply a Unique constraint on a string property where you think you've limited the length.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/91295450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yukozh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/145182829", "body": "+1 for IndexAttribute\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/145182829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/160414771", "body": "@divega \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/160414771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "farlop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/139474928", "body": "+1 for IndexAttribute.\nI prefer to use DataAnnotations over FluentAPI whenever its possible. Keeps the code easier to understand.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/139474928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "justdmitry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135143699", "body": "What about `Index` attribute? Defining non-unique indexes very popular/important feature. But I can't find issue about it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/135143699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "YZahringer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/154822320", "body": "+1 for IndexAttribute\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/154822320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "staff0rd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/139782971", "body": "I've always thought that something like \n\n```\nentity.Property(e => e.ShipDate).DefaultValueSql(\"getutcdate()\");\n```\n\nshould instead be (or at least support) something like this;\n\n```\n[DefaultValueSql(\"getutcdate()\")]\npublic DateTime ShipDate { get; set; }\n```\n\nWould this be considered for inclusion, or is it something an extension library should offer?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/139782971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "PavelKalsin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/160413610", "body": "+1 for IndexAttribute\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/160413610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "19317362": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/333532899", "body": "+1 for IndexAttribute.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/333532899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Eilon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/55297394", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/55297394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44108882", "body": "Hi @MrJingle great find! Unfortunately we can't accept contributions just yet, but we're working on it, so once we allow that, we can work with you on this PR. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44108882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290511", "body": "Would be interesting to tie this into the general tracing discussions that at some point need to happen. I don't think anyone has even started to look at it yet because the general tracing feature is not for alpha. I assume that in the meantime it's useful to have _something_ in the Data stack just for debugging purposes?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290532", "body": "Just wondering - is our MyGet feed \"poisoned\" by having a 0.1-pre-\\* of this package in there? I'm not sure if the Data package was pushed already to MyGet. I could imagine this might cause some issues with SemVer at some point. If needed, we can go delete the poison packages from MyGet.\n\nBTW I think we said in the doc we wanted to use 0.1.0-alpha-\\* for the versions. Not sure it makes any practical difference but it might be good to be consistent on these anyway. (For all I know, _all_ our packages have this wrong right now.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5297563", "body": "@pranavkm do you want to work with @anpete to figure out what might need to be deleted with the feed? Me, @loudej  and @davidfowl have access to delete stuff from the feed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5297563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299720", "body": "Yeah I think this might be good to put in the Logging repo, even if it's not fully designed for the breadth of scenarios that we need. I think even just having a placeholder would be good - and that way when the next person who needs logging looks for something, they'll have something to poke at.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5299720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12591100", "body": "cc @troydai \n\nWe're looking at mirroring these packages so that we don't need as many feeds.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12591100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12591101", "body": "@davidfowl as well\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12591101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12693369", "body": "Right - we're using Roslyn 1.1.x, not 2.x.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12693369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13604170", "body": "@whyi I recommend logging an issue to discuss this. This is a commit from half a year ago and I doubt many are looking at it...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13604170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13622821", "body": "@bricelam yeah I talked to @divega yesterday with similar thoughts.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13622821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22965959", "body": "Yeah this was always the project URL, for better or for worse, e.g. https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/2.0.0-preview2-final\r\n\r\nBut I agree for the EF Core packages we need to change the URL. I'm a little bit hesitant about https://docs.microsoft.com/ef/core/ being the URL unless we're 100% certain that it will be the correct URL for the next ~10 years or so. If we're not certain, then we need to use an FWLink for it.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22965959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9278217", "body": "What's with these R# things here? I don't think we have any intention of using these in our new code base.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9278217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9278832", "body": "FYI we'll end up having a common DotSetting file across all repos, but this is probably fine for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9278832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9278964", "body": "Remove mentions of VB. And no need to mention C# because that's all we should show. I know this will end up for desktop scenarios as well, but we can keep the message clean.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9278964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279049", "body": "Hmm what's this T4 file about? Is this the only we to do resources?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279230", "body": "I want to get rid of these utility classes for two reasons:\n1. They shouldn't be public.\n2. The call stacks are incorrect. I know we discussed this back in EF6, but we need to switch to a consistent model for the new project.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279282", "body": "Is this needed?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279311", "body": "These extensions shouldn't be public.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279352", "body": "Per other comment, we are not planning to put these annotations in our code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279374", "body": "Does this need to be public?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279381", "body": "Not sure we need these extension methods. They just make code more difficult to read because these extensions are not familiar. Just like we don't use \"var\" because it adds mystery to code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279431", "body": "These extensions shouldn't be public.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279911", "body": "Traditionally it's done with VS's ResXSingleFileGenerator. Of course, I have no idea how that will work in the new build system... so I'm not sure what realistic options we have right now that will work both in VS and from command line builds (such as CI).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9279911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9280955", "body": "These utilities are just a different syntax for something that is already super familiar to all .NET devs. There is argument validation to do in a method and it is only that method that should throw exceptions.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9280955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9280976", "body": "Not sure who agreed to this - we need to have consistent standards on this and I have never seen this before.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9280976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9281144", "body": "Hmm very interesting. I remember that from back in the .NET 1.0 days. I guess we have a broader work item to figure out how to do resources in general. I'll add this to the engineering discussion notes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9281144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9281176", "body": "Use InternalsVisibleTo. They should not be exposed as public APIs to customers.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9281176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/130483295", "body": "Done!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/130483295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113996590", "body": "Hmm this is suspicious... what if it was a customer ILoggerFactory? What should happen?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113996590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/130483295", "body": "Done!", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/130483295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134273193", "body": "`two` --> `too`", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134273193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134273518", "body": "I don't think we should add *any* public surface area in a patch, unless it's absolutely required. Can we make this `const` be `internal` and then make it public in the next release?\r\n\r\nThe risk is that a future patch could risk a breaking change because this is an API change in a patch version (for complex reasons I can share internally).", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134273518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134273614", "body": "These probably would have been better as `public static readonly`, no? (Too late now, of course.)", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134273614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134273819", "body": "Actually I think this needs to be `internal` as well...", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134273819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134274011", "body": "And even though this is just a test, it's a \"public test\", so should this be done in a non-breaking way via an overload?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134274011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134302690", "body": "Yeah it was just a question, so if people who \"consume the tests big time\" are ok with it ( \ud83d\ude04 ), then I'm ok with it.\r\n\r\nWith patches my default mode is \"better safe than sorry,\" hence the question.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/134302690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/135595155", "body": "Right, starting with 2.0.x this goes away because the metapackage is what people use and will lift all dependencies. But in 1.0.x/1.1.x with specific package refs, this is what we do to make sure people easily get the latest updates.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/135595155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "rynowak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41345247", "body": "> COM is Love\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/41345247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "suhasj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42699177", "body": "sure I did \n\n![image](https://cloud.githubusercontent.com/assets/1919946/2931908/0d767f32-d7a9-11e3-85fa-27db2ac193e7.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42699177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42699632", "body": "@bricelam : Aaah that's not what I intended. Glad you made me look at it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42699632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42699702", "body": "let me add a SQL database. This bug might not even hold true\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42699702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Praburaj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42847474", "body": "This looks like a sample bug. The sample code still had ifdefs using InMemoryStore for coreclr. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/42847474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44448410", "body": "This is fixed now. Closing this bug. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44448410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gunshots": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43079096", "body": "So i got a identity trying to get my info....how can i stop that from happining again...if it works ....shoot\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43079096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43350441", "body": "Yea, I fixed this in the KRuntime. The compiler now recognizes NuGet package framework references. @bricelam You can remove that from the testing instructions as well :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/43350441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44349094", "body": "Oh csproj how I miss thee :trollface: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/issues/comments/44349094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5227881", "body": "Are you going to call it Entity or Core?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5227881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290827", "body": "I had to manually delete everything that messed up things recently. So yes we should do this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5290827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5293287", "body": "The console logging would also probably be part of the logging assembly. It's pretty fundamental.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5293287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5418699", "body": "Should this go in the DI library?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5418699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5424669", "body": "Seems pretty useful generally @loudej ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5424669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5513505", "body": "I remember we kept this around for a reason but we should nuke these packages.config and make the test csproj only target net45 until @bricelam gets the xunit support for k going.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5513505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5519394", "body": "@anpete Need to change our default targets to build tests. They currently dont\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/5519394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/6423673", "body": "Why not k10?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/6423673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7645712", "body": "Ye it will\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7645712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7645739", "body": "Ahh you're right. I was thinking this would work around the csproj problem. We might need to split the packages......\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7645739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7645825", "body": "We could add a try catch :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7645825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7950333", "body": "This doesn't look right\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7950333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7955532", "body": "Finally!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7955532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9470137", "body": "Is this the root of the universe? I ask because you're injecting the  IServiceProvider instead of the individual dependencies.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9470137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9470346", "body": "tabs! No tabs!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9470346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9470365", "body": "You don't need version numbers for project references.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9470365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9472525", "body": "This is a project reference right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9472525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9472547", "body": "My bad, commented on the wrong one. Look below \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/9472547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/15886794", "body": "What does this do?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/15886794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/16689727", "body": "Not sure what you would file. There'll always be a difference.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/16689727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/17829738", "body": "Yea this should be using the LibraryManager to get the compilation export. Scaffolding does something similar.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/17829738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/18687690", "body": "I thought we were only chaining the no args version of this method\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/18687690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/20661577", "body": "This look right as it was doing this before:\n\n``` C#\n.AddInstance<IHostingEnvironment>(new HostingEnvironment { EnvironmentName = \"Development\" })\n.BuildServiceProvider(CallContextServiceLocator.Locator.ServiceProvider);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/20661577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/21276840", "body": "I wonder if you can do this with a project.json. I think you might be able to\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/21276840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/23270143", "body": "What a hack :stuck_out_tongue_closed_eyes: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/23270143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/26816078", "body": "We might need to look at this a bit. Seems like we might need to be able to boot the hostingEngine without a server (that's what this is). If you replace the IServerFactory you get the same effect.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/26816078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/27363642", "body": "Holy one liner :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/27363642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/29099968", "body": "A library can provide multiple metadata references. Packages do this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/29099968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/29099970", "body": "@bricelam Nope, it's not right for anything bull full CLR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/29099970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/40993191", "body": "This can't be right\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/40993191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43028098", "body": "yes it will\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43028098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43028159", "body": "Tho I dunno if all break. System.Runtime certainly does\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43028159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43315525", "body": "Not unixy enough.\n\n`--target-project`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/43315525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/55395093", "body": "While you're at it, this should be `compileFiles` since it's pointing directly to a file.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/55395093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/55396228", "body": "resource is the right one, it's a bit different just because you can specify the name of the resource.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/55396228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/58145693", "body": "`Thread.MemoryBarrier()`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/58145693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "IDisposable": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7260301", "body": "Why are we replacing .Single calls (which will use a Limit(2) and throw if there is more than one matching row) with First calls (which use a Limit(1) and thus don't detect multiple matching rows)?  This seems like a HUGE change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7260301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10952713", "body": ".ToList().ToList() seems a tad redundant.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10952713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18006449", "body": "Should the argument be `[NotNull] object[] keyValues` ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/18006449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rubenalves": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915961", "body": "Exception:Thrown: \"M\u00e9todo n\u00e3o encontrado: 'System.Threading.Tasks.Task`1<!!0> System.Threading.Tasks.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task`1<!!0>)'.\" (System.MissingMethodException)\nA System.MissingMethodException was thrown: \"M\u00e9todo n\u00e3o encontrado: 'System.Threading.Tasks.Task`1<!!0> System.Threading.Tasks.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task`1<!!0>)'.\"\nTime: 25-09-2014 00:10:21\nThread:<No Name>[10012]\n\nI am getting this error and i think it started with this commit.\n\nRAlves\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7915961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7916030", "body": "I am using the nuget nigly build with.net 4.5.1 in winforms application\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/7916030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lukewaters": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8075301", "body": "@davidfowl Why did you change my project references to package references?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8075301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8924028", "body": "I agree that we should change the connection string to the new LocalDB connection as we now require VS 2015.  It now isn't guaranteed that the developer will have localdb 2012 installed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8924028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9269523", "body": "Ok, I was just about to take a look at that issue\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9269523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270252", "body": "We need a way to access the Relational DbContextOptions from OnModelCreating.  We could use .AsSqlServer() to access it, but since this is a broader relational concept, not simply SqlServer, I think we should add a .AsRelational method to access relational configuration\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270264", "body": "or would we want to construct a RelationalDbContextOptions, then feed that into the SqlServer configuration on the .UseSqlServer command?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270366", "body": "We've only got the builder in OnModelCreating, in OnConfiguring we only have `protected override void OnConfiguring(DbContextOptions options)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270607", "body": "Ok, I'll hang it off of SqlServer, but I'm still not sure I like having it there.  I would prefer to have it on relational\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9270607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10700380", "body": "@troydai sp should this be `GetApplicationBasePath`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10700380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13754349", "body": "This commit is from December, if you think this is an issue, find and mark the line in the current code base\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13754349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "DavidObando": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8390521", "body": "Nevermind the \"parenthesys\" typo, I'll squash before committing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8390521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "victorhurdugaci": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8721881", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/8721881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15867342", "body": "@bricelam if you cannot make it work without the versions then see this https://github.com/dotnet/cli/issues/1171\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15867342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15867353", "body": "And sorry if I broke something :worried: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15867353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rhencke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9460972", "body": "What is asgf?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9460972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9464036", "body": "OH.  Duh.  I was trying to figure out what fancy thing ASGF must be.  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/9464036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "NTaylorMullen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10011328", "body": "Note, `GroupBy_Sum_min_Max_Avg` is failing on CI, assigned to you.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10011328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11440937", "body": "I made a change in aspnet/Razor which broke EntityFramework. Therefore this commit is the reaction to that change in order to get EntityFramework building again.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11440937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11441799", "body": "@divega yes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11441799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15687058", "body": "Hmmm, I don't think it was talked about really. Could rename for consistency.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15687058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "janhagenaar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10302371", "body": "Why dont you use constants for something like that? Or a settings file?\n\nKind regards\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10302371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "troydai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10701600", "body": "Errr, yes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10701600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "rebulanyum": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10755268", "body": "Why do I have to use Visual Studio 12 to be able to open this project?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/10755268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "MaherJendoubi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11438998", "body": "@NTaylorMullen I would like to understand the expression \"React to ...\"! Could you please paraphrase it? Thank you in advance for your feedback and excuse my ignorance.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/11438998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ph1ll": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12589756", "body": "As these packages are not on https://www.myget.org/gallery/aspnetvnext this is a breaking change for most people. Can these packages either be updated on the AspNetVNext feed or get an announcement on https://github.com/aspnet/Announcements/.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12589756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12590255", "body": "@ErikEJ  It does for EF, but not for people using EF in their own projects with their own nuget.config files. I had missing dependency issues in my project when updating from the the AspNetVNext feed just now, updating my nuget.config fixed the issue. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12590255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "noeljiangcc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12683847", "body": "I cannot restore \"Microsoft.CodeAnalysis.CSharp\": \"2.0.0-beta1-*\".\nAnd the latest version of Microsoft.CodeAnalysis.CSharp in https://www.myget.org/F/roslyn-nightly/ is 1.1.0-beta1-20150812-01.\nWhere I can get the 2.0?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12683847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12704294", "body": "Thanks, it works now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12704294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "naster01": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12868272", "body": "Good job. It's more clear.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/12868272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "AlekseyMartynov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13011673", "body": "Is there a corresponding bug report to track?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13011673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "whyi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13596361", "body": "Could we make use of string interpolation here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13596361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13690818", "body": "cosmetic change suggestion : extract \"425-882-8080\" to a constant\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13690818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13742257", "body": "_logger is already dependency-injected in the constructor as a member variable in the AsyncQueryingEnumerable class itself. Why not use that one instead of this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13742257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13754110", "body": "MaxParallelThreads  Overrides the maximum number of threads used per assembly. The default value is determined by the test framework (for xUnit.net v2, it is the number of virtual CPUs in the PC).\nApplies to: xUnit.net v2 (from https://xunit.github.io/docs/running-tests-in-parallel.html)\n\nWould it better to use the default rather than hard coding it to a specific number?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13754110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wangkanai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13808276", "body": "Please change to \n`using Microsoft.Extensions.DependencyInjection;`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/13808276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mikary": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14967488", "body": "The Multigraph is supposed to be general purpose and is used by Migrations in addition to Change Tracking.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/14967488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "BradBarnich": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15668553", "body": "Why was this behavior added? Both sql server and postgres allow nullable columns in a unique key constraint. \nShould I create an issue?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15668553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "BrennanConroy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15776987", "body": "You dont need to do this anymore\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/15776987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "qbikez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16637177", "body": "Where can I get \"$(VSToolsPath)\\DotNet\\Microsoft.DotNet.Props\" from? Is this just a renamed version of \"$(VSToolsPath)\\Dnx\\Microsoft.Dnx.Props\"?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/16637177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jenseralmeida": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17923521", "body": "\"query is made to the _dataabse_ for an entity\" must be \"query is made to the _database_ for an entity\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/17923521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "michaelaird": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19269466", "body": "I think this should also retry on 121. This error often comes up on VIP swaps. https://social.msdn.microsoft.com/Forums/azure/en-US/5e195f94-d4d2-4c2d-8a4e-7d66b4761510/vip-swap-and-the-semaphore-timeout-period-has-expired-errors?forum=ssdsgetstarted\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19269466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19269857", "body": "-2 should be safely retryable if the operation does not have side effects (ie. is just a query). This may be the case for other providers as well. Is it possible for the calling code to determine if there are side effects from the operation and expose that information to the retry strategy?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19269857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "laskoviymishka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19599745", "body": "sorry for this \ud83d\ude2d resharper hate me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/19599745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "tuespetre": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21475505", "body": "Thank god, I was not brave enough to go adding this \ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21475505/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21475609", "body": "\ud83d\ude47 \ud83d\ude47 \ud83d\ude47 ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21475609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21482287", "body": "@pranavkm just curious, what is this doing?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21482287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "MandorSawall": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21643942", "body": "So how would I fix this in my project?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21643942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jackhamburger": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21890564", "body": "What release will this fix be a part of ? ", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/21890564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "carlosga": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22870568", "body": "@bricelam Sorry if this is not the correct place to comment this, \u00bfshouldn't this new block be executed after clearing the dbCommand parameters collection?, if the underlying ADO.NET provider sets the parameter collection to null when disposing the Command, the **dbCommand.Parameters.Clear** call is going to raise a **NullReferenceException** exception ( by looking at the SqlCommand implementation on the corefx repository it looks like they are returning a new ParameterCollection when they have it as null, even if the command has been disposed so it should work fine with SqlClient but other ADO.NET providers maybe setting it to null when disposing the command and returning null on subsequent access to the Parameters property ).\r\n\r\nThanks in advance and let me know if i should create an issue to comment this.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22870568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22988405", "body": "@AndriySvyryd Hi, isn't this change incorrect as the condition is never going to be meet?  (ExecuteCommand exhibits the same behavior), Thanks in advance, let me know if i should create an issue.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/22988405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "JunTaoLuo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/23444970", "body": "I was wondering if I should open PRs but @natemcmaster suggested to only open one for these repetitive changes. In this case it was https://github.com/aspnet/MetaPackages/pull/211. And this was further updated in https://github.com/aspnet/BuildTools/pull/352", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/comments/23444970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "anurse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/59588312", "body": "If the DllImport ends with `.dll`, won't this fail to strip that extension off on non-Windows platforms because of the static constructor above? Might I suggest `Path.GetFileNameWithoutExtension`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/59588312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ctaggart": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/103122037", "body": "Forcing it on with <SourceLinkCreate>true</SourceLinkCreate> is just to show that it works. The line should be removed before a merge.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/103122037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "danielmarbach": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/30754948", "body": "Good point. Wouldn't it save allocations if we add a continuewith onfaulted and log there?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/30754948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/30755794", "body": "No I haven't. Tried it out and it makes the code ugly. So I'll revert and force push just one minor change.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/30755794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "kichalla": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/111448624", "body": "Right, the one is SDK is usually older than the package and doesn't have the fixes quick enough.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/111448624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "davidroth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62218259", "body": "Yep, its because none of the existing orders in the [Northwind](https://github.com/aspnet/EntityFramework/blob/dev/test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/Northwind.sql)  test database have a timepart other than '00:00:00'.\nSince the \"real\" testcases verify the generated SQL anyway, I thought it is not worth to add additional data just to get an entryCount > 0.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62218259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62344681", "body": "Sure. I will push an update as soon as I find some time.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62344681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62355595", "body": "Fine, less work for me :smiley: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62355595/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62415799", "body": "[DatePart ](https://msdn.microsoft.com/de-de/library/ms174420%28v=sql.120%29.aspx)can only extract integral values from a date instance, but cannot convert a datetime into date. \nThis can be done via `CAST` or `CONVERT` and I have implemented this in this PR via [SqlServerDateTimeDateComponentTranslator.cs](https://github.com/davidroth/EntityFrameworkCore/blob/datetime_component_translation/src/Microsoft.EntityFrameworkCore.SqlServer/Query/ExpressionTranslators/Internal/SqlServerDateTimeDateComponentTranslator.cs)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62415799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62415836", "body": "Sounds good to me as well. I will remove the `DatePart` enum plus both dictionaries and use a method with `switch` instead. I`ll push an update soon.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62415836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62421245", "body": "Changes pushed - no more dictionaries, no more enums :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/62421245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rdefreitas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71781299", "body": "Apparently it changed automatically when doing some copy/pasting due to my Resharper settings and i didn't catch them when reviewing my commit changes. I'll get these patched back up.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71781299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71784842", "body": "added to support a minor defect in a related project that was intermixing EF core with 1.0 RTM libraries. This may be redundant outside of mixed-library scenarios such as that, but it doesn't hurt anything to leave it in place.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71784842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71784864", "body": "added to support a minor defect in a related project that was intermixing EF core with 1.0 RTM libraries. This may be redundant outside of mixed-library scenarios such as that, but it doesn't hurt anything to leave it in place.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71784864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71932348", "body": "@divega I has split out the small necessary components from the EF Core project into the Abstractions project, and added a dependency on the abstractions in the Ef library, with a focus on minimizing breaking changes..\n\nWith the exception of classes whose namespaces were intentionally changed, I tried to keep the same namespaces intact whenever possible, particular in the case of highly related components.\n\nConsidering that all of the Internal namespaces give warnings in the code docs for outside parties not to rely on them, I suppose it's safe to change them, and in doing so, simplify the library a bit.\n\nIEntityQueryProvider is a helper interface that was introduced in place of EntityQueryProvider and used in the extensions for IIncludableQueryable, as the EntityQueryProvider type is no longer accessible to those extensions.  Would you propose I eliminate any \"Internal\" namespaces and only preserve old namespaces if they would have resulted in breaking changes?\n\nI could move everything into the Microsoft.EntityFrameCore.Abstractions namespace unless there is a good case for why it lead to breaking changes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71932348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71935925", "body": "I agree that it feels wrong...\n\nIt was necessary to move CoreStrings in Abstractions so that the embedded resources could be accessed there, but oddly the shared utility classes, particularly Check, were encountering type collision issues when they existed in both libraries.\n\nIn light of the collision and in the interest of minimizing future support, I did not wish to break out CoreStrings and Check to include a different internal version in each of the 2 libraries. allowing EFCore to reference those from Abstractions.\n\nI can go back to that issue this weekend and see if maybe there was something overlooked that led to that type collision during builds, although nothing comes to mind off-hand. If you have any suggestions I'm open to them :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71935925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71937961", "body": "To be honest, I think these extensions, with the exception of IIncludableQueryable would feel more natural as part of System.Interactive.Async in [Reactive-Extensions/Rx.NET](https://github.com/Reactive-Extensions/Rx.NET), but then that would leave the questions of the best way to hook up special handling for EF's EntityQueryProvider, where the Includable extensions would live, and of course the overall issues of API coupling across disparate projects.\n\nThe idea here was to allow an indispensable set of Extension methods from Entity Framework to be utilized in service libraries that do not directly reference the bulk of EFCore, without the need to introduce proxy/wrapper classes which easily can get out of hand.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71937961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71938943", "body": "@anpete this covers the reason behind the moving of CoreStrings.resx, although I did not encounter the build issues you're speaking of regarding EntityFrameworkCore.csproj ... were you building that in isolation from the solution and is that a scenario that needs to be supported?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/71938943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/73760121", "body": "**As**AsyncEnumerable still throws... that method hasn't changed.  IsAsyncEnumerable is a shortcut method that is used inside some of the extension fallbacks (ToDictionaryAsync,ToListAsync). It is possible to remove the AsAsyncEnumerable method altogether and just call `source is IAsyncEnumerable<TSource>` inside of these methods.\n\nI believe that it should still throw if calling AsAsyncEnumerable() on a collection that is not.  The As method feels like an assertion. I'm going to use this object as this other object because I know it can be done.\nIf I assert it can be done and I'm wrong, I deserve my code to blow up in my face (which null would do anyway and would then require we add a null check everywhere we call the method).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/73760121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "NickCraver": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113739147", "body": "IMO worth adding a comment here (as the above won't show up in a diff review later), e.g.:\r\n```\r\n// New Additions must happen here to prevent ID movement\r\n```\r\n...or make those IDs explicit in the enum to *really* prevent such a thing.", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113739147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113740656", "body": "Same comment as above - IMO this would be far more resilient to both unintentional breaks and readability with:\r\n```c#\r\nTableFound = CoreEventId.RelationalDesignBaseId + 1000,\r\nTableSkipped = CoreEventId.RelationalDesignBaseId + 1001,\r\nColumnSkipped = CoreEventId.RelationalDesignBaseId + 1002,\r\nIndexFound = CoreEventId.RelationalDesignBaseId + 1003,\r\nIndexColumnFound = CoreEventId.RelationalDesignBaseId + 1004,\r\nIndexColumnSkipped = CoreEventId.RelationalDesignBaseId + 1005,\r\nSequenceFound = CoreEventId.RelationalDesignBaseId + 1006\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113740656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113741116", "body": "Same description as above, intentional?", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113741116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113741449", "body": "referenced*", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113741449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113741784", "body": "Since this is often used twice in a row - memoize it?\r\n\r\nAlso a shorter call path: \r\n```c#\r\n!string.IsNullOrEmpty(SchemaName) ? (SchemaName + \".\" + Name) : Name;\r\n```", "reactions": {"url": "https://api.github.com/repos/aspnet/EntityFrameworkCore/pulls/comments/113741784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}