{"_default": {"1": {"hkusulja": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/753", "title": "logger.LogError object params not working with Application Insights", "body": "Dear all,\r\nI have ASP.NET Core 2 WebAPI project and I am using successfully logger with Application insights\r\n\r\n```\r\n//ILoggerFactory loggerFactory;\r\nILogger logger = loggerFactory.CreateLogger(\"MyLog\");\r\nloggerFactory.AddApplicationInsights(app.ApplicationServices);\r\n```\r\n\r\nI have issues with using LogError and sending custom object that will be forwarded to Application Insights. \r\n\r\n```\r\ndecimal myobject = (decimal)3.14;\r\nlogger.LogError(new Exception(), \"MyMessage\", myobject);\r\n```\r\n\r\nAny idea how to make this works?\r\nIf I am using directly Application Insights class, then it is working OK.\r\n\r\nThank you", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "softwaretecture": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/752", "title": "ILoggingBuilder on part of Logging.Abstractions", "body": "Any reason why ILoggingBuilder.cs is not part of the Logging.Abstractions namespace but rather a part of the implementation assembly?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "henkmollema": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/751", "title": "Windows EventLog package for .NET Core", "body": "The Windows compatibility pack provides a preview [Windows EventLog](https://www.nuget.org/packages/System.Diagnostics.EventLog/) package for .NET Core/.NET Standard 2.0. Are there any plans to integrate this package in the existing EventLog implementation? I successfully did so locally and it compiles cleanly. \r\n\r\nHowever, the compatibility package is still in preview. Are there any timeframes for this?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skec0912": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/749", "title": "ILogger log.Error in AppInsights cannot log Dictionary<string,string>", "body": "I have problem when I want to log Dictionary or my custom class in app insights.\r\nMy code is :\r\n\r\nloggerFactory.AddApplicationInsights(app.ApplicationServices);\r\n       try\r\n            {\r\n                throw new Exception(\"This is a test exception for app insights.\");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                logger.LogError(ex, \"Exception message\",new Dictionary<string, string>() { {\"Controller\",\"Error\" } });\r\n throw;\r\n}\r\n\r\n\r\nAny idea?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "leastprivilege": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/748", "title": "Input data can create exception", "body": "Are there any best practices to sanitize input data - see this issue\r\n\r\nhttps://github.com/IdentityServer/IdentityServer4/issues/1931", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msmolka": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/746", "title": "Consider moving BatchingLogging to Logging", "body": "Batching logging is nice implementation for concurrent and heavy log messages. It would be useful to put this implementation outside Azure logging. \r\nThen it would be easy reused for File logging, database and other external providers.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/745", "title": "Flaky test: TestLogWritesToGlobalLogFile", "body": "As seen [here](http://aspnetci/viewLog.html?buildId=367315&tab=buildResultsDiv&buildTypeId=XPlat_Windows_Win10Universe#testNameId-1444600581581225772).\r\n\r\n```\r\nSystem.IO.IOException : The directory is not empty.\r\n```\r\nSeems like something about our cleanup here isn't robust enough.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/c89917b7ebbfa01fd2eac929b6725201670113f4", "message": "Add missing baselines"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/72823a8cf495afe7aefb10714b307b527c0fc105", "message": "Make tests newline agnostic"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/49ab4f3c378cc8c812f7523e8b842939eab28a83", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/a42605cc0c51b36ac3dda10401e7ffea05c8d848", "message": "Add RepositoryRoot"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/442d4bfddd659724f3bfd5ac91f9f52efbf2555d", "message": "Update bootstrappers"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/8b20ff5fdb92db5da2354745145fb6ee5bdfff12", "message": "Set AspNetCoreVersion"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/7912c9a41413ecfca0ad11d60847f7292027f89c", "message": "2.0.0-rtm to 2.1.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/03c5a54c8f8780644503bc3cd7a9e7f2276e1e89", "message": "Skip first time experience on Appveyor"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d4760ef4be07a5658636a2b37f4e55c47e75acab", "message": "Remove NETStandard.Library.NETFramework"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1fb9199a9a083f2b8c9f466d2659b1b40d629d41", "message": "Set \"TreatWarningsAsErrors\" before NuGet restore\n\n* Ensures our build stays clean of NuGet warnings"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/a63a9d05c1938e50f376e316f47c2a44f6c9851f", "message": "Revert \"Reacting to CoreCLR package changes\"\n\nThis reverts commit b4b112981afece16e3008df0efc6e6de24ea9184."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/67388033a4bec697832a6e748722e36664181b7b", "message": "Revert \" * Use a platform determiner which is available on all platforms\"\n\nThis reverts commit b5bfe31b629c183cb8121ea5ea41b587c961d957."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b5bfe31b629c183cb8121ea5ea41b587c961d957", "message": " * Use a platform determiner which is available on all platforms"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Costo": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/742", "title": "AppService logging to BlobStorage can lead to memory exhaustion ", "body": "We recently updated our web app to Asp.Net Core 2.0 (from 1.1). After we deployed this change to AppService in Azure, we started to see high memory usage and OutOfMemoryExceptions after a while (a few hours). Only a restart would temporarily fix the problem.\r\n\r\nHere is what we were seeing with  App Service diagnostics:\r\n<img width=\"735\" alt=\"napkin 17-12-06 5 14 33 pm\" src=\"https://user-images.githubusercontent.com/46972/33688307-ee21b870-daa8-11e7-946f-14f559536eb0.png\">\r\n\r\nAfter some time we noticed that the Blob Storage application logging level was set to \"Verbose\": \r\n\r\n![screen shot 2017-12-06 at 10 22 03 am](https://user-images.githubusercontent.com/46972/33688080-3fbddb7e-daa8-11e7-9c86-e58419e39510.png)\r\n\r\nThis was not intentional, so we reverted the level to \"Warning\". After this change, the memory problem disappeared.\r\n\r\nSo my question is: Is this a bug, or is this by design? The logging level should not have been set to \"Verbose\" in the first place and this was our error. But clearly this problem didn't exist with Asp.Net Core 1.1\r\n\r\nThank you.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pakrym": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/736", "title": "Remove/obsolete AzureAppServicesDiagnosticsSettings.OutputTemplate", "body": "It's not used since we moved off Serilog.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/712", "title": "Finalize logging analyzers", "body": "Consider adding analyzers for `DefineMessage`\r\nReference analyzers from our projects\r\nDecide how are they going to be shipped\r\n\r\n/cc @glennc ", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/707", "title": "Consider having an attribute to mark methods that take message template with arguments", "body": "So people can write tooling (in particular analyzers) independently of logging library/interface used as long as it has attribute.\r\nSee https://github.com/aspnet/Logging/pull/702#issuecomment-329930327 for additional information.\r\n\r\nSimilar to `StringFormatMethod` attribute ReSharper provides\r\n/cc @davidfowl ", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/658", "title": "Discussion: Logging registration/filtering changes ", "body": "", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/658/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/646", "title": "Consider adding functional test for azure logger against real blob storrage", "body": "Or emulator.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/588", "title": "Add IsScopeEnabled extension method to ILogger", "body": "See https://github.com/aspnet/Hosting/commit/8165609f4e403eae530ca435b1de3258baf3dc4c#diff-31101f9846fb2885481f2835767c690cR18 for implementation\r\nAlso replace hosting code with this method call.\r\n\r\n/cc @davidfowl ", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/af9377ad2de9fa7351f49940bd660e66f3aa5d19", "message": "EventLog Scopes (#741)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/000418aca3936a317309352c0a627c1b512f2c95", "message": "External scope storrage (#723)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/42ba2626b1a9e6327a43318e5888ed406e3f90da", "message": "Fix logger provider configuration reload after adding section (#725)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9f7800d51153ed82a529a82e4711e7ffcc726946", "message": "Use TryAddEnumerable to prevernt adding logger provider multiple times (#719)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/cc350d7ef616ef292c1b4ae7130b8c2b45fc1164", "message": "Add a way to get configuration section associated with logger provider (#706)\n\n* Add a way to get configuration section for provider\r\n\r\n* Doc comments, deduplicate code\r\n\r\n* Better things\r\n\r\n* Properties file"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/24c6620f288fc80956c23c3a8370593d1dc4ec65", "message": "Use xunit runner config only for analyzers (#710)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/fb0103e6b7cc7987dbfc1cc91f7a20b14eaa4937", "message": "Add logging format string usage analyzers (#702)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/020c703d49e75882e65758ebf1d122a5e2f4785f", "message": "Respect ConsoleLoggerOptions.IncludeScopes (#666)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/3089a81aae888f5bba95f3d3a899fc3d71dd64e8", "message": "Add AddFilter overloads for LoggerFilterOptions and ClearProviders extension. (#659)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/7c15740ab6d4b65aa02ce4beaf2a574f7981176f", "message": "Late bind ProviderAlias attribute to support libraries unable to reference new logging package (#652)\n\nLate bind ProviderAlias attribute to support libraries unable to reference new logging package"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c12ab668bb1709838cb49c6d935d5776e590cb38", "message": "Stop using azure storrage SDK in Azure Diagnostics logger (#647)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/15f300315ff1d469d92875bb32074c2edea19802", "message": "Add baselines for AzureAppServicesDiagnostics and EventSource to dev (#650)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/649656b26bed86301cbfc3e7f9159e160151a7f9", "message": "Log message header in console logger when message is empty (#639)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/a314c687957329262da0eb4513c6b96f8f2f1ff6", "message": "Reduce dependencies of Azure AppServices logger (#637)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ed56bb5bcbda8bbb4148b31f847941e7ed117fa5", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/fe2b2998b8ceef39fdd9510638884aa89dc76350", "message": "Add Microsoft.Extensions.Logging.Configuration (#632)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c821494678a30c323174bea8056f43b93a3ca6f4", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/355b186c822413c9a5405d6c153e41b8c6ca7277", "message": "Logging in DI (#626)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ae30ca2790c55797371e5d4196922853dda8f1fc", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d69858a29f4686a5709e1e1b8d68542c5a5880e5", "message": "Update InternalAspNetCoreSdkVersion"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/81424d2d6a70058c1f06aca3111e6ae6c24df9ce", "message": "Always log messages and never throw"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9cd8c8c913cafcff9efc9ee884f0e34131e68184", "message": "Update Serilog.Extensions.Logging version (#557)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b63dcedea6461d3550f044d9d86cc57030b989d9", "message": "Switch Microsoft.Extensions.Logging.AzureAppServices to 1.2 and fix test reference"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/697799738524749d2c6c320d53414ba092afdc36", "message": "Read initial level values on application start (#544)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/0189d3e8e6800bf1a0ab77f753384a44eaa27c9c", "message": "Fix more comments and property validation in Microsoft.Extensions.Logging.AzureAppServices (#512)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1c9dcb079d69cf972879641c0b9f45d94864a22a", "message": "Fix comments, typos and add property validation to Microsoft.Extensions.Logging.AzureAppServices (#509)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2b2e0c6ef7eb0893d0b864454eeaa70176952717", "message": "Cleanup EventSource logging provider (#505)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/bff2ae0091f4c2474b81520cf694746c8306d089", "message": "Update to newer version of Serilog that supports flushing (#499)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/61ff52f85d197b3f2457a5c61cda356b6b93930d", "message": "Rename Azure.AppServicesDiagnostics to AzureAppServices (#498)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/783a2dfd95493ce29c09f0572759d9603933cb05", "message": "Fix Microsoft.Extensions.Logging.Azure.AppServicesDiagnostics.Test test project (#496)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/3981f6551432e0e23d98161937b36b725a17cf4d", "message": "Rename Logging.AzureWebAppDiagnostics package and downgrade version (#495)\n\n* Rename AzureWebAppDiagnostics to Azure.AppServicesDiagnostics"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c0153626acf525395ef83b0b55180bf7e7ed6664", "message": "Fix blob sink tests (#485)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/88ee78a47c4b9f641f40593c98b3b5431e88b02d", "message": "Add Blob AzureWebApp provider (#477)\n\n* Add Blob AzureWebApp provider"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ca37b2164c94a79ff26dd9cf986731ab9054eee9", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/965a0da33cde7820b0415d5ef891e34f21a00957", "message": "Bring Microsoft.NETCore.Platforms dependency back"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c3f04e4b6f5413d93b73e5519d2674dc5e900a0b", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/754dc1ad15787184dcef1737e84cea55d2565dc3", "message": "Migrate tests, tools and samples to portable"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glatzert": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/735", "title": "Proposal: LogLevel triggered buffered LoggerDecorator", "body": "We had a situation, where our normal logging level of warning did not provide enough information, but the information logs would show the information. Unfortunately information logs will generate lots more of output, which might or might not be useful.\r\n\r\nSo my proposal is that there should be a logger which will:\r\n - Create a Log-Buffer for every incomming request\r\n - Write into that buffer\r\n - when an log message of level x (e.g. ERROR) is sent to the logger, it will flush all messages of level y to whatever Logger is decorated by the buffered-log-level-triggered-LoggerDecorator.\r\n - when no log message of level x is received, all messages are silently discarded.\r\n\r\nX and Y could be configured as well as the logger it decorates.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "malachib": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/734", "title": "Warning C4691 when building a C++/CLI executable", "body": "As the title reads, I am attempting to utilize the logging library from a C++/CLI (.NET Framework 4.6) executable.  Original MSDN thread with artifacts [here](https://social.msdn.microsoft.com/Forums/vstudio/en-US/fae48caa-7746-4c8f-9c44-839bd23ed128/warning-c4691-when-building-a-ccli-executable-referencing-microsoftextensionslogging-via-nuget?forum=vcgeneral)\r\n\r\nIt actually works quite well, but I am experiencing concerning warnings inclusive of the following:\r\n\r\n```\r\n>c:\\projects\\ucpro\\application\\ucpront\\logging.h(33): warning C4691: 'System::Exception': type referenced was expected in unreferenced assembly 'System.Runtime', type defined in current translation unit used instead\r\n>c:\\projects\\ucpro\\application\\ucpront\\logging.h(33): note: This diagnostic occurred while importing type 'Microsoft::Extensions::Logging::ILogger ' from assembly 'Microsoft.Extensions.Logging.Abstractions, Version=1.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n>c:\\projects\\ucpro\\application\\ucpront\\logging.h(33): warning C4691: 'System::Func': type referenced was expected in unreferenced assembly 'System.Runtime', type defined in current translation unit used instead\r\n>c:\\projects\\ucpro\\application\\ucpront\\logging.h(33): note: This diagnostic occurred while importing type 'Microsoft::Extensions::Logging::ILogger ' from assembly 'Microsoft.Extensions.Logging.Abstractions, Version=1.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n```\r\n\r\nAs you can see in the warnings, the logging package versions are 1.1.2\r\n\r\nExact steps for recreating the issue are outlined in the MSDN thread, but to summarize, merely opening and compiling SW-132 project in [SW-132v2](https://www.dropbox.com/s/9261ina8p4gyce1/SW-132v2.zip?dl=0) exhibits the issue.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kencharos": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/732", "title": "Question: AzureAppServicesDiagnosticsSettings.OutputTemplate is not available in core 2.0 ? ", "body": "Hello.\r\n\r\nI use AspNetCore2.0 in azure apps with Microsoft.Extensions.Logging.AzureAppServices 2.0.0\r\n\r\nI want to output custom format log in Azure apps application logs and log streaming.\r\nSo that, I configure  AzureAppServicesDiagnosticsSettings.OutputTemplate.\r\n\r\nFollowing my startup.cs \r\n\r\n```\r\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n        {\r\n\r\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n            loggerFactory.AddAzureWebAppDiagnostics(\r\n                new AzureAppServicesDiagnosticsSettings\r\n                {\r\n                    OutputTemplate = \"{Timestamp:yyyy-MM-dd HH:mm:ss zzz} [{Level}] {RequestId}-{SourceContext}: {Message}{NewLine}{Exception}\"\r\n                }\r\n            );\r\n```\r\n\r\nbut, Application log doesn't output above format.\r\n\r\nAnd I find  that OutpuTemplate doens't use at [AzureAppServicesLoggerFactoryExtensions.cs](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.AzureAppServices/AzureAppServicesLoggerFactoryExtensions.cs) .\r\n\r\nPlease tell me AzureAppServicesDiagnosticsSettings.OutputTemplate is available ? \r\n\r\nThanks.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/732/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anurse": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/730", "title": "Consider demystifying exceptions by default in Console logger", "body": "See https://github.com/benaadams/Ben.Demystifier\r\n\r\nUsing that library may be tricky but we could share code or something. Async stack traces are so bad and this makes them much much cleaner", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/730/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/4c59cc4c098603dbab31d0689c0f39a042316d13", "message": "fix sheared xunit log messages by buffering the message (#744)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/f6e08b390370ad944f6a8661d9415e90f7d0d328", "message": "[Logging.Testing] Drop test logging level down to Trace (#743)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/74ad3b0875fbf549132bf6f11e76cc7a92769fe1", "message": "react to removal of PlatformAbstractions (#603)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1c3c118a5daf508e8e0ab7605788c65fe0a92531", "message": "make the regex for testing more consistent (#604)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/321761301bf6319d42b054e9ba33b4bc74525f92", "message": "copy test logging stuff from IntegrationTesting here (#601)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1609c68803a2e24d5b6d0243f954112962f15e30", "message": "Xunit logger ignores exceptions from output helper (#592)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/a4be03430bf87a330b78ecdd928958554b94d80f", "message": "add xunit logger provider (#575)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/15600148", "body": "Noooooooooooo... Now I have to update a whole bunch of other stuff to eclipse that :(. Why was 4.0.11 broken?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/15600148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mkArtak": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/728", "title": "Discussion: Extended support for custom ILogger-s", "body": "Hi.\r\n\r\nI'm looking for ways to extend the capabilities of the ILogger interface. Here is the full scenario I'm seeking support for.\r\n\r\nI have an ILogger implementation for AppInsights's TelemetryClient. The ILogger.Log<TState> method implementation calls into the TrackTrace method of the underlying TelemetryClient instance. **Beside that, I also want to have a mechanism to expose the telemetryClient.LogMetric API**.\r\n\r\nMy proposal is to change the ILoggerFactory.CreateLogger(string categoryName) method to be generic, maybe like the below one:\r\n    **`T CreateLogger<T>(string categoryName) where T : ILogger;`**\r\n\r\nI understand this would require some internal changes in the LoggerFactory class, but this would enable custom interface based telemetry support. In other words, I would be able to define a new interface:\r\n\r\n```\r\n    public interface IExtendedLogger : ILogger\r\n    {\r\n        void LogMetric(string metricName, double value);\r\n    }\r\n```\r\nand get an instance for that still using the ILoggerFactory as usual.\r\nThe TelemetryClient wrapping logger would then implement this interface instead, and would allow me to properly expose both LogMetric and Log methods.\r\n\r\nSo the classes using ILogger, which need to also be able to use the new API will need to be updated to use IExtendedLogger instead. But with that only change (on the consumer/client side) my existing logging code would just work as is, plus I would be able to also use the new LogMetric API wherever I need to.\r\n\r\nAnyway, bringing this up for discussion - would be glad to hear your feedback on this.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/728/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "squaredinfinity": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/727", "title": "CreateLogger<T>() design change proposal", "body": "Hi there,\r\n\r\nCurrently I can create a logger for a type using .CreateLogger<T>() extensions method.\r\nThis method calls .CreateLogger(Type) of the ILoggerFactory and wraps the result in Logger\\<T>().\r\n\r\nhttps://github.com/aspnet/Logging/blob/42ba2626b1a9e6327a43318e5888ed406e3f90da/src/Microsoft.Extensions.Logging.Abstractions/LoggerFactoryExtensions.cs#L25\r\n\r\nThis wrapper (Logger\\<T>) essentially makes it impossible to access wrapped logger directly, which from the end user is fine, but makes writing custom LoggerFactory/Logger bit harder for certain scenarios.\r\n\r\nWould it be possible to change this slightly and, for example, introduce IGenericLoggerFactory with .CreateLogger\\<T>() method? .CreateLogger<T>(this ILoggerFactory loggerFactory) extension method could then check if loggerFactory is IGenericLoggerFactory and use it to create generic wrapper or continue as before otherwise ?\r\n```\r\npublic interface IGenericLoggerFactory\r\n{\r\n  public ILogger<T> CreateLogger<T>();\r\n}\r\n\r\npublic static ILogger<T> CreateLogger<T>(this ILoggerFactory factory)\r\n{\r\n    if (factory == null)\r\n    {\r\n         throw new ArgumentNullException(nameof(factory));\r\n    }\r\n    \r\n    if(factory is IGenericLoggerFactory genericFactory)\r\n    {\r\n          return genericFactory.CreateLogger<T>();\r\n    }\r\n    else\r\n    {\r\n          return new Logger<T>(factory);\r\n    }\r\n}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daniel-white": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/726", "title": "Context method and Always trace level", "body": "Love the abstractions that this suite offers. However, my last company had a couple nice features in our logging library that I would see as beneficial to this library as well.\r\n\r\n* `BeginContext` would be similar to `BeginScope` but would take a key and a potentially formattable value. This value would be carried though to each log message within the scope of the context `IDisposable`. This would avoid passing certain things around in the code. This is similar to #717  For instance:\r\n\r\nWithout `BeginContext`:\r\n```\r\nGuid correlationId = ...\r\nusing (logger.BeginScope(\"Process started {correlationId}\", correlationId))\r\n{\r\n    MyMethodThatTracesLotsOfThings(correlationId, ...);\r\n}\r\n\r\nvoid MyMethodThatTracesLotsOfThings(Guid correlationId, ...)\r\n{\r\n    logger.LogInformation(\"We did something here with {correlationId}\", correlationId); \r\n}\r\n```\r\n\r\nWith `BeginContext`\r\n```\r\nGuid correlationId = ...\r\nusing (logger.BeginContext(\"correlationId\", correlationId)\r\nusing (logger.BeginScope(\"Process started\"))\r\n{\r\n    MyMethodThatTracesLotsOfThings(...);\r\n}\r\n\r\nvoid MyMethodThatTracesLotsOfThings(...)\r\n{\r\n    logger.LogInformation(\"We did something here\"); \r\n}\r\n```\r\n\r\nThe logger can use this for the tracing at will. `BeginScope` adds some of this facility, but is really tied to a single message.\r\n\r\n* `TraceLevel.Always`. This would potentially be a breaking change with `TraceLevel`, but I sometimes want to unconditionally trace something. I know the logger implementations can still reject it, but I want to try from my application code to trace. `TraceLevel.None` should be `Int32.MinValue` and `TraceLevel.Always` should be `Int32.MaxValue`. \r\n\r\nThoughts?\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dangershony": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/720", "title": "ConsoleLoggerProvider thread leaks ", "body": "Hi I am on the stratis platform team (we are developing the blockchain in C#).  \r\nJust wanted to let you know that we have an issue where when we create two instances of ConsoleLoggerProvider we observed thread leaks (thread count grows indefinitely until the system halts)\r\n\r\nSee an print out form the diagnostics tool:\r\n\r\n```\r\nNot Flagged\t\t505824\t290\tWorker Thread\t<No Name>\tSystem.Private.CoreLib.dll!System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout\tNormal\r\n\r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, System.Threading.CancellationToken cancellationToken)\t \r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.SemaphoreSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)\t \r\n \t \t \t \t \t \tSystem.Collections.Concurrent.dll!System.Collections.Concurrent.BlockingCollection<Microsoft.Extensions.Logging.Console.Internal.LogMessageEntry>.TryTakeWithNoTimeValidation(out Microsoft.Extensions.Logging.Console.Internal.LogMessageEntry item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken, System.Threading.CancellationTokenSource combinedTokenSource)\t \r\n \t \t \t \t \t \tSystem.Collections.Concurrent.dll!System.Collections.Concurrent.BlockingCollection<Microsoft.Extensions.Logging.Console.Internal.LogMessageEntry>.GetConsumingEnumerable(System.Threading.CancellationToken cancellationToken)\t \r\n \t \t \t \t \t \tMicrosoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.Internal.ConsoleLoggerProcessor.ProcessLogQueue()\t \r\n \t \t \t \t \t \tMicrosoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.Internal.ConsoleLoggerProcessor.ProcessLogQueue(object state)\t \r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\t \r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)\t \r\n \t \t \t \t \t \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\t \r\n```\r\nHere is the code that caused the issue (this was the second instance of ConsoleLoggerProvider.  \r\nhttps://github.com/stratisproject/StratisBitcoinFullNode/blob/b9069a1fed5b776b11ac82e64595da848f44200a/Stratis.Bitcoin/Utilities/PrefixLogger.cs#L40", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cyrusjamula": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/717", "title": "What is the Microsoft logging equivalent of Serilog.LogContext.PushProperty", "body": "I need to add Context properties;\r\nWhat is the microsoft equivalent for this.\r\n\r\nBeginScope does not write our these values when used with Serilog", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benaadams": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/714", "title": "Don't set AsyncLocal for scope if not included", "body": "Adding ConsoleLogger disturbs the `ExecutionContext` even if scopes aren't being used and causes allocations to wildly increase.\r\n\r\nWithout ConsoleLogger (no-changes to AsyncLocal)\r\n![](https://aoa.blob.core.windows.net/aspnet/tasks-action.png)\r\n\r\nWith ConsoleLogger and no scopes - but not logging anything to Console (changes to AsyncLocal)\r\n![](https://aoa.blob.core.windows.net/aspnet/async-local.png)\r\n\r\nYou can see the allocations of `Action` and `MoveNextRunner` disproportionately increase", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/408", "title": "System.Console Color stuff is crazy expensive", "body": "Is calls System.Console.GetBufferInfo which is 1/3 as expensive as actually writing the messages (which is also relatively expensive)\n\n![](http://aoa.blob.core.windows.net/aspnet/console.png)\n\n![](http://aoa.blob.core.windows.net/aspnet/console2.png)\n\n![](http://aoa.blob.core.windows.net/aspnet/console3.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/c321853e6b91ec3fdb2b7fbc036a4fd83817b0ac", "message": "Move Console.Write out of critial path"}], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/715", "title": "Don't set AsyncLocal for scope if not included", "body": "Don't disturb the `ExecutionContext` if scopes aren't being used as it wildly increases allocations\r\n\r\nWithout ConsoleLogger (no changes to AsyncLocal)\r\n![](https://aoa.blob.core.windows.net/aspnet/tasks-action.png)\r\n\r\nWith ConsoleLogger and no scopes - but not logging anything (changes to AsyncLocal)\r\n![](https://aoa.blob.core.windows.net/aspnet/async-local.png)\r\n\r\nYou can see the allocations of `Action` and `MoveNextRunner` disproportionately increase; prior to this change\r\n\r\nResolves https://github.com/aspnet/Logging/issues/714\r\n\r\n/cc @davidfowl \r\n\r\nYou are right @anurse, logging allocations make me sad \ud83d\ude22 ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kierenj": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/704", "title": "No AddEventLog overload w/MinLevel for new DI-friendly logger?", "body": "I can no longer do `.AddEventLog(minLevel: LogLevel.Warning);` when using `ILoggerBuilder`, is this by design?  Is there a suggested alternative?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andrewlock": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/695", "title": "Question: Is the ConsoleLogger safe to use in production?", "body": "I was configuring the logging for a new ASP.NET Core app, and I had the vague memory that the `ConsoleLogger` was not supposed to be used in production. \r\n\r\nSearching around, all I could find was a couple of comments on [this issue](https://github.com/aspnet/IISIntegration/issues/245#issuecomment-238666662) that suggested that a global lock in the `ConsoleLogger` library could cause performance issues. \r\n\r\nComparing the `ConsoleLogger`  code between 1.0 and 2.0, it looks like a previous `lock()` usage has been removed. \r\n\r\nDoes that mean the `ConsoleLogger` is now safe to use in production, or were these comments referring to a different global lock?\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwaclaw": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/692", "title": "System.Diagnostics.Tracing.EventSource.GenerateManifest throws with LoggingEventSource", "body": "This happens with Asp.Net Core 2.0:\r\n\r\nWhen EventSource.GenerateManifest() is called with a LoggingEventSource type as first argument an exception is thrown with message: \"Unsupported type ExceptionInfo in event source\".\r\n\r\nIt seems only primitive types are allowed as WriteEvent arguments on the event source.\r\n\r\nThe code that generates the exception is at line 198 of:\r\nhttps://github.com/dotnet/coreclr/blob/7ca2692405f255ce4a87d2c3ec263d938cf274fc/src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs\r\n\r\nI am using a library called [EtwStream](https://github.com/neuecc/EtwStream) to function as an event sink.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glennc": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/689", "title": "A mode of Console logger that outputs JSON", "body": "This allows an app to output logs to the console that are redirected to a file or read by another process that can then parse the JSON to maintain structured logs.\r\n\r\nThe canonical example of this is a side-car container on a Docker host. The side car picks up all Docker logs and sends them to an external logging sink, like app insights or sending to an ELK stack.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JamesRandall": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/687", "title": "Package Microsoft.Extensions.Logging.Abstractions requires netstandard 2.0", "body": "Would this package not be more useful if it targeted a lower version of netstandard (it's still compatible with 1.3) thus allowing it to be used in a broader range of scenarios. Per Microsoft's [own guidance](https://docs.microsoft.com/en-us/dotnet/standard/net-standard):\r\n\r\n_In general, we recommend you to target the lowest version of .NET Standard possible._ \r\n\r\nUnless my understanding is wrong by targeting netstandard 2.0 doesn't this force any other package that relies upon it to also make the leap to 2.0? When MS started splitting out these foundational components into abstractions and implementation packages I thought it was great to see some reference interfaces being defined in this space while at the same time allowing for theoretically many implementations - we've arguably lost something if they are going to needlessly push on to the latest broadest netstandard implementation.\r\n\r\nAdmittedly there is currently only a 2.0 implementation of the abstractions and so reality it's going to be running inside a runtime that supports netstandard 2.0 but surely this \"platform raising\" is better left as far up towards runtime selection as possible to maximise flexibility lower down the dependency graph.\r\n\r\nAs an example if I had a set of packages that I wanted to support, say, UWP it would be fairly trivial to implement a simple logger on top of the abstractions. But by forcing all packages that reference this to netstandard 2.0 I've got a much tougher job.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/687/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/682", "title": "Add Logger base class with scope logic", "body": "Today many custom logger implementations don't properly implement scopes. We can make this a bit easier by providing a base class which handles scopes with an async local and provides a nice overload that aggregates them.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/ab4335266aa7c8920381c1fc383560afe3cd0c3a", "message": "Logging shouldn't throw after dispose\n- Check complete adding before adding new messages\nto the list.\n- Added a test"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9489c8c68fc20a46e7a7733d5573da8c40f0912a", "message": "Remove unneeded dependency (#585)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/aebef023fcef0a022cb173cecb7ea6bf91b21f93", "message": "Merge pull request #567 from aspnet/no-mono\n\nNo mono"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/308b4d1056deb3d120bd267bb81dcf38158fa58c", "message": "Update .travis.yml"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d2e48b98963a5bfc239a80bbd23b48a1db53f74d", "message": "Merge pull request #461 from elmahio/dev\n\nSwitched URL to elmah.io extensions logger"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/05501d0a40d58eb660317bdeb6737d7d88d69dde", "message": "Fixed build"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/42329949", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/42329949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53289744", "body": "Keep K10 around for now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53289744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53291613", "body": "Addition to. I'm going to do a sweep to clean up all repos later\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53291613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57268288", "body": "While we're at it, should we call WriteCore Write/Log?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57268288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57761628", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57761628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58612772", "body": "@Eilon we could just take a TextWriter, and pass in Console.Out and Console.Error by default. The unit tests can pass a StringWriter\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58612772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58613299", "body": "Oh snap, console colors...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58613299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59098961", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59098961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59590214", "body": "yes!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59590214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59590291", "body": "i am david fowler LOL kthxbye :cool: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59590291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59591909", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59591909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59661471", "body": "Its not the same. If anything you should be adding net45 not removing aspnet50. The biggest difference you'll see with this change is the fact that assembly neutral interfaces don't work on vanilla net45.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59661471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59662522", "body": "Wrong, ill probably cause more bizarre errors if anything. The proper change would be to leave it a build dependency for aspnet50 and make it a non build dependency for net45\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59662522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60782600", "body": "Looks like you need a new version of NuGet.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60782600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60806914", "body": "The problem is these packages have a new target framework that's now supported in your NuGet version. See if there's a version on the nuget codeplex download page.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60806914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60963478", "body": "The build isn't broken, try cleaning out `%userprofile%\\.kpm` and `%localappdata%\\kpm\\cache`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60963478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61693726", "body": "How is that code still testable?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61693726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61694554", "body": "That seems pretty anti di. Even property injection would be better imo. This seems like something we wouldn't bake into the framework or would recommend to people. Totally doable of course and might may be required in cases where you aren't being activated by the di system directly.\n\nWe do have a single static service provider available that updates with the current scope but we strongly recommend against using it where possible (like a controller).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61694554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61852269", "body": "/cc @anpete \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61852269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62499236", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62499236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62821906", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62821906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62907881", "body": "Nope\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62907881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63237494", "body": "I Agree with Eilon, LogLevel is better\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63237494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64275511", "body": "Hmmmmmm, not sure. Would you ever have the different messages with the same structure?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64275511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70471857", "body": "Delete all of your packages and try restoring again. Everything is now beta 3 so you're likely mismatched \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70471857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70471887", "body": "Same for the KRE \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70471887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71780677", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71780677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/73405740", "body": "@damianh +1\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/73405740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/7412558", "body": "Ummm no\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/7412558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8073414", "body": "lowercase s\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8073414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434035", "body": "sealed? wut\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434068", "body": "Isn't being private enough in this case? I'm not sure we used sealed anywhere else.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434499", "body": "@pranavkm thats so pointless though. @SonjaKhan it's the same AFAIK\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8483107", "body": "Um, no. This isn't used anywhere outside of the EF repo :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8483107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/9492965", "body": "This doesn't look right at all. Why are you using the package on all platforms?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/9492965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/12593198", "body": "Singleton?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/12593198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001419", "body": "ugh really\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001432", "body": "This needs to go somewhere useful :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/14034080", "body": "@kichalla We need to remove the reliance on this API.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14034080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/14052867", "body": "https://github.com/dotnet/corefx/blob/master/src/System.Runtime.InteropServices.RuntimeInformation/src/RuntimeInformation.Windows.cs#L8\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14052867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/17571145", "body": "eerrr\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/17571145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/21677459", "body": "Did you file a bug for this?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/21677459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/21677478", "body": "var", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/21677478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495669", "body": "remove k10 from the tests\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530209", "body": "Why do you need test?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530708", "body": "Nuke the stop and just use the disposable.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530755", "body": "Change this to \n\n``` C#\npublic static IDisposable BeginScope(this Logger logger, object state)\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14530755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573391", "body": "You can remove this comment\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573393", "body": "Fix the formatting here (AKA update your VS)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573394", "body": "None of the tests work on k10 right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14573394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579242", "body": "There's no point ifdeffing the tests\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848554", "body": "Wont this break EF?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848598", "body": "private\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849031", "body": "Why is this even here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849053", "body": "private\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850026", "body": "EF still cross compiles so this will break them at the moment\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850575", "body": "Yep, it can be used as a forcing function we we don't have special folder names right now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18320145", "body": "Might be clearer to just assert the actual values. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18320145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18355675", "body": "So what? It's more readable.\n\n``` C#\nAssert.Equal(new[] {1, 2, 3, 4, 5}, _values);\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18355675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18505143", "body": "@lodejard What does it mean if the formatter is null after this refactoring?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18505143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18681974", "body": "call this _filter\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18681974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688566", "body": "Not here though. Check it the first time it's passed in. Come to think of it, this class could be private and part of the ConsoleLoggerProvider\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688636", "body": "Because checking for null everywhere doesn't make much sense. You can check for null when the provider is specified, and you can check for when the logger is created and you can check for it in the method but what have you gained?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688648", "body": "@Eilon better to have the filter never be null. `_filter = filter ??(_, __) => true;` tho that's not valid C# \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688741", "body": "Yep nuke it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18689063", "body": "Something bizarre going on here\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18689063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18689068", "body": "These look wrong\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18689068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18863454", "body": "This should be 4.0.20-beta-*\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18863454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18863475", "body": "These can be removed\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18863475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18869692", "body": "Yep all of it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18869692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973052", "body": "This is all being removed anyways :smile_cat: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19891511", "body": "get rid of the regions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19891511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20131143", "body": "What's being left out here and why? The portable build?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20131143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20131170", "body": "ToString()? Doesn't this conflict with object.ToString()? Feels like we should change this name\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20131170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20811634", "body": "2\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20811634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21779120", "body": "Yes\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21779120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24886535", "body": "Do we need this? Can't we just set the default?\n\n``` C#\npublic LogLevel MinimumLevel { get; set; } = LogLevel.Verbose;\n```\n\nAlso the default level is Debug right?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24886535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24886551", "body": "Why is this implicit?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24886551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "ericwj": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/679", "title": "Move ILoggingBuilder to Microsoft.Extensions.Logging.Abstractions", "body": "I don't want to depend on Microsoft.Extensions.Logging. Please move ILoggingBuilder to Microsoft.Extensions.Logging.Abstractions.\r\n\r\nIs there a really good reason why it is in Microsoft.Extensions.Logging?\r\n\r\nFrom where I stand, it is an abstraction.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/679/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cwe1ss": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/677", "title": "How to get scopes in an exception handler that sits outside of the using-block?", "body": "I'd like to get the original scopes in my exception handler as they usually contain important information for troubleshooting (e.g. the UserId). I've [read about a trick/hack](https://nblumhardt.com/2016/11/ilogger-beginscope/#comment-3012254418) that uses C# exception filters to execute the logging statement within the context of the location that throws the exception. Thanks to @nblumhardt and @skomis-mm for pointing this out.\r\n\r\nHowever, it seems like this only works as long as there is no `TaskAwaiter` involved:\r\n\r\n```csharp\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        new WebHostBuilder()\r\n            .UseKestrel()\r\n            .UseContentRoot(Directory.GetCurrentDirectory())\r\n            .ConfigureLogging(logging =>\r\n            {\r\n                logging.AddConsole(options => options.IncludeScopes = true);\r\n                logging.AddFilter(\"Microsoft\", LogLevel.Warning);\r\n            })\r\n            .Configure(app =>\r\n            {\r\n                var logger = app.ApplicationServices.GetRequiredService<ILogger<Program>>();\r\n\r\n                app.Map(\"/sync\", subApp =>\r\n                {\r\n                    // Exception handler\r\n                    subApp.Use(async (context, next) =>\r\n                    {\r\n                        try\r\n                        {\r\n                            await next();\r\n                        }\r\n                        catch (Exception ex) when (LogError(logger, ex))\r\n                        {\r\n                        }\r\n                    });\r\n                    // Logic\r\n                    subApp.Run((context) =>\r\n                    {\r\n                        using (logger.BeginScope(\"UserId:100\"))\r\n                        {\r\n                            throw new InvalidOperationException(\"Something went wrong\");\r\n                        }\r\n                    });\r\n                });\r\n\r\n                app.Map(\"/async\", subApp =>\r\n                {\r\n                    // Exception handler\r\n                    subApp.Use(async (context, next) =>\r\n                    {\r\n                        try\r\n                        {\r\n                            await next();\r\n                        }\r\n                        catch (Exception ex) when (LogError(logger, ex))\r\n                        {\r\n                        }\r\n                    });\r\n                    // Logic\r\n                    subApp.Run(async (context) =>\r\n                    {\r\n                        using (logger.BeginScope(\"UserId:100\"))\r\n                        {\r\n                            await Task.Delay(100); // Force TaskAwaiter\r\n                            throw new InvalidOperationException(\"Something went wrong\");\r\n                        }\r\n                    });\r\n                });\r\n            })\r\n            .Build()\r\n            .Run();\r\n    }\r\n\r\n    public static bool LogError(ILogger logger, Exception ex)\r\n    {\r\n        logger.LogError(ex, \"Unhandled exception\");\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\nA request to \"/sync\" outputs the \"UserId:100\" scope for the \"LogError\"-call:\r\n```\r\nfail: HostingLogging.Program[0]\r\n      => ConnectionId:0HL6NFB0MJHO8 => RequestId:0HL6NFB0MJHO8:00000001 RequestPath: => UserId:100\r\n      Unhandled exception\r\nSystem.InvalidOperationException: Something went wrong\r\n   at HostingLogging.Program.<>c__DisplayClass0_0.<Main>b__5(HttpContext context) in C:\\src\\tmp\\HostingLogging\\Program.cs:line 51\r\n   at HostingLogging.Program.<>c__DisplayClass0_0.<<Main>b__4>d.MoveNext() in C:\\src\\tmp\\HostingLogging\\Program.cs:line 40\r\n```\r\nA request to \"/async\" does NOT output the \"UserId:100\" scope for the \"LogError\"-call:\r\n```\r\nfail: HostingLogging.Program[0]\r\n      => ConnectionId:0HL6NFB0MJHO8 => RequestId:0HL6NFB0MJHO8:00000002 RequestPath:\r\n      Unhandled exception\r\nSystem.InvalidOperationException: Something went wrong\r\n   at HostingLogging.Program.<>c__DisplayClass0_0.<<Main>b__8>d.MoveNext() in C:\\src\\tmp\\HostingLogging\\Program.cs:line 75\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at HostingLogging.Program.<>c__DisplayClass0_0.<<Main>b__7>d.MoveNext() in C:\\src\\tmp\\HostingLogging\\Program.cs:line 63\r\n```\r\nAs this feels like a hack anyway, I guess there's no way to get the scopes in async-scenarios, right?\r\n\r\nI know that I could catch exceptions within each scope but this isn't really an option IMO as this would result in multiple log entries (one for each scope).\r\n\r\nAre there any alternatives for what I want or would it be worth discussing possible solutions?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/c149d48a52403759ef1e1ae932c5e0faf9e340d6", "message": "Extension methods for Log*(exception, message, args)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/16289165", "body": "This seems to be an endless loop - isn't it calling itself?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/16289165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "alexvy86": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/676", "title": "Question: logging to Azure Diagnostic Logs in App Service through third party provider", "body": "I'm using the [NLog provider](https://github.com/NLog/NLog.Extensions.Logging) in a netcoreapp2.0 console app which I'm deploying as a WebJob in Azure App Service. I'm trying to log to Azure Diagnostics Logs through the NLog provider but it looks like it won't be possible and I wanted to check if that's indeed the case, and what the alternative recommendation would be.\r\n\r\nI started with NLog's Trace sink because I've successfully used System.Diagnostics Trace to log to Azure Diagnostics Logs with a console app targeting the full framework (following [this](https://docs.microsoft.com/en-us/azure/cloud-services/cloud-services-dotnet-diagnostics-trace-flow)), but the trace listener mentioned doesn't seem to be available for .NET core.\r\n\r\nSo I looked at the code for the [AzureAppServices provider](https://github.com/aspnet/Logging/tree/7fde8e3556fb9268d5951c7de667da8fe4815503/src/Microsoft.Extensions.Logging.AzureAppServices) and saw that the loggers there write directly to their \"end locations\" (the file in the filesystem, and the storage account). I'd like to avoid writing an NLog sink that just duplicates this functionality, but can't figure out if I could somehow use the existing AzureAppServices provide as a sink for NLog... thoughts or suggestions?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kichalla": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/672", "title": "[2.0 Verification] Fix doc comment", "body": "For the following API:\r\n```\r\npublic static IWebHostBuilder ConfigureLogging(this IWebHostBuilder hostBuilder, Action<ILoggingBuilder> configureLogging)\r\n```\r\n\r\nThe doc comment says \r\n```\r\nAdds a delegate for configuring the provided Microsoft.Extensions.Logging.LoggerFactory.\r\n        //     This may be called multiple times.\r\n```\r\n\r\nShould it say `LoggingBuilder` instead?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/170", "title": "Provide options for console logger to show/hide certain details", "body": "Currently the information like `LogLevel` and the logger name make the log look cluttered with information and difficult to follow. We could provide options to show/hide these details.\n\nExample:\n\n```\nverbose : [Microsoft.Net.Http.Server.WebListener] Received request: GET / HTTP/1.1; Headers: { Connection: Keep-Alive; Host: localhost:5001; User-Agent: Mozilla/5.0 (Windows NT; Windows NT 6.3; en-US) WindowsPowerShell/4.0; }\nverbose : [Microsoft.AspNet.Routing.Template.TemplateRoute] Request did not match the route with name '' and template 'blogs'.\nverbose : [Microsoft.AspNet.Routing.Template.TemplateRoute] Request did not match the route with name '' and template 'api/Customers'.\nverbose : [Microsoft.AspNet.Routing.Template.TemplateRoute] Request did not match the route with name '' and template 'blogs/getall'.\nverbose : [Microsoft.AspNet.Routing.Template.TemplateRoute] Request did not match the route with name '' and template 'api/Customers/{id:int}'.\nverbose : [Microsoft.AspNet.Mvc.Routing.InnerAttributeRoute] Request did not match any attribute route.\nverbose : [Microsoft.AspNet.Routing.Template.TemplateRoute] Request successfully matched the template of the route with name 'Default' and template '{controller=Home}/{action=Index}/{id:int?}'. Verifying constraints now...\ninfo    : [Microsoft.AspNet.Routing.Template.TemplateRoute] Key=controller;Value=Home, Key=action;Value=Index\ninfo    : [Microsoft.AspNet.Routing.Template.TemplateRoute] Request successfully matched the route with name 'Default' and template '{controller=Home}/{action=Index}/{id:int?}'.\nverbose : [Microsoft.AspNet.Mvc.MvcRouteHandler] Executing action SampleWebApp.HomeController.Index\nverbose : [Microsoft.Net.Http.Server.WebListener] Sending Response: HTTP/1.1 200 OK; Headers: { Content-Type: text/plain; charset=utf-8; Transfer-Encoding: chunked; }\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/9caf440045eac48f29bd5c1aa1cb048435b56a8a", "message": "Updated to use the latest shared runtime"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d84f9e901eb219df381290a1163698fe80ea3f31", "message": "Upgraded Json.NET version to 10.0.1"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/7172212fad9b794ff16323412f72d41601710b4f", "message": "Converted samples and test projects to netcoreapp2.0"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/8a7ffd980af4686f7c3055b21178f8a686c40c58", "message": "Added validation to verify format string named parameter count\n[Fixes #413] LogValues should throw if too many/too few arguments in format string"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/0c2309671f4455d0d10650db0f494bac6faac920", "message": "Added AssemblyInfo.cs to Filter project to fix build break."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/3affa0e59179ffbb02a8b46204c53b61b4ad51f3", "message": "Added tests and bunch of other changes to FilterLoggerFactory and friends."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6ed52fe2836b6a3e0a3f4a3f91bd94e942495621", "message": "Enable tests to run using dotnet xunit runner"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d14f47546320901e4d29b8fa03504af001640fa7", "message": "Fixes #326: Logger from Type name shouldn't include generic parameters"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6c29db36515ccd86dc367b5b07d790c2ff7a898b", "message": "Split large messages when logging into EventLog"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/f7c9fc32a801bc0c756931adfdca73ab4657727a", "message": "Remove dependency on System.Runtime.InteropServices.RuntimeInformation"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/12593832", "body": "Yeah, I considered it but its problematic in the following scenario:\nExample:\n- My type 'A' gets an logger injected `ILogger<A>` in its constructor\n- In method `GetItems`()\n\n``` c#\nIList<string> GetItems()\n{\n    using(_logger.BeginScope(\"Scope1\"))\n    {\n        ....some logic here\n    }\n\n       ...some logic here\n\n    using(_logger.BeginScope(\"Scope2\"))\n    {\n        ....some logic here\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/12593832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/14052835", "body": "@davidfowl What would be my alternatives?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14052835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/14053085", "body": "oh..cool..thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14053085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21941198", "body": "This should probably be renamed to something like `CorrelationId` to keep it generic as I do not see references to a `request` in other parts of this package...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21941198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "halter73": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/671", "title": "Inconsistent singleton constructor accessibility", "body": "In 2.0, the `NullLugger<T>` and `NullLoggerFactory` singletons were added to Microsoft.Extensions.Logging.Abstractions. Unlike all the previous singletons in the assembly (`NullLogger`, `NullLoggerProvider` and `NullScope`), the two new singletons have public parameterless constructors.\r\n\r\nThese constructors should be made private for consistency, easier back-compat, and so there's one right way to get an instance.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/670", "title": "Add doc comments to public APIs", "body": "This repo currently has a lot of public APIs without any doc comments.\r\n\r\nThere's already an issue (#610) about adding doc comments for `EventId`.\r\n\r\nThere's also a pretty old PR (#529) to add doc comments to console logger types. Having doc comments to indicate things like the default value of `ConsoleLoggerOptions.IncludeScopes` could certainly be useful. There are other console logging types that don't have doc comments like `IConsoleLoggerSettings`, but I haven't created an exhaustive list.\r\n\r\nNone of the (extension) methods on ILoggingBuilder (i.e. AddFilter, AddProvider, ClearProviders, SetMinimuLevel) have doc comments.\r\n\r\nI Think it would be particularly useful to note in the SetMinimumLevel doc comments that the default LogLevel is Information meaning that Trace and Debug logs will be ignored.  I think this should be noted on any API where a minimum level can be set.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/670/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gfoidl": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/661", "title": "ConsoleLogger should send LogLevel.Error to Error-Stream", "body": "`LogError` and `LogCritical` should send the logmessages to `Console.Error`-stream. Right now the output is just sent to `Console.Out`.\r\n\r\n### Minimal repro steps\r\n\r\n```c#\r\nnamespace Foo\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var loggerFactory = new LoggerFactory()\r\n                .AddConsole();\r\n\r\n            var logger = loggerFactory.CreateLogger<Program>();\r\n\r\n            logger.LogInformation(\"Test\");\r\n            logger.LogError(\"Error\");\r\n\r\n            // Make sure the consumer on the write-side can drain the queue\r\n            Thread.Sleep(500);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`dotnet foo.dll > out.txt 2> err.txt`\r\n\r\n### Expected result\r\n_err.txt_ should contain the logged error messaged. Critical messages, although not shown in the sample above, should also get sent to stderr.\r\n\r\n### Actual result\r\nAll logged messages are sent to the standard output stream.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/661/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/2eb498eb7395a008e0495ae19dbe1d7f05f7d3e8", "message": "Removed unnecessary indirection in starting the consumer in ConsoleLoggerProcessor (#660)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akiander": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/655", "title": "Make public property for FormattedLogValues._values ", "body": "I want the following field to be accessible, even it it's read-only: \r\n\r\n[Microsoft.Extensions.Logging.Internal.FormattedLogValues._values](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs#L23)\r\n\r\nI am implementing a logger that allows users to pass in objects that I flatten and add as attributes to the underlying store. But my logger can't access those objects when they are passed into logging methods like this: \r\n\r\n    logger.LogInformation(\"Some Text\", MyObject1, MyObject2); \r\n\r\nIf I can capture these objects and flatten them, then I can store them as metadata in my log storage database in such a way that they are queryable. I believe this isn't supported without the change I'm proposing here, unless you know of another way to gain access to the objects passed to logging. \r\n\r\nI understand that most people pass in primitives that get interpolated into the string using syntax such as: \r\n\r\n    logger.LogInformation(\"The ID is {id}\", id); \r\n\r\n..and I also use that mechanism. I like this capability but I want to go one step further and allow my logger full access to the objects so my logger has the freedom to store them the correct way and not as string or other primitives. So if you make the FormattedLogValues._values field public (read-only) for the loggers then it doesn't break or prevent the original functionality and, as a bonus, this can also support the mechanism I mention above for capturing rich metadata from full objects passed to logging. \r\n\r\nThoughts? \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akarimovbytewerk": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/654", "title": "NET Core 2.0.0-preview2 Log filtering", "body": "Hello, after upgrade to version 2.0.0-preview2 LoggerFactory filtering is broken and there is no method AddFilter anymore. Can you suggest how to filter built in event sources in new version or did i miss something?\r\nHere is my ConfigureServices part:\r\n```var loggerFactory = new LoggerFactory();\r\n            loggerFactory.AddFilter(new Dictionary<string, LogLevel>\r\n            {\r\n                { \"Microsoft\", LogLevel.Warning },\r\n                { \"System\", LogLevel.Error },\r\n                { \"Engine\", LogLevel.Debug }\r\n            });\r\n            loggerFactory.AddLog4Net();", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rynowak": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/645", "title": "ConfigureLogging overloading causes VS intellisense to behave badly", "body": "These are the methods as they are defined today \r\n```\r\n        public static IWebHostBuilder ConfigureLogging(this IWebHostBuilder hostBuilder, Action<ILoggingBuilder> configureLogging);\r\n\r\n        public static IWebHostBuilder ConfigureLogging(this IWebHostBuilder hostBuilder, Action<WebHostBuilderContext, ILoggingBuilder> configureLogging);\r\n```\r\n\r\nTry this out, start typing out something like\r\n```\r\nWebHost.CreateDefaultBuilder(args) .ConfigureLogging(b => \r\n{\r\n    b.    \r\n});\r\n```\r\n\r\nThe completions after the `b.` are for the `Action<WebHostBuilderContext, ILoggingBuilder>` overload even though we only have one parameter. Basically type inference for the lambda won't do the right thing unless we have exactly correct code inside the lambda.\r\n\r\nSince so much of the `ILoggingBuilder` API is extensions, this is a royal pain since intellisense won't show you what's going on.\r\n\r\nMy guess is that `UseDefaultServiceProvider` also behaves similarly.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/645/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/285", "title": "Support additional formatting options for ConsoleLogger", "body": "We want to have support for configuring scopes / category name / eventId / timestamps, etc.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/285/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/284", "title": "Support buffering per-scope in Console Logger", "body": "We want to add a feature that will buffer all outgoing log messages while inside a scope, so they can be grouped and separated with a trailing newline.\n\nThis will make the formatting much more readable for understanding units of work.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/48252127", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/48252127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/48794919", "body": "/cc @saggysanctum to understand the impact on your work\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/48794919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50822781", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50822781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53613433", "body": "You would probably implement this with an `ILoggerProvider` that goes async using fire and forget (`async void`)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53613433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/14001479", "body": "Yeah I'm doing that right now :+1:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001483", "body": "pretty much yeah.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/14001483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489851", "body": "Put this on the `NullLogicalOperation` class in a public readonly field. This way if multiple consumers need it they don't all have their own copy\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489921", "body": "add a k10 configuration so the next guy doesn't have to do it.\n\n`\"k10\": { }`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489975", "body": "These should probably go in a sub-namespace so they're not in the face of everyone using logging. @davidfowl do you guys have a preference on the naming?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14489975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495169", "body": "'start event'\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495184", "body": "Writes a start event to the log\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495191", "body": "newlines\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495200", "body": "Writes a stop event\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495222", "body": "Test this condition, and use `Assert.Same(...)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495266", "body": "to verify that something isn't called (for your other test)\n\n`mock.Verify(expr, Times.Zero())`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14495266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579194", "body": "ya, I just didn't want him to make work for the next person.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579253", "body": "then if someone does add tests that can run on k10, then they also need to add the ifdefs - that's what I was getting at\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14579253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/15665545", "body": "Creates a new ILogger instance using the **full** name of the given type.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/15665545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849113", "body": "vs generates dat SWAG now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14849113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19635252", "body": ":100: \n\nWe're doing a lot of by-hand stuff that's similar to this in routing, that we'd love to delete. However what would we be needed would be good default formatting of of things like dictionaries/lists/arrays\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19635252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "JeremyTCD": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/638", "title": "ConsoleLogger truncating last few lines", "body": "## Issue\r\nConsoleLogger sometimes truncates latter parts of logs\r\n## Cause\r\nI think the issue may be related to the addition of `_outputTask.Wait(1500)` to `ConsoleLoggerProcessor.Dispose()`:\r\n```csharp\r\n// ConsoleLoggerProcessor.cs\r\npublic void Dispose()\r\n{\r\n    _messageQueue.CompleteAdding();\r\n\r\n    try\r\n    {\r\n        _outputTask.Wait(1500); // with timeout in-case Console is locked by user input\r\n    }\r\n    catch (TaskCanceledException) { }\r\n    catch (AggregateException ex) when (ex.InnerExceptions.Count == 1 && ex.InnerExceptions[0] is \r\n    TaskCanceledException) { }\r\n}\r\n```\r\nIf a queue takes longer than 1500ms to clear, logs will be truncated.\r\n## Reproduction\r\n[Repo](https://github.com/JeremyTCD/ConsoleLoggerOutput/tree/master). This is a simple reproduction of the issue. To use, build the solution and debug OutputCapturer. Debug output will reflect that some messages from OutputGenerator get truncated. \r\n## Additional Notes\r\nI think it would be a good idea to guarantee that all log messages are always written (like before Console.WriteLine was moved out of the critical path). Otherwise, additional documentation to warn that logs may be truncated in certain scenarios should probably be added.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HaoK": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/636", "title": "[Cleanup] Rename all OfT files.", "body": "I don't think use the OfT file designation anywhere else for generics, should rename all of these files to just drop the OfT", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/635", "title": "[Cleanup] Should be consistent in usage of Internal folder", "body": "Noticed that some packages like Abstractions have a .Internal folder for the internal classes, should probably be consistent and do the same for Microsoft.Extensions.Logging, and all projects in this repo.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/634", "title": "Remove DefaultLoggerLevelConfigureOptions and just default MinLevel ", "body": "Context: https://github.com/aspnet/Release/issues/153#issuecomment-308213371\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/0eee71f5bbca4da6b88eebb4b1a49cc8b44ac248", "message": "Fix build break"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9baa62cad8b714be9fc3ec492d5b00885a71f22a", "message": "Fix console logger test"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/655c8ec1638e4946471f2b2863af51ea5cfaaaf9", "message": "Update test monitor"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/82521a402644a721c6bebd2502e19701b7467685", "message": "React to options"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d82ee144cabdace95a8ecd19f5b216c7b8634a71", "message": "React to Options (#651)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c8f4078c6d55069f02318ca71b501ea7f126db13", "message": "React to Configuration API changes"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/be443dd1732f254b276d301b36decc7c833d28d9", "message": "React to Configuration changes"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemcmaster": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/631", "title": "Console logger from DI doesn't produce console output", "body": "Console logger does not produce output when using 2.0.0-preview3-25445.\r\n\r\n```c#\r\nusing System;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace Sample\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var services = new ServiceCollection()\r\n                .AddLogging(config => config.AddConsole())\r\n                .BuildServiceProvider();\r\n\r\n            services.GetRequiredService<ILogger<Program>>()\r\n                .LogCritical(\"Hello\");\r\n        }\r\n    }\r\n}\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.0.0-preview3-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.0.0-preview3-*\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\ncc @pakrym @BrennanConroy ", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/0dccc54d959dab3709ddfac493d28f9c0c5d8c03", "message": "Use MSBuild to set NuGet feeds instead of NuGet.config"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/e8e3e707f5131e22d7d27fce6bfcefdda1dbb817", "message": "Upgrade dependencies to aspnetcore 2.1.0-preview1-27475 and build tools to 2.1.0-preview1-15549\n\n[auto-updated: dependencies]\n[auto-updated: buildtools]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/97c26fc5ce54e4a9c879bce898557ca548280cc4", "message": "Pin tools and package versions to make builds more repeatable"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9461009174fe3c72081ec5a20786fbfbb725554e", "message": "Use PackageLineup to manage PackageReference versions"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ddf0b0a752dff0d34e0cfbbb2c7ff7427c0fa774", "message": "Use Directory.Build.props/targets"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9f642fd125b723b0cd3bbfd7d6bb58f7daee233f", "message": "Upgrade to xunit 2.3.0-beta4"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/7fde8e3556fb9268d5951c7de667da8fe4815503", "message": "Fix syntax warning when running build.sh on older versions of bash\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b551562fc4e72908e5c7df5f13c6b64b4eeaa539", "message": "Update bootstrappers to use the compiled version of KoreBuild\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/28bdfd2635b719a26077202fd31779d72c3a851c", "message": "React to aspnet/BuildTools#293\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c36f30e9e3d18888e8ae2d230dec0698495e6133", "message": "Adding libunwind8 to .travis.yml\n\n[skip appveyor]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/8248a993a69dab5a257b48bc6aa5a8da08c08124", "message": "Target .NET Standard 2.0"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/50bc4c097986eafe3b4f3be8c36a79c832820af0", "message": "Upgrade test framework versions and fix test issues"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5bd00676a677476e3a203b4a925a1621266b2f86", "message": "Revert \"Update test framework versions\"\n\nThis reverts commit 34476ae12c13dccf61cd25a7458aec1e82e6d314."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/34476ae12c13dccf61cd25a7458aec1e82e6d314", "message": "Update test framework versions"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5d061cbf05b68be055e0ca8652826f84a5896a19", "message": "Update Travis to macOS Sierra\n\n[skip appveyor]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5c3239fb162278254f4e307dd8b1ac105d9cd430", "message": "Upgrade dependencies to latest stable releases"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b38614ac310212d009cb8648f50a6ea67caf1c14", "message": "Unify dependency versions to one file and remove workarounds"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/16518f419be3a56af840277aea6677b8594c0f5f", "message": "Update appveyor and travis settings"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/bb0c0a48671c105e4923dd5746d5659192d2b8e6", "message": "Update AppVeyor and Travis settings"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/cafed78151ef68f7ffd0b720f73a5b7bbd4756c8", "message": "Change korebuild branch and fix argument forwarding in bootstrapper"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5262154bd5876322b2dc3c8117ab19f43f80639a", "message": "Downgrade to stable packages"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ebfd25aceb80b8738a3d857bba15f4fd9a73ece4", "message": "Remove usage of conditional multi-targeting\n\nThis causes Visual Studio to crash. See\nhttps://github.com/dotnet/roslyn-project-system/issues/1431"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/70f8047e809f0c327ed6570db02b7db318735795", "message": "Upgrade to VS 2017"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2a0954bcc8fc8eb6badaadafe85b116391ad6341", "message": "Clean tmp folder after unzipping KoreBuild"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/db0ba840ab99f891aee42c9ad77d9f914af07b39", "message": "Harden log formatter to handle null formats and null arguments"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ea6f97356a67b98703e91f55c46fb6a36f26ffba", "message": "LoggerFactory public methods throw ObjectDisposedException after dispose"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/bc2a38e489f564615df77bf77e89e3094188a686", "message": "Remove netcore50"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b7e8c617c4d4f08e265370e0461d679c746b5f76", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2eca2a38b271d32de90f0d50f67ace83cf8ee34c", "message": "Fix build on Linux"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ed89d73a5f87d71f3b0689ef2c5d1022970c34fe", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/f276a5c8b90e4062f2cdae1b8a12b7837bd8fa1c", "message": "Cross-compile to netcore50 to support EF on UWP"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/093f2f6f4e4f9850cfebc087aba67c086c9d2ada", "message": "Fix backslashes in yml config.\n\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5c67f3217e16ef651af42c04e83b3391f35e4873", "message": "Limit the branches that build on our public CI.\n[ci skip]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/615b19f784bffb7aa0baeec349406283261066d3", "message": "Updating build script"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/de2a921a82bec8b1443151f760eddb09e3c8a1f5", "message": "Fix policheck false positive match on the word \"red\""}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ddobric": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/629", "title": "Provide more generic Log() method", "body": "Right now we have several extension methods for logging defined in LoggerExtensions (LogWarning, LogError,..). \r\n\r\nAdditionally we have a publc more generic method in ILogger\r\n\r\nvoid Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter);\r\n\r\nThat one is public, but very ugly to use. Moreover, it requires as to provide a formatter instead of using default one, which is not accessible.\r\n\r\nSuggestion:\r\nIt would be good to have a following (additional) method in LoggerExtensions,cs\r\n\r\n public static void Log(this ILogger logger, string message, params object[] args)\r\n    \r\n    \r\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/8dfbbf80d414a185728bfe7b9de5cb72dd7b4d64", "message": "Added generic extension method. (#649)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlainBorletHote": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/628", "title": "How to ensure EventId uniqueness between nuget packages?", "body": "Consider Microsoft.Extensions.Logging becomes the new de-facto standard for logging, how to ensure uniqueness of EventId between nuget packages?\r\n\r\nAlain", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "poojahingnekar": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/627", "title": "How to load Nlog Config Values", "body": "Hi,\r\nI have to assign unique event ID to each message so that Remote diagnostics can determine and filter which messages to send alerts and we should able to see in event viewer. How to loads event id(or nlog config) from .dll file and same we have to set in c# code in same project. Another question is we have to fetch event id from c# and our config file is in another project how to fix this so that we can see event id in event viewer", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RehanSaeed": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/625", "title": "Add LogTime Extension Method to Log Duration", "body": "It is common to want to log the duration, start and end time for running a piece of code. This is typically done using a stopwatch. It would be nice if we could do:\r\n\r\n```\r\nusing (logger.LogTime(LogLevel.Information, 0, \"Message\"))\r\n{\r\n    // A long running piece of code e.g. DB/HTTP call etc.\r\n    await Task.Delay(1000);\r\n}\r\n```\r\n\r\nThe extension methods to support this could look like this:\r\n\r\n```\r\npublic static IDisposable LogTime(\r\n    this ILogger logger,\r\n    LogLevel logLevel,\r\n    string message,\r\n    params object[] args);\r\n\r\npublic static IDisposable LogTime(\r\n    this ILogger logger,\r\n    LogLevel logLevel,\r\n    Exception exception,\r\n    string message,\r\n    params object[] args);\r\n\r\npublic static IDisposable LogTime(\r\n    this ILogger logger,\r\n    LogLevel logLevel,\r\n    EventId eventId,\r\n    string message,\r\n    params object[] args);\r\n\r\npublic static IDisposable LogTime(\r\n    this ILogger logger,\r\n    LogLevel logLevel,\r\n    EventId eventId,\r\n    Exception exception,\r\n    string message,\r\n    params object[] args);\r\n```\r\n\r\nImplimentation is fairly trivial, in fact you already do something similar in your unit tests [here](https://github.com/aspnet/Logging/blob/321761301bf6319d42b054e9ba33b4bc74525f92/src/Microsoft.Extensions.Logging.Testing/AssemblyTestLog.cs#L35-L52).", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/625/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BrennanConroy": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/616", "title": "Obsolete APIs in 3.0.0", "body": "Since we obsoleted some APIs in `2.0.0` we can delete them in `3.0.0`\r\nSee https://github.com/aspnet/Logging/pull/605 for original obsolete APIs", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/595", "title": "Investigate perf for filtering", "body": "For example Noop on empty filter here https://github.com/aspnet/Logging/blob/4c83c25e08fa58ef537386fb3dffeb1a8e53ef34/src/Microsoft.Extensions.Logging/Logger.cs#L56\r\nand cache values here\r\nhttps://github.com/aspnet/Logging/blob/4c83c25e08fa58ef537386fb3dffeb1a8e53ef34/src/Microsoft.Extensions.Logging/LoggerFactory.cs#L426\r\n\r\nAlso, as part of this add Microbenchmarks", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/560", "title": "Avoid a dedicated thread in ConsoleLoggerProcessor", "body": "https://github.com/aspnet/Logging/blob/db73396309d4989925486061e0a88997b966ae0a/src/Microsoft.Extensions.Logging.Console/Internal/ConsoleLoggerProcessor.cs#L22", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/559", "title": "Make maximum log queue size configurable", "body": "https://github.com/aspnet/Logging/blob/db73396309d4989925486061e0a88997b966ae0a/src/Microsoft.Extensions.Logging.Console/Internal/ConsoleLoggerProcessor.cs#L12", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/144", "title": "Documentation: ILogger", "body": "From #121 \nWrite doc on why we don't have LogAsync method.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/cd4e9434fb4ecdf51d917c21bed836df0363d89f", "message": "Add minimum LogLevel to AssemblyTestLog (#684)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/cd177fb967aae0eb84bda6bba1b2ad403e5bbda6", "message": "Log exception in XunitProvider (#668)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/45e3af1f16b31e630a58f2c157b48ce5512d389e", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/4190aa0ee52cbf1f5ea51c135347962a58471c47", "message": "Obsolete old APIs (#605)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/eecb8e24da041077302b7ec8846e2a3173c08af0", "message": "Make AddFilter chainable, add some doc comments, add UseConfiguration\u2026 (#597)\n\n* Make AddFilter chainable, add some doc comments, add UseConfiguration to LoggerFactory"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2698a6768b41cfd56d2006fe6a5bd850faf7a234", "message": "Generated missing baselines (#600)\n\nAdd an optional extended description\u2026"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/721d3df4e9415b1043264ccbb3cfe79b302972cd", "message": "Fix AddProvider to add providers to existing loggers (#598)\n\nFix AddProvider to add providers to existing loggers"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/561cdfcc9822e512e6226cb237d03dcf3bec170b", "message": "Remove Microsoft.Extensions.Logging.Filter project"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1ec418937ddb6bbcc83653e90b89285da9eb2a62", "message": "Ignore enum case in LoggerFactory"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/4c83c25e08fa58ef537386fb3dffeb1a8e53ef34", "message": "Add first class filtering to LoggerFactory"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/cc503aaed0b9fb3e93345b28629e80581337d3c1", "message": "Limit cached format values size"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6525bffb58fe8035bc1604b4b32eece5000c5f22", "message": "Ensure change token is reset"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/db73396309d4989925486061e0a88997b966ae0a", "message": "Use BlockingCollection<T>"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/e8d850ea439872bf6000ec77f8895a3527580aa5", "message": "Remove duplicate TestLogger"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9506ccc3f3491488fe88010ef8b9eb64594abf95", "message": "Make Console Logger faster"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2affd93f72139efbfd8b6f359e357f371903688a", "message": "Move NullLogger out of Internal"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5fadb457b8a125dbf6d5af04316344608362b553", "message": "Disable flaky test"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2249bb778c3e40cf36a505782e26c5e7fc13c247", "message": "Update .travis.yml"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/62265c0b3982e9fa17d49fd6f699ee84d35cc566", "message": "Fix EventLogger in .NET 4.5.2"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/61a625a21fcef697c86016ef6618593b3ccdd9c6", "message": "AppDomain safety"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/7457578257cfb1eb2940b26818798a017efc1921", "message": "Use standard ansi color codes"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1a9808518ec58bef7f4afbbcab76719a30cb6b33", "message": "Fix .xproj to build in VS"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ddc1409be0e34c6973570b2b7b3d1686925d3658", "message": "Update/fix sample"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d05bbde7f18f98a2ab05796b2f1b3d7afc105f17", "message": "Replace PlatformAbstractions with RuntimeInformation"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/3d853c72eb9fb7e6182840d5c7811769dd431c62", "message": "Color only log level"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/762f8d2432e0940229cd6c20f5eeaa3c633aa61b", "message": "React to Configuration changes"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9f4dee96995c6a0aa4a239128fd174120ebfe4b8", "message": "Merge pull request #391 from ORuban/388_Fix_DebugLogger_to_log_exception_details\n\nAdd Exception to DebugLogger output"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/213f4ec575caedf5a2af30f0fa3e617cd2cd7bf4", "message": "Add missing tests from DNX451 -> NET451 rename"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ad487c76e16e52474572694d98feafd78575318d", "message": "Fix overload of Debug.WriteLine we are using"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/bc8ba8aa66773afaab5a4698ecadf4cd5247c2b7", "message": "Set background color with foreground color in ConsoleLogger"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6b07c6ae4aadf3b605d161bc8f6cc36de1619efc", "message": "Add Exception to EventLogger output"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/da3bc9cc84a642aba89b629f970681b14d188938", "message": "Make TraceSourceLogger public"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/46c6d523fd323eba101f230b96111d3fa4dcfa46", "message": "Print exception not just message"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/79d0820b8685f957151603d935c5cacc2700c4ac", "message": "Remove our NLog implementation"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6e8bcd962568b3954354ab3534ca5ee6509a8829", "message": "Fix case where no args passed to Log* extensions"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/4528bdbc2816a8b5f933d9c6cf2da806ce4a72ea", "message": "Changes to Logging API"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/a6b0cd5bd7b44cbc9f56bc59fd6414703aa00bbf", "message": "Revise LogLevel Enum"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1b01e3f23d16b0dae44c533e96fab86d49f44e20", "message": "React to FileProviders namespace changes"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MichalPavlik": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/612", "title": "Unified logging/tracing documentation", "body": "Hi, I read very interesting discussion (#332) and I have the same feelings as @cwe1ss because there is another new project - [Microsoft Diagnostics EventFlow](https://github.com/Azure/diagnostics-eventflow). It's confusing to have more libraries with similar purpose. \r\n\r\nThe relevant articles about these libraries, principles, features and guidelines are fragmented on different places such as MS Docs, GitHub issues/wiki, blog posts etc. For example, we use EventSource because it's very powerful, fast, semantic and implements activities which is indispensable feature in distributed environment. Unfortunately you can find most useful EventSource/ETW articles on @vancem blog. Don't get me wrong, these articles are really great, but I would expect to read something like this on docs.microsoft.com (with another logging/tracing technologies).\r\n\r\nI strongly believe that bring all information to one place (maybe [here](https://docs.microsoft.com/en-us/dotnet/articles/framework/debug-trace-profile/)) would minimize the confusion. It could be described relation between instrumentation, logging, tracing and profiling concepts. It could also be described the standard pipeline: abstraction/interface -> event producer -> event transport (out-of-proc scenario) -> event listener -> sink. Then it could be described which libraries implements particular components in this pipeline (or introduce some feature matrix).\r\n\r\n**ILogger**\r\n- [Introduction to Logging in ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging)\r\n- [Guidelines](https://github.com/aspnet/Logging/wiki/Guidelines)\r\n\r\n**EventSource**\r\n- [Windows high speed logging: ETW in C#/.NET using System.Diagnostics.Tracing.EventSource](https://blogs.msdn.microsoft.com/vancem/2012/08/13/windows-high-speed-logging-etw-in-c-net-using-system-diagnostics-tracing-eventsource/)\r\n- [Introduction Tutorial: Logging ETW events in C#: System.Diagnostics.Tracing.EventSource](https://blogs.msdn.microsoft.com/vancem/2012/07/09/introduction-tutorial-logging-etw-events-in-c-system-diagnostics-tracing-eventsource/)\r\n- [ETW in C#: Controlling which events get logged in an System.Diagnostics.Tracing.EventSource](https://blogs.msdn.microsoft.com/vancem/2012/08/14/etw-in-c-controlling-which-events-get-logged-in-an-system-diagnostics-tracing-eventsource/)\r\n- [Why doesn\u2019t my EventSource produce any events?](https://blogs.msdn.microsoft.com/vancem/2012/12/21/why-doesnt-my-eventsource-produce-any-events/)\r\n- [Exploring EventSource Activity (correlation and causation) Features](https://blogs.msdn.microsoft.com/vancem/2015/09/14/exploring-eventsource-activity-correlation-and-causation-features/)\r\n- [Rich Payload Data in EventSource V4.6](https://blogs.msdn.microsoft.com/vancem/2015/09/20/rich-payload-data-in-eventsource-v4-6/)\r\n- [Dynamically Defined Events in EventSource V4.6](https://blogs.msdn.microsoft.com/vancem/2015/10/02/dynamically-defined-events-in-eventsource-v4-6/)\r\n\r\n**EventSource (LTTng specific)**\r\n- [.NET Cross-Plat Performance and Eventing Design](https://github.com/dotnet/coreclr/blob/master/Documentation/coding-guidelines/cross-platform-performance-and-eventing.md)\r\n- [Tracing Runtime Events in .NET Core on Linux](http://blogs.microsoft.co.il/sasha/2017/03/30/tracing-runtime-events-in-net-core-on-linux/)\r\n\r\n**DiagnosticSource**\r\n- [Logging using DiagnosticSource in ASP.NET Core](https://andrewlock.net/logging-using-diagnosticsource-in-asp-net-core/)\r\n- [DiagnosticSource Users Guide](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md)", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajcvickers": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/607", "title": "Clarify the semantics of EventId and possibly override Equals, etc.", "body": "The API of EventId makes it look like the name is optional--i.e. I can create one with just an int. But if I do this, should it be considered the same as an EventId created with the same int but also a name?\r\n\r\nIf these are supposed to represent the same event, then shouldn't Equals, etc. be implemented on the type? if they are not, then can this be documented on the class to make it clear that the name, while being optional, is significant in the semantics of the type?", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/c6bfb2168ec92c6dbf38da449afe1ceedfe58d49", "message": "Return IServiceCollection from AddLogging so that additional calls can be chained\n\nPreviously the AddLogging method did this. It is also common in other builder methods like this. It doesn't do any harm for those that don't want to chain and allows cleaner code with fewer variable declarations for those that do.\n\nMore details:\nWe often write code like this:\n```C#\\\nvar appServiceProivder = new ServiceCollection()\n    .AddLogging()\n    .AddCaching()\n    .BuildServiceProvider();\n```\nThis is really clean and easy to read. When we are no longer able to chain we have to write this instead:\n```C#\nvar serviceCollection = new ServiceCollection();\nserviceCollection.AddLogging();\nserviceCollection.AddCaching();\nvar appServiceProivder = serviceCollection.BuildServiceProvider();\n```\nThis additional clutter detracts from the overall readability of the code.\n\nFurthermore, the benefits of this kind of pattern are cascading. For example, it lets us use expression body syntax to again create very clear, very readable code:\n```C#\nprotected virtual void ConfigureServices([NotNull] IServiceCollection services)\n    => services\n        .AddSingleton<CSharpHelper>()\n        .AddSingleton<CSharpMigrationOperationGenerator>()\n        .AddSingleton<CSharpSnapshotGenerator>()\n        .AddSingleton<MigrationsCodeGenerator, CSharpMigrationsGenerator>()\n        .AddScaffolding()\n        .AddLogging();\n```\nThis was the reason when these methods where designed a couple of years ago they allowed chaining. I'm not sure why we think this is no longer relevant. Also, returning the service collection as opposed to void doesn't force anybody to use chaining if they don't want to, so what is the downside?"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/41817307", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/41817307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/46507759", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/46507759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/46602963", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/46602963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/52949144", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/52949144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "joelharkes": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/554", "title": "Weird code structure in ConsoleLoggerProvider.cs", "body": "[here](https://github.com/aspnet/Logging/blob/9506ccc3f3491488fe88010ef8b9eb64594abf95/src/Microsoft.Extensions.Logging.Console/ConsoleLoggerProvider.cs#L105) i see the following code structure\r\n\r\n\r\n\r\n```cs\r\nprivate IEnumerable<string> GetKeyPrefixes(string name)\r\n{\r\n    while (!string.IsNullOrEmpty(name))\r\n    {\r\n        yield return name;\r\n        var lastIndexOfDot = name.LastIndexOf('.');\r\n        if (lastIndexOfDot == -1)\r\n        {\r\n            yield return \"Default\";\r\n            break;\r\n        }\r\n        name = name.Substring(0, lastIndexOfDot);\r\n    }\r\n}\r\n```\r\n\r\nBy the looks of it, it wants to break down namespace in scopes per dot. and in the end return Default.\r\n\r\nBut why is the `yield return \"Default\";` inside the while loop?!\r\n\r\nwhy not:\r\n\r\n```cs\r\nprivate IEnumerable<string> GetKeyPrefixes(string name)\r\n{\r\n    while (!string.IsNullOrEmpty(name))\r\n    {\r\n        yield return name;\r\n        var lastIndexOfDot = name.LastIndexOf('.');\r\n        name = lastIndexOfDot == -1 ? null : name.Substring(0, lastIndexOfDot);\r\n    }\r\n    yield return \"Default\";\r\n}\r\n```\r\n\r\ni't seems more readable to me and would also always return 'Default' even if name is null or empty.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roji": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/533", "title": "Logging structured data without it appearing in the text message", "body": "Am looking for some guidance here, or at least confirmation that I understand things right...\r\n\r\nCurrently, if I want to use the extension methods (e.g. `LogDebug`), it seems that in order to log some piece of structured data it must be referenced from the message - this seems problematic in several scenarios.\r\n\r\nFirst, when using a logging framework such as NLog, it is standard practice to leave the layout of the text message to NLog (user-configurable). Requiring me to embed all structured data in the message text hands off a fully-formed message to NLog, stripping it of one of it's main responsibilities (layouting).\r\n\r\nAlso, in many scenarios there's a lot of structured context that may be interesting to users in some cases, but that doesn't mean it's *always* interesting and should get included in the text of each and every message. This causes very large log messages with clutter and info nobody really wants (although people may still want the option of looking up these details in the structured data attached to the message).\r\n\r\nI understand that I don't have to use the extension methods and can roll my own, but I'd like confirmation to the above, and also your opinion on this.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/533/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DamianEdwards": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/531", "title": "Merge DebugLoggerProvider into Microsoft.Extensions.Logging", "body": "We should just merge the debugger logger into the main logging package so it's always available. We could even consider wiring it up by default given it doesn't do anything unless the debugger is attached. Having it be a separate package really seems unnecessary and just adds yet another package to the list of packages add to every default ASP.NET Core project.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/234", "title": "FormattedLogValues is allocated per-logger call. Can that be avoided as a ctor? ", "body": "Can the formatter-worker be created-and-used at logger site instead?\n\n![formattedlogvalues](https://cloud.githubusercontent.com/assets/249088/9283173/8871e1ba-4286-11e5-900b-0fae8f286be0.jpg)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71788067", "body": "Blocked by https://github.com/aspnet/XRE/issues/1144\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71788067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72706475", "body": "Merged in b92e0190f6c36c97c37f3612b77ed5c41cb9b8b1\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72706475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "VaclavElias": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/530", "title": "Suggestion: Console Logger, use different color for SQL queries", "body": "Moved from https://github.com/aspnet/Home/issues/1855#issuecomment-264541060\r\n\r\nI am using default Console Logging for analyzing my SQL queries.  Is there any easy way to color differently (whatever color you decide) SQL queries so it stands out from gibberish around it?\r\n\r\nI would like to keep the other logs there but just see quickly where the SQL query starts and ends.\r\n\r\nWhen you quickly look into the attached image (some text redacted), you see white gibberish and your brain must make an effort to find SQL query.  Imagine, of course the log is loooong. I wonder it would be nice to see quickly the SQL query without making your brain explode by simply making a color of SQL query different.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4528464/20841864/4bcad886-b8ad-11e6-936e-397c276c64ae.png)\r\n\r\nWhat is your say? Anybody likes this idea?\r\n\r\n..not sure if it is possible and how easy it would be.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikeharder": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/515", "title": "Console logger adds considerable latency to requests", "body": "The console logger adds considerable latency to requests.  Here's a comparsion of the average and maximum latency with no logging, serilog to a file, and console logging:\r\n\r\nMetric | No Logging | Serilog to File | Console Logging\r\n--- | --- | --- | ---\r\nAverage (ms) | 6.46 | 6.79 | 11.19\r\nMax (ms) | 7.08 | 8.45 | 67.63\r\n\r\nhttps://github.com/mikeharder/AspNetLatency\r\n\r\nA few options were discussed to improve console logging performance:\r\n\r\n1. Don't block the request waiting for calls to `Console.WriteLine()` (or setting console colors).  Queue writes to something faster like `ConcurrentQueue`, and use a background thread to remove from queue and call `Console.WriteLine()`.  One downside is that log writes may appear out-of-order with respect to direct `Console.WriteLine()` calls.  Another downside is the server process may end before all logs have been flushed from the queue.\r\n\r\n2. Still write to the console synchronously during the request, but avoid expensive operations like setting colors.  Could be an option on the existing console logger, or a new `FastConsoleLogger`.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/428", "title": "Logs include control characters (in place of coloring) in Visual Studio output window when using Docker", "body": "## Repro Steps\n1. Install Docker for Windows Beta and Docker Tools for Visual Studio\n2. New ASP.NET Core Application\n3. Add -> Docker Support\n4. Debug -> Start Without Debugging\n## Issue\n\nLogs in output window include garbage characters in place of coloring:\n\n```\nDockerTask.ps1 -WaitForUrl -Machine ''\nHosting environment: Production\nContent root path: /app\nNow listening on: http://*:80\nApplication started. Press Ctrl+C to shut down.\n\u001b[0m\u001b[32minfo\u001b[39m\u001b[0m\u001b[0m\u001b[32m: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\u001b[39m\u001b[0m\n      Request starting HTTP/1.1 GET http://docker/  \n```\n\nCC: @glennc \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sbrickey": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/511", "title": "Logger+Scope conceals scope implementations", "body": "While troubleshooting some issues, I ended up wanting to externally track the exit/disposal of scopes. I did so by logging \"Exit Scope : {Scope.ToString()}\"... unfortunately, all I got was the object.ToString implementation which resulted in Logger+Scope.\r\n\r\nI ended up with the following changes (I was using an in-project file-copy of Extensions.Logging):\r\n- Create (empty) interface ILogScope : IDisposable and convert BeginScope return type. Initially this was just for clarity.\r\n- Convert scopes from being defined as IDisposable to ILogScope\r\n- Add Name() to ILogScope\r\n- Logger+Scope.Name() returns a coalesce from _disposables[]?.Name() results until !String.IsNullOrWhitespace\r\n\r\nin theory, I could've just modified Logger+Scope.ToString(), but I'd have needed to use reflection to determine whether the implementation was inherited from object.ToString (which is worthless to override).\r\n\r\nIn the end, I just want some way to implement some sort of ToString, and have it available on the consumption side of Logger.BeginScope... whether that's an interface, extension methods, or something else entirely, makes little difference to me.", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "moander": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/491", "title": "Console logger output layout", "body": "Is it possible to modify the output layout of the console logger? \n\nI have found that adding a Console.WriteLine() after each event makes the console output much more readable, but I have not found am easy way to implement it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/491/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johanskoldekrans": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/483", "title": "Output timestamp by default", "body": "Is there a way to output the timestamp of each log to the stdout-files? Without having to do it everywhere or using a provider? we are happy with the logging infrastructure you built for core but just want it to output the time.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/483/reactions", "total_count": 17, "+1": 17, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "herecydev": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/475", "title": "IDisposable on ILoggerProvider", "body": "Based on some of the discussions of [this issue](https://github.com/aspnet/Logging/issues/99) why is the `ILoggerProvider` interface marked as IDisposable? I understand there was a need for a \"flushing\" mechanism before application termination, but why has that become an obligation for the providers?\n\nAn example of this would be in the [console logger provider](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Console/ConsoleLoggerProvider.cs#L112) or the [debug logger provider](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Debug/DebugLoggerProvider.cs#L30).\n\nCan this not be implemented similar to the [DI pattern](https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Extensions.DependencyInjection/ServiceProvider.cs#L172-L175)?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "victorhurdugaci": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/472", "title": "Discussion, drop vs block on logger", "body": "From here: https://github.com/aspnet/Logging/pull/468#issuecomment-236306894 \n\nI would prefer to block instead of dropping message but let's discuss it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/e9e62d27d3719fe0abbb94ca93f5c2bc2d80fffd", "message": "Make the ConfigurationChange test stable"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9d1a517b73d1b14d2ba4c7535bb1b8c585c9e962", "message": "Add package description"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b7bcb771676e2ff8a7dba73ce4f4260f80bb72f9", "message": "A logger for Azure WebApps"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/70389cdef9d2c846737cd3cbd4c398978facdbc6", "message": "Update the build scripts to the latest version"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d40cb6008dd637191faab2670737fca07761f46f", "message": "Return the error code from build.cmd"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/497a7d057dd019bb15fab343f94896c00593506a", "message": "Update the build scripts"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9bea8f82b8e53a39a0396cd756fe19820370f53a", "message": "Build with dotnet"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61692700", "body": "Yay!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61692700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8547793", "body": "https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8547793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8722095", "body": "Part of https://github.com/aspnet/Home/issues/183\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8722095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549088", "body": "Nit: replace the `for` loop with `foreach`. Less code, easier to read\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549191", "body": "Are you using `Moq` at all? If not, remove the reference and enable the tests for `ASPNET50`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549326", "body": "`IsEnabled` sounds more like a property name. Maybe `IsEnableFor` is better?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549486", "body": "If `state == null` and `exception != null` then your message will start with an empty line. Consider appending the empty line only if the message is not empty.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549646", "body": "Consider replacing with a call to `IsEnabled`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18549646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18993956", "body": "This reminds me of the \"goes to\" (`-->`) operator http://stackoverflow.com/questions/1642028/what-is-the-name-of-the-operator\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18993956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18994186", "body": "I think the old way was better. TraceType is what other frameworks call **verbosity level**. You can see the numbers as the amount of information given back. Critical (lowest) outputs the least info while Verbose (highest) the most. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18994186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18994970", "body": "MsBuild calls it LoggerVerbosity and they go low (quite) to high (diagnostic) based on the amount of info you get\nhttp://referencesource.microsoft.com/#Microsoft.Build.Framework/Microsoft/Build/Framework/LoggerVerbosity.cs\n\nLog4j uses 0 for off -> 7 for verbose \nhttp://svn.apache.org/viewvc/logging/log4j/trunk/src/main/java/org/apache/log4j/Level.java?view=markup\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18994970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18995279", "body": "I see your point. It makes sense to have Severity level with highest being the most severe or Verbosity level with highest being the most verbose. It depends from where you look.\n\nAgree that renaming will remove the confusion.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18995279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19373313", "body": "Is it possible to lock writing when you detect that the world is about to end? Maybe do something like this: prevent future writing with some variable, flush the console buffer and then restore the colors. This way there shouldn't be any more concurrency issues.\n\nOr, redirect the console output streams (std and err) to somewhere else just before restoring the colors. You might miss some data but the world is ending anyway so it might not be important.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19373313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bnayae": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/469", "title": "Change to IDisposable BeginScope(TState state) API", "body": "You should consider to change the IDisposable BeginScope(TState state) API,\nto something that return IScopedLogger (which is sub set of the logging functionality) \nthis way you can encapsulate the scope and can log data to different scope simultaneously on different threads.\nwhen encapsulating the log this way it is easier to maintain and understand logging data related to specific scope.\n\n```\n\npublic interface IScopedLogger : IDisposable\n{\n    bool IsEnabled(LogLevel logLevel);\n    void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter);\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "muratg": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/459", "title": "Suppress logging for specific requests (e.g. health checks)", "body": "_From @sunsided on July 1, 2016 15:57_\n\nWe're using ASP.NET Core with Kestrel dockerized in Google Container Engine. The load balancer performs regular health checks (to a customizable route) which, depending on the configuration, can make the logs somewhat to extremely unreadable. That is, we end up with up to hundreds of log lines per second using the standard console logger (possible machines x replication factor x each line a log entry) - without any useful information.\n\nCurrently, each requests generates at least some lines similar to\n\n```\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\n      Request starting HTTP/1.1 GET http://localhost:12345/foo/bar/\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\n      Request finished in 1962.8502ms 200 application/json; charset=utf-8\n```\n\nWhile I was able to suppress all other messages by writing a custom middleware, I would like to also suppress these log lines if and only if the request comes from a specific IP subnet and/or has known HTTP headers set.\n\nFor requests different from health checks, I do want to see log output though (e.g. from `Microsoft.AspNetCore.Mvc.Internal`, etc.).\n\n_Copied from original issue: aspnet/Hosting#807_\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67234862", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67234862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "npnelson": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/452", "title": "Consider publishing Microsoft.Extensions.Logging.Testing to nuget.org", "body": "Many of my tests make use of the NullLogger defined in:\n\nhttps://github.com/aspnet/Logging/tree/dev/src/Microsoft.Extensions.Logging.Testing\n\nAs far as I can tell, this package isn't published to nuget.org, so I find myself cutting and pasting it and then possibly updating it with every AspNetCore release.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/452/reactions", "total_count": 20, "+1": 20, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "josephgardner": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/443", "title": "Exception in Logger.IsEnabled does not always throw", "body": "PR #224 aggregates exceptions in both `IsEnabled` and `Log` to prevent an exception in one logger from stopping execution of another logger. \n\nHowever, `IsEnabled` will only throw if an exception occurs and all other loggers return false. Exceptions are swallowed if any logger returns true. \n\nThis is because `IsEnabled` returns immediately if any logger returns true (even if previous loggers threw exceptions, or subsequent loggers would have thrown.)\n\nhttps://github.com/aspnet/Logging/blob/d05bbde7f18f98a2ab05796b2f1b3d7afc105f17/src/Microsoft.Extensions.Logging/Logger.cs#L79\n\nIs this by design?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mertsch": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/442", "title": "Questionable design of ILogger.Log<TState>(..., Func<TState, Exception, string> formatter)", "body": "If we take a look at https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/LoggerExtensions.cs\n\nYou will notice that the message formatter does absolutely nothing with the given Exception object\n\n```\nprivate static string MessageFormatter(object state, Exception error)\n{\n    return state.ToString();\n}\n```\n\nFrom the whole naming and how it used to be in RC1, I was lead to believe that I have to implement something like `return state + \\n + error` (pseudo code) for my message formatter.\n\nThen I was looking at https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs I saw that\n\n```\n            var message = formatter(state, exception);\n[...]\n            if (exception != null)\n            {\n                // exception message\n                exceptionText = exception.ToString();\n                printLog = true;\n}\n[...]\n                    if (!string.IsNullOrEmpty(message))\n                    {\n                        Console.WriteLine(\n                            message,\n                            DefaultConsoleColor,\n                            DefaultConsoleColor);\n                    }\n                    if (!string.IsNullOrEmpty(exceptionText))\n                    {\n                        Console.WriteLine(\n                            exceptionText,\n                            DefaultConsoleColor,\n                            DefaultConsoleColor);\n}\n```\n\nThe reason why I think is a design flaw is that the `ILogger` implementation has to _assume_ that the provided `formatter` _does not_ use the exception object to format the `message` or else you will have a duplicated exception message in the total output.\n\nI totally agree with the choice to give the `Exception` object to the `ILogger` in order to be able to log it in a somewhat special way, but then again, how should the `formatter` know that.\n\nA workaround would be to specifically _not_ give `exception` to the `formatter`, but that feels like a hack IMO.\n\nWhat do you guys think? Should\n`ILogger.Log<TState>(..., [NotNull] Func<TState, Exception, string> formatter)` be\n`ILogger.Log<TState>(..., [NotNull] Func<TState, string> formatter)`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/442/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/703", "title": "Use EventLog InstanceId instead of (deprecated) eventID to prevent exceptions with IDs > 65535", "body": "EventID is marked as obsolete http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/EventLogEntry.cs#183\r\n```\r\n        /// <devdoc>\r\n        ///    <para>\r\n        ///       Gets the application-specific event indentifier of this entry.\r\n        ///\r\n        ///    </para>\r\n        /// </devdoc>\r\n        [\r\n        MonitoringDescription(SR.LogEntryEventID),\r\n        Obsolete(\"This property has been deprecated.  Please use System.Diagnostics.EventLogEntry.InstanceId instead.  http://go.microsoft.com/fwlink/?linkid=14202\")\r\n        ]\r\n        public int EventID {\r\n            get {\r\n                // Apparently the top 2 bits of this number are not\r\n                // always 0. Strip them so the number looks nice to the user.\r\n                // The problem is, if the user were to want to call FormatMessage(),\r\n                // they'd need these two bits.\r\n                return IntFrom(dataBuf, bufOffset + FieldOffsets.EVENTID) & 0x3FFFFFFF;\r\n            }\r\n        }\r\n```\r\nand API immediatly throws when event ID is greater then 65535 http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/EventLogInternal.cs#1616\r\n```\r\n        public void WriteEntry(string message, EventLogEntryType type, int eventID, short category,\r\n                               byte[] rawData) {\r\n \r\n            if (eventID < 0 || eventID > ushort.MaxValue)\r\n                throw new ArgumentException(SR.GetString(SR.EventID, eventID, 0, (int)ushort.MaxValue));\r\n```\r\nLuckily there is a replacement\r\nhttp://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/EventLog.cs#1432\r\n```\r\n        [ComVisible(false)]\r\n        public void WriteEvent(EventInstance instance, byte[] data, params Object[] values) {\r\n            m_underlyingEventLog.WriteEvent(instance, data, values);\r\n        }\r\n```\r\n\r\nNote this issue has not been a problem with ASP.NET Core 1.x, but since 2.0 EF Core starts logging message with IDs like 2005000 for `The LINQ expression 'First()' could not be translated and will be evaluated locally.`\r\n\r\nSo this is pretty critical for anyone using 2.0", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ardalis": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/432", "title": "Add Comments to TraceSourceFactoryExtensions", "body": "Add documentation comments to TraceSourceFactoryExtensions to provide Intellisense / peek definition hints for what the parameters do.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/239", "title": "LoggerExtensions Can't Combine Exception and Format String", "body": "If you want to log:\n1) eventId\n2) Exception\n3) Formatted message\n\nThere is currently no extension method allowing this. Can we add one, or should this scenario just use the Log method? Here is the proposed signature:\n\n```\npublic static LogCritical([NotNull] this ILogger logger, int eventId, string format, Exception error, params object[] args)\n```\n\nI just ran into this while trying to log an exception in a catch {} block in which I also wanted to include some details about the request:\n\n```\n_logger.LogCritical(eventId, \"{eventId}: Unexpected error handling request {path}.\", ex, eventId, context.Request.Path);\n```\n\nIt doesn't work as desired because the exception (ex) is part of the args array for this overload (so the exception is output in place of {eventId} and the eventId is output in place of {path}).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cesarbs": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/421", "title": "Consider logging exception stack traces", "body": "Using any of the `Log*` overloads that take an `Exception` as argument only logs the exception type and message.\n\nConsider logging a stack trace for levels `Error` and `Critical` at least. Would be interesting for `Debug` and `Trace` too. Definitely not for `Information` and `Warning`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/421/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/b1e57887d11b8cd9b2cf5c39f118be7994deba30", "message": "Add ITestSink interface."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/e4cac36c54c7da982eb7b6207ceaa992982ead4e", "message": "Fix OSX build on Travis."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/97d6da5c15bb6cdcf3d48de20b0d048f8697038a", "message": "ASP.NET 5 -> ASP.NET Core"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Yves57": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/381", "title": "Console Logger Settings should not have to respect Enum case", "body": "The configuration parameter \"LogLevel\" respects the LogLevel Enum case when parsed (see `Enum.TryParse<LogLevel>(value, out level)` in `ConfigurationConsoleLoggerSettings.TryGetSwitch()`. It is easy for a user to make a mistake when typing a value in a configuration file.\nI think the code should be `Enum.TryParse<LogLevel>(value, true, out level)`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/aaaaf77c736123dface9bf5deb42858fc8aaac07", "message": "ILogger.IsEnabled(LogLevel) was returning 'True' when called with 'LogLevel.None' value (#617)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9a35b4a5581e940100dca944ae3afd6f70b37614", "message": "Add test to ignore case when parsing LogLevel string in the Console Logger Settings."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eriksendc": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/361", "title": "How to log in ConfigureServices", "body": "Hi All,\n\nI've done some searching through existing and closed issues, but I apologize in advance if this is something previously surfaced:\n\nThe standard template for Startup.cs has logging being configured in Configure(), but ConfigureServices runs first. I happen to be troubleshooting something with respect to reading configuration values from environment variables and went to put in some debug logging, but realized I don't have nlog logging available yet when I'm in ConfigureServices. Is there some standard / convention for logging within Startup.ConfigureServices()?\n\nThanks,\n-Brian\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/361/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DasJott": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/347", "title": "Logger.BeginSope(sParam) should add sParam to output", "body": "When I foudn BeginScope with string as parameter, I immediately thought how cool the idea of scopes is for logging. I thought it would add the given text to every logmessage put out while begin in the scope.\n\nBut sadly you have to chance to recognize you are within a scope by looking at the output.\n\nI would expect something like: `NamespaceName.ClassName[0] (ScopeName)`\nor anything that makes clear, we are within a scope and in which one.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/347/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "304NotModified": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/343", "title": "Proposal: remove code duplication with T4 templates", "body": "Code duplication is a source of issues and less code is less bugs.\n\nI see a lot of code duplication in \n[LoggerExtensions.cs (Abstractions)](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/LoggerExtensions.cs)\n\nThat can be easily removed with a T4 template (run at build time). This will ensure that the consistency of the code. \n\nWhat do you think? PR accepted on this one?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/340", "title": "Proposal: Decorate methods with JetBrains.Annotations.StringFormatMethodAttribute", "body": "Proposal to decorate the log methods with the [`StringFormatMethodAttribute`](https://www.jetbrains.com/resharper/help/Reference__Code_Annotation_Attributes.html#StringFormatMethodAttribute). \n\nExample:\n\n``` c#\n[StringFormatMethod(\"message\")]\npublic static void LogDebug(this ILogger logger, EventId eventId, \n           Exception exception, string message, params object[] args)\n```\n\nYou get then help from Resharper, including validation of the format message. \n\nIs a PR accepted on this one? (after merge of https://github.com/aspnet/Logging/pull/338 I guess)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/340/reactions", "total_count": 2, "+1": 1, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/c0ccd360ebdd38d132881666e016c163926ad97d", "message": "Improve docs of ILogger"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ac75a15ff0540a5e211772ad99ff226ce6c49e8d", "message": "Update link for rename NLog.Framework.logging => NLog.Extensions.Logging\n\nfor consistency"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/661f3e153f7738dbd119a3b6babc7490182b8fbe", "message": "Added NLog provider"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MikeyBurkman": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/295", "title": "Access to unformatted strings", "body": "So I'm working on a provider that would send our errors/warnings to an external error tracking application. I can't send the entire formatted message there, as it would result in a unique occurrence of that error message every time. (Not to mention some possible privacy concerns.) I would like to send the unformatted message as a way of tracking the message.\n\nFor instance, given the line:\n\n```\n_logger.LogInformation(\"User typed '{input}' on the command line\", input);\n```\n\nI would want to send only `\"User typed '{input}'\"` to the external system. However, there doesn't appear to be way to do this. I could cast the \"state\" object in ILogger.Log() to ILogValues or FormattedLogValues, but neither gives me access to the original format string. (And even then, that type of casting from object seems hackish at best.) Any thoughts?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "YEVHENO": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/267", "title": "Move LoggerExtensions to sub-namespace of current namespace.", "body": "As developer I want to be able not to use class LoggerExtensions. I want to be able implement extension methods for ILogger: LogDebug, LogError etc. Here there is a problem: if I use namespace Microsoft.Extensions.Logging, LoggerExtensions is always visible.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "poke": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/245", "title": "Custom ILogValues objects are ignored with the LoggerExtensions", "body": "Custom `ILogValues` types are currently ignored when producing the log output. The `ILogValues` contract suggests that you just need to expose a key/value enumerable in order to have them somewhat nicely outputted to the log.\n\nHowever, because of how the Log methods [are implemented](https://github.com/aspnet/Logging/blob/98fe4f77b99dc93fb7faf0888f0430195377c0ff/src/Microsoft.Framework.Logging.Abstractions/LoggerExtensions.cs#L564) that take the `ILogValues` objects, they always pass in the default `_messageFormatter` which in the end just uses [`ILogValues.ToString()`](https://github.com/aspnet/Logging/blob/98fe4f77b99dc93fb7faf0888f0430195377c0ff/src/Microsoft.Framework.Logging.Abstractions/LoggerExtensions.cs#L601) to produce the output.\n\nThe logger implementations, for example the [ConsoleLogger](https://github.com/aspnet/Logging/blob/9aa1ab4fc4e1445e1af259de1294e9328fe039ca/src/Microsoft.Framework.Logging.Console/ConsoleLogger.cs#L40) actually checks for the `ILogValues` objects and produces a nice output, but since the logger extension passed in a [non-null formatter](https://github.com/aspnet/Logging/blob/9aa1ab4fc4e1445e1af259de1294e9328fe039ca/src/Microsoft.Framework.Logging.Console/ConsoleLogger.cs#L36), this all is for nothing.\n\nSince the `ILogValues` interface seems to be something meant as high-level as the extensions themselves, it would probably make most sense to implement a custom handling within the MessageFormatter there. Alternatively, the `ILogValues` interface should be changed to make clear that implementing `ToString` is required in order to produce an acceptable output.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kspearrin": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/233", "title": "Include eventId as factory Add extensions filter parameter", "body": "Currently we are given the ability to filter logs for each provider based on the category/name string and log level enum when adding them to the factory like so:\n\n```\nloggerFactory.AddDebug( ( category, level ) => level >= LogLevel.Information );\n```\n\nIt would be nice if the we were given the option to filter by eventId as well:\n\n```\nloggerFactory.AddDebug( ( category, level, event ) => \n    level >= LogLevel.Information\n    && event != 10 );\n```\n\nI know we can easily just create our own provider that implements this extension overload (which is what I have done for now), but my suggestion is to include it with the providers that come with the library by default.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/233/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danroth27": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/220", "title": "Logging and DI", "body": "Originally posted as https://github.com/aspnet/Mvc/issues/2822 from @mbharodia \n\nI have several helper classes.\n\nOne of them is a custom implementation of ILogger and ILoggerProvider. I wanted to provide configuration value to ILogger such as file path to log values. I wanted to inject IOption<AppSetting>.\n\nMy custom ILogger is created by my custom ILoggerProvider. If I do constructor injection then I need to pass in this dependency all the way up to ILoggerProvider.\n\nSo thought to use [FromServices] right in ILogger. When I used [FromServices] on a property, it did not resolve the dependency.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hishamco": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/212", "title": "Formatters Improvement", "body": "If we have look to the `ILogger` definition here https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.Abstractions/ILogger.cs#L22 we will notice that `Log` method contains `Func<object, Exception, string> formatter` a formatter that allow us to format the logged message, but what I have notice from many Logger Provider implementations that **Formatters** should give the ability to format the entire `LogEntry` not the message.\nHave a look to the following lines:\n`TraceSourceLogger` https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.Abstractions/ILogger.cs#L22\n`DebugLogger` https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.Debug/DebugLogger.cs#L85\n`ConsoleLogger` https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.Console/ConsoleLogger.cs#L79\nwe will notice that the devs don't have a control for the entire `LogEntry` , they have ability to format the logged message, i think our APIs lack in this point, because the actual message is surrounded with some metadata out of the box, furthermore there's no why to subclass the actual loggers to provide such things. For instance if i wanna add `TimeStamp` into the message using `DebugLogger` I can use the `formatter` parameter to achieve that, but I will see myself repeating this in places, someone may say \"You can create your own method extension\", that's true but what if wanna use the following format **[LogLevel] TimeStamp - Message**\nI think this is impossible in the current implementation not only in `DebugLogger` but in all logger implementation!! i suggest to provide some way to achieve that - doesn't matter the implementation - either using virtual method or delegate .. etc.\nAlso this will open up the possibility to provide differnt kind of formmaters such as `TextFormatter`, `JsonFormatter`, `XmlFormatter` and so on ..\nLet me know your feedback, I can provide code sample if you are interest :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ycrumeyrolle": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/153", "title": "Make the Scope class sealed and simplify the IDisposable pattern", "body": "The Scope class is an inner private class. It is not necessary to provider the overridable Dispose() method as it cannot be override. \nThis change will remove a remaining TODO.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72133015", "body": "My main concern is that without the IDisposable pattern, I am not sure that my logger logs all my messages. \nAn example would be with the DiagnosticsLogger. If I use a TextWriterTraceListener with AutoFlush=Off, I can lost some information at the daily app pool recycling. \nWith a IDisposable pattern, I will be able to a call the traceSource.Flush() at the App_End().\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72133015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72133521", "body": "IMHO the IDisposable pattern should be supported for the ILoggerProvider, not for the ILogger because of ILoggerProvider lifecycle is managed by the Logging framework, ILogger lifecycle is manager by the application.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72133521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "suhasj": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/127", "title": "Split test project to test base logging interface and implementation dependent one", "body": "Right now the test project depends on Logging.Serilog as well. This makes it compile only for desktop framework. We should ideally split the test project into ones that test the base logging API and the ones that test the implementations like NLog, Serilog.\n\nAlso the tests should be written to run on coreclr as well\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69984253", "body": "Thanks :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69984253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72948828", "body": "I debugged this and the `Func<object, Exception, string> formatter` parameter in the `Write` method already does this. A caveat is that it is not async. Making it async along with having a WriteAsync would be really helpful\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72948828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Tratcher": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/67", "title": "Add the ability to flow log scope manually", "body": "Today when you call ILogger.CreateScope the scope is tracked using the thread context until you dispose it.  There are several places where the thread context does not naturally flow and needs to be updated manually (TaskCompletionSource.TrySetResult, Task.Run, Task.Factory.StartNew, etc.).\n\nWebListener is the worst example so far. We want to have it establish a scope around the lifetime of a request, but there are a few explicit thread hops before the request enters the application pipeline. Figure out how to flow the context across those hops. See:\nhttps://github.com/aspnet/WebListener/blob/dev/src/Microsoft.Net.Http.Server/AsyncAcceptContext.cs#L98\nhttps://github.com/aspnet/WebListener/blob/dev/src/Microsoft.AspNet.Server.WebListener/MessagePump.cs#L139\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/67/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/49460792", "body": "Postponed until we can figure out how to do this without breaking EF.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/49460792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60682555", "body": "1. Elm needs to be moved to the Diagnostics repo due to its dependencies.\n2. Remove the MVC dependency from the sample. You can use this Hello World code instead:\n   https://github.com/aspnet/Entropy/blob/dev/samples/Builder.HelloWorld.Web/Startup.cs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60682555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62944350", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62944350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63352640", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63352640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65112801", "body": "Great, thanks. Can you update the console logger to display the message?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65112801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65122596", "body": "Looks much better, thanks.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65122596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65262762", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65262762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69640805", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69640805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/10779079", "body": "You can't add this dependency, it breaks the repo layering, even in test projects.\n/cc @pranavkm \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/10779079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20805886", "body": "Tabs might be overkill, especially if you end up with a deeply nested object. How does it look with just two or three spaces?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20805886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20806159", "body": "Can you use `is` here instead of `as`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20806159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21111887", "body": "I'm getting an extra blank line before the data fields.\n\nShould this be inside of FormatLoggerStructure so it works recursively?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21111887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21114002", "body": "Would it ever make sense to have a message but no values? Or in other words, what does it mean if your structure returns no values?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21114002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21116679", "body": "Ok, so this just get moved up a few lines.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21116679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "SonjaKhan": {"issues": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/60", "title": "Clean up the namespaces of Utility files", "body": "see #59 for utility files \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/60/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/46", "title": "Console Logger color persists upon unexpected exit in cmd", "body": "The console logger will change the console prompt color if the program exits before the logs are written out. I've only seen this behavior in cmd, powershell seems to be OK.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/46/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57691299", "body": "I am not sure how the other issue got committed to this pull request...\n\nEDIT: managed to get rid of the unrelated commit\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57691299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57825005", "body": "I squashed my commits locally on the dev branch before I pushed so this doesn't show up as merged even though it is. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57825005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58715814", "body": "Added tests, accidentally squashed my commits\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58715814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59118010", "body": "was pushed this morning, coherence-signed has passed :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59118010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59280344", "body": "@borgdylan I am working on abstracting the storage system of the logs \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59280344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59443125", "body": "This is pretty ugly right now and doesn't show all the data that's stored. Grouping by request, filtering by severity, sorting by time, etc are things I was thinking about implementing but I wanted to get some feedback before I went too far down a bad path. Linking to the full details of a request is also important - currently I store whatever is in [LogContext](https://github.com/aspnet/Logging/blob/elm/src/Microsoft.AspNet.Logging.Elm/LogContext.cs), which is probably missing a couple of properties.\n\n![elmlogger2](https://cloud.githubusercontent.com/assets/2818455/4671766/7e0b7540-5585-11e4-954e-2e046ef7edda.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59443125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59557716", "body": "@victorhurdugaci @Eilon is this good to ship today?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59557716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59587727", "body": "@rustd Just pushed this to dev, so the template can be updated\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59587727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59589976", "body": "@Eilon @davidfowl Can this go in for beta?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59589976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59592227", "body": "@davidfowl  :cool: story bro\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59592227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59792138", "body": "@tugberkugurlu this looks related, which sample are you running?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59792138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59793318", "body": "@tugberkugurlu thanks, I will look into it\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59793318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59795365", "body": "I was working on powershell, and the issue seems to only repro on cmd. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59795365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59854236", "body": "issue with colors on exit is being tracked in #46\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59854236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60176294", "body": "new interface:\n![elmlogger3](https://cloud.githubusercontent.com/assets/2818455/4746475/fe89b18c-5a49-11e4-8a80-f28e30829f17.png)\n\nfiltering by logger name:\n![elmlogger4](https://cloud.githubusercontent.com/assets/2818455/4746480/0bd4a5d6-5a4a-11e4-9c4a-80ecc30f4441.png)\n\nhighlight scope on hover:\n![elmlogger5](https://cloud.githubusercontent.com/assets/2818455/4746481/0cffebbe-5a4a-11e4-81f5-d74fcc435224.png)\n\npath link shows request details and logs:\n![elmlogger6](https://cloud.githubusercontent.com/assets/2818455/4746486/117bcadc-5a4a-11e4-8c57-7b04c30560aa.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60176294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60286985", "body": "@victorhurdugaci @Eilon @davidfowl @loudej I think it makes sense to also rename `Verbose` to `Debug` to better reflect the `SeverityLevel` concept, what do you think?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60286985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60314350", "body": ":+1:  `LogLevel` \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60314350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60463949", "body": "@bricelam even when I put the setting of the console color in the try, the finally isn't getting run when the program exits\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60463949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60691421", "body": "Working on fixes to scoping, and will reopen a pull request in the Diagnostics repo when finished.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60691421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61028156", "body": "@lodejard \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61028156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61334226", "body": "looks good! :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61334226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61714441", "body": "oh man I failed at ctrl-F. Will update\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61714441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62031538", "body": "@Eilon just want to double check that this is OK to :shipit:, or if I should figure out the namespaces before. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62031538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62175072", "body": "#61\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62175072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62333124", "body": "true. will close if @loudej agrees\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62333124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62617047", "body": "Still trying to figure out how to handle the situation when the process is killed\n\n```\nProcess.GetCurrentProcess().EnableEnableRaisingEvents = true;\nProcess.GetCurrentProcess() += (sender, e) => OnProcessExit()\n```\n\ndoes not work.\n\nCtrl C and Environment.Exit are handled\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62617047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62619559", "body": "@Eilon probably. But some progress was made, which I think is better than nothing\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62619559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62944238", "body": "@Tratcher \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62944238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63352357", "body": "@Tratcher \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63352357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63860549", "body": "@davidfowl added extensions for logging event ids and made the structured data extensions more flexible by having it be an `ILoggerStructure` instead of `LoggerStructureBase`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63860549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64058487", "body": "updated :tada: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64058487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64061232", "body": "@davidfowl @loudej @Tratcher \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64061232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64237054", "body": "@Tratcher this is what it looks like with 3 spaces\n![consolestructuredoutput2](https://cloud.githubusercontent.com/assets/2818455/5170145/3a7e8b22-73c2-11e4-8807-c7214ba088ea.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64237054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64248709", "body": "@Tratcher @Eilon with bullets and indentation of 2 spaces\n![consolestructuredoutput3](https://cloud.githubusercontent.com/assets/2818455/5171367/aa88810c-73cc-11e4-8a15-6a81927c52b5.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64248709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64275365", "body": "@Tratcher \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64275365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64276985", "body": "I can see common structures getting logged from different places. I wouldn't want to rule out that option. The idea here is to be able to log a message explaining the output of the structured data. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64276985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64689687", "body": "I agree with this change. having an indexer will make things a lot easier for the consumer\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64689687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65111006", "body": "@Tratcher rebased\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65111006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65116785", "body": "@Tratcher updated\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65116785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65121953", "body": "@Tratcher made it recursive - it's not too terrible looking :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65121953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65479229", "body": "@rynowak \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65479229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65682815", "body": "@yishaigalatzer \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65682815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65726460", "body": "I should have written unit tests before I pushed this code :grimacing:  \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65726460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65732425", "body": ":sob: Closing for now\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65732425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66538439", "body": "@rynowak says :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66538439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66805649", "body": "@rynowak \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66805649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8434062", "body": "@pranavkm suggested I make it sealed, though I'm not sure what class would try to inherit from this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434477", "body": "what's the difference between `private sealed` and `sealed private`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434551", "body": "ok, so I'm still unsure about whether the `sealed` should be included. I'm leaning towards no...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18350883", "body": "@pranavkm Eilon and I chatted offline and decided to keep the array for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18350883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18360534", "body": "confirming that `Enum.GetValues()` returns duplicates\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18360534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18406614", "body": "I pushed to dev like 10 minutes before this comment - will create a separate pull request to address this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18406614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18531193", "body": "Ah yes, I managed to interpret it as an &= instead of an |=. It will be good to have a test for this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18531193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18546807", "body": "It depends on the formatting defined in NLog.config. In the sample it's \n\n[level:logger] state\nexception\n\nso if there's no state it would be \n\n[level:logger]\nexception\n\nI think it makes sense to have a new line before the exception even if there is no state, and I believe [this code](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging/LoggerExtensions.cs#L16) also has a new line even if there's no state. Does the `CultureInfo` make sure the `\\r\\n` is rendered correctly on all OSes?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18546807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18547864", "body": "I think that would be most consistent with the extension methods. I will update the extension class to not hard code `\\r\\n`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18547864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18550183", "body": "@victorhurdugaci Eilon and I discussed the new line here, do you still think the newline should be avoided if `state == null`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18550183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18378000", "body": "Since my namespace is `Microsoft.Framework.Logging.Console`, I need `System` to distinguish the two.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18378000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18730672", "body": "I'm not sure how to fix this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18730672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18867206", "body": "just to clarify, I should remove just the DebuggerFlavor stuff?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18867206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973397", "body": ":sob: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18995197", "body": "Both @rustd and I were thinking about it as a **severity level** in stead of a **verbosity level**. Maybe we should rename `TraceType` to `VerbosityLevel` to reduce the confusion?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18995197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18995838", "body": "Another thing is that MsBuild's LoggerVerbosity values describe verbosity rather than severity, whereas the TraceType enum describes severity. Not sure what to think about log4j because the name is just `Level` which isn't descriptive at all. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18995838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18924555", "body": "thanks for the catch!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18924555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19637605", "body": "Maybe we should name it LoggerStructureBase? I think it provides a useful implementation\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19637605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19638292", "body": "I think this is a nice way to log structured data because the user can determine exactly what the structured data will look like in their implementation of LogData. I'll merge this with LoggerExtensions in Microsoft.Framework.Logging\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19638292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19644296", "body": "The build is fine without Microsoft.AspNet.Diagnostics, but it breaks without Microsoft.AspNet.Diagnostics.Entity\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19644296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19842481", "body": "It's not necessary, but I think it's a nice reminder for classes extending `LoggerStructureBase` to implement a `ToString` that has meaning. @pranavkm Thoughts on making this abstract?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19842481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19845632", "body": "good point!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19845632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19895270", "body": "it is completely exposed. you can go to logstash1.cloudapp.net right now and see all the logs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19895270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19913209", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19913209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19966685", "body": "[Most of the other repos](https://github.com/search?p=1&q=notnullattribute+user%3Aaspnet&ref=searchresults&type=Code&utf8=%E2%9C%93) use their own namespace, is this something that needs to be changed?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19966685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19985332", "body": "ran into this while writing unit tests :sweat_smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19985332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19985355", "body": "changed it so that nothing gets logged if the message is null or empty, same behavior as the console logger and nlog logger\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19985355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20034746", "body": "@davidfowl \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20034746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20157827", "body": "the portable build is left out here, because `GetTypeInfo()` isn't available\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20157827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20158126", "body": "I thought the point was to override object's `ToString`. I don't see why having a better string representation (or rather, losing the default `ToString`) would be a problem\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20158126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19309824", "body": "I wasn't able to find anything useful on the internet. My thought here was to give this thread enough time to finish writing/setting the colors back to their original state before terminating. The reason I have the 1 second timeout is so it wouldn't get stuck in an infinite loop in case something really went wrong. I had initially just reset the colors in `OnProcessExit` but as the colors were reset the logger was still writing, so some of the log output was the wrong color (though the prompt was back to the initial color)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19309824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20752666", "body": "I didn't know about this method, I like it :+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20752666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20808330", "body": "wow I didn't realize the default tab was like 8 spaces. That's insane!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20808330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20812584", "body": "It could, if the ILoggerStructures were mutually recursive. but that would be really bad and no one should do it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20812584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20813759", "body": "option 2 is probably better\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20813759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20813765", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20813765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20813810", "body": ":v: :question: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20813810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21116409", "body": "If the structure returns no values, it means that it hasn't been initialized, or there is nothing in the collection of structures. For example, in MVC, in my action model I have a list of action constraints, each of which are ILoggerStructures. However, if the action model doesn't have any action constraints, that list will be empty. I still think it's important to have a message, because the property name is shown. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21116409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21490373", "body": "[NotNull]\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21490373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21490427", "body": "if ((val = kvp.Value as IEnumerable<ILoggerStructure>) != null)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21490427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21490699", "body": "call this method, one instance of StringBuilder\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21490699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21490946", "body": "constant\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21490946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "aspnetci": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/97274a21360e3e045ef147c2ce023c8a9a88770c", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/8f205be462b2e7b8353a2375b477a43e92d23a9c", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d62cbc29c134227a2d93264f4269d7f2d95954ee", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ceb907addc52a079117ca03edd1f1f5b5247f249", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/0b3c3f4b7579c5144ec356b6af4e89161e07f642", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/735ed14078cbf9e0987cac33472f1fa6d64df2d5", "message": "Update dependencies.props\n\n[auto-updated: dependencies]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/7e08df080e1fe26e75a43c49d64b974ff0bf2e03", "message": "Specify runtime versions to install"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/71e619a5599af7bdf903061ac011ed2c6f62a744", "message": "Replace aspnetcore-ci-dev feed with aspnetcore-dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c02afe9ac3c66a942741d7bd96d5d09ba20acae8", "message": "Use MicrosoftNETCoreApp21PackageVersion to determine the runtime framework in netcoreapp2.1"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/db31d8533814a98e95fc5a23f7333fe0b042a28d", "message": "Target netcoreapp2.1 in tests and samples"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/7f4bcd95ba1d0c982ad42cc78426a23fd5065f39", "message": "Run Analyzer tests in a separate group"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ca89d7403ec0454d48a8638da1332cb09a6adf54", "message": "Updating to InternalAspNetCoreSdkVersion 2.1.1-*"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5b42008d0d7b60d65c9634a063979ab85d16e85d", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/dfb008281832300d9018d05ce34be886dad49507", "message": "Updating KoreBuild branch"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/bd674abee91c442deeff53201a8a32b2d842472a", "message": "Merge branch 'rel/2.0.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/12d75cb4355c6046bbeef2f1df96dd59b78dd35c", "message": "Branching for 2.0.0 rtm"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5583b83166751667d13823e58aaa82bba9a9f74c", "message": "Update version suffix for 2.0.0 RTM release"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1ff00d921703621061858d1833535af12dd98fcc", "message": "Update LICENSE.txt text"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/3a8996020ccfe85478ad585677f547b73494f69d", "message": "Update dependencies.props\n\n* Update Moq to 4.7.49.\n* Add NETStandardImplicitPackageVersion"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/0850fe58a14b158548dfe92641eb4985a4a05d7c", "message": "Updating versions to preview3"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c9539c02bfce486f8a1cfbcfe1a98039d7031940", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2a08aac3499b33856aa41e776acb3c54d615dee5", "message": "Updating build scripts to point to 2.0.0-preview2 KoreBuild"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/041e81ff8b6ea85088d43b376f0d3a214d365c19", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview2' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/e49ab68a0f4d828887a93637847f95c0fa183a44", "message": "Branching for rel/2.0.0-preview2"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2aad477dd9ad5af2736290a17bd912d50f84cd29", "message": "Merge remote-tracking branch 'origin/rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/0e4e110b2c7931fb919fa7b642b91bf2dcc6639a", "message": "Use the bundled NETStandard.Library package in netstandard targeting libraries"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d0931beecf25c2fb1447782e416694279b8a430b", "message": "Updating package version to preview2"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2ad37622c8fbb569d24dc7a682caa9ef571706cd", "message": "Merge branch 'rel/2.0.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/424313bfb46995872009faad9e2251caa21c539c", "message": "Branching for 2.0.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/0a006021b758b213def819801672d5fd1ea68dad", "message": "Use Bundled NETStandard.Library \\ NETCoreApp versions instead of explicitly specifying one"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/3004e1f4c5824fda7694e03ce92a32da80965ced", "message": "Updating versions to 2.0.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/e4c731e26a737bf28a7fbe61a2965cc517935d6a", "message": "Updating to 2.0.0 Internal.AspNetCore.Sdk"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c1a6e9a45c94be0a13ef3d994ea7124d7ba1f0c7", "message": "Remove net451 as a cross-compile target"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/89e1d79a462faa3082f5d42c88035a97810b505f", "message": "Updating to 4.4 CoreFx packages"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1759eb02a6c5718dafb7d183e72b0e9e776fae87", "message": "Updating versions to 1.2.0-*"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/f601247beed20746609c211c2c54cd27e144aaf6", "message": "Merge branch 'rel/1.1.0' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/7922a1add1c00d5cbbf6cda9da09750448ffe05e", "message": "Branching for 1.1.0"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6ac0ab60872f9220c2b4e2d2286464625d8164f5", "message": "Merge remote-tracking branch 'origin/rel/1.1.0-preview1' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/f1899c88ea3fc12d2669a60722edf6ad42cd8b48", "message": "Branching for 1.1.0-preview1"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c1860620cbe99966e512192064f2b6e79e9f6bb9", "message": "Updating to netcoreapp1.1"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/cc3daefef08094aecb19169149ff92f611e17566", "message": "Revert \"Updating to netcoreapp1.1\"\n\nThis reverts commit c6a549a69d05b2fdb21ae3fc4c164d71d72163b2."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c6a549a69d05b2fdb21ae3fc4c164d71d72163b2", "message": "Updating to netcoreapp1.1"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/93175c4296a2f651075894c2cbbb416dd443f8b8", "message": "Updating partner package versions"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/f4fa0e580fa4fb10df4397daebc5807a0269eb74", "message": "Cleanup package lisiting on README.md"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/55639a6be80b357f574ad3fc7c74851f46db32a4", "message": "Switching to dotnet.myget.org feed"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/16ce4b1998f02df6f66aaec6fa45f9edc52c8471", "message": "Updating to Moq \\ Castle.Core that does not require imports"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d5d1280dd298dadba4be38b59c029cf6aa782989", "message": "Update xunit version in Microsoft.Extensions.Logging.Testing"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/4e1781c0ac1f6dfef6d9e9378c992538abcb37b8", "message": "Updating to RTM builds of dotnet-test-xunit and Moq"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/4d459c76fe0b189fa705e76553b06fea1960a80c", "message": "Fix NuGetPackageVerifier errors"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ef2accd40adfa20cfa93711514ff324a58b68597", "message": "Adding Microsoft.Extensions.Logging.EventSource to NuGetPackageVerifier"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/4f6818bf68ae89fba27629ecacfc53ebcd1611d0", "message": "Updating to dev versions"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/175623b15e860a4e8020c7a9192cd955f7559499", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ff325b68ec5a9648449eb92cba0548a5943a2394", "message": "Updating to release."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/63424a01743c35c4081ed06744929ec72797f404", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/a953e30378c013bb637b655b0d8b555f40aff7df", "message": "Fix build warnings"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b4949697e8d32a11dd2994b22221b033e42295d3", "message": "Use latest build of dotnet-test-xunit"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ca6172ef0e6c73abc9179e2ff61167cf30b3c7db", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5e4c58fe72831387903adc251496063ba637078d", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/dfc8d1dc20db952752ca353a7a692ce9ae3fbde4", "message": "Removing imports from src projects"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/4baa7c72f7bd14d5b24b1785edb24aad7f5c4285", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/e3a51cf3b2ff412f2bbb83191ebabef8876c3de7", "message": "Updating to release."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1f2c41356a56fcecb2eb819867c0e27a79bd57a2", "message": "Revert \"Revert \"Reacting to CoreCLR package changes\"\"\n\nThis reverts commit a63a9d05c1938e50f376e316f47c2a44f6c9851f."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b4b112981afece16e3008df0efc6e6de24ea9184", "message": "Reacting to CoreCLR package changes"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/0a049e763a85e93397c767ecf91a4bba5c771a08", "message": "Target minimal TFM"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/01d77955b7245cf5e7987b371a954d83e4fbfb84", "message": "Removing test dependencies to fix NuGet warnings"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d005445e662940f4f379f0ac1ee4450948730d21", "message": "Reacting to DI changes"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d953d9bc47b1811c1d11691561320a7bb622edac", "message": "Remove NLog references from sample\nFollow up to https://github.com/aspnet/Logging/issues/341"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/43229c9a1a4e059cc863b351d555ff58740f2b5b", "message": "Reacting to CoreCLR package version changes"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/e5bf27a4d32fea1697077dd6d79d654375e01284", "message": "Reacting to CoreCLR version changes"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b29186d03939fd7f46d59a9ee75fe092fba68c6f", "message": "Merge branch 'release' into dev"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/984ac41324c408b12b6df85d69e9c8755cabd993", "message": "Updating to release NuGet.config."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58279822", "body": ":shipit: when @Eilon is happy\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58279822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60964599", "body": "@tugberkugurlu I confirmed this isn't an issue, the package is being restored transitively via the dependency on `System.Linq'. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60964599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61713842", "body": ":watch: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61713842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61714521", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61714521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61740848", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61740848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8434201", "body": "Sure. I know it is / was one of @Eilon's pet peeves.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434209", "body": "Ok, didn't see the diff. The idea would be to make this `private sealed`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434257", "body": "Maybe add a bit of summary as to what the intent of this method is\n\n> `Returns a string that represents the <see cref=\"ILoggerStructure\" /> that is used for ...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434509", "body": "Sorry, I'm an idiot. I thought you had removed the `private` qualifier. What you have works :100: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/10779852", "body": "Yeah - plus it looks it's for parsing media type headers - why do we care about that?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/10779852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/10929327", "body": "Any chance we could not abbreviate this - `BeginScopeImplementation` \\ `BeginLoggerScope`  etc?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/10929327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/15600261", "body": "Aww. They bumped up the version in the newest build and Coherence complains if we use an older version.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/15600261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18310356", "body": "Could this be marked readonly?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18310356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18310735", "body": "Ok. Would it make sense to represent it as an `IEnumerable<ILoggerProvider>` in that case (or a list)? Seems dirty to have a array that's mutated by concat.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18310735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18350917", "body": "Sounds good\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18350917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541373", "body": "You might be able to replace this with `return _loggers.Any(logger => logger.IsEnabled(eventType));`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541470", "body": "Not part of your PR, but the regular `<` check in a for loop is easier to grok \n`for (var index = 0; index < _loggers.Length; index++)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541527", "body": "Use `Assert.False \\ Assert.True`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18556443", "body": "We've started using lowercase `string` for method calls on the String type.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18556443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18556518", "body": "`var message = string.Empty;` or `string message = null;` \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18556518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18556689", "body": "For bonus points, you could add `//Arrange`, `//Act` and `//Assert` to your tests (See https://github.com/aspnet/Logging/blob/dev/test/Microsoft.Framework.Logging.Test/LoggerFactoryExtensionsTest.cs#L17). It gives the test some structure making it easier to read.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18556689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18377464", "body": "Formatting\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18377464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18377499", "body": "You shouldn't need to specify `System` since you're already specifying the namespace. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18377499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18377525", "body": "You should be able to use the overload of `WriteLine` that takes a format string `WriteLine(\"[{0}:{1}] {2}\", severity, _name, message);`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18377525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18377566", "body": "Might want to put the restoring the Console Color in a `try {} finally {}` in case `formatter` throws\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18377566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18732695", "body": "Should we write `Critical` \\ `Error` traces to `Console.Error`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18732695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18732816", "body": "`public void WriteLine(string format, params object[] args)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18732816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18995979", "body": "Could you fill up the values for these params or remove them if you don't intend on doing so?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18995979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19835150", "body": "Could you change the variable name to 'logLevel` in all the interface methods?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19835150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19835211", "body": "`LogLevel logLevel`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19835211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19835354", "body": "`logLevel`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19835354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19847799", "body": "Format doc\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19847799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836056", "body": "Does this need a license header? Same comment applies to all other types in Microsoft.Framework.Logging.SeriLog\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836152", "body": "AFAIK, named arguments won't work in format strings. This needs to be\n\n> \"The string argument '{0}' cannot be empty\"\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836224", "body": "`provider` probably needs to be marked with `[NotNull]`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836360", "body": "You could make private class `sealed`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836630", "body": "We probably don't need to do this. You could simply dispose this in the Dispose method and remove this + the finalizer\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836720", "body": "Use `[NotNull]` instead\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836775", "body": "Shouldn't need this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19836775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19843925", "body": "In that case, shouldn't this be part of the interface contract? I imagine you could create instances of `ILoggerStructure` that does not derive from `LoggerStructureBase` and expect it to work.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19843925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19847337", "body": "This seems to be unused.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19847337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19847418", "body": "Shouldn't need this dependency. It'll be brought in via Logging or Diagnostics\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19847418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19847566", "body": "You shouldn't need this if it's specified in the interface.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19847566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jkotalik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/af314d54058389c8685dbaeb360c9aa9caea0af5", "message": "Increase Minimum Version of Visual Studio to 15.3.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mhenry07": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/6fb7bc284368383bc1fe9a9185b3ba73b6051fd3", "message": "Fix #656 - issue parsing format string w/ group separator (#657)\n\n* Fix issue parsing format string w/ group separator\r\n\r\nFixes #656\r\n\r\nFix issue parsing log message format strings with placeholders containing a format string with a comma \",\", such as \"{setupTime:#,#}\" which uses a custom numeric format string with a group separator. This fix uses the index of the first first comma \",\" or colon \":\" found as the delimiter instead of ignoring the colon \":\" if a comma \",\" was found.\r\n\r\n* Add test for #656 - numeric group separator bug\r\n\r\nAdd test for custom numeric format string with group separator that fails if #656 is not fixed\r\n\r\nAddresses #656\r\nPull request #657\r\n\r\n* Merge custom numeric format test case\r\n\r\nMerge LogValues_With_CustomNumericFormat test case with LogValues_With_Basic_Types\r\n\r\n* Add additional group separator test case\r\n\r\nAs requested by @pakrym"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Eilon": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/db22c1767d2a86eace881335e590f7b5d976f744", "message": "Merge pull request #680 from mattwcole/graylog-readme\n\nAdd Graylog provider to readme"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/7f58c8bbc9784df122a262ef4249dd1e60709069", "message": "Fix package metadata"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2e3cc12b21c34ebbd9858661b61a5a51a3deb0d7", "message": "Merge pull request #362 from 304NotModified/304NotModified-rename-repos\n\nUpdate link for rename NLog.Framework.logging => NLog.Extensions.Logging"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/1595dfcf6827f01e45398bbaee18ba87a370c411", "message": "Merge pull request #358 from 304NotModified/patch-2\n\nAdded NLog provider"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2c465f4f9dc257d3470240b5af6176f88c462928", "message": "Merge pull request #323 from imobile3/dev\n\nAdd Loggr extensions library reference"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/55142725", "body": "The NLog provider here is just a sample, not production code. We don't intend to ship this ever.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/55142725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57266754", "body": "Specifically, in this interface: https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.Interfaces/ILogger.cs\n\n`WriteCore` needs to be focused on just _writing_ log messages. It should not need to return a `bool` to indicate success or enabled status. We should add a new `IsEnabled` method (not sure if it needs the severity param...) to check specifically whether the log is enabled.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57266754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57266783", "body": "@SonjaKhan \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57266783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269066", "body": "@SonjaKhan \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269069", "body": "@SonjaKhan \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269072", "body": "@SonjaKhan \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57269072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57543540", "body": ":shipit: !\n\nPlease make sure you rebase/merge correctly instead of using the Big Green Button.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57543540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57699513", "body": "Hmm the mixup of commits is indeed odd. Might have forgotten a rebase in between so the branch is seeing more diffs than expected. Should figure this out before doing further commits.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57699513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57827494", "body": ":shipit: !\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57827494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57827508", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57827508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58196264", "body": "Ultimately each project (MVC, EF, KRuntime, Razor, Identity, etc.) will have to make some decisions around what to log, what level to log at, and so forth. The same is true for any 3rd party package as well, if they choose to use this logging infrastructure.\n\nTo find out where logging is being used, the only way I can think of is to search for calls to `ILogger.Write`, either manually, or using a tool like Reflector or ILSpy. I don't think it is practical to track this information anywhere because it will change all the time.\n\nIf you feel a particular project ought to change its logging behavior (log more, log less, log differently), I recommend logging (haha!) a bug in the particular project's repo so that it can be addressed in the most direct manner.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58196264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58280084", "body": "I'm _always_ happy. So I guess :shipit: :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58280084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58282375", "body": "(Need to fix both EF and MVC.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58282375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58385695", "body": "I don't see any harm in having them in the logging package. I suppose they're for slightly more obscure scenarios but I can easily see wanting to have them at runtime as well in order to perhaps \"mask\" logging from certain components.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58385695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58394419", "body": "Ah good point. So let's move them here anyway because it's convenient and small.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58394419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58612726", "body": "Need to figure out how to write some unit tests for this. You could create an abstraction of the `System.Console` APIs and use a mock console in the tests to ensure that the write data and colors are being sent to the console. Can chat tomorrow or next week about this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58612726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58612851", "body": "@davidfowl need to abstract the console color stuff too. In part that's important so that something like xUnit doesn't spew all kinds of random colors into the real console when the tests run :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58612851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59160381", "body": "Overall looks great! Just had a few small comments, so once those are addressed, :shipit: !\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59160381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59560984", "body": "Yeah :shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59560984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59791418", "body": ":shipit: please check in ASAP :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59791418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60274171", "body": "@Tratcher can you fix this version as well? (For Beta.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60274171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60274323", "body": "(Should be the same as the fix for the Redis Cache package.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60274323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60274356", "body": "https://github.com/aspnet/Caching/pull/25\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60274356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60274717", "body": "Oh, and ping me when the new package is pushed so I can fix up the MyGet feeds.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60274717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60276222", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60276222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60279021", "body": "Purged all the stale packages on the feeds.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60279021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60311921", "body": "What if it was `LogLevel` instead? \"Logging\" is ultimately what we're calling this feature, as opposed to \"Tracing\" or \"CrashReporting\" or whatnot. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60311921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61330358", "body": "Looks pretty legit to me. @SonjaKhan @lodejard for further thoughts and sign-off.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61330358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61345661", "body": "@lodejard can you take a final look and merge the PR into dev?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61345661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61856258", "body": "Overall looks :shipit: though at some point we'll need to figure out which types goes in which namespaces. Having everything in one namespace can get a bit cluttered.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61856258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61856444", "body": ":shipit: looks good to me too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61856444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62038606", "body": ":shipit: for now, maybe log a bug for namespace cleanup.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62038606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62238215", "body": "Noooooooooo! It's the level of the _log entry_, not the _logger_.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62238215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62480644", "body": "The change looks good to me. @davidfowl merge?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62480644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62619018", "body": "I'm just not sure that this is fixable. It presumably boils down to an arms race and no matter what hole you try to plug, there will always be another hole.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62619018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62785745", "body": "Sometimes with an arms race it's better to not race at all... the meta-problem here is using a global solution for a local problem, and thus potentially affecting scenarios beyond the scope we want.\n\n@lodejard @davidfowl ?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62785745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64241565", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64241565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64461493", "body": "This does seem reasonable to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64461493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64482155", "body": ":shipit: after @NTaylorMullen 's comments.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64482155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64683298", "body": ":moneybag: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64683298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64683799", "body": "Or, more seriously...\n\nI'd like to get @SonjaKhan's and @lodejard's thoughts on this too before we commit to changing this.\n\nUltimately if we go with this and you want to update the PR to update the codebase (e.g. make sure the implementations of `ILoggerStructure` are fixed), then please send a CLA. See info here: https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64683799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64685146", "body": "I'm still certainly in favor of the change. Ultimately, this change is in effect doing two things:\n1. Adding an explicit `TryGetValue` / `this[]` indexer (this is good)\n2. Removing ugly generics from the logging interface definition (this is good)\n\nThis is the definition of the interface:\n\n``` c#\npublic interface IReadOnlyDictionary<TKey, TValue> :\n        IReadOnlyCollection<KeyValuePair<TKey, TValue>>,\n        IEnumerable<KeyValuePair<TKey, TValue>>,\n        IEnumerable\n```\n\nSo it's a strict superset of the previous functionality anyway.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64685146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64710653", "body": "Good point. We've used this type of reasoning before. The \"convenience\" is often less efficient and so we often avoid it. E.g. in MVC <5 I think we generally created dictionaries manually instead of using anonymous types.\n\nHaving said that, we should measure this before committing to a change. We do have _highly_ performant code that code-gens accessors to such things and thus avoids reflection after the initial calls to generate the code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64710653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65518207", "body": ":shipit: .\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65518207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65708583", "body": ":shipit:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65708583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65708680", "body": "Unit test? Clearly there's isn't one that tests this :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65708680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65966223", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65966223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67360475", "body": "I have a feeling that people will want to use this. Out of curiosity, do you know if here's access to the Windows Event Log from CoreCLR? In Mono on non-Windows of course there's no such thing, though there are presumably similar/equivalent system-wide logging systems on those platforms as well.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67360475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67438336", "body": "Cool. I'm personally a fan of this.\n\n@lodejard any opinions on adding an OS-native logger?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67438336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67447539", "body": "@JesperTreetop if you want to work on a PR for this, please feel free to! Please go ahead and sign a contributor license agreement (see https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md) - it takes just a few minutes to complete.\n\nThen perhaps send an initial PR for us to discuss the design/approach?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67447539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67528016", "body": "It's all yours... it's something we'd love to have, but don't have any engineers assigned to this feature, so first-come, first-serve :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67528016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67864619", "body": "@JesperTreetop I think there's a bug right now where the error page middleware doesn't log anything to the loggers in case of an error. There should be no extra middleware for this because this isn't an HTTP component, just a logger.\n\nI think that in general the EventLog logger should be around 95% the same as the other loggers (Console, Diagnostics, etc.), but just needs to change where the actual logs go to.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67864619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67864887", "body": "Oh and for the other points:\n- Just `aspnet50` for now is fine. Think of that as a \"platform\" that happens to build on .NET 4.x. That's how the whole system works. Newer versions of the full .NET Framework will work just fine (they're backwards compatible).\n- Unit tests should be possible with appropriate abstractions. For example, we even abstract `DateTime.Now` with interfaces such as `ISystemClock`. You could do something similar here with something like an `IEventLog` interface. But for now I think getting the design right is most important, and tests can be added once we hash out the more important details.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67864887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68151062", "body": "Indeed, it's never the logger's problem to make any guarantees about whether other components are logging enough. There are certainly some issues in various middleware components where they are not logging enough, but those are just bugs (and if you spot any, please log bugs!).\n\nAnd yes, it is the intention of the logging system to log whatever there is to be logged. Many advanced loggers will have filter functionality to log only log items about a certain log level, or with a certain log category, etc. For example, maybe a developer is interested in logging only Entity Framework log items (maybe they're having a problem with their database), so they could have a logger that is set up to log only EF errors.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68151062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69826454", "body": "I think I pointed @NTaylorMullen a while ago to some ancient code I write that prints beautified generic type names. Taylor, do you have that around somewhere?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69826454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69828499", "body": "Looks reasonable to me, :shipit: I wonder why it wasn't done that way to begin with...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69828499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69828721", "body": "Looks like it started that way, perhaps Sonja wasn't aware of the `object` way of doing it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69828721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70902244", "body": "CLA approved. @Tratcher to merge.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70902244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71066118", "body": "Hi, nice finds! Can you please fill out a Contributor License Agreement as described in the contributions guidelines? Thanks! https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71066118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71498847", "body": "CLA confirmed.\n\n@Tratcher can you review and merge?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71498847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71930651", "body": "Be aware that allocating a delegate isn't free either.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71930651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72089234", "body": "Curious - I think in general loggers would at best be disposed when the app shuts down, right? So at that point, what would calling `Dispose()` really help? The app is exiting, so the OS will clean up anything that needs to be cleaned up.\n\nAnd of course during an unexpected shutdown (i.e. a crash) the `Dispose()` wouldn't get called anyway.\n\nAny thoughts on this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72089234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72324722", "body": "Ah, I see, this makes more sense now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72324722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72343154", "body": "I suspect that for someone more perf-conscious they would already be checking `IsEnabled` before calling the logger at all because even with the pattern you propose there are likely a lot of other allocations going on, such as preparing data parameters to pass into logging.\n\nAnd with the proposed pattern, there would now be _two_ calls to `IsEnabled`, thus reducing performance for the people who care about it most.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72343154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72405455", "body": "Ah, interesting, I hadn't noticed that there are already two calls. However I'm not sure that making the 2 into 3 makes things better.\n\nIn all reality, is the one extra allocation of an array worse than an extra method call to delegates? I'd have to say that without seeing real numbers on this I have to hesitate on such a change. This is the type of perf work where using intuition instead of numbers can lead to some potentially bad changes.\n\nSo, I think this is an interesting area to investigate: it's certainly a goal for logging to add only minimal overhead to a running application, and if hotspots in the codebase are identified then those should be tackled and addressed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72405455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72766684", "body": ":+1: to what @avanderhoorn said. The original format string is not a real value, so we shouldn't put a fake value in the list.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72766684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72940577", "body": ":shipit: If others have more comments, please log bugs so we can track those ideas separately. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72940577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8434608", "body": "I _prefer_ the `sealed` because it indicates that nowhere else, even within the containing class, is the type derived from. For trivial nested types it doesn't help much with readability. But in a large class that contains many nested types, it can make it significantly easier to read. But if it's done, definitely `private sealed` instead of `sealed private`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8434608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/10932549", "body": "`Impl` is a fairly common abbreviation considering the full word is super long, so I don't have any particular problem with _that_. The main issue is that the name is so... ugly... :smile: but that's kind of on purpose so far.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/10932549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/11122009", "body": "This PR is from half a year ago, I don't think that `LogLevel` value existed! The current code at https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.NLog/NLogLoggerProvider.cs#L67-L71 looks right to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/11122009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18310621", "body": "No :smile: \n\nIt's updated later down in a thread-safe manner using `.Concat(...)` and replaced.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18310621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18310958", "body": "Oh yeah maybe that's cleaner. I guess it depends on what the contract is intended to be. Is the array usage needed anywhere, or is `IEnumerable<T>` sufficient?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18310958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18322170", "body": "Can mark as `static`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18322170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18322176", "body": "Can this be initialized directly in the field declaration?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18322176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18322189", "body": "That wouldn't necessarily check that there aren't duplicate values, e.g. Critical=4, Error=4.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18322189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18322203", "body": "Plus it would mean that if we change the set of values we'd have to update this test.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18322203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18358618", "body": "Don't need to use the class name to invoke a static method if it's in the same class.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18358618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18358856", "body": "O I C. I keep forgetting that `Enum.GetValues()` returns duplicate values ( @SonjaKhan can you confirm this again?), so this would indeed catch that. My bad.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18358856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18364937", "body": "It is dangerous to mutate a shared object. Because the order of tests is random, this could affect the behavior of other tests. Some options:\n1. Copy the data, and then sort the copy, and test that\n2. Instead of using a shared list, have each test produce its own list (perhaps with a static helper function)\n\nI personally prefer option 2.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18364937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18404997", "body": "Small nitpick: the \"expected\" value is the first parameter to an assertion, the \"actual\" value is the second parameter. This ensures that the assertion error message will read correctly if it fails.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18404997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18523268", "body": "Maybe we ought to have a fallback? Like maybe call `ToString` on `state` (if it's not null), and then get some data from the `exception`, such as its `Message` and/or `StackTrace`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18523268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18523458", "body": "I think this should return `false` only if _all_ underlying loggers were disabled, no? Looking at the old logic in `WriteCore`, I think that was the case, no? (Please correct me if I am wrong.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18523458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18523582", "body": "Based on my comment about when `IsEnabled` should be `true`/`false` we should add a test that has more than one logger registered and try all 4 `Boolean` combinations of enabled/disabled for each of two registered loggers.\n\nBTW to do this you can use the `[Theory]` feature of xUnit.net. Check out other tests in other repos to see how you can do this with `InlineData` or I can give you a hand.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18523582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18523597", "body": "Delete this comment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18523597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541154", "body": "1. Instead of `\\r\\n` use `Environment.NewLine` so that it'll work right on all OSes\n2. Should the newline be added only if there is a `state` _and_ `exception`? Otherwise if there's only an exception then there'll be an empty line above it always, no?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541185", "body": "Use `String.IsNullOrEmpty(...)`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541196", "body": "See comments above.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541203", "body": "Comment above.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541252", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541277", "body": "`var` :frowning:  :panda_face:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541298", "body": "Actually the tests need lots of `var` love.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18541298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18547560", "body": "`CultureInfo` doesn't affect newlines at all. It's more about the underlying OS (Windows, OS X, *nix, etc.).\n\nI think I see your point about the newlines. So you always want the exception on its own line no matter what? I can live with that.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18547560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18556321", "body": "I think `IsEnabled` is fine for this, though maybe not ideal. But better than `IsEnabledFor` :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18556321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18420388", "body": "Not just formatting, tabs!!! :scream_cat: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18420388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18420419", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18420419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18420438", "body": "Should use `.ToUpperInvariant()` to prevent the current locale from affecting this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18420438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18420858", "body": "Should this also have `net45` support?\n\nThe other projects support it as well:\n- https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging/project.json\n- https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.Interfaces/project.json\n\nThis would enable the console logger to work in non-ASP.NET 5 scenarios, such as EF7 on plain desktop .NET.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18420858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688547", "body": "Need a null check on `_filter`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688568", "body": "Probably don't need this empty list?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688612", "body": "Why not null check here? It's valid to have a null filter. Or do you mean coalesce it into an always-true filter?\n\nEh, why private? Might not someone else want to re-use this class?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18688612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18745695", "body": "You could try reverting the SLN file and then adding the existing project (kproj) back into the solution.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18745695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18745714", "body": "Can these be declared as auto-properties? Just `get; set;` in the body instead of declaring a private field and using it.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18745714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18745718", "body": "Fields should be `_name`, etc.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18745718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18745730", "body": "I don't see any of the tests verifying the contents of the message to ensure that it was correctly written out. Can you ensure there are appropriate tests for verifying the messages?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18745730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18875546", "body": "Recommend changing the messages here to say something like `Unexpected critical error / error / warning starting application.` etc. so that it's clear that the right output is being produced for each call.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18875546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18875560", "body": "Put empty line before this method.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18875560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18875566", "body": "Yeah, you guessed it - the empty `{ }` I think go on the same line (to match what the `net45` one has).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18875566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18988580", "body": "I think when I've seen this pattern the \"before\" variables are named `originalXyz` to better indicate their intention. (It's not just some _arbitrary_ foregroundColor, it's a specific one.)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18988580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973201", "body": "Awwwwww, I was such a huge fan of seeing `>= foo <=`! I literally thought that was the coolest thing. Now it just looks mismatched :cry: :panda_face: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973239", "body": "Add a period to the end of these sentences.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973260", "body": "Rearrange the code so that the lowest number is defined first.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18988390", "body": "@bricelam exactly and that's why it was so cool!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18988390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18988420", "body": "I guess we could change it from `traceType >= TraceType.Warning` to `TraceType.Warning <= traceType` but let's not :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18988420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18994658", "body": "Citation needed.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18994658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19028240", "body": "I think that ultimately the new order (higher == more serious) is fine. Let's go with this for now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19028240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19057387", "body": "Need to update the comment too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19057387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18972879", "body": "I think you can initialize the property inline. Something like this:\n\n``` c#\npublic static List<string> Log { get; set; } = new List<string>();\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18972879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18972946", "body": "I think we recommend sorting the dependencies alphabetically.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18972946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973102", "body": "Baby steps :yum: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19893439", "body": "Can mark fields as `readonly` to ensure that they are set only from the ctor.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19893439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19893987", "body": "Who's running this server? Is this exposed to the world now?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19893987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19894012", "body": "Yes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19894012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19894024", "body": "https://github.com/aspnet/Home/wiki/Engineering-guidelines#copyright-header-and-license-notice\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19894024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19894080", "body": "Is this used anywhere?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19894080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19894200", "body": "Have a look at this pending PR to see how this stuff is changing: https://github.com/aspnet/Logging/pull/53/files\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19894200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19896898", "body": "Yes, that's my point :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19896898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19896908", "body": "@lodejard on this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19896908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19910447", "body": "@lodejard we should move that endpoint somewhere else so it's not left open (or protect it somehow).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19910447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963268", "body": "@anpete do you have an opinion on whether they should be used here? Or we can remove from here?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963638", "body": "https://github.com/aspnet/Home/wiki/Engineering-guidelines#extension-method-patterns :smile:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19969152", "body": "@anpete I just meant because this repo doesn't use the R# annotations anywhere else.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19969152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19973455", "body": "@anpete sure, start a mail thread with engineering team to revive that discussion?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19973455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19309066", "body": "This looks too risky to me. Do the Interwebz have any thoughts on how to solve this? Settings colors in a loop for ~1 second seems too hacky to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19309066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20729172", "body": "This doc comment doesn't match the parameters.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20729172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20729287", "body": "Need a doc comment for the `exception` parameter?\n\nWhat about the `logger` parameter for all the methods? Does MSDN have a standard parameter description for the `this` parameter of extension methods?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20729287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20811608", "body": "Somewhat nitpicky, but 3 is such an odd number (literally!). 2 or 4 are more common indentation levels...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20811608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20811672", "body": "Should this:\n1. Stay as is\n2. Switch to builder.AppendLine();\nDo we always want to write a Windows newline or should it be platform-specific?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20811672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20811978", "body": "Instead of building up new sub-strings and doing lots of allocations, can this all just use the same `StringBuilder` instance and pass it around?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20811978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20812080", "body": "Can this end up doing infinite recursion? Do we need to guard against this? I'm thinking maybe not, because it would just be a developer griefing their own app, but worth asking...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20812080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20812118", "body": "2 is nice.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20812118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20886726", "body": "Chatted in person. This doesn't need to return the `StringBuilder` because it's always the same instance. Just pass it around as a parameter.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20886726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21184173", "body": "End with a period.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21184173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21392700", "body": "Use named param for the `true`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21392700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21392826", "body": "Any particular reason the data needs to be trimmed? Why not assert the entire value, including any whitespace?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21392826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21271592", "body": "Can `Logging` be used as a build-time only reference? That doesn't seem right to me... You need the real implementation in order to work. Build-only references are for assembly-neutral interfaces (and some other things).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21271592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21271653", "body": "Should add a class-level doc comment to this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21271653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21778942", "body": "I thought we used `6.0.6`, no?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21778942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21779716", "body": "Recommend not having this be serializable. Instead, the MVC functional tests should have a Serialization Model that copies the data it needs, applies the appropriate Json.NET attributes, and serializes/deserializes that.\n\n@rynowak for this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21779716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21779785", "body": "Nevermind, I think we should not add a Json.NET dependency here and instead have the functional tests do whatever they need.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21779785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23785573", "body": "Why not just always call `GetOrAdd` with a `Func`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23785573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23785612", "body": "This method: https://msdn.microsoft.com/en-us/library/ee378677(v=vs.110).aspx\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23785612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23785724", "body": "Looks like a `while` loop to me.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23785724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23785882", "body": "Fix coding style throughout.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23785882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23786500", "body": "Is this method needed?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23786500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795319", "body": "Why are these commented? Perhaps I'm confused about the scenario for this but I thought it was to enable structure log formatting to the built-in loggers, such as the Console logger?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795461", "body": "Curious - can you pass `format` in as the parameter to the lambda? Otherwise it looks like it's putting `format` in the closure, which I don't think is intentional (or needed) here. Not 100% sure about this though.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795565", "body": "Can make `static`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795626", "body": "Maybe add a doc comment to this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23890009", "body": "I think we need to consider how to escape curly braces. Currently I think it's broken if you try to put an arbitrary curly brace in the format. The typical way to escape curly braces is to double them, i.e. `{{` and `}}`. That's pretty much what `string.Format` does and also ASP.NET Routing.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23890009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24031860", "body": "Can you add tests for un-balanced cases? E.g. various bad strings such as `{foo` and `bar}`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24031860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24639644", "body": "Need to clean up lots of formatting (extra newline here; lots of other places are missing spaces).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24639644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24639684", "body": "Not really a fan of calling it \"secureXyz\" in various places. This is the only place that the security nomenclature seems to be used. Everywhere else it's a distinction between \"debug\" and not, and that seems orthogonal to the distinction between \"secure\" and not.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24639684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24925394", "body": "Code style: Generally, properties go after ctors and before methods. Should update the other files too.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24925394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24925919", "body": "This one will change too? BTW I think @davidfowl and you are confusing implicit/explicit. An _explicit_ interface implementation is when you include the interface name in the implementation (hence it's explicit). But we normally do _implicit_ interface implementations, where the interface name is omitted.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24925919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/25009163", "body": "Doc comment.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/25009163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/25020529", "body": "Sorry, nit-picker's corner here - can you end the sentence with a period? :crying_cat_face: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/25020529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/25281236", "body": "Sort dependencies\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/25281236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/25281243", "body": "Sort dependencies\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/25281243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "mattwcole": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/d92b6c200307722258aedb6650d6d311de897896", "message": "Add Graylog provider to readme"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JunTaoLuo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/59ac0dd7a413b77ceaa3968d5e60139cbe87c17e", "message": "Ensure fallback to curl after failed wget"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6fc1945e5d9b15cdbf092241842374ea19ae071f", "message": "Update __get_remote_file logic"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6be93eb698aeca77eb2b69f6bc0c468223fbe8cd", "message": "Updating samples"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2ff728a083e2384db689e895e24cf9decb5323c0", "message": "Updating test TFMs for custom test discovery"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/67da7b9bc063b68f48e1f0855147511eb0dea9f7", "message": "Add missing framework assembly"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smitpatel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/bd235d6068b006c9348403651e4af789964cc927", "message": "Update API Check related files\nReact to aspnet/BuildTools#238"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marcogrcr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/b5f8f914898d38e6f2740616516eea28cd1c514f", "message": "Fixed ArgumentNullException when IConsoleLoggerSettings.Reload() returns null."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dougbu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/2fa414a3e1cf3eedd603ed7844e782b6869952a3", "message": "Disable API Check for package that we do not push to NuGet"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ac02586ec810cbca53f949e802cc0909bf21f147", "message": "Bump test projects up to .NET 4.5.2\n- aspnet/Testing#248\n- xUnit no longer supports .NET 4.5.1\n- build tests for desktop .NET only on Windows"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/e40b367917489fd78a45873750ccd170f06a002a", "message": "Increase .travis.yml consistency between repos\n- aspnet/Universe#349\n- minimize `dotnet` setup time; no need for caching\n- build with `--quiet`"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/340b1d580d8b6f7fef356fa83539d3be71dc144f", "message": "One build to rule them all\n- well, at least VS and command-line builds will share output\n- part of aspnet/Coherence-Signed#277"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/a4ed69237615c02ccc5299c22c82eab68658a9e0", "message": "Remove project name from output path\n- aspnet/Coherence-Signed#187\n- remove `<RootNamespace>` settings but maintain other unique aspects e.g. `<DnxInvisibleContent ... />`\n- in a few cases, standardize on VS version `14.0` and not something more specific"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/809cf0966a9f09656d774bf94eb17ace95e3bea3", "message": "Update `build.cmd` to match latest template\n- aspnet/Universe#347\n- `%KOREBUILD_VERSION%` doesn't work without this fix"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajaybhargavb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/aed1477de2a7e55d40a5cdff8136ab26f8c08d3e", "message": "Removed redundant types from Logging.Testing"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/544330467c929fb26bbbbb84f62d7b5f245435b5", "message": "Added NullLoggerOfT to Logging.Abstractions"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/b4ecccd18d1ee3b1a5ab94b2d88b31c699124a5a", "message": "[Fixes #566] Added NullLoggerFactory to Logging.Abstractions"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/9ab5ce6a7988163b1de2cf295e5be43dc3f797f0", "message": "Removed packages list in NuGetPackageVerifier.json"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/81588127f69e365709ec5b0adbcecbe8293035bd", "message": "Added Company, Copyright and Product attributes to AssemblyInfo"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6352e15273fe0b660cc554a284317345db2393d0", "message": "Enabled xml doc generation"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NTaylorMullen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/8c354d6ae84e206f2be0107ddb4ae4fab1f9f4b8", "message": "Update .travis.yml osx image to xcode7.3."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/c7d0b1b88668ff4ef8a86ea7d2ebb5ca7f88d3e0", "message": "Pin global.json SDK to 1.0.0-preview2-1-003177."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ba6ff1a2e4c4e98787d2f38a4ecc279ccf9211ec", "message": "Remove direct Microsoft.NETCore.Platforms dependency.\n\n- Microsoft.NETCore.App now pulls this package in.\n\naspnet/Coherence-Signed#344"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/6afc37df6ce2bc79abdfd5a3cb4f8ab8945f82d0", "message": "Transition to netstandard.\n\n- dotnet5.X => netstandard1.y (where y = x-1).\n- DNXCore50 => netstandardapp1.5.\n- Applied the same changes to ifdefs."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/ec70262f0a57f7e2b3cafd1ad0de97112218ecec", "message": "Update System.Linq 4.0.2-* => 4.1.0-*."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/76e9818fd906219e4950d5b39ced9cc2eac505bf", "message": "Update project.json to remove redundant System.Runtime dependency.\n\n- This package is pulled in transitively."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/dbf1b6d5dae97dfb06234af1ed8562c341c67c22", "message": "Rename AspNet 5 file contents.\n\nSee https://github.com/aspnet/Announcements/issues/144 for more information."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64252482", "body": "Just glazed over it, don't wait on me for anything though :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64252482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69835131", "body": "Forwarded :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69835131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20814389", "body": "named parameters\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20814389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20814440", "body": "`CultureInfo.InvariantCulture`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20814440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20814684", "body": "this gets covered by the else, throw the conditional check into your `IEnumerable` line so it's clear (can remove comment then as well).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20814684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20814772", "body": "named parameter for `true`\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20814772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20815099", "body": "I could be alone here, but I prefer the fluent look when using builder that has multiple appends one after the other, tends to be cleaner. (same comment for other places in this PR too)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20815099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20890581", "body": "No need to provide a named parameter for the builder or state since their names state their purpose. General rule: If you can't decipher what a parameter to a method is, provide a named parameter. So things like `true`, `1234` etc. are just values with no information and don't inform the reader of anything. Same comment for other instances in this file.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20890581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20891065", "body": "Break appends by line here and elsewhere. Ex:\n\n``` C#\nbuilder.AppendLine(...)\n       .Append(...)\n       .Append(...);\n```\n\nThe fluent API is nice because you don't need to repeat the `builder.` and ultimately reduces the amount of code the reader needs to consume.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20891065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20828435", "body": "Is there a need for the setter on the interface?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20828435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "javiercn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/9b1fafd281739629f521a4035f5d8d1df77d1a45", "message": "Created public API baselines"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/0d34af4b45ce395d23176bdfbf998c4516541d30", "message": "Remove unncessary imports"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/d730fc9267cc566e69009bf48b1ee546f24f7673", "message": "Make ServiceCollectionExtensions consistent"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ThomasArdal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/1119be609563c2dab3d64c44a5231f646a8c6732", "message": "Back to the Elmah.Io.Extensions.Logging name (see https://github.com/aspnet/Logging/pull/461)"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/8126dae60a7f4deb79fc3880083c27c3cc0477a7", "message": "Elmah.Io.Extensions.Logging have been renamed to Elmah.Io.AspNetCore"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/681ad5b010c834b854d88dff6bb58b11e2da8b37", "message": "Switched URL to elmah.io extensions logger"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "karolz-ms": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/5a15cbf517dcfa85504b5474cd712eebf9ad5579", "message": "ILogger implementation that sends data to EventSource/EventListener"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidObando": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/00aed0a78d90d5827e8e5a36db49f7629a102511", "message": "Reducing the amount of time ConsoleLogger locks"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "moozzyk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/e6af0dcc887e8c2bcfef80c1d9c46e589275964e", "message": "Addendum to #405\n\nWe enabled passing null TraceListener but extension methods were not updated accordingly and would still not allow to pass a null TraceListner."}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5019dd22aa482e271b814ae713dcb9791d7ad205", "message": "Allow configuring the trace source logger without a TraceListener instance\n\nAddresses parking lot/I-#405"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lodejard": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/dc6627454a5d8a71d6fbc1619129d24fcf0e9f0e", "message": "Additional unit test calls"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/8387adbee91e86e35b6a3d2d0e75e5d59127879a", "message": "Changing BuildScopeImpl to BuildScope<TState>\n\nCloses #366"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/2e8ab98084e0979a9cf2113477c4a8bdafb78a34", "message": "Filtering logger provider example"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/5b628a944d5ff8f928866a8d85deac963febd679", "message": "Updating for dotnet cli"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61326467", "body": "The reason was really that ILoggerFactory singleton doesn't function properly when it's re-registered in two container levels. That would need to be fixed before this would be practical.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61326467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65963019", "body": "I'm not sure if I'm a 100% on this one yet... Random-access by name wasn't really expected to be the normal consuming case for loggers, which mostly copy the data down to the logging implementation. One advantage of IEnumerable is that it doesn't require allocating/populating a dictionary for those cases... It can be returned by an array, or by a \"yield return\" in the method...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65963019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65963303", "body": "I agree, in hot code-paths we'd probably end up implementing the ILoggerStructure directly. To be honest, in those cases I expect the method would return an array from `new KeyValuePair<string,object>[]` with string literals and objects are expressions like `_httpContext.Request.Path` rather than declaring all of the properties to be picked up by reflection.\n\nAlthough, there is also the 2nd mechanism being considered which is more serilog-like... We should probably drill into that a little further before we pin down ILoggerStructure decisions... \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65963303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65963564", "body": "Agreed - I'm not that comfortable with complex or mutable objects being returned as logger-structure values for a lot of the reasons you mentioned. Kind of defeats the purpose of having a string/object data structure when the object is just as type-system specific. At that point you may as well down-cast the logged object instead of having ILoggerStructure. Plus many loggers won't know how to de-structure those values other than to call ToString.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65963564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65970841", "body": "I actually was thinking from the consumer perspective, too. Most of the logging loggers will be enumerating the values but won't have a-priori knowledge of keys to lookup... Plus we know that creating dictionaries creates some cpu overhead and memory pressure...\n\nCalling ToDictionary wouldn't be too bad if you want to do random access on certain messages, no? Especially since its something I'm guessing you'd be doing on known sources and eventids, rather than on every message that goes by\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65970841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66223719", "body": "Completely agree that ILoggerStructure is how you want to get this information. The push-back is coming from knowing there is significant measurable difference between dictionary and array for high-frequency efficient operations.\n\nOn something like log-write execution path, creating dictionaries is a surprisingly expensive operation. For each log message, and for each property key, it's getting the hash code, potentially increasing the number of hashtable buckets, adding the entry to the slot. It's shockingly more expensive than an array of keyvaluepair. Because the kvp is a value-type (and not a reference-type) the array itself is the kvp memory, and the keys are constant strings, and the values are already existing, so the only overhead is that single memory allocation.\n\nIn other words, the places you can find which were returning new Dictionary{{...,...}} were done incorrectly, and would not have shipped that way. \n\nDo you have some code online which is an example of how you're using the ILoggerStructure? I'd like to see if I can come up with a usage pattern that fits what you're needing without coupling the values to IDictionary. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66223719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67438533", "body": "Nope, sounds great! There's also a start of an ETW logger we could add to the mix as well.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67438533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72330017", "body": "@avanderhoorn I like the idea of having the format string as a property, though not all messages which have structure will have a format string of course. How about if the code that parses and renders the message was public and exposed the info you described?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72330017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72783417", "body": "I think Yishai meant the key name would literally contain curly braces, which end-user format strings could not reproduce.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72783417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848957", "body": "I was wondering about that - which is why I copied the portable target definition in the project.json also...\n\nThe assumption there is that if you're not using vnext from EF, and you're not our host, in you'll end up with the PCL version of Microsoft.Framework.Logging.Interfaces that has the interfaces sitting there as plain old types...\n\nI'm hoping that will keep EF working until we sort out the \"now ANI works all over the place\" questions\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14848957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850054", "body": "I'll check with them before merging, but we should [AN] things sooner rather than later if we think it'll cause problems\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14850054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18532169", "body": "Or throw argument null exception? @Eilon's suggestion wouldn't be surprising either, but if the  form a tter is null you're calling the wrong overload...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18532169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19634630", "body": "We should uncomment this if it's part of the sample, or remove it if it's not\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19634630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19634819", "body": "Use NotNullAttribute instead?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19634819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19634889", "body": "This particular interface should move to Microsoft.Framework.Logging.Interfaces and have the same ANI treatment as the other types in there\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19634889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19634993", "body": "This class should probably move to Microsoft.Framework.Logging - and should get looked at much closer... What's a good type name, and is this a type we encourage folks to use\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19634993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19635085", "body": "Same question as with LogData - should move to Microsoft.Framework.Logging if we think it's a good way to log messages from structured poco types\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19635085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19635165", "body": "Ah! This code! This is a hack that should be removed, and the _propertyFactory field can be yanked as well\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19635165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19638752", "body": "Ah, good. Oops! These shouldn't be static - if you add two different Serilog ILoggerProvider instances then they should each have a totally independent CurrentScope value. (Otherwise the scope will appear to be pushed twice)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19638752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19638892", "body": "probably remove webroot and exclude for a class library project?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19638892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19639064", "body": "Hmm... The core serilog addon doesn't need to reference these two serilog add-ons - the end-user app will do that... I wonder also, what are the two Microsoft.AspNet.Diagnostics and Microsoft.AspNet.Diagnostics.Entity for?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19639064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19639369", "body": "Oh, looks like ConvertLevel was called twice... This local could probably be moved above the first if statement so its value could be used \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19639369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19639663", "body": "Yeah, these bits of code could probably stand to have some comments... That can be left for a different PR probably\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19639663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19909834", "body": "Yeah, the sample should probably use a serilog sink that writes to a file format of some type rather than the elasticsearch endpoint\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19909834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19911267", "body": "okay, password protected\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19911267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23890922", "body": "Good catch!\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23890922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bricelam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/f6eb9182c40a59712f4ab7de4aa9618bc93fe977", "message": "Don't reference design-time facades on net451\n\nWithout this, the packages won't install into \"classic\" Full .NET projects"}, {"url": "https://api.github.com/repos/aspnet/Logging/commits/57e869ff20079557b5792b5c861c54b6f9532c9b", "message": "Remove netcore50"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53291259", "body": "@davidfowl instead of or in addition to aspnetcore50?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53291259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53292311", "body": "@davidfowl I just did the minimal change for now (rename net45 to aspnet50). This is all we really need on EF to move forward. Will this break dependent repos that still target net45? If so, I'll just wait for your sweep.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53292311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53641911", "body": "Tested it, and this breaks dependents that still target net45. I'll wait for the sweep.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/53641911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57750866", "body": "FYI, there's a great component ([AnsiConsole](https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.CommandLineUtils/CommandLine/AnsiConsole.cs)) in the `Microsoft.Framework.CommandLineUtils` package that lets you use [ANSI escape sequences](http://en.wikipedia.org/wiki/ANSI_escape_code) to color output. Then again, it might be overkill for this... :neutral_face:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/57750866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60459600", "body": "Can't you just wrap all the color setting in a try..finally?\n\n``` C#\nvar lastColor = Console.ForegroundColor;\ntry\n{\n    Console.ForegroundColor = color;\n    Console.WriteLine(message);\n}\nfinally\n{\n    Console.ForegroundColor = lastColor;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60459600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/7412009", "body": "Until we differentiate between net45 on CLR vs KLR, this breaks Desktop/MSBuild projects. NuGet is going to resolve the net45 Logging assembly which contains AssemblyNeutral types which can't be found at runtime on the CLR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/7412009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/comments/7412023", "body": "It's also broken on KLR if I have a net45 project that references a portable project compiled against the portable version of Logging.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/7412023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18423126", "body": "Yes. If the format is right, I would gladly use this in aspnet/EntityFramework#646\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18423126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18987917", "body": "When I saw it in the last PR I was like, \"Whoa, what does the reverse lambda operator do?! ... ... Never mind, I'm an idiot.\" :blush:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18987917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20165285", "body": "`GetTypeInfo()` is available as an extension method in the `System.Reflection, Version=4.0.0.0` assembly. (on `System.Reflection.IntrospectionExtensions`)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20165285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "adamhathcock": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/3cecf9e011c2cc94354e3f39f946a71a6282e21c", "message": "Add extension to have CreateLogger with Type object as well as generic"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "withinfocus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/458c7feb90f5ecf44694c9d24cb57efe19fcf6fa", "message": "Add Loggr extensions library reference"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sunsided": {"issues": [], "commits": [{"url": "https://api.github.com/repos/aspnet/Logging/commits/d679c78ab257375d26343207877b3d483c093d29", "message": "LoggerFactoryExtension.CreateLogger<T> now returns an ILogger<T>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bojanrajkovic": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/739", "title": "Don't use Task.Factory.StartNew, it's dangerous", "body": "Using `Task.Factory.StartNew`, without specifying a task scheduler or\r\ndenying child attach or any of a half dozen non-obvious flags/parameters\r\ncan cause undesired behavior from the task. This hidden behavior causes\r\nany uses of the console logger in Xamarin Workbooks to hijack the main thread,\r\npreventing further execution, regardless of the workbook platform (.NET Core,\r\niOS, Desktop .NET all exhibit this issue at slightly different points).\r\n\r\nSee this article for some of the dangers of `Task.Factory.StartNew`,\r\nparticularly around not using `DenyChildAttach`, and why `LongRunning`\r\nis unnecessary: https://blog.stephencleary.com/2013/08/startnew-is-dangerous.html.\r\nThis PR replaces `Task.Factory.StartNew` with `Task.Run`, which is semantically more\r\ncorrect, functionally equivalent, and more importantly, does not cause any main\r\nthread hijacking.\r\n\r\nWould be nice if this could make it into 2.1.0. :)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndreasBieber": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/733", "title": "Fix config loading to be case insensitive", "body": "Hi,\r\n\r\nthis PR files an issue with loading filter configuration. The configuration section `LogLevel` and the category name as well were read case-sensitive while the Microsoft.Extensions.Configuration is case-insensitive, which leads to an unexpected behavior.\r\n\r\nsee:\r\nhttps://github.com/aspnet/Logging/blob/71e619a5599af7bdf903061ac011ed2c6f62a744/src/Microsoft.Extensions.Logging.Configuration/LoggerFilterConfigureOptions.cs#L33\r\n\r\nhttps://github.com/aspnet/Logging/blob/71e619a5599af7bdf903061ac011ed2c6f62a744/src/Microsoft.Extensions.Logging.Configuration/LoggerFilterConfigureOptions.cs#L58\r\n\r\nCheers,\r\n Andy", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drungrin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/729", "title": "Adding extensions to defer calculation of the log message", "body": "Logging can add quite a overhead if you need to put expensive information on the message, or if you ommit them may affect the purpose of the message.\r\n\r\nSpreading conditionals based on the level can bloat the code easily.\r\n\r\nUsing a lambda, the expensive operations don't affect the production code and solve the above issues.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CodeCharm": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/718", "title": "Corrected documentation spelling, typos, formatting. ", "body": "Very minor revisions for clarity. No code change.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anpete": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/608", "title": "Fix #607 - Implements equality members on EventId.", "body": "cc @ajcvickers ", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58385154", "body": "Should they be in the logging package or separate?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58385154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58388000", "body": "I think they are most typically used for testing scenarios...but, they are so small that it's likely fine to have them in the core.\n\nComponent-level filtering should \"normally\" happen via knobs on the \"real\" logging framework. Given DI, it would be tricky to control filtering via different factories.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58388000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62037253", "body": "@SonjaKhan Would be great to see a few tests for this\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62037253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/8505789", "body": "Um, yes. Please use JetBrains.Annotations. :+1: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/8505789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963147", "body": "These attributes need to be in the JetBrains.Annotations namespace.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963355", "body": "Drop the \"I\" from the type name for interface extensions.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963665", "body": "Consider a using alias.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963944", "body": "Possible null ref? - formatter\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963974", "body": "Do we care if message is null or empty?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19963974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19964158", "body": "This may need caching...\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19964158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19964285", "body": "Consider creating the list using LINQ/ToList()\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19964285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19967634", "body": "@Eilon They should be on any public surface. I was thinking about the namespace thing, the namespace that R# searches for annotations is configurable in R#'s options, so we _could_ use something like \"MS.Framework.Annotations\". Just means one extra step for R# users to light them up.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19967634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19969877", "body": "@Eilon Yes, they should be used here. And I didn't see anything about arg checking in the guidelines :grin: \n\nI think we should decide on the namespace if possible so that we just make one change to fix it everywhere.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19969877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20164786", "body": "I guess the point is that it's easy to not provide a sensible impl.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20164786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20164840", "body": "cc @bricelam \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20164840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "sgryphon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/529", "title": "Documentation comments (no code changes) for console logger", "body": "The doc comments are mostly added to the configuration extension methods and settings classes, and detail how to use them, in particular how category settings are inherited and the special 'Default' category.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sajayantony": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/36799115", "body": "There are some capabilities for ETW that you want to consider which make the trace usable in production. For e.g. correlation is one concept that you want to bake in early if you do care about it. Implementing correlation as a trace specific implementation might prove harder and so having the abstraction actually support them might be something worth considering early on. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/36799115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "bendbro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/47695912", "body": "@davidfowl @yishaigalatzer @rynowak \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/47695912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/47714171", "body": "@davidfowl @yishaigalatzer @rynowak \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/47714171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50808265", "body": "@rynowak @loudej \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50808265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50822954", "body": "81016a2f3301d2cd11de64690629ea6445618850\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/50822954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14429337", "body": "Should be WriteStop, not WriteEnd\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/14429337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/15670213", "body": "Forgot the header, and system was not used, thought i'd do a fix.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/15670213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Praburaj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/51414128", "body": "This also contains a reference to OWIN: \n\nhttps://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging/ILogger.cs#L15\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/51414128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68398250", "body": "Did you do a `kpm restore`? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68398250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68409619", "body": "I guess you are on `dev` branch and using `beta1` KRE. Could you try updating `KRE` to the latest `RC1` version and try? Or alternatively switch to `master` branch and try? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68409619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68459092", "body": "There are a few issues here. \n1. I think the `kvm` needs to be updated. Could you download the `kvm` scripts from https://github.com/aspnet/kvm/tree/dev/src and paste/overwrite to your %userprofile%.kre\\bin\\ folder. We will try to get the home repo's `kvm` scripts updated. \n2. Try setting KRE_FEED=https://www.myget.org/f/aspnetvnext/api/v2 and try `kvm upgrade` to fetch the latest `RC1 KRE`. This should fix the `404` error. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68459092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68460535", "body": "The file that I pointed to is the latest source code for `kvm`. We copy a snapshot periodically to the home repo. With a recent change KRE_NUGET_URL is changed to KRE_FEED. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68460535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68462992", "body": "Did you also pull `KRE` from the same feed? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68462992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68472819", "body": "I think the above packages (from logs) are still from dev branch myget feed :). I think you got 2 things right: \n1. You got KRE from master feed. I guess your `kvm list` should say `1.0.0-beta1` as the default selected. This is good. \n2. You got your `kvm` fixed as well. \n\nInstead of `kpm restore` try `kpm restore -s https://www.myget.org/f/aspnetmaster/api/v2 -s https://www.nuget.org/api/v2`. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68472819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68474123", "body": "One other thing you could do is delete %userprofile%.kpm\\packages folder before doing `kpm restore`. Just to be sure the `*`'s are resolving to the right packages. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68474123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68474573", "body": "and do switch to `master` branch in your local git. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68474573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68550324", "body": "This contains some information on these branches : https://github.com/aspnet/Home/wiki/Engineering-guidelines#branch-strategy\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68550324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68554841", "body": "The below error is possibly because your default nuget feed is disabled for some reason. Open VS -> Tools -> Options -> Nuget sources -> Enable your https://www.nuget.org/api/v2 feed and do a `kpm restore` again. \n\n```\nUnable to locate Newtonsoft.Json >= 6.0.6\nUnable to locate System.Collections.Immutable >= 1.1.32-beta\nUnable to locate System.Reflection.Metadata >= 1.0.17-beta\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68554841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68555970", "body": "Yes you could set that in the `Nuget.config`. Open `%appdata%\\NuGet\\NuGet.Config` and see if your default nuget feed is under `<disabledPakageSources>` node. move it in to `<packageSources>` node. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68555970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68576531", "body": "No. This `LogLevel` is defined in https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging.Interfaces/LogLevel.cs. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68576531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68601162", "body": "Yeah looks like `TraceType` got renamed to `LogLevel`. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68601162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69239818", "body": "`master` corresponds to `beta1`. `dev` corresponds to `rc1` (a future release). You can choose any of these, but just make sure that you have all binaries, kre etc are from the same corresponding branch. You cannot mix branches. \n\nWhere did you install `kvm` from? Is your kvm pointing to master feed or dev feed? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69239818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69652610", "body": "Fixed. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69652610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69829344", "body": "Probably I guess the same. In fact the XML docs for this param seems to be right, but just the `params` being taken in is `string[]`. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69829344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69829484", "body": "Fixed. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69829484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69835876", "body": "This is fixed. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69835876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72119951", "body": "Updated PR. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72119951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72274551", "body": "@avanderhoorn is the ask to just expose the original format string as a property on `LoggerStructureFormat`?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72274551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72571689", "body": "@Eilon @loudej @avanderhoorn - I have updated the PR addressing all the issues and adding more tests to cover the brace escape cases. \n\n@avanderhoorn I'm exposing the original format string as an item from the values returned from `GetValues()` with a special key named `__OriginalFormat`. I'm open to feedback on this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72571689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72759099", "body": "@loudej @avanderhoorn \n\n> Thanks for getting this data out! In terms of feedback, I must be honest, accessing it via that key seems a little unintuitive and more like a private api... Would be nice if there was some more supported way of doing this.\n\nHow about adding a property as well on the Formatter to give the original format string apart from this?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72759099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72768032", "body": "@loudej suggested to do this as if someone has a reference of `ILoggerStructure` one can directly get the original format by calling `GetValues()`. If its just a property one has to typecast the reference to the specific type to get the original format string. Exposing a property as well doesn't hurt if you have an instance of the `LoggerStructureFormatter` itself. So I ended up adding both. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72768032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72771585", "body": "@yishaigalatzer yeah that's doable. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72771585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72779721", "body": "yeah. we'll have to special case this key. User cannot have this key name. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72779721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72905766", "body": "Addressed all the comments. If there are no other comments this PR can go in. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72905766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72941341", "body": "Thanks everyone. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72941341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/9504035", "body": "hmm. I tried including the package at top level `dependencies` node and it seemed to work - I mean build.cmd completed successfully without build errors. Though I did not see any other sample doing this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/9504035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20752560", "body": "builder.Append(new string('\\t', level))?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/20752560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23739324", "body": "@lodejard I had to update this as the format item syntax is per the comment here. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23739324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23790923", "body": "Can be removed. I updated. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23790923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23790938", "body": "yeah..\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23790938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23790943", "body": "Good point.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23790943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23792655", "body": "I decorated all methods with `public/private/internal` - are there other specific comments? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23792655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795723", "body": "This shouldn't really be commented. I'll uncomment this. I just took over code and missed to notice this. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795822", "body": "This feature adds ability to specify named placeholders as I mentioned in the PR description. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23795822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23802837", "body": "We can't pass `format` as a parameter to the lambda. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23802837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23802883", "body": "yeah. sure. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23802883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23942325", "body": "I will do a bit more testing on this and update the PR. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/23942325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24050573", "body": "There are already some tests on these unbalanced cases but escaped braces. Added some more negative ones. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24050573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "avanderhoorn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58197351", "body": "Thanks for that @Eilon, I'll see what I can find by looking through GH and searching for `ILogger.Write`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/58197351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64672453", "body": "Ok cool, whats needed to keep pushing this forward before the next beta drop, etc?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64672453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64684141", "body": "Happy to get thoughts before progressing and putting more time in. Hence why the PR is fairly minimal.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64684141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64686294", "body": "+1 That was my thinking :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64686294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64713509", "body": "I'm cool if the perf works out with a better implementation of LoggerStructureBase. Just worried of the hit as it is atm. We are working to make `Glimpse` very lightweight and don't want people to avoid using it because we chose not to do this work here.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/64713509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65964512", "body": "@loudej I get that from a publisher perspective, but from a consumption perspective, unless you are doing anything but integrating through the list and \"printing\" out each property, you are going to want to do some sort of index lookup.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/65964512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66204789", "body": "If we take Glimpse as an example. If we end up being interested in the majority of log messages out there, unless we take a dependency on most of these packages and have mirroring packages (which is a management nightmare for us) or the log messages are mainly marked as Assembly Neutral (which I don't see how they can be with how much they will likely be in flux), one of the major ways we will be consuming \"non critical\" package log messages is via the `ILoggerStructure`.\n\nGiven this, if we want to do anything semi intelligent with this data, we will be trying to index things by its key. Even though `ToDictionary` isn't a \"huge\" overhead, we could be doing this for a largish amount of log messages... this doesn't exactly feel ideal when the option is to use a dictionary in the first place and the cost to create the dictionary vs list is only marginally different.\n\nThis gets a little worse if multiple providers are calling `ToDictionary` on the same log messages.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66204789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66407748", "body": "Currently don't have any examples of where we are doing that, but I'm hoping to start covering that ground over the next week or so.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/66407748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72219155", "body": "Really like this PR!!!! Its been on our wish list for ever but never thought it would make it into the core platform. \n\nWe are wanting to do things where we visually tokenise the trace messages we are showing and describe to people what they are seeing. With the options we have in `LoggerStructureFormat` currently, we probably can't do this however, as we only have access to the finial \"formatted\" or the list of key/value tokens. This isn't enough on its own for us to identify the tokens. Any chance we can have access to the underlying original format string as well? \n\nThis would mean that when we visually show things, we can locate the correct places for highlighting.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72219155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72277555", "body": "Yes. I think thats all I would need to identify the tokens and build what I need. \n\nIf i was making wishes to santa however, instead of me need to do that manually, it would be amazing if we could get the positions of the tokens... as at the moment, if we want to show the visualized version of the tokenized string, we have to recreate the logic in `LoggerStructureFormat` in order to put the `span`s around each token, etc. Does that make sense?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72277555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72351448", "body": "Makes sense on the former (and I agree) and the latter would be great!!!\nI'm trying to get to be point were it is as simple as possible to work out\nwhat portions of the string where tokenized and where those tokens are (so\nI can do the text highlighting) - showing that info would be a great step\nin that direction.\n\nOn Saturday, January 31, 2015, Louis DeJardin notifications@github.com\nwrote:\n\n> @avanderhoorn https://github.com/avanderhoorn I like the idea of having\n> the format string as a property, though not all messages which have\n> structure will have a format string of course. How about if the code that\n> parses and renders the message was public and exposed the info you\n> described?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/aspnet/Logging/pull/98#issuecomment-72330017.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72351448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72583322", "body": "Thanks for getting this data out! In terms of feedback, I must be honest, accessing it via that key seems a little unintuitive and more like a private api... Would be nice if there was some more supported way of doing this.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72583322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72766235", "body": "I like the addition of the first class property. I'm still left scratching my head though over why we would need the `__OriginalFormat` in the `GetValues()`. As a caller of `GetValues()` I kinda expect that the collection I get back to be a collection of `keys` and `values` that I found in the `OriginalFormat`. I wouldn't expect one of the entries to be something that wasn't a found `key`/`value`... I'm not saying that its not useful, just that I doesn't really make sense given what the \"contract\" describes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72766235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72774743", "body": "What if `OriginalFormat` is a key the user already has?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72774743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "borgdylan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59269020", "body": "Would it be possible to make the function that writes the dictionary out to the response replaceable in ElmOptions?  Like that, I could add transform it into JSON and integrate it into some kind of management dashboard.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59269020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59322289", "body": "@SonjaKhan that would help a lot since I do all my UI in AngularJS+WInJS which means data is fetched as JSON.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59322289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70473952", "body": "That fixed it, however i found a missing thing in static files...will report\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70473952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "PureKrome": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59592284", "body": "![Bahahahaahah](http://media1.giphy.com/media/CW27AW0nlp5u0/giphy.gif)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59592284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62067072", "body": "Same here @tugberkugurlu - Happy to inject it via a `ctor`. :+1: \n\nThe problem you speak of @eugeneagafonov is that your `ctor`'s could have lots of interfaces defined in there. This could lead to [constructor over-injection](http://jeffreypalermo.com/blog/constructor-over-injection-anti-pattern/).\n\nMy TL;DR; of that anti-pattern is basically this: inject dependencies that are to be used all over the class/service. Logging is a perfect example of this. But if you have 10 methods and 2 only use an `IFoo`? don't inject it via the ctor. Pass it in, in those 2 methods.\n\nWhy inject everything, when it's only used here and there, in side that class?\n\nSo - an `ILoggerFactory` is actually a perfect example IMO where a service is injected and would be used all over the class.\n\nI also think that people start to get _tired_ of having to create more mocks for their classes because the ctor's now require them ... assuming one does testing. So refer back to the anit-pattern, mentioned above.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62067072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63447788", "body": "+1 @tugberkugurlu - well said :clap: \n\n@eugeneagafonov I mentioned the _over-injection_ article as an example of what some people start to do with DI once they understand and grok DI. In my tiny coding world, I've found that the people who dislike DI/IoC .. are because they have these HUGE ctor's with everything thrown in there - they are injecting everthing this side of the sun. That article that I stumbled across a while back suggested that .. yeah .. DI is nice .. but _think_ about what you're going to inject. If it's used in the majority of places in that class, DI that bad boy. Otherwise, pass it into the method.\n\nYou started out by talking about Logging and how you think it should not be injected by a static class. Like @davidfowl said -> that sounds pretty anti. And I followed up by suggesting that Logging is a perfect example of how a service _should_ be DI'd via ctor.\n\nAnyways, GL. HF. :boom: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63447788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63458353", "body": "@eugeneagafonov I didn't say I think it's OK to have all of those interfaces for every ctor. Personally, I think the `IClock`, `IEnv` and possibly `IUserInfo` are an overkill, but I have no idea about your domain / problem / solution, etc.\n\nIf you're using instances of those interfaces in the majority of your methods in a ctor, then yeah, DI em in , is what I'm saying. It's not that hard to setup the DI once (bootstrapper or how ever vNext does it, etc) and magic just happens.\n\nSo we agree to disagree. :+1: \n\n![weeEEEeeEEeeee](https://31.media.tumblr.com/b1200f335015676ba3b1a0e0096cd7c9/tumblr_inline_nb1y1lec6r1solpjm.gif)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63458353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72273658", "body": "![](https://31.media.tumblr.com/751b9113f1b9084c2858d9ca8129c260/tumblr_inline_n4rt6dgDo51solpjm.gif)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72273658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tugberkugurlu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59662019", "body": "I see. I assumed that removing build-only constraint for the Microsoft.Framework.Logging.Interfaces dependency would solve that problem. Wrong?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59662019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59662724", "body": "changed it accordingly.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59662724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59734510", "body": "I'm seeing the below behavior when using the console logging:\n\n![image](https://cloud.githubusercontent.com/assets/328122/4700504/cae2bc46-584d-11e4-807c-40a4013db1dd.png)\n\nThe whole console unexpectedly turns into red after writing the error message. Is this related to this issue?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59734510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59792706", "body": "@SonjaKhan this one: https://github.com/tugberkugurlu/AspNetVNextSamples/tree/4829697e83222c27ea72b5a7dd4494b3bb8a2556/src/LoggingSample\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/59792706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60736540", "body": "Would it be possible to get this in by merging this or doing it in any other way? I'd like to start using NLog implementation in my _old_ .NET applications :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60736540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60802589", "body": "I seem to have the latest version:\n\n> $host\n> Name             : Package Manager Host\n> Version          : 2.8.50313.46\n> InstanceId       : 9b2c403b-228c-4d0f-8f3d-09f54a17300f\n> UI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\n> CurrentCulture   : en-US\n> CurrentUICulture : en-US\n> PrivateData      : NuGetConsole.Host.PowerShell.Implementation.NuGetPSHost+Commander\n> IsRunspacePushed : False\n> Runspace         : System.Management.Automation.Runspaces.LocalRunspace\n\nHowever, it's weird as [VS Gallery](https://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c) shows the latest version as 2.8.50313.31 which is an older version than I currently have.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60802589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60807957", "body": "Good point. They have a new version available (2.8.50926.663) on codeplex. It's working now.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60807957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60966782", "body": "Yep, clearing `%userprofile%\\.kpm` and re-restoring solved the problem.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60966782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61261455", "body": "@Eilon how does it look like now?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61261455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61363530", "body": "I cannot resist the temptation as logging is one of my favorite :heart: topics. So, I will ask :smile: \n\n[String Interpolation](https://roslyn.codeplex.com/discussions/570292) is currently a [planned feature for C# 6.0](https://roslyn.codeplex.com/wikipage?title=Language%20Feature%20Status&referringTitle=Documentation). I wonder how this would look like with string interpolation. I assume it won't effect this as far I can see as the interpolated string seems to be translated to `String.Format` but I wanted to ask anyway.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61363530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61696524", "body": "@eugeneagafonov \n\n> While developing several projects for my clients I've found out that injecting logging services into controllers and services seems to be uncomfortable to use,\n\nI would like the ctor to be the only place where I look at to find out which external components that component has dependencies on. In this new world, I archived this 99.9%. So, please do not take this away from me :smile: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61696524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61713634", "body": "> It was implemented in that way for a reason, not only because DI was not in trend at that times. You can't keep logging in only asp.net environment, it needs to go outside of aspnet.\n\nIt's already outside the ASP.NET :smile: AFAIK, anything under Microsoft.Framework namespace is supposted to be go beyond ASP.NET like logging and caching. You can **even** start using this new logging infrastructure [in a good-old .NET application](https://github.com/tugberkugurlu/AspNetVNextSamples/blob/b3abc310c77d642cd60738427e1ea1a4de6b0ac5/classic/LoggingWithOldConsole/LoggingWithOldConsole/Program.cs) now.\n\nWas this the problem? I'm still not seeing what the problem is.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61713634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62058723", "body": "Well, if you ask me, DateTime.Now case is also a bad example for this problem as it's also a bad API to use. However, we are all using it regardless in most of the cases (including me :smile:). It is fair to say that [NodaTime's approach on this problem](http://nodatime.org/unstable/userguide/testing.html) is very logical and DI friendly.\n\nI am just casting my vote here: I'm happy to inject `ILoggerFactory` implementation every place where I need a logger.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62058723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62940115", "body": "@johnkors \n\nhttp://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin/Logging/ILoggerFactory.cs\nhttp://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin/Logging/ILogger.cs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/62940115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63446546", "body": "@eugeneagafonov I still insist that `DateTime.Now` is a bad example :smile: and the way you used `SystemClock` is also a bad example. If you are using NodaTime in your application, you would inject `IClock` implementation into your componnets. The only place where you use `SystemClock.Instance` explicitly is the IoC container registration where you would register  `SystemClock.Instance` as a singleton for `IClock`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63446546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63465836", "body": "@eugeneagafonov honest question (I'm really trying to understand, not trying to bash here): why do you care if you have `IClock`, `ILogger`, `IEnvironmentInfo` injected into a class? Is it because of the fact that you need to construct and pass too many objects into a class? if that's the case, you are not the one who constructs this object most of the time. Your IoC container will do the job.\n\nWhy do I prefer dependency injection? Here is the detailed post I have just written: [Dependency Injection: Inject Your Dependencies, Period!](http://www.tugberkugurlu.com/archive/dependency-injection-inject-your-dependencies-period)\n\nI understand that this is a design issue. So, inside your application startup, you can put `ILoggerFactory` in a place where it can be reached out statically everywhere. However, this shouldn't be baked into the ecosystem.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63465836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "kanchanm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60128328", "body": "@Eilon \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/60128328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "eugeneagafonov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61693936", "body": "in test environment you register mock services which are being used in EnvContext.Current\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61693936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61696508", "body": "So the only problem is how to find the proper resolver, instead of doing GlobalConfig.DependencyResolver? I'm not going to argue, though I think it's not anti di at all, but the problem exists, and I would love to hear how to get rid of endless constructor parameters in every controller and every external code.\n\nCan you make a property injection on a base class for a controller?\nIt can partially resolve a problem if you can do something like this:\n\n``` csharp\n public class ControllerBase\n {\n     // injected\n     protected IEnvironment Environment \n     {\n         get;\n         set; // want to have private set here, is that possible?\n     }\n }\n\n public class HomeController : ControllerBase\n {\n    public IActionResult Index()\n    {\n        return Content(\"Hello \" + Environment.User.Name);\n    }\n }\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61696508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61697693", "body": "@tugberkugurlu well I think no chance for me ;) But I'd love to hear an alternative solution then. Or do you think there is no such problem? \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61697693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61702468", "body": "Let's see a problem from a wider angle. Logging is something that is needed literally everywhere in your code. That's why I'm writing here, not to aspnet repo itsef. Another example is security, manual profiling, etc. Leaving beside AOP approach, what were common approaches to logging? Trace was a static class, which was configured in config or code, many popular frameworks, for example, NLog:\n\n``` csharp\nLogger logger = LogManager.GetLogger(\"MyClassName\");\n```\n\nIt was implemented in that way for a reason, not only because DI was not in trend at that times. You can't keep logging in only asp.net environment, it needs to go outside of aspnet. Of course I can use a separate logging in my azure worker role, but it is natural to have it in a way System.Diagnostics.Trace had. If I needed only logging mechanics, I would just keep using Trace, but I need to log additional info every time, and for that I need to have that information, so I need to go through and through from the very beginning providing it to the place in code where I log something.\n\nIn aspnet code I tried to use constructor injection, and have about 3 services I almost always needed to provide. While I fully understand advantages and disadvantages of that kind of application composition, I still think the problem does exist. So, would love to hear what would you recommend in such a case.\n\nI've already gave a try to a code snippet in VS, which adds implementation of ILogger, IUserInfoProvider and IEnvironmentInfoProvider \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61702468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61704032", "body": "In case someone is interested discussing this at MVP Summit I'm going to keep hanging in Kodiak today and tomorrow :)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61704032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61863760", "body": "No the problem is that i have to provide too many dependencies into every bit of large codebase. My bad failing to explain this. Maybe it could be illustrated with this simple problem: DateTime.Now (or UtcNow) cannot be mocked, so to follow DI principles we have to create IDateTimeFactory (or whatever) and provide it into every bit of code which relies on it. But if we could configure the value returned by DateTime.Now in tests it wouldn't be necessary, and would save a lot of efforts writing and maintaining constantly repeating code.\nIt is clear for me that my suggestion is not considered as something valuable, so we could move this discussion (if anyone is interested to) to somewhere more appropriate place (perhaps I could go with a blog post on this when get a little bit of free time)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/61863760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63428608", "body": "I think `DateTime.Now` is an excellent example. I used to replace it with `Func<DateTime>` which was injected into all ctors, and this was one of the reasons I reconsidered this approach and started to use contexts. And this library, NodaTime from what I saw uses the same approach I use:\n\n``` csharp\nInstant now = SystemClock.Instance.Now\n```\n\n@PureKrome thanks for \"over-injection\" article, however I'm not sure how it is relevant to this case - logging and accompanying services are needed all over the code.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63428608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63450325", "body": "So, it is ending up having IClock, ILogger, IEnvironmentInfo and IUserInfo into every ctor, which you think is OK and I think is not, which I was telling from the very beginning of the discussion.\nI don't see how \"overinjection\" is relevant, and I don't see how is it \"pretty anti\".\nBut I think no sense to go on further, thanks for your input )\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/63450325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "JesperTreetop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67389871", "body": "As linked in the previous issue, [Mono sort of has an implementation which either does nothing or something very Mono-specific depending on the setting](http://stackoverflow.com/questions/15359190/c-sharp-service-as-a-daemon-in-debian-with-mono-service/15361225#15361225).\n\nMicrosoft's .NET BCL implementation ([System.Diagnostics.EventLog](https://github.com/Microsoft/referencesource/blob/master/System/services/monitoring/system/diagnosticts/EventLog.cs)) is available under the MIT license as part of the Base Class Library's System assembly. No idea whether all its dependencies work with CoreCLR, most likely not. There does not seem to be a [matching System.Diagnostics.whatever NuGet package at this time](http://www.nuget.org/profiles/dotnetframework?showAllPackages=True).\n\nIt's probably best to have one logger provider for each idiomatic log platform (for example, OS X could use [ASL](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/asl.3.html)). \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67389871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67449381", "body": "So I trust this means that it wasn't otherwise planned for development? I just might help out with a PR.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67449381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67718343", "body": "I'm thinking of working on this now with these initial goals/consequences:\n- No tests ([the API I'll be using](http://msdn.microsoft.com/en-us/library/system.diagnostics.eventlog%28v=vs.110%29.aspx) isn't testable in any way known to me).\n- Just target aspnet50, not core, since there's no known way to do core without porting the dependencies, and I won't do that to begin with at least.\n- No special effort towards Mono support since Mono will 99 times out of 100 be running on Linux and OS X, where the Mono-provided event log isn't well known or the idiomatic location to log to.\n- To the extent possible, follow the format used by the existing ASP.NET 1309 event.\n\nOne open question: ASP.NET 4 uses the full version number of the .NET Framework in its provider name. That would be out of sync, and if I used \"ASP.NET 5\", that would go out of sync as newer versions were released. Where would I pull that version information from - is it in one of the core KRuntime interfaces somewhere?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67718343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67740273", "body": "My first attempt failed, since the IIS host provided by Microsoft.AspNet.Loader.IIS swallows exceptions in order to make and successfully present its own error page. I can't blame it for doing this, but my approach (recommended by @davidfowl, no less) hinges on it logging the error, which it doesn't do. I'd fix it myself, but it's one of the few pieces where the source isn't available as far as I can tell. The alternative is to wrap all the OWIN/IApplicationBuilder Use handlers to catch and rethrow the exception and I don't know if that's possible, or to provide another implementation of IApplicationBuilder that does that which seems rather heavy handed and not too compositional.\n\nI did write some code, though, and one of the decisions I made was to provide the ILoggerFactory with the IServiceProvider (optionally) to imbue the event with details from the HttpContext, like the request URL and such details. This way, usage is just:\n\n```\npublic void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory) {\n        loggerFactory.AddEventLogExceptionLoggerIncludingRequestDetails(app.ApplicationServices);\n        // or\n        loggerFactory.AddEventLogExceptionLoggerWithoutRequestDetails();\n\n        // ...\n}\n```\n\nWith constructors and dependency injection I wouldn't have to pass the entire IServiceProvider, but it looks like this is necessary to get the transient HttpContext at the time of the exception rather than the one resolved (null, I assume) during Configure. Or am I missing something?\n\nMaybe there could be another interface, just for reporting request handling exceptions - that could be a slippery slope, though.\n\n```\n[AssemblyNeutral]\npublic interface IRequestExceptionLogger {\n    void LogException(Exception exception, HttpContext context);\n    // or IServiceProvider applicationServices if other services are needed?\n    // or just HttpRequest request?\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67740273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67743477", "body": "I am a dolt - scratch most of the above, I made this work by just making it into middleware. It appears that this problem just doesn't neatly solve itself with the logger stack. Uncoupling is fine and dandy but it also means the logger receives a lot of other errors that it potentially doesn't want to log, and the middleware logging this either has to use a logger it created itself or it might also log this message to other loggers. After some more testing I'll have to submit a pull request back to Diagnostics, the original issue's repository, to see what they make of what I've built.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/67743477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68079558", "body": "Okay, I'll go with that then and just hope that all the hosts will log appropriately (whereas the middleware, even though it stretches the boundaries of layering a bit, ensures it'll happen).\n\nThe small trouble I have with that vs middleware is that the logger could theoretically go other places than the part of the stack running the IApplicationBuilder components, and thus log other errors. Maybe this is a feature. I don't know if ASP.NET 5 web sites are meant to be able to be embedded in other projects the way OWIN-hosted technologies, like the ASP.NET 4 version of SignalR, are. In that case there could be a whole lot going on inside the project and conceivably they could share a logger. Then again, you could also say that by sharing a logger and adding this, you've opted into that.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68079558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kscott5": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68407335", "body": "Yes-\n\n![k_run](https://cloud.githubusercontent.com/assets/132991/5583756/2c8db250-903b-11e4-9eb1-1eb3edb30eb0.png)\n![kpm_restore](https://cloud.githubusercontent.com/assets/132991/5583757/2c8fc3ce-903b-11e4-953e-edad20236a5d.png)\n![kre_home](https://cloud.githubusercontent.com/assets/132991/5583754/2c8cc944-903b-11e4-8e5a-f1b625ebb3b9.png)\n![kvm_list](https://cloud.githubusercontent.com/assets/132991/5583755/2c8d8622-903b-11e4-9b4e-a213aa20192e.png)\n![path](https://cloud.githubusercontent.com/assets/132991/5583758/2c91a78e-903b-11e4-81cf-a161e7de0cf7.png)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68407335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68458232", "body": "I'm having issue with the setup altogether. For instance, the kvm.ps1 failed originally when I executed the list command. I had to update the ps1 script to add an additional loop starting at line 397.\n\n``` powershell\nforeach($alias in $aliases){\n    $parts = $_.Name.Split('\\', 2)\n    foreach($part in $parts){\n        if($part.Contains($alias.Name)){\n            $fullAlias += $delim + $alias.Alias\n            $delim = \", \"\n        }\n    }\n  }\n```\n\nNext even though I update the AppData\\NuGet\\Nuget.config with the URLs, the kvm install lastest still used the https://www.nuget.org/api/v2/. Only after setting the environment variable KRE_NUGET_API_URL=https://www.myget.org/F/aspnetmaster/ did the KVM install command try using this ASP.NET vNext master branch. But still produced the following error\n\n![kvm_install_error](https://cloud.githubusercontent.com/assets/132991/5589428/d78827ee-90db-11e4-8643-3af1a95a5462.png)\n\nSo, tell me why it works for some samples and not for others. I'm not new to troubleshooting issue or reviewing and updating code but this is the only way for me to develop and stay current while I'm unemployed and looking for new contracts.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68458232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68459906", "body": "The /api/v2 was missing from the KRE_NUGET_URL so I assume it's pulling from the master branch now.\n\nThe kvm.ps1 script from the URL you posted above is different. How often is this file change, and why change KRE_NUGET_URL to KRE_FEED now?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68459906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68462267", "body": "OK, I didn't pull the latest kvm script because I wanted to minimize the error that could result to changing to many things but I get the aspnetmaster. I check that everything is working by running the ALL samples from the Home repository. I removed the Logging from my drive and executed \n\ngit clone https://github.com/aspnet/Logging.git \n\nto ensure I have the latest source and sample. I then execute \n\nkpm restore -s https://www.myget.org/F/aspnetmaster/api/v2 --no-cache\n\nwhich complete successfully. But when I execute\n\nDev_Env (x86) F:\\apps\\web\\aspnet\\Logging\\samples\\SampleApp>k run\nSystem.IO.FileLoadException: Could not load file or assembly 'System.Threading,\nVersion=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of it\ns dependencies. The located assembly's manifest definition does not match the as\nsembly reference. (Exception from HRESULT: 0x80131040)\nFile name: 'System.Threading, Version=4.0.10.0, Culture=neutral, PublicKeyToken=\nb03f5f7f11d50a3a'\n   at Microsoft.Framework.Logging.LoggerFactory.Create(String name)\n   at SampleApp.Program..ctor()\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68462267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68471789", "body": "Yes, I'm pulling the KRE from the same feed  https://www.myget.org/F/aspnetmaster/api/v2, and I'm also trying downloading the kvm scripts from https://github.com/aspnet/kvm/tree/dev/src and paste/overwrite to your %userprofile%.kre\\bin\\ folder. \n\nThis script opens another command prompt and appears to try to compile the CLR natively. It produces to much out to capture.\n\n``` dos\nDev_Env (x86) F:\\apps\\web\\aspnet\\Logging\\samples\\SampleApp>kpm restore --no-cach\ne\nRestoring packages for F:\\apps\\web\\aspnet\\Logging\\samples\\SampleApp\\project.json\n\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='Microsof\nt.Framework.Runtime.Interfaces'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='Microsoft.Framework.Runtim\ne.Interfaces'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.C\nollections.Concurrent'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Collections.Concurr\nent'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.D\niagnostics.TraceSource'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Diagnostics.TraceSo\nurce'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.G\nlobalization'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Globalization'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.L\ninq'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Linq'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.T\nhreading'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Threading'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.R\nuntime'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Runtime'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.R\nuntime.Extensions'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.Extensions'\n.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.R\nuntime.InteropServices'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.InteropServ\nices'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.C\nonsole'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Console'.\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Diagnostics.TraceSou\nrce' 531ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Collections.Concurre\nnt' 547ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='Microsoft.Framework.Runtime\n.Interfaces' 572ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Globalization' 741ms\n\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Linq' 750ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Runtime' 936ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.InteropServi\nces' 1004ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Di\nagnostics.TraceSource' 5147ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Li\nnq' 5158ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Co\nllections.Concurrent' 5182ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.C\nollections'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Collections'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.T\nhreading.Tasks'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Tasks'.\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Ru\nntime.Extensions' 5184ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Gl\nobalization' 5236ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Threading' 6313ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Th\nreading' 6316ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.Extensions'\n6323ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Console' 6309ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Co\nnsole' 6337ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Tasks' 117\n5ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.I\nO'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.IO'.\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Collections' 1322ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.IO' 279ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Co\nllections' 1655ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.IO\n' 1244ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Ru\nntime.InteropServices' 9179ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.R\neflection'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Reflection'.\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Ru\nntime' 9429ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Reflection' 414ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='Microsoft\n.Framework.Runtime.Interfaces' 11774ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.T\next.Encoding'.\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Text.Encoding'.\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Text.Encoding' 267ms\n\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Th\nreading.Tasks' 8943ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Re\nflection' 4932ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Te\nxt.Encoding' 26023ms\nResolving complete, 37885ms elapsed\nRestore complete, 37901ms elapsed\n\nDev_Env (x86) F:\\apps\\web\\aspnet\\Logging\\samples\\SampleApp>k run\nSystem.IO.FileLoadException: Could not load file or assembly 'System.Threading,\nVersion=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of it\ns dependencies. The located assembly's manifest definition does not match the as\nsembly reference. (Exception from HRESULT: 0x80131040)\nFile name: 'System.Threading, Version=4.0.10.0, Culture=neutral, PublicKeyToken=\nb03f5f7f11d50a3a'\n   at Microsoft.Framework.Logging.LoggerFactory.Create(String name)\n   at SampleApp.Program..ctor()\n```\n\nReally, all I trying to do is run this example to figure out what I'm doing wrong in my application to including logging.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68471789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68473826", "body": "I've run that command but still go the same issue. I'm trying to do this from a public computer in the library, and I don't have administrative access and not even loaded with the latest Powershell 4 and .NET 4.5. But I still feel this should be a problem considering the other https://github.com/aspnet/Home samples run successfully.\n\n I will try on my own machine.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68473826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68550022", "body": "That is the difference between the release and master branch?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68550022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68554429", "body": "I appreciate the help with this. I removed the contains in the following directories (OK):\n\n``` dos\n@powershell remove-item %USERPROFILE%\\.kre -recurse -force\n@powershell remove-item %USERPROFILE%\\.kpm -recurse -force\n```\n\nI executed the following commands (OK):\n\n``` dos\ngit clone https://github.com/aspnet/kvm.git --branch master\ngit clone https://github.com/aspnet/Home.git --branch master\ngit clone https://github.com/aspnet/Logging.git --branch master\n```\n\nExecuted the following commands to pull the KRE (OK):\n\n``` dos\nkvm install latest -x86 -r CoreCLR -f \nkvm install latest -x86 -r CLR -f\n```\n\nExecute the following commands from Logging\\samples\\SampeApp (OK):\n\n``` dos\nkpm restore --no-cache\nk run\n```\n\nWhile my original issue is fixed, pull all code from master branches breaks the Home\\sample\\HelloMvc and Home\\sample\\HelloWeb samples with the following errors:\n\nBut now there are conflicts with other samples particularly Home\\samples.\nExecuted the following commands from Home\\samples\\HelloMvc (Restore Complete: NOT OK)\n\n``` dos\nkpm restore --no-cache\n...\nUnable to locate Newtonsoft.Json >= 6.0.6\nUnable to locate System.Collections.Immutable >= 1.1.32-beta\nUnable to locate System.Reflection.Metadata >= 1.0.17-beta\nRestore complete, 5310ms elapsed\n```\n\nWhich appear to be depends of \n\nMicrosoft.AspNet.Hosting\nMicrosoft.AspNet.Mvc\nMicrosoft.AspNet.Mvc.Core\nand many more. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68554429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68555605", "body": "I pull the release branch, execute the kpm restore, then master branch and all works.\n\nBut I'm not using VS. If this is set within Nuget.config, then it done.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68555605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68600377", "body": "Great. But you had me pull from the master branch which is using TraceType.cs\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/68600377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69235222", "body": "After having further issues, I decided to scratch the whole thing and start over. So, tell me what are the correct steps to getting KRE update and running. Should I pull from dev or master branches? Can you mix dev and master?\n\n``` DOS\nDev_Env (x86) G:\\apps>kvm install latest -x86 -r CoreCLR\nDetermining latest version\nConsole-Write-Error : Exception calling \"DownloadString\" with \"1\" argument(s):\n\"The remote server returned an error: (403) Forbidden.\"\nAt G:\\apps\\aspnet\\kvm\\src\\kvm.ps1:827 char:22\n+   Console-Write-Error <<<<  $_\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorExcep\n   tion\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorExceptio\n   n,Console-Write-Error\n```\n\nNote: I have windows 7 pro with .net 3. \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69235222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69370754", "body": "I tried both but the binaries could have gotten mixed. I will try dev branch and see what happens\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/69370754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Xiaohongt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70345849", "body": "We can add it in outputTemplate.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/70345849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wenhx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71187610", "body": "OK, I will sign a Contributor License Agreement.\nI got a error when i submit the request form, I had contact the public email on the web page(https://cla.msopentech.com/).\nAnd i will try again later.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71187610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71347647", "body": "Hi @Eilon , I had signed the Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/71347647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "justinvp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72344868", "body": "> And with the proposed pattern, there would now be two calls to IsEnabled, thus reducing performance for the people who care about it most.\n\nSomeone more perf-conscious who is already checking `IsEnabled` already has _two_ calls to `IsEnabled` happening, just look at the current implementations of `Write` (they all call `IsEnabled`):\n- [NLog](https://github.com/NLog/NLog/blob/00d53bc3b234917517e2fdc1735f8b4af2d5d8aa/src/NLog/Logger.cs#L157)\n- [Serilog](https://github.com/aspnet/Logging/blob/9899629df27168151a4e977534f2befba7134690/src/Microsoft.Framework.Logging.Serilog/SerilogLogger.cs#L42)\n- [Console](https://github.com/aspnet/Logging/blob/9899629df27168151a4e977534f2befba7134690/src/Microsoft.Framework.Logging.Console/ConsoleLogger.cs#L29)\n\nI'd argue that it's worth making the common scenarios (the helper extensions) as performant as possible by default. Pit of success.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72344868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72464884", "body": "> In all reality, is the one extra allocation of an array worse than an extra method call to delegates?\n\nIt's more than one extra allocation. Consider a call to the following:\n\n``` c#\n_logger.WriteVerbose(\"OnReceived({0}, {1}, {2})\", streamIndex, count, id);\n```\n\nWith the current API and implementation, this is at least 5 unnecessary allocations when the Verbose level isn't enabled:\n1. `streamIndex` (`int`) is boxed to an `object`\n2. `count` (`int`) is boxed to an `object`\n3. `id` (`ulong`) is boxed to an `object`\n4. the `object[]` params array is allocated\n5. the call to `string.Format` allocates a new `string` (and the implementation of `string.Format` takes time to parse the format string, and may have additional allocations inside its implementation).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72464884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72496980", "body": "I modified the sample app to measure the performance difference between the existing implementation vs. the proposed improvements. The results show a decent improvement.\n\nBelow are the results of a few test runs when Verbose isn't enabled. `A` is the elapsed time of the existing implementation, `B` is the elapsed time of the proposed changes.\n\n```\nA: 00:00:00.8806144\nB: 00:00:00.1702717\nA/B     : 5.17181892234587\nB/A     : 0.193355570837815\n(A-B)/A : 0.806644429162185\n(B-A)/B : 4.17181892234587\n\n\nA: 00:00:01.0186282\nB: 00:00:00.1662137\nA/B     : 6.1284250335562\nB/A     : 0.163174060957668\n(A-B)/A : 0.836825939042332\n(B-A)/B : 5.1284250335562\n\n\nA: 00:00:01.0502144\nB: 00:00:00.1692758\nA/B     : 6.20416149266463\nB/A     : 0.161182135761993\n(A-B)/A : 0.838817864238007\n(B-A)/B : 5.20416149266463\n```\n\nImplementation here: https://gist.github.com/justinvp/9de6d8dfe19be4c36ee0\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72496980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72685337", "body": "I created an initial PR (#101) to demonstrate the proposed changes.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72685337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "msotclas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72683278", "body": "Hi **@justinvp**, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    <span>\n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    </span>\n\nTTYL, MSOTBOT;\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72683278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72685936", "body": "**@justinvp**, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\n<br />Thanks, MSOTBOT;\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72685936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yishaigalatzer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72770629", "body": "@Praburaj you can probably add `{OriginalFormat}` as the key instead of `__OriginalFormat` ;)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72770629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72790121", "body": "Yes exactly that\n\n-----Original Message-----\nFrom: \"Louis DeJardin\" notifications@github.com\nSent: \u200e2/\u200e3/\u200e2015 7:17 PM\nTo: \"aspnet/Logging\" Logging@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Logging] Feature structuredformatstring (#98)\n\nI think Yishai meant the key name would literally contain curly braces, which end-user format strings could not reproduce.\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/72790121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "damianh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/73405542", "body": "Why would you want to await a log write? Surely it's just fire and forget and it's up to the implementation to be concerned with such things, including returning asap.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/73405542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/73405970", "body": "Well now... I _do_ remember that logging discussion I was involved in on one of the katana calls where [this was discussed](https://github.com/ayende/ravendb/tree/master/Raven.Abstractions/Logging) (`LibLog` was previously known as `DH.Logging`)\n\nSuffice to say, they have a (weak) shared ancestry :wink:\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/issues/comments/73405970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ejsmith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/comments/16221636", "body": "Should this be using generics like the Log method does? I believe it's trying to avoid the boxing operation.\n\n`IDisposable BeginScopeImpl<TState>(TState state);\n`\n\nAlso, I must say that I am not a fan of changing the name to BeginScopeImpl just because you want to have an extension method called BeginScope that is ambiguous. I feel like this is favoring the scenario of doing scopes with strings over scopes that use objects.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/comments/16221636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "PinpointTownes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18919942", "body": "Throwing an exception here will make MVC unusable as it relies on `BeginScope` for its route handler and the default action selector.\n\nIf you don't wanna implement it yet, I'd suggest returning either `null` or a dummy `IDisposable` (returning `null` shouldn't be an issue given that `BeginScope` is only used with `using`, but a custom `IDisposable` is probably better).\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18919942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18923084", "body": "It's usually better to use a `PathString`.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18923084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973016", "body": "Removing the setter would be even better :tada: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/18973016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19012990", "body": "I imagine that you could also use an instance store and declare `ElmStore` as singleton instead of transient.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19012990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19013342", "body": "You should directly compare the `PathString` instances instead of their `Value` property.\n\nI'd also recommend setting `/Elm` as a default value either in the constructor or directly in `ElmOptions` (like the security middleware)\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19013342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19013565", "body": "This field seems terribly confusing, as it represents the key associated with the unique request identifier in `context.Items`, but not the request identifier itself. `_requestIdentifierKey` would be a better name, IMO.\n\nAnyway, once https://github.com/aspnet/HttpAbstractions/issues/117 is implemented, this field might become unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19013565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19013618", "body": "https://github.com/aspnet/Logging/pull/38/files#r19013342\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19013618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19013689", "body": "Adding a property indicating the minimal `TraceType` logged would be helpful.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/19013689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21520926", "body": "Want no Christmas gift this year? :laughing: :gift: \n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21520926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21520973", "body": "You made a deal with the devil?\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/21520973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "lukewaters": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24636114", "body": "I looked at the log levels in 9 popular loggers, and serilog is the only logger that has debug as a lower level than verbose.  I am open to suggestions for as to what to do in this case\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24636114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24913258", "body": "no. The whole idea behind this bug is to prevent messages logged at the Debug level from being distributed to all the loggers by default.\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24913258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24913347", "body": "but I'll change it to an implicit property\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24913347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24913428", "body": "I'll update this to be the same as above on all the loggers\n", "reactions": {"url": "https://api.github.com/repos/aspnet/Logging/pulls/comments/24913428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}