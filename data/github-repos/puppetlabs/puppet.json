{"_default": {"1": {"hlindberg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3b6badeb1e890e01d14bda95e79685742611b2f2", "message": "Merge pull request #6552 from hlindberg/PUP-6274_include-function-to-4x-and-handle-undef-input\n\n(PUP-6274) Raise Error if included classname is undef or empty string"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/497f5c0c888cd05aeb680b46c12204edfe0b2128", "message": "(PUP-6274) Raise Error if included classname is undef or empty string\n\nBefore this, undef and empty string given to include would not lead to\nan error because the Class[main] is known internally as '' which is also\nwhat undef becomes in the 3.x API.\n\nThere is no legit case where the class '' should be allowed in the\npuppet language.\n\nThis commit raises an error if include is given an empty string or\nundef/nil."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7d6318c212c595fa05662e08fbc474af2ea95663", "message": "Merge pull request #6542 from hlindberg/PUP-8343_let-rich-data-params-through-to-resources\n\n(PUP-8343) let rich data params through to resources"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/24128f32244debe9a8b67926d4a4d6ee8ffb0d9c", "message": "(PUP-8343) Use PRegexpType to create string from Regexp\n\nThe Regexp.inspect method in Ruby differs in its output between\ndifferent versions of Ruby.\n\nThis commit changes the serializer's handling of Regexp to use the\nPuppet Data Type PRegexpType's regexp_to_s_with_delimiters which handles\nthe differences between different Ruby versions."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3904f51642607a41cdb38a4b039f8d68c33ca3c0", "message": "(PUP-8343) Add test for Regexp not turning into string for define\n\nThe added test shows that a regexp value given to a define is not\ntransformed to a String before type validation."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7cc451e67a938aed75a0cd2e199200dde174cfbb", "message": "(PUP-8343) Add test showing that a Regexp is not turned into string\n\nThe added test shows that a given regexp value is not transformed to a\nString before type validation."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/deb02d249767276628c5918d4c3d4d3225780d89", "message": "(PUP-8343) Make rich data arguments to resources come through\n\nBefore this, the evaluator transformed all arguments to resources such\nthat some, but not all \"rich data\" was transformed to strings (notably\nRegexp objects).\nThis was bad because a class, or define could then not rely on type\nchecking - a given Regexp would end up being a String which is\nsurprising because an error is expected.\n\nThe change in this commit is to not use the most aggressive 3x converter\nfor resources, and instead deal with rich data types in the\nserialization (where it belongs).\n\nThe Serializer needed an update when turning a Regexp into a String, and\nthe output produced by Regexp#inspect is what puppet expects.\n\nNo tests are changed in the commit."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/a4e413747d221878239fb8bc7f13a9bec183e106", "message": "(PUP-8327) Add optimization of Optional Array and Hash"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6fd2ff709fe859f8631f72b464bb9cad11c3dd60", "message": "(PUP-8327) Add common Optional types to optimized parse table"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/638020ec3e2f9abb679cee8479ca674bf165f2e6", "message": "(PUP-8327) Make parsing of most common data types 150-200x faster\n\nThis adds a table lookup of commonly used data type specifications\nin string form; for example 'String', 'Integer', 'Any'.\nThis has been measured to improve the parsing by 150-200 times."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4bfbc991904016a60ecb36cb365ef416be898e4f", "message": "Merge pull request #6478 from thallgren/issue/pup-8291/shortest-min-form\n\n(PUP-8291) Ensure that default min is 0 for ranges that represent size"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4c37fcf6c585253a3fc59e0218453f8ebac0c48e", "message": "Merge pull request #6489 from thallgren/loader-discovery-handle-errors\n\n(PUP-8259) Make loader discovery report errors instead of failing"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/05e6851dcca70d9f9090f41c5525879c1d7d5a0a", "message": "Merge pull request #6469 from thallgren/issue/pup-8270/leave-out-default-max\n\n(PUP-8270) Skip range max when presenting types with max == default"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b42f21580969eb40537ef1665509fe9b1808db77", "message": "Merge pull request #6468 from thallgren/issue/pup-8271/discovery-of-init-plan-and-task\n\n(PUP-8271) Make loader discovery find 'init' for plans and tasks"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/9392f0ae9dfba8346cc820b9bf136df8560414f7", "message": "(PUP-8235) Shorten paths to file in module in Scope.to_s\n\nThis fixes a TODO for shortening the path to a module when Scope.to_s\ndoes not have a resource and the path on top of the puppet stack is to a\n.pp file in a module.\n\nEarlier only paths into the environment got this treatment and paths to\nfiles in modules were output in full."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/c68a3215abc13e14a87fcc1d903888df06bc06f2", "message": "(PUP-8247) Add tests for Locator cache behavior\n\nThis adds tests that shows that locator's cache of offset to line\nkeeps the last computed line."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/62bd012537555685dfd6c9da862039535a626d6c", "message": "(PUP-8247) Fix Locator last-offset-cache\n\nThis fixes a problem in the Locator as it attempted to cache the last\noffset given as an argument when wanting the line for that offset.\nThe code was broken in that it used a local variable instead of the\nmember variable and there were therefore never any cache hits."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/62f62aeb41cff20b5e73a2398760b22efd817163", "message": "Merge pull request #6440 from thallgren/issue/pup-8237/compiler-injections\n\n(PUP-8237) Make Puppet::Pal::ScriptCompiler available to functions"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/2762c1ae207f6526a131b45ade5e561ca4cfa73f", "message": "(PUP-6162) Move regexp to error branches\n\nThis moves a (somewhat costly) regexp from the normal path to the\nexceptional paths of catching an error, or when raising an error."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/1bb2b30bfe71d9642bacdcfda9372be1650d855c", "message": "Merge pull request #6424 from thallgren/issue/pup-8072/merge-feature-branch\n\n(PUP-8072) Merge branch feature_puppet-tasks into master"}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6553", "title": "(PUP-6977) Add a find_module(names...) function", "body": "This adds the function module_directory() that returns the first found\r\nmodule's root directory path given one or more module names directly or\r\nin an array.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8859543", "body": "The best is probably to have Puppet::Module answer if the reference is a valid name / loadable module - something like Puppet::Module.is_module?(name, path), this because we may later allow loading in different form than a directory, and the rules for names etc. is really best encapsulated in the Puppet::Module class (names may at some point contain more than just the name of the module etc.)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8859543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16245667", "body": "'The features (e.g. attributes or functions) of...'\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16245667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16245675", "body": "same here\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16245675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16245685", "body": "and here\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16245685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452632", "body": "best to add an `attr_reader :label` to indicate that something called `label` exists. It is later defined as a getter. Alternatively, add a label method that raises an error \"derived should have implemented\".\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452688", "body": "delegates to the contained type ?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452752", "body": "remove the (_ok) what would you otherwise expect an assert to do ?\nI would also expect it to return what was asserted\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452849", "body": "Think it needs to assert that the given default value matches the type\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452910", "body": "assuming this is not cached, maybe name it `to_feature_hash` to indicate that a copy is returned (expensive).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16452910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453016", "body": "... got missing\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453069", "body": "\"....the non existent...\"\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453106", "body": "This needs to include the key, e.g. \"order by entry for '#{key}' has direction #{'direction'}, must be either....\"\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453188", "body": "isn't that infer of low quality? infer_set?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453208", "body": "call to iterable? takes one param I think\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453255", "body": "isn't it better to return an iterator over members?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453360", "body": "\"with from\" ?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16453360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16463814", "body": "absolutely - I expect asser_xxx(x) to return x if it is asserted to be 'xxx', and error otherwise. (Dropping the _ok, is just because there is no assert_override_notok, ('_ok' is tautological).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16463814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16463869", "body": "I should have said that similar constructs elsewhere (e.g. to_data_hash) means there is bigger chance it gets recognized for what it does. It is also more in line with ruby's 'to_h', only that this is a more specific kind of hash you are getting; to_feature_hash.\n\nNot terribly important though.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16463869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16463885", "body": "ah, ok - makes sense.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16463885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16463934", "body": "yes probably, the hashes are typically small anyway and the hash merge is written in C - it would also be difficult/expensive to iterate while filtering out overridden values.\n\nIs there ever a need to get all members (i.e. to see the district members in super types even if they are overridden?)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16463934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/18711582", "body": "The new parameter `dir_string` is not mentioned in the documentation above.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/18711582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/18711593", "body": "I cannot see any tests for a non nil `dir_string`\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/18711593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "joshcooper": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3f151a24e337d104c39a9cbf812821e4ac7915e4", "message": "Merge pull request #6508 from jsane/bug/master/PUP-4963-Puppet_module_build_fails_on_FIPS_enabled_systems\n\n(PUP-4963) Puppet module build fails on FIPS enabled system"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/70e54bbd921a81d0e392e0d0aa646c181c826473", "message": "Merge pull request #6448 from jtappa/PUP-7397-filebucket-use-replace_file-jtappa\n\n(PUP-7397) Atomically update filebucket contents files"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f6ad87a097d8bc84f11f3c64855a4157934a9b0b", "message": "(PUP-8297) Ensure we call SSLSocket#accept once\n\nPreviously, our webrick code set the webrick option SSLStartImmediately to true\nand then called `SSLServer#start_immediately = false`, in that order. Ruby\nversions 2.3.6/2.4.3 and up will skip the call to SSLSocket#accept if the\nSSLStartImmediately option is false. However, older versions will skip the call\nif the SSLServer `@start_immediately` instance variable is false[1].\n\nPrior to commit a358d5ec0, newer ruby versions caused an error because\nSSLSocket#accept was called twice on the same socket, once by webrick and again\nby us.\n\nCommit a358d5ec0 fixed the newer ruby case, but regressed on the older ruby\ncase, since SSLSocket#accept was never being called.\n\nThis commit eliminates the call to `start_immediately = false`, and sets the\nconfiguration option to false. This works as far back as ruby 1.9.3, while\npreserving the intent of the original issue[2].\n\nPaired-with: Jacob Helwig <jacob@puppet.com>\n\n[1] https://github.com/ruby/ruby/commit/2e728d51e70\n[1] https://projects.puppetlabs.com/issues/2637"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/8d66a8bd4776ff2976cf83f3e1e2b8e7a7e895b3", "message": "(maint) Don't stub out setup_logger and setup_ssl methods\n\nStop stubbing setup_logger and setup_ssl in the main example group so that we\nfull exercise the code we're trying to test. This commit moves the cert related\nstubs from one of the nested example groups to the main one."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e451a274aad622f6bbb101b2a3b9a6e45ac20888", "message": "Merge pull request #6526 from gguillotte/DOCUMENT-777\n\n(docs)(DOCUMENT-777)(PUP-8211) Clarify managehome."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/c1186b85ffb09c3ee62d8f077cb086e5a9162aaf", "message": "Merge pull request #6534 from pcarlisle/fix-crontab-spec\n\n(maint) Make crontab provider suitable in specs"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4f160d70023e6310bbecf1e6d327f8f897f4fba4", "message": "Merge pull request #6543 from ploubser/PUP-8227_fix_test\n\n(PUP-8227) Update transaction tests"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5e858b33524fe5c98ab608c1bb5dd40e8d060e6a", "message": "Merge pull request #6537 from pcarlisle/logging-spec-exit\n\n(maint) Don't exit on error in logging specs"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7c766225a17240a39685e0235d8bdbc96bfa6263", "message": "Merge pull request #6541 from puppetlabs/maint/fix_service_enable_linux\n\n(maint) Fix service_enable_linux.rb test to work with ec2 hosts"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4e8d58dd0197ee4f87c5dcb73fd6783fa6aac88c", "message": "Merge pull request #6531 from puppetlabs/maint/skip_ec2_hosts\n\n(maint) Skipping tests for ec2 hosts"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3f0e93165c88552da7917498024794d71eab476f", "message": "Merge pull request #6538 from pcarlisle/openssl-1.1\n\n(maint) Fix tests for OpenSSL 1.1.0"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/a4938e88ffbef2d9c3070eb3f6c427a82eaa8c44", "message": "(packaging) Update puppet version to 4.10.10"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/80e7948c69b6c2145a709c6e7fc95bd7bb772f26", "message": "Merge remote-tracking branch 'upstream/5.3.x'\n\n* upstream/5.3.x: (30 commits)\n  (packaging) Updating the puppet.pot file\n  (PUP-8297) Don't accept already connected socket\n  (PUP-8297) Test block yielded to Webrick.start\n  (packaging) Updating the puppet.pot file\n  (maint) Bump travis CI to 2.2.9 and 2.3.6\n  (PUP-5392) Generated manpages\n  (docs)(PUP-5392) Document managing a master bucket\n  (packaging) Updating the puppet.pot file\n  (PUP-8321) update warn_once() calls with i18n decorations\n  (PUP-8314) add decorations to raise ArgumentError strings part 5\n  (PUP-8314) add decorations to raise ArgumentError strings part 6\n  (PUP-8321) convert warn_once and issue_deprecation_warning to use error_location\n  (packaging) Updating the puppet.pot file\n  (PUP-8314) add decorations to raise ArgumentError strings part 4\n  (packaging) Updating the puppet.pot file\n  (packaging) Updating the puppet.pot file\n  (packaging) Updating the puppet.pot file\n  (PUP-8345) make back slash continuation lines more readable\n  (PUP-8314) add decorations for raise ArgumentError strings part 2\n  (PUP-8314) add decorations for raise ArgumentError strings part 3\n  ..."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/117f299945b33411b422fed0e2c94941f9c73eb0", "message": "(PUP-8096) Redo merge from 5.3.x to master\n\nCommit fbab1ea728 lost the changes for PUP-8096 when merging from 5.3.x\nto master. Redo those changes for master."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3e327a6f073db61fbb7a7c940a22baa64a26d81f", "message": "Merge remote-tracking branch 'upstream/4.10.x' into 5.3.x\n\n* upstream/4.10.x:\n  (PUP-8297) Don't accept already connected socket\n  (PUP-8297) Test block yielded to Webrick.start\n  (maint) Bump travis CI to 2.2.9 and 2.3.6\n  (PUP-5392) Generated manpages\n  (docs)(PUP-5392) Document managing a master bucket"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/231a04816bf2063415b56bd8767fc06aea20b867", "message": "Merge pull request #6519 from scotje/8082_fixup_pmt_search_padding\n\n(PUP-8082) Fix incorrect field padding in colorized PMT search results"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e951eb99c0cae72ea9fb10026ddb31bebd74eadc", "message": "Merge pull request #6415 from ploubser/PUP-8227\n\n(PUP-8227) puppet apply/resource should not overwrite transactionstore"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/ab31e441da88128f3b2b7bd12931efa7ca7622d0", "message": "Merge pull request #6490 from mchllweeks/QENG-5106v2\n\n(maint) Skipping tests for ec2 hosts"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7ed2a29003f2120dc84103d02e3756510f8689fe", "message": "Merge pull request #6521 from gguillotte/PUP-5392-4.10.x\n\n(docs)(PUP-5392) Document managing a master bucket"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/a358d5ec01c6f87b39e5bfbab7a35582624fdbf7", "message": "(PUP-8297) Don't accept already connected socket\n\nWebrick's start method yields an already connected socket, so it is not\nnecessary to call accept on the socket. In ruby versions prior to 2.3.6 and\n2.4.3, the accept call was a noop.\n\nIn 2.3.6 and 2.4.3, it is an error, because ruby those versions use a\nnon-blocking accept to handle clients that make an TCP connection, but\nare slow to negotiate the TLS handshake[1,2]. On these versions, puppet\nmaster would report:\n\n    SSL_accept returned=1 errno=0 state=unknown state: unexpected record\n\nRemove the call to Socket#accept.\n\n[1] https://bugs.ruby-lang.org/issues/14005\n[2] https://github.com/ruby/ruby/commit/2e728d51e70ed3756ad760c687a08b8487b0112f"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/59e0a22b996a090fe511c9cccb92da1cbf65b62e", "message": "(PUP-8297) Test block yielded to Webrick.start\n\nPreviously, we stubbed the `@server.start` method so the block was never\nexercised during testing."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/50727f9e9b8359c3d6892afc4187b80a35d0b9ad", "message": "(maint) Bump travis CI to 2.2.9 and 2.3.6\n\nBump to most recent versions of 2.2 and 2.3. Stay at 2.1.9 since that's\nwhat we still ship with in puppet-agent 1.10.x."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/020601deadff8611a090ba2c051279a5bf9aea7a", "message": "Merge pull request #6455 from binford2k/ticket/PUP-7663/reword_summary\n\n(docs) Reword description to clarify truncated text"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f27a598ec312030029afdea3bbe871cffae3b7e7", "message": "Merge pull request #6506 from Magisus/fast-gettext-bump\n\n(PUP-8249) Remove gettext-setup as a runtime dependency"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/69b02d473e5811de1eadc5eab068692c88828276", "message": "Merge pull request #6500 from joshcooper/pup8285-bucketdir\n\n(PUP-8285) Check if file exists using the configured bucket"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/fdfb2640549fae6b0f40d5eb47e5749bf22c2f99", "message": "Merge pull request #6482 from michaeltlombardi/MAINT/master/travis-update\n\n(MAINT) Remove Travis before_install step"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/335b82e9f180da4cdf54c330fc7f96b346412e2f", "message": "(PUP-8285) Check if file exists using the configured bucket\n\nPreviously, if you used a non-default bucket directory, the backup\ncommand would only backup the file if it didn't exist in the default\nbucket. This was a result of not passing the `bucket_path` request\noption in the call to `Puppet::FileBucket::File.indirection.head`.\n\nThe same change is not need when calling `save` because in that case we\nhave an instance of Puppet::FileBucket::File that we want to save, and\nit is already configured with the correct bucket_path."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5d82a1cc34c495837cfb362ad90e1d3ccbc47427", "message": "Merge pull request #6503 from kris-bosland/fix/5.3.x/maint-1\n\n(maint) Remove duplicate test for transaction_uuid."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/80aa5bbb43d054da82d7acf4015cff08f3f4bdaa", "message": "Merge pull request #6496 from branan/remove_json_bin_test\n\n(maint) Remove unnecessary binary json test"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/d2aef32d05a0bb1be6e78001960f0160c0e00406", "message": "Merge remote-tracking branch 'upstream/4.10.x' into 5.3.x\n\n* upstream/4.10.x:\n  (pup-8288) Report exceptions during transactions as failed status.\n  (packaging) Updating the puppet.pot file\n  (PUP-7861) Update git mirror instructions\n\nConflicts:\n\tlib/puppet/application/inspect.rb\n\tlib/puppet/transaction/report.rb\n\tlocales/puppet.pot\n\tspec/unit/application/inspect_spec.rb\n\nInspect application was deleted in 5.x."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b7c7b08413a69fb3d6b8000e4c74ea00270dc26f", "message": "Merge pull request #6445 from jsane/task/master/FIPS-changes\n\nTask/master/fips changes"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f02ce862bbb9380fe3307d9eb33d04fb0598b262", "message": "Merge pull request #6457 from melissa/ticket/4.10.x/PUP-7861-git-mirror-instructions\n\n(PUP-7861) Update git mirror instructions"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f0f761d482598fc6973f61eb24ae8e9db8fff3ad", "message": "Merge pull request #6487 from gguillotte/PUP-8292\n\n(docs)(PUP-8292) Fix a Markdown code fence."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/deac457fe305b487614eb280fe9e67d518d13d97", "message": "(PUP-7482) Eliminate redundant HEAD request\n\nPreviously, request_with_redirects would make two HEAD requests when\npassed :head as the method, which happens when retrieving file metadata\nfor http-based file sources.\n\nIf the first HEAD request succeeds and isn't a redirect, then just\nreturn that response."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/a5f9d59943620c1ea2f20592a40003e5186a1281", "message": "(PUP-7482) Accept all content types with http file sources\n\nIn commit 89ea46b610, we modified puppet to use proper mime types in the\nHTTP Accept header instead of the Puppet::Network::Format name. However,\nwe missed the case when using a file resource with http/https source\nparameter, because the corresponding file_metadata and file_content\ntermini create Net::HTTP connections directly.\n\nThis commit makes puppet send \"Accept: */*\" for http/https file sources.\nThis is preferred over application/octet-stream, because some webservers\nlike Apache and IIS will respond with HTTP 406 if we request\noctet-stream, but the file extension maps to some other well-known MIME\ntype, e.g. image/gif.\n\nWe also send \"Accept-Encoding\" so the server can send us compressed\ncontent, and we set \"User-Agent\" based on the puppet version, like we do\nfor other HTTP connections.\n\nThis commit changes behavior in two ways. First, we send the above\nheaders when making the HEAD request prior to sending the \"real\"\nrequest. And we send the above headers when a block is not given."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6bca5385a4a997f3fcf1f3b04e4bf75a2edb3234", "message": "Merge pull request #6442 from gguillotte/PUP-5206\n\n(docs)(PUP-5206) Note local filebucket default."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/d64018c78f733d8a94d45e32b105e7b2cf2b632b", "message": "Merge remote-tracking branch 'upstream/5.3.x'\n\n* upstream/5.3.x:\n  (maint) Remove trailing whitespace\n  (maint) Remove AppVeyor OpenSSL update\n  (packaging) Updating the puppet.pot file\n  (PUP-8131) update the calls to benchmark to pass in complete sentences\n  (PUP-7221) Type schedule should accept integers 0-6\n  (PUP-8177) prevent agent from requesting locales on older server\n  (maint) Skipping test if facter finds this is and ec2 host We were skipping tests when the hypervisor was ec2. I have added support in QENG-5106 to use abs as a hypervisor. This change will now skip tests for any ec2 host whether created with the ec2 hypervisor or abs hypervisor.\n  (maint) Adding method to skip tests for ec2 hosts We were skipping tests when the hypervisor was ec2. I have added support in QENG-5106 to use abs as a hypervisor. This change will now skip tests for any ec2 host whether created with the ec2 hypervisor or abs hypervisor."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/cebe6dad8aaa1e7bc689f9db0647174f48ea710b", "message": "(maint) Remove trailing whitespace"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/dc4560f80edbc1a42a163c726d1b85bf3b9d0a38", "message": "Merge pull request #6460 from Iristyle/maint-remove-AppVeyor-Ruby-2.4-openssl-upgrade\n\n(maint) Remove AppVeyor OpenSSL update"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/0b89a0744f22bc9014c2f86731b8aa796803cc5f", "message": "(PUP-8244) Enable Lint/UselessAssignment rubocop\n\nEnable rubocop check and update remaining issues."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/a147d08b0a861e2e8ccd136f8e90dda6b1ef861e", "message": "(PUP-8244) Removed unused code\n\nRemove code related to Lint/UselessAssignments."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5290198062f8b19002dcae249c1ff855c73ef16a", "message": "(PUP-8244) Call the accessor instead of assigning to local variable\n\nPreviously we were trying to call accessor methods, but ruby will\ninstead create a local variable that shadows the setter[1]:\n\n    When using method assignment you must always have a receiver. If you do\n    not have a receiver Ruby assumes you are assigning to a local variable.\n\nPuppet::Resource removes the call because the environment attribute is\ninvoked in the attributes.each block below. Note in the case that an\nenvironment attribute doesn't exist, we never call\n`send('environment=')`. However that is consistent behavior with what\nhappened previously, since `environment = nil` was a noop.\n\nPuppet::Resource::Status removes the line, because the `failed` instance\nvariable is already set when adding the event with a `failure` status.\n\n[1] https://docs.ruby-lang.org/en/2.0.0/syntax/assignment_rdoc.html"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/957f21140066fa198b4017655c506b30915792f9", "message": "(PUP-8244) Preserve current mode when reaching end of input\n\nRemove the line that tried to switch the mode when reaching end of\ninput. The line didn't do anything because it was setting the value of a\nlocal variable instead of calling the accessor."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f2ae1b040411585b2d0161fda1abd44daf624623", "message": "(PUP-8244) Avoid unnecessary assignment\n\nWhen using reduce/inject, the result of the block \"becomes the new value for\nmemo\", so using += is redundant.\n\nSimilarly, avoid using +=, /=, |=, &&= when it's not needed."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/d055dac41a372505c91324e60e79b644641b8506", "message": "(PUP-8244) Ignore unused variables\n\nReplace unused variables with underscore or prefix with underscore."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/31abf6f39bacb7cc6a97fefdeed8eeeb2e483bdf", "message": "(PUP-8244) Remove unused exception object\n\nRemove unused exception object resulting from Lint/UselessAssignment cop."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/39aaf0dee52d560ae807321f40cfc62973e49a5e", "message": "Merge pull request #6402 from jtappa/PUP-7221-type-sched-accept-integers-jtappa\n\n(PUP-7221) Type schedule should accept integers for weekdays"}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6551", "title": "(PUP-7349) Generated tidy resources should have the same noop-ness", "body": "If tidy resource's noop metaparameter is true or false, but not nil,\r\nthen generate file resources with the same noop-ness. If the noop\r\nmetaparameter is not set, but the Puppet noop setting is, then just\r\nlet puppet handle it.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6550", "title": "(PUP-8267) Leverage beaker subcommands when running acceptance", "body": "PR #6477 needs to be merged first.\r\n\r\nLeverages beaker project options (.beaker.yml) and beaker subcommands so that if you execute a test run, e.g. `bundle exec rake ci:test:aio ...`, but a test fails, you can easily re-run the failing test, as many times as you need, `bundle exec beaker exec tests/path/to/test.rb`.\r\n\r\nThe `ci:test:quick` task does not work correctly due to BKR-1393, but it is not currently used in CI. The `ci:test:git` task doesn't completely work due ruby platform specific issues that will be resolved later when we move to the `puppet-runtime`", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1934485", "body": "Nick said adding win32-dir gem to the list of PREREQS is complicated because we only want to load win32-dir on windows, but we have to load facter to find that out, and facter is one of the PREREQS we are trying to verify.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1934485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2056500", "body": "I've made additional changes and repushed. I moved the Windows Error into its own class, created a puppet/util/windows directory hold the error and the security classes, and eliminated code duplication when getting/setting owner and group sids. Also eliminated the use of the win32/file gem as it caused more problems than it solved.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2056500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2082748", "body": "I thought of a better way to conditionalize syslog. I'm closing this pull request and will resubmit a better version.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2082748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2219741", "body": "It looks like this pull request contains a commit for a different issue (9459). Can you repush just the one commit (1551ecf)?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2219741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2231360", "body": "FWIW, I ran rake unit spec after each commit (as part of rebase interactive) to ensure there were no inter-commit dependencies.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2231360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2231691", "body": "I've created a new pull request that adds back the rescue nil block. https://github.com/puppetlabs/puppet/pull/141 That code is necessary because the user's groups method can be invoked in order to determine if the user currently belongs to any groups, and depending on the membership property, whether the user should be removed from those groups. We also figured out the failure was due to some old code in the site ruby directory. \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2231691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2240939", "body": "This work has been been superseded by https://github.com/puppetlabs/puppet/pull/140\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2240939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2291299", "body": "Btw, Jacob had to implement something similar for the task scheduler on Windows. It's not committed yet, but you can see his pull request to see if it will produce the results you are looking for.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2291299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2316596", "body": "Superceded by https://github.com/puppetlabs/puppet/pull/158\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2316596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2592341", "body": "Hi Rob,\n\nThanks for your pull request. Just yesterday we merged this into 2.7.x[1], and it should be merged up to master within the week.\n\nJosh\n\n[1] https://github.com/puppetlabs/puppet/pull/172\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2592341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2941321", "body": "Hi Cody, Although the report will be sent via HTTPS, the agent will not verify the server's SSL cert and so can be spoofed. I think we want to get an HTTP connection from Puppet::Network::HttpPool.http_instance(host, port), which will setup the trusted certs.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2941321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2951288", "body": "Hi Luke,\n\nIf all of your concerns have been addressed by https://github.com/nicklewis/puppet/tree/ticket/2.7.x/6907, can we close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2951288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3037558", "body": "Hi Ricky, Could you update the patch with that change? Also any chance you could write some tests for this? Thanks\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3037558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3040928", "body": "Jacob left some comments (http://projects.puppetlabs.com/issues/2518) about this commit\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3040928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3050013", "body": "This was already merged in 2.7.x in https://github.com/puppetlabs/puppet/commit/5210f8d7748158d47bb83aaeb658fa621587e111 and we are not planning any additional 2.6 releases unless there is a significant security issue.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3050013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3052032", "body": "I have some concerns about this change. See https://projects.puppetlabs.com/issues/8465#note-7\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3052032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3052158", "body": "Hi Kelsey, based on your comment http://projects.puppetlabs.com/issues/9167#note-27, it looks like this issue will need to be fixed differently. Please re-open the request when its ready to be merged.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3052158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3052635", "body": "Per https://projects.puppetlabs.com/issues/6663#note-11 I'm am closing this as code insufficient\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3052635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3116937", "body": "So the metrics target is not added because there's a problem with my metric_fu gem. Many people are having similar problems: https://github.com/jscruggs/metric_fu/issues/73. I couldn't get metric_fu 2.1 to work, but using `gem install metric_fu -v 1.5.1` installed successfully.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3116937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3117221", "body": "So now rcov is blowing up when running our tests. It's due to metric_fu calling `String#blank?` which is a rails extension. See below for more details. \n\nBut more generally, is there a way to proactively check for required dependencies rather than fail half way? For example, I could see someone wanting to generate automated metrics in CI, but failing because not all jenkins nodes and configurations have the same gems, e.g. noFeatures vs allFeatures. At a minimum I think we need a list of gem required to run the metrics task.\n\n<pre>\n$ gem list\n\n*** LOCAL GEMS ***\n\nactivesupport (3.1.3)\narrayfields (4.7.4)\nbundler (1.0.21)\nchronic (0.6.6)\nchurn (0.0.15)\ncolored (1.2)\ndiff-lcs (1.1.3)\nerubis (2.7.0)\nfattr (2.2.0)\nflay (1.4.3)\nflog (2.5.3)\ngit (1.2.5)\nhirb (0.5.0)\ni18n (0.6.0)\njeweler (1.6.4)\njson (1.6.1)\njson_pure (1.6.3)\nmain (4.8.0)\nmap (4.3.0)\nmetaclass (0.0.1)\nmetric_fu (1.5.1)\nmocha (0.10.0)\nmulti_json (1.0.4)\nprogressbar (0.9.2)\nrack (1.3.5)\nrails_best_practices (1.6.0)\nrake (0.9.2.2, 0.9.1, 0.8.7)\nrcov (0.9.11)\nreek (1.2.8)\nroodi (2.1.0)\nrspec (2.7.0)\nrspec-core (2.7.1)\nrspec-expectations (2.7.0)\nrspec-mocks (2.7.0)\nruby2ruby (1.3.1)\nruby_parser (2.3.1)\nSaikuro (1.1.0)\nsexp_processor (3.0.7)\n</pre>\n\n\n<pre>\n$ rake metrics:all --trace\n...\n** Running the specs/tests in the [test] environment\n/Users/josh/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/rdoc/dot/dot.rb:28: warning: already initialized constant NODE_OPTS\n/Users/josh/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/rdoc/dot/dot.rb:46: warning: already initialized constant EDGE_OPTS\n/Users/josh/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/rdoc/dot/dot.rb:76: warning: already initialized constant GRAPH_OPTS\nrake aborted!\nundefined method `blank?' for \"   require 'puppet/run'\":String\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/generators/rcov.rb:68:in `assemble_files'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/generators/rcov.rb:68:in `reject!'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/generators/rcov.rb:68:in `assemble_files'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/generators/rcov.rb:60:in `each_pair'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/generators/rcov.rb:60:in `assemble_files'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/generators/rcov.rb:41:in `analyze'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/base/generator.rb:126:in `send'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/base/generator.rb:126:in `generate_report'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/base/generator.rb:124:in `each'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/base/generator.rb:124:in `generate_report'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/base/generator.rb:52:in `generate_report'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/base/report.rb:54:in `add'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/../tasks/metric_fu.rake:6\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/../tasks/metric_fu.rake:6:in `each'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@metrics/gems/metric_fu-1.5.1/lib/../tasks/metric_fu.rake:6\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/task.rb:205:in `call'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/task.rb:205:in `execute'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/task.rb:200:in `each'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/task.rb:200:in `execute'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/task.rb:158:in `invoke_with_call_chain'\n/Users/josh/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/monitor.rb:242:in `synchronize'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/task.rb:151:in `invoke_with_call_chain'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/task.rb:144:in `invoke'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/application.rb:116:in `invoke_task'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/application.rb:94:in `top_level'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/application.rb:94:in `each'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/application.rb:94:in `top_level'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/application.rb:133:in `standard_exception_handling'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/application.rb:88:in `top_level'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/application.rb:66:in `run'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/application.rb:133:in `standard_exception_handling'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/lib/rake/application.rb:63:in `run'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/gems/rake-0.9.2.2/bin/rake:33\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/bin/rake:19:in `load'\n/Users/josh/.rvm/gems/ruby-1.8.7-p334@global/bin/rake:19\n</pre>\n\n\nThere are 4 files that contain require 'puppet/run', but I'm not sure from the output, which one rcov is having trouble with.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3117221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3119790", "body": "OK, so the missing `String#blank?` method is due to https://github.com/jscruggs/metric_fu/issues/28 Worked around that by uninstalling activesupport 3.1.3 and installing 2.0.0. Was able to run successfully, but one problem is that it creates a temporary directory in the workspace containing the metric_fu output:\n\n<pre>\n$ git status\n# On branch master\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#   tmp/\n</pre>\n\n\nI think the metrics.rake file should set metric_fu's `config.base_directory` based on the users' current TMPDIR\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3119790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3125400", "body": "Probably need to set `config.data_directory` also. See https://github.com/jscruggs/metric_fu/blob/master/lib/base/configuration.rb#L103\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3125400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3125737", "body": "One thing that concerns me is that each face may need to replicate the logic below (which requires specifying the face specific section name to use and how to merge the properties in case of conflict).\n\n<pre>\n@user     = options[:username] || Puppet.settings[:dashboard_face_username]\n</pre>\n\n\nThis could cause problems if later the face is renamed, but the hard-coded section names are not. But more generally, it seems like something every face may want to do, but would have to replicate that logic.\n\nAnother approach might be to have lib/puppet/application/face_base.rb create a settings hash, which is a merge of `Puppet.settings` with its face specific settings (based on the `face.name`), where the latter takes precedence. The settings hash, e.g. `@face.settings[:username]`, would then be available to each face, while the logic for merging the settings and deciding which section to use for that face is in one place.\n\nOne problem I see is I'm not sure how the face would handle setting properties. Should a face be able to set properties that aren't in its category (either global or for a different face)?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3125737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3126470", "body": "In the case of #5794, it was never setting the owner/group, and it reapplied the same mode that it did previously, so that fix seems fine.\n\nBut this pull request changes the behavior non-trivially. It's probably the-right-thing-to-do, but it would really be helpful to call this out in the commit message, e.g. changing the mode from 755 to 750, otherwise, it's not clear that the change is intentional. Also, because of the security implications of not setting owner/group, it would also be helpful to explain why weren't setting them to the puppet user (moreso for group, because owner should be set based on the current user, which should be puppet I assume).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3126470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2304790", "body": "rismoney can you change that to:\n\n<pre>\nerr = Puppet::Util::Windows::Error.new(\"Failed to get volume information\")\nputs \"LastError=#{err.code}\"\nraise err\n</pre>\n\n\nIt may be that that particular last error code is something we can ignore...\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2304790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371393", "body": "should that be `v.respond_to?(:encode)`?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6405940", "body": "shorten to `read_int32 != 0`?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6405940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8231899", "body": "This may fail depending on the umask of the process that puppet is running as... we should probably make this less fragile.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8231899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8607746", "body": "Thanks @jeffmccune I think the commit is just shining light on the fact that puppet should not be calling `Puppet::Module.new` on that file. For starters, it seems like we should only be calling `Puppet::Module.new` on directories. Can we also restrict it to a specific regex like we do in other parts of the PMT? /cc @hlindberg @jpartlow @hunner @andersonmills \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8607746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9160558", "body": "@rlinehan @cprice404 do you know why this test and the corresponding `Request#to_s` method was removed?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9160558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9165431", "body": "@cprice404 it looks like it was originally added in bd8d09747fd6c0dce89c17da41eb67ad92823cf7, and the error message has been moved around to https://github.com/puppetlabs/puppet/blob/master/lib/puppet/indirector/indirection.rb#L297. Does it mean the authorization message, where we interpolate the `\"... on #{request}\"`, will be less meaningful now?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9165431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9210655", "body": "extra white space\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9210655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744411", "body": "drop this commit\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744415", "body": "redo this commit based on new codedir\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744417", "body": "drop this commit, stays under $confdir/ssl\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744423", "body": "keep this\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744426", "body": "keep this, possibly squash with other commits later\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744433", "body": "redo, only need codedir, and possibly var, run, log dirs\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744439", "body": "redo this commit\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744451", "body": "redo, delete symlinks, squash other commits that change main->master and update locations\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744455", "body": "keep\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744528", "body": "/opt/puppetlabs/puppet/bin/\n  ruby\n  puppet\n  openssl\n  facter\n\nsymlinks of puppet, hiera, facter, etc to  /opt/puppetlabs/bin, but no ruby\n\nSo tests should be using puppetbindir. Host definitions should be using \"/opt/puppetlabs/agent/bin\". Delete systembindir overrides in host definitions.\n\nLater, coordinate changing puppetbindir from \"/opt/puppetlabs/agent/bin\" to \"/opt/puppetlabs/puppet/bin\", and update host definitions.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744558", "body": "ssldir is staying as $confdir/ssl, this can be dropped\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744561", "body": "delete\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744572", "body": "keep as is for now\n\nin future will need to change to /opt/puppetlabs/puppet/bin\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744599", "body": "needs to be `/var/log/puppetlabs/puppet.log`\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744606", "body": "squash\n\nlogdir should be `/var/log/puppetlabs`\nrundir is good\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744629", "body": "squash with  installs_utils commit c11c404f25d958a89de1bfe64472439bf73b913a\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744633", "body": "squash with previous commit\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744638", "body": "squash with previous commit\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744642", "body": "keep\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744648", "body": "fix this up with later commits\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744669", "body": "keep but reword\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744676", "body": "keep\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744679", "body": "keep (delete)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744688", "body": "this shouldn't be necessary since tests should be using puppetbindir\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744696", "body": "add puppetbindir to \"/opt/puppetlabs/agent/bin\" for now\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744707", "body": "split out 010_Install and squash with change to 0.3.1\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744709", "body": "squash\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744714", "body": "squash\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744723", "body": "squash with beaker overrides 4da44d3af58494e06465a5f4e19d87b6b436347d\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744730", "body": "keep\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744745", "body": "squash rhel7 change with 4da44d3af58494e06465a5f4e19d87b6b436347d\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744748", "body": "squashing\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744750", "body": "squashing\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744754", "body": "keep\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744758", "body": "squash\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744766", "body": "keep\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9744766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10568774", "body": "should we warn if there is an execution failure?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10568774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10568794", "body": "does this handle `:ensure => absent`?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10568794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071420", "body": "bye bug\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071454", "body": "Can property be nil in the case we're only ensuring the file exists in https://github.com/puppetlabs/puppet/commit/92148e69e7f47a4f8abeeb0df0a3798aa6ec384f#diff-f745cd849b822269ee229b6d6cd20bf4R70?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071479", "body": "Yeah, we should send that in the metadata, so the agent could shortcircuit `insync?` if the sizes don't match. Could you file a ticket on that?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071683", "body": "where is diff command coming from?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071851", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/22458938", "body": "Could we replace `Puppet::Util.uri_encode` with the literal string it returns? Otherwise, if our encode/decode helpers are both modified later, they may both do the wrong thing, but they can cancel each other out. Same with the test below.", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/22458938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158701", "body": "Ah, yes. I had originally added this when trying to fix this bug a different way. But after changing the implementation I forgot to remove the test. I'll fix that. \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/222598", "body": "After more research, both cygwin and vim strictly look at the FILE_PERSISTENT_ACLS flag when determining whether to get/set ACLs, ignoring the fstype. So while it's possible FILE_PERSISTENT_ACLS could be set while fstype is not NTFS, just checking the flag seems to be the right thing to do.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/222598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/361658", "body": "Can we just use `Resolv::AddressRegex` instead? Not sure if that works in 1.8.5\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/361658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378765", "body": "Will do\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378779", "body": "I tried to stub it, but then ran into the same problem I had when I tried to stub it for the `:color` option. Basically the defaults get evaluated before I have a chance to stub the feature....\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378785", "body": "I tried setting `Puppet[:diff] = nil` in my test, and it was silently discarded. I assumed this was intentional (the lack of support for setting nil values), so I didn't check for `nil` in the diff method. But I agree, better to check for nil and non-empty. Will fix that.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378796", "body": "I'm going to defer this to Nick F, as there are other windows-specific settings that need explaining, e.g. ';' path separators. I'll add a note to the docs bug so we don't forget.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "branan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/2edca5f2a043fbf7c505da6dd3f8de4b54d640b2", "message": "Merge remote-tracking branch 'origin/5.3.x'"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4f224e8b849ecd569ebcf11d81f1fdb292b36e95", "message": "Merge remote-tracking branch 'origin/4.10.x' into 5.3.x"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/ab35a0c89226476e6bfa7698c096fcdeb8af1f8f", "message": "Merge pull request #6548 from joshcooper/ticket/4.10.x/webrick-part-deux\n\n(PUP-8297) Ensure we call SSLSocket#accept once"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5c88b5440f8c52fa3672ca5f6a335228530bf1f4", "message": "Merge pull request #6523 from joshcooper/PUP-8297-webrick-ruby\n\n(PUP-8297) Don't accept already connected socket"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e462d23a95bbea8e1405bc41551e513a4910344b", "message": "(maint) Remove unnecessary binary json test\n\nThis test was attempting to verify that the json terminus would error\nin the face of files on disk with binary names. It doesn't actually do\nthat, and is also broken on High Sierra with APFS\n\nSince this is not a particular valuable thing to test, instead of\nattempting to repair the test it is simply being removed."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/90280b6ae01abce3f3aec804279344679197721d", "message": "Merge pull request #6495 from joshcooper/4.10.x_to_5.3.x\n\nMerge 4.10.x to 5.3.x"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4129b5b4add05c651f60ea9edf188054e416fe3f", "message": "Merge pull request #6488 from ScottGarman/mergeup-4.10.x-5.3.x\n\nMergeup 4.10.x -> 5.3.x"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/a555d1564d92036ff42dabe260fde13e5e087a4b", "message": "Merge pull request #6454 from ScottGarman/smf-absent-revert\n\n(PUP-8262) Revert changes which made non-existent SMF services return :absent instead of :stopped"}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6485", "title": "(maint) Allow numeric hostnames in hiera_in_templates test", "body": "This test creates a hash of hostname -> directory, and stores it in\r\nYAML for hiera to query. If the hostname happens to be purely numeric,\r\nthe key in the hash will be a number, rather than a string. Facter\r\nalways returns the `hostname` fact as a string. This causes the hash\r\nlookup in the puppet code to fail, and the manifest to fail to\r\ncompile.\r\n\r\nThe fix is to prepend a bit of non-numeric junk to the hostname, so\r\nthat the key in hiera is always string.\r\n  ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10569007", "body": "@joshcooper the package parent provider handles conversion of a `nil` response here to an `ensure => absent`: https://github.com/puppetlabs/puppet/blob/master/lib/puppet/provider/package.rb#L19\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10569007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10569023", "body": "![](https://c2.staticflickr.com/4/3281/2560613949_258d66e81f.jpg)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10569023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jtappa": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/c8213d117a17a2482d2c0f0b2813b256b8c366f3", "message": "Merge pull request #6522 from ericldelaney/task/5.3.x/PUP-8321/update_deprecation_warning_translations\n\n(PUP-8321) add translations for deprecation_warning messages"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/0a70205a2c9e5c3854a2d961f4547f4f71f9ad08", "message": "Merge pull request #6530 from ericldelaney/task/5.3.x/PUP-8347/use_error_location_to_report_where_in_a_file_part_4\n\n(PUP-8347) usr error_location for auth config parsing"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/61a9a1c2c14ab1f0917276a8f3d1e0674859d491", "message": "Merge pull request #6535 from ericldelaney/task/5.3.x/PUP-8347/use_error_location_to_report_where_in_a_file_part_5\n\n(PUP-8347) use error_location for network device config file"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/97681bfab11cff145cf675d0b829f8f228e2303e", "message": "Merge pull request #6544 from melissa/maint/5.3.x/merge-4.10.x\n\nMaint/5.3.x/merge 4.10.x"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/8430ac9b47cbe7b32557dc9e48143f75088725ed", "message": "Merge pull request #6524 from ericldelaney/task/5.3.x/PUP-8340/catalog_alias_to_use_error_location\n\n(PUP-8340) convert alias to use error_location"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/c922deeed0ab2132b2395d34c96c934ae9db7e66", "message": "Merge pull request #6514 from ericldelaney/task/5.3.x/PUP-8321/fix_warn_once_to_use_error_location_method\n\n(PUP-8321) convert warn_once and issue_deprecation_warning to use err\u2026"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/899cd818f4615849e77824e25a4d8ba227259d2d", "message": "(PUP-5392) Generated manpages"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/2de165827e11e429235cf4f5b4785ad7049a54ff", "message": "Merge pull request #6515 from ehom/patch-1\n\n(docs) update outdated links on README.md"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f6206934e9c3279aca8ef7a77cffa880a1b798fc", "message": "Merge pull request #6505 from ericldelaney/task/5.3.x/PUP-8314/raise_ArgumentError_translations_part_2\n\n(PUP-8314) add decorations for raise ArgumentError strings part 2"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/2c4c58fcd18b25b2678a670fb5be7f51618ccd65", "message": "(PUP-7397) Use group metadata with hash to only skip specific tests"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/8ae474b1291566335d9c6f1ef6600399ac368a48", "message": "(PUP-7397) Atomically update filebucket contents files\n\nUsing replace_file instead of Puppet::FileSystem::open ensures we'll never have\na partially written content in a contents file.\n\nreplace_file more properly handles permissions on windows, which means we\ncreate contents files that are actually read-only. As such, we cannot touch\nthem to update the mtime if someone uploads the same content again.\n\nMarked tests pending wherever possible for LFN issue on windows, but did have to mark one test as 'skip'. Until PUP-8257 is resolved."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6507fb866081f8a1789e25b380adb16dd2f8ade7", "message": "(PUP-7394) Change behavior of replace_file to change file mode after yield\n\nPreviously, when replacing an existing file, replace_file would set the temp\nfile's permissions to be that of the existing file or the provided default\npermissions before yielding to the block. This was done originally because the\ntemp file was created with insecure file permissions. This is no longer\nnecessary, because Puppet::FileSystem::Uniquefile creates temporary files with\nmode 0600.\n\nThe previous behavior of using the existing file's mode before yielding to the\nblock meant that we couldn't write to the temporary file if the file we were\ntrying to replace was read-only. By setting the final permissions of the file\nafter yielding to the block we no longer run into this issue."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/afca7f10425dfa3b3d237d3573f32710ea290f26", "message": "Merge pull request #6504 from ericldelaney/task/5.3.x/PUP-8314/raise_ArgumentError_translations_part_1\n\n(PUP-8314) add translations to ArgumentError raises part 1"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e58f47581365541db09318aff697d93397ece31c", "message": "Merge pull request #6484 from kris-bosland/fix/4.10.x/pup-8288\n\n(PUP-8288) Report exceptions during transactions as failed status."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/cec280de3e270f05eeccd72120fecd2e83a8511a", "message": "Merge pull request #6458 from kris-bosland/maint-PUP-5206-spec-test-fix\n\n(maint)(PUP-5206) Update spec test so it fails on code before this update."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/cbbe4eacb7d7ef43826a739c324329b7856a5ae3", "message": "(PUP-7221) Type schedule should accept integers 0-6\n\n(PUP-7221) Type schedule should accept ints as weekdays.\n\n(PUP-7221)Fix issue from stashed branch\n\n(PUP-7221) Fix spec test for int > 6\n\n(PUP-7221) Make the unless an if/else\n\n(PUP-7221) Make things more correct\n\nAddress more feedback from Josh\n\nEdit spec message."}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6555", "title": "(PUP-8361) Add 'ronn' to the development/test group in the Gemfile.", "body": "`ronn` is used for generating manpages.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "melissa": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/378eb76d603685e870fd167bde3feddd4b50eecc", "message": "Merge pull request #6529 from ericldelaney/task/5.3.x/PUP-8347/use_error_location_to_report_where_in_a_file_part_3\n\n(PUP-8347) add error_location to config file errors."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3c09d97c69b965ea988bb45a89f8b2f2745e59bf", "message": "Merge pull request #6528 from ericldelaney/task/5.3.x/PUP-8347/use_error_location_to_report_where_in_a_file_part_2\n\n(PUP-8347) use error_location in file_server config parsing"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/41c3b23553f353dc26f82c1e8fe8c5daea779444", "message": "Merge pull request #6540 from ericldelaney/task/5.3.x/PUP-8347/use_error_location_to_report_where_in_a_file_part_6\n\n(PUP-8347) use error_location in Puppet::Pops::Issues"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6edca29b9dacb688e9c7f2723f35ee4a4748af20", "message": "Merge remote-tracking branch 'upstream/4.10.x' into 5.3.x"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/c40d1f25e0c6f708774f9f708e8349bd56093bc9", "message": "Merge pull request #6433 from suckatrash/PUP-7968\n\n(PUP-7968) [#puppethack] Add a default to present for the ensure param"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3c0841f4316505e0fa9d6a2683774f7b04ecff9e", "message": "Merge pull request #6517 from ericldelaney/task/5.3.x/PUP-8314/raise_ArgumentError_translations_part_5\n\n(PUP-8314) add decorations to raise ArgumentError strings part 5"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f1946f66028cf01c183f14b3bbf0497699efaa53", "message": "Merge pull request #6518 from ericldelaney/task/5.3.x/PUP-8314/raise_ArgumentError_translations_part_6\n\n(PUP-8314) add decorations to raise ArgumentError strings part 6"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e9d8a4bb9248c3916c9b249c6ec364edb6bf1ba3", "message": "Merge pull request #6486 from joshcooper/ticket/4.10.x/PUP-7482-binary-content-type\n\n(PUP-7482) Accept all content types with http file sources"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/c90b9b048122b72f7095e47dcacac1dd287068b0", "message": "Merge pull request #6497 from ericldelaney/task/5.3.x/PUP-8315/add_translation_to_Puppet_info_calls\n\n(PUP-8315) add translations decorations to Puppet.info calls"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/cfbc07cd19292cf4f17e86b486c298476adca264", "message": "Merge pull request #6493 from ericldelaney/task/5.3.x/PUP-8313/raise_DevError_translations_part_3\n\n(PUP-8313) raise DevError decorate strings part 3"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6b98e25aeabaffb31210c98217b9d575368671ca", "message": "Merge pull request #6452 from ericldelaney/task/5.3.x/PUP-8254/translate_sentences_instead_of_paragraphs\n\n(PUP-8254) split paragraphs into sentences for translation"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/fa13f1a10b718105e98ad2fe523d5bf0fc688e73", "message": "Merge pull request #6453 from ericldelaney/task/5.3.x/PUP-8131/log_complete_sentence_from_util_benchmark\n\n(PUP-8131) update the calls to benchmark to pass in complete sentences"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/41f00d122cd2c7ab2917ab69976ee5bfb2456abb", "message": "Merge pull request #6432 from theshanx/blah\n\n(DOCS) Update error message [#puppethack]"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/d4d2b653ad3c9848f92ba02313e574e910d13a1c", "message": "(PUP-7861) Update git mirror instructions\n\nPrior to this commit, we were referencing an incorrect environment\nvariable to specify if the user wanted to hit a specific git mirror. In\nBeaker, the environment variable we look for is either SERVER or\nPROJECT_NAME_SERVER (i.e., PUPPET_SERVER). This commit updates\nacceptance/README.md to accurately reflect this."}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6477", "title": "(PUP-8268) Use new install methods", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericldelaney": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/d012b2ea9b4d39d61d7b6510526914d3183f858c", "message": "(PUP-8347) usr error_location for auth config parsing\n\nUse the error_location() method when parsing network auth config files\nChanged invalid entry error message"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/0753bfeae7259876c98a5ac0468a8c275962c9dc", "message": "(PUP-8347) use error_location for file_server config\n\nUse error_location() in the file_server config file parser code\nUpdated invalid entry string"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/703a099700635eed9cce962c3a84b63eb1b4bb63", "message": "(PUP-8347) use error_location for network device config file\n\nUse the error_location() to tell the error location when processing\nthe network device config file\nRefactored the code to be more understandable\nChanged invalid entry error string"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/c11df2c9272b35fe9e87b199e132be37bb3e4fa5", "message": "(PUP-8347) add error_location to config file errors."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/14b77573d2cbb853caccf602202cb521de7ac6de", "message": "(PUP-8321) add translations for deprecation_warning messages"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/424ecff2234656a134bd81db72d42188a2e34dd8", "message": "(PUP-8347) use error_location in Puppet::Pops::Issues"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/99d11445384db2f66536b1a8d4220ce1c7435f7c", "message": "(PUP-8340) convert alias to use error_location\n\nConvert the Catalog.alias() method to use the error_location()\nfor displaying the where the problem is"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/921035b4e3687fa1ae790570d3c79acc004c4ea9", "message": "(PUP-8321) update warn_once() calls with i18n decorations"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/a88793561e69ee14fadf5f9bcbe40248dc4fabdf", "message": "(PUP-8314) add decorations to raise ArgumentError strings part 5"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b7ef36c3b3d4ebe661296ca2f2b7500e206cbd66", "message": "(PUP-8314) add decorations to raise ArgumentError strings part 6"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/fa0d28b35bce89aafee0c667a9b2ec7b2663abac", "message": "(PUP-8321) convert warn_once and issue_deprecation_warning to use error_location\n\nConverted the warn_once() and issue_deprecation_warning() to use the error_location\nmethod to print the location of a failure"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/9b5e4a24f10894511320d44fa09cdc78fa5e1a7a", "message": "(PUP-8314) add decorations to raise ArgumentError strings part 4"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/26c9127a8482dcc2295aee48598343f295dc4730", "message": "(PUP-8345) make back slash continuation lines more readable\n\nSome of the code used back slashes to continue the code on the next line in\nways that made the code less readable.\nAlso addressed i18n string decorations while I was there"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/336e808a6dec8bb1a445b0c858a938a8483192f5", "message": "(PUP-8314) add decorations for raise ArgumentError strings part 2"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/2eb1c78ba4f12fc8d29a490cee3c61947e8f2ea8", "message": "(PUP-8314) add decorations for raise ArgumentError strings part 3"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3bf44ff61fd2d91f38e4326d5d3a2947ebcd1fdc", "message": "(PUP-8312) add translations for err and warning calls\n\nAdded decorations for translation of Puppet.err and Puppet.warning calls\nAdded decorations for 'raise InterpolationError' strings"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7ae6e2c8bbcc5eda0566ba88ebfa7cdfd33db3f1", "message": "(PUP-8314) add translations to ArgumentError raises part 1"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e39467f7a85cc4a4e7cd1338fc537acc798f0e9e", "message": "(PUP-8315) add translations decorations to Puppet.info calls"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6f5a32a341f16a5efeef4d43cd5f0bb055ab7843", "message": "(PUP-8331) split and add translation for giving up error message\n\nWe now have 2 different strings for printing if we have errors or\nwarning and errors when giving up on language validation that are translated"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b310bde149192695e62d8f05f9a80269e2303d0d", "message": "(PUP-8312) Add translation to err and warning calls\n\nReviewed and added translation decorations around err and warning calls"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/dfd5482afb6171792de35f183e8a4e4c9dda1c21", "message": "(PUP-8313) raise DevError decorate strings part 3\n\nDecorate strings when we raise a DevError error so that we'll\nhave translations for the error (Part 3 of 3)\nCoding fix in lib/puppet/type/mount.rb\nAdded quotes in lib/puppet/type.rb to make this message readable\n   \"The 'is' value is not in the 'is' array for '%{name}'\""}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/9fcb63240af2dc6a67078df5515741a2973da40b", "message": "(PUP-8313) raise DevError decorate strings part 2\n\nDecorate strings when we raise a DevError error so that we'll\nhave translations for the error (Part 2 of 3)"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/a2ba30eb5981b01bc6b3aa548ddc7db276d96d20", "message": "(PUP-8313) raise DevError decorate strings part 1\n\nDecorate strings when we raise a DevError error so that we'll\nhave translations for the error (Part 1 of 3)"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f31193ee68666c18d336a56532500b9f86b1627c", "message": "(PUP-8127) change the error location output to be translatable\n\nCreated a common method for making a string of the the location of an error\nChanged the error reporting and logging systems to use the common methods\nUpdated all the unit tests\nUpdated acceptance test"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f2a8aa703d3005fada0e41be1ca9acebeb67eb2e", "message": "(PUP-8122) Change sentence fragment to This depends on ...\n\nChange the sentence fragment for listing the dependency cycle errors\nfrom \"which depends on\" to \"This depends on\"\nFixed creation of the dependency list so that that don't overwrite\nthe specificied version line"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5eeaebabc7e12795027cf468d4d2b6349949a05e", "message": "(PUP-8286) add translations to ParseError raises\n\nAdd translations to the cases where we raise ParseError\nsplit messages multiline messages"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/8a9551fe88bf0093224a2c0e159aba61bdeaac64", "message": "(PUP-8286) add translation to ResourceError raises"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3a00e565969b58b7ec3ed4bea617838073fe7fa4", "message": "(PUP-8254) split paragraphs into sentences for translation\n\nSplit some of paragraphs in puppet for messages into sentences."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b93f9a8d8ea19b9d12828ba7f82bbeb41c6206ed", "message": "(PUP-8131) update the calls to benchmark to pass in complete sentences\n\nUpdate the benchmark method to have the call pass in a complete sentence\nincluding the ' in %{seconds} seconds' which benchmark can format to\ninclude the time take if it needs to log the message"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thallgren": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/60f5a5137863625db6f178c4e8e276d08b4cd273", "message": "Merge pull request #6533 from nicklewis/PUP-8357-correctly-match-task-files\n\n(PUP-8357) Correctly match files for tasks"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/0955e059b7e8a8eb688388f8dcac71174b550fd8", "message": "Merge pull request #6516 from hlindberg/PUP-8327_optimize-type-parser-optional-types\n\n(PUP-8327) Add common Optional types to optimized parse table"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/dac944e818dd0088244eecc3e854c775975a7ff4", "message": "Merge pull request #6511 from hlindberg/PUP-8327_optimize-type-parser-well-known-types\n\n(PUP-8327) Make parsing of most common data types 150-200x faster"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5aef613f148ff19435cb48ab76c6b9b72b2d9143", "message": "Merge branch '5.3.x'"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/15beb3d76076ceffb10367899cdda7f12ece9021", "message": "(maint) Fix typo in unit test description for selector eval"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/83548e1a3413bd3fd7a46c7287816de67b6ebb85", "message": "(PUP-8259) Make loader discovery report errors instead of failing\n\nBefore this commit, a function, type, plan, or task declaration that\ncontained errors would cause the loader discovery to raise an exception.\nThis is now changed so that the discovery will either raise warnings or\ncollect errors in an `error_collector` array that can be passed as an\noptional argument. If the `error_collector` is provided, errors will not\nbe logged but instead converted into `Puppet::DataType::Error` instances\nand added to the collector."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/391efb8b0b7de0a03db92e4c0598690286fcd5e8", "message": "(PUP-8283) Allow non-Data task parameters\n\nThis commit removes the constraint that task parameters must be Data."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/621d24b771ee26ff099acba1c2eb37f550ad9322", "message": "(PUP-8291) Ensure that default min is 0 for ranges that represent size\n\nData types with a range min/max that denotes a size should ensure that\nthe lower bound is set to zero when given as 'default'."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/938fc7829990a781cd10960dd6f0d27b80f8c346", "message": "(PUP-8270) Skip range max when presenting types with max == default\n\nSeveral data types have a string representation that includes a range\nwith min and max values. Such representations will always come last in\nan array. When creating type with a range from parameters, it's standard\nthat when the 'max' parameter is omitted it gets the default (unbounded)\nvalue. This commit ensures that a 'max' with default value also is\nomitted when the type is represented as a string. E.g. an integer\ncreated as `Integer[2]` will presented as 'Integer[2]' instead of\n'Integer[2, default]'."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f753171016fd6ab96e233c8cfb2efda69c5e83da", "message": "(PUP-8271) Make loader discovery find 'init' for plans and tasks\n\nBefore this commit, the discovery mechanism would incorrectly consider a\nfile named plans/init.pp to denote a plan named `<module-name>::init`.\nThe same thing was true files under tasks with names starting with\n'init'.\n\nThis commit ensures that the `SmartPath` used for Plans and Tasks is\naware of the 'init' semantics when producing the `TypedName` for the\nactual Plan or Target, thus avoiding errors about a name mismatch when\nthe corresponding entity is loaded."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/cc9826d734f4cdda1035d408100d14b4d90bfb43", "message": "Merge pull request #6461 from thallgren/issue/pup-8265/remove-execution_result-and-target\n\n(PUP-8265) Remove ExecutionResult and Target data types"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/fde509691009cf5d341badb4989c4d750e547890", "message": "(PUP-8269) Move handling of future reserved word 'plan' to validator\n\nBefore this commit, the parser would emit a `Model::ReservedWord` with\nfuture == true for the word `plan` when --tasks was not used. This led\nto problems in the evaluator because it was not equipped to handle\nreserved words that were allowed.\n\nThis commit changes the parser so that it no longer has special handling\nof the word 'plan' (unless --tasks is used) and the responsibility of\nissuing a warnning that a future reserved word is used is moved to the\nvalidator `Checker4_0`.\n\nThe commit also removes the 'application', 'produces' and 'consumes'\nfrom the hash of `FUTURE_RESERVED_WORDS` since they are now keywords."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7bb680a57e90895555f393a0601fd7ff0e9210e3", "message": "(PUP-8265) Restore Error#_pcore_init_hash\n\nThis commit restores the method `Error#_pcore_init_hash` since `Bolt`\napparently relied on it being present."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3b4ffbc6d8d9f45da3ee1fffff7a6e957c23b57c", "message": "(PUP-8265) Remove ExecutionResult and Target data types\n\nThis commit removes the `ExecutionResult` and `Target` data types from\nthe puppet core. They will instead be added to the boltlib module."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/aa56a587e5079e74070a24426bd5585237809b96", "message": "Merge pull request #6456 from thallgren/issue/pup-8195/register-datatypes\n\n(PUP-8195) Add ability to register data type with Ruby implementation"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/612d4972da5a2da881b9b3211bd9f48f7799b5fb", "message": "(PUP-8195) Add test asserting definition of a data type in top namespace"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/d12e6f8429e39df4c99a444fffff9dceaa6ed7fb", "message": "(PUP-8195) Search module for ruby defined data types in top namespace\n\nThis commit ensures that a search is made in the top namespace for types\ndeclared using the `Puppet::Datatypes#create_type`."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/ecd5c0dfc71eec5349896d419c785f6b1f96aaf2", "message": "(PUP-8195) Add test using ruby data type defined in a module."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7e4eaa73ae29d99932259354d39ce3b38afe72aa", "message": "(PUP-8195) Add ability to load Ruby code using the autoloader\n\nThis commit adds the method `load_file` to the DSL used by\n`Puppet::Datatypes::create_type`. The `load_file` will dispatch the\ncall to `Puppet::Util::Autoload#load_file` to allow files to be loaded\nfrom the current environment and its modules."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/32131e055d72059fc323e72abfba9facd023acc9", "message": "(maint) Remove useless assignment causing rubucop error."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7d6145f9dae287d3f5cc7762e1058fc812941663", "message": "(PUP-8195) Change wording about 'a type' to 'a data type'"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/79c491b97bffa55a14f469ca21bba5212f4858e0", "message": "(PUP-8195) Make TypeBuilder @api private and TypeBuilderAPI @api public"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/a55cf6e3a00d63be50c30c2f27d4b884fc809729", "message": "(PUP-8195) Improve documentation for Puppet::Datatypes"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4a9e818223e088975d3f0cea705b84edb6bd8af8", "message": "(PUP-8195) Clarify that produced class is derived from PAnyType"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6b77491217443affd7e67e231860728d79792509", "message": "(PUP-8195) Add method doc to PObjectType#implementation_override=(block)"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4119f6ec717aa9e5a6f2d95aeccb9bd62b396acd", "message": "(PUP-8195) Move Target to datatypes directory\n\nThis commit changes the `Target` into a plain ruby class and\nmoves the declaration and implementation to the puppet/datatypes\ndirectory.\n\nNote! This is the first step in moving the type into Bolt."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/2c291f5d27463b6507afa07e832bf4eb2161620b", "message": "(PUP-8195) Move ExecutionResult to datatypes directory\n\nThis commit changes the `ExecutionResult` into a plain ruby class and\nmoves the declaration and implementation to the puppet/datatypes\ndirectory.\n\nNote! This is the first step in moving the type into Bolt."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/de35fdc347be839218b3189cbadd14b0473d246c", "message": "(PUP-8195) Move Error data type to datatypes directory\n\nThis commit moves the Error data type to the datatypes directory. It\nalso adds a plain ruby class for the Error so that it can be used\nwithout a configured type system (i.e. outside of compiler scope)."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/15a1794b605253223316c36b3e6e2b5060785b3a", "message": "(PUP-8195) Add tests for Puppet::DataTypes"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/54cd87bae61b790f8892bbb26a1c387c7f9461c0", "message": "(PUP-8195) Make TypeFormatter format plain ruby objects correctly\n\nPrior to this commit, the TypeFormatter would not recognize a plain\nruby object that was mapped to a data type. This commit adds a the\nmethod `string_Object` to capture this where a proper infer of the\ninstance is made. The output is then based on the inferred type."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/038c4525635c94c59cb575c5506e49b1413f8b0c", "message": "(PUP-8195) Make it possible to pass element type when creating Iterator\n\nThis commit makes it possible to pass an element type when creating\nan iterator for an Array och a Hash. Prior to this commit, such element\ntypes had to be inferred which is an unnecessary step when the element\ntype is already known."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f2b87a3979a5a93796d1b97b2e59dc1a077dd2eb", "message": "(PUP-8195) Fix inference of plain ruby objecs and parameterized type\n\nPrior to this commit, only implementations that included the\n`PuppetObject` module could infer a parameterized type from the values\nof the attributes in the instance. This commit ensures that plain ruby\nobjects that are mapped to a data type are infered such that the\ntype is correctly parametereized."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/96cc5551d8c6ef4db2db44360985e9cd53ac6645", "message": "(PUP-8195) Ensure that StringConverter recognizes PObjectTypeExtension\n\nThe StringConverter when passed an instance of a parameterized object\ntype, did not recognize the instance of an Object data type and produce\nincorrect output. This commit ensures that the PObjectTypeExtension\nis recognized."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e68ab323f2e89e81e7b46f3147c34a060c0ccfc7", "message": "(PUP-8195) Minor speed improvement and bug-fix in serialization\n\nThis commit ensures that the `parameter_info` generated by the\n`PObjectType` is cached since it is called on from many places. A minor\nspeed improvement/bug fix is also made to the deserializer where the\nreader no longer needs to obtain the type of instance that it reads.\nThis also fixes a problem with reading plain ruby objects that are\nmapped to data types. Before this commit, the reader would assume that\nthe class always had a _pcore_type method."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/57a85bd445f1ed41327cfcdc17e05a3eb6c05b9d", "message": "(PUP-8195) Make Object a RichDataType instead of Error"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/02e57d40126e96cf2e9f56c7631e023c95a0bfd8", "message": "(PUP-8195) Add ability to pre-load dynamically defined data types\n\nThis commit adds a `pre_load` method to the `Loaders` instance and\nensures that it is called once the loader framework has been fully\nconfigured. The intention is to add pre-loading of dynamically defined\ntypes that can be found by the puppet system loader."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b7c6c1c2cdd3dc3931be854f6627df26391a5f9c", "message": "(PUP-8195) Fix glitch causing data-typed plain objects to fail on []\n\nThe evaluator would fail to call the underlying method for an data type\nwith a '[]' function declared when the mapped type was aa plain ruby\nobject. This is because the evaluator tested for the PuppetObject module\nwhich a plain ruby object doesn't include.\n\nThis commit ensures that the type is inferred using the `TypeCalculator`\nwhich in turn will consult the `ImplementationRegistry` if needed."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/ba0644e71ff454f203bd1b46d2ad99558f8f5f4a", "message": "(PUP-8195) Fix glitch preventing proper serialization of Type[Callable]\n\nThe Object interface for the Callable type had incorrect definitions for\nthe attributes 'param_types' and 'block_type'. This made it impossible\nto serialize a Callable type."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5c90e3778b7e09ab5cc0cb1840a87c53458d7a39", "message": "(PUP-8195) Add ability to register data type with Ruby implementation\n\nThis commit adds `Puppet::DataTypes#create_type`. It allows the user\nto create new data types in Ruby in a way similar to how a function can\nbe created using `Puppet::Functions#create_function`.\n\nIn addition to the new `Puppet::DataType` module, this commit also adds\na `RubyDataTypeInstantiator` and `DataTypePath` to the loader framework\nand the new loadable `:datatype`."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7f997da7a3a0de88c413cf3e7b664e9d5d681735", "message": "Merge pull request #6451 from hlindberg/PUP-8235_shorten-paths-inside-modules-for-scope-to_s\n\n(PUP-8235) Shorten paths to file in module in Scope.to_s"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/ff5e8889dbe34219a89ecec9b477cbddd49dec42", "message": "Merge pull request #6450 from hlindberg/PUP-8247_locator-does-not-cache\n\n(PUP-8247) Fix problem that Locator does not cache"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/9f2a4de471ba4ebbbf7a45ee3470dbc0e2ff4fd9", "message": "(PUP-8237) Make Puppet::Pal::ScriptCompiler available to functions\n\nThis commit makes the `Puppet::Pal::ScriptCompiler` available using a\n`Puppet::Context` override. The compiler is available using the symbol\n`:pal_script_compiler`.\n\nA new special parameter type named `script_compiler_param` is also added\nto the Ruby function dispatcher builder for `InternalFunction`. Usage is\nsimilar to `scope_param` but it injects the script compiler instead of\ninjecting the scope."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/05b2cf71c4e4c7c060df328d8c4a2e674779f617", "message": "(PUP-8237) Simplify function parameter injection\n\nThis commit removes some obsolete logic that was designed to handle\ninjection performed by the advanced but not really used injection system\nthat was earlier removed from Puppet core.\n\nIn essence, instead of passing a four element array with various data\nabout the injection, only a symbol denoting the parameter to be injected\nis passed on. Dead code in the form of the two methods `injected_param`\nand `injected_producer_param` is removed."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b53c66d3f7bcc1c300a87adbb24c514827f5c671", "message": "Merge pull request #6426 from hlindberg/PUP-6162_improve-function-local-type-errors\n\n(PUP-6162) Improve function local type errors"}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6118", "title": "(PUP-7834) Replace all calls to YAML.load with YAML.safe_load", "body": "This commit replaces all calls to the unsafe `YAML.load` method with\r\ncalls to `YAML.safe_load` to gain control over exactly what classes that\r\nare permitted to create instances during the load.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5093", "title": "(PUP-5908) Add MsgPack serialization", "body": "This commit adds a serialization reader/writer pair that is based on\nMsgPack.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/13288570", "body": "Unit test added.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/13288570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15558312", "body": "PR updated to ensure that the 'default_source' entry is always included when a default expression is present.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15558312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16458155", "body": "I can remove the ok, but I want this method to raise an exception if the assertion fails. That's not an uncommon practice.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16458155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16458208", "body": "Hmm. I think the reasoning behind that is a bit off. Whether or not a cache should be used is something that we should decide after doing performance measurements. I don't want to change the name of the method just because we decide to optimize it at some point.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16458208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16458284", "body": "I'm not sure if that's needed since infer or infer_set will return the same thing when inferring an Object. The infer_set may be much more expensive in case it isn't an Object.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16458284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16458332", "body": "why? Remember that there might be overrides so hash merges are more efficient which means that we have a hash anyway.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16458332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16471198", "body": "Yes, there's a need to get all members from the parent during assertion of attribute and function overrides.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16471198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "nicklewis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/1c262644f8a91b1281466c996b941e3c6e127124", "message": "(PUP-8357) Correctly match files for tasks\n\nPreviously, the existing_paths method for the FileBased loader was using\nnaive string matching to determine which files were associated with a\nparticular task. This resulted in the wrong set of files being found for\na task, in the case where the name of one task was a prefix of the name\nof an adjacent task. For example, task `foo` would match both `foo.py`\nand `foobar.py`. The desired behavior is that filenames need to match\nall the way up to the file extension, in order to be associated with a\nparticular task.\n\nThis commit changes the existing_paths method to compare basenames\nexactly, excluding file extensions."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/611937", "body": "Hi,\n\nWe don't use GitHub for patch submission - our process is documented here:\n\nhttp://projects.puppetlabs.com/projects/puppet/wiki/Development_Lifecycle\n\nThanks,\nNick Lewis\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/611937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1881824", "body": "This is currently failing some specs, so it's not quite ready to go in. I'll fix that up, and add in some specs for Puppet::Util.absolute_path?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1881824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1885574", "body": "Okay this series has had some rather significant fixups, and should be ready for review and (hopefully) merge now.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1885574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1905037", "body": "No, I've just rechecked and confirmed those operations (setting, munging, validating) are done on the agent.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1905037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2045858", "body": "I'm getting 7 failing specs in spec/unit/parser/collector_spec.rb when I run these.\n\n> Failures:\n> \n>   1) Puppet::Resource::ActiveRecord#search with a matching resource should return something responding to `to_resource` if a resource matches\n>      Failure/Error: found.length.should == 1\n>        expected: 1\n>             got: 0 (using ==) \n>      # ./spec/unit/indirector/resource/active_record_spec.rb:80\n> \n>   2) Puppet::Parser::Collector when collecting exported resources with storeconfigs enabled should convert all found resources into parser resou\n>      Failure/Error: result.length.should == 1\n>      NoMethodError:\n>        undefined method `length' for false:FalseClass\n>      # ./spec/unit/parser/collector_spec.rb:347\n> \n>   3) Puppet::Parser::Collector when collecting exported resources with storeconfigs enabled should override all exported collected resources if  \n>      Failure/Error: got.first[:message].should == param.value\n>      NoMethodError:\n>        undefined method `first' for false:FalseClass\n>      # ./spec/unit/parser/collector_spec.rb:365\n> \n>   4) Puppet::Parser::Collector when collecting exported resources with storeconfigs enabled should store converted resources in the compile's re\n>      Failure/Error: @compiler.expects(:add_resource).with do |scope, resource|\n>      Mocha::ExpectationError:\n>        not all expectations were satisfied\n>        unsatisfied expectations:\n>        - expected exactly once, not yet invoked: #Puppet::Parser::Compiler:0x119c63ad0.add_resource()\n>        satisfied expectations:\n>        - allowed any number of times, not yet invoked: Signal.trap(any_parameters)\n>      # ./spec/unit/parser/collector_spec.rb:375\n> \n>   5) Puppet::Parser::Collector when collecting exported resources with storeconfigs enabled should mark resources collected from the database as\n>      Failure/Error: got.length.should == 1\n>      NoMethodError:\n>        undefined method `length' for false:FalseClass\n>      # ./spec/unit/parser/collector_spec.rb:394\n> \n>   6) Puppet::Parser::Collector when collecting exported resources with storeconfigs enabled should fail if an equivalent resource already exists\n>      Failure/Error: expect { @collector.evaluate }.\n>        expected Puppet::ParseError with message matching /cannot override local resource/ but nothing was raised\n>      # ./spec/unit/parser/collector_spec.rb:410\n> \n>   7) Puppet::Parser::Collector when collecting exported resources with storeconfigs enabled should ignore exported resources that match already-\n>      Failure/Error: got.length.should == 1\n>      NoMethodError:\n>        undefined method `length' for false:FalseClass\n>      # ./spec/unit/parser/collector_spec.rb:434\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2045858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2274701", "body": "This pull request is actually for 2.7.x to master, though the message claims it's for 2.6.x to 2.7.x.\n\nAlso, we're currently working on some CI failures in 2.7.x, so it would be good not to do these merges until those are resolved.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2274701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2561851", "body": "I've amended the commit adding the ext script to add some basic help.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2561851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2662538", "body": "Merged to 2.7.x in 845825a535e9d6bc76af0491a0734cdebd509d56.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2662538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2712779", "body": "I've pushed a new version that addresses these two issues.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2712779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2714047", "body": "Closing this to reopen against 2.7rc.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2714047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3068028", "body": "Whoops, guess since I only wrote an acceptance test for it, I forgot to check that the specs passed. Thanks, I'll take a look.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3068028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3068348", "body": "I pushed a new version which fixes the failing tests. The code change was letting request_get yield the response rather than returning it, so the spec setup needed to change its stub for that as well.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3068348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237572", "body": "Are `should_value` and `currentvalue` strings or numbers in these methods? If they're strings, the `to_s` is unnecessary. If they're numbers, this does the wrong thing (it would print decimal) and the tests aren't realistic.\n\nBut given that the method is called `should_to_s`, though, I would guess the default just calls `to_s`, and since we currently do print octal, it must be that the argument is a string, and so `to_s` is unnecessary here.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jhelwig": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/9d49cd92cf3e0f15613a0bf46e0ebb576ae36d03", "message": "Merge pull request #6510 from kris-bosland/fix/master/pup-8342\n\n(PUP-8342) Update report schema to include transaction_completed"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/863df23ac72fee9a81ebef657cf120a3e22b820f", "message": "Merge pull request #6512 from ericldelaney/task/5.3.x/PUP-8345/make_back_slash_continuation_more_readable\n\n(PUP-8345) make back slash continuation lines more readable"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/0362bad3a4b436dbeead18f1a00354e1f26493f1", "message": "Merge pull request #6494 from ericldelaney/task/5.3.x/PUP-8312/add_translation_to_Puppet_err_and_warning_calls\n\n Task/5.3.x/pup 8312/add translation to puppet err and warning calls"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e97a37d6c4c94e46fb821263f1307558156cff47", "message": "Merge pull request #6470 from ericldelaney/task/5.3.x/PUP-8122/change_fragment_which_depends_on_to_sentence\n\n(PUP-8122) Change sentence fragment to This depends on ..."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/1448218a69f7250dbd628461fe3a1133d0fb97c1", "message": "Merge pull request #6473 from ericldelaney/task/5.3.x/PUP-8286/raise_ParseError_translations\n\n(PUP-8286) add translations to ParseError raises"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7f0c88fa0d8c35f6207498af9574f2a2ecb5742c", "message": "Merge branch 'jcpunk-PUP-7685'\n\n* commit '22312fd8d':\n  (PUP-7685) Remove duplicate entries when listing user resource's groups"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/2b7b4ed6b692bf595d4f95012a6a132024c991cb", "message": "Merge pull request #6446 from joshcooper/pup8244-useless-assignment\n\n(PUP-8244) Resolve Lint/UselessAssignment errors"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/ad6c4876bad0db930f280c9afb6228b91245b970", "message": "Merge pull request #6428 from drewablank/master\n\n(PUP-3963) Improve module name invalid character warning"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4d4d12e168680ee29ade8244886c4ccef03cb6c9", "message": "Merge pull request #6435 from seanhussey/patch-1\n\nFix capitalization of \"GitHub\"."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/9025661a4c86c543a1d44403dec749fcb6b3aac5", "message": "Merge branch 'itgrl-PUP-7969'\n\n* itgrl-PUP-7969:\n  (PUP-7969) Use more specific relationships in relationship debug message"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/822946", "body": "Unfortunately, we don't use pull requests for the Puppet Labs projects.  The [Development Lifecycle wiki page](http://projects.puppetlabs.com/projects/puppet/wiki/Development_Lifecycle) has the preferred method of submitting patches.  Thanks for doing the work on this!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/822946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/910243", "body": "Unfortunately, we don't use pull requests for the Puppet Labs projects.  The [Development Lifecycle wiki page](http://projects.puppetlabs.com/projects/puppet/wiki/Development_Lifecycle) has the preferred method of submitting patches.  Thanks for doing the work on this!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/910243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1714178", "body": "As noted in [the Redmine ticket](https://projects.puppetlabs.com/issues/8677), vcsrepo shouldn't have been merged into core, and has since been removed.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1714178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1721043", "body": "Haven't really looked at the changes yet, but the tests and the implementation should be squashed into one commit.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1721043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1812492", "body": "This isn't quite ready.  While it fixes the problem for that specific ordering, there is still cache_class leakage.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1812492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1813201", "body": "Lost a few necessary changes in the original commit, which are now included in the updated version.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1813201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1856892", "body": "Fail!   This isn't what I meant to have merged at all!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1856892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1891288", "body": "Matthias,\n\nFirst of all: Thanks for submitting this.\n\nCouple of comments, though:\n- Since this is addressing three separate bugs, it should be split out into\n  three separate commits.  We try to keep the individual commits down to\n  addressing the smallest, logically consistent thing possible.\n- Rather than stripping things out of the output using a regex, you should be\n  able to call execute directly using something like the following:\n  \n  ```\n  info_line = execute(\n    \"/opt/local/bin/port\", [\"-q\", :info, \"--line\", \"--version\", \"--revision\", @resource[:name]],\n    :combine => false\n  )\n  ```\n  \n  I haven't actually tested this, so you may need to call\n  `Puppet::Util.execute`, instead, but I don't think so.\n- There should be some tests for each of the three changes just to make sure\n  we don't accidentally regress on these in the future.  Feel free to give a\n  holler on the puppet-dev mailing list if you would like a hand with these.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1891288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1891302", "body": "Whoops.  Didn't see that the requester closed the pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1891302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1892500", "body": "I'm not sure if you spotted them, but I left a few comments on [the original pull request](https://github.com/puppetlabs/puppet/pull/55).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1892500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1894782", "body": "Up to you.  Feel free to re-use this one for one of the bugs, or just have them all in the same pull request, that doesn't matter as much.  If you update the branch, the pull request will reflect that, so you could make changes, and force push your fix-macports branch, and this pull request will reflect that.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1894782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1895008", "body": "No worries.\n\nYes, the commit that is currently in this branch should be split out into three separate commits, one commit per bug that you're fixing.  These three would replace the single commit that is currently there.\n\nYou mentioned being new to Git, GitHub & Ruby, so please forgive me if you already know what follows.\n\nYou should be able to \"uncommit\" the commit you have on this branch by checking it out, and doing `git reset HEAD~`.  This brings you to a state as though you had made the changes on disk, but hadn't yet committed them.\n\nYou should then be able to make any additional changes (adding tests, calling `execute` directly, etc.).\n\nAfter that, you can add bits, and pieces of the individual files to the staging area to split them out into separate commits by using `git add --interactive`.  [Pro Git's section on \"Interactive Staging\"](http://progit.org/book/ch6-2.html) has some decent documentation about how to do this, specifically the \"Staging Patches\" section.\n\nHope this helps.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1895008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1895957", "body": "Left some comments inline on the commit.\n\nI'm also curious about all the `unless task.trigger_count < 1` that I see.  What's special about the trigger count, and why are we only setting certain things if `trigger count >= 1`?\n\nDoes supporting job repeats of \"once\" really make sense?  What happens to the job once it's been run?  Will Puppet end up recreating the job, or will it end up sitting dormant once it has fired?\n\nWhat does it mean to \"activate\" the task?\n\nThe description of the type seems a bit confusing.\n\n```\nWhile the name of the task is not part of the actual job, it is used by\nPuppet to store and retrieve it.\n```\n\nBut, later\n\n```\nIf you specify a task that matches an existing entry in every way except\nname, then the jobs will be considered equivalent and the new name will be\npermanently associated with that job.\n```\n\nThis seems contradictory.  It sounds like the job name is the uniqueness key earlier, then later it sounds like everything other than the name is the uniqueness key.  Is this behavior desirable?\n\n`lib/puppet/type/scheduled_task.rb` has DOS line endings, and a bunch of trailing whitespace that should be cleaned up.\n\nIt looks like `spec/unit/provider/scheduled_task/windows_spec.rb` is mostly testing the type, instead of the provider.  Where it does `provider_class = Puppet::Type.type( :scheduled_task )`, I think it actually needs to do something like `provider_class = Puppet::Type.type( :scheduled_task ).provider(:windows)`.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1895957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1916401", "body": "I've addressed the comment Nick left on the [original commit](https://github.com/jhelwig/puppet/commit/96b4408bcc71de01ecc9b204b598795dd76aa78e#commitcomment-554086) about source being an unvalidated required parameter with the MSI provider, and updated the branch to reflect this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1916401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1969854", "body": "There are a number of tests that are known to fail on Windows due to things like missing support in types/providers.  If you run the tests by doing something like `rspec --tag ~fails_on_windows spec`, then you'll only be running the tests that should actually have all the support necessary to run.  Eventually the `fails_on_windows` tag will go away, but for now, it's marking the areas where we know Puppet does not work correctly on Windows, but should before we can call the initial Windows support \"done\".\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1969854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1969895", "body": "Rather than specifying `:port` as the first argument in the array, you'd need to use `\"/opt/local/bin/port\"`.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1969895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2240830", "body": "Updated the commit series removing the `password`, and `password=` methods from the provider since, as Nick Lewis pointed out, they are completely unused with password being a parameter, instead of a property.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2240830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2259978", "body": "Believe that I've addressed all the comments that have been raised.  The diff of what's been changed since the last version follows:\n\n```\ndiff --git c/lib/puppet/provider/scheduled_task/win32_taskscheduler.rb w/lib/puppet/provider/scheduled_task/win32_taskscheduler.rb\nindex fb67cd5..a3d8084 100644\n--- c/lib/puppet/provider/scheduled_task/win32_taskscheduler.rb\n+++ w/lib/puppet/provider/scheduled_task/win32_taskscheduler.rb\n@@ -1,6 +1,9 @@\n require 'puppet/parameter'\n\n-require 'win32/taskscheduler' if Puppet.features.microsoft_windows?\n+if Puppet.features.microsoft_windows?\n+  require 'win32/taskscheduler'\n+  require 'puppet/util/adsi'\n+end\n\n Puppet::Type.type(:scheduled_task).provide(:win32_taskscheduler) do\n   desc 'This uses the win32-taskscheduler gem to provide support for\n@@ -55,7 +58,9 @@ Puppet::Type.type(:scheduled_task).provide(:win32_taskscheduler) do\n   end\n\n   def user\n-    task.account_information\n+    account = task.account_information\n+    return 'system' if account == ''\n+    account\n   end\n\n   def trigger\n@@ -108,21 +113,21 @@ Puppet::Type.type(:scheduled_task).provide(:win32_taskscheduler) do\n   end\n\n   def user_insync?(current, should)\n-    if should.to_s.downcase == 'system'\n-      return current == ''\n-    end\n+    return false unless current\n+\n+    # Win32::TaskScheduler can return the 'SYSTEM' account as the\n+    # empty string.\n+    current = 'system' if current == ''\n\n-    # Since Windows will likely canonicalize the user's name after we\n-    # set it, we need to make sure that we ignore any domain/machine\n-    # specification that comes back as part of the set user.  We also\n-    # need to make sure to do this non-greedily, in case the user was\n-    # originally specified fully qualified.\n-    !!(current =~ /^(?:[^\\\\]+?\\\\)?#{should}$/i)\n+    # By comparing account SIDs we don't have to worry about case\n+    # sensitivity, or canonicalization of the account name.\n+    Puppet::Util::ADSI.sid_for_account(current) == Puppet::Util::ADSI.sid_for_account(should[0])\n   end\n\n   def trigger_insync?(current, should)\n     should  = [should] unless should.is_a?(Array)\n     current = [current] unless current.is_a?(Array)\n+    return false unless current.length == should.length\n\n     current_in_sync = current.all? do |c|\n       should.any? {|s| triggers_same?(c, s)}\n@@ -136,7 +141,7 @@ Puppet::Type.type(:scheduled_task).provide(:win32_taskscheduler) do\n   end\n\n   def command=(value)\n-    task.application_name  = value\n+    task.application_name = value\n   end\n\n   def arguments=(value)\n@@ -193,6 +198,8 @@ Puppet::Type.type(:scheduled_task).provide(:win32_taskscheduler) do\n   end\n\n   def user=(value)\n+    self.fail(\"Invalid user: #{value}\") unless Puppet::Util::ADSI.sid_for_account(value)\n+\n     if value.to_s.downcase != 'system'\n       task.set_account_information(value, resource[:password])\n     else\n@@ -310,7 +317,9 @@ Puppet::Type.type(:scheduled_task).provide(:win32_taskscheduler) do\n       }\n\n       if puppet_trigger.keys.include?('on')\n-        self.fail \"Neither 'day_of_week' nor 'which_occurrence' can be specified when creating a monthly date-based trigger\" if puppet_trigger.has_key?('day_of_week') or puppet_trigger.has_key?('which_occurrence')\n+        if puppet_trigger.has_key?('day_of_week') or puppet_trigger.has_key?('which_occurrence')\n+          self.fail \"Neither 'day_of_week' nor 'which_occurrence' can be specified when creating a monthly date-based trigger\"\n+        end\n\n         trigger['trigger_type'] = Win32::TaskScheduler::MONTHLYDATE\n         trigger['type']['days'] = bitfield_from_days(puppet_trigger['on'])\n@@ -324,7 +333,7 @@ Puppet::Type.type(:scheduled_task).provide(:win32_taskscheduler) do\n         trigger['type']['weeks']        = occurrence_name_to_constant(puppet_trigger['which_occurrence'])\n         trigger['type']['days_of_week'] = bitfield_from_days_of_week(puppet_trigger['day_of_week'])\n       else\n-        self.fail \"Don't know how to create a 'monthly' schedule with the options: #{puppet_trigger.keys.sort.sort.join(', ')}\"\n+        self.fail \"Don't know how to create a 'monthly' schedule with the options: #{puppet_trigger.keys.sort.join(', ')}\"\n       end\n     when 'once'\n       self.fail \"Must specify 'start_date' when defining a one-time trigger\" unless puppet_trigger['start_date']\ndiff --git c/lib/puppet/type/scheduled_task.rb w/lib/puppet/type/scheduled_task.rb\nindex ecc30bc..d83adcb 100644\n--- c/lib/puppet/type/scheduled_task.rb\n+++ w/lib/puppet/type/scheduled_task.rb\n@@ -4,7 +4,7 @@ Puppet::Type.newtype(:scheduled_task) do\n   include Puppet::Util\n\n   @doc = \"Installs and manages Windows Scheduled Tasks.  All fields\n-    except the name, command, and start date are optional; specifying\n+    except the name, command, and start_time are optional; specifying\n     no repetition parameters will result in a task that runs once on\n     the start date.\n\ndiff --git c/lib/puppet/type/ssh_authorized_key.rb w/lib/puppet/type/ssh_authorized_key.rb\nindex 12b5bc2..4d768f1 100644\n--- c/lib/puppet/type/ssh_authorized_key.rb\n+++ w/lib/puppet/type/ssh_authorized_key.rb\n@@ -92,7 +92,9 @@ module Puppet\n       end\n\n       validate do |value|\n-        raise Puppet::Error, \"Options must be provided as an array, not a comma separated list\" if value != :absent and value.include?(',')\n+        unless value == :absent or value =~ /^[-a-z0-9A-Z_]+(?:=\\\".*?\\\")?$/\n+          raise Puppet::Error, \"Option #{value} is not valid. A single option must either be of the form 'option' or 'option=\\\"value\\\". Multiple options must be provided as an array\"\n+        end\n       end\n     end\n\ndiff --git c/lib/puppet/util/adsi.rb w/lib/puppet/util/adsi.rb\nindex f865743..ff05888 100644\n--- c/lib/puppet/util/adsi.rb\n+++ w/lib/puppet/util/adsi.rb\n@@ -48,6 +48,19 @@ module Puppet::Util::ADSI\n     def execquery(query)\n       connect(wmi_resource_uri).execquery(query)\n     end\n+\n+    def sid_for_account(name)\n+      sid = nil\n+      if name =~ /\\\\/\n+        domain, name = name.split('\\\\', 2)\n+        query = \"SELECT Sid from Win32_Account WHERE Name = '#{name}' AND Domain = '#{domain}' AND LocalAccount = true\"\n+      else\n+        query = \"SELECT Sid from Win32_Account WHERE Name = '#{name}' AND LocalAccount = true\"\n+      end\n+      execquery(query).each { |u| sid ||= u.Sid }\n+      sid\n+    end\n+\n   end\n\n   class User\ndiff --git c/spec/unit/provider/scheduled_task/win32_taskscheduler_spec.rb w/spec/unit/provider/scheduled_task/win32_taskscheduler_spec.rb\nindex 302fc750..1bf8b7e 100644\n--- c/spec/unit/provider/scheduled_task/win32_taskscheduler_spec.rb\n+++ w/spec/unit/provider/scheduled_task/win32_taskscheduler_spec.rb\n@@ -568,16 +568,27 @@ describe Puppet::Type.type(:scheduled_task).provider(:win32_taskscheduler), :if\n   describe '#user_insync?' do\n     let(:resource) { described_class.new(:name => 'foobar', :command => 'C:\\Windows\\System32\\notepad.exe') }\n\n+    before :each do\n+      Puppet::Util::ADSI.stubs(:sid_for_account).with('system').returns('SYSTEM SID')\n+      Puppet::Util::ADSI.stubs(:sid_for_account).with('joe').returns('SID A')\n+      Puppet::Util::ADSI.stubs(:sid_for_account).with('MACHINE\\joe').returns('SID A')\n+      Puppet::Util::ADSI.stubs(:sid_for_account).with('bob').returns('SID B')\n+    end\n+\n     it 'should consider the user as in sync if the name matches' do\n-      resource.should be_user_insync('joe', 'joe')\n+      resource.should be_user_insync('joe', ['joe'])\n     end\n\n     it 'should consider the user as in sync if the current user is fully qualified' do\n-      resource.should be_user_insync('MACHINE\\joe', 'joe')\n+      resource.should be_user_insync('MACHINE\\joe', ['joe'])\n     end\n\n     it 'should consider a current user of the empty string to be the same as the system user' do\n-      resource.should be_user_insync('', 'system')\n+      resource.should be_user_insync('', ['system'])\n+    end\n+\n+    it 'should consider different users as being different' do\n+      resource.should_not be_user_insync('joe', ['bob'])\n     end\n   end\n\n@@ -1455,6 +1466,8 @@ describe Puppet::Type.type(:scheduled_task).provider(:win32_taskscheduler), :if\n       end\n\n       it 'should use nil for user and password when setting the user to the SYSTEM account' do\n+        Puppet::Util::ADSI.stubs(:sid_for_account).with('system').returns('SYSTEM SID')\n+\n         resource = Puppet::Type.type(:scheduled_task).new(\n           :name    => 'Test Task',\n           :command => 'C:\\dummy_task.exe',\n@@ -1467,6 +1480,8 @@ describe Puppet::Type.type(:scheduled_task).provider(:win32_taskscheduler), :if\n       end\n\n       it 'should use the specified user and password when setting the user to anything other than SYSTEM' do\n+        Puppet::Util::ADSI.stubs(:sid_for_account).with('my_user_name').returns('SID A')\n+\n         resource = Puppet::Type.type(:scheduled_task).new(\n           :name     => 'Test Task',\n           :command  => 'C:\\dummy_task.exe',\ndiff --git c/spec/unit/util/adsi_spec.rb w/spec/unit/util/adsi_spec.rb\nindex 3a27cda..c70757d 100755\n--- c/spec/unit/util/adsi_spec.rb\n+++ w/spec/unit/util/adsi_spec.rb\n@@ -28,6 +28,22 @@ describe Puppet::Util::ADSI do\n     Puppet::Util::ADSI.computer_uri.should == \"WinNT://testcomputername\"\n   end\n\n+  it \"should return a SID for a passed user or group name\" do\n+    Puppet::Util::ADSI.expects(:execquery).with(\n+      \"SELECT Sid from Win32_Account WHERE Name = 'testers' AND LocalAccount = true\"\n+    ).returns([stub('acct_id', :Sid => 'S-1-5-32-547')])\n+\n+    Puppet::Util::ADSI.sid_for_account('testers').should == 'S-1-5-32-547'\n+  end\n+\n+  it \"should return a SID for a passed fully-qualified user or group name\" do\n+    Puppet::Util::ADSI.expects(:execquery).with(\n+      \"SELECT Sid from Win32_Account WHERE Name = 'testers' AND Domain = 'MACHINE' AND LocalAccount = true\"\n+    ).returns([stub('acct_id', :Sid => 'S-1-5-32-547')])\n+\n+    Puppet::Util::ADSI.sid_for_account('MACHINE\\testers').should == 'S-1-5-32-547'\n+  end\n+\n   describe Puppet::Util::ADSI::User do\n     let(:username)  { 'testuser' }\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2259978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2274731", "body": "The content is for 2.6.x into 2.7.x....just forgot to update the targets when I opened the request. `:-\\`\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2274731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2369651", "body": "We're definitely going to want some tests for this.  It seems like a prime thing for someone to accidentally break in the future.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2369651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2385720", "body": "Just noticed that some of my commit message didn't make it through...will fix.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2385720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2386358", "body": "Fixed the missing commit message text.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2386358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2462590", "body": "Updated to move the iteration over SRV records to happen in the request object itself.  This allowed removing the duplication between the file type, and the REST indirector.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2462590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2485802", "body": "@jude Sorry for taking so long to get back to you about this pull request.  This kind of fix is something we'd definitely want some testing around to make sure it doesn't get accidentally broken in the future.\n\nFeel free to give me a shout if there's anything I can do to help out with the tests, or if you won't have a chance to get to them.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2485802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2485896", "body": "Just below where the new `ensure_running_as_root` function is called, the script checks to see if it is running as root, warning and exiting appropriately if it isn't.\n\nThe original behavior of warn & exit rather than invoking sudo seems much more well behaved to me, compared to automatically calling sudo if it's not root.  Typically with root privileges it is the responsibility of the user to provide them to the script that needs them rather than for the script to take them for itself (at least in my experience).\n\nI'm leaning towards not making this particular change based on how I'd expect it to behave from most other \"root required\" scripts, and that it already warns & exits rather than blowing up if not run as root.\n\n@soh, do you have any thoughts?  UX is definitely one of your hot-spot areas.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2485896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2486796", "body": "I'm closing the pull request since this would cause `createpackage.sh` to break from common & generally expected behavior for a script that requires root permissions.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2486796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2498280", "body": "I would also expect the behavior to be to remove any principal  mentioned, but it doesn't seem like a change that should be made in a point release.  I'd be a lot more comfortable if it were changed to warn in 2.7.x and moved to the new behavior in a future version, especially since this affects all types with `:array_matching => :all` (including custom types written by users of Puppet).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2498280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2509940", "body": "I already commented on the Facter version of this, but I don't think that the gsub is correct, or should be happening at all.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2509940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2510188", "body": "Link to Facter version of this patch: puppetlabs/facter#87\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2510188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2547723", "body": "The changes look reasonable at first pass, but the first commit in the series really should be broken up into separate commits for the 5 different things it does.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2547723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2552798", "body": "The new markdown_definition list function, and the test for it should be in the same commit, but other than that, things look good!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2552798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2552852", "body": "With the changes from Gary that were merged into the launchd provider, there's a conflict with this branch.  Any chance I could convince you to rebase it on top of the latest 2.7.x to get around this?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2552852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2558838", "body": "Looks like one of the commits in this series started dropping a 'com.foo.food' file in the PWD. @glarizza, any chance we can get this cleaned up?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2558838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2561691", "body": "How hard would it be to have better help for the ext script, so people don't have to read the commit message to see what the options actually do?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2561691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2611771", "body": "Left a comment on [the ticket](http://projects.puppetlabs.com/issues/8255).  Short summary: I don't think this is the right way to go for the issue.  Especially in light of 3e5927773c1dc7bc6e9af922fef09149d1599ef6.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2611771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2748141", "body": "I pushed this to 2.7.x.  Manually closing, since it was targeted at master.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2748141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2769405", "body": "Closing in favor of puppetlabs/puppet#224\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2769405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2783539", "body": "Looking at this, it should probably go into 2.7.x, instead of master.  I cherry picked it into [a branch in my fork](https://github.com/jhelwig/puppet/tree/tickets/2.7.x/7274-always-output-4-digit-modes) based on 2.7.x and updated it to resolve the conflicts.  I also replaced the tests with ones directly testing `#should_to_s`, and `#is_to_s`, since the original ones didn't seem to be testing this change.  I'd appreciate if you gave the new branch a look before I open up a pull request for it.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2783539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784008", "body": "This will need to be rebased onto the latest 2.7.x before it can be applied due to conflicts.  Also, I would have expected to see at least one test around the command that it shells out to.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784167", "body": "Other than the commit message needing to be amended to follow the guidelines in [CONTRIBUTING.md](https://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md), I've got a couple of comments/concerns about this.\n\nWhile it does add commands for handling 'reload', and 'graceful', I don't see how they would actually be used.  My understanding of [the ticket](http://projects.puppetlabs.com/issues/3323) is that it should be possible to use the new 'reload', and 'graceful' commands for handling notifications from other resources, but I don't see any changes to actually allow this.  What am I missing?\n\nThe tests also concern me, since they don't seem to cover any of the new functionality that this is supposed to provide, and only test the new methods existence (which is redundant when testing the functionality the methods provide).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784213", "body": "Closed in favor of puppetlabs/puppet#226\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2792498", "body": "Updated to remove the unnecessary `to_s` calls.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2792498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2794054", "body": "Thanks for submitting this, however I don't think that we should merge this in at this point, since there is a desire to separate out the existing vim & emacs syntax highlighting files into their own repositories ([related Redmine issue](https://projects.puppetlabs.com/issues/5746)).\n\nAlso, we need a CLA from anyone that we accept contributions from ([CONTRIBUTING.md](https://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md)), and generally have all of our released code as Apache licensed. Before creating a repo for this under the puppetlabs account, I'd like to have some discussion from people who are more familiar with the licensing issues.  Would you mind opening a ticket in [Redmine](http://projects.puppetlabs.com/projects/puppet/issues/new) about possibly creating a new repo for the Kate syntax highlighting?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2794054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796251", "body": "This can't go in until after #196\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796258", "body": "Updated to remove the debugging code @joshcooper pointed out.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2818220", "body": "@webfactory / @mpdude Do you know if there's an associated Redmine ticket for this?  Unfortunately, Redmine is the only way we have to verify the CLA requirement for contributions ([CONTRIBUTING.md](https://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md)).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2818220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2820281", "body": "Updated to bail early from `Puppet::Network::Resolver.each_srv_record` when the domain to use is unknown (nil/empty-string), and added tests for this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2820281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2839312", "body": "Just to be a little more clear about @stahnma's comment: We won't be able to remove `--apply` until `Telly + 1` at the earliest if this gets into 2.7 now (or if this goes into Telly before it is released, but not 2.7).\n\n@kelseyhightower It looks like this was based on, and targeted at the master branch (Telly) from the name of your branch, and what the pull request is targeted at.  I'm assuming that this is incorrect?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2839312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2843167", "body": "I cherry-picked, and merged into 2.7.x in e2aec6375fe0d25e31bade0e35f39ec25423e844 (cleaned up commit message).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2843167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2855627", "body": "I cherry-picked the two commits into a topic branch based on 2.7.x, since this looks like something that should be fixed in the current stable series.  The new topic branch was merged in 809ea0af9df5624a2d20c4a0402813707760b2af.  Thanks for submitting this, @koentje.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2855627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2855929", "body": "I agree with @ccaviness.  I think the better approach is to assume that things will continue as they are now (and were for the last major release), flipping the logic so that the versions that are explicitly listed are the older ones (which we reasonably know won't change) rather than (likely) having to explicitly add new versions as they come out.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2855929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2856175", "body": "So, how does this actually get rid of the missing sequence error?  The ticket mentions `This is due to setting of \u201c:id => false\u201d in puppet/lib/puppet/rails/database/schema.rb`, but neither the ticket, nor the commit message actually say why this is a problem, and how removing it fixes things.\n\nIs the root problem that the id column (and sequence) should have been created, and weren't being created?  Something else?  I'd love to see this explained in the commit message before this gets merged in (in addition to general commit message clean-up to get it in line with what's outlined in the [CONTRIBUTING.md](https://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md)).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2856175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2983203", "body": "@masterzen Nope, that went in as part of the DNS SRV stuff I was a part of. You're free of blame.  This time. ;)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2983203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3023784", "body": "So, what's not complete about it (other than not handling all of the English language)?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3023784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3025197", "body": "Left a couple of comments on the [ticket in redmine](http://projects.puppetlabs.com/issues/4872).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3025197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3025257", "body": "@bleonsfl I'm closing this pull request since it looks like you've since deleted your Puppet fork.  Do you know if there was a Redmine ticket associated with the change you were proposing?  Should we expect to see a new pull request at some point?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3025257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3036852", "body": "I'm in agreement with @nanliu that we shelve this pull request until more of the kinks have been discussed/worked out (preferably on the puppet-dev mailing list).  Closing this for now.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3036852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3036896", "body": "@duritong, just wanted to make sure you saw the comments left on the diff.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3036896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3037314", "body": "@jamtur01 - I think @nanliu and/or @daniel-pittman should be the one to do it, since they have already been discussing this, and already have expressed opinions on the matter.\n\nSo...no, I do not plan on bringing it to puppet-dev personally, since I have no particular opinion on this issue.  There's no good reason to keep both the [Redmine issue](http://projects.puppetlabs.com/issues/7917) and the pull request open when we have already decided that we're not going to use this particular version of the pull request (the pull request can always be re-used if desired once a final over-all plan has been decided on).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3037314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3037474", "body": "Hm...originally I was a bit worried about this change tacking the extension on to the resource name unconditionally, but the more I think about it, the better it seems (especially with the extension being taken from the source).  In the case where the resource name has the opposite extension from the source, tacking on the source's extension seems like a very good thing (even though it ends up being redundant in the case where the name and source have the same extension).\n\nThe change itself looks reasonable.  Any chance we could convince you to add some tests for it, too? ;)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3037474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3040044", "body": "Cool.  No worries.  I completely understand being swamped with other things.  Just wanted to make sure that you knew we did get a chance to look at this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3040044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3040408", "body": "Seems like the most reasonable thing to test would be that it does try to save a file with the appropriate suffix (though the rest of the filename seems rather unimportant).\n\n[spec/unit/provider/group/groupadd_spec.rb](https://github.com/puppetlabs/puppet/blob/master/spec/unit/provider/group/groupadd_spec.rb) seems to be doing something similar to what this would be looking for (checking for the arguments to `curl`).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3040408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3041375", "body": "I think there's something else that's going on, since that doesn't quite make sense.  According to [the documentation for create_table](http://ar.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M000125), not only should the sequence not be created, but the id column shouldn't exist at all in the table if `:id => false` is specified.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3041375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3055579", "body": "I cherry-picked the fix for `acceptance/tests/ticket_7139_puppet_resource_file_qualified_paths.rb` and merged it into master in 051cb74fc71fef086cf345fefe1718fbeeb79f55.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3055579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3055792", "body": "Sean,\n\nThis looks good.  I really only had a couple of minor comments, and one of them was just hoping that there was a better way to do something.  Sorry for taking so long to get back to you about this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3055792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3068015", "body": "This appears to break a  few of the tests for me when merged into the current master branch (94bdc38086e757f53573a88ce9ebec5d667ed9a4):\n\n```\nFailed examples:\n\nrspec ./spec/unit/type/file/content_spec.rb:346 # Puppet::Type::File::Content when writing from remote source should write the contents to the file\nrspec ./spec/unit/type/file/content_spec.rb:351 # Puppet::Type::File::Content when writing from remote source should not write anything if source is not found\nrspec ./spec/unit/type/file/content_spec.rb:357 # Puppet::Type::File::Content when writing from remote source should raise an HTTP error in case of server error\nrspec ./spec/unit/type/file/content_spec.rb:362 # Puppet::Type::File::Content when writing from remote source should return the checksum computed\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3068015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3071766", "body": "This pull is waiting on some updates discussed in the [Redmine ticket](http://projects.puppetlabs.com/issues/9879).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3071766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3073307", "body": "So, I don't think this change is the right way to fix this.  I think `git describe` is the right way to get the version, but always populating variables that are only used when running specific tasks is the wrong way to go.  The `@variable` declarations should probably go in a \"setup\" task that the others depend on.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3073307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3073890", "body": "I reverted the original commit, until this can be properly reviewed and merged.  Before this can be merged in my revert will need to be reverted (0022f4712748907f9cbac8ed6e0082b41014628a).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3073890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3084225", "body": "d04fb41f516570f1ab5ac03629a001aaec3cf4bf looks like it makes some changes to lib/puppet/util/instrumentation/listener.rb (and possibly spec/unit/application_spec.rb) that would be better suited for the previous commit?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3084225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3087443", "body": "Left a more detailed comment in the [redmine ticket](http://projects.puppetlabs.com/issues/5887), but the summary is: We're not planning to merge this into core at this time, but definitely encourage releasing this as a module.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3087443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3110866", "body": "I'm a bit curious about the three new faces introduced in 8dbbb908d2395836628311cbfc51f1c497cf6ceb.  It seems like it would make more sense for them to be a single instrumentation face, with listener, data, and probe sub-commands, and the appropriate sub-sub-commands under those.  Does the faces infrastructure not allow for this setup?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3110866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3111156", "body": "Thanks for all your work on this.\n\nRegarding the face consolidation, I don't know whether it's actually possible to have sub-sub-commands with the current faces infrastructure (I admit, I haven't done my homework here), so it was more speculation about the interface.  I wouldn't worry too much about consolidation, especially if the answer turns out to be \"possible, but not easily\".\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3111156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3114599", "body": "I think that this should be targeted no sooner than master (for release in Telly).  This is a very big change in behavior to how arrays are handled for properties/parameters.\n\nI'm closing this so it can be re-targeted at master.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3114599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3116590", "body": "Paul,\n\nThanks for working on this provider.  Sorry for taking so long to get around to reviewing it.  I had a few comments, but nothing major.  Let me know if you won't have time to address them.  It's all stuff that can easily be addressed when merging in the pull request, if you're busy.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3116590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3116803", "body": "Eli,\n\nDo you know if there's an associated Redmine ticket for this change?  We require a signed CLA for all submissions ([CONTRIBUTING.md](https://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md)), and the only way we currently have to track this is through Redmine (and the easiest way there is by looking for the badge icon next to people's name when the create a ticket, or comment on one).\n\nThe change itself looks absolutely reasonable.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3116803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3117020", "body": "Fixed up the commit message when merging.  Merged in 8ae917aaeabc47fe950e0d580adde2d28f373de7\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3117020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3118005", "body": "Eli,\n\nNo need to create the ticket.  Adrien was able to check in Redmine for me.  We're all set with the CLA.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3118005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3127255", "body": "Any chance we could convince you to write a test for this, too? I'd hate to see the behavior regress accidentally down the road.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3127255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3127418", "body": "I'll take it out.  I don't think we actually need to do anything special since yum can understand packages with epochs in either `name-epoch:ver-rel.arch` or `epoch:name-ver-rel.arch` form, and the former should just work if people wish to specify the epoch as part of the ensure value instead of as part of the name.\n\n```\npackage { 'foo':\n  ensure => '1:1.2.3',\n  provider => 'yum',\n}\n```\n\nvs\n\n```\npackage { '1:foo':\n  ensure => '1.2.3',\n  provider => 'yum',\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3127418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158628", "body": "So, I'm a little confused as to what this is actually testing.  It looks like it would belong in the type instead of the provider, if anywhere, though I'm not sure it's actually testing anything specific to the package type, or msi provider.  Looks like it's testing the generic behavior of types (that parameters/properties set with new are available from the resource via the hash accessor method).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/160206", "body": "Stale debugging statement?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/160206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195152", "body": "There's introduced trailing whitespace on this line.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195159", "body": "More trailing whitespace introduced here.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195161", "body": "It's not always <= 500.  The number is configurable by the end-user, and it isn't the same on all distributions.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195168", "body": "It may be better to state that it's an artifact of the internal implementation of Puppet rather than making any claims as to its permanence since there are not definite plans to do anything with/to it, even though there are some objections to its existence.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195192", "body": "It's a system level configuration, and I'm pretty sure the providers just let the system tools take care of it.  On Linux (Ubuntu) it's in `/etc/login.defs` defined by `SYS_UID_MIN` and `SYS_UID_MAX`.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/219593", "body": "Talking things through with Josh, it doesn't seem like this check is actually sufficient to limit to filesystems that will behave properly with setting the ACLs.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/219593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/224541", "body": "Talking with Josh, it sounds like this comment is a left-over from a previous version of this test, and should go away.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/224541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237442", "body": "So, what's the reason for switching `PKG_PATH` to a string from the original symbol?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237446", "body": "I'd be really good to have the double chomp explained in the commit message (and even better if there was a comment added explaining it in the code).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237450", "body": "It's not a big deal, but it would probably read better down here if version were initialized to `nil`, then it looks like it could be written as:\n\n``` ruby\nreturn '' unless version\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237467", "body": "I'm a little concerned about how the `return '' if version == -1` interacts with when this should actually raise on the next line, but that's mostly due to not knowing the BSD package behavior, and the lack of tests.  Adding testing around when this should raise, and when it should return the empty string would put my mind at ease.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237615", "body": "You're right that it's no longer necessary. It was needed (though wrong) before puppet resource was fixed to always create file resources using strings.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/237615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/267888", "body": "This test name seems a little misleading.  Since the value of the waitforcert setting _is_ the default, we're not really overriding it?  Maybe something more like \"should use the waitforcert config setting for the timeout when checking for a signed certificate\"?  The current name of this test has me expecting to see it read the config file from disk, which isn't really necessary.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/267888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/267889", "body": "Same thing as the comment about this test in agent_spec.rb.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/267889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/288329", "body": "Not a major thing, but unless `self.parse` needs to exist for the type/provider system here, it might be better to have a method name with a bit more semantic meaning.  Something along the lines of `parse_pkgin_line`?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/288329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/288383", "body": "`matching_package` isn't really needed here.  `#detect` will return the first element where the block returns true, so this could be written as:\n\n``` ruby\npackages.detect do |package|\n  properties = self.class.parse(package)\n  properties && resource[:name] == properties[:name]\nend\n```\n\nWhere this is the last thing in `def query`.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/288383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/288390", "body": "These three are really unnecessary given that the later tests will fail if any of these methods are missing.  We're usually removing tests like this as we encounter them since they don't really provide any extra coverage.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/288390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268090", "body": "This would probably be much clearer as something like the following, since you should be able to assign the source here, rather than having to stub things.\n\n``` ruby\n@resource[:source] = source\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271240", "body": "Right.  I hadn't noticed that it was a stub resource instead of a real one when looking at the diff.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271249", "body": "With the following change, it works as I was expecting (with all tests passing):\n\n``` diff\ndiff --git i/spec/unit/provider/package/pacman_spec.rb w/spec/unit/provider/package/pacman_spec.rb\nindex 7e2789a..721c230 100644\n--- i/spec/unit/provider/package/pacman_spec.rb\n+++ w/spec/unit/provider/package/pacman_spec.rb\n@@ -6,10 +6,7 @@ provider = Puppet::Type.type(:package).provider(:pacman)\n describe provider do\n   before do\n     provider.stubs(:command).with(:pacman).returns('/usr/bin/pacman')\n-    @resource = stub 'resource'\n-    @resource.stubs(:[]).with(:name).returns(\"package\")\n-    @resource.stubs(:[]).with(:source).returns(nil)\n-    @resource.stubs(:name).returns(\"name\")\n+    @resource = Puppet::Type.type(:package).new(:name => 'package')\n     @provider = provider.new(@resource)\n   end\n\n@@ -69,7 +66,7 @@ describe provider do\n           ftp://some.package.in/the/air\n         }.each do |source|\n           it \"should install #{source} directly\" do\n-            @resource.stubs(:[]).with(:source).returns source\n+            @resource[:source] = source\n             db = states(\"db\").starts_as(:not_synced)\n\n             provider.expects(:execute).\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271258", "body": "I'd really prefer the sequence, since we're not actually testing a state machine.  We're just testing whether one method is called after another one in sequence.  If you'd prefer, we can make this change when getting things merged in.  We need to change some things around anyway, since ec09f60 really shouldn't be it's own commit, and should be squashed into the commits that introduce the typos.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/281638", "body": "I'm a little confused what the last sentence here is actually saying (ignoring the extra period after \"stop\").  This is faster/easier than doing it manually?  There's a faster/easier way than using this method?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/281638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/281690", "body": "nonexistent\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/281690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/281697", "body": "Additionally: Should this raise, or just be a warning?  Is it really a problem if someone/something attempts to unsubscribe a listener that isn't there?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/281697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283280", "body": "Ok.  That makes a lot of sense.  Any chance of some of that explanation making it back into the comment in the code? ;)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283530", "body": "I didn't see this used anywhere.  Leftover code? Use case I'm not seeing?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283572", "body": "After reading on a bit further the pattern of `Listener.new(listener.new, pattern, event)` strikes me as a bit odd.  Why are we having people create a class we can instantiate to wrap inside of a Puppet::Util::Instrumentation::Listener, instead of having them subclass Puppet::Util::Instrumentation::Listener with us using an instance of their subclass directly?  I'm not sure what this layer of indirection buys us, but I could easily be missing something.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283574", "body": "More of a style question, but is there a problem with doing the following?\n\n``` ruby\ndef self.next_id\n  synchronize {\n    @id ||= 0\n    @id += 1\n  }\nend\n```\n\nJust seems kinda clunky using the extra variable, when `@id = id + 1` and `@id += 1` will both return the new value of `@id`.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283677", "body": "This `foo = @foo` pattern (also appears elsewhere) seems a bit redundant since it doesn't look like `foo` is being modified anywhere later in the method.  These should be removed in favor of using `@foo` directly, unless I'm missing something that necessitates this pattern?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283684", "body": "Seems like this should be a warning (at most) instead?  Not sure why trying to enable an already enabled probe should be fatal, but maybe I'm missing something?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283685", "body": "Seems like this should be a warning (at most) instead?  Not sure why trying to disable an already disabled probe should be fatal, but maybe I'm missing something?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284021", "body": "Ok.  It'd be good to have that reasoning (especially if it gives the side effects) in a comment above where this is done so someone doesn't refactor away the \"unnecessary variable assignment\", and accidentally introduce the undesired side effects.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284271", "body": "Kind of a nit, but this should probably be named using the singular `each_probe` instead.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284279", "body": "Probably worth adding a test here that it still stops the instrumentation when the original method raises an exception?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284286", "body": "Does this class declaration really need to be in a before block?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284293", "body": "instrumented\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284310", "body": "Is the idea of using nil for `:min` to account for values `< 0`?  If that's the case, would it make sense to do the same for `:max`?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284318", "body": "give back\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284331", "body": "`subscribed` and `unsubscribed` sound like they would be predicate methods (returning whether or not it is currently subscribed or unsubscribed), rather than methods to perform the actions \"subscribe\", and \"unsubscribe\".  These should probably be renamed to \"subscribe\", and \"unsubscribe\".\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284389", "body": "This is kinda vague.  Got any details you could put in the comment as to why it's non-portable, or what could go wrong on the non-portable platforms?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284398", "body": "Not sure if it actually matters here (for performance or otherwise), but if you're grabbing from an offset to the end of the string, you can use -1 as the final index.\n\n``` ruby\nreturn string[steps..-1].concat \" -- #{string[0..(steps-1)]}\"\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/284398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/287192", "body": "\"use a class other than Probe\"?\n\n\"use a distinct class than Probe\" isn't grammatically correct, and \"use a distinct class from Probe\" is a bit awkward.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/287192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301126", "body": "I was thinking more along the lines of\n\n``` ruby\ndef enable\n  if enabled?\n    warn \"Probe already enabled\"\n    return\n  end\n  ...\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/309511", "body": "It looks like 5231f6604a69dfe9b233fb02c9e100d4bb4753bd lost the initialization of `@id` here.  Is it not actually needed?  Is `#clear` always expected to be called first?  If it should go back in, I can do that when merging, since I'd like to go through and clean up a bunch of trailing whitespace introduced in 5231f6604a69dfe9b233fb02c9e100d4bb4753bd, b678cb43149e00cd2cf36cef250f145d81190808, and 0b77d5a33d1fb09b5bda7126bedbee07e1075376 anyway.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/309511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/309581", "body": "It's your call.  I'm fine either way.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/309581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305959", "body": "Minor suggestion, but what about re-using `locked?` here?\n\n``` ruby\ndef message\n  return File.read(@lockfile) if locked?\n  ''\nend\n```\n\nThough I'm curious about the explicit \"return empty string when not locked\".  Why not return `nil` in that case (IOW: Why not have the code below)?\n\n``` ruby\ndef message\n  File.read(@lockfile) if locked?\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305960", "body": "Probably better to re-use `locked?` here.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305986", "body": "More of a curiosity, but why protected here?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306245", "body": "How do you feel about the following? It feels a bit more semantic to me.\n\n``` ruby\nit \"should return false if already locked\" do\n  @lock.stubs(:locked?).returns(true)\n  @lock.lock.should be_false\nend\n```\n\n97a2cb82e7f817454aa9f599288eb4c0f6478dac\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306253", "body": "Minor nit about the test name, but shouldn't it only return true if it successfully locked, not just if it could successfully lock?\n\n97a2cb82e7f817454aa9f599288eb4c0f6478dac\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306294", "body": "The test failing would report a more meaningful message with something like the following:\n\n``` ruby\nit \"should create a lock file\" do\n  @lock.lock\n\n  File.should be_exists(@lockfile)\nend\n```\n\nAdmittedly, it reads a bit awkwardly, but the output when it fails is much nicer.\n\n97a2cb82e7f817454aa9f599288eb4c0f6478dac\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306398", "body": "This should probably manually create the lockfile and just unlock after, or make sure that the file exists after locking, but before unlocking.  The scenario I'm concerned about is if lock never actually creates the lockfile, then this test would still pass.\n\n97a2cb82e7f817454aa9f599288eb4c0f6478dac\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306481", "body": "Since we're already changing the logged message, why not format it so that it's a bit more obvious what the user supplied message is?\n\n``` ruby\nPuppet.notice \"Skipping run of #{client_class}; administratively disabled: #{disable_message}\"\n```\n\n86f0f127afdec61460ca9cc58cc851ab31b2b44c\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306482", "body": "'for an unknown reason' seems a bit misleading.  The way the final output will read makes it seem like Puppet can't figure out why it's disabled, instead of it being that the user that disabled Puppet didn't specify a message.\n\nI think it'd be a bit more friendly to default to something like \"reason not specified\".\n\n86f0f127afdec61460ca9cc58cc851ab31b2b44c\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/306482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307298", "body": "Since they're constants, you should be able to refer to them directly.  Was this not working?\n\n``` ruby\ntest_version = Puppet::PUPPETVERSION\ntest_file = Puppet::PEVersionFile\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/321015", "body": "Is the only trigger for `print_config?` that we care about working `--configprint`, or should `--genconfig`, and `--genmanifest` work, too?  If all we care about working is `--configprint`, then this test is fine, otherwise it should be changed to stub out `Puppet.settings.print_config?`, or have additional tests for those flags instead.  Not sure which of the \"if we care about more\" options I like better, since they both feel wrong in their own way (though the stub feels more like a unit test, but setting the setting feels like it better conveys the intent).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/321015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278693", "body": "This should be a \"normal\" variable inside of the block for munge, instead of a class variable, since it's not used anywhere other than inside the block to munge.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278702", "body": "Mostly thinking out loud here, but this feels a little dirty, since it will allow values such as \"Tueday\", and \"Wedday\", which is really just a problem inherent in using regexes to validate input.  I'd love to see a way to do the validation that doesn't allow bad values like this, but I can't think of one off hand other than just enumerating the full list, and doing something like:\n\n``` ruby\ngood_values = [(0..6).to_a, %w{mon tue wed thu fri sat sun monday tuesday wednesday thrusday friday saturday sunday}].flatten\ngood_values.include?(value.downcase)\n```\n\n...which feels bad for other reasons.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mchllweeks": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/87a6427b7de627357c107540195fd63921473431", "message": "(maint) Fix service_enable_linux.rb test to work with ec2 hosts\n\nFixed service_enable_linux.rb test to work with ec2 hosts"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6f4975706982985c90a823ad7661fee39b387d29", "message": "(maint) Skipping tests for ec2 hosts\nSkipping tests for ec2 hosts using facter rather then specifying the\nbeaker hypervisor since these tests will now be using abs to provision ec2 hosts."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/385c7388a9fd2e7d79f23f3f05871a804fffb982", "message": "(maint) Skipping tests for ec2 hosts\nSkipping tests for ec2 hosts now correctly iterates over the agents rather then hosts."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/c9e1af9968e7f3291ddb8d7a84a99104acae57f9", "message": "(maint) Skipping test if facter finds this is and ec2 host\nWe were skipping tests when the hypervisor was ec2. I have added support in QENG-5106\nto use abs as a hypervisor. This change will now skip tests for any ec2 host\nwhether created with the ec2 hypervisor or abs hypervisor."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b709e1628040fb697997f79304d0639da56a82d6", "message": "(maint) Adding method to skip tests for ec2 hosts\nWe were skipping tests when the hypervisor was ec2. I have added support in QENG-5106 to use abs as a hypervisor.\nThis change will now skip tests for any ec2 host whether created with the ec2 hypervisor or abs hypervisor."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/62e650c26200968b8214a91bf341830d97fcf84a", "message": "(maint) Adding method to skip tests for ec2 hosts\nWe were skipping tests when the hypervisor was ec2. I have added support in QENG-5106 to use abs as a hypervisor.\nThis change will now skip tests for any ec2 host whether created with the ec2 hypervisor or abs hypervisor."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ploubser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/9fc9a6ea51024d64f83433e90294368a334472db", "message": "(PUP-8227) Update transaction tests\n\nHere we change the before :each block into a let block to prevent state\nleaking across rspec tests."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20639041", "body": "It use to. The change came from Moses's feedback and this way we don't have to update the api every time we add another resource. \r\n\r\nI can dig his point and it's moving into slightly unknown territory for me. How much impact does changing the api have for us and for consumers? If it's a non trivial amount of work I'd definitely lean towards leaving it as generic as possible to keep us from having to do it semi often.  ", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20639041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20639103", "body": "Going to respond there.", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20639103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20639123", "body": "I prefer to be stricter. In the resource context anything we send that can't be identified is useless and making the guarantee that we'll send you something you can at least identify is a good one.\r\n\r\nYour call though. Am I overthinking this?", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20639123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "pcarlisle": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/8577b19f4b12b6c43baed68a5d4aed9f87803ed9", "message": "(maint) Fix tests for OpenSSL 1.1.0"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b620bbd690fa44f8818e2614e4f93fcc2c3b97fb", "message": "(maint) Don't exit on error in logging specs\n\nIf these tests encounter an error they will just exit without reporting\nit. Stubbing exit_on_fail causes the original exception to be raised and\nreported as a test failure."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/443b2179f419794ad1165e0a236f1389fc4da948", "message": "(maint) Make crontab provider suitable in specs\n\nThese tests fail when run on a machine where the crontab file is not\nsuitable. There's no need for this, so just stub it to always be\nsuitable."}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6536", "title": "(maint) Pass through text domain when loading translations", "body": "If this isn't passed through the tests can fail sometimes depending on\r\nthe order in which they're run. I don't think this is ever a problem in\r\nproduction but adding an argument with a default makes it a little more\r\nrobust.", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2996824", "body": "Do you know if there is a ticket associated with this? We'll want to clean up the commit message and include a ticket number if there is one, and add some tests. We can do those last bits if you don't have time.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2996824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2996904", "body": "This doesn't look like it will work as is, more discussion in the ticket http://projects.puppetlabs.com/issues/9357\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2996904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3020905", "body": "Agreed. That ticket seems more comprehensive and already has some discussion on the approach.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3020905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3022156", "body": "I cleaned up the commit message and fixed tests. Manually merged in eb0db02f463df166fd7a8d14d126ab98364f3c66.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3022156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3023463", "body": "Looks good. I have a merge conflict, can you rebase it onto current 2.7.x?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3023463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3024782", "body": "Tweaked the commit message slightly and merged in 5e9cf138aaf8a1686889495aceab02c1aaf280b9.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3024782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3024981", "body": "Seems good, but is there any chance you could add some tests for the new behavior?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3024981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3035798", "body": "@andrenth Thanks, I'm taking a look at this now. By the way, have you signed a CLA? If you comment on [the ticket in redmine](http://projects.puppetlabs.com/issues/9768) I'll be able to see, since it's automatically tracked there.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3035798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3036811", "body": "Yes.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3036811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3036832", "body": "Some links for that:\nhttps://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md\nhttps://projects.puppetlabs.com/contributor_licenses/sign\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3036832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3049210", "body": "Thanks! Unfortunately I can't verify that on here. Could you please make a comment (any comment) on the ticket in redmine? http://projects.puppetlabs.com/issues/9768\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3049210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3050959", "body": "Thanks. I've merged this with some modifications (make sure the test actually tries overriding defaults and fixed test failures in 1.9.2) in commit 379fdafdcc1cc07582a9a9ebca1200a417aab4c8.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3050959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3052020", "body": "Merged with amended commit message in 3406081b3d91bb796f8fa666d22a05054fda42f4\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3052020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3055423", "body": "Merged this into 2.7.x with 999355facb493509e3648845286d6fefe6f598fd\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3055423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3070886", "body": "I cleaned up the commits and added a little testing. Merged in a52eb6ecaa8dca06639c60f05f3204eefdb4d482\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3070886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3111211", "body": "I added the test fixes for this case and merged in bfcb5084d85238ec120a921b4ecd8a90a59bc94a\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3111211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3114441", "body": "We currently have https://github.com/puppetlabs/puppet/pull/210 under discussion, which includes tests and it looks like some extra functionality. Feel free to reopen this if that looks wrong, but for now I'll close it.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3114441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3114572", "body": "This is going to need tests\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3114572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3115689", "body": "This breaks most of the tests in reports/http_spec.rb\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3115689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3117506", "body": "There's a comment in the install method \"XXX: We don't actually deal with epochs here.\"\n\nIs this wrong now (should be removed) or is it still the case for install and does that affect the functionality of this patch?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3117506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3144826", "body": "@ilyash Please see my comment in the [redmine ticket](http://projects.puppetlabs.com/issues/11333).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3144826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/267990", "body": "Shouldn't this look in the catalog resources to see if target is managed?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/267990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271555", "body": "No error raised anymore if <2 arguments are passed?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/295380", "body": "Why do we ignore integers? Why not just look in the catalog for the user of that name or id? I'm not sure what the desired behavior is here.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/295380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/295382", "body": "There's a default user for the cron type (current user or root) so this test may not work, especially if run by someone named alice or bob. It only appears to work now because autorequire skips things not present in the catalog. That said I'm not sure how to test only the added code.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/295382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/297650", "body": "If the process was not killed by killproc then RETVAL may be nonzero, and the pid and lockfiles won't get cleaned up on the next line. If we've managed to kill it with kill -9 then we should probably do this anyway. Also I wonder if RETVAL is informative enough that it can be used in the logic here? Why do we use killproc for the first kill attempt but just kill for the second?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/297650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268102", "body": "\"recognizable\"\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268104", "body": "\"as a file...\"\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268105", "body": "\"should\"\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268145", "body": "I wonder if this would be simpler using sequences as in http://mocha.rubyforge.org/classes/Mocha/Expectation.html#M000053\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "suckatrash": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/32f42dc711bdf6d89997c6dd29b2cebd53ca8e57", "message": "(PUP-7968) fix indentation"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/bd2ee31988db86c4db8b6778953f5ae13b9c7cf0", "message": "(PUP-7968) add unit tests to account for the default to ensure"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kris-bosland": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5426e29ab25ee442380b5bd49d8d5aaa1346b194", "message": "Merge pull request #6520 from ericldelaney/task/5.3.x/PUP-8321/Update_warn_once_with_i18n_translations\n\n(PUP-8321) update warn_once() calls with i18n decorations"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e2f61392eb9258b2bd4d14aaf24e65c360b98fbc", "message": "Merge pull request #6509 from ericldelaney/task/5.3.x/PUP-8314/raise_ArgumentError_translations_part_4\n\n(PUP-8314) add decorations to raise ArgumentError strings part 4"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/8d9df399356fae8d5d0e667e0d14031470c3a799", "message": "(PUP-8342) Update report serialization/deserialization, schema, and schema version to include transaction_completed\n\nThis update adds transaction_completed to report serialization/deserialization, and schema, and updates the schema version."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/0e4a88ea03f51f9487ed63cde8ded96da7a5566e", "message": "(maint) Remove duplicate test for transaction_uuid."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/fe756b42f46da95fefa19fbd46232c41654cc3bc", "message": "Merge pull request #6492 from ericldelaney/task/5.3.x/PUP-8313/raise_DevError_translations_part_2\n\n(PUP-8313) raise DevError decorate strings part 2"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5553b039cf4582bbf48699679cbedc29797edfe5", "message": "(pup-8288) Report exceptions during transactions as failed status.\n\nWithout this patch, exceptions during a transaction that are not caught will not be marked as failed.\n\nUsers and tools that use exit status information are not catching these failures due to the incorrect information.\n\nThis patch creates a flag that must be positively changed at the end of the transaction flow to allow the transaction to be marked with success."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e0676fb4f7d37ffb3029caf3f310c83ef72fd2a0", "message": "Merge pull request #6325 from jearls/PUP-8106-add-mount-autorequire-for-mountpoint\n\n(PUP-8106) Make the `mount` type autorequire its `file` mountpoint"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b7f4e74ef00067d73ee99dc31caed43401fbd994", "message": "(maint)(PUP-5206) Update spec test so it fails on code before 173b5780"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7254cbd3deee5601398ea4f849b4bf74ef7269e2", "message": "Merge pull request #6444 from 8675309/task/5.3.x/PUP-8177/prevent_agent_requesting_locales_on_older_server\n\n(PUP-8177) prevent agent from requesting locales on older server"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gguillotte": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7bb20f2cefacaa2b7d959214cc8267c7b57f9d3a", "message": "(docs)(DOCUMENT-777)(PUP-8211) Clarify managehome.\n\nClarify when Puppet manages a user's home directory when the\n`managehome` parameter is set to true."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e0aeef69b85c279f74c370f8153d4e7a870f6596", "message": "(docs)(PUP-5392) Document managing a master bucket\n\nAdd a command demonstrating how to access a Puppet master's filebucket\nusing `puppet filebucket`, and separate and comment examples for\nclarity."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/793c47bda85bf05c916c08b87db821b802ca7f68", "message": "(docs)(PUP-8292) Fix a Markdown code fence."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/aa117010ac32c661fc702c2d20456f51a7bc4ce0", "message": "Merge pull request #6459 from gguillotte/5.3.x-DOC-3310\n\n(DOC-3310) Fix and expand splay docs."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5ceddff021dc6b61bf54541ed0db85876229ad16", "message": "(docs)(PUP-5206) Adjust -b text, add example."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3dc5d48679a9295558844b9ef784a40f1e48df98", "message": "(docs)(PUP-5206) Add -b and revise -l in filebucket help text.\n\n-   Add a description of the `--bucket` flag.\n-   Note that bucket overrides `--local` if specified.\n-   Update a docs site URL."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7cbf911af9e9ede4d4cfc80a52a391b00f2feed8", "message": "(docs)(PUP-5206) Note local filebucket default.\n\nPUP-5206 changes `puppet filebucket --local` to use $clientbucketdir by\ndefault instead of `$bucketdir`. Note this in the command's man page."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e78cc6bc25f8c2d130a1dbc086f15c4d1e2ab4fe", "message": "(docs)(DOC-3310) Fix and expand splay docs."}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6539", "title": "(docs) Update README links.", "body": "Update links to the docs site in the README, and point relative\r\ndeveloper docs links to absolute GitHub URLs in order to resolve issues\r\nwith YARD-generated docs and the Puppet docs site.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14305682", "body": "These links are pinned to the Puppet 3 documentation.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14305682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14305989", "body": "I'd say either `latest` or at least the relevant X version. We don't have an equivalent to `3` for Puppet 4. @nfagerlund ?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14305989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jsane": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/0df67c6333cdde0eee42409c56fe396cda23aa69", "message": "(PUP-4963) Puppet module build fails on FIPS enabled system\n\nWe now disallow the module tool operations of build, install, uninstall, and upgrade.\nThis is done to be able to provide an appropriate error message gracefully instead\nof the operations getting aborted due to FIPS prohibiting use of any\nunapproved algorithms like MD5 that above module operations use.\nModule tool's use of MD5 checksums cannot be changed easily without requiring a\nlarge number of design changes throughout."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/52bf2650efa701cbe1ec93f0356aefd0dd928739", "message": "(PUP-8066) Updated set of acceptance tests for fips compliance\n\nThese tests detect fips mode using \"fips_enabled\" fact to allow\nthem to execute on both fips and non-fips platforms.\n\nUpdated versions of acceptance tests to run in FIPS mode:\n - acceptance/tests/face/loadable_from_modules.rb\n - acceptance/tests/modules/build/build_agent.rb\n - acceptance/tests/modules/build/build_should_not_create_changes.rb\n - acceptance/tests/modules/install/basic_install.rb\n - acceptance/tests/modules/install/with_version.rb\n - acceptance/tests/parser_functions/calling_all_functions.rb\n - acceptance/tests/puppet_apply_a_file_should_create_a_file_and_report_the_md5.rb\n - acceptance/tests/resource/file/content_attribute.rb\n - acceptance/tests/resource/file/source_attribute.rb\n - acceptance/tests/ticket_1334_clientbucket_corrupted.rb\n - acceptance/tests/ticket_3961_puppet_ca_should_produce_certs.rb\n - acceptance/tests/ticket_4622_filebucket_diff_test.rb\n - acceptance/tests/ticket_6541_invalid_filebucket_files.rb"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e4276770ee571434526e4c1a407382dd7f1be1ae", "message": "(PUP-8141) Replace hardcoded use of md5 for FIPS compliance\n\nChanges to adjust behavior based on detecting fips mode dynamically\nusing fips_enabled fact.\n\nFiles changed\n -  lib/puppet/defaults.rb\n -  lib/puppet/parser/functions/fqdn_rand.rb\n -  [new] lib/puppet/parser/functions/sha256.rb\n -  lib/puppet/file_serving/http_metadata.rb\n -  spec/integration/provider/mount_spec.rb\n -  spec/unit/defaults_spec.rb\n -  spec/unit/file_serving/http_metadata_spec.rb"}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6532", "title": "(PUP-8356) Base fips specific behaviors without using facts", "body": "We need to adjust some settings based on whether fips mode is enabled\r\nor not for FIPS compliance. Till now the later was done using a fact (PUP-8141).\r\nHowever that created a dependency in puppetserver which cannot load facts in certain configurations like dev testing and running from sources.\r\nThis change implements fips mode detection using a local method instead of facter.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5855", "title": "(PUP-7519) Enabling rubocop securitycop scans", "body": "Background: Rubocop scans were not running as the various cops in .rubocop.yml were not kept uptodate with the latest definitions. This will enable only SecurityCop/YAMLLoad as a start to revive the scans in an effort to flag any inadvertent usages.  Additional security or other cop rules can/would be added in future.   \r\nRubocop do not have support for flagging YAML.load_file which would have been desirable. Likewise it is not necessary to mark the known instance of Yaml.load_file in Puppet::Util::Yaml to be ignored.\r\n\r\nNote that there are a couple of other YAML.load instances elsewhere so this may generate violations. If that is not desired this PR be merged after all these have been resolved/changed appropriately. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scotje": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/2881c6298081dc731e768fd2feb0c04d8ae7fb6b", "message": "(PUP-8082) Fix incorrect field padding in colorized PMT search results\n\nSince the PMT search output uses printf to pad the results into\nconsistent width columns, we need to insert the color modifying control\nsequences only AFTER the widths and padding have been calculated,\notherwise the padding calculations will be incorrect when the terminal\ninterprets the control sequences."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ehom": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/1827afb5bd86611c059f63ca500dec7f1a16b6d2", "message": "(docs) Outdated links on README.md\n\nFiled Ticket indicating 2 outdated links.\nUpdated those links.\n\nAlso:\n* beautified some of the sentences, adding commas for improved readability.\n* shortened a few instances of the hyperlinked text.\n* fixed casing on a few phrases."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "8675309": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/b6f44db6b1ffbcd7eaf55693c01912edab7f5d8a", "message": "Merge pull request #6507 from ericldelaney/task/5.3.x/PUP-8314/raise_ArgumentError_translations_part_3\n\n(PUP-8314) add decorations for raise ArgumentError strings part 3"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/44df5c1d5e02e4610f31049aaadd10e24d6ef3d7", "message": "Merge pull request #6501 from ericldelaney/task/5.3.x/PUP-8312/add_more_translations_for_puppet_err_and_warning\n\n(PUP-8312) add translations for err and warning calls"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/0f1b25a45f8c74d3f0a3813181f4948e6121ea9f", "message": "Merge pull request #6498 from ericldelaney/task/5.3.x/PUP-8331/add_translation_for_giving_up_message\n\n(PUP-8331) split and add translation for giving up error message"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e5e6a242928e5b06e0ec03e8a3abf65e15f37971", "message": "Merge pull request #6491 from ericldelaney/task/5.3.x/PUP-8313/raise_DevError_translations_part_1\n\n(PUP-8313) raise DevError decorate strings part 1"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/598d7016748637c44faf0a558d3c3d2fed60b486", "message": "Merge pull request #6471 from ericldelaney/task/5.3.x/PUP-8286/raise_ResourceError_translations\n\n(PUP-8286) add translation to ResourceError raises"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/7c29116766e33e119b67421912379cf302dc6c22", "message": "(PUP-8177) prevent agent from requesting locales on older server"}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6557", "title": "Pup 8225 bug 5.3.x environment fact overwrites enc value", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Magisus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/53aa50aaf6347ac166620f08224d072552e57dc3", "message": "(PUP-8249) Remove gettext-setup as a runtime dependency\n\nWe no longer rely on gettext-setup at runtime, instead using\nfast_gettext directly. This commit adds fast_gettext to the gemspec and\nmoves gettext-setup to the Gemfile, so it can be pulled in for its rake\ntasks used when manipulating translation files at build time."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/165a7997029582016c4a4277bec4829ae0d58626", "message": "Merge pull request #6481 from ericldelaney/task/5.3.x/PUP-8127/change_output_of_compiling_error_string\n\n(PUP-8127) change the error location output to be translationable"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6cae6c172cf51b7e0a78ee3b7ed73026a47edb90", "message": "Merge pull request #6462 from justinstoller/pup8266-pdb-acceptance\n\n(PUP-8266) Account for potential running PDB in acceptance tests"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "michaeltlombardi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/01eb6f65523dc29f3b9aab7bcc55bee3133d89cf", "message": "(MAINT) Remove Travis before_install step\n\nPrior to this commit the Travis config included a `before_install`\nstep, added in https://tickets.puppetlabs.com/browse/PUP-7920,\nwhich installed bundler at `1.15.4` to workaround\nhttps://github.com/travis-ci/travis-ci/issues/8357, which is fixed.\n\nWe discovered during research for MODULES-6339 that Travis now keeps\ntheir matrices updated with the latest compatible bundler install.\n\nFor all of the builds in this matrix Travis is currently using\nbundler `1.16.0` and the builds pass successfully.\n\nThis maintenance commit removes the pinned-version install of\nbundler and instead returns to relying on Travis to build and\nmaintain images with compatible versions. This also follows the\nadvice in the comment in the config file on this step."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ScottGarman": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/47f91dfaf642defafb34e27face4a1ced6f6c70e", "message": "Revert \"(PUP-8262) Revert changes which made non-existent SMF services return\"\n\nThis reverts commit 516595760379def5aa14140e1cca71d0db8e8a71."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/31030b3f615e14373427fb08fecaa94cf6372d7f", "message": "Mergeup 4.10.x -> 5.3.x\n\n* remotes/upstream/4.10.x:\n  (PUP-8262) Revert changes which made non-existent SMF services return :absent instead of :stopped\n  (PUP-8248) Fix service enable acceptance test for Amazon Linux\n  (PUP-8248) Confine upstart provider to Amazon Linux < 2017.12\n  (PUP-8248) Make systemd the default provider for Amazon Linux 2017.12"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/516595760379def5aa14140e1cca71d0db8e8a71", "message": "(PUP-8262) Revert changes which made non-existent SMF services return\n:absent instead of :stopped\n\nPrior to Puppet 4.10.9, non-existent Solaris SMF services reported their\nstate as :stopped, and could be defined as :stopped in Puppet code, to\nensure that unwanted services were not running, even if they were not\ninstalled. In Puppet 4.10.9, this behavior was changed to cause\nnon-existent Solaris SMF services to report a state of :absent. This\nchange was too intrusive for our LTS branch and has caused workflow and\nupgrade problems for users.\n\nThis commit consolidates the following reverts:\n\n    Revert \"(PUP-6797) service should check for smf service first\"\n    This reverts commit 3d7a3c4c1c6697047ae356c8765928f68618bc69.\n\n    Revert \"(PUP-6860) puppet on solaris 11 should support exists? for\nservices\"\n    This reverts commit dd30a54c9ff5fba9f980147b4a7af80442e009ed.\n\n    Revert \"(PUP-6797) service should check for smf service first\"\n    This reverts commit 3d7a3c4c1c6697047ae356c8765928f68618bc69.\n\n    Revert \"(PUP-6797) Update SMF tests for nonexistent service\"\n    This reverts commit 7085af0b7e508d86caa9e30bf44bed931d65f0df.\n\n    Revert \"(maint) (PUP-6767) remove redundant smf acceptance testing\"\n    This reverts commit b539fe581f372514e28f4c7e095d81dc8b0f500c.\n\n    Revert \"(PUP-8167) SMF provider: do not try to stop :absent\nservices\"\n    This reverts commit 7183a352288867392c1c934270c494e7b1270ab0."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/fbb3725879780a09974cf43715fa89df759e99e1", "message": "(PUP-8248) Fix service enable acceptance test for Amazon Linux\n\namazon linux is based on el: 2017.09 and earlier is based on el-6 (sysV)\nand 2017.12 and later is based on el-7 (systemd). In beaker we still use\nthe el platform name, so rely on facter checks when filtering which os\nversions use sysV vs. systemd for the tests."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/5c82f5661a93fe85b648ae171a3ca29da10e6ae0", "message": "(PUP-8248) Confine upstart provider to Amazon Linux < 2017.12\n\nSince we confine upstart to el-6 but not el-7, likewise confine it to\nAmazon Linux < 2017.12, the versions based on el-6."}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/763d01a2083efccada8d933dc69d944ce99b333c", "message": "(PUP-8248) Make systemd the default provider for Amazon Linux 2017.12"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/0d083ce6583ebabe17ec146eac7b37ef03a0370b", "message": "Merge pull request #6437 from puppetlabs/QENG-5106\n\n(QENG-5106) Skipping tests for ec2 hosts"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MikaelSmith": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/3e76e8531b7f787ad88c6ae3aa3bee83ba7aa0c9", "message": "Merge pull request #6479 from thallgren/issue/pup-8283/allow-non-data-task-params\n\n(PUP-8283) Allow non-Data task parameters"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/df1cc16ac6150d51de05bed6049540940f806dce", "message": "Merge pull request #6466 from thallgren/issue/pup-8269/reserved-word-resource-name\n\n(PUP-8269) Make evaluator accept reserved words as resource type names"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8233943", "body": "Looks like it is a problem https://jenkins.puppetlabs.com/view/Puppet/view/Master/job/platform_puppet_specs_windows-master/label=unit-win2012,ruby=ruby-2.0.0-p481/457/testReport/(root)/Puppet__Type__File/Puppet__Type__File_when_sourcing_should_ignore_the_source_metadata_values/\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8233943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8233949", "body": "Any thoughts on how to test that permission isn't inherited?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8233949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/11512342", "body": "This test is leaving a `jenny` module behind after running, affecting other tests.\n\nA better option would be to create a temporary `confdir` for this run.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/11512342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15329521", "body": "I pulled that from https://github.com/puppetlabs/facter/blob/2.x/ext/project_data.yaml#L35-L36. Not really sure what should be happening.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15329521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071670", "body": "https://tickets.puppetlabs.com/browse/PUP-5894\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071694", "body": "Yes. That's why it checks. We'll never write a temporary in that case, which is why the other has devfail.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071752", "body": "Puppet::Util::Diff. I think it's being included as a side-effect of this module being included after it consistently. I'll clean that up.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/16071752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17954620", "body": "@Iristyle any issues you'd expect backporting this?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17954620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "binford2k": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/4e77fbf849324f967dc12644b6cecc3bd922bb16", "message": "(docs) Reword description to clarify truncated text\n\nIf you read the docs page describing the user resource, the summary for\nthe `expiry` parameter says `The expiry date for this user. Must be\nprovided...`, which might lead a user to believe that the parameter is\nrequired.\n\nThis rewords the description so that the truncated version is clearly\nnot implying a required parameter.\n\nI think there's a high chance that PUP-7663 originated as the user\nmistakingly believing that they had to provide a value. (it's also\npossible that they've specified defaults in `login.defs` and are trying\nto override it for a specific user account.)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Iristyle": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/6fa26d11db9496d0ba19ee65e548103ff8e06c37", "message": "Merge pull request #6465 from joshcooper/master_mergeup2\n\nMerge 5.3.x to master"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/1677663b8308d964d34e2c7a9658d374ec67ec94", "message": "(maint) Remove AppVeyor OpenSSL update\n\n - The fix in place here was temporary due to AppVeyor having available\n   an older Ruby 2.4.x that shipped a buggy OpenSSL 2.0.3 with a race\n   condition. Without the upgrade to at least OpenSSL 2.0.4, installing\n   large gemsets would intermittently fail.\n\n   * Original RubyInstaller discussion at:\n   https://github.com/oneclick/rubyinstaller2/issues/68\n\n   * Ruby bug is documented at https://bugs.ruby-lang.org/issues/11033\n\n   * OpenSSL 2.0.4 contains the patch as of 8/8/2017\n   https://github.com/ruby/ruby/commit/b08e0ade5baacbc7d4754e9f6afe8d09a3e00bc5#diff-51a5e2412fcf851e37d1883b1ae53de5\n\n   * RubyInstaller 2.4.2-2 picked up the fix and was released 9/15/2017\n   https://rubyinstaller.org/2017/09/15/rubyinstaller-2.4.2-2-released.html\n\n   * AppVeyor issue was filed\n   https://github.com/appveyor/ci/issues/1790\n\n   AppVeyor began shipping updated Ruby in their 11/18/2017 release:\n   https://github.com/appveyor/ci/issues/1892\n   https://www.appveyor.com/updates/"}], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6513", "title": "(PUP-8337) Change Windows symlink? check behavior", "body": " - Previously, any file that returned FILE_ATTRIBUTE_REPARSE_POINT\r\n   in a call to GetFileAttributes would be considered a \"symlink\" for\r\n   Puppets purpose. This is relevant specifically to file resources.\r\n\r\n   However, Puppet cannot resolve the destination location for many of\r\n   the reparse point types, namely the following (some of which may\r\n   not actually resolve to a different path):\r\n\r\n   IO_REPARSE_TAG_HSM\r\n   IO_REPARSE_TAG_HSM2\r\n   IO_REPARSE_TAG_SIS\r\n   IO_REPARSE_TAG_WIM\r\n   IO_REPARSE_TAG_CSV\r\n   IO_REPARSE_TAG_DFS\r\n   IO_REPARSE_TAG_DFSR\r\n   IO_REPARSE_TAG_DEDUP\r\n   IO_REPARSE_TAG_NFS\r\n\r\n - Modify the behavior of symlink? such that Puppet only considers\r\n   reparse points IO_REPARSE_TAG_MOUNT_POINT, IO_REPARSE_TAG_SYMLINK\r\n   as resolvable symlinks.\r\n\r\n   The others will continue to be treated as regular files /\r\n   directories.\r\n\r\n - Existing symlink? behavior has been factored out to a reparse_point?\r\n   method responsible for only validating the file attribute contains\r\n   the reparse attribute.\r\n\r\n - This introduces some additional work once a path is determined as a\r\n   reparse point, but this should not happen regularly as reparse\r\n   points are typically fairly rare on Windows systems.\r\n\r\n - Change the behavior of exist? to function similarly to symlink? in that\r\n   only understandable symlinks will be followed. exist? will return true\r\n   for reparse points that are not mount or symlink reparse points", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6298", "title": "(PUP-7019) Map Windows codepages to Ruby encodings", "body": " - INCOMPLETE\r\n   includes some WIP .rb files that can be trashed once they're fully\r\n   integrated into the existing Puppet code in this PR\r\n\r\n - Make tests more dynamically understand how Windows codepages map to\r\n   Ruby encodings.\r\n\r\n   Ruby carries a bucket of different Encodings, some of which appear\r\n   to be pretty platform specific.\r\n\r\n   This can impact some tests.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5988", "title": "(WIP) ci:test:git for SLES11", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5971", "title": "(PUP-7648) Fix ci:test:git pre-suite on OSX 10.11", "body": "- A number of problems prevented ci:test:git from executing properly\r\n   on OSX 10.11:\r\n\r\n   * When performing a `gem install bundler`, system Ruby places the\r\n     binstub in /usr/local/bin. However, the SSH environment is not\r\n     configured with /usr/local/bin in PATH. There are multiple\r\n     solutions to this problem:\r\n\r\n      - Add /usr/local/bin to ~/.ssh/environment in Beaker - covered\r\n        in BKR-1139. This allows any additional binaries that might\r\n        be installed (homebrew, git, other Ruby gems with binstubs\r\n        such as puppet and facter) to be available. This is the most\r\n        effective universal solution but requires a Beaker release.\r\n\r\n        A workaround is in place to do this in 000_EnvSetup of the\r\n        pre-suite until Beaker changes land.\r\n\r\n      - Add to the host[:host_env] hash of environment variables via\r\n        a Beaker options file, so that PATH is augmented with\r\n        /usr/local/bin. Unfortunately this requires setting additional\r\n        hosts / options files on disk prior to any code running in\r\n        the Puppet pre-suite, to be picked up during Beakers host\r\n        initialization and injected into ~/.ssh/environment correctly.\r\n        Otherwise, the PATH would have to be manipulated in each new\r\n        SSH command. Due to beaker-hostgenerator commonly being used\r\n        to execute, its simpler to avoid this option.\r\n\r\n        Note that beaker-hostgenerator should also allow arbitrary\r\n        settings injection using {} syntax, but this doesn't appear to\r\n        work properly with ci:test:git and it's uncertain if it\r\n        properly handles the :host_env hash when writing to YAML.\r\n\r\n   * When performing `bundle install`, ensure Ruby is configured to\r\n     use OSX platform specific gems where possible. This impacts\r\n     the inclusion of CFPropertyList.\r\n\r\n   * Due to OSX SIP (System Integrity Protection) /usr/bin is not\r\n     writable and /usr/local/bin should be used instead. Override\r\n     Beakers default puppetbindir setting to /usr/local/bin and use\r\n     that as the --binstub directory when installing the Puppet source\r\n     with Bundler. binstubs should continue to use /usr/bin/ruby as\r\n     the interpreter.\r\n\r\n   * Similarly, when calling install.rb, provide --bindir as the same\r\n     /usr/local/bin as the system Ruby binstub dir is not otherwise\r\n     writable. Beaker helpers will fully qualify the path to puppet\r\n     using the puppetbindir setting already.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5780", "title": "(DO NOT MERGE)(maint) Set BUNDLE_SPECIFIC_PLATFORM=true", "body": "**This might be one to outright close, but note that without it we're not using platform-specific Facter which depends on CFPropertyList**\r\n\r\n - Bundler, under some circumstances, may not install platform-specific\r\n   gems.  For instance, using a bundle install of the Puppet Gemfile\r\n   will not install the universal-darwin version of Facter.\r\n\r\n - Set the environment variable BUNDLE_SPECIFIC_PLATFORM also\r\n   had to be set to properly use platform-specific versions of any\r\n   gems that have been referenced.  This will be the default behavior\r\n   in Bundler 2, and given platform-specific versions of Facter are\r\n   shipped - should always be the case for Puppet. Without setting\r\n   this Bundler will raise a warning during installation.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5717", "title": "(maint) Address incorrect argument passing within Puppet", "body": "These were discovered with the aid of RubyMines `Incorrect call argument count` inspection, which is just one of many inspections it supports in code analysis..  There were a lot of false positives that turned up, but these seem legit.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5636", "title": "(maint) Explicitly specify encodings where missed", "body": "Intended to be merged after:\r\n- [x] #5384 \r\n- [ ] #5547 \r\n- [x] #5593\r\n\r\nThis cleans up remaining locations where an encoding should be specified, but was not.\r\n\r\n\r\nImportant commit is just the last one - currently https://github.com/puppetlabs/puppet/pull/5636/commits/30a2ef7375a98d9eef6c0db643d289ff6873ff90 with +57 diffstat\r\n\r\nAs noted in #5660, https://github.com/puppetlabs/puppet/pull/5636/commits/5cf9f31c21e29a14fb87ea1d94613c43c7cdc3a2 should fix calls to `StringIO.new` to `.encode` files passed in, rather than specifying an `:encoding`, which `StringIO` ignores.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5547", "title": "(DO NOT MERGE)(maint) Minor file encoding changes", "body": "These are leftovers that remain after #5545 and #5384 have been merged.\r\n\r\nThey probably should end up in separate tickets, but put up to gather additional feedback.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5193", "title": "(WIP)(PUP-6184) Implement Windows SHGetKnownFolderPath", "body": "- Replace win32-dir helpers with `SHGetKnownFolderPath` API that uses FFI.\n  \n  This code is being added now so that internal usage of Dir\n  constants may be removed in the future.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5177", "title": "(WIP)(PUP-6585) Deprecate Puppet::Util.absolute_path?", "body": "In an effort to validate some UTF-8 code paths (and their use of `absolute_path?`), I noticed that we have this method kicking around that Ruby already implements.\n\nI also noticed that based on it's current implementation, it's being abused and allowing a lot of bad calls against it, since it doesn't verify the incoming object is a String / Pathname.  This is an effort to clean up all the errant calls as well, which are failing / succeeding for the wrong reasons when they pass in log objects, nil, floats, etc.\n\nNeed to understand https://github.com/puppetlabs/puppet/commit/94f5f53244eddb80bc4e8cb58859d12624b2daa9 more to see if we can really pull the existing method as it stands (it's the only call passing in `:posix` or `:windows`)\n\nThe original `absolute_path?` was only intended to accept path-like strings - see https://github.com/puppetlabs/puppet/commit/fb6df317016b8bbe44116e31ac5ededa4d1e0c75\n\nBut due to the fact that Ruby will regex compare any object, it's silently been the subject of torture over the years:\n\n```\n[1] pry(main)> o = Object.new\n=> #<Object:0x007fea81b8f448>\n[2] pry(main)> o =~ /foo/\n=> nil\n[3] pry(main)> !! (o =~ /foo/)\n=> false\n```\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5107", "title": "(WIP)(PUP-6490) Zero sensitive Win32 API strings", "body": "- Needs some tests\n\n/cc @joshcooper \n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5043", "title": "(PUP-6423) scheduled_task command case insensitive", "body": "- Previously, a scheduled_task command was treated as case sensitive,\n  even though Windows paths / commands are case insensitive.\n  \n  Adjust the task to be more Windows friendly.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4647526", "body": "sigh ;0\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4647526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5239296", "body": "Eh, you're in the `WindowsStat` class :smile_cat: \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5239296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6777297", "body": "Oops - my fault.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6777297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6788480", "body": "Well, that's a bummer...\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6788480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6869350", "body": "At this point in time, most of our errors with using `FFI.errno` in the `windows/error.rb` file are eradicated.  When Win32 API calls do not go through FFI, then FFI does not record the `GetLastError` value... :facepunch: \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6869350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/7052107", "body": "Oh Ruby... \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/7052107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/7734027", "body": "Please use the Puppet FileSystem abstraction which works properly on Windows:\nhttps://github.com/puppetlabs/puppet/blob/master/lib/puppet/file_system.rb#L255\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/7734027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14316862", "body": "Thanks, forgot to give you the heads up on this being an issue.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14316862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17958672", "body": "3.x is EOL and not receiving backports at this time unless security related.\n\nI should also point out that in the latest Puppet 4.5.3 (unreleased / under progress), there has been some work to the `scheduled_task` resource to fix a number of problems - see PR #5035, #5036 and #5038.\n\nThe code in this commit won't even exist anymore after the PRs are merged.\n\n/cc @kenazk @puppetlabs/windows \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17958672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17959110", "body": "PR #5036 was supposed to be merged prior to this guy... the lines above introduce test failures\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17959110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/22079572", "body": "This is fixed in #5781 ", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/22079572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jcpunk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/22312fd8d4e6d086d82e28ffcfcccf5993fc7cd1", "message": "(PUP-7685) Remove duplicate entries when listing user resource's groups\n\nWith some configurations of nsswitch, groups end up double listed. We now\nremove the duplicate entries since there isn't much we can do to\ndisambiguate things to show where the entries came from by the time we get\nthe information."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "justinstoller": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/694fe5938bfb35881a24874b91633ab909dc08f1", "message": "(PUP-8266) Account for a potential PDB set up in tests"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ekinanp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/87b1bbb594160517f143347fccaaa30fb3a2eac5", "message": "Merge pull request #6449 from ScottGarman/amazon-linux-v2\n\nAmazon Linux v2 Support"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/commits/f7412c65e23166e575ebfbbaa43142a615ebe802", "message": "Merge pull request #6443 from puppetlabs/maint/skip_test_ec2\n\n(maint) Skipping test if facter finds this is an ec2 host"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "theshanx": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/e14129ac53c392339a25a7207db8cf4cb0633358", "message": "(DOCS) Update error message\n\nWhen a user runs Puppet not as root, the error message starts them\ndown a certificate rabbit hole. This commit adds a friendly reminder and\nthe tests associated with it."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "drewablank": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/37ae1f801489e441f8aea4504886d07022cd093f", "message": "(PUP-3963) Improve module name invalid character warning\n\nImproved the module name invalid character warning to accurately report the two expressions that the check will accept - a module name (eg modulename) and a namespaced module name (eg author-modulename)."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "caseywilliams": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/cc70cdba72edc363ef2fe6c792cb6039287a38c8", "message": "Merge pull request #6439 from caseywilliams/5.3.x-ec2-skip\n\nCherry pick change to skip tests for ec2 hosts unconditionally"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "seanhussey": {"issues": [], "commits": [{"url": "https://api.github.com/repos/puppetlabs/puppet/commits/2647ca58aa0341c08d17f392f1cecffecb8254ee", "message": "(maint) Fix capitalization of \"GitHub\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tphoney": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6559", "title": "{WIP} FM-6694", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "blackknight36": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6556", "title": "(PUP-7046) Update dnf provider to support future Fedora releases", "body": "The dnf provider is hard coded to work with Fedora 22-25.  This update\r\nconverts the release list into a range which will work Fedora through\r\nversion 30.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wiccan2": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6525", "title": "(PUP-3802) Fix yaourt on Arch linux.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gdubicki": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6476", "title": "(PUP-4678) Allow yumrepo priority below the default", "body": "The default priority is 99 so limiting it with puppet to\r\n99 too made it impossible to add a repository with a lower\r\npriority to protect system packages. This change removes\r\nthis limitation.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lucywyman": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6475", "title": "(PUP-8298) Add invalid task error", "body": "Adds invalid task name issue type so that when an invalid task name is called from a plan there's an appropriate error type and message for it.  Relates to BOLT-261.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ekohl": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6438", "title": "[WIP] PUP-7474: Always generate the subjectAltNames per RFC2818", "body": "This ensures the there is always a subjectAltNames in a CSR with the common name. The allow_dns_alt_names option is changed to ignore the CN matching the subjectAltNames.\n\nCurrently it's untested hence the WIP flag.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sharpie": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6434", "title": "(PUP 7779) [#puppethack] Resurrect puppet facts upload", "body": "This changeset reverts pieces of [PUP-2560](https://tickets.puppetlabs.com/browse/PUP-2560) in order to re-add the ability to upload facts outside of a catalog request. Specifically, this patch re-adds the following functionality:\r\n\r\n  - The `puppet facts upload` command.\r\n\r\n  - The Puppet::Node::Facts::Rest terminus for saving facts to Puppet Servers.\r\n\r\n  - The ability to handle requests for the `/puppet/v3/facts` endpoint.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/3062203", "body": "This check will never get exercised if `current_path` contains no directories as the `next` statements on lines 140 and 141 will keep skipping to the next iteration.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/3062203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mwaggett": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6414", "title": "(maint) Ensure projects can handle fedora without the f prefix", "body": "This commit removes the 'fedora-prefix' from the filename in acceptance tests.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "treydock": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6411", "title": "(PUP-8223) Improve user and group forcelocal support", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nrwahl2": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6333", "title": "(PUP-8114) Make enabled state check accurate for SLES 11 boot services in redhat service provider", "body": "(PUP-8114) Make enabled state check accurate for SLES 11 boot services in redhat service provider\r\n\r\nWithout this patch applied, the redhat service provider is not idempotent\r\nin enabling SLES 11 boot services. These are special Sys V services beginning\r\nwith the string 'boot.'. When `chkconfig` is run against them, they print\r\n'<name>  B' instead of '<name>  on', so the existing regex does not match them.\r\nThus the redhat provider always sees them as disabled, and tries to enable\r\nthem on each agent run.\r\n\r\nThis patch adds the '<name>  B' condition to the regex.\r\n\r\n```\r\n$ chkconfig boot.kdump\r\nboot.kdump  B\r\n```\r\n\r\nBefore:\r\n```\r\n$ puppet agent -t --debug 2>&1 | grep -i kdump | grep -i enable\r\nNotice: /Stage[main]/Kdump/Service[kdump]/enable: enable changed 'false' to 'true'\r\n```\r\n\r\nAfter: \r\n```\r\n$ puppet agent -t --debug 2>&1 | grep -i kdump | grep -i enable\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lukebigum": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6317", "title": "(PUP-8098) adding 'acltype' as a valid property for a ZFS file system", "body": "Adds property 'acltype' to the accepted list of ZFS properties.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "barriserloth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/6175", "title": "(PUP-8015) Add a `puppet ssl` face for generating csrs without needing to connect to a master", "body": "This commit moves the puppet-agent-bootstrap code created by Adrien\r\nThebo (https://github.com/adrienthebo/puppet-agent-bootstrap/) to the\r\npuppetlabs github space, and adds rspec tests to go along with the\r\nbootstrap changes.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tkishel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5814", "title": "(PUP-6134) Explicitly locate gemcmd windows", "body": "On Windows:\r\n\r\nPuppet is unable to install a ruby gem anywhere other than Puppet's ruby.\r\nCaused by Puppet prepending its paths (including our gem) to PATH.\r\nThis fix removes Puppet's paths from PATH when setting :gemcmd.\r\n\r\n(A larger-scale solution would involve a path/target parameter to Package.)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "werekraken": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5699", "title": "(PUP-4039) - Improve yum provider handling of new package names", "body": "The yum provider will fail to find new package names due to `yum list` not refreshing metadata. #2654 caused this regression, but also implemented a much needed fix.\r\n\r\nThis change keeps the fix provided by #2654 and fixes new package name issue without extra manifest code. It also only causes extra steps to be taken when the initial `yum list` fails. Performance should not be impacted unless the package would otherwise fail.\r\n\r\nDetails available in [PUP-4039](https://tickets.puppetlabs.com/browse/PUP-4039).", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arioch": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5693", "title": "(PUP-7312) Confine systemd provider to /lib/systemd/system", "body": "/run/systemd/system does not exist when running Puppet in a chroot environment\r\n/lib/systemd/system is always available irregardless of the environment and is therefore a safe alternative", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinzent": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5578", "title": "(PUP-5587) Cache server and port when using SRV records (FEEDBACK NEEDED)", "body": "If one uses the use_srv_records setting instead of directly\r\nspecifying the puppet server the puppet agent creates for every\r\nHTTP request DNS queries.\r\n\r\nThis change caches successfull server and port data per service\r\nuntil a connection error occurs.\r\n\r\nshort stats about the DNS queries:\r\n\r\nDNS queries by puppet... \r\n\r\n* with puppet server direct configured: ~6\r\n* without this patch and SRV records: ~110\r\n* with this patch and SRV records: ~13\r\n\r\nThis PR is not finished at all yet. This is just gather  feedback if I should go on regarding this topic. :-)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abottchen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5422", "title": "(PUP-6996) Add correct permissions to auto-generated production environment", "body": "When Puppet is run, it will create the production environment if it\r\nis not already present.  If that run is done at the command line,\r\nthe resulting directory will be owned by root:root.  This is not\r\nconsistent with the ownership required by Code Manager and file\r\nsync.\r\n\r\nThis patch corrects the permissions to be those set in the Puppet\r\nconfiguration.  This prevents any possible permissions issues with\r\nother Puppet components.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mschuchard": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5224", "title": "(PUP-6637) New attribute :manage_mountpoint for Mount type", "body": "With this new feature, Puppet will be able to manage mountpoint directories prior to mounting or after unmounting without causing a multiple declaration error.\n\n(WIP)\nQuestions:\n1. Should the created mountpoint directory have 400 permissions, or is root:root ownership good enough?\n2. How does the mount type behave if the parent directory or mountpoint do not exist? Is that being verified somewhere or do I need to implement some code for it?\n3. What should be done if the mountpoint directory has contents after unmounting?\n4. The provider spec tests have a name of `'/'` for all of the test resources. This doesn't really work for any tests I would write for this new attribute. What direction should I go in for that?\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nacc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5133", "title": "(PUP-6531) improve service provider detection on Ubuntu", "body": "Rather than relying on version strings to determine which init-system is\nin use, use the fact that the presence of /run/systemd/system (on\nDebian-based systems generally, but I only can confirm for Ubuntu)\nimplies systemd is suitable.\n\nAdditionally, do not attempt to to use upstart in that case. However, if\nsystemd is not in use and upstart is the init-system (as detected by the\npresence of the appropriate binaries as currently), treat upstart as\nsuitable.\n\nNot-signed-off-by: Nishanth Aravamudan nish.aravamudan@canonical.com\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mcasper": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/5002", "title": "(PUP-6380) Fix HTTP file source for GET-only URIs", "body": "The Problem:\nWhen using an HTTP URI as the source of a `file` type, URIs that only\nwork for GET requests fail.\n\nThe Use Case:\nPre-signed Amazon S3 URIs include the HTTP method in the signature,\nwhich is usually GET for downloading files. This makes the URI return a\n403 when responding to a HEAD request, but a 200 when responding to a\nGET. Github uses Amazon S3 to store project 'releases', snapshots of a\nrepository at a certain release, usually prepackaged for different\noperating systems and architectures.\n\nThe Code:\nThe `file` type fires off a HEAD request to the file's source when\ntrying to get metadata for the file,\nhttps://github.com/puppetlabs/puppet/blob/master/lib/puppet/type/file/source.rb#L188.\nThrough the indirectors, this eventually makes its way to\nPuppet::Util::HttpProxy, when a method of `:head`.\n\nThe Changes:\nThere are two main changes here, the first being that we now pass both\nthe `uri.path` and `uri.query` to HTTP requests. URI query parameters\ncan contain necessary authorization tokens or signatures, and many URIs\nwill fail without them. Once support for Ruby 1.9 is dropped, the entire\nURI object can be passed into HTTP requests, rather than needed to\nreconstruct the URI.\n\nThe second change is when a HEAD request fails, attempt a GET request\nto see if that works. This should only happen in the file metadata case,\nas this is the only case I could find that specifically uses the\nHttpProxy class to make a HEAD request.\n\nIf there's a better way to do this/implement this or it's already being\ntaken care of, please let me know, as I'm still pretty new to this repo :)\n\nIssue ticket: https://tickets.puppetlabs.com/browse/PUP-6380\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "trevor-vaughan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/3687", "title": "(PUP-598) Add gpasswd support to Group provider ", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamtur01": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/434556", "body": "Simon\n\nCan you log a ticket with your commit please?\n\nhttp://projects.puppetlabs.com/projects/puppet\n\nGood catch and thanks btw!\n\nJames\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/434556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/559676", "body": "Bryan - we're trying to standardize on the following workflow:\n\nhttp://projects.puppetlabs.com/projects/puppet/wiki/Development_Lifecycle\n\nCould you please send the commit to the list too?\n\nThanks for this!\n\nJames\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/559676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/578204", "body": "Hi Keymon \n\nWe don't use GitHiub for patch submission - our process is documented here:\n\nhttp://projects.puppetlabs.com/projects/puppet/wiki/Development_Lifecycle\n\nThanks!\n\nJames Turnbull\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/578204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/579644", "body": "Closed in Redmine.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/579644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/636235", "body": "Hi - we don't use GitHub's pull requests for merging code.\n\nYou can see our process at:\n\nhttp://projects.puppetlabs.com/projects/puppet/wiki/Development_Lifecycle\n\nBut in summary we'd like you:\n1. To open a ticket in Redmine (http://projects.puppetlabs.com/projects/puppet/issues/new)\n2. Sign a CLA\n3. Send your code to our -dev list for comment!\n\nThanks for your commit!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/636235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1934211", "body": "Updated the thread on the puppet-dev list.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1934211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1959754", "body": "New pull request made with fixed tests.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1959754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2288113", "body": "Hi \n\nJust to mention - we have CONTRIB guidelines at:\n\nhttps://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md\n\nAlso can I confirm you've signed a Contributer License Agreement?\n\nhttps://projects.puppetlabs.com/contributor_licenses/sign\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2288113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2290579", "body": "Thanks. Let us know if you need any help or further information on the CLA.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2290579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2718489", "body": "It'd be great if the BSD provider had tests - https://github.com/puppetlabs/puppet/tree/master/spec/unit/provider/user - would you be interested in taking a stab at doing a basic set as well based on the useradd ones?\n\nI'd also probably squash a couple of these commits down to make it a bit cleaner.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2718489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2719347", "body": "That'd be great. Yeah fine to squash and re-push to branch since it's not merged etc.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2719347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784419", "body": "1. I'll amend the commit message.\n2. Are you familiar with the way methods are used in the init provider?  It's been tested by several users also.  Happy to discuss.\n3.  I'd need help to write additional tests.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2794555", "body": "Jacob - it doesn't need to be Apache-licensed unless it ships with Puppet - just an open source license is fine if it's a standalone repo.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2794555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3037120", "body": "Jacob - are you going to send a note to puppet-dev - This question is open with a couple of people and I'd like us to make a call.  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3037120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3128302", "body": "Okay. I'll look at the patch tonight.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3128302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/517489", "body": "I frankly welcome our new cybernetic insect overlords...\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/517489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/275944", "body": "I'll add some notes to the ticket.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/275944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400196", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Savar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/434601", "body": "See:\n\nhttp://projects.puppetlabs.com/issues/4860\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/434601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mmrobins": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/656391", "body": "Hi rodjek,  Thanks for the patch.  I know it's a small change, but if you could follow our dev process for submitting code it would be helpful to us:\n\nhttp://projects.puppetlabs.com/projects/puppet/wiki/Development_Lifecycle\n\nThis allows us to keep track of what we need to do, prioritize it, and communicate changes to our community better.  We are also asking contributors to sign a CLA to avoid licensing issues with the code base.\nThanks\nMatt Robinson\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/656391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/656396", "body": "rodjek,\nSame comment about the dev process for this pull request as the last one.  We wish there was a way to turn github pull requests off to avoid this confusion, but there doesn't appear to be.\nMatt\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/656396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/782432", "body": "eloyesp, we **are** collaborating, we just ask that patches not be submitted using Github pull requests.  As I mentioned to rodjek in another pull request, we outline the process for submitting code to Puppet here:\n\nhttp://projects.puppetlabs.com/projects/puppet/wiki/Development_Lifecycle\n\nWe get a lot of code submissions and have a lot of tickets to keep track of, so following that process makes it easier for us to track and manage all that change than the Github interface does.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/782432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1078221", "body": "Thanks for the patch, but the tests need to pass (http://projects.puppetlabs.com/projects/puppet/wiki/Development_Writing_Tests#Running+Tests) before we can accept it (currently 1 failure in the specs with your change that should be easy to fix), and we generally don't take pull requests from Github.  Part of the reason for that is that we need Community License Agreements signed before we accept contributions.  \n\nSee our Development Lifecycle Wiki for more info if you'd like to contribute: http://projects.puppetlabs.com/projects/puppet/wiki/Development_Development_Lifecycle\n\nWe're definitely looking for help on Ruby 1.9 compatibility, so it would be great if you continued to work on that.  Currently not all the tests pass under Ruby 1.9, but we need them to continue passing under 1.8.5 and greater.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1078221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1078260", "body": "Great, thanks.  Let us know if you need help.\n\nhttp://projects.puppetlabs.com/projects/puppet/wiki/IRC_Channel\nhttps://groups.google.com/group/puppet-dev\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1078260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1156427", "body": "Thanks for bringing this up.  Our support for Ruby versions is actually a little more complicated and the README and our docs need to be updated with this information.  Ruby 1.9.2 is supported for our 2.7.x code, which is still in RC and should be released in the near future.  More info here:\n\nhttp://projects.puppetlabs.com/issues/7506\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1156427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1970048", "body": "I think this is a great idea, although I'll have to run the code a bit more as I've had problems in the past once bundler starts getting inserted into rake files.\n\nOne thing is I don't think facter should be listed in the dev gem dependencies since it's possible, and rather common when developing to NOT have facter installed as a gem.  Instead it might be running from source (by putting facter's lib in RUBYLIB) or from a package.  Facter has loadpath issues if it's installed with different versions more than one way on a system.\n\nAlso, I think this is ticket 7143.  I'll update that ticket to point to this pull request.  http://projects.puppetlabs.com/issues/7143\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1970048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1970480", "body": "So this has happened to me before and it doesn't seem like it should, but when I check out that patch and run simple rake tasks, they're failing with the new bundler file even though the gem it's failing on is in a group in the Gemfile so shouldn't be required.  Maybe it's something with my setup, but it seems simple enough it shouldn't be.  \n\nAlso, with this patch I don't see the point of doing the `require 'bundler'` in the default rake task, since all it does is `rake -T` to print out rake tasks and shouldn't depend on gems being installed.  It makes sense for the `rake unit` and `rake spec` tasks though.\n\nHere's the output I get:\n\n\u2500[~/work/puppet]\u2500[matthewrobinson@mattmac]\u2500[20110901 - 10:16]-\n\u2570\u2500 [0]% rake\nrake/gempackagetask is deprecated.  Use rubygems/package_task instead\nrake aborted!\nCould not find gem 'win32-dir (>= 0, runtime)' in any of the gem sources listed in your Gemfile.\n\nTasks: TOP => default\n(See full trace by running task with --trace)\n\u256d\u2500[~/work/puppet]\u2500[matthewrobinson@mattmac]\u2500[20110901 - 10:16]-\n\u2570\u2500 [1]% rake unit\nrake/gempackagetask is deprecated.  Use rubygems/package_task instead\nrake aborted!\nCould not find gem 'win32-dir (>= 0, runtime)' in any of the gem sources listed in your Gemfile.\n\nTasks: TOP => unit\n(See full trace by running task with --trace)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1970480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3020256", "body": "I thought you were going to make these changes in the module-tool repo first so that people could use it as a face without upgrading all of Puppet?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3020256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3020414", "body": "Specs don't pass with this branch.  I get 20 failures and all originate from the same line.\n\n1) module_tool generate should generate a module if given a dashed name     Failure/Error:      Puppet::Module::Tool::Applications::Generator.run(@full_name)     ArgumentError:       wrong number of arguments (1 for 2)          # .-module-tool/lib/puppet/module/tool/applications/application.rb:10:in `initialize'\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3020414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3056364", "body": "Oops, don't know how Daniel's commit 11599d0 got on this request.  Will fix that before reopening.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3056364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3056589", "body": "Looks like you just wanted this to be a pull request against 2.7.x instead of master.  Ah, I see you've already reopened it as https://github.com/puppetlabs/puppet/pull/256\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3056589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3111419", "body": "Argh, forgot to make this againt 2.7.x.  Closing and opening a new one.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3111419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/330692", "body": "I thought it was covered by the other code, but apparently the retrieve_resource methods only adds the tags that are automatically added based on resource name and type, which is what I tested in the code.  Your question caused me to investigate further, and I do still need the explicit call for tag conversion, so I added a test to expose this and re-added the code.  This pull request now has that new code.\n\nThanks for checking on this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/330692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351699", "body": "They could be, but I think it's easier to read to have them next to where they're used to form the composite modulepath, and it's not like they're slow to create.  Otherwise you end up with a couple lets that all depend on each other and I found that harder to reason about - not much, but I still prefer keeping the related stuff in the before block.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "eloyesp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/781814", "body": "so you are **not** collaborating?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/781814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aredridel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1078251", "body": "Alright. I can do that.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1078251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bodepd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1415367", "body": "+1 from me\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1415367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nanliu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1728706", "body": "Squashed into a single commit. Originally split in two because spec test still needed some work.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1728706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1791464", "body": "You can configure this for apply/agent, perhaps we need an [apply] section:\n\n[main]\n  classfile = $vardir/state/apply_classes.txt\n\n[agent]\n  classfile = $vardir/state/classes.txt\n\nI agree this should be clearly spelled out in release documentation.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1791464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2288456", "body": "Brice already fixed this with #9164 #7982.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2288456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2291486", "body": "Do you happen to know the commit hash for Jacob's patch?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2291486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2291550", "body": "Found the commit and the other patch solved the issue with a different approach. I was trying to do multiline display for hash since I was writing a resource with a hash attribute that could have upwards of 90+ key/value, and also aligns => for readability.\n\n<pre>\nf5_monitor { 'https_443':\n  ensure                    => 'present',\n  manual_resume_state       => 'STATE_DISABLED',\n  template_destination      => '*:443',\n  template_integer_property => { ITYPE_INTERVAL            => '5',\n                                 ITYPE_PROBE_INTERVAL      => '0',\n                                 ITYPE_PROBE_NUM_PROBES    => '0',\n                                 ITYPE_PROBE_NUM_SUCCESSES => '0',\n                                 ITYPE_PROBE_TIMEOUT       => '0',\n                                 ITYPE_TIMEOUT             => '16',\n                                 ITYPE_TIME_UNTIL_UP       => '0',\n                                 ITYPE_UNSET               => '0',\n                                 ITYPE_UP_INTERVAL         => '0' },\n  template_state            => 'STATE_ENABLED',\n  template_string_property  => { STYPE_CIPHER_LIST        => 'DEFAULT:+SHA:+3DES:+kEDH',\n                                 STYPE_CLIENT_CERTIFICATE => '',\n                                 STYPE_CLIENT_KEY         => '',\n                                 STYPE_PASSWORD           => '',\n                                 STYPE_RECEIVE            => '',\n                                 STYPE_SEND               => 'GET /',\n                                 STYPE_SSL_OPTIONS        => 'enabled',\n                                 STYPE_USERNAME           => '' },\n  template_transparent_mode => 'false',\n}\n</pre>\n\n\nI prefer the readability, but I'll leave it up to the eng team to decide whether or not to accept this. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2291550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784150", "body": "Yeah, I didn't base of 2.7.x in this commit. jhelwig/puppet@9e4f0c71b8bd6df8ba9114c142107c031c9e44d9 looks fine. This can be closed and we should use the one you wrote.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2784150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2802327", "body": "This seems to be getting somewhat messy. I don't know if we should add an option that's applicable only to apply and not agent. If we intend to add this option I think it makes sense to have this available across the board. Especially now I'm running into some headaches with puppet device, I think it would be better to have a more consistent options across the board (we should support classes.txt for devices as well). \n\nSince anything else other than [agent] [main] [master] is considered an environment in puppet.conf. In discussing with Dan, it seems to make sense to support [device] [apply] and possibly other puppet faces, and move [environment] out, and I know that's way beyond the scope of this simple patch. Maybe worthwhile to have a quick design review on what makes sense for this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2802327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2843327", "body": "I vote to shelf this until we have a proper solution, since the intermediate solution introduce yet another option that's slightly different from other puppet application and it's something that would get deprecated anyhow by the final fix (of having proper application sections in puppet.conf).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2843327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/374442", "body": "Should I keep it as server => puppet? I was just showing an example and false is not necessary.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/374442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "slippycheeze": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1791274", "body": "Puppet apply can be used for any number of things, including one-shot modifications to a system.  Dropping all the data from regular runs just because someone ran something through it seems risky: your database server would stop being a database server until the next full run, which is probably not what you want.\n\nI am pretty sure this is an unresolvable problem, because we have a single piece of data (classes.txt) that is trying to represent something much more dynamic, the set of applicable classes (or, perhaps, successfully applied classes) of the machine at a point in time.\n\nMaking this optional, or writing to a separate file, would be much more acceptable.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1791274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1818171", "body": "I don't think this is the right strategy: it seems that you are patching the individual test scripts that show errors, rather than addressing this globally.  To me, if feels very much like that would be the right solution: then, _all_ tests that have ordering dependencies will work, or fail, on their own merits.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1818171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1818408", "body": "After discussion, the global behaviour is correct but too slow (2x to 3x slower) to want to do all the time.  \n\nhttp://projects.puppetlabs.com/issues/9026 captures the desire to have a mode where CI can run the expensive operations (and reveal our failures) without having to pay that when _most_ of the time it isn't bringing any huge benefit.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1818408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1881680", "body": "This looks great.  I had one comment about missing tests way back at the start of the series, but otherwise think this should go in.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1881680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1891800", "body": "Mostly questions this time around; thanks for doing the work to improve it.  Generally, it looks pretty good.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1891800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1895473", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1895473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1904833", "body": "...er, I don't see how the exec and service types do the right thing.  Won't they split based on the architecture of the master, rather than the client?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1904833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1933456", "body": "Discussing, rather than summary, should go to the mailing list, but:\n\nI am concerned that we still support RHEL4, which has a version of OpenSSL old enough that SHA256 wasn't supported upstream.  Given that we know the Ruby OpenSSL bindings to fail, rather than anything else, if you ask for an algorithm that doesn't exist in the underlying libraries, I don't have complete confidence that this is safe.\n\nWe should work out if we care about supporting OpenSSL that old (eg: RHEL4) for the release that master will be, and if so, what to do here.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1933456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1933561", "body": "Discussion on the mailing list, please, but:\n\nThis reverts a deliberate change made here:\n\ncommit ae520057280c2454bc44c64ac1e6686bf2eb086d\nAuthor: Markus Roberts Markus@reality.com\nDate:   Wed Apr 28 15:39:39 2010 -0700\n\n```\nWrite ssh_authorized_keys as user\n\nThis is a targeted fix to the issue of permissions when writing ssh authorized\nkey files by 1) requiring that an existing users be specified on the resource\nand 2) doing the write as that user.  It's based on Michael DeHaan's initial\nimplementation of Luke's idea, but with a number of simplifications (mostly by\ntesting necessary conditions as early as possible so the code isn't cluttered\nup with a lot of checks).\n\nThe tests in this version are modified slightly to remove some additional\nimplementation couplings that were added in master.\n```\n\nI have not taken the time to look, in detail, at this yet, but we should consider at least the greater scope of changes that were made in that commit before we absorb this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1933561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1937574", "body": "This is looking pretty good.  I would be very interested to see an example of this in use, in one of the faces.  That would make it clear what the API is, and verify that it operates as designed, which is about the last step remaining to confirm that this is suitable.\n\nThanks for doing this: this is a significant contribution, and very much appreciated.  It looks good so far.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1937574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1952115", "body": "Ahem.  Not for master, only for 2.7.x.  Sorry.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1952115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1959585", "body": "This has been reverted; it was incomplete.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1959585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1959954", "body": "Damnit.  Wrong target branch.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1959954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2252068", "body": "Damn.  Submitted from the wrong branch.  Will resubmit to fix that.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2252068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2314201", "body": "Overall, the bulk of this is changing from using symbols to strings for naming facts.  I can't see the benefit there; why has that changed?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2314201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2620406", "body": "Please see the discussion at https://projects.puppetlabs.com/issues/8120\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2620406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2819357", "body": "> This seems to be getting somewhat messy. I don't know if we should add an option that's applicable only to apply and not agent. If we intend to add this option I think it makes sense to have this available across the board. Especially now I'm running into some headaches with puppet device, I think it would be better to have a more consistent options across the board (we should support classes.txt for devices as well).\n\nKeep in mind that the device proxy will usually run on the same system as a real agent; we are clearly in a world where we want to expose this information to users somehow, and where we need multiple instances on a single machine.  Just `classes.txt` isn't cutting it any more in this new world.\n\n> Since anything else other than [agent] [main] [master] is considered an environment in puppet.conf. In discussing with Dan, it seems to make sense to support [device] [apply] and possibly other puppet faces, and move [environment] out, and I know that's way beyond the scope of this simple patch. Maybe worthwhile to have a quick design review on what makes sense for this.\n\nI don't think this is going to be a _quick_ design review.  Even if it is, it won't be in the hands of the customer for, oh, at least one major version release, and probably two, since this is a wildly incompatible change.\n\nSo, what should happen with this request in the interim?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2819357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2942901", "body": "On Tue, Nov 29, 2011 at 11:00, Josh Cooper\nreply@reply.github.com\nwrote:\n\n> Prior to #2848 (CVE-2011-3872), if Puppet[:certdnsnames] was not set,\n> puppet would add default subjectAltNames to any non-CA cert it\n> signed. The subjectAltNames were of the form:\n> \n> \u00a0DNS:puppet, DNS:<fqdn>, DNS:puppet.<domain>\n> \n> The fix for #2848, prevented implicit subjectAltNames from ever being\n> added. However, this is desirable behavior when bootstrapping the\n> initial puppet master.\n\nThis is a necessary fix, but the approach isn't perfect.  Josh is\ngoing to rework it to better match our desire to have explicit rather\nthan implicit behaviour around SSL certificates and requests.\n\n## Daniel\n\n\u238b Puppet Labs Developer \u2013 http://puppetlabs.com\n\u2672 Made with 100 percent post-consumer electrons\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2942901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3053241", "body": "This looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3053241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3067867", "body": "The minor string tweaks should probably get in, but they don't need to block actually fixing the bug.  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3067867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3145669", "body": "This change looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3145669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1777391", "body": "That won't work on Windows; see https://github.com/puppetlabs/puppet/blob/master/lib/puppet/util.rb#L193 for a better way to handle this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1777391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/102333", "body": "Hey.  Thanks for the contribution; we probably need to fill out that test before merging.  Otherwise it would be all too easy to revert the behaviour. :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/102333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/102350", "body": "I ended up taking a closer look at the testing code, and I got nothing.  The obvious choice, of ginning up a report in the right state, and testing that the function returns, wouldn't add much value without a negative `expects`; mostly, it looks like the code should go in without the test being filled out at this time.\n\nI am going to leave this open for a bit longer and see if anyone else has a brilliant idea, though...\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/102350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158481", "body": "I believe this is wrong for Win32 support, and `root?` knows more about that platform.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158489", "body": "I think that this should delegate caching to the underlying layer, since this release will have a Facter release that handles that effectively nearby.\n\nAt the very least it should detect if it should delegate caching to the indirection, which allows the endpoint to determine the most appropriate TTL, etc, for a fact value.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158490", "body": "Shouldn't this happen implicitly, rather than by extending the ABI of the terminus in a non-standard way?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158491", "body": "Should this code even be doing that by hand?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158495", "body": "....sooo.  Now the testing that we can load facts from disk doesn't actually load facts from disk.  That doesn't fill me with comfort that these tests are worth anything.\n\nIf they really are too slow to use, we should probably just delete them entirely rather than stubbing out fundamental parts of them.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/259502", "body": "Needs the trailing '.' escaped in the regexp there, I think, since it will otherwise match any character; can we perhaps use Facter or something to get at the appropriate details for hostname, fqdn, and domain name instead of reinventing their logic?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/259502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270484", "body": "This line should not be required, FWIW.  Not that it needs be changed before merge or anything.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270487", "body": "This, unlike most of our faces, probably deserves a `1.0.0` version number; it is actually a complete and reasonable interface to the task it does, right?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270495", "body": "Will anyone ever use a different root path for that module?  I have trouble imagining it, at least inside the face, which suggests we would be better off pushing the `root_path` bit down into the contained code.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270497", "body": "Technically, we return the string version, and the comment might confuse someone by mentioning `print` itself.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270501", "body": "It would be much more awesome if this showed what the output looks like.  Either the table version from `git status` or an actual example with files named to indicate what their present means would be optimal.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270570", "body": "It would be awesome if this included detail on the format of the hash, focused on what a developer might consume.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270572", "body": "Output, please.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270573", "body": "Output please.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270577", "body": "`return_value.map(:to_s).join(\"\\n\")`\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270581", "body": "It would be awesome if we could show _where_ that was in this help text.  That looks like smart software.\n\nI am not sure if we have access to that data, and if it is even remotely hard don't bother, but if you can ... totally awesome!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270583", "body": "Output, please.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270592", "body": "Spelling out the entire syntax for that versioning language somewhere would be essential, really.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270597", "body": "Including examples of more complex version matching syntax would be awesome; right now I can easily imagine getting it wrong, and the example should spell that out solidly.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270600", "body": "It would be nice if this returned a hash with case-folded symbols as keys, rather than strings.  (In case I forget that by the time I get down to the code that produces the content.  (I believe we have a utility function to do that, too.)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270610", "body": "It is probably worth checking, at some point, how we handle this in the core of Puppet, to see if we can reduce some duplicate logic.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270617", "body": "Using fully qualified module names would be more comfortable, since it is clear which Metadata class you mean.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270627", "body": "We should have a bug filed, at least, about rewriting this code to be a regular library driven by the face, rather than being an old-style puppet application that we invoke in strange ways inside other applications.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270644", "body": "I didn't see handling for `SystemExit` exceptions in your face, which means that this could terminate the process unexpectedly.  That probably isn't the error handling strategy of choice; it would be good to check for any other instance of this, or `exit`, and clean them up.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270647", "body": "This is a potential security hole: it will execute any instance of `tar` on the users path; can't we either do it in Ruby, or qualify the path for the platform?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270653", "body": "It would be good to use at least SHA2, and ideally to plan for multiple checksum types, as we merge this in.\n\nIt isn't essential, and I don't know what other constraints are out there on this, so if that is hard just turn that into a bug stating we need to attend that also.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270655", "body": "It would be good to enforce that formatting here, then, when the value is set.  (That is, a custom setter method.)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270659", "body": "If it doesn't break compatibility, it might be worth renaming this to something less easy to confuse with the full name of the _user_ who wrote the module.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270663", "body": "We had a default license for faces; I would be inclined to follow that here.  I believe that it is \"not for distribution\", but we could talk to our lawyers and see if we can infer licensing from the users action by default.  Totally a business decision, though, but `UNKNOWN` feels kind of wrong as a default value...\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270666", "body": "Honestly, simple types (eg: Hash) are frequently the best.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270670", "body": "It would be awesome if the name reflected that it was the builder / reader DSL for the Modulefile.  That was totally non-obvious to me, and I wondered why it was redundant to the metadata object.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270674", "body": "If the metadata object doesn't, this should do syntax checking and fail with clear errors.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270680", "body": "Should that be a Puppet setting instead, allowing users to change this in the field if, eg, we move the forge, or they want to interact with a third party installation?  Seems like a cheap change to me, and worth it for the added flexibility if we have to break compatibility.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270683", "body": "`contact` is a very odd way to spell `make_http_request` or similar, which is what this actually does. :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270688", "body": "Shouldn't this be a consistent hash with the other hashing we do in this code?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270691", "body": "We should probably also encouraging documenting licensing, developer contact details, and including examples by putting stub content into this file.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270692", "body": "This _entire file_ obsolete if we use rspec 2 in modules, which we absolutely should.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270696", "body": "We shouldn't be doing that; better follow the pattern in the 2.7 or master rspec tests in Puppet for doing this sort of stuff.  (Ideally, though, you shouldn't fiddle the load path at all in your module stuff.)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270699", "body": "Not assuming gems, and using a 2.\\* release, please.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270702", "body": "This should include further notes about how the heck the users do more with these.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270794", "body": "This, and the users of it, seem likely to cause trouble if someone tries to consume the Ruby API to the module tool that Faces provide.  At least, if they do that in, say, an automated way.  It would be good to have something to turn _off_ the interactive bits so we could, eg, consume this same code in the console web application.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270805", "body": "This file seems pretty damn redundant to, y'know, just doing it.  (eg: `URI.parse(input.to_s)`, or just doing the same test inline, or better yet, demanding a URI object inside the code, and doing conversion at the boundaries where they have the context to understand what inputs they get.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270820", "body": "`stub` and `mock` objects should always have a unique name, so you can identify what blew up in stack traces and stuff.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270827", "body": "Is this actually the same set of semantics as our SemVer stuff in faces?  Can we unify them?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272330", "body": "I mean the later: we should generally prefer symbol keys in our hashes, because they are less cumbersome to work with that strings, while we are inside the code.  Since this isn't a data interchange format, that should be reasonable.\n\nOTOH, looks like this is from the original, and that sounds like lots of work, so you can just ignore it for now. :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274124", "body": "Ultimately, we want to guide the user through improving in easy steps, and ideally in steps that they can't miss.  I am hampered by the fact that I have zero idea how you would test a Puppet module.  ;)\n\nIf there is something the user should do - something their first test should cover, something they should read, whatever - put it here, in comments, so when they open the file they see \"you should do X, Y, then Z\" right in front of them.\n\nThat helps guide someone who opens this file down the right path, telling them what their next step should be.  (It also helps if, say, a company has review of module changes for the reviewer to know what they should have looked at, if the template is committed unaltered.)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274160", "body": "OK.  I can accept that; it isn't worse than our behaviour around other commands we execute from providers, I guess.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278090", "body": "It would be good if this said _why_ that was important, not just that it was.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/300589", "body": "It looks like this, the original line, duplicates the default behaviour of `Resource#ref`.  It would be better, I think, to collapse this to just always use `ref` unless there was some strong reason to avoid it?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/300589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307420", "body": "There should be a standard version of this in the existing test helpers in Puppet.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307425", "body": "Ahem.  This isn't strictly required.  Attached to the right line this time.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307426", "body": "You should be using the `let` method supplied by rspec here.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307431", "body": "This is extremely fragile.  I would rather you worked out an implementation that would allow this test to use a real, physical file on disk to safely test this.  That suggests some sort of mutable value for the file to check, rather than a constant.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/246598", "body": "Hey, Zach.\n\nCould you rewrite this to use the in-Ruby `File` and `Dir` (or `Pathname`) modules instead of shelling out?  That is the only shortfall I can see with this code.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/246598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/349162", "body": "This isn't going to block merge or anything, but is there a global rule we should be applying here?  Should every file read in Puppet end up using `binread` now, or something?\n\nIs there any way to optimize that - can we detect the platform and patch the File class to force binary reads on Win32 or something?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/349162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351626", "body": "It doesn't look like these get mutated, so they could probably be `let` methods, right?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351630", "body": "Ditto, the `let` thing.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351685", "body": "These should probably be `let` methods instead.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351688", "body": "It would be great if there was a pending test for this, along with a ticket number, so that we can more easily identify that it is still outstanding, and more importantly, what the expected behaviour was when you wrote the comment.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/351688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364681", "body": "Convenience: it would take substantially more duplication of data to have the _right_ order of processing imposed everywhere if they can't be naturally sorted into the pattern that the tests were written assuming that a hash would process keys in.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364786", "body": "They can't be nil, but they don't implement a sort order.  I will push an update to fix that.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/374297", "body": "Hey.  That change looks wrong to me, for production code.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/374297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376778", "body": "If that changes, it must change in the core of the logging system, not just for faces.  It also needs to change over a major release because, for better or worse, it is potentially compatibility breaking.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376785", "body": "This seems unused in the code.  Why is it here?  It makes me nervous as changes go, because having _any_ knowledge of the internals of the logging subsystem is an invitation to the \"changes to unrelated code break logging, and vice-versa\" failure mode.\n\nWorse, it looks like it is creating a new instance regardless of how logging is configured by the user, tightly coupling faces with some of the implementation of logging in a more detailed way.  Now, a change to the console code that was platform specific or that assumed only one instance existed because of promises in the rest of the logging code can break this, and vice-versa.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376788", "body": "Why is this here?  This is absolutely, without question, not something that is the responsibility of the face.  If it lives somewhere it is properly in the logging module that gets mixed in, or something similar.\n\n(This, of course, is also a potentially breaking compatibility issue, which is another reason a change that scale needs to go into a major release.)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376802", "body": "This sort of conditional behaviour adds enormous complexity that will hurt our users, in terms of having to document the different behaviour, explain why, etc.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376806", "body": "This is a complete failure on Win32, where we don't support colour output.  Now there is no way for a user to distinguish an error or a warning.\n\nNot that this is any better on Unix, where you colour both of them the same colour.  Arbitrarily declaring that warnings and errors are of equal severity for all faces is ... an exciting decision, and I would love to know what justified it?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376810", "body": "This looks like it might have deeper ramifications if someone looks toward HTML output in any way other than visually.  How confident are y'all that this won't break someone's scripting around the content?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376819", "body": "Since you are in the area already, can you explain why there are all these constants, and then a map that engulfs them, where you define the same colours by different names?\n\nWhen there was a distinction of semantic markup and colour, that made sense, but now that you have entirely abandoned that in our logging, why retain the extra code?\n\nFinally, are you confident that we want to abandon all semantic markup of content in our logging in favour of arbitrary colour picked by every caller - at least, for spot colour?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/376819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377128", "body": "That seems like a better default, especially given we use that as our default server name. :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378268", "body": "I don't see a license for this. :(\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378270", "body": "I don't see a license for this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378271", "body": "I don't see a license for this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378272", "body": "I don't see a license for this, but also, why are we duplicating the core tempfile library?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378273", "body": "I don't see a license for this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378276", "body": "I don't see a license for this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378277", "body": "I don't see a license for this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377048", "body": "Those should just change the setting, rather than stubbing.  That was the traditional way to do this, but it blows up lots of code randomly, which is ... less than desirable. :)\n\neg: `Puppet[:diff] = 'foo'`\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377055", "body": "Can we make this test the behaviour for both platforms regardless of where it is run?  (eg: stub the windows bit, or whatever, and check?)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377057", "body": "Feels like this should check for a `nil`, and probably generic false, value as well as empty.  You won't get that invoking from the defaults, but you might with, eg, a face, or something like that.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377061", "body": "It would probably be nice if this documented the platform behaviour, and ideally suggested where to get the command to enable that for Windows, I think.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/377061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386389", "body": "We probably want to deal with the whole LC_\\* suite, so that LC_NUMERIC doesn't mess us up later, and neither do any others.  (By \"us\" I mean, third parties, mostly)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386390", "body": "Might be nicer if that was a named option.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386392", "body": "s/available/used/ I think, which is safe enough in the context of Puppet.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386397", "body": "Might be worth setting only LANG and LC_ALL, and deleting any others.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386486", "body": "Fair point.  I think the right implementation is that we delete all LC_\\* variables, then add LANG and LC_ALL set to C, which should give the right overall behaviour.  Even if I didn't express that well before. :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/399214", "body": "Ruby convention is to use `do` and `end` on multi-line blocks.  This doesn't block merging, just for future reference.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/399214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400062", "body": "Why are you duplicating this out of Facter?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400066", "body": "Since this is a static copy, can't we just install the external file directly?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400072", "body": "Does this need to be different to the Unix configuration examples?  If not, can we reuse those?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400086", "body": "That feels wrong to me.  Shouldn't each project build an indepentent MSI, and then an over-arching installer aggregates them?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400087", "body": "Shouldn't we be able to build locally?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400089", "body": "Then you should absolutely document it, and ideally, do that in a way that makes it clear that is intentional and necessary.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400090", "body": "That seems like a very weak reason to make a mess here.  Is there some compelling reason we need to support earlier releases of Facter with a new platform installer?  If so, can't we work around this some other way?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400180", "body": "More conventional Ruby would be `ScheduleScales`, since this is a constant.  I would totally merge a change that used that style.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jeffmccune": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1792928", "body": "Daniel,\n\nI'm in agreement with Nan.\n\nWe do make claims that puppet apply is a \"first class citizen\" and community members like Jordan Sissel heavily rely on puppet apply being feature complete with puppet agent.\n\nFurthermore, puppet apply is more suitable for situations like Vagrant where a full master is not avaialable or necessary.\n\nFinally, as we integrate more with MCollective, the classes.txt file becomes ever more important for filtering.\n\nFor these reasons I think we should still write the file and we should write it to the same file the agent writes to by default.\n\nIf the end user desires, we support writing to multiple files as Nan illustrated above.\n\nI'll re-open this once.  If you still disagree, please feel free to close the pull request and I won't re-open it.\n\n-Jeff\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1792928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2124948", "body": "Thanks for digging into this brice.  The unit and spec tests are passing just fine for me now.  I've merged this into 2.7.x.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2124948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2713358", "body": "@kelseyhightower Based on Daniel's feedback is this pull request still valid?\n\nI'm just perusing through old public pull requests and noticed this one.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2713358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2714026", "body": "Closing based on Kelsey's recommendation.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2714026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3057419", "body": "@daniel-pittman I've added the DEVELOPER_README we talked about on IRC.  I also updated the comments about the encoding strings.  Would you mind merging this unless you have any more comments?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3057419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3072344", "body": "@masterzen Thanks a lot for reading the README closely and providing feedback.  It's super helpful.  I fixed the document in #261\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3072344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1598774", "body": "On Wednesday, July 18, 2012, vojtekb wrote:\n\n> why is '/' illegal?\n\n/ is not illegal.  Puppet behaving as if / is illegal is a bug and we will\nfix it as soon as possible.\n\nWhat version of puppet are you using?\n\nWe are using  externally signed certificates for our puppet setup. Before\n\n> this change it works perfectly, with this change we get the following error:\n> \n> err: /File[/var/lib/puppet/lib]: Failed to generate additional resources\n> using 'eval_generate: Certname \"/c=nl/st=noordholland/l=amsterdam/o=some\n> company/ou=tech ca0 (root ca)/emailaddress=tech@somecompany.comjavascript:;\"\n> must not contain unprintable or non-ASCII characters\n> \n> There are indeed slashes in the name but they were added by legitimate\n> openssl operations.\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/puppetlabs/puppet/commit/bd2820ec6ee8a45f57fcc57f79dddde0062cdca7#commitcomment-1598592\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1598774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1599058", "body": "@vojtekb Please watch [#15561](http://projects.puppetlabs.com/issues/show/15561) to receive notifications of our progress on fixing this issue.  Please also add any impact data about this issue in your site to the ticket.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1599058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1613773", "body": "On Sat, Jul 21, 2012 at 9:12 PM, R. Tyler Croy <\nreply@reply.github.com\n\n> wrote:\n> \n> I has a sad. The Gemfile took me easily 30-45 minutes of\n> guess-and-check-rspec work to get right, I really do think it should be\n> added back in\n\nI'm sure we'll add this back in, it was just really bad timing last week.\n The reason Andy and I decided to pull it out right now are two fold.\n First, it was merged into the wrong branch.  We should merge it into 3.x.\n Second, we're not sure of the implications this has with #7788, the\nunmaintained cucumber-puppet project, and if Puppet is compatible with\nbundler from a, \"can we support and maintain this?\" perspective.\n\n> I don't remember why I added cucumber in there, that might have been just\n> force of habit on my part (oops).\n\nR Tyler, would you mind simply re-submitting this against 3.x and remove\nthe cucumber dependency?  There's a good chance we can look at it this week\nif the pull request is in by Monday morning PT.\n\nPlease also include a paragraph in the README describing how the gemfile is\nintended to be used.\n\nThanks,\n-Jeff\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1613773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2638038", "body": "> Please could you update line 112 to: if pathname = which('pip') or which('pip-python') then self.class.cmd is not needed more and if someone install pip by easy_install then that solution is promoted.\n\nThis sounds like a good improvement, @wilas would you mind submitting a pull request?  It's pretty easy to to contribute to Puppet, please see our [CONTRIBUTING](https://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md).  Please file a bug at projects.puppetlabs.com otherwise, and I'll be happy to add this issue to our backlog.\n\n-Jeff\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2638038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8607217", "body": "I think this change is causing spurious warnings to be displayed.  See [PUP-3678](https://tickets.puppetlabs.com/browse/PUP-3678).\n\n```\n$ puppet apply -v foo.pp\nError: Invalid module name .DS_Store; module names must be alphanumeric (plus '-'), not '.DS_Store'\nError: Invalid module name .DS_Store; module names must be alphanumeric (plus '-'), not '.DS_Store'\nInfo: Loading facts\nNotice: Compiled catalog for mccune.corp.puppetlabs.net in environment production in 0.04 seconds\nInfo: Applying configuration version '1416266353'\nNotice: Applied catalog in 0.49 seconds\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8607217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8721789", "body": "Yep, though as an FYI it is common to have a .git or .svn directory along side module directories in a modulepath directory.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8721789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/126166", "body": "@masterzen, when I run the rspec tests I'm getting:\n\n```\nFailures:\n\n  1) Puppet::SSL::Host should allow to reset localhost\n     Failure/Error: previous_host = Puppet::SSL::Host.localhost\n     Puppet::Error:\n       Cannot save maynard.lan; parent directory /var/folders/hq/hhqxfhws68bc_s23f2ktyx0m0000gp/T/ssl_host_testing20110914-2703-fzokxv-0/ssl/private_keys does not exist\n     # ./lib/puppet/indirector/ssl_file.rb:95:in `save'\n     # ./lib/puppet/indirector/key/file.rb:34:in `save'\n     # ./lib/puppet/indirector/indirection.rb:265:in `save'\n     # ./lib/puppet/ssl/host.rb:147:in `generate_key'\n     # ./lib/puppet/ssl/host.rb:176:in `certificate'\n     # ./lib/puppet/ssl/host.rb:32:in `localhost'\n     # ./spec/unit/ssl/host_spec.rb:69\n\nFinished in 86.56 seconds\n13046 examples, 1 failure, 90 pending\n\nFailed examples:\n\nrspec ./spec/unit/ssl/host_spec.rb:68 # Puppet::SSL::Host should allow to reset localhost\nrspec spec/**/*_spec.rb  80.95s user 7.84s system 97% cpu 1:31.54 total\n```\n\nDo you have any idea of how to make this more robust?  Unfortunately none jump out at me at the moment.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/126166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/329158", "body": "What happens when this yield blocks on I/O for longer than the specified timeout?\n\nWould a ruby timeout block be better here?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/329158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/329161", "body": "It looks like this will sleep() every time the tests are run. This will cause CI and autotest to back up. Could you skip the sleep when testing?  I'm not particular how, but if you're looking for suggestions explicitly wrapping sleeps in a condition in the implementation works well.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/329161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/331435", "body": "I think we need to take the situation where \"10.10\" is not less than \"10.7\" into account.  I suspect there's already a version compare method somewhere in the code base, or if not it may be worth it to copy the logic of lib/puppet/parser/functions/versioncmp.rb into Puppet::Util.\n\n```\n% irb\n1.8.7 :004 > \"10.10\" < \"10.7\"\n=> true\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/331435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/331443", "body": "Gary, I suspect you pulled a lot of your hair out coming up with this method of packing and unpacking a password in various forms.\n\nI think it'd be a great addition to stdlib if there was a function to convert a cleartext password into a salted SHA512 hash.  There are security issues, sure, but I could see myself spending a whole day searching the internet trying to figure out how to make \"abc123\" look like something I can use with Puppet.\n\nThe inline documentation for the user provider could then mention \"Use str2saltedsha512() in stdlib to work with these password hashes.\"\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/331443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/334016", "body": "There are spaces on line 8 that shouldn't be there.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/334016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/334022", "body": "I'm going to simply clean this up in my branch and merge it.  Carl, don't worry about it, but you might want to scan git show before submitting a pull request because I do nit-pick trailing whitespace.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/334022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/363739", "body": "Seems to work fine on Ruby 1.8.5.  I didn't know about Resolv::AddressRegex, thanks for letting me know about it.\n\n```\nroot@pe-centos5:~# ruby --version\nruby 1.8.5 (2006-08-25) [i386-linux]\nroot@pe-centos5:~# ruby -r resolv -e 'puts Resolv::AddressRegex.inspect'\n/(?:(?-mix:\\A(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\\z))|(?:(?x-mi:\n      (?:(?x-mi:\\A\n      (?:[0-9A-Fa-f]{1,4}:){7}\n         [0-9A-Fa-f]{1,4}\n      \\z)) |\n      (?:(?x-mi:\\A\n      ((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?) ::\n      ((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)\n      \\z)) |\n      (?:(?x-mi:\\A\n      ((?:[0-9A-Fa-f]{1,4}:){6,6})\n      (\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\n      \\z)) |\n      (?:(?x-mi:\\A\n      ((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?) ::\n      ((?:[0-9A-Fa-f]{1,4}:)*)\n      (\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\n      \\z))))/\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/363739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/363823", "body": "I notice at least one of Daniel's test cases won't pass with `Resolv::AddressRegex`\n\n```\nirb(main):002:0> \":1111:2222:3333:4444:5555:6666:7777::\" =~ Resolv::AddressRegex\n=> nil\n```\n\nI'm going to merge this since his regular expressions appear much more robust.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/363823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378494", "body": "File removed from pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378496", "body": "File removed from pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378497", "body": "File removed from pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378499", "body": "File removed from pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378500", "body": "File removed from pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378501", "body": "File removed from pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378502", "body": "File removed from pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/378502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/385914", "body": "This doesn't take into account situations where activerecord isn't present but `Puppet.features.rails?` is true.\n\nI'm going to amend this to the following unless there's an objection:\n\n``` ruby\nActiveRecord::Base.remove_connection if Puppet.features.rails? and defined?(ActiveRecord::Base)\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/385914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/385944", "body": "Daniel and I chatted in person and settled on this solution to be defensive against test cases that might stub or mock `Puppet.features.rails?`\n\n``` ruby\nActiveRecord::Base.remove_connection if defined?(ActiveRecord::Base)\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/385944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400080", "body": "On Jan 30, 2012, at 6:17 PM, Daniel Pittman\nreply@reply.github.com\nwrote:\n\n> > -      tmp_file2 = File.join(tmp_dir, '_tmp_wrapper')\n> > -      cwv = <<-EOS\n> >   -@echo off\n> >   -setlocal\n> >   -set RUBY_BIN=%~dp0\n> >   -set RUBY_BIN=%RUBY_BIN:\\=/%\n> >   -\"%RUBY_BIN%ruby.exe\" -x \"%RUBY_BIN%puppet\" %*\n> >   -EOS\n> > -      File.open(tmp_file2, \"w\") { |cw| cw.puts cwv }\n> > \n> > ## \\-      FileUtils.install(tmp_file2, File.join(target, \"#{op_file}.bat\"), :mode => 0755, :verbose => true)\n> > -      File.unlink(tmp_file2)\n> > -    if not installed_wrapper then\n> > -      Tempfile.open([op_file, '.bat']) do |output|\n> > -        File.open(File.join(File.dirname(**FILE**), \"conf/windows/stagedir/bin/#{op_file}.bat\"), 'r') do |input|\n> > -          output.write input.read\n> \n> Since this is a static copy, can't we just install the external file directly?\n\nWe could, but this has the (admittedly undocumented) behavior of\nconverting LF's to CRLF's on windows. :)\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/puppetlabs/puppet/pull/428/files#r400066\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400084", "body": "Damnit puppet.conf should have been removed.\n\nPlease don't merge, amending now.\n\n## \n\nJeff McCune - (+1-503-208-4484)\n\nOn Jan 30, 2012, at 6:18 PM, Daniel Pittman\nreply@reply.github.com\nwrote:\n\n> > @@ -0,0 +1,5 @@\n> \n> Does this need to be different to the Unix configuration examples?  If not, can we reuse those?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/puppetlabs/puppet/pull/428/files#r400072\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400085", "body": "So we can build an MSI with Facter 1.6.5 and earlier.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400109", "body": "Sure, the build system is inherently different than the thing being built.  In this situation I'm planning for future maintainability by decoupling the most user-facing aspect of this whole project (the wrapper scripts) from the actual thing we're wrapping.\n\nThis will allow us to do things in the future we wouldn't otherwise be able to do.  Issue a hotfix for the behavior of the installer itself, for example, without having to go through the whole rigmarole of cutting a Puppet or Facter release.  We just patch master, rebuild using `rake windows:build` and be done with it.\n\nI don't think this is actually messy and whatever cost is incurred by duplicating this resource is paid for in future packaging flexibility.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400165", "body": "Yep I'm going to amend a descriptive patch to the readme. Please don't\nmerge until that's in here.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/400165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dingus9": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1810964", "body": "File added in /ext/kate/puppet.xml\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1810964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2817758", "body": "ill do what ever you guys think is best... personally it would probably be a good idea to have a separate repo for third party tools. I would think it would make ot easier to include provisioning or other tools that dont quite fit into puppet itself. \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2817758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1842333", "body": "Works for me.\n\nAnd this is actually just a TextMate thing - it does it automatically to all created files, and I didn't bother turning it off.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1842333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2315695", "body": "The bulk of this is actually changing 'Facter.value(:foo)' to 'Puppet::Node::Facts[\"foo\"]'.\n\nIt's true I switched the symbol to a string, but the more critical part is the changing of the constant - the goal is to get rid of the direct access to Facter everywhere possible.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2315695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2954202", "body": "Yep, I'll close this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2954202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158735", "body": "Yeah, when I rebased this I knew it would conflict - I think the right approach is to move SUIDmanager.root? into the feature - the reason I made this change here is that without it you have pretty ugly loading issues, and there's no fundamental reason why SUIDmanager should have the 'root?' method.d\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158741", "body": "This is probably the thing I'm least happy with.\n\nMy first version didn't do any caching but had a noticeable (at least when running the tests) cost, because we were retrieving all facts every time someone asked for a fact.\n\nI also considered making it easy to retrieve a single fact from the backing terminus, but this approach seemed much less evil.\n\nI'm a touch uncomfortable relying on Facter for caching, because it essentially assumes that Facter's caching priorities will always match Puppet's, which isn't necessarily the case.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158749", "body": "How would you do that?  This is the other area that's obviously questionable, but I couldn't come up with a better option, and if I had to choose between hard-coding Facter into the system and having a non-standard API for this, it was an easy choice.  It actually made me wonder if 'load' shouldn't become a standard part of the indirector - I could see other terminus types needing some kind of initialization method.\n\nThere are unfortunately a few places that need to explicitly cause facts to get loaded (e.g., after they're downloaded as part of pluginsync).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158752", "body": "I doubt it, but rather than judge that I decided to retain existing behavior.\n\nI believe I looked closely at the tests and it was impossible to determine \"right\" behavior, so I stuck with existing behavior.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158755", "body": "Hmm, that's probably true.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/158755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "webfactory": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1894604", "body": "Thanks for the heads-up. You want me to cancel this request as well and open new ones for the respective bugs?\n\nTIA!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1894604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1894890", "body": "Sorry for asking, but this is the first time I am using git and -hub (and coding in Ruby) :-).\n\nSo you want me to have three commits on this branch for the three bugs?\n\nCan I remove the above commit from the branch?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1894890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1895042", "body": "Great, thanks! As I did not know a better way to do it, I reverted the commit and then (manually) did the three changes step by step. \n\nI will update the three bugs to point here.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1895042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1968916", "body": "Regarding the fix for (#8374) and jhelwig's comments on the original pull request:\n\nThe command \n  execute([:port, \"-q\", :info, \"--line\", \"--version\", \"--revision\", @resource[:name]], :combine => false)\nwill not use the \"port\" command defined at the beginning of the class, but just execute \"port\" and assume it's on the PATH.\n\nWhat is the right way to fix this?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1968916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2016923", "body": "Messed up the branch again :( Please see pull req #94\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2016923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3025354", "body": "To be honest, my Ruby skills are limited to the few lines of patches I submitted until now. It will probably take some time until I can familiarize myself with the way tests have to be written and I figure out how to run them.\n\nI promise I will try if you're not faster than me :-)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3025354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3039331", "body": "I'll see what I can do. Any good starting pointers on how to write and run tests for those not familiar with Ruby ;-)?\n\nWhat should these tests cover - just the temporary name is of no use, imho.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3039331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1937729", "body": "Cool, thanks for the feedback. I am going to use this patch with my puppet-dashboard-face and update the docs with test runs and examples.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1937729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1970881", "body": "I have updated http://projects.puppetlabs.com/issues/7270 with an example of this patch in use.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1970881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "haf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1971431", "body": "facter is required, or some unit tests will fail with something like 'cannot require 'facter''. I drove the gemfile from the errors I got from a fairly clean system.\n\nI think running rake should not fail directly; but it shouldn't not fail either - requiring, e.g. with `require 'bundler/setup'`, at the top doesn't show any tasks at all, unless `bundle install` has run. So it's a problem either way - I most often put a `Bundler.setup` at the top of my rakefiles - so perhaps this is a better way of doing it.\n\nI think 'win32-dir' comes from win32-service, but I'm not sure. Strange, I'm not getting that error message though.\n\nWhen trying to get the aforementioned service gem to install, by changing\n\n```\nPLATFORM\n    x86-mwin32\n```\n\nto\n\n```\nPLATFORM\n    x86-mswin\n```\n\n, it seems my ruby install got fried. Don't try the above. ^^\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/1971431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "glarizza": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2046091", "body": "Tested this fix on 10.6 and 10.7  (try running `puppet resource macauthorization` on 10.7 and then apply this patch).  The patch worked on 10.7 and 10.6 continued to work.  I don't have merge rights, however, so I can't merge it in.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2046091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2046622", "body": "Reviewed-by: Gary Larizza gary@puppetlabs.com - Please Merge.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2046622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2230928", "body": "So, I think the change we made to the self.job_list method (removing the class instance variable) was the wrong thing to do.  See the pastie here - it runs launchctl list for every instance of a service on the system...which is less than ideal.  I think that behavior needs to be reverted.   http://pastie.org/2608018\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2230928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2231809", "body": "Tests are failing on the change - fixing now and will commit test patches.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2231809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2240912", "body": "The tests are now passing, and I've made changes in two areas of the code.  Comments are welcome!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2240912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2562325", "body": "Got it - I needed to stub out File.open so it didn't write to disk on the last test.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2562325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3035116", "body": "Ticket is here --> http://projects.puppetlabs.com/issues/11202\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3035116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3071994", "body": "That I did not know.  Thanks!  The .split('-') will functionally do the same thing (in fact, I wonder if git does that internally with that argument), so I'm inclined to keep it as it is (unless someone else has an opinion on it).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3071994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3073441", "body": "Spoke with Jacob and I agree with his logic.  Refactoring now and will push when I'm done.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3073441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3074405", "body": "This code relies on the corresponding pull request for Facter, which is here https://github.com/puppetlabs/facter/pull/109\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3074405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/331447", "body": "Definitely. I had pondered where to add that functionality, but puppetlabs-stdlib sounds like it would work great.  I'll create a function there for it.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/331447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "stahnma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2054318", "body": "I'd really like to put this in.  I think it needs tests.  It looks like you have tests on https://github.com/jcollie/puppet/commit/839e7c9979f89badeb31157e8fe8ff3de46be3e2.  Are they related to this change directly?  \n\nWould it be possible to update this pull with tests? \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2054318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2313895", "body": "I like this.  Could you point it at 2.7.x branch?  That way we'd have it in the next release of Puppet, (2.7.7) in November. \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2313895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2324329", "body": "This has been superseded by other work in Puppet.  \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2324329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2794372", "body": "On Fri, Nov 18, 2011 at 12:09 PM, Kelsey Hightower\nreply@reply.github.com\nwrote:\n\n> Without this patch, the `puppet apply` command uses the `--apply` option\n> to reference a Puppet catalog. This can cause a bit of confusion as both\n> the subcommand and option have the same name.\n> \n> This patch improves the usability of the `puppet apply` command by\n> adding a new `--catalog` option. This patch also adds a deprecation\n> warning whenever the `--apply` option is used, which advises end-users\n> to use the `--catalog` option instead.\n> \n> This patch updates the in-line help documentation by adding help output\n> for the new `--catalog` option, and adding a deprecation warning for the\n> `--apply` option.\n> \n> The plan is to deprecate the `--apply` option in the next 2.7.x release,\n> and removal in 2.8. External documentation should be updated to reflect\n> the new preference towards using the `--catalog` option in-place of\n> `--apply`.\n\nWe need to carry deprecation warnings for at least 1 full major\nversion before removal.\n\n> Preferred method of applying a Puppet catalog using `puppet apply`:\n> \n> \u00a0 \u00a0$ puppet apply --catalog <catalog>\n> \n> You can merge this Pull Request by running:\n> \n> \u00a0git pull https://github.com/kelseyhightower/puppet ticket/master/10940_deprecate_apply_for_catalog\n> \n> Or you can view, comment on it, or merge it online at:\n> \n> \u00a0https://github.com/puppetlabs/puppet/pull/227\n> \n> -- Commit Summary --\n> - (#10940) Deprecate `--apply` in favor of `--catalog`\n> \n> -- File Changes --\n> \n> M lib/puppet/application/apply.rb (16)\n> \n> -- Patch Links --\n> \n> \u00a0https://github.com/puppetlabs/puppet/pull/227.patch\n> \u00a0https://github.com/puppetlabs/puppet/pull/227.diff\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/puppetlabs/puppet/pull/227\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2794372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3073715", "body": "Please don't merge this until I can review\n\nOn Dec 8, 2011, at 19:25, Gary Larizzareply@reply.github.com wrote:\n\n> Previously, `git describe` was being used to get the puppet version,\n> however this breaks the Jenkins builds. Puppet::PUPPETVERSION is\n> the better choice here (though we lose the 'rc' tags at the end).\n> \n> You can merge this Pull Request by running:\n> \n>  git pull https://github.com/glarizza/puppet-1 feature/2.7.x/Rakefile_DMG\n> \n> Or you can view, comment on it, or merge it online at:\n> \n>  https://github.com/puppetlabs/puppet/pull/263\n> \n> -- Commit Summary --\n> - Build a Rake task for building Apple Packages\n> \n> -- File Changes --\n> \n> M tasks/rake/apple.rake (4)\n> \n> -- Patch Links --\n> \n>  https://github.com/puppetlabs/puppet/pull/263.patch\n>  https://github.com/puppetlabs/puppet/pull/263.diff\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/puppetlabs/puppet/pull/263\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3073715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "haus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2057160", "body": "Jeff, do you have any other tests in mind for this provider? If you do, there's an issue posted for it at http://projects.puppetlabs.com/issues/9414\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2057160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3072424", "body": "Cherry-picked into 2.7.x. This pull should automatically close at the next merge-up.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3072424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271585", "body": "There isn't any check that packagemaker exists, and if it doesn't, it fails rather unhelpfully.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/271585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307331", "body": "Ah, no, I'm sure that would have worked. I had been doing something more complex, and when I tore it down I forgot to change that. Updating...\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/307331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "masterzen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2122288", "body": "The last commit just pushed now fixes this regression.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2122288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2845597", "body": "Puppet device is a different citizen in the ecosystem as it maintains a per device $vardir. It should be easy to make sure the classes.txt of a given device ends up in the device $vardir (and I'd be surprised it doesn't already do it).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2845597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2978321", "body": "Definitely  +1 since I might have been guilty of producing this code in the first place :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2978321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3023915", "body": "You nailed it, it doesn't handle all the possible pluralization of English nouns :)\nIt just makes some (if not all) pluralization of nouns with a leading 'e' works better than before, while still preserving 'status/statuses'.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3023915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3111033", "body": "@jhelwig, regarding faces that's well possible. Those are modeled after the indirections because that's how I thought it was working (most of the core face seem to map to indirections). I'll do my homework and see if I can merge them in one instrumentation face.\n\nI'll revise the patch during the next week-end if possible taking all your comments into account.\n\nThanks,  \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3111033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/126358", "body": "Yes, my bad. The test passes fine when run isolated but combined in the whole suite it fails. Something prevents the directory to be created apparently.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/126358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/224590", "body": "In the light of bug #10727 (http://projects.puppetlabs.com/issues/10727), you might need to change this to\n\n```\nancestors = Pathname.new(self[:path]).enum_for(:ascend).map(&:to_s)\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/224590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/279297", "body": "I think this \"where\" word is not necessary\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/279297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/279299", "body": "s/comment/common/\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/279299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/282479", "body": "This method is a convenient way of instrumenting a set of code. But yielding is about twice slower than calling start before the code and stop after it, hence the comment suggests that if this method will be called many time (like inner loops or sth), it might be slower than managing the instrumentation with start/stop.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/282479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/282481", "body": "I don't think it's a problem, I can lower this to a warning.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/282481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283942", "body": "I don't really remember but reading the code, I believe it's I wanted it to be 0-based instead of one based...\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283953", "body": "Because @foo can't be used in the class_eval block without some strange side effects. I don't exactly remember the issue, but that was the safest way to make sure the closure doesn't close on the instance the module is mixed-in. Or something along those lines.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/283953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301064", "body": "I believe there are two reasons:\n- we're using the puppet instance loader to dynamically load new listeners/probe\n- those probe and listeners are themselves indirections\n\nIn short this is the \"puppet\" way of doing things, even though it is not the \"ruby\" traditional way. It's even possible that using inheritance would clash with the indirection system.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301066", "body": "This is fatal because it would be that we would add a new method to the instrumented class on top of the already existing. We wouldn't be able to remove it when disabling probes. The only way to make this work would be to number the methods we add and refcount them. The error is much more sensible in this context.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301080", "body": "Yes,  it is necessary because the \"probe\" methods happens only at class loading, but we need it to happen for every test. Moving the class definition out of the before block would mean we'd create the probes only once.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301086", "body": "Previously the code was `:min => 1234567` (or a large number like this one). The problem is that in ruby we don't know what can be the largest Integer, so I decided to init it with nil and specifically remove it during the min operation.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301089", "body": "Those are callbacks that are called when a given listener is registered or unregistered from the instrumentation system. So yes their implementation make them look like predicate but their name respects their call usage by the instrumentation layer.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301092", "body": "Yes, that's correct.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/309566", "body": "Yes, it looks like I was a little bit too heavy there. I can add the initialization and fix the whitespace (I'm surprised about that since I usually see it in the editor) tomorrow if you want.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/309566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/309700", "body": "I'm about to push a fix for the whitespace damages and the initialization (running tests at the moment).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/309700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305971", "body": "yes, correct\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305990", "body": "I think I remember asking myself if using locked? was better or not. And decided about not, because (and that might be a poor reason) we were reading a file and the intent was to be clear that there won't be any messages if the file didn't exist (compared to being locked might not imply having a message).\nAnd for the empty string, I don't know. Maybe to be coherent with when there's a message?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/305990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/326363", "body": "What is the rationale behind removing the tag propagation?\nor is it covered by the code block below?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/326363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "stschulte": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2190436", "body": "Hi Whyme,\n\nis there a corresponding redmine ticket? Furthermore since this is a bug your branch should be based on current stable (2.7.x). Can you please rebase your branch?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2190436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2190445", "body": "commented on redmine: http://projects.puppetlabs.com/issues/9167#note-18\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2190445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2548987", "body": "I've added some tests and you should see a pull request for your repository/branch.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2548987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3024186", "body": "rebased on current 2.7.x. I also addressed your first concern with an additional test.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3024186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4938619", "body": "so the type does now support the new value, but if I am not completly mistaken the provider has to support it too. The regex that is used in the parsed file provider explicitly lists the key types it does understand and `ssh-ed25519` is not one of them.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4938619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4938624", "body": "this branch is actually never triggered because the key type is not specified in the array this inner loop works on\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4938624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268428", "body": "No, autorequire just returns a list of resources and puppet will find out what resources are managed and will establish the dependencies. The reason the catalog lookup is done for the parent directory is because we want to add ONLY the nearest parent directory as a dependency.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/268428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/373857", "body": "The statement `The user property automatically converts to IDs` is not true. And specifying an id as a user property does not even work on my linux box (crontab:  user `1000' unknown).\n\nThat beeing set I guess the autorequire can be as simple as\n\n```\nautorequire(:user) do\n  self[:user]\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/373857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "5long": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2191431", "body": "No ticket filed since it's just a cowboy-ish quick patch.\n\nIt makes `spec/integration/provider/package_spec.rb` pass in Ruby 1.9.2-p290 on Archlinux (using pacman as the package provider).\n\nA rebase will be done soon.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2191431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/269726", "body": "No it breaks the tests unfortunately.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/269726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/269741", "body": "Well personally I'd keep the state explicitly specified as such. If it really is a merge-stopper I'll do it.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/269741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301349", "body": "Okay, commits squashed in https://github.com/5long/puppet/tree/pacman-source-merging\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/301349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ChaseMotorman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2217091", "body": "Reviewed and verified. Looks good.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2217091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2217349", "body": "Verified the default behavior of 'puppet agent' is identical to 'puppet agent --no-daemonize', and 'puppet agent -daemonize' fails the options parse with \"\"Could not parse options: Cannot daemonize on Windows\".\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2217349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2218072", "body": "The rescue block in lib/puppet/util.rb::Log.reopen downgrades to :syslog if the @destinations collection is empty.  If a Windows log destination falls on reopen  there would be no backup destination, and it appears the check to prevent using syslog on Windows could be circumvented Perhaps :console should be the fallback destination on Windows?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2218072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2230383", "body": "This pull request is really large, and it seems many of the commits, although associated, are unrelated. Since a build failure resulting from any single commit might invalidate the entire pull, I would recommend breaking it up into smaller pull requests. In particular, all the mods relating to file paths and URIs seems general enough to be refactored.  \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2230383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2253616", "body": "Good commit. I ran through the big changes and tried to break it, but couldn't find any obvious weaknesses. Good test coverage, as well. However, by setting group ownership to one in which the user is not a member, you can get into a state where it is impossible to recover. For example, it became impossible for the MSI installer (which runs as SYSTEM) to read or update a package (I had to manually take ownership, and reset permissions to recover). When trying to change the owner/group properties on a large file tree (Apache, for instance), it took a very long time (over 10 minutes on on WS2008).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2253616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2253979", "body": "Auto-merge failed due to ADSI code/spec conflicts. The merge was resolved, and commit was manually pushed upstream. \n\nCommit: ec587b449e56050afca9838b23df9f0d8ffc7a63: Merge branch 'file-providers' of https://github.com/joshcooper/puppet into 2.7.x\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2253979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nigelkersten": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2231117", "body": "That's totally not desirable, and I think it's an unintended consequence of the refactor.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2231117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "bleonsfl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2290400", "body": "Ok I'll provide a proper pull-request and have the CLA signed (which might take a bit of time).\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2290400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2382688", "body": "The CLA have been signed.\nI need to provide a proper code following your guidelines now.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2382688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3026436", "body": "Hello,\n\nsorry about that.\nI since repatched but did not take time to push it to github.\n\nI'll do the fork again an do a new pull request.\nThis is a very simple patch, adding new attributes to nagios types so that they are usable with shinken.\n\n## Regards\n\nBruno Leon\nConsultant Logiciels Libres\n\nSavoir-Faire Linux Inc.\n514-276-5468 ext. 141\nhttp://www.savoirfairelinux.com/\n\n----- Original Message -----\n\n> @bleonsfl I'm closing this pull request since it looks like you've\n> since deleted your Puppet fork. Do you know if there was a Redmine\n> ticket associated with the change you were proposing? Should we expect\n> to see a new pull request at some point?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/puppetlabs/puppet/pull/152#issuecomment-3025257\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3026436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "xaque208": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2369886", "body": "Closing to target the correct branch.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2369886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/303825", "body": "Yes.  I will clean it up and test it.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/303825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/319702", "body": "I have changed to using Dir.glob instead of shelling out as you have requested.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/319702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rickyz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2448291", "body": "This (or a similar patch) has been pushed, and a new release made - thanks for the fast response!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2448291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "duritong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2454670", "body": "What's the current status of this review and what needs to be done, that this gets merged in the next release?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2454670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2454714", "body": "What's the current status of this review? As I said, if somebody could comment about the correctness of this approach I would probably be able to work on proper tests etc. But the longer this fades away the more complicated it is to get back into the context. However, as #8345 means that remote package installation on OpenBSD is currently **not** working, I think it would be quite important to get that fixed.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2454714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2600587", "body": "So after some discussion on IRC we settled with the following:\n- This patch should be rebased agains 2.7.x\n- It should get a proper commit message\n- Tests would be nice, however as for the openbsd provider tests are missing in general, we have to see what is possible.\n\nThis means that in general the approach seems feasible and we just need to do some cleanup.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2600587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3039758", "body": "Yes, sorry. I'm currently swamped with other things. I agree with your comments and will try to implement them. Fortunately from Thursday on, things are less busy. :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3039758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "soh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2486005", "body": "I agree with Jacob.  I understand the motivation behind this change, but I think it's unexpected behavior for a script to assume root privileges without notification or confirmation.  The simple and common notify/confirm behavior is as Jacob describes:  warn & exit, and allow the user to `sudo !!`.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2486005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jaredjennings": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2533809", "body": "I made the commit I'm requesting to be pulled on the master branch of my fork, rather than in a topic branch. This appears to have been a mistake. I'm going to close this pull request, delete my fork, and recreate it, putting this patch in a topic branch, and create a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2533809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nfagerlund": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2547899", "body": "Whoops. :\\ Okay, rewrote history to catch those.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2547899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2549721", "body": "Okay, I think I've addressed all review notes with the rewritten commit. \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2549721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2558648", "body": "Sure thing. Rebased to most recent 2.7.x.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2558648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2558719", "body": "Okay, rewritten to squash the new function and test commits. \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2558719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14306717", "body": "Use /latest/! \n\n(The /3/ directory is only for Puppet 3.0 through 3.4. We originally thought feature growth would be slow enough that we could have a single docs version (with a lot of \"only in x.y and greater\" caveats) for the whole Puppet 3 series, but it turned into an unreadable, uneditable mess.) \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14306717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195166", "body": "Oh! Thanks for catching that. (Also, I will now stop force-pushing until you're done reviewing.) \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195167", "body": "Where does this get configured? Is it hard-coded in each provider? \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/195167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jgrocho": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2582828", "body": "Again updated in the new commit.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2582828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kelseyhightower": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2713414", "body": "No, I think they went in another direction, I would close it.\n\nOn Fri, Nov 11, 2011 at 4:19 PM, Jeff McCune <\nreply@reply.github.com\n\n> wrote:\n> \n> @kelseyhightower Based on Daniel's feedback is this pull request still\n> valid?\n> \n> I'm just perusing through old public pull requests and noticed this one.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/puppetlabs/puppet/pull/67#issuecomment-2713358\n\n## \n\nKelsey Hightower\nSolutions Engineer\nPuppet Labs\n1-678-471-9501\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2713414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3020311", "body": "Luke asked the same question. I think I would be much easier to extract the\nrequire bits into a standalone module, supporting both will be a challenge\neither way.\n\nAll is not lost, I just need a little time to write a back porting script.\nAn automated script should make this easier to maintain.\n\nOn Mon, Dec 5, 2011 at 12:47 PM, Matt Robinson <\nreply@reply.github.com\n\n> wrote:\n> \n> I thought you were going to make these changes in the module-tool repo\n> first so that people could use it as a face without upgrading all of Puppet?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/puppetlabs/puppet/pull/244#issuecomment-3020256\n\n## \n\nKelsey Hightower\nSolutions Engineer\nPuppet Labs\n1-678-471-9501\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3020311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3067559", "body": "Looks good, all tests pass:\n\n```\nFinished in 123.04 seconds\n13582 examples, 0 failures, 87 pending\n```\n\n`puppet module generate` still works and the template looks right:\n\n```\n$ puppet module generate puppetlabs-ssh\n$ cat puppetlabs-ssh/manifests/init.pp\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3067559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272109", "body": "This should be resolved in feeecc4f2809d5e0bf88ccbdb0cfb64ece6d8151\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272116", "body": "This is resolved in 62b59c16af498b049b48dac085525daf9ffb1b97\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272155", "body": "Fixed in f33c2e42bda8033f810e89a0ae1b037193ca00a2\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272172", "body": "Fixed in 5220af5b53945929bb269962272ebb01454815a3\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272200", "body": "Fixed in 6d0e88aa14eed630501629edad26096c80810e59\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272201", "body": "Fixed in 6d0e88aa14eed630501629edad26096c80810e59\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272202", "body": "Fixed in 6d0e88aa14eed630501629edad26096c80810e59\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272203", "body": "Fixed in 6d0e88aa14eed630501629edad26096c80810e59\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272206", "body": "Fixed in bad0112d45bf8d5e5a26c050c48abef123a267e4\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272244", "body": "That produces a syntax error, as the map function does not take an argument. That code works with a block, however I did improve on the original code. Fixed in 24557b98b15438ff00a50ac0ee2929568342f0d1\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272257", "body": "Fixed in 27d26ae7a78578163896be6c643ea42d8b48356c I was able to be totally awesome here.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272265", "body": "I can't tell from the original PMT code base what the entire syntax for the versioning language is. I will need to reach out and gather this information from others.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272266", "body": "I can't tell from the original PMT code base what the entire syntax for the versioning language is. I will need to reach out and gather this information from others.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272292", "body": "Not sure what you mean here, should we return an Hash object? Or should the return_value from `Puppet::Module::Tool::Applications::Searcher.run` be the hash that you describe? \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272308", "body": "Fixed in a44aef9a0f668d3aa98aa01d734256874f666141\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/272308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273033", "body": "Fixed in 90b1fcda2593b7e823876181262b034fb761a110\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273059", "body": "Fixed in 5a8dc51e36bf8d6c70140d93331d960dd437be5a\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273085", "body": "Fixed in 0843c9e5daa9b8789fb8c76102ed7f4a071666de\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273086", "body": "Fixed in 47e7b60f18d0ba7995fed9212533b711d5d8b7d6\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273087", "body": "Fixed in 47e7b60f18d0ba7995fed9212533b711d5d8b7d6\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273098", "body": "I worry about setting a hard coded value for this any where, as the module path is dynamically build based on other configuration path settings.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273269", "body": "Fixed in f463d90581f2a31dcb82a3c75a39f61cbb12afc7\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273340", "body": "Fixed in 7a45cc78abcce994422969412128a7de1241c4b3\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273369", "body": "Fixed in c79f157fc6b7f8be996f20673573f459eac6ee5c mainly removed the entire TODO line, so no one else spends time trying to re-answer that question.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273399", "body": "Fixing this right now might create some incompatibles with modules built using older versions of PMT. I think this change requires further discussion.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273405", "body": "There should be an over discussion on the hashing we should be using through out PMT. While this should be an easy fix, I will defer this change until we have more discussion on the topic.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273430", "body": "The following Redmine ticket has been created to track this: [11197](http://projects.puppetlabs.com/issues/11197)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273432", "body": "The following Redmine ticket has been created to track this: [11197](http://projects.puppetlabs.com/issues/11197)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273499", "body": "Fixed in e9538af845d06c543b55bf3ff329a22e58d06259\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273547", "body": "Fixed in 22ac5b6b5c39588d349c3e253339da0bdb0cf4d0\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273557", "body": "The following Redmine ticket has been opened to track this: [11198](http://projects.puppetlabs.com/issues/11198)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273576", "body": "The following Redmine ticket has been created to track this: [11199](http://projects.puppetlabs.com/issues/11199)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273750", "body": "Fixed in 5bc5c50d34a5b41f4d563f4fb161a18ff7316673 went with the option to of doing the same test inline.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273756", "body": "Currently the prompt can be turned off by using the force option when invoking the install action.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273763", "body": "Are you thinking we should add a link to some documentation related to testing Puppet modules in general?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/273763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274143", "body": "Fixed in e2a9ab90bbfbcca63c91888480c4b81cbd9d4cdd mainly swapped out SystemExit with the more appropriate ArgumentError or RuntimeError exception. Based on other faces work, it seems inline to allow these types of exceptions to bubble up. Not sure if this is the right way of doing things, but it's the established pattern so far.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274153", "body": "This is a tough one, we could add lots of OS detection code and search for the right executable to run, but this seems like it would be come a maintenance nightmare. Scanning the Ruby docs, I do not see anything in the Ruby stdlib to working with tar files, and I am sure we don't want to vendor any gems for this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274482", "body": "Fix in 62f89c4b3896d914608ddb0ff09f5c55e62c38da\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274484", "body": "Fixed in 62f89c4b3896d914608ddb0ff09f5c55e62c38da\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274486", "body": "Fixed in 62f89c4b3896d914608ddb0ff09f5c55e62c38da\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274551", "body": "Fixed in c658e723083e17c844e8be0bd339c40737cc69ad\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/274551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/361493", "body": "I have added the pending spec test and added the ticket number to this #TODO comment\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/361493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/361498", "body": "I'm now using let methods in place of the instance variables.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/361498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/391713", "body": "This spec title was updated to better describe the expected behavior.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/391713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/391715", "body": "This spec title was updated to better describe the expected behavior.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/391715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "tdb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2718565", "body": "Hi James. Yes, I'll have a stab at a set of tests. I'm new to Ruby, but I've got enough experience in other languages to make it an interesting challenge :-)\n\nYes, I should squash the last two at least. I was unsure about squashing after I'd already pushed it and done the pull request. Is it fine to do that?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2718565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796769", "body": "Here's my first stab at providing tests for both the user and group providers. I've also done a few other tweaks along the way, and even uncovered a bug when writing the tests!\n\nI wouldn't say this is merge ready yet. It needs more testing at my end and undoubtedly feedback from some more knowledgable puppet people. What I've done seems to work, but whether I've done it correctly or not I'm not sure.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796773", "body": "I'd be happy to squash commits 76a9dc95, 071b1885 and 17e4e38b if retaining the origins of changes isn't important.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2801710", "body": "I've done some further testing an ironed out a few issues. I'm now happy with the code and I'll hold off pushing any other changes until somebody has had a chance to review it.\n\nJason - thanks, good point. I submitted #10962 for the bug I found.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2801710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "grimradical": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2767052", "body": "I've rebased this onto 2.7.x branch, and submitted a separate pull req:\n\nhttps://github.com/puppetlabs/puppet/pull/222\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2767052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2767902", "body": "@smithj4 Have you signed a Puppet CLA yet? We'll need that prior to merging in this fix. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2767902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2783627", "body": "@nanliu I've taken your original fix, based it onto 2.7.x, and reworked your tests to fit in with mode-related tests that have landed in the time between when the patch was originally written and now.\n\ngrimradical/puppet@b874bf2fa86bf138d4eb57d2ba8c39473530c3a2\n\nIf it looks good, feel free to cherry-pick and update this pull req.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2783627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2795690", "body": "There doesn't appear to be an easy way to add an [apply] section to the configuration file, as which section to use is dependent on the runmode and changing that machinery would be reasonably involved.\n\n@nanliu I've taken your original code and added an option to apply (--writeclasses, named to be similar to the existing --loadclasses). The default behaviour of \"apply\" is unchanged, but if --writeclasses is supplied then classes.txt is written out. The user can override the output file by using --classfile if they don't want the output going to the same location as the agent.\n\nhttps://github.com/grimradical/puppet/tree/ticket/2.7.x/7917\n\nI'd appreciate your review before I open up a new pull req.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2795690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jasongill": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796827", "body": "It may be a good idea to open a Redmine ticket for any bugs you found and then squash and note the ticket number of the fix in the commit message, just so that it's noted and other people can pitch in with verification and testing.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2796827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andrenth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2818624", "body": "I was going to send a pull request for this exact feature. Would be great to have it!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2818624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3030878", "body": "Not sure if there's a better way to add a patch to an existing pull request, but how about this?\n\n```\ndiff --git a/lib/puppet/parser/functions/create_resources.rb b/lib/puppet/parser/functions/create_resources.rb\nindex 6467619..56806ab 100644\n--- a/lib/puppet/parser/functions/create_resources.rb\n+++ b/lib/puppet/parser/functions/create_resources.rb\n@@ -1,7 +1,7 @@\n Puppet::Parser::Functions::newfunction(:create_resources, :doc => <<-'ENDHEREDOC') do |args|\n     Converts a hash into a set of resources and adds them to the catalog.\n\n-    This function takes two arguments: a resource type, and a hash describing\n+    This function takes two mandatory arguments: a resource type, and a hash describing\n     a set of resources. The hash should be in the form `{title => {parameters} }`:\n\n         # A hash of user resources:\n@@ -16,10 +16,23 @@ Puppet::Parser::Functions::newfunction(:create_resources, :doc => <<-'ENDHEREDOC\n\n         create_resource(user, $myusers)\n\n+    A third, optional parameter may be given, also as a hash:\n+\n+        $defaults => {\n+          'ensure'   => present,\n+          'provider' => 'ldap',\n+        }\n+\n+        create_resources(user, $myusers, $defaults)\n+\n+    The values given on the third argument are added to the parameters of each resource\n+    present in the set given on the second argument. If a parameter is present on both\n+    the second and third arguments, the one on the second argument takes precedence.\n+\n     This function can be used to create defined resources and classes, as well\n     as native resources.\n   ENDHEREDOC\n-  raise ArgumentError, (\"create_resources(): wrong number of arguments (#{args.length}; must be 2)\") if args.length != 2\n+  raise ArgumentError, (\"create_resources(): wrong number of arguments (#{args.length}; must be 2 or 3)\") if args.length < 2 || args.slength > 3\n   #raise ArgumentError, 'requires resource type and param hash' if args.size < 2\n   # figure out what kind of resource we are\n   type_of_resource = nil\n@@ -36,8 +49,10 @@ Puppet::Parser::Functions::newfunction(:create_resources, :doc => <<-'ENDHEREDOC\n     end\n   end\n   # iterate through the resources to create\n+  defaults = args[2] || {}\n   args[1].each do |title, params|\n     raise ArgumentError, 'params should not contain title' if(params['title'])\n+    params = defaults.merge(params)\n     case type_of_resource\n     # JJM The only difference between a type and a define is the call to instantiate_resource\n     # for a defined type.\ndiff --git a/spec/unit/parser/functions/create_resources_spec.rb b/spec/unit/parser/functions/create_resources_spec.rb\nindex 94b1e7c..513c613 100755\n--- a/spec/unit/parser/functions/create_resources_spec.rb\n+++ b/spec/unit/parser/functions/create_resources_spec.rb\n@@ -20,8 +20,9 @@ describe 'function for dynamically creating resources' do\n   it \"should exist\" do\n     Puppet::Parser::Functions.function(:create_resources).should == \"function_create_resources\"\n   end\n-  it 'should require two arguments' do\n-    lambda { @scope.function_create_resources(['foo']) }.should raise_error(ArgumentError, 'create_resources(): wrong number of arguments (1; must be 2)')\n+  it 'should require two or three arguments' do\n+    lambda { @scope.function_create_resources(['foo']) }.should raise_error(ArgumentError, 'create_resources(): wrong number of arguments (1; must be 2 or 3)')\n+    lambda { @scope.function_create_resources(['foo', 'bar', 'blah', 'baz']) }.should raise_error(ArgumentError, 'create_resources(): wrong number of arguments (4; must be 2 or 3)')\n   end\n   describe 'when creating native types' do\n     before :each do\n@@ -58,6 +59,10 @@ describe 'function for dynamically creating resources' do\n       foo.should be\n       rg.path_between(test,foo).should be\n     end\n+    it 'should account for default values' do\n+      @scope.function_create_resources(['file', {'/etc/foo'=>{'ensure'=>'present'}}, {'group' => 'bar'}])\n+      @compiler.catalog.resource(:file, \"/etc/foo\")['group'].should == 'bar'\n+    end\n   end\n   describe 'when dynamically creating resource types' do\n     before :each do \n@@ -103,6 +108,13 @@ notify{test:}\n       rg.path_between(test,blah).should be\n       @compiler.catalog.resource(:notify, \"blah\")['message'].should == 'two'\n     end\n+    it 'should account for default values' do\n+      @scope.function_create_resources(['foo', {'blah'=>{'three'=>'four'}}, {'one' => 'two'}])\n+      # still have to compile for this to work...\n+      # I am not sure if this constraint ruins the tests\n+      @scope.compiler.compile\n+      @compiler.catalog.resource(:notify, \"blah\")['message'].should == 'two'\n+    end\n   end\n   describe 'when creating classes' do\n     before :each do\n@@ -133,5 +145,11 @@ notify{tester:}\n       tester.should be\n       rg.path_between(tester,test).should be\n     end\n+    it 'should account for default values', :'fails_on_ruby_1.9.2' => true do\n+      @scope.function_create_resources(['class', {'bar'=>{}}, {'one' => 'two'}])\n+      @scope.compiler.compile\n+      @compiler.catalog.resource(:notify, \"test\")['message'].should == 'two'\n+      @compiler.catalog.resource(:class, \"bar\").should_not be_nil#['message'].should == 'two'\n+    end\n   end\n end\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3030878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3035883", "body": "I haven't signed the Puppetlabs CLA. Is it required for a patch to be used?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3035883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3045467", "body": "Ok, done.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3045467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3049562", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3049562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3056502", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3056502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mpdude": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2819978", "body": "Hi Jacob,\n\nI just opened a ticket, pointed to here from it and changed the commit message. Hope this helps!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2819978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3014527", "body": "If I am not mistaken, http://projects.puppetlabs.com/issues/9192 came up about the same time I suggested this change. It seems to address the same problem.\n\nIf you agree, I'll cancel this request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3014527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tangledhelix": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2844404", "body": "Added the suggested test.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2844404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "adimania": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2857638", "body": "Since :id => false, the sequence table is not created when one tries to enable inventory, id column is created perfectly fine though. Removing :=>false creates the sequence table and hence get rid of missing sequence table error.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2857638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "simonsd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2866627", "body": "The patch for archlinux service resources is no longer necessary.\nhttps://github.com/puppetlabs/puppet/pull/66 actually fixes this already, and it's just been merged.\nclosing this for now and gonna see if we can refactor the yaourt part a bit more.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2866627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "domcleal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2983405", "body": "Ah yes, thanks for catching that.  I see the same error now I've removed ruby-augeas.. I naively thought that nesting the describe inside the other that requires Augeas would have done the trick.\n\nDid you want me to update the branch, or are you changing it during the merge?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2983405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2988636", "body": "I've changed the latest commit on the branch with the fix.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2988636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9872851", "body": "@hguemar but EL7 will use the systemd provider, not the 'redhat' provider: https://github.com/puppetlabs/puppet/blob/048698a53bc51c752698b86221d644465bb752fb/lib/puppet/provider/service/systemd.rb#L48\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9872851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "kscherer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2994030", "body": "Some discussion for this pull request was done in https://github.com/kscherer/puppet/commit/91aea02492256c717fa598cd691c9118fccfc042#comments\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/2994030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3140927", "body": "@pcarlisle @joshcooper - I would appreciate if you could look at this patch to the zypper provider. Thanks to @mikeknox for his testing.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3140927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "eklein": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3116902", "body": "Jacob,\n\nMy username on redmine is hajile if that helps at all.  I didn't create a\nredmine ticket, though I can if you'd like.\n\nLet me know.\n\n-Eli\n\nOn Mon, Dec 12, 2011 at 5:31 PM, Jacob Helwig <\nreply@reply.github.com\n\n> wrote:\n> \n> Eli,\n> \n> Do you know if there's an associated Redmine ticket for this change?  We\n> require a signed CLA for all submissions ([CONTRIBUTING.md](https://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md)), and\n> the only way we currently have to track this is through Redmine (and the\n> easiest way there is by looking for the badge icon next to people's name\n> when the create a ticket, or comment on one).\n> \n> The change itself looks absolutely reasonable.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/puppetlabs/puppet/pull/208#issuecomment-3116803\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3116902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mkincaid": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3126605", "body": "Yeah, the metric_fu gem is dependency hell. In case it helps at all, here's what I used to finally get 2.1.1 to work. (I can't remember now why I needed rack and ripper; those two might be optional.)\n\n  package { [\"metric_fu\",\"rspec\",\"mocha\",\"rack\",\"ripper\"]:\n    ensure => present,\n    provider => gem,\n    require => [Package[\"main\"],Package[\"ruby_parser\"]],\n  }\n  package { [\"main\"]:\n    ensure => \"4.7.1\", # chronic dependency breaks starting in 4.7.2\n    provider => gem,\n  }\n  package { [\"ruby_parser\"]:\n    ensure => \"2.0.4\",\n    provider => gem,\n  }\n\nI haven't tested with 1.5.1 so can't speak to why that doesn't work.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3126605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3126879", "body": "And, upon trying to do this again today, it seems like you need chronic=0.3 but you no longer need to force the version of ruby_parser. Go figure.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3126879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3127949", "body": "Unfortunately the saikuro test seems to break if you try to redirect its output_directory, so tmp/metric_fu still gets created, but this commit will at least move all the other scratch stuff to TMPDIR.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/issues/comments/3127949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "schwern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/517288", "body": "Why 6.2 seconds?  Oddly specific, and well beyond the orbit of the moon.  6.2 light seconds is about 1,860,000km which is suspiciously close to the distance to the Sun-Earth L1 point.  Is that the range to your REAPER INVASION FLEET waiting in the glare of the sun to wipe out humanity? Is Puppet actually a plan to develop an EMERGENT ARTIFICIAL INTELLIGENCE of the world's computer systems? Are you planning on handing control of the world's infrastructure over to your CYBERNETIC MASTERS at the critical moment of invasion in the hopes of gaining their favor and making you their fleshy avatar?!\n\nOr have I been playing too much Mass Effect?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/517288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pfig": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/517297", "body": "They're clearly building Dyson spheres.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/517297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wfarr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1467527", "body": "So this change looks to have never been merged to `2.7.x` release branch so even though this was supposed to be in 2.7.10 some months ago, it's still not in even 2.7.14.\n\nDefinitely need this STDIN support \u2014 could we get this rolled into a 2.7.15 release and pushed out _relatively soon_?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1467527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "vojtekb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1598592", "body": "why is '/' illegal?\n\nWe are using  externally signed certificates for our puppet setup. Before this change it works perfectly, with this change we get the following error:\n\nerr: /File[/var/lib/puppet/lib]: Failed to generate additional resources using 'eval_generate: Certname \"/c=nl/st=noordholland/l=amsterdam/o=some company/ou=tech ca0 (root ca)/emailaddress=tech@somecompany.com\" must not contain unprintable or non-ASCII characters\n\nThere are indeed slashes in the name but they were added by legitimate openssl operations.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1598592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1598593", "body": "BTW. the error message does not mention that '/' is not allowed so users will go and look for really unprintable characters\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1598593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1608600", "body": "@jeffmccune \nversion 2.7.13 <- worked fine\nversion 2.7.18 <- not\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1608600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "garethr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1605573", "body": "Running the test suite from master has the following in the output. Not sure if that was why rack was in the Gemfile.\n\n```\nFailed to load feature test for rack: no such file to load -- rack\n```\n\nIt would definitely be _a good think_ to get a supported version of this available, I nearly created it myself before finding the original pull request.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1605573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rtyler": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1613171", "body": "I has a sad. The Gemfile took me easily 30-45 minutes of guess-and-check-rspec work to get right, I really do think it should be added back in\n\nI don't remember why I added cucumber in there, that might have been just force of habit on my part (oops).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1613171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1618531", "body": "This has no effect on cucumber-puppet whatsoever. New pull request explicitly against 3.x is [here](https://github.com/puppetlabs/puppet/pull/959)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1618531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "adrienthebo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1759545", "body": "The lack of banana actions disappoints me.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1759545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6832464", "body": "@ferventcoder I think that rug is only usable on SLES 10.*, do you know if we support that version?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6832464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6843060", "body": "Well, you're right, I just wanted to see if I could manage to dodge responsibility for this :) I'll take more poking at this and probably update the confines. Thanks for paying attention to this!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6843060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974782", "body": "@elyscape pull requests have already been merged and closed are usually gaping voids that swallow further comments; if you're having issues with a PR your best bet is to file an issue on JIRA so it'll be tracked with other onging work.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974968", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "zaphod42": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1762402", "body": "I was saddened too. But we must go on and live our lives without banana actions! Persevere @adrienthebo! \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1762402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371459", "body": "Probably. I completely missed that. Fortunately `encode` and `force_encoding` should both be available at the same time.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371629", "body": "I got it. Pushed it up as a maintenance commit as https://github.com/puppetlabs/puppet/commit/b173ac0f8557f4dd4fee18f1c7e0cdf5a4b85508\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4445355", "body": "Unfortunately not. It does deal with a portion of http://projects.puppetlabs.com/issues/13097. To fix 3371 (and the rest of 13097) we need to change https://github.com/puppetlabs/puppet/blob/master/lib/puppet/file_bucket/file.rb to stop storing the contents in memory.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4445355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "djmitche": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1795767", "body": "c.f. gh-1101 for a proposed fix\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1795767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/3016260", "body": "Sounds good - thanks!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/3016260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "blogbasti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1912410", "body": "Hi Josh,\n\n> The `windows` service provider no longer implements the `restart` method\n> directly as its parent `service` provider handles this correctly.\n\nSince an update from 2.7.18 to 2.7.19 puppet on windows is unable to handle service refresh:\n\nThu Sep 27 08:08:26 +0200 2012 /Service[nscp](err): Could not evaluate: Could not find init script for 'nscp'\nThu Sep 27 08:08:26 +0200 2012 /Service[nscp](err): Failed to call refresh: Could not find init script for 'nscp'\n\nI think there is maybe something wrong with this update. In Version 2.7.18 everything works fine with my definition.\n\nWhat do you think, Josh?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/1912410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ruworuro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2129720", "body": "Works in puppet 2.7\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2129720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rismoney": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2303681", "body": "on a particular server I am getting this error.  I am not certain what assumptions are being made here...\nOn the local disk (hardware RAID1), there is a system reserved partition (no drive letter), a C: drive with the OS installed, and an unallocated rest of the disk... When I formatted the unallocated space on the rest of the disk, it passed...  It should have succeeded imho...\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2303681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wilas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2635269", "body": "Centos/RHEL/Fedora all use pip-python instead of pip -> It depend how you install pip. If you use `yum install python-pip` and install pip from epel then it is true. But if you install pip by easy_install `easy_install pip` then command is pip. Actual pip version from epel is 0.8, but using easy_install you are able use pip in version 1.2.1. \n\nPersonally I prefer easy_install version. Right now I have to use pip-python on RHEL boxes because for RedHat osfamily puppet pip provider require pip-python command (I know I can make symlink pip to pip-python but it is dirty solution). \n\nPlease could you update line 112 to: `if pathname = which('pip') or which('pip-python')` then self.class.cmd is not needed more and if someone install pip by easy_install then that solution is promoted.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2635269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2638173", "body": "Hi Jeff,\n\nI will try contribute to Puppet. Thx for links.\n\nCheers,\nKamil\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2638173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2639016", "body": "I've made needed changes. My pull request: https://github.com/puppetlabs/puppet/pull/1486\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/2639016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "yom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4210756", "body": "Hi, this regex should either be case-insensitive or start with a lowercase n, otherwise it won't match.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4210756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jpartlow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4226840", "body": "Thanks very much for catching this.  The dpkg-query output changes in later Debian versions which weren't in our acceptance matrix.  there is a new PR 1960 addressing the warning change.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4226840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8721473", "body": "It seems reasonable to restrict to directories here.  The Module itself validates the name according to a regex.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8721473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "fiddyspence": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4318312", "body": "Sorry - this doesn't actually fix the advertised problem of providing a validated data item unless I've missed something.  $::clientcert is provided by\n\npuppet/node/facts.rb:    values[\"clientcert\"] = Puppet.settings[:certname]\n\nSo, trusting it here is misleading and wrong\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4318312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4318329", "body": "I take that back - missed the request.remote? check a few lines up.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4318329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "raphink": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371455", "body": "Oh right. I fixed the code with `:encode` instead of `:force_encoding`, but not the condition (altought they do come together). Want a PR for that?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371471", "body": "I've updated the branch if you want to pull from it again.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371918", "body": "Thanks. Sorry for that.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4371918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dalen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4442700", "body": "Doesn't this fix http://projects.puppetlabs.com/issues/3371? \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/4442700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kylog": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5079329", "body": "@aperiodic did you mean this second test to echo $LC_ALL?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5079329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/7054346", "body": "Yeah this one is a poster child for ruby love.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/7054346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9387858", "body": "@phathocker this change was first released in puppet 3.4.3.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9387858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12287390", "body": "Thanks @rnelson0 !\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12287390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14101057", "body": "@digitalprecision sorry, but 2.7 has been EOL for 2+ years: https://groups.google.com/forum/#!msg/puppet-users/8JEy7wY5VPs/9N07fgfU1mAJ.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14101057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14305384", "body": "Thanks! #4438.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14305384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14305894", "body": "Oh right. Should those urls use `latest` rather than `3`? Or ...?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14305894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15329203", "body": "So ... it turns out this blows up `rake -T` if one has done a `rake package:bootstrap` previously (and if `DMG=true` is not set in one's environment) because by default (i.e. without that env variable) that rake task doesn't exist.\n\nE.g.\n\n```\n[173]  puppet git:(master) be rake -T\nusing :apt_host to sign packages is deprecated. Please update build_defaults.yaml to use :apt_signing_server\nusing :apt_host to sign packages is deprecated. Please update build_defaults.yaml to use :apt_signing_server\nusing :apt_host to sign packages is deprecated. Please update build_defaults.yaml to use :apt_signing_server\nrake aborted!\nCould not locate a Rake task named 'package:apple' to add a dependency of 'cfpropertylist' to\n/Users/kylo/devel/puppet/ext/packaging/lib/packaging/util/rake_utils.rb:39:in `add_dependency'\n/Users/kylo/devel/puppet/ext/packaging/lib/packaging/util/rake_utils.rb:59:in `block in evaluate_pre_tasks'\n/Users/kylo/devel/puppet/ext/packaging/lib/packaging/util/rake_utils.rb:58:in `each'\n/Users/kylo/devel/puppet/ext/packaging/lib/packaging/util/rake_utils.rb:58:in `evaluate_pre_tasks'\n/Users/kylo/devel/puppet/ext/packaging/lib/packaging/util/rake_utils.rb:108:in `load_packaging_tasks'\n/Users/kylo/devel/puppet/ext/packaging/packaging.rake:13:in `<top (required)>'\n/Users/kylo/devel/puppet/Rakefile:26:in `load'\n/Users/kylo/devel/puppet/Rakefile:26:in `<top (required)>'\n(See full trace by running task with --trace)\n```\n\n/cc @MikaelSmith.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15329203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "aperiodic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5079412", "body": "Ugh, yes.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5079412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ferventcoder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5238953", "body": "Does this return the windows default_values?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5238953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6400832", "body": "Did we bring all of these over as a reimplementation? Do we gain much by referencing all of them? What do we stand to lose?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6400832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6436400", "body": "Thanks for catching that one\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6436400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6436401", "body": "And that guy as well.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6436401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6513064", "body": "Oh, yeah I didn't see that. :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6513064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6770790", "body": "Missed getting this small documentation notice fixed prior to merging...\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6770790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6831708", "body": "We didn't decide to keep around the idea of default by version? Or are the older versions no longer used?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6831708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6831713", "body": "This specifically - https://github.com/puppetlabs/puppet/blob/3.6.1/lib/puppet/provider/package/pkg.rb#L26\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6831713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6839822", "body": "I have no clue here. Just stating the direction I thought we were going. But if your expert thought this was okay, got to lean with it... :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6839822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6844339", "body": "No worries, just wanted to make sure that's where we were thinking about going...\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/6844339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8231940", "body": "Good point. I looked at this several times, but it didn't immediately jump out as an issue. Thanks for taking a look. :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8231940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8473053", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8473053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8859360", "body": "I just started running into this as well. \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8859360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9218696", "body": "Thanks, was this actually filed somewhere? I deleted the branch.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9218696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12287006", "body": "good point - @kylog \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12287006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15291980", "body": "Now I think that this is probably important for encoding as well, which would make this a great candidate for all read calls on Windows.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15291980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15434340", "body": "Doh! Was hoping for the linkup I asked [for on the PR](https://github.com/puppetlabs/puppet/pull/4534#issuecomment-168148500):\n\nThis was introduced in b46ede7 (Puppet v4.0.0).\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15434340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15434355", "body": "649df148ab1f348000f41a7f941bbfd39066321f provides a fix for binary reads\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/15434355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "DavidS": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5418211", "body": "Shouldn't this be changed to :force_encoding?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5418211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "peterhuene": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5423929", "body": "It shouldn't really matter as the intention was to limit the spec to 1.9+ and both methods are implemented in 1.9+.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5423929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8859553", "body": "See also the comments on this PR: https://github.com/puppetlabs/puppet/pull/3318\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8859553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/11165957", "body": "Should be removed.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/11165957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/11165958", "body": "Should be removed.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/11165958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/11165959", "body": "Should be removed.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/11165959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rb2k": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5502741", "body": "Thanks :)\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/5502741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "highb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/7736898", "body": "Got it now, https://github.com/puppetlabs/puppet/pull/3072\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/7736898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Aedu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8504557", "body": "Please review this Problem, under (Suse) sles 11 /sp1/2/3 this problem persists with the new solution. At every puppet run the puppet tries to enable \"false\" to \"true\" for services which are already UP and running in runlevels 35 for example. Short Solution was to rework the redhat.rb again like described at \nhttps://github.com/puppetlabs/puppet/pull/1602/files#r3824008\nLike that it works as needed.\nTested with puppet 3.7.1 and 3.7.3.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/8504557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "archilitto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9084066", "body": "L\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9084066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cprice404": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9161150", "body": "@joshcooper that was me.  I did it because, other than this test, I didn't see anywhere where this behavior was relied upon, and I felt that the existence of the `to_s` method made it actively harder to debug things related to the indirector.  (Read: many different tickets I've worked on where I added a print statement to the request so I could see what it looked like, and thought it was a String because of the way that it printed.)\n\nI personally feel that we're better off without it, but I don't care much, so if there's a reason why you think it's valuable I don't mind opening another PR to add it back in.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9161150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9168315", "body": "I'll check.  If the error message is less meaningful I'd rather fix that w/o putting the 'to_s' back in, though, if that makes sense to you.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9168315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9173267", "body": "Thanks @rlinehan, that sounds good to me.  Maybe call the method 'description'?  Since it's not always a URI?  Don't care too much about the name, personally, but my vote is for avoiding to_s.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9173267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386452", "body": "Not sure I understand this, in the context of your previous request to add all of the other LC_\\* vars to my list... would you mind clarifying?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/386452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/399245", "body": "got it, thanks.\n\nOn Mon, Jan 30, 2012 at 2:09 PM, Daniel Pittman <\nreply@reply.github.com\n\n> wrote:\n> \n> > @@ -22,7 +22,13 @@ def exec_tester(command, exitstatus = 0, rest = {})\n> > \n> > ```\n> >  status = stub \"process\", :exitstatus => exitstatus\n> >  Puppet::Util::SUIDManager.expects(:run_and_capture).times(tries).\n> > ```\n> > -      with(command, nil, nil, :override_locale =>\n> >   false).returns([output, status])\n> > -      with() { |*args|\n> \n> Ruby convention is to use `do` and `end` on multi-line blocks.  This\n> doesn't block merging, just for future reference.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/puppetlabs/puppet/pull/418/files#r399214\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/399245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rlinehan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9172569", "body": "I just checked, and yes, it does seem to mean that this is error message is less meaningful. It also seems like it is used in https://github.com/puppetlabs/puppet/blob/master/lib/puppet/indirector/indirection.rb#L308. I can add it back but rename it something like `to_uri`.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9172569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9178313", "body": "@cprice404 @joshcooper I've opened https://github.com/puppetlabs/puppet/pull/3454 to add this back in.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9178313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "benhocker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9387321", "body": "@jeffmccune When will this be released?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9387321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9389735", "body": "Ok. Thanks. I've been testing multiple versions today and I must have gotten confused. \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9389735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hguemar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9872812", "body": "Please no, most linux distributions have standardized around systemd, please use systemctl instead starting RHEL/CentOS 7+. This gonna break a lot of stuff\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9872812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9873144", "body": "great :+1: \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/9873144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "daenney": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10030953", "body": "@mhaskel Looks like it's :tada: time!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10030953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Nickier": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10337739", "body": "what\u2018s this\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10337739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "grobian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10603708", "body": "This change causes the puppet run to be non-interruptable, I suspect because the stop signal (ctrl-c) is only handled after agent_run finishes.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10603708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "elyscape": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974495", "body": "This should read:\n\n``` ruby\nargs = [command(:yum), 'check-update', '-d', '0', '-e', '0']\n```\n\nAs it stands, `check_updates` will catch a bunch of debug and error info that `parse_updates` isn't equipped to handle.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974644", "body": "I lied, apparently it handles that by stripping off everything before the first blank line.  The problem is that if you have obsoleted packages, `parse_updates` will fail.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974910", "body": "Indeed.  This was a temporary thing while I was waiting for the other guy to make the issue.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10974910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10976258", "body": "It's [PUP-4497](https://tickets.puppetlabs.com/browse/PUP-4497), btw.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/10976258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rnelson0": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12285857", "body": "missing > after digits.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12285857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/13864843", "body": "I couldn't get the clientcert to parse no matter what I tried here. I munged this and it works, but hopefully we can find a solution that's properly dynamic.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/13864843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "er0ck": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12593233", "body": "bummer\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12593233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "henrik-lindberg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868469", "body": "why not initialize @count with 0 and then always increment?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868579", "body": "Look at the documentation in 'adaptable.rb' - it should be possible to have an \u00b4initiaize\u00b4 method that sets @count = 0.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868597", "body": "there is an `eAllContents` method that iterates the entire tree\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868616", "body": "'nodes' is not the best of names in a puppet context - although they are 'nodes' in the AST tree, they are perhaps better referred to as 'model', 'instruction', 'op', or 'ast' since 'node' has a very different meaning in puppet. (Just makes this less confusing as it is not about 'host nodes').\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868626", "body": "write \u00b4if get_counts(model)`\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868636", "body": "'evaluated' instead of 'hit' ?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "iankronquist": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868530", "body": "I can't figure out how to initialize `@count` to 0. The way I am currently [invoking this function](https://github.com/puppetlabs/puppet/compare/master...iankronquist:coverage-adapter/pup-4964#diff-9c2c9ff9f4b472b68b4fc5155ce9d98bR73) does not wind up calling the constructor. Perhaps I'm overlooking something simple?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12868530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12884582", "body": "I was mistaken, that does work. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12884582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12884781", "body": "I updated this file according to all of your comments.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12884781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12884793", "body": "What was I thinking?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/12884793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "asasfu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/13756313", "body": "See main comment on this commit.  This works but feels dirty.  Is it ok that I have to lookup my puppet defined type in graphing this way?  lib/puppet/type/whit.rb seems to mention this may be a legacy thing or?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/13756313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "digitalprecision": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14100154", "body": "Is it possible to pull this into 2.7? We can't upgrade at this time but would like the same functionality.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14100154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "AndreaGiardini": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14297708", "body": "Typo here\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14297708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "HAIL9000": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14306965", "body": "I added PUP-5485 for that work so we could get the https update in. I'm happy to address that ticket now and close it out if we want these updated for 4.3\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14306965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "aqueos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14619787", "body": "hi,\n\n> If we are trying to manage\n> the SysVInit version, we need to use systemctl to determine the\n> status in Debian 8 and Ubuntu 15.04.\n\ni must disagree here :)\n\n i wrote this comment about the change you made to use the systemctl on debian 8, this break the jessie that did not have systemd packages. This change without testing the existance of systemctl make the following issue:\n\n1/ force us to install all the systemd compatibility thing and add a bunch of unecessary packages so puppet do not choke on each 'service' statement\n2/ see puppet choke and have it launch 'start' for each service each time it launch\n\nas solution 1 add potential surface of attack and bug and also risk that a future upgrade mess things up by forcing the boot to use systemd on system where systemd cannot run ( because its a inii system and a cron system and a syslog system and a ntp system and whatever, next year i guess a x server too) and therefor cannot run everywhere (lxc, vserver and docker )  this change is a major issue for us.\n\nMay i suggest to remove it or to add a condiftion on the presence of the systemd package on the line\n\n if ((os == 'debian' && majversion >= 8) || (os == 'ubuntu' && majversion >= 15)) ?\n\nbest regards,\nGhislain.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14619787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "whopper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14621747", "body": "@aqueos I filed https://tickets.puppetlabs.com/browse/PUP-5548 and will look into a solution.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/14621747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "andersonmills": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17264420", "body": "This commit is the work of PUP-4096.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17264420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Poil": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17946688", "body": "Hi,\n\nIt will be nice to backport this patch on Puppet 3.8.x\n\nBest regards,\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17946688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17955278", "body": "I've patch some old windows 2000 upgraded to 2003, it's working fine\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/17955278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sathieu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/18705710", "body": "Can you please revert this?\n\nPlease don't remove dist support without deprecation notice (see fore example [windows 2003](https://docs.puppet.com/puppet/4.2/reference/release_notes.html#deprecated-windows-2003)).\n\nAnd adding jessie would be a major improvement.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/18705710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kurtwall": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/19594070", "body": "Oops. Sorry.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/19594070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "scottyw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20628136", "body": "What do you think about just straight up saying \"packages\" here?", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20628136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20628151", "body": "I think this is accurate but I feel I would be OK like just saying the object for a single package is just a map of string to string.", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20628151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20628355", "body": "Sent you an email about this.", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/20628355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "hunner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/comments/22836863", "body": "As of v1.0.0 of semantic_puppet (and all previous versions) the `SemanticPuppet::VersionRange.parse` method only accepts a single argument, so this breaks installing from the forge.", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/comments/22836863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ccaum": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270500", "body": "Shouldn't it just be :current?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270721", "body": "For Puppet Enterprise, I think this should default to /opt/puppet/share/puppet/modules, or at least shouldn't be the first directory in the modulepath.   This way it's easy to overwrite the module with a custom one later.   It also will make it easier to later have a MCollective client that can install modules to all PE master installs with a single command.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/270721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/327129", "body": "What happens when @resource[:password] is nil (not provided)? Does Puppet::Util::ADSI::User#password blow up?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/327129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/327203", "body": "If that's an expected result, then we should fail. Since puppet properly spits back the message explaining what happened, this seems acceptable. \n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/327203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "kbarber": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/275013", "body": "For some background ... I added the environment variable handling in the old tool because I was behind a proxy and _didn't_ want it in puppet.conf ... you _could_ use command line args instead here but that would be cumbersome to type each time. So the requirement was really to have a separate proxy in use by puppet module that wouldn't be used by the puppet agent.\n\nIf we have a way of setting say a [module] area in the puppet.conf then we have at least met my requirement.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/275013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "lifton": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278639", "body": "Something is wrong here. Seems like this test shouldn't be passing because it has the wrong error message. I'll look into this.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278692", "body": "Fixed. A bad error message was camouflaged by a bad test.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/278692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364217", "body": "This test doesn't check that the delimiter is used as stated in the title. Something like:\n\n[\"foo=baz;bar=boo\", \"bar=boo;foo=baz\"].include?(s).should be_true\n\nis more precise and tests for the delimiter.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364230", "body": "This is a bit tighter:\n\n[\"{a => b, c => d}\", \"{c => d, a => b}\"].include?(hash.to_s).should be_true\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364241", "body": "Why are these renamed?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364248", "body": "What are the elements of the hash? Are they guaranteed to always have the sort method? Is nil a possibility?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/364248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mudge": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/294540", "body": "The problem here is that what needs to be returned is `properties`, not the original `package` so `detect` alone won't be enough. If we separate out the detection from the parsing, it'll mean parsing twice instead of once, e.g.\n\n``` ruby\nmatching_package = packages.detect do |package|\n  properties = self.class.parse(package)\n  properties && resource[:name] == properties[:name]\nend\n\nself.class.parse(matching_package) if matching_package\n```\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/294540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "MaxMartin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/300614", "body": "The reason is that for resources like exec and file we specifically need the namevar, as it's the fully qualified path. If you had an exec resource that you had titled \"Foo,\" `Resource#ref` would give you \"Exec[Foo]\", and for the resourcefile we need to know the path of any files or execs that are being managed by Puppet, not their titles. My first pass at this patch actually did what you suggest and just replaced the line with `Resource#ref` until Matt pointed out this flaw to me during review. This case is covered in the resource defined in the \"should write its managed resources' types, namevars\" spec on spec/unit/resource/catalog_spec.rb:25, where there is an exec with the title \"Bob\", but where we want for \"exec[/bin/rm -rf /]\" to be written to the resourcefile.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/300614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ptinsley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/327194", "body": "With no password I get the same behavior as before:\nerr: /Stage[main]/Admins/User[puptest]/ensure: change from absent to present failed: User update failed: SetInfo\n    OLE error code:800708C5 in Active Directory\n      The password does not meet the password policy requirements. Check the minimum password length, password complexity and password history requirements.\n\n```\nHRESULT error code:0x80020009\n  Exception occurred.\n```\n\nWith a password:\nnotice: /Stage[main]/Admins/User[puptest]/ensure: created\n\nSo pretty much the expected result given that a password policy is in place.  No code explosions but also no user creation.  Could make a bogus complex random password if the goal is for it to always succeed?\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/327194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/327220", "body": "Well actually puppet only does that on windows 7 of what I've tested so far.  So I think that just happens because the windows description has gotten better.  On w2k3r2 the error is pretty obtuse.  BUT the OLE error code is the same so someone could look into trapping any OLE errors and translating the code into a common failure back to the user.\n", "reactions": {"url": "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/327220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}