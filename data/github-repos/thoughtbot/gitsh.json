{"_default": {"1": {"benknoble": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/323", "title": "\"Which git\" prompt placeholder", "body": "My gitsh prompt contains the string `git` at the end of the prompt, both to remind me of my context and to let me know that everything is getting a git prefix.\r\n\r\n```\r\nproject (feature-branch @) git> \r\n```\r\nI get this with `%D (%c%b %#%w) git> `.\r\n\r\nI have `hub` installed, and use it frequently, but typically *only* to interact with github (again, this is for context purposes). However, occasionally I want to fire up gitsh with hub (`gitsh --git \"$(which hub)\"`). Most often I do this in a split tmux pane via a hotkey.\r\n\r\nI would like to be able to see the \"git binary\" being used in my prompt.\r\n\r\nWould it be possible for gitsh to support a prompt placeholder that resolves to the currently-used git binary?\r\n\r\nSomething like\r\n```\r\n%g        basename of current git binary\r\n%G        full name of current git binary\r\n```\r\n\r\nThen the prompt `%D (%c%b %#%w) %g> ` would become\r\n- `project (feature-branch @) git> ` when run normally\r\n- `project (feature-branch @) hub> ` when run with `hub`\r\n- &c.\r\n\r\nThis extends to `gh` and other git providers (??) as well.", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/324", "title": "Implement git_command placeholder in prompt", "body": "See #323 \r\n\r\nThis required a fairly minimal change to the pattern-matching substitution when generating the prompt string. I also updated the relevant section of the man page.\r\n\r\nThe tests fail without my code and pass with it, though it should be noted that this was my first experience with ruby and spec.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sharplet": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/321", "title": "Support tilde \"~\" expansion for external commands", "body": "I just tried the following command and was surprised when it didn't work:\r\n\r\n```\r\nmy-app my-branch! !mv activity.json ~/Desktop/                                                                                                                                                                                                                       \r\nmv: rename activity.json to ~/Desktop/: No such file or directory   \r\n```\r\n\r\nWould it be possible to support tilde expansion for external commands?", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gfontenot": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/320", "title": "Fresh install not loading correct Ruby", "body": "This is probably a macOS 10.12 issue, but I don't have Ruby 2.0 installed (at a global level) on my machine, so `gitsh` is failing to launch:\r\n\r\n```\r\n\u276f gitsh\r\n/usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor.rb:1:in `require': dlopen(/usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor_native.bundle, 9): Library not loaded: /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/libruby.2.0.0.dylib (LoadError)\r\n  Referenced from: /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor_native.bundle\r\n  Reason: image not found - /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor_native.bundle\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/line_editor.rb:1:in `<top (required)>'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/environment.rb:3:in `require'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/environment.rb:3:in `<top (required)>'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/cli.rb:2:in `require'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/lib/gitsh/cli.rb:2:in `<top (required)>'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/gitsh.rb:6:in `require'\r\n        from /usr/local/Cellar/gitsh/0.12/share/gitsh/ruby/gitsh.rb:6:in `<main>'\r\n\u276f ls /System/Library/Frameworks/Ruby.framework/Versions\r\n2.3     Current\r\n```", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/231", "title": "Support custom commands in the prompt", "body": "I got really used to having an indicator that I had changes that hadn't been pushed to the tracking branch. I did that by checking the result of `git cherry -v origin/$(current_branch_name) 2>/dev/null`, although I'm sure there's a better/more flexible way to do it. I really miss having that indicator (I'm an idiot and will 100% forget to push changes), and it'd be great to have it inside gitsh.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/993e9a13e307652e1e05ce37d1f214e5cab48588", "message": "Create vendor/gems if it doesn't exist\n\nI was having an issue when migrating this code over to Liftoff where if\nvendor/gems didn't exist, the entire vendorizing script didn't run. By\ntesting that the directory exists and creating it if not, these errors\nstop happening."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33141073", "body": "Perfect.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33141073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34674205", "body": "You can use the `--git` flag to specify the git executable. This works with `hub`: `gitsh --git hub`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34674205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "georgebrock": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/319", "title": "Different tab completion rules for different Git versions", "body": "The current tab completion file is based on the manual pages from Git 2.13.1. Newer versions of Git could introduce options and arguments that we won't be able to complete. Conversely, we will offer completions to users of older versions of Git that they can't actually use.", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/318", "title": "Tab complete commit messages", "body": "Git allows a revision to be specified by giving a substring of the commit message's first line prefixed with `:/`, e.g. `:/refactor` or `:/\"refactor tab\"` would match messages like `refactor tab completion`.\r\n\r\nWe could provide tab completion for this!", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/317", "title": "Better fallback rules for tab completions", "body": "If a particular command doesn't have any specific tab completion rules associated with it, it would be nice to provide some basic default tab completion behaviour to fall back on.\r\n\r\nA couple of approaches I've considered are:\r\n\r\n1. Fall back to default behaviour when the tab completion system returns no results.\r\n2. Add a `$unspecified` matcher to the DSL that would match any command or alias that didn't have a more specific rule. That could be used in a rule like `$unspecified $opt* ($revision|$path|$remote)* -- $path*`", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/316", "title": "Improve completions file error handling", "body": "When a completions file is invalid, it's not very clear what went wrong or how to fix it. To make matters worse, completions aren't loaded until the first time the user tries to tab complete something.\r\n\r\nThis will become even more important with user-specific completions files (#315).\r\n\r\nSome things we could consider here:\r\n\r\n- Better error messages.\r\n- Loading completion file(s) on startup instead of first use.\r\n- Should a missing global completions file cause an error?\r\n- Is it possible to introduce an infinite loop, e.g. by using `$opt` as an option argument?", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/315", "title": "Support a user-specific completions file", "body": "As well as the global completions file in `$prefix/etc`, we should support a user-specific completions file in the user's home directory. This would allow users to define completions for their custom Git commands and aliases.", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/314", "title": "Add more matchers to the tab completion DSL", "body": "Various rules in the completions file use the a less specific matcher to represent a specific value. In many cases we use the `$anything` matcher, e.g.\r\n\r\n```\r\nlog $opt*\r\n  --tags $anything?\r\n```\r\n\r\nThese could be replaced with more specific matchers, e.g.\r\n\r\n```\r\nlog $opt*\r\n  --tags $tag?\r\n```\r\n\r\nThe following things could be useful:\r\n\r\n- [ ] `$stash` for the names of Git stashes, e.g. `stash show $stash`\r\n- [ ] `$tag` for the names of Git tags, e.g. `log --tags $tag`\r\n- [ ] `$dir_path` for paths that should always be a directory not a file, e.g. `:cd $dir_path`\r\n- [ ] `$branch` for revisions that should always be a branch name, e.g. `branch --delete $branch`\r\n- [ ] `$var_name` for the names of gitsh variables, e.g. `:set $var_name $anything`\r\n- [ ] `$config_var_name` for the names of Git config variables, e.g. `config $config_var_name`\r\n- [ ] `$author` for names or emails of contributors to the repo, e.g. `log --author $author`\r\n- [ ] `$modified_path` for paths that have uncommitted changes, e.g. `add $modified_path`\r\n- [ ] `$ctag` for program symbols defined in a ctags(1) file, e.g. `log -S $ctag`", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/303", "title": "Resizing terminal window while in a pager confuses the next pager", "body": "1. Open gitsh in a small terminal emulator window\r\n2. Run a command that starts a pager\r\n3. Increase the window size\r\n4. Close the pager\r\n5. Run a command that starts a pager\r\n6. The new pager will be initialised at the original smaller window size\r\n\r\nThis is similar to the issue discussed in https://github.com/thoughtbot/gitsh/issues/144#issuecomment-69459773 and fixed in #221.\r\n\r\nWe might be able to fix this by updating environment variables on SIGWINCH. The less(1) manual page says this about the `COLUMNS` environment variable:\r\n\r\n> Sets the number of columns on the screen.  Takes precedence over the number of columns specified by the TERM variable.  (But if you have a windowing system which supports `TIOCGWINSZ` or `WIOCGETD`, the window system's idea of the screen size takes precedence over the `LINES` and `COLUMNS` environment variables.)", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/297", "title": "Multi-line commands add multiple history entries", "body": "When a command is split over several lines, it ends up adding several entries to the command history. It would be better, and more similar to general-purpose shells, if the whole command was added to the history.", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/295", "title": "Better messages on parse errors", "body": "Any error encountered by the lexer or parser will result in the somewhat unhelpful message `gitsh: parse error`.\r\n\r\nWe should try to tell the user:\r\n\r\n- what went wrong.\r\n- where the error occurred (especially for scripts).", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/294", "title": "Set rl_readline_name to gitsh", "body": "GNU Readline supports conditional configuration in a user's `.inputrc` that targets a specific program. To support this, programs that use Readline set `rl_readline_name`.\r\n\r\nBecause gitsh's `LineEditor` module is based on Ruby's `Readline` module, we inherited an `rl_readline_name` value of `\"Ruby\"`. We should change that to `\"gitsh\"`, add test coverage for gitsh-specific `.inputrc` directives, and document the whole thing in gitsh(1) the manual page.\r\n\r\nReadline docs: http://web.mit.edu/gnu/doc/html/rlman_1.html#SEC10", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/247", "title": "Release process doesn't commit updated INSTALL", "body": "The `INSTALL` file is generated from `INSTALL.in`, but is also committed to the repo so that people can read instructions on GitHub without having to download the distribution.\n\nI forgot to do it manually for version 0.10 (see #241 and #245), but since the `make release` build target already commits some updated files, we should just do it automatically.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/205", "title": "Releases should be signed with PGP", "body": "thoughtbot has a PGP key, available at http://pgp.thoughtbot.com\n\nThis key should be used to sign releases, so users can verify what they are downloading.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/41", "title": "The process name should be `gitsh`, not `ruby`", "body": "", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/35", "title": "Add a :function command for defining functions", "body": "For example:\r\n\r\n```\r\n:function pair name nick {\r\n  :set user.name \"George Brocklehurst and $name\"\r\n  :set user.email \"support+george+$nick@thoughtbot.com\"\r\n  :set gitsh.prompt \"$nick+$gitsh.prompt\"\r\n}\r\n\r\n# usage:\r\n# gitsh@ @pair \"Mike Burns\" mburns\r\n# mburns+gitsh@\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/35/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3e836be4db452f7eb54754c9c647ece3dff94368", "message": "Configure completions for common commands.\n\nThis tab completion configuration file includes:\n\n- All Git commands without arguments.\n- Popular Git commands, with their options and arguments.\n- Internal gitsh commands, with their options and arguments.\n\nThere are some argument types that we can't currently complete, and others\nthat are unlikely to ever be practical to complete. To represent those this\ncommit also introduces a `$anything` variable to the tab completion DSL. The\nvariable's corresponding `AnythingMatcher` class will match any input, but\nproduce no completions.\n\nThe options and arguments supported in the file are based on the manual\npages from Git 2.13.3. Other versions of Git support slightly different\noptions and arguments, which means we might complete things that don't work."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/373c68f5c4faf7776a520e223799a6f13ecc0079", "message": "Completion DSL: Support multiple option arguments.\n\nFor example, git-config(1) has a few options that take two arguments:\n\n    config $opt*\n      --get-color $anything $anything?\n      --get-colorbool $anything (true|false)?"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3130f35fe54e38b8039c3a1638ff2c6af9dfdd7e", "message": "Completion DSL: Allow leading/trailing blank lines.\n\nThis commit adds support for leading and trailing blank lines to the tab\ncompletion DSL."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/17f40c4c1fc7b38623613a57a88d830f4e2a34a9", "message": "Add option support to the tab completion DSL.\n\nThis commit expands the tab completion DSL with the ability to define\noptions like `-f` or `--force`.\n\nRules can contain an `$opt` variable, which indicates where options may\nappear. This will match on anything beginning with `-` or `--`, and\ncomplete to any known options.\n\nThe known options are listed as indented lines after the first line of the\nrule, with any arguments the options take specified in the same way as\nthe command's arguments would be.\n\nFor example:\n\n```\ncommit $opt* --? $path+\n  --all\n  --fixup $revision\n  --file $path\n  --untracked-files (no|normal|all)?\n```"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/34b0f60bcfe405f57d02c6b07767841fc3e4f85b", "message": "Add * and ? operators to git_completions(5)\n\nThis commit adds support for the * operator (zero or more times), and the ?\noperator (zero or one times) to the gitsh tab completion DSL."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ad9bd9bddeda3d2da9e3486d5fae35a32a50fcd1", "message": "Filter out duplicate completions.\n\nOur ability to detect incomplete paths is based on there being a single\nresult (e.g. if you complete \"s\" to \"src/\" we don't want to append a space\nas we normally would when there's a single completion).\n\nNow that the completion system uses an NFA, it's possible to get duplicate\nvalues (e.g. a command like `add $path* --? $path+` would invoke the `$path`\nmatcher twice in some situations).\n\nThis commit makes sure we filter out the duplicates so that the incomplete\npath detection continues to work.\n\n(While we're modifying the only line in this method, also move it to get\ndependency order between #matches and #completions)"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/69ae4f2df3e5747997d30d701da384b9de9cd78f", "message": "DSL to define tab completion automaton state graph\n\nThis commit introduces a domain specific language (DSL) to define the state\ngraph for the tab completion automaton. It also replaces the hard-coded\nstate graph with an equivalent graph loaded from a configuration file.\n\nThe details of the DSL are given in the gitsh_completions(5) manual page\nwhich is added in this commit.\n\nThe DSL will need to be expanded somewhat to do everything we want the tab\ncompletion system to be able to do, but this is a good step in that\ndirection."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8cf52c053d277b7411dcfef84eabf8ceeb4cb033", "message": "Update hound config.\n\nThis commit makes the Rubocop config used by Hound more consistent with the\nexisting project style."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d67e983b3ce66e858e40141df77d8bf8511bfb72", "message": "Tab completion NFA state graph visualization tool.\n\nThe tab completion system that was introduced in 1b673e5 uses a\nNon-deterministic Finite Automaton (NFA) to understand the user's input and\nselect relevant completions. The NFA has a directed graph of states.\n\nWhile the current NFA's state graph is small, the intention is to replace it\nwith a much larger and more complex graph.\n\nThis commit introduces a visualization tool, which outputs a representation\nof the NFA's state graph in Graphviz's dot language."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/33014f700390362fee824656cbba77384c5da74e", "message": "Support tab completion for variables.\n\nThis commit introduces a `Gitsh::TabCompletion::VariableCompleter` object.\nThis is completely separate from the NFA-based completion we use for most\nthings, because:\n\n- we immediately know we need to use variable completion based on lexical\n  analysis of the input without having to walk through the NFA's states,\n  and\n\n- the context in which the variable appears doesn't inform the completions\n  we present the user with.\n\nThe `Gitsh::TabCompletion::Facade` object gains the responsibility of\ndeciding which type of completion to invoke, based on information from the\n`Gitsh::TabCompletion::Context` object.\n\nTo load the config variables, we try to use the `git status --list\n--name-only` command. However, this command was only introduced in Git 2.6,\nand versions back to 2.4 are still officially supported by the Git team. If\nrunning the command with `--name-only` fails we fall back to parsing the\noutput of `git status --list`.\n\nWe don't use the backward compatible version everywhere, because the parsing\nwon't be perfect for multi-line config values (`--name-only` was introduced\nto address this problem)."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5cb52d762ac046b64abfe513395885f3d5d9c12c", "message": "Improve variable lexing.\n\nPrior to this commit, an incomplete variable reference (a line ending with\nan unescaped `$` character, or unclosed `${`) would produce a lexing error.\nAfter this commit it produces a parse error instead.\n\nWe want to start using the lexer for understanding tab completion context,\nwhich means we need to lex incomplete input. Having all legal-but-incomplete\ninput cause parse errors instead of lexing errors will make this much\neasier.\n\nNote that it's still possible to produce lexing errors with invalid input,\nbut it's more reasonable for the tab completion system to just ignore that\nand not provide any completions.\n\nPreviously the token `MISSING` was used to indicate that a line was\nincomplete, but could potentially be made valid with another line of input.\nThis commit renames that token to `INCOMPLETE`, and re-purposes `MISSING` to\nmean that something was missing from the end of the line that cannot be\nsupplied by an additional line of input."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c8f2f28718a8840c941df38e4fab236fa3d054c1", "message": "Add CODE_OF_CONDUCT.md\n\nGitHub has a new feature that indicates if a project has a code of conduct.\nWe already had one, linked from `CONTRIBUTING.md`. This commit just\nduplicates that link in a place where GitHub can find it."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8a7b301a8b3e049cb4712db23725938a7adc5e10", "message": "Arch package for version 0.12"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e4c9820ed8b7f2c2f12d150b8ccba62424bbe1ca", "message": "Bump version: 0.12"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/22362e9192049e7cf245e44f196337144a120824", "message": "Support for multi-line commands.\n\nLine breaks are supported in similar places to sh(1). Line breaks can be\nescaped anywhere by ending a line with a `\\` character. Unescaped line\nbreaks are also supported:\n\n- after logical operators (`&&` and `||`),\n- within strings,\n- between commands wrapped in parentheses, and\n- between commands in subshells.\n\nThe Lexer has been expanded to insert a `MISSING` token in all situations\nwhere the input is known to be incomplete (i.e. when the input ends with an\nescape character, or the input ends in any of the places where an unescaped\nline break can be used).\n\nAfter invoking the `Lexer`, the `Interpreter` checks the token stream for\n`MISSING` tokens. If it finds any it requests another line of input from the\ncurrent input strategy, appends it to the current input, and tries again.\n\nA new `EOL` token has been introduced to represent line breaks between\ncommands. In the `Parser` it's treated exactly like the `SEMICOLON` token.\n\nLexical analysis of comments needed to be improved to allow for comments at\nthe end of lines in a multi-line command. For example, the following input\nis valid:\n\n    (:echo 1 # comment\n    :echo 2)\n\nIt is semantically equivalent to:\n\n    (:echo 1; :echo 2)\n\nTo support this, the Lexer will now:\n\n- ignore whitespace before a comment's initial `#` character. This prevents\n  extraneous `SPACE` tokens from being produced. A trailing `SPACE` token\n  in a single line command is fine, but it can cause problems in a\n  multi-line command.\n\n- pop the `:comment` state without consuming the newline character at the\n  end of a comment, allowing the default parsing rules to handle the\n  newline, and produce an `EOL` token."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/603231f9170f7320a3df75e65b9f828dcac3a0b0", "message": "Change to the root path with :cd\n\n`:cd` without an argument will change to the repository's root path\n(`$_root`), much like a general purpose shell's `cd` without an argument\nwill change to the user's home directory (`$HOME`)."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5c2392123db317ed524e3144057ba8935bd28596", "message": "Introduce a $_root magic variable.\n\n$_root evaluates to the root directory of the current Git repository."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/24a2287089f288bd07c193cfe9c8ce796fe4c7da", "message": "Non-zero exit status for bad scripts.\n\nWhen gitsh is invoked in a non-interactive manner, a parse error should\nresult in a non-zero exit status.\n\nTo make sure this happens, parse error handling has been delegated to the\ninput strategies by the interpreter. In an interactive session, we output an\nerror message and continue the session. In a non-interactive session, we\nraise a Gitsh::ParseError, which will bubble up to the gitsh binary and\nterminate the session with an exit status of 1.\n\nSince the input strategy for files is used in a few internal places (in the\ninteractive input strategy, for loading .gitshrc, and in the :source\ncommand), those call sites have been modified to handle the possibility of a\nGitsh::ParseError."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/34f6a0d9676ba009e1c03b66cc7887d206ad4dcb", "message": "Remove duplicate fake_git_path definition."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c23ff00a0d3e83c84fec5b230e98ec49811df8ff", "message": "Remove unused InputStrategies::String class.\n\nThis has been unused since 570c6f9, and should have been removed then."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/570c6f9cb1794d99625b5dbd8633155e399546ff", "message": "Subshells wrap commands, not strings.\n\nInstead of storing the command contained by a subshell as a string and\nparsing it separately at execution time, we now parse subshells in the same\nparsing pass that handles the command that contains them, and store a\nGitsh::Commands::* object.\n\nThis has a few advantages:\n\n- A parse error in a subshell is discovered at parse time, not execution\n  time.\n- A subshell containing closing parens that do no end the subshell (e.g.\n  `:echo $(:echo \")))\")` no longer confuses the lexer.\n- We can drop the Gitsh::StringRunner class."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/fd5294dd8ef1f0d811dd2943c40280cfa9297fc9", "message": "Pass environment to commands at execution time.\n\nThis means we don't have to know what environment a command will be executed\nin when we construct it.\n\nThe motivation was simplifying subshell parsing: we'll be able to parse a\ncommand fully, including the contents of any subshells, in a single pass.\nPreviously we couldn't do this because the subshell's environment can't be\ncreated until the command containing the subshell is executed. Look out for\nthis change in a subsequent commit.\n\nA nice side effect of the change was simplifying the Gitsh::Parser: it no\nlonger needs a reference to a Gitsh::Environment."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ea17f11225d388fe212591081093648209861a31", "message": "Support parentheses for grouping commands.\n\nThis allows a user to override the default operator precedence, e.g. with\n`(foo || bar) && baz`.\n\nThis has the side effect that literal parentheses in unquoted arguments must\nbe escaped."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8a061ebb1d89d1a20257034e71eb620da9a64fc9", "message": "Replace Parslet PEG with RLTK CFG.\n\nThis is a really major change, and therefore a big diff.\n\nReplaces the Parslet-based parsing expression grammar (PEG) with an\nRLTK-based context-free grammar (CFG).\n\nThe `Gitsh::Parser` (which converted text into a AST) and\n`Gitsh::Transformer` (which converted the AST into useful domain objects)\nhave been replaced with a `Gitsh::Lexer` (which converts text into tokens)\nand `Gitsh::Parser` (which converts tokens into useful domain objects).\n\nWhy?\n====\n\nDistinguishing between _invalid input_ and _valid but incomplete input_ is\nreally hard with a PEG. There are various papers on improving PEG error\nreporting, and some support in Parslet for various strategies, but I\ncouldn't find a satisfactory way to accurately work out why parsing failed\nwithout making the grammar significantly more complex.\n\nWe want to add support for various multi-line constructs, which means we\nneed to know if a line is invalid or just waiting for more input. The\nspecific issues I have in mind are:\n\n- Support multi-line strings\n  (https://github.com/thoughtbot/gitsh/issues/31)\n\n- Add a `:function` command for defining functions\n  (https://github.com/thoughtbot/gitsh/issues/35)\n\nWe also want to improve tab-completion in various ways, which also involves\nworking with very similar types of incomplete input. Most of the\nenhancements we have in mind will only be possible if we know more exactly\nwhat we're completing, and re-using some of the parsing code to understand\nthe input seemed like the most logical approach. Specific issues are:\n\n- Support the same tab completion options as zsh\n  (https://github.com/thoughtbot/gitsh/issues/25)\n\n- Add tab completion for options\n  (https://github.com/thoughtbot/gitsh/issues/80)\n\n- Auto complete stash commands\n  (https://github.com/thoughtbot/gitsh/issues/220)\n\n- Tab completion only works for the first command on the line\n  (https://github.com/thoughtbot/gitsh/issues/261)\n\nNote that this commit doesn't implement any of these enhancements, it just\nmakes them more likely to happen in the future.\n\nImplementation details\n======================\n\n- Introduces equality methods on argument objects, used to testing parser\n  output.\n\n- git-prefix correction (i.e. interpreting `git foo` as `foo` when\n  `help.autocorrect` is set) has moved from the Parser to the GitCommand\n  class.\n\n- The subshell implementation in this commit is not very good. It will be\n  significantly improved in the next couple of commits, but it seemed too\n  big of a change to roll into this one."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e2629209ce7b8a2af0438b7b27908e367bdaee4d", "message": "Fix incorrect package SHA."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/b6201db97f301dc11f248aecf7f315fe2ff34b7e", "message": "Arch package for version 0.11.2"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4f2492641b916aaeaaa614424d9b08ead40b53a9", "message": "Bump version: 0.11.2"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4136481b710b4d52af131fda2aa45fcacf60c90b", "message": "Improve configure script's source file discovery.\n\n- Uses Autoconf's `$srcdir` instead of `basename $0` as the root of the\n  source tree.\n\n- Removes a redundant `cut`. This was intended to strip `./` from the\n  beginnings of the resulting paths, but it wasn't portable (`./` wasn't\n  prepended to the paths on some systems), and the way this list is\n  generated and used has changed so much that it no longer appears to matter\n  if the `./` is there at all.\n\nPartly based on Mike Burns' patch to `configure` in the OpenBSD ports tree:\n  https://marc.info/?l=openbsd-ports&m=148340820830595&w=2"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ef545f523f643a33cf8439c783d6d9997dcda10c", "message": "Support explicit architectures for Readline.\n\nOn macOS systems, universal binaries contain multiple architectures, e.g.\nthe system Ruby is built for both i386 and x86_64. The Ruby `mkmf.rb` build\nsystem will default to building universal C extensions when used with a\nuniversal Ruby.\n\nWhen installing gitsh via Homebrew, we build against the Homebrew version of\nReadline. Until recently, this was a universal library (x86_64 & i386) but\nis now x86_64 only [1].\n\nIt is possible to build against a universal Ruby and a non-universal\nReadline, but only if the right flags are passed to the C extension's\n`extconf.rb` script.\n\nThis commit:\n\n- Adds support for a `$READLINE_ARCH` environment variable. When it is set,\n  the `configure` script will pass the right `--with-arch-flags` argument to\n  `extconf.rb`.\n\n- Updates the Homebrew formula to set `$READLINE_ARCH` based on the host\n  OS's preferred architecture.\n\n[1]: https://github.com/Homebrew/homebrew-core/pull/10907"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/428ddb68a07b09ae85edb4f4d9f9ad19e67ce839", "message": "Support ruby22, ruby23, ruby24 binaries.\n\nSome systems, e.g. OpenBSD, include the version number in the name of the\nRuby binary. We support all of these versions, so we should support all of\nthese names."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/968ad2028906846a673cb8c3d567b50f5d0cfc4b", "message": "Support alternative names for Readline.\n\nThe OpenBSD port for Readline calls the library `ereadline`, which means\nthat the gitsh configure script needed to be patched to be used on\nOpenBSD systems.\n\nThis commit introduces a `READLINE_LIB` environment variable, which can be\nused to specify an alternative name to be passed to the Ruby C-extension's\nconfiguration script.\n\nBased on Mike Burns' patch to `configure` in the OpenBSD ports tree:\n  https://marc.info/?l=openbsd-ports&m=148340820830595&w=2"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3869651b2c9ad3defb39ca3b0c442d970cce1a7f", "message": "Upgrade test dependencies.\n\nGets rid of a bunch of deprecation warnings when running the test suite\nunder Ruby 2.4."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/f28ccaca5b0ca9753f1cef25759f5d4f471ce334", "message": "Update CI Ruby versions.\n\n- Add 2.4.\n- Update older versions to their newest patch level."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6fd2488a7ff613820d32ca64ad229ff45844249a", "message": "Refactor from runners to input strategies.\n\nThis commit replaces the `Gitsh::InteractiveRunner` and\n`Gitsh::ScriptRunner` classes with input strategies\n(`Gitsh::InputStrategies::Interactive` and `Gitsh::InputStrategies::File`).\nPreviously each runner class's `#run` method would loop over available input\nand pass each command to the interpreter. Now the interpreter controls the\nloop and asks the strategy for commands.\n\nThe main motivation is to support multi-line constructs. We would've needed\nto add very similar code for handling incomplete input to both the runner\nclasses. Now that the interpreter is responsible for controlling to overall\nflow of the session, we'll be able to handle incomplete input in one place.\n\nA nice side-effect is that the `Gitsh::CLI` code is cleaner, and now uses\nconditionals to create different strategies instead of using conditionals to\nfork the control flow.\n\nThis commit also introduces some new `Gitsh::*Runner` classes, which take\nover responsibility for the places where we still need to execute some gitsh\ncode outside of the main run loop:\n\n* The old `Gitsh::ScriptRunner` class was used to load the `.gitshrc` file\n  at the start of an interactive session, and by the internal `:source`\n  command.  This has been replaced with a `Gitsh::FileRunner` that handles\n  setting up a `Gitsh::InputStrategies::File` and a `Gitsh::Interpreter` for\n  a given file.\n\n* Similarly, the old `Gitsh::Interpreter#execute` method was used by\n  `Gitsh::Arguments::Subshell` to run the contents of a subshell. This has\n  been replaced with a `Gitsh::StringRunner` and associated\n  `Gitsh::InputStrategies::String`."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a45d3a452841aef84bd2bdee587ccbecc055d0f4", "message": "Homebrew: use env=std by default.\n\nThis causes Homebrew to set the appropriate LDFLAGS for Readline, which\nis a keg only formula.\n\nWithout this, gitsh can't build against system Ruby (although it still\nworked on systems where Homebrew's ruby formula was installed).\n\nI couldn't find good documentation for the difference between `env=std`\nand `env=superenv`, but this is where the necessary LDFLAGS value is set:\n\n  https://github.com/Homebrew/brew/blob/89fd34b/Library/Homebrew/build.rb#L100"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d2fffa0464055081c8600dd260b41c09c935bc4e", "message": "Update release instructions.\n\nAdding a few things that weren't explicit, so I don't have to remember them."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/902c27f13204e3fe2fa9aa2bd18300fd7315e0f2", "message": "Fix .gitignore rule for binary\n\nWe want to ignore the built gitsh binary, but the existing rules was\nignoring any file with `gitsh` in the path, e.g. `lib/gitsh/foo.rb`."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d36040e0d04cf097d7941fb1808a0fb37457fc49", "message": "Bump version: 0.11.1"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/2589bf40acd2d362cfd6d0ab8f418f2f52b06ecb", "message": "Arch package for version 0.11.1"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6ac17a26e485725284dd06c0bb3e021615800e94", "message": "Use SHA256 for Homebrew and Arch package digests.\n\nThe package managers use the digest to verify the integrity of the tarball\nthey've downloaded. Homebrew has deprecated SHA1, and we were using the same\ndigest in both places, so upgrade both for simplicity."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a2632a48c178b55917ea80014c1b4baf318e32f0", "message": "Arch package for version 0.11"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/eeaaba05ed997011926d7aa301eed41c08bcd4bc", "message": "Remove line editor version from --version output.\n\nWe no longer support any line editor except for GNU Readline, which means we\nno longer need to tell people which one they're using."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/79f998e067a840cdd90081d4dac78eb48f8cd0a8", "message": "Add Readline dependency to Arch Linux package."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e3cb80896fc678e1f7731aebee89894a0d022be9", "message": "Bump version: 0.11"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e85c70514601766ec011a632acd99dcb2bd1b8e8", "message": "Install Gitsh::LineEditor native extension."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/b8944f4cac14d9057232cbaa6166d82f1290e7e4", "message": "Use dist instead of distcheck for releases.\n\nNow that we're building a custom Ruby extension for Readline integration,\nwe're dependent on a non-autotools Makefile generated by Ruby's mkmf. Ruby\nMakefiles don't support VPATH builds, which means that gitsh no longer\nsupports VPATH builds, which means distcheck will fail.\n\nMore information in the automake documentation:\nhttps://www.gnu.org/software/automake/manual/html_node/VPATH-Builds.html#VPATH-Builds\nhttps://www.gnu.org/software/automake/manual/html_node/Third_002dParty-Makefiles.html"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/31c8d6fe7bf9081a8c0f0c18200b5cdddb16bdb3", "message": "Don't always close quotes when tab completing.\n\nWhen the thing we've managed to complete isn't a full argument (i.e. it's a\ndirectory name, and the user may want to add more components to the path),\ndon't append a quote if it's a quoted argument."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/64f4fb052b4391a770b18d44e7ed59d586124854", "message": "Extract a CharacterClass object from Parser."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/685cf84b26bba3529e066ed065e7474df3de5b50", "message": "Use completion_append_character\n\nBefore: we'd set completion_append_character to nil, and then append a space\nto any completion option that wasn't a directory path (e.g., completions\nmight include \"file.txt \" and \"dir/\"). This meant we needed to manually\nremove the space from the end of the options if we were completing a quoted\nargument, and we needed to avoid escaping spaces at the end of a completion\nwhen completing an unquoted argument.\n\nAfter: we set completion_append_character dynamically based on the\ncompletion options. If we have a single option that's a directory path, we\nset it to nil. If we have multiple options, or a single option that's not a\ndirectly path, we set it to space."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6b343146977816cd0787a17900cac5a812a434cf", "message": "Support for quoted characters and tab completion.\n\nThere are three parts to this:\n\n1. Add Gitsh::LineEditor.quoting_detection_proc\n\n    This exposes GNU Readline's `rl_char_is_quoted_p` setting to Ruby,\n    allowing us to tell Readline's tab completion code that a character\n    that would normally mark a word boundary is escaped, and should\n    therefore be considered part of the argument we're completing and\n    not as a boundary.\n\n    Using `rl_char_is_quoted_p` is a little complex:\n\n    * It is only invoked when `rl_completer_quote_characters` is set,\n      and one of those characters or a `\\` character is present in the\n      input.  This biases the GNU Readline implementation towards using\n      `\\` as the escape character.\n\n    * If `\\` appears in `rl_completer_word_break_characters` -- which\n      it does by default -- it will be passed to `rl_char_is_quoted_p`.\n      That can cause surprising behaviour, e.g. given a string like\n      \"foo\\ bar\", we might detect that the space is escaped, but then\n      treat the `\\` as a boundary anyway and only pass \" bar\" to the\n      completion function. GNU Bash appears to get around this by not\n      including `\\` in `rl_completer_word_break_characters`.\n\n    The Gitsh::QuoteDetector class implements the quoting scheme.\n\n2. Update the parser to understand more types of quoted characters.\n\n    Each type of argument -- unquoted, single quoted, and double quoted --\n    supports a different set of escape characters.\n\n    * Unquoted: Anything that could terminate the argument (space, ;, ...)\n    * Double quoted: \", \\, and $\n    * Single quoted: ' and \\ (we don't need $, because variables and\n      subshells can't appear in single-quoted strings)\n\n3. Decorate the completer with an object that handles escapes.\n\n    This un-escapes escaped characters in the user's input, and then\n    escapes escapable characters in the completion options.\n\n    Constants from the parser are used to ensure we only consume or produce\n    valid escape sequences.\n\n    We expose `rl_completion_quote_character` as\n    `Gitsh::LineEditor.completion_quote_character` so we know what kind of\n    string we're dealing with."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/14467c27d5af6e3d485e6ebefbb60d30c85e8f86", "message": "Style improvements.\n\nSilence syntastic warnings."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ea9bb5c9b703bcb2dd1f351a2ce8a0be10a65de8", "message": "Move LineEditorHistoryFilter into Gitsh.\n\nThis class was defined in the gith directory, but not nested under the Gitsh\nmodule."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/16d1419b3020f90b33949f76f73d2cb107406d3b", "message": "Merge branch 'gb-custom-readline-extension'"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/2bbfc862fba40619f1ae2750a1bf6d07070694df", "message": "Remove support for unused Readline functionality.\n\nRemove support for Readline features that aren't used by gitsh and aren't\ncovered by the tests ported from the Ruby codebase:\n\n* rl_basic_word_break_characters\n* rl_basic_quote_characters\n* rl_filename_quote_characters\n\nI can't find any decent documentation on the difference between\nrl_basic_* variables and their rl_completer_* counterparts; they\nappear to do exactly the same thing.\n\nAlso, they are hard to test:\n\n* rl_basic_word_break_characters only works if\n  rl_completer_word_break_characters has never been set, and\n* I can't get rl_basic_quote_characters to do anything at all in\n  either Ruby's `Readline` module or gitsh's `LineEditor` module.\n\nIf I'm reading the docs right, rl_filename_quote_characters is used to\ndetermine if rl_filename_quoting_function should be called. We didn't have\naccess to rl_filename_quoting_function though, so this setting was somewhat\nredundant."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/fc641afcd3819a55b729c6e3c034ca59de41dde1", "message": "Update documentation with readline info.\n\n* INSTALL\n* CONTRIBUTING"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a1a1816406d969dd20dea17ea68d40d9fa9b00e2", "message": "Add Readline as a Homebrew dependency."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6ceaa90c92bc1b7a223a17d7d2d2271716b9398d", "message": "Don't compile against libedit.\n\nlibedit just doesn't cut it. We don't strictly _need_ the rl_edit_mode\nfunction, but it's a reliable way of detecting if we're building against GNU\nreadline or libedit."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ba7f346d3d6ecc71f9dbce1ad539660653eccebc", "message": "Fail to build without some readline functions.\n\nIf the readline functions and variables we actually need to run gitsh are\nmissing, that should trigger a compile-time error, not a runtime error."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e8c8bc28a10232e4d642d3c0b34aaf3b7813fdae", "message": "Use Gitsh::LineEditor instead of Readline\n\nIncludes LOAD_PATH changes, so we can load Gitsh::LineEditor from ext."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d17216d78d212cce2c3a5c09aa83ace319af4767", "message": "Rename readline references to line_editor."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/68b4dcada424623088f6795cc35e987e5ce98a67", "message": "Customise Readline C extension.\n\nStarting from a direct copy of Ruby's Readline module, modify it to:\n\n* Create a module called `Gitsh::LineEditor` instead of `Readline`.\n\n* Work across all versions of Ruby from 2.0 to 2.3. Since the native\n  `Readline` module only has to work with the version it ships with, it\n  doesn't have these constraints.\n\n  Specifically, Ruby 2.1 and up used `rb_obj_hide` and `rb_obj_reveal`,\n  but Ruby 2.0 doesn't have these methods. If they're not found, we define\n  macros to replace them with a Ruby 2.0 compatible implementation based\n  on what Ruby 2.0's `Readline` module used.\n\n* Implement the `.delete_text` method in Ruby, with a simpler\n  `.delete_bytes` method implemented in C.\n\n  The implementation of `.delete_text` in Ruby's Readline module depends\n  on internal functions that aren't available to third party extensions.\n  Adding the constraint of writing something that worked across Ruby\n  versions, and a pure C implementation became very difficult.\n\n* Update and simplify LineEditor documentation, to reflect the changes\n  listed above, to remove lengthy examples, and to improve some phrasing."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/77539f6eb4545a9e3d0aa5c2d51f8c88b40464a4", "message": "Port Ruby Readline tests to RSpec.\n\nThis commit introduces Gitsh::LineEditor specs, based on the Readline tests\nfrom the Ruby codebase. They've been significantly tidied up and refactored,\nmostly to make them more consistent with each other, and to arrange them by\nthe method they're testing."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d09bff2750ee017b1d708551ffdce0778bb3958e", "message": "Straight copy of Ruby's Readline module.\n\nThe following commits will customise this code for use in gitsh. This commit\nis kept separate to make it clear where this code came from, that the\noriginal author's deserve credit, and how gitsh's implementation differs\nfrom the upstream Ruby version.\n\nWhile some changes will be specific to gitsh, others might make useful\nupstream contributions. Having this baseline will be helpful for\nconstructing this type of patch."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/fa711051ee3d1e0f61df2f06d302d6160c11d0d7", "message": "Add a C extension to the build system.\n\n* Set up the conventional Ruby ext directory structure.\n* Run extconf.rb from the autotools configure script.\n* Run the Ruby C extension Makefile from the automake Makefile.\n* Ignore extension build artefacts.\n\nThe one unusual thing here is that we pass LDFLAGS & CPPFLAGS through to\nextconf.rb\n\nRuby's mkmf will, by default, use the build configuration options that were\nused for Ruby itself. For our purposes that's not very useful: using Ruby's\nbuild configuration might have resulted in Ruby being built against libedit,\nand we want to ignore that and build against Readline.\n\nThis commit passes through the LDFLAGS and CPPFLAGS values determined by the\nconfigure script, which means it's at least possible to modify them by\nsetting environment variables when running `./configure`"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/858511e305fb25881b05dde567fbcc84003555cd", "message": "Drop Ruby 1.9.3\n\nIt was EOL'd more than year ago, and getting the LineEditor extension to\nbuild on it is proving very difficult.\n\nSince we depend on system ruby versions, we want to stay a little behind the\ncurve, but everyone should have caught up with this by now!"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/f869d136b1cb50b7cd4c0aef9d4efe140d2218b6", "message": "Add RSpec methods to CommandStubber."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/da5458163b6eca1aa721607009b4d615a25c0e20", "message": "Add missing require."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a1ba3935519434327e412d2fa72886b859511fa2", "message": "Test on even more Rubies!"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3b61a6ea40f562f772108cdf1195900e11520fe9", "message": "Accept trailing semicolons."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a1037c504975236396401e461eaeb7be734f1d88", "message": "Execute shell commands through /bin/sh\n\ne.g. the gitsh command `!ls` now executes `/bin/sh -c \"ls\"`\n\nSince the shell command and its arguments are now passed to /bin/sh as a\nsingle argument, we need to escape the original command's arguments to make\nsure they're interpreted properly.\n\nThis commit introduces custom shell argument escaping which is built on the\nShellwords approach, but expands the whitelist of unescaped characters to\ninclude characters found in the globbing patterns described in BSD's glob(7)\nmanual page.\n\nIf we just used Shellwords directly, globbing patterns would be escaped\n(e.g. `!ls *` would become `/bin/sh -c \"ls \\*\"`)."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/adcb2a04409631633645a6fd7d45da863885c75b", "message": "More correct vendorize script.\n\nThe vendorize script assumed that the correct require path for any given gem\nwas \"lib\", and only \"lib\". While this assumption holds true for all of the\ngems we currently depend on, removing it will make it easier to add future\ndependencies without potentially obscure bugs.\n\nFixes #203"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6ca20a030032a35f86dbbec17921324cae680b5c", "message": "Arch package for version 0.10"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4a336f87f48a244433eceb48179c5590626ca4bb", "message": "Bump version: 0.10"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8cbcf1a2cb654be874058788462711246085bc68", "message": "Raise UnsetVariableError for magic variables.\n\nThe magic variables that gitsh provides all depend on certain state, e.g.\nthe `$_merge_base` variable is only applicable during a merge.\n\nThis commit brings magic variables into line with regular user-defined\nvariables, but raising an UnsetVariableError if they aren't currently set,\ni.e. if the state from which the variable derives its value doesn't exist."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/f3149f33a9b10520222c93faa9d1e5d41f3a31cb", "message": "Use non-zero exit status on fatal errors.\n\nFixes #233"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/861bf95acbf5b9ea0cba6f815e770f298b6742a4", "message": "The inevitable Bundler update."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/14c31fcbb16e065b422d45449f1c379823ec7b0a", "message": "Support ~ in paths given to `:source`\n\nThe `:cd` command already supported `~` in paths, but `:source` did not.\nThis commit fixes that inconsistency."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/648b1272328d13a6fd9694b411acb8c20e116cf7", "message": "Reliably update terminal size with stty(1).\n\nWhen gitsh receives a `SIGWINCH`, it informs Readline of the new terminal\nsize.\n\nPreviously, the new terminal size was determined using the `tput cols` and\n`tput lines` commands. However, when Readline is sent the terminal size it\nsets `COLUMNS` and `LINES` environment variables, and if these environment\nvariables are set `tput` will read them instead of actually checking the\nterminal size. This means that we were never actually passing the new\nterminal size to Readline, we were just passing whatever size we had when\nthe environment variables were set, over and over again.\n\nDetermining the terminal size by trying each of the following in turn seems\nto work better:\n\n1. `stty size` \u2013 this might fail, because some implementations of `stty`\n   don't support `size`, e.g. on Solaris.\n2. `env COLUMNS='' tput cols` and `env LINES='' tput lines` \u2013 this might\n   fail, because some implementations of `tput` don't support `cols` or\n   `lines` unless the environment variables are present.\n3. `tput cols` and `tput lines` \u2013 this is what we have now.\n4. Ignore the `SIGWINCH` entirely.\n\nThis also involved switching from using `Open3.capture3` to `IO.popen`,\nbecause the `stty` command only works if its input stream is a TTY, and\n`Open3.capture3` passes a pipe instead of `$stdin`. Unfortunately, this\nmakes the testing more complex.\n\nFixes #144. Probably. I can no longer produce the reproducible resize\nerror [1] after this commit, so it's promising.\n\n[1]: https://github.com/thoughtbot/gitsh/issues/144#issuecomment-69459773"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/93fdc6841c59e54a198617caed5a0cd893991398", "message": "Rename TermInfo to Terminal.\n\nThis is going to need to get information from places other than terminfo(5)\nvia tput(1) in future, so TermInfo would be a misnomer.\n\nThe future is stty(1)!"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/2db058a69f34fc469d33964d0432fbe72eb04a01", "message": "Don't create objects we don't need.\n\n`hash.fetch(:foo, default)` will always evaluate `default`, so it makes more\nsense to use `hash.fetch(:foo) { default }` when injecting dependencies."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/1032dd29667416cb2d291dcebcb22ece4cbbedf8", "message": "Support for ~/.gitshrc\n\nThe interactive runner will attempt to source a ~/.gitshrc file when it\nstarts.\n\nThis happens after the welcome message, so that any output from commands in\nthe .gitshrc file will come after the welcome message."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/cc59d66270190f9029edafd60afbfd852eb07b59", "message": "Support nested subshells.\n\nExpands the subshell parsing rules, so that they can contain balanced\nparentheses, instead of just ending with the first ')' character."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3a5a684c1419172bc3111a943be741f4488c23a4", "message": "Basic subshell support\n\nIntroduces parsing for subshells, a Gitsh::Arguments::Subshell object to\nhandle running the subshell, and a Gitsh::CapturingEnvironment to capture\nand return the output of commands executed in the subshell.\n\nWhitespace is collapsed in subshell output, to match the behaviour of sh(1)\net al.\n\nNested subshells are currently not supported, and trying to use them can\nresult in quite surprising results."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/27c88d4a58ca8854844c7432065ab7da5a9e0408", "message": "Arch package for version 0.9"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/0ee88bf467f83dcbebe9fee5f82823791f9400db", "message": "Update INSTALL in the configure script.\n\nThe way we were building the INSTALL instructions was causing `make\ndistcheck` to fail: `make clean` wasn't cleaning up the INSTALL file, which\nwas what we wanted for building in the source directory, but not when\nbuilding from another directory.\n\nLetting autoconf handle the INSTALL file fixes this problem, and simplifies\nthe Makefile in the process."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/42df5446c9c3a38409f1369eb627e204d53752eb", "message": "Bump version: 0.9"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/cce22bdbfa907f816a94ad9fd0a88766172e9053", "message": "Lazily evaluate variables in arguments.\n\nInstead of replacing variables with strings in the Gitsh::Transformer, only\nevaluate their final value when they are needed by one of the\nGitsh::Commands::* objects.\n\nThis makes it possible to run commands like:\n\n    :set foo 1 && :echo $foo\n\nIntroduces a Gitsh::ArgumentList to represent the arguments passed to a\ncommand, various Gitsh::Arguments::* classes to represent the individual\narguments, and a Gitsh::ArgumentBuilder to construct arguments which can\nhave a complex structure consisting of literal parts and variable parts."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ce6ac1b3865272477595c1c791e75d019ed7a9cf", "message": "Consider unset variables to be an error.\n\nIf a command uses a variable that has not previously been set, the command\nwill not be executed, and an error message will be printed identifying the\nunset variable.\n\nIntroduces a Gitsh::Error class and Gitsh::UnsetVariableError subclass to\nrepresent errors that are fatal to the current command but not to the whole\ngitsh session."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/f741a06caa5d9dc97b4d847f49f62fa56a3e8e19", "message": "Remove Environment#[] in favor of #fetch\n\nRefactor access to variables to prepare the ground for raising errors when a\ncommand tries to use an unset variable.\n\n* Modify `Gitsh::Environment#fetch` and `Gitsh::GitRepository#config` to\n  raise if no default value is given.\n* Move default values from arguments to blocks to easily distinguish between\n  \u201cthere is no default\u201d and \u201cthe default is set to `nil`\u201d.\n* Remove `Gitsh::Environment#[]` and `Gitsh::MagicVariables#[]` entirely, in\n  favour of `#fetch` methods.\n* Update `Gitsh::Environment#fetch` to read from magic variables, which were\n  previously only accessible via `#[]`."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/26eac4009fe16bccbf48f06bbff27edafc0610a8", "message": "Git doesn't support \"orange\"; use \"yellow\".\n\n6e6508408b7ee7e595d657bba0fc30de076fae4c set the default colour for modified\nfiles to:\n\n    git config --get-color \"gitsh.color.modified\" \"orange\"\n\nUnfortunately, there is no \"orange\". The colour has always been called\n\"yellow\", it just looks orange in preferred terminal emulator colour scheme.\n\nOops."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/9efe0c9f9708f5cf6c84bd51926ffb8974bdd8bb", "message": "Add OpenBSD to list of OSes in INSTALL.txt\n\nThis should be updated again when OpenBSD 5.7 comes out, around June 2015."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6e6508408b7ee7e595d657bba0fc30de076fae4c", "message": "Custom colour support.\n\nAllows users to override the colours of the prompt in various states, by\nsetting git-config(1) variables. This is very similar to git's built-in\nmechanism for setting colours, e.g. for git-log(1) output."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/1123a164de69e47af0ad1b3a9236acc395456c87", "message": "Drop a git prefix if help.autocomplete is set"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/f25c002ee5292188a1bfc1e81b4d0b19cc4bc1e7", "message": "Refactor: construct Parser with an Environment"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c8acf9f3fc7abe77fb513689391fd2ad48a4443f", "message": "Arch package for version 0.8"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c60224d52d8dd84a8d7ba52b1719390a80edf855", "message": "Version bump: 0.8"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/930a03549d98123341f5cb211927d4086d7a75ba", "message": "Include lib/gitsh/*/*.rb files in installation.\n\nThe previous install mechanism would only install files from `lib/gitsh`; it\nexcluded files in subdirectories. c1dc545c21a8037f47d71bf8ca01e667433f6d6e\nmoved the command classes into a subdirectory under `lib/gitsh`, and\nsubsequently these files weren't included by the installer."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/9c58d893b517d569e5acda0c98454418488d540b", "message": "Disable rubygems when running gitsh.\n\nThere are currently some load errors related to an installer bug (see issue\n #178).\n\nWhen rubygems is enabled it modifies require, which makes these bugs worse\nby failing more slowly and with less helpful output (e.g. on my Mac OS X\nsystem with Homebrew Ruby, it installs the Nokogiri gem before failing)."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/022b7484fb92d78267aaf562fe73b895ff48e80b", "message": "Support .git/rebase-merge or .git/rebase-apply\n\nThe `$_rebase_base` magic variable determines the base commit of a rebase by\nreading the metadata in the `.git` directory.\n\nRebase metadata is stored in different sub-directories at different times.\nThis commit adds support for `.git/rebase-merge` in addition to the existing\n`.git/rebase-apply` support.\n\nSee: http://stackoverflow.com/questions/3921409"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/48902a329cf4df850e3e8664bb196b5572eacbef", "message": "Handle SIGWINCH, and tell Readline to resize.\n\nWhen the terminal emulator window in which gitsh is running is resized,\ngitsh will receive a SIGWINCH signal. This commit adds a handler for this\nsignal, and updates Readline's window size.\n\nThe hope is that this will fix a couple of resize-related bugs (strange\nwrapping, and pagers loading at the wrong size). These bugs are hard to\nreproduce, so it's not 100% clear that this fix works.\n\nAlso introduces a TermInfo class to contain `tput` interactions."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a7e51e846db640b096414594947671881f4e059d", "message": "Support commenting of partial lines.\n\ne.g. `add . # Add all files`"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6b502e2bc7c56d15e4af7f1db8c74dce78115b41", "message": "Tweak help: command is not optional."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6bb0fe999badb389c3b1bc3d22c39a4edbf3f2fc", "message": "Execute scripts piped to STDIN.\n\nCommands will be read from the standard input when\n\n* the standard input is not a TTY, or\n* '-' is passed instead of a path to a script file."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/32d23bf4bfee76c3537003d332dea1f3975aaea6", "message": "Add $_prior, $_rebase_base, $_merge_base variables\n\n* `$_prior` is like `@{-1}`, but easier to remember and search for. It also\n  expands to the name of the prior branch, so it can be used for things like\n  `push origin :$_prior`.\n\n* `$_rebase_base` is the base onto which we are currently rebasing, e.g. for\n  `rebase --onto foo bar baz` it would be the SHA1 of the head of the `foo`\n  branch.\n\n* `$_merge_base` is the base commit of the current merge. Equivalent to\n  `merge-base HEAD MERGE_HEAD`."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c1dc545c21a8037f47d71bf8ca01e667433f6d6e", "message": "Namespace command classes\n\nMove all command classes under the `Commands` namespace. This helps quick\nscanning of which classes are commands, since not all of them end with the\nword `Command`."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/15ef2a25e8fff5f9e11e48f8a94e554a86040027", "message": "Pass a script file as an argument.\n\n* Renames Comment to Noop.\n* The parser will match blank lines. This never happens in interactive mode\n  because of the default command."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4a32871f4e18829685706e6c2e0bb87475d76a6a", "message": "Arch package for version 0.7"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e52a97e11d5625d07e49a32b08170ffc909c6d3a", "message": "Version bump: 0.7"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/f9ecf3cfe26ed1e8ffb77cecd01a40c3548869dd", "message": "Flesh out installation instructions.\n\nAdds an INSTALL file to the distribution tarball explaining the subtleties\nof installing gitsh that can sometimes cause problems:\n\n1. Rubies from Ruby version managers are ignored.\n2. GNU Readline and libedit have some differences."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/883fd663d3eaa23170c5ec19232d491d77ac0298", "message": "Mimic sh(1) when handling unset variables.\n\nIf an unset variable is used as an argument, it is dropped from the argument\nlist.\n\nFor example:\n\n    & commit -m $foo\n    error: switch `m' requires a value\n    ...\n    & :set foo \"This is a commit\"\n    & commit -m $foo\n    (a commit is created)"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d7f97b360e6039baecd3a48b337a9c1ae99e269b", "message": "Wrap the binary in C.\n\nThis will allow us to use gitsh as a sh-bang line, and hopefully to set the\nprocess name correctly. The C code has deliberately been kept as simple as\npossible; the intention is to keep the majority of the functionality in\nRuby."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/60a7e8b6f63d71aa336728b19a45c69890dc8ffd", "message": "Support commented lines.\n\nAny line beginning with a # will be treated as a comment and ignored. A #\nlater in the line doesn't (yet) indicate a comment."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/f921331b98f2795caf1c05890532f9ff429b8147", "message": "Parse empty string arguments correctly.\n\nWhen the parser encountered an empty string (e.g. `\"\"`) it was matching the\n`soft_string` or `hard_string` rule, but didn't include any named matches\n(i.e. any `literal` characters) so it returned the whole matched string\ninstead.\n\nAfter experimenting with various ways of matching the opening and closing\nquotes, it ended up being a smaller and more understandable change to just\nadd a rule to explicitly match empty strings.\n\nFixes #139"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/02e407fe2214e94d2f3f90ebf0e289367b32ca41", "message": "Extract an InteractiveRunner from CLI\n\nThis splits the Gitsh::CLI class in two: Gitsh::CLI retains responsibility\nfor argument parsing, while Gitsh::InteractiveRunner takes on all\nresponsibility for running an interactive session.\n\nThis is partly just to keep thing clean and easy to change, and partly to\npave the way for an eventual non-interactive mode."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/81db11422bad8a36b3a0e6ac408e6fc48e872b05", "message": "Arch package for version 0.6"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/0ed264916667812721e0a89e316d5e2758bee0bc", "message": "Version bump: 0.6"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8fc4d21e86b71a57674c875a3442c05785525301", "message": "Add gitconfig to temporary home directory.\n\nBuilds have been failing on Travis CI because of the temporary home\ndirectory: there was no gitconfig, and therefore no user.name or user.email\nsettings, which prevent commits from being created under some Git versions."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4ef6d4efbdc0047a633b9fbef15ea2c8835a0c5e", "message": "Forward interrupts to child processes.\n\nWhen there's a long running child process (any Git command that uses a\npager, `!vim`, etc.) then any interrupt signal should be forwarded to the\nchild process, rather than handled by gitsh. If gitsh handles the signal it\nwill request a new line of input from the user, and interfere with the child\nprocess, leaving the terminal in a confused state.\n\nThis interrupt forwarding needs to be recursive, in order to handle multiple\ninterrupts while running a child process that doesn't terminate on SIGINT."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/64caf9fda81d7d21a878fc96494260c9a90803a0", "message": "Refactor: GitCommand is a ShellCommand"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5843ed0732bc9e933a3e056c150873b212f9eefc", "message": "Don't distribute version.rb\n\nversion.rb is built from version.rb.in by `make`, so it shouldn't be\ndistributed, but it should be installed."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/99f290ed9c30d94c300f775e4ae03efdf585b22b", "message": "Arch package for version 0.5"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/b89e736cd50d7fb10858dccc0859a863d14b4c01", "message": "Version bump: 0.5"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/066c62a39d567eed863365519e3f1b7a60707fc0", "message": "Handle shell command failures gracefully."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/972d3f751de686e2952752ce034d1e82d589dbb1", "message": "Document new features.\n\n* Shell commands.\n* Combining commands (&&, ||, ;)"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/7a7813e339c307dcacb000fcc58e685a54346d65", "message": "Support shell commands.\n\nA shell command can be any command prefixed with a !, e.g. `!ls` or `!pwd`"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/774456efd5086064fb0d702d8c2b1f5e5fc10efe", "message": "Fix ReadlineBlankFilter when readline returns nil\n\nWhen readline receives an EOF it returns nil. This was causing a crash when\na user sent an EOF to quit gitsh."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/2d77cc4a0bd32fab1d98a2195bb15a4ea880cf0d", "message": "Use the same git command everywhere.\n\nThe `GitRepository` and `GitCommand` classes were using different git binaries\nwhen the `--git` option was used. This could cause minor inconsistencies,\nfor example `hub` commands worked but could not be tab completed.\n\nFixing this revealed a potential bug in the `History` class, when a\nnon-numeric `gitsh.historySize` setting was used, so that's fixed too."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4634690b5da197f61570c4651fcde230ce3d944c", "message": "Add missing require."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5f69ffbc8356fe9c30ecda48d5cc66955483dbf6", "message": "Support Ruby 1.9.3\n\nThis should significantly simplify installation on Linux, since 1.9.3 is\navailable as a package for most major distros. Also, it paves the way for us\nbuilding Debian packages (etc.) that only depend on standard packages."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3bc6027fe3cd9fdd135884ab19a495ea567aae66", "message": "Bug fix: Don't output greeting on ctrl-c\n\nCatching an `Interrupt` and `retry`ing the method was re-running too many\nthings, including the greeting and the history load."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/bd0be79df8cafcca8f110cb23c2b9de81735d6e5", "message": "Clarify the setup steps in the contributing guide."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3fc393479ea4d20e4c4c655e17e9c690b67c70b4", "message": "Update install instructions for 0.4."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ecf7644eaeebc3840bb08727ee95cdc3e71a63ba", "message": "Emphasise use of ctrl-d in the README.\n\nUnfortunately the example has to be re-formatted into HTML to mark this up\nproperly."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c54ee6870e474abdfd59cfea296c5961610ccfd1", "message": "Add code climate and travis badges to README."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/dbc2b733ec5691023572c8ffb7ccdbab35223077", "message": "Set up dependencies properly for Travis build."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/42c38c6fd457986ba93862d466ca3ac672b4ba8c", "message": "Add travis.yml file."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d2e176e93b3206bc50869774a39298a05ebde716", "message": "Update CONTRIBUTING guide.\n\nA clean checkout won't run the specs without generating the\n`lib/gitsh/version.rb` file first. Update the documentation to match."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6877cc62c721dc6f5b07a0b3aa9631f287ea311a", "message": "Improve homebrew Ruby dependencies.\n\nWe can depend on Homebrew Ruby if it's already installed, even if system\nRuby is new enough. Homebrew Ruby is generally better for gitsh, because it\nhas readline instead of libedit."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/b7bca6c060f57c5c8f9661a26a8220b335ad0288", "message": "Version bump: 0.4"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/dfe98c3f7a82966c9e166b25f4db66b993c2605e", "message": "Arch package for version 0.4"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5598e51f5e869bb78b449bdbd6beac15aef8970f", "message": "Use the logo in the README."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a2408386c5e8cfa760748fc2acaf32e4ba07bbaa", "message": "Improve README, add CONTRIBUTING\n\n* Expands the examples in the README.\n* Adds a CONTRIBUTING guide.\n* Moves the information on releasing new versions to CONTRIBUTING."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c168da2fbce87039b6dff817836b26eef0e1a27d", "message": "Allow the user to override the default command.\n\nAdds the `gitsh.defaultCommand` configuration variable."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4a5b64cbe83488b6a09e333e854e804842bd3e6d", "message": "Add a greeting when gitsh starts.\n\nThis tells the user what version of gitsh they are using, and how to exit.\n\nIt can be disabled by setting the `gitsh.noGreeting` config variable to\n`true`."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4fd3027f3e460e45ab78b017bcd40ad04c3eda8b", "message": "Fix homebrew install for Ruby < 2.0\n\nHomebrew was detecting the system Ruby version correctly and adding a\ndependency on Homebrew Ruby if it was < 2.0, but the configure script was\nstill heavily biased towards picking system Ruby.\n\nThis explicitly passed the Ruby path from the Homebrew formula to the\nconfigure script to ensure the Ruby version chosen by Homebrew is used."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/b5808120e3bbccfd081693e37b76ac2c87339698", "message": "Ignore new homebrew formulae repo."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4d64edb8bf362cb89bb70569dca7c14d26e01865", "message": "Arch package for version 0.3"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4e9e99d65fdf58d40be15c55e8c539fbdf049414", "message": "Version bump: 0.3"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/09c46f893db9202fd0a9a761bd0241f5b3245f14", "message": "Update copyright year to 2014."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/0be6d6b2bd7c5abe41685c959d7eec76b206195d", "message": " Use the new central homebrew repository."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e559fe7d402dcc66fdaf893b604a346193127ab6", "message": "Improve arch package commit message."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ae3e69e252d561fdbc37df861305f49cc2b44386", "message": "Move homebrew formula template into this repo.\n\nWe're going to combine the homebrew repos for various thoughtbot projects,\nso it makes more sense to keep the template for the formula in this repo."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/7e4aa3e0a78e6118f5935f8232602666eb092092", "message": "Simplify colour addition/removal.\n\nSince I've discovered that user's can't add their own ANSI colour codes to\ntheir `gitsh.prompt` setting, toggling colours based on terminal\ncapabilities can be simplified."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/66fd195edb886b464895eb6cba9a23b0c915eaa0", "message": "Remove hard coded colour from the default prompt.\n\nUsers can't add their own ANSI escape sequences to their `gitsh.prompt`\nsetting because of restrictions on escape sequences in `.gitconfig` files.\nIt's not great for the default prompt to include a feature the user can't\nuse in their custom prompt, so we'll remove it until we have support for\ncustom colours."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/67c7de0fec7b6c4d8124f9f05c4aec90ab7607e7", "message": "Update prompt documentation."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ced4abbaa3c0fe92e8a30c804cd5bb281a3c6fdb", "message": "Add colours the default prompt.\n\nThe default prompt is now:\n\n    {cyan}{basename of $PWD} {status colour}{HEAD}{sigil}{end colour}"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/51c4f553907319a243c12ad6943700b05fa03286", "message": "Add color placeholders (%c & %w) to prompt format\n\n* %c begins coloring based on status\n* %w ends coloring\n\nThis also inverts the way color support was handled: Previously we added\ncolors if the terminal supported them, now we add them by default and remove\nthem if the terminal lacks support. This is more flexible, because we can\nadd static color codes to the `gitsh.prompt` setting and the default prompt\nwithout worrying about compatibility issues."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e52039ebd72ecafbe147884a5fc35f1abd48b406", "message": "Improve completion of HEADs containing punctuation\n\nSupports punctuation characters that are not legal in Git refs as completion\nword separators.\nhttps://github.com/git/git/blob/7794a680e63a2a11b73cb1194653662f2769a792/refs.c#L9\n\nThis also introduces the `TextCompleter` template class, used by the\nspecific completers."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/abdf5776fb5fd8c2252e0598c7f9c7e5fac7f6f9", "message": "Support tab completion of temporary aliases.\n\nFor example, after running this command:\n\n    :set alias.foo \"!echo foo\"\n\nIt becomes possible to tab complete the command \"foo\""}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/971f2fab82193888b38a7c48ab61810d3ea9d0cf", "message": "Refactor: Completer depends on Env not GitRepo\n\nThis refactor paves the way for tab completion of temporary aliases (i.e.\naliases created using the `:set` command)."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/86aa318a926558a29d16ca59f75f697a86649f7b", "message": "Hoy-day, what a sweep of vanity comes this way!"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8b1bb47a6056f37834ac018d1eb235fb2d87a09f", "message": "Document the gitsh.* git-config variables."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/cfc511dfabe2cd39e7e1c75f20f7258a82bae02d", "message": "Allow the user to change the history size."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/15fa9b6d6582d684281b60f0aa55780e542a2b57", "message": "Use a temporary history file in tests.\n\nRunning the tests shouldn't fill the user's history file with test commands.\nThis involved extending `spec/fixtures/fake_git` to ignore `-c` arguments."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6b86431259213f1f4fc0f3f6cd446b5fcbde94dd", "message": "Persistent history\n\nSaves up to 500 commands to ~/.gitsh_history or the path given in\n`gitsh.historyFile`"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ffcbaab5b820e54d32f7d47719ce9bdc70c147fe", "message": "Fix \"string is locked\" error when a spec fails.\n\nWhen an integration spec failed, the GitshRunner thread wasn't correctly\ncleaned up, which meant all subsequent integration specs would also fail."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6952aafe8bcd84ee051fc935e59eef3ded928550", "message": "Add the `:cd` command to the man page."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/be3479584be40ada4bcbb02d704a85f200b18f47", "message": "Support tab completion for complex paths.\n\nUses `File.expand_path` to support paths containing shorthand, like `~` and\n`..`."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/06f668f7568760b2d8a49e2183c03399e2aa1855", "message": "Add a :cd command to change directory\n\nThe tests for this have to be able to change directory, but nested\n`Dir.chdir` blocks in a multi-threaded program emit an error. To get around\nthis `spec/support/file_system.rb` has been altered to avoid using a block\nwith Dir.chdir."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e2dfc21156f9a1e2e8957195a016d7e5bec4b2ea", "message": "Extract delegate matcher.\n\nTesting delegated methods was repetitive."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3dab396b600d844d2669fa884d8fe04dc42e6198", "message": "Add Environment#fetch to avoid nils.\n\nAllows us to replace code like this:\n\n    env[:key] || DEFAULT_FOR_KEY\n\nWith this:\n\n    env.fetch(:key, DEFAULT_FOR_KEY)\n\nTa-da!"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/04e68221ae9d483e8a0ccae40ed52ee08862e985", "message": "Don't colour prompt by default."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a08059cffe0fbb4fe01e1e78119299ae9c312823", "message": "Add default colours to the prompt."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/fb47289866ac090f78c5ee32908ffa5ef5c24785", "message": "Change the default prompt to include the CWD.\n\nNew default is: [CWD basename] [HEAD][sigil]"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5d7fb7ccbcb16fcec40cde9356d34f4899384b02", "message": "Add prompt customisation to the man page."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6a9be33f0236ff2e8eb460491b5cb43cd7c60c4c", "message": "Support prompt changes via `:set gitsh.prompt ...`\n\nIn order to support this, the Prompter class now depends on an Environment\ninstead of a GitRepository."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/afc0ba4ee1ccbcb3b6e83fa48cacad469fdfe377", "message": "Support custom prompt formats."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/b6a6ee63f34e679fb0bb4d9ca7a360846a6cc6bf", "message": "Document git config variables."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/72f984f02136a2ae9b926dd71f93b97ba39fd213", "message": "Add temporary configuration to README."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4c37e31cae60981cf68c0e7dd78a758baa08d01d", "message": "Read git config with $variable syntax.\n\nFor example:\n\n    commit -m \"Committed by $user.name\""}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ffb986f5901a2940e0aa20c5a5061a5d8fe0865b", "message": "Pass environment variables to git commands.\n\nSetting any variable with a dot in the name will be passed on to git\ncommands, for example:\n\n    :set foo.bar 1\n    commit\n\nWould execute:\n\n    git -c foo.bar=1 commit"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e017bd1514d2a8d1a52803420d05fbe0a0163c77", "message": "Add unit coverage for Gitsh::GitCommand"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/097eab9f569ade19ad685fb3924d28dccbc5160b", "message": "Update the release instructions.\n\nIt's necessary to run `autogen.sh` and `configure` before each release."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6b325d5d52e7fcdbe772c7dc54ef8b1b4174de2f", "message": "Improve code style\n\n* Prefer $() to ``\n* Quote expansions"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6eaa6c467d141dd2f3ae1bf90012349fa4c15313", "message": "Re-vendorize if Gemfile.lock has changed.\n\nThis is sort of reinventing make's functionality, but we need to vendorize\nat configure time so that we have a full list of the vendorized files to\npass on to automake."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/08d50170623580382a25e968df797e254843e1f3", "message": "Fix vendorize process.\n\nThe improvements in 6f72fdd introduced a bug: If `vendor/gems` wasn't\npresent when `./configure` was run, then `$vendorfile` was empty, and so\n`make dist` would vendorize and distribute the gems, but `make install`\nwouldn't install them.\n\nThis change makes sure the vendorized gems are present in the configure\nscript, and will vendorize them if needed. The vendorized gems are included\nin the distribution, so when installing from the tarball this is a no-op."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5cb94c5e7e3dc1488cd42dc383cb5933aab6d300", "message": "Get distcheck passing again.\n\n* The vendorize script needs to work relative to the current working\n  directory in order to support VPATH builds.\n* We need to remove `vendor/gems` as part of `make distclean`, since this is\n  created by `make dist`"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/21043495e32fee5e9951146c8ce0777ea6f9720c", "message": "Improve vendorized install.\n\nInstalling via `nobase_dist_pkgdata_DATA` instead of using custom hooks.\nThis has a few advantages:\n\n* `install-sh` takes care of the permissions for us.\n* We don't need to manually uninstall.\n* It's consistent with `lib/gitsh/Makefile.am`\n\nThe big discovery here was `nobase_` which preserves subdirectory\ninformation, so the gems' files don't all end up directly in $pkgdatadir."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/dc6e21bf616f061566971389040dbf569dfddad2", "message": "We don't care if vendor/gems already exists."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/96070b2bb5f600ab3c75d385cb60af6851c1c785", "message": "Vendorize gems for distribution.\n\nThis adds a vendor directory, whose Makefile knows how to vendorize all the\ngems from the `:dist` bundler group, and write a `setup.rb` file to update\nthe `$LOAD_PATH` to include each gem.\n\nThe `vendor/gems` target is marked `PHONY` to avoid it being included in\n`make all` and therefore happening on an end user's machine, however it is a\ndependency of `make dist` so the vendorized gems will be included in the\ndistribution.\n\nAutomake doesn't support installing directories, so we use the\n`install-data-hook` target to copy the gems directory to the right place\n(prefix/share/gitsh/gems)."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/fbecc210b477bb2030b8dfffd5e48bdc1c5a53cd", "message": "Ignore leading whitespace on commands."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8fbd2b5be1c383a991e1afd3136795a8ad75f1de", "message": "Re-order parser rules, root first."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d80176eb80d5d04c6a6feb0e9991ac39baaffc6c", "message": "Handle parse errors.\n\nSome current parse errors (underscores in git commands, unclosed strings)\nshould be handled with a more robust parser. For now, we'll just output an\nerror."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/61c4114a630ce8e11a6f244a4089c839684a57ba", "message": "Tab completion for internal commands."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/322c036812f79ffe803a92103b05ae65530ceb58", "message": "More internal command documentation."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e7e5acd056619f558349128271b5c94cd63881fe", "message": "Document :set and :exit in the man page."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/2dec8dcd51792898b56042d56e80f508bbbfc067", "message": "Replace `exit` special case with `:exit` command."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/628e4a2e990ac602a2a5a0ae8657ea55b6653086", "message": "Tidy up the parser\n\n* Split up long lines\n* Replace simple matches with str or str.absent?"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/1e7701b2e629f70cf9536ac84e3dcc6e1ecdeec6", "message": "Add escaping to string arguments.\n\nAlso switches some `match` calls to `str` calls in the parser."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/9614957f5c40f91b4fe3270da1bf9f1d129d41cb", "message": "Don't raise on unknown internal commands."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/12608dc299576bc566e383118a88745b4b98582e", "message": "Don't raise if :set is used incorrectly."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a8a94e8dab22148dedfa72113131f117999e52ab", "message": "Small fixes to bin/gitsh\n\n* We need bundler now we have gems\n* Typo: $stderr not $stderror"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/cea69095b088071a95300971627341d64323535e", "message": "Environment variables and the :set command\n\n* Adds a `:set var value` command for setting variables\n* Adds a `$var` syntax for reading variables\n* Improves argument parsing (so `x\" y \"z` is read as `x y z` as it is in the\n  various Unix shells)"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/979fe490fecc7e8be00b5a142577331d0fc67e09", "message": "Give the Transformer access to the Environment.\n\nRight now, this lets us tidy up the GitCommand class. In future it will make\nvariables much, much easier."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/30d18887e87f95b2baa28de7143571214f78ebeb", "message": "Introduce Gitsh::Parser\n\nRather than just passing a (shell escaped) string to the Git command, this\nintroduces a more sophisticated parser. This sets the stage for advanced\nfeatures like internal commands and variables."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/34b7592719dd39a7db08b3a504d2abb7f6b6815c", "message": "Replace GitDriver with GitCommand.\n\nUsing a command object here gets us closer to what we need for a proper\nparser: The parser can produce GitCommand objects (and in future\nInternalCommand objects too) which can be executed."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/0a0c54a1f5eb7864517a78af1dd07845c4d8e5ab", "message": "Introduce a Gitsh::Interpreter\n\nThis is currently just a level of indirection between Gitsh::CLI and\nGitsh::GitDriver, but it gives us a place we can hook in a proper parser and\ninternal command processing in future."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a972167d374afd0b03c4e63defa2da09c528c62e", "message": "Introduce a Gitsh::Environment for shared state\n\nThe output and error streams are required by a growing number of objects,\nalong with things like the path to Git. Moving this into an `Environment`\nobject will help a lot with introducing variables and internal commands."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3c33051798074c995270e184c4dd54e84184f5a3", "message": "Add benefits to README (closes #39)"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/2d874514abb2d9ea2e40ced7f240f7bd33a06597", "message": "Add tab completion for aliases."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c473114e7cf3a447eb72a1f8a2a649a389b5f529", "message": "Remove Signal.trap.\n\nThis gets in the way of the custom Interrupt handling in Gitsh::CLI"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ca5aa6779fd4ba15ba2bd39c25560ef04595bda5", "message": "Small release/install instruction fixes."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a770bc71fd68b40659b8b5632fbb938529e36183", "message": "Release version 0.2"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/cfc64a5fd3e9de36ca25fe85aeaa94f2107c4ca0", "message": "Version bump: 0.2"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/2d106d91612cac3e8bee3677ee7d44c1839c9205", "message": "Add a make target to release a new version.\n\n`make release` will:\n\n1. Build a new release tarball\n2. Calculate the SHA1\n3. Add the new tarball to the gh-pages branch\n4. Update the Homebrew formula\n5. Update the Arch PKGBUILD\n6. Push all of the changes\n7. Clean up after itself"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d56988f4a9c7c9980b2fdd932ecce6add267ca22", "message": "Add the new command line options to the man page.\n\nThis may not be the best use of mandoc: `Fl -git` to produce `--git` feels\nlike a bit of a hack, but since long options are a GNU addition and not\nPOSIX compliant they might not be supported by mandoc at all."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/73edea830e8918d5d998c789cdcbe171b22429e4", "message": "Support `--git` and `--help` options\n\n* Adds a `--git` option which allows the user to specify a custom git\n  command (e.g. to use hub instead of git, which closes #24)\n* Adds a `--help` command, because parsing the `--git` option involved\n  bringing in OptionParser which generates the help message for us."}], "pull_requests": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/299", "title": "Support pipelines.", "body": "Two commands combined with the pipe character (`|`) will be run in parallel with the standard output of the first command connected to the standard input of the second command via an `IO.pipe`.", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053135", "body": "The interactivity problem is fixed. `#wait_for_output` is still a bit hacky, but after discussing it in person @mike-burns and I can't see a better way that doesn't introduce way too much complexity.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053589", "body": "Thanks, merged.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28571528", "body": "Reviewed in person by @mike-burns \u2026 merging!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28571528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28711710", "body": "Done in #10 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28711710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28883587", "body": "Thanks Mike, merged.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28883587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28901908", "body": "I've been experimenting with using autoconf and automake to build an installer. No useful code yet, but the following things might come in handy:\n- Check if the required Ruby version is installed: http://www.gnu.org/software/autoconf-archive/ax_prog_ruby_version.html (maybe using `AC_PATH_PROGS` instead of `AC_PATH_PROG` so we can support suffixed a Ruby executable like `ruby20`)\n- Rather than installing the files from `lib/` to a custom location and modifying `$LOAD_PATH` in `bin/gitsh` file, we could install them to the path returned by `$RUBY -e 'puts RbConfig::CONFIG[\"sitedir\"]'`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28901908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29018002", "body": "This is looking pretty good, over on the [gb-autotools branch](https://github.com/thoughtbot/gitsh/tree/gb-autotools). There are still a few issues to resolve:\n- [x] After running `./configure` or subsequently running `make`, `bin/gitsh` exists but is not executable.\n- [x] The mechanism for installing the files from `lib` is a little hacky; it overrides the `$datadir` (usually something like `/usr/local/share`) and then pretends the ruby library files are data files. It seems to work fine, but might cause problems if we had some real data files in the same project.\n- [x] After running `sudo make install` the man page isn't visible to `whatis`, `apropos`, etc. (this was just a question of time, on OS X the `whatis` database is rebuilt weekly, `sudo periodic weekly` refreshes it)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29018002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29081517", "body": "Done. PR is #13 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29081517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29086421", "body": "Thanks @pbrisbin. Is having an `install` line for the license common in arch packages? It seems like the kind of thing that `make install` should do (maybe after a `./configure --somethingdir=something`)\n\nI'd also like to try and find a system-level Ruby (rather than an rvm or rbenv Ruby) in this build script, and set `$RUBY` to its path. I'm not entirely sure how on arch, I guess I should spin up a VM and experiment, but any advice would be appreciated.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29086421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29130747", "body": "Awesome, thanks Pat. I'll add `LICENSE` and `README.md` to `EXTRA_DIST` (in the distribution but not installed) and let the Arch package put them where it wants to.\n\nOn the Ruby issues, I was thinking that adding something like this to the PKGBUILD might be effective:\n\n```\ntest -z $RUBY && RUBY=`env -i $SHELL -c \"which ruby\"`\n```\n\nThat _should_ search a default system `$PATH` for `ruby`, hopefully including places like `/bin`, `/usr/bin`, and `/usr/local/bin` but ignoring any rvm/chruby embellishments. Unfortunately it doesn't work (I can't figure out why, details in [the question I asked about it on Stack Exchange](http://unix.stackexchange.com/questions/102325))\n\nAssuming I can figure out how to make something like that work, do you think it's too much hand holding for an Arch PKGBUILD to be doing?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29130747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131056", "body": "So, this works, because \u2026 erm \u2026 reasons:\n\n```\ntest -z $RUBY && RUBY=`env -i $SHELL -c 'PATH=\\$PATH which ruby'`\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131781", "body": "Adding the LICENSE is done and pushed to master. I'll need to push a new tarball and update the SHAs too.\n\nProposed solution for the ruby version problem in #22, which wouldn't require any Arch-specific changes.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29142411", "body": "Done in 5c1e1e3\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29142411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29142420", "body": "Replaced by PR #21 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29142420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29145085", "body": "SIGINT should be handed in the same way a shell handles it: cancel the current command, but keep on running.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29145085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29186440", "body": "Would something similar to environment variables solve this? They would be session-level overrides for `git config` parameters.\n\n```\nexport user.name = \"George Brocklehurst & Mike Burns\"\nexport user.email = pair+george+mike@thoughtbot.com\ncommit -m foo\ncommit -m bar\n```\n\nWould execute:\n\n```\ngit -c user.name=\u2026 user.email=\u2026 commit -m foo\ngit -c user.name=\u2026 user.email=\u2026 commit -m bar\n```\n\n(We could also support `$var` for reading from config variables, which would make variables in scripts quite simple)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29186440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204853", "body": "I think I was thinking of Python. I'm convinced, I'll change it to use stdout.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204942", "body": "That's exactly the kind of issue I'm trying to avoid.\n\nDoes the approach to finding system Ruby seem sufficiently portable?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29205955", "body": "I have access to the full environment, including `$SHELL` and `$PATH`. I was trying to avoid the custom user path, assuming (perhaps naively) that the system's default path would include the places a system ruby would be installed, especially if it was installed by a package manager.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29205955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29234696", "body": "Done in de4390f3f2494b12ba16b35574f2259643be90a0.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29234696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29272895", "body": "We're planning to add some non-git commands, but with a prefix (probably `:` or `\\`) to avoid collisions with git aliases. A prefixed command might not quite satisfy your habit.\n\nReadline has a `clear-screen` command which is bound by default to <kbd>ctrl</kbd>+<kbd>l</kbd> in emacs mode (and can be bound in vi mode by adding a line to `~/.inputrc`) which might be more useful in this case since it will work consistently in gitsh and other shells.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29272895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29306511", "body": "The [hub README recommends aliasing hub as git](https://github.com/github/hub/blob/master/README.md#aliasing).  Since it's meant to be a replacement for git with added sugar, it might make sense to provide hub support by letting the user run all gitsh commands through hub instead of git.\n\nAt its simplest, this could be a `git config` setting (`gitsh.gitBinary`?) which could be pointed to the `hub` executable.\n\nWe could also get fancy and follow the lead of programs like `vim` by providing two executables: `gitsh` would run everything through `git`,  `hubsh` would run everything through `hub`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29306511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29306904", "body": "I don't think there's anything preventing us from implementing all of the git tab completion features that are available in zsh; we based the existing tab completion on git's shell completion code, and given enough time we could port all of it over to gitsh.\n\nWhat other completion features you're missing from zsh?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29306904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29306962", "body": "Work in progress, on the `mb-gb-make-release` branch.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29306962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29365536", "body": "All `git config` variables have a section (`user.email`, `core.editor`, etc.) so having a shared namespace for config variables and script variables seems reasonable. Anything that doesn't have a section won't be visible to git commands anyway:\n\n```\n$ git -c foo=1 config foo\nerror: key does not contain a section: foo\n$ git -c foo.bar=1 config foo.bar\n1\n```\n\nFor variables with a prefix, an `:export` (`\\export`?) command could have similar semantics to the sh export command: the exported variable would be added to the environment of subsequently executed commands. Exporting a variable with no prefix could cause an error.\n\nI'm picturing something like this:\n\n```\ngitsh@ foo.bar=1\ngitsh@ status\n# Executes `git status`\ngitsh@ :export bar=1\nerror: key does not contain a section: bar\ngitsh@ status\n# Executes `git status`\ngitsh@ :export foo.bar\ngitsh@ status\n# Executes `git -c foo.bar=1 status`\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29365536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29367309", "body": "For now, let's aim to support the very aliasable `gitsh --git=/path/to/hub`. If it proves to be slow in practice, we can look into deeper integration.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29367309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29392803", "body": "I was thinking that a Unix-shell-like `project=rcm` (with no colon command) would suffice.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29392803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29399196", "body": "More thoughts from the whiteboard with @mike-burns. Here's what we think we want:\n- `gitsh` supports variables (`$foo`) and backticks (``echo Hello``) as part of any command.\n- All other instructions to `gitsh` are prefixed with colons (including things like conditional statements and function definition).\n- The `:set` command and `$` can set and read both gitsh variables and `git config` variables, the difference is whether the variable name contains a dot (`$foo` is a gitsh variable, `$foo.bar` is a `git config` variable).\n- Anything set with `:set` works like a session variable; when you close the shell it no longer applies.\n- There should be functions:\n  \n  ```\n  :function pair name nick {\n    :set user.name \"George Brocklehurst and $name\"\n    :set user.email \"support+george+$nick@thoughtbot.com\"\n    :set gitsh.prompt \"$nick+$gitsh.prompt\"\n  }\n  \n  # usage:\n  # gitsh@ pair \"Mike Burns\" mburns\n  # mike+gitsh@\n  ```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29399196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29504195", "body": "Replaced by #27 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29504195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29528066", "body": "@pbrisbin I've added tab completion for aliases added in #30. If you want to port over the full zsh completion algorithm, that would be awesome.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29528066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29578113", "body": "I've had a lot of fun this weekend implementing `:set variable value` and `$variable`. You can see it on the [`gb-parser` branch](https://github.com/thoughtbot/gitsh/tree/gb-parser) (if you want a usage example, [`spec/integration/variables_spec.rb`](https://github.com/thoughtbot/gitsh/blob/gb-parser/spec/integration/variables_spec.rb) is a good place to start).\n\nCommands a no longer blindly passed to `git`: input is parsed by a [parslet](http://kschiess.github.io/parslet/)-based `Gitsh::Parser`, and then run through a `Gitsh::Transformer`, which spits out an object with a `#execute` method (a `Gitsh::GitCommand` or a `Gitsh::InternalCommand::Set`, so far)\n\nThere's a bit of work still to do:\n- [x] Unknown internal commands (i.e. anything that starts with a `:` and isn't `:set`) cause an exception\n- [x] The autotools based distribution doesn't install parslet\n- [x] `:set` and `$var` aren't documented anywhere\n- [x] Parse errors (e.g. unbalanced quotes, git commands containing underscores) cause an exception (this was already true, it's just a different exception now)\n- [x] Escaped quotes and dollars in strings don't work\n- [x] Tab completion for built in commands\n- [x] Replace `exit` special case with a `:exit` command\n- [ ] Support multi-line strings\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29578113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29613319", "body": "Things we want:\n- Customisable prompt, including placeholders for the current HEAD, working directory, etc.\n- Colours out of the box\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29613319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30058615", "body": "@mike-burns @pbrisbin: I've opened PRs for internal command support and the new parsing model (#37) and an install process with vendorized gems (#38). I've tried to break everything else we've discussed here into other issues (#31, #32, #33, #34, #35, #36) so we can tackle them one at a time. I'm beginning to think this project needs a Trello board or something.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30058615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30079200", "body": "There's a potential licensing problem here. Parslet depends on blankslate, which is MIT licensed but doesn't include the LICENSE file in the gem. There's [an open PR to add a license](https://github.com/masover/blankslate/pull/9), but the project hasn't been updated for a long time, and I'm pretty sure without the license file we'd be in breach.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30079200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30079260", "body": "Actually, I'm probably wrong: blankslate only contains one code file, which has permission to distribute it in a comment at the top of the file.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30079260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30146177", "body": "This vendorizing method still isn't quite right; if dependency versions change you need to manually delete the vendorized gems or the next distribution you build will contain the old versions.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30146177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30256445", "body": "Good call, @r00k, thanks. I've listed [the current benefits in the README](https://github.com/thoughtbot/gitsh#why-should-you-use-gitsh). So far, it mostly just saves on typing, but now we have the basics down there's a lot more good stuff to come.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30256445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30300511", "body": "@mike-burns I think the latest commit fixes the problem with old dependencies being vendorized. Ready for another review.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30300511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30491865", "body": "Merged!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30491865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30491900", "body": "It might be a good idea to use `$( \u2026 )` instead of backticks, since they can be nested (the parsing rules might be a little tricky, though).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30491900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30562388", "body": "Replaced by PR #40\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30562388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/31521748", "body": "Closed in favour of PR #43 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/31521748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/31531513", "body": "More or less working on the `gb-persistent-history` branch.\n\nStill to do:\n- [x] Don't use the default history file location in the test suite\n- [x] Let the user set the number of items to save in `gitsh.historySize` (currently hard coded to 500)\n- [x] Document the `gitsh.historyFile` and `gitsh.historySize` config variables in the man page\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/31531513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32584675", "body": "This should be addressed by this update to the Homebrew forumla: https://github.com/thoughtbot/homebrew-gitsh/commit/0fca311cadeadc2f5e6cb129b84eb589bd6b4fae\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32584675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32588067", "body": "Closed in favour of PR #45 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32588067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32603386", "body": "Closed in favour of PR #46 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32603386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32606826", "body": "Thanks Mike. I improved the documentation by adding \u201cfor the duration of the session\u201d. Merged.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32606826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32677174", "body": "I've removed the default colours from the prompt (04e6822).\n\nI think it would make sense to reverse the prompter's colour support (i.e. remove colours if the terminal doesn't support them, rather than adding them if it does support them) so that the default prompt, and the user's prompt setting, can contain ANSI colour sequences without losing portability.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32677174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32801943", "body": "@mike-burns I've opened issue #47 as a reminder that we need improved colour support. How does this look as it stands now?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32801943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32898497", "body": "@mike-burns I think I've addressed your comments on this one. Ready for another review.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32898497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33139090", "body": "Awesome idea. We already have various `git config` settings, so how about a `gitsh.defaultCommand` setting with a default value of `status`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33139090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33158884", "body": "@mike-burns I've cleaned up that messy `expanded_path` method, squashed the various tidying commits, and rebased on master. Thanks for all the feedback on this one; it's significantly better than the original PR.\n\nGood to merge?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33158884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33201642", "body": "Thanks, @mike-burns. I've made both changes you suggest.\n\nRebasing onto master involved an extra change to `spec/fixtures/fake_git`. Do you mind having a quick look at that before I merge?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33201642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33202611", "body": "Work in progress on the `gb-temporary-aliases` branch.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33202611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33244585", "body": "Merged!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33244585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33245545", "body": "Closed in favour of #53 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33245545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33248708", "body": "Closed in favour of #54\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33248708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33249344", "body": "This is done on the `gb-ruby-readline` branch (it was wonderfully simple, only the Gemfile needed to change).\n\nI've not used this readline implementation before though, so I'm going to try this out for a few days before opening a PR.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33249344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33250475", "body": "Work in progress on the `gb-tab-complete-punctuation` branch, which so far supports completion after a `.` character.\n\nCompletion after a `:` will be more complex: completing internal commands (`:cd`, `:set`, etc.) requires the `:` to be part of the command. It's probably possible to do some pre-processing within the `Gitsh::Completer`, though.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33250475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33413335", "body": "Done in e52039e\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33413335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33457375", "body": "Closed in favour of PR #55 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33457375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33457936", "body": "I initially thought it was fine to add cyan to the default prompt because the user could manually add ANSI colour codes to their `gitsh.prompt` setting, however this doesn't work. It doesn't seem to be possible to store any escape sequences in a `.gitconfig` file. From the `git-config(1)` man page:\n\n> The following escape sequences (beside \\\" and \\) are recognized: \\n for newline character (NL), \\t for horizontal tabulation (HT, TAB) and \\b for backspace (BS). **No other char escape sequence, nor octal char sequences are valid.**\n\n@mike-burns has previously suggested a custom colour format (e.g. something like `%C(00;31)` would map to `\\033[00;31m`) which would get around this problem.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33457936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33468275", "body": "Predictably, I only hit the bugs in `rb-readline` after opening this PR. <kbd>meta</kbd><kbd>backspace</kbd> doesn't work, for a start. There are also major bugs in vi mode which are probably deal breakers on this.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33468275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33468349", "body": "This might be a good alternative: https://github.com/h3rald/rawline\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33468349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33791977", "body": "Agreed on removing the `CYAN_FG`. I've removed it, and will merge this.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33791977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33792159", "body": "`rb-readline` wasn't great (see #55 for that failed experiment).\n\nMaybe we should try this instead: https://github.com/h3rald/rawline\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33792159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33792171", "body": "Closing, because rb-readline is buggy.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33792171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33823554", "body": "Interesting, thanks. The homebrew formula is meant to work around this by adding a dependency on homebrew Ruby if the system Ruby is  too old. I'll look into it. \n\nSent from my phone\n\n> On 31 Jan 2014, at 17:48, Jo\u00ebl Quenneville notifications@github.com wrote:\n> \n> gitsh tries to use system ruby which is 1.8.7 on OSX Mountain Lion, but gitsh requires 2.0 or greater.\n> \n> checking for ruby version... 1.8.7\n> configure: error: Ruby 2.0 or later is required to install gitsh\n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33823554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33842650", "body": "@JoelQ @gylaz Did homebrew try to install a Ruby version, which the gitsh installer failed to pick up, or did the homebrew dependency fail?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33842650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33854524", "body": "Thanks, Adarsh.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33854524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33856587", "body": "I have a potential fix for this: 779d9a210c6a1fc2a4d3312df8b09e7589fda613. Could someone on Mountain Lion give this a go?\n\nHere's what you'd need to do:\n1. Download the [updated formula](https://gist.github.com/georgebrock/a11cb942426d75b7a4f8/raw/29a5a442b3786e7c953194e7dcaf5794486a2610/gitsh.rb)\n2. Run `brew install ~/path/to/formula/gitsh.rb`\n3. Profit!\n\n/cc @JoelQ @gylaz \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33856587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33865790", "body": "Awesome, thanks for the debugging help. I'm moving this to a PR: #62 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33865790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33865803", "body": "This formula definitely works on OS X Mavericks (system Ruby is 2.0) and OS X Mountain Lion (system Ruby is 1.8.7). See discussion on #60 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33865803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33882804", "body": "Thanks Greg. Merged.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33882804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34422778", "body": "I've improved the README a little in #65, I'll also work on an introductory screencast.\n\n@croaky: it'd be great to get your feedback on #65 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34422778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34468946", "body": "I put together a screencast this afternoon that will hopefully help:\nhttps://www.dropbox.com/s/imp4xoudu61xmr8/gitsh.m4v\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34468946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34469395", "body": "Thanks Mike, merging.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34469395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34470338", "body": "Merged!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34470338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34537656", "body": "Thanks Dan, merging.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34537656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34538079", "body": "Thanks Dan, I've added the screencast to the blog post. I'll close this issue for now.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34538079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34625626", "body": "We should use `git var GIT_EDITOR` for this, which will try `$GIT_EDITOR`, `git config core.editor`, `$VISUAL`, `$EDITOR`, and finally the compiled in default (which is usually vi)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34625626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34633751", "body": "Replaced by #70\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34633751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34666778", "body": "This looks like it might be a libedit bug.\n\nThere are two different line editors that the Ruby standard library can use: GNU readline and libedit. For licensing reasons, system Ruby on OS X (and other BSD-based OSes) uses libedit, but GNU readline is used by Bash and has more features and (in my experience) fewer bugs.\n\nIf you install Ruby using Homebrew (`brew install ruby`) you'll get a version of Ruby 2 that uses readline instead of libedit. Re-installing gitsh (`brew uninstall gitsh && brew install gitsh`) should link against that Ruby version.\n\nThere are some pure Ruby implementations of readline, which we could distribute with gitsh, but so far we've tried has been worse than libedit and much worse than GNU readline.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34666778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34669449", "body": "It's all yours!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34669449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34692391", "body": "The `.in` extension is part of the way we distribute `gitsh` using GNU autotools.\n\nYou should run:\n\n```\n./autogen.sh\n./configure\nmake\n```\n\nI'll update the contributing guide to add these undocumented steps.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34692391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34736685", "body": "Thanks for setting this up, @cippaciong. Are you happy to update AUR as new versions are released?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34736685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34738627", "body": "This is a good start: It should prevent blank lines being saved to the history file. There is one more case to consider, though. The current session's history isn't written to the file until the end of the session, so there will still be blank lines in the history during the current session.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34738627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34738805", "body": "Thanks for the PR.\n\nI don't think GitHub's syntax highlighting for bash quite works in this context, though. It's highlighting as if these were bash scripts, rather than transcripts of interactive sessions, which means that the prompts and some of the output is misinterpreted by the highlighter and ends up looking strange. I think the unhighlighted version is slightly better in this case.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34738805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34738913", "body": "This might be a libedit issue, see my comment on #74. Does switching to a version of Ruby with readline help resolve this?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34738913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34739281", "body": "Fantastic, thanks!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34739281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34743789", "body": "gitsh uses system Ruby (or Homebrew Ruby) instead of an rcm/rbenv Ruby, because we didn't want to depend on a Ruby version that might get moved or deleted frequently. Running `head -1 $(which gitsh)` will tell you which Ruby it's linked against.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34743789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34754189", "body": "@hakanw That's definitely related to libedit issues, and goes away when Ruby uses readline.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34754189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34754962", "body": "I'm actively looking for alternatives (see #49) but in the meantime it is possible to work around the problem by installing Ruby using Homebrew, instead of using system Ruby.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34754962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34762951", "body": "Using gitsh as a sh-bang line will be tricky, since gitsh itself has a sh-bang line:\nhttp://stackoverflow.com/questions/9988125/shebang-pointing-to-script-also-having-shebang-is-effectively-ignored\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34762951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34767515", "body": "Work in progress on the `gb-non-interactive` branch: https://github.com/thoughtbot/gitsh/compare/gb-non-interactive\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34767515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34851008", "body": "This was a deliberate decision: Rubies installed via RVM, ruby-install, etc. are generally unstable (by which I mean Ruby developers delete them, or change tools, very often).\n\nBy depending on system Ruby (for Mavericks and later, which ship with Ruby 2.0) or Homebrew Ruby (for earlier versions of OS X) we can avoid the need to re-install gitsh whenever the RVM (etc.) Rubies move or change as is often the case with tools that are distributed as Rubygems.\n\nIf you really want to use a ruby-install version of Ruby, you can install manually like this:\n\n```\nRUBY=$(which ruby) ./configure\nmake\nsudo make install\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34851008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34851059", "body": "Are you installing from the repository, or from the tarball?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34851059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34851240", "body": "Thanks for reporting this, @jbutz.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34851240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34852000", "body": "@jmpalacios It doesn't look like you're doing anything wrong, but there is definitely a `setup.rb` file in the tarball, so it must have been incorrectly deleted or moved at some point in the installation process.\n\nCould you extract the tarball again, and then confirm that there is a `gitsh-0.3/vendor/gems/setup.rb` file, and that the file still exists after you run `./configure`, and again after you run `make`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34852000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34853091", "body": "@blainesch This looks great. There are a couple of minor things (one of which you would have picked up if the tests were working for you), and then it's good to merge. Thanks!\n\nI'll look into the `./configure` failure. I've opened #86 and to keep track of that separately.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34853091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34853790", "body": "The code style changes look great, I have no more complaints there.\n\nThis will no longer write or read blank lines to or from the history file, but blank lines are still possible in the current session because the [`Readline.readline`](http://ruby-doc.org/stdlib-2.1.0/libdoc/readline/rdoc/Readline.html#method-c-readline) method is adding lines to `Readline::HISTORY` as the user enters them.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34853790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34853882", "body": "@blainesch It's possible that you have a new enough version of `autoconf`, but an older version of `autom4te`. Could you check `autom4te --version`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34853882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34854138", "body": "@popstr Good catch, thanks.\n\nWe split recognise certain punctuation as the end of one completion and the beginning of the next. That should include two or three dots (`..` or `...`) to support Git's commit range syntax, but it shouldn't include a single dot (`.`).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34854138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34857526", "body": "I've just set up [Travis CI](https://travis-ci.org/thoughtbot/gitsh) for this project. Travis' build workers have autoconf 2.68 installed, so I had to drop the required version (but I'm happy to do so, since the configure script will be run as part of the tests).\n\nThis might help to resolve this issue.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34857526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34874147", "body": "Looks good. Merged!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34874147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34922100", "body": "We've discussed both `!` and `:!` before. I was hesitant, because I like the semantics of `!` in bash, zsh etc. (e.g. `!!` is \"previous command\", `!$` is last argument of previous command, etc.) but executing regular shell commands is probably more useful.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34922100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34923651", "body": "I think this is a good idea, possibly with an option to disable it (like Git's built in `help.autocorrect` option).\n\nFunnily enough, @mike-burns suggested this in his first commit message on the gitsh prototype: https://github.com/mike-burns/gitsh/commit/6a8d49b137263ecbe5f9e3761363059ecbea3f61\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34923651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34953660", "body": "@matthewadams I think it makes more sense to have a fixed symbol rather than a user setting, so that gitsh scripts remain portable (when we add a non-interactive mode, see #7) and we can give other symbols other semantics without ambiguity (e.g. see #69).\n\nOtherwise, I'm sold on the idea. Let's stick with `!`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34953660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34954152", "body": "This is a good idea. It should probably also include these projects:\n- https://github.com/caglar/gitsh\n- https://github.com/defunkt/repl\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34954152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34954541", "body": "Sorry about that. The tarball includes all of the required gems, so that installation method doesn't need any gems to be installed on the system.\n\nHere's the process to install from the repo, which I'll add to the README or an INSTALL file at some point soon too:\n1. Install Ruby 2.0 or later.\n2. Install the bundler gem:\n   \n   ```\n   sudo gem install bundler\n   ```\n3. Install the other other gems that gitsh depends on (parslet, etc.) using bundler:\n   \n   ```\n   cd gitsh\n   bundle install\n   ```\n4. Build and install:\n   \n   ```\n   ./autogen.sh\n   ./configure\n   make\n   sudo make install\n   ```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34954541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34955185", "body": "The intention of the `:` prefix was to distinguish gitsh commands from Git commands, so that we wouldn't trample on anyone's aliases or custom Git commands. It seems unlikely that anyone will have a `git exit` alias, but you never know.\n\nAn option to allow gitsh commands to be used without the prefix is possible, but I think I'd personally prefer if the `:` was required by default.\n\nThat said, I'd recommend using <kbd>ctrl</kbd><kbd>d</kbd> over `:exit`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34955185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34955422", "body": "Thanks, @blainesch. Merged!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34955422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34955665", "body": "Agreed. We should support `;`, `&&`, and `||`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34955665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34956094", "body": "The installer tries to avoid using rvm/rbenv/etc. because those Rubies tend to be uninstalled or changed frequently by Ruby developers.\n\nWhen you install via Homebrew on OS X, this is a pretty smooth process (if the system version of Ruby 2.0 or later that is used, otherwise Ruby 2.0 is installed via Homebrew). We're planning to reduce the requirement to Ruby 1.9.3 so that we can build similar packages for the major Linux distros (2.0 isn't usually available as a standard package yet).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34956094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34973829", "body": "This is work in progress on the `gb-tab-complete-spaces` branch: https://github.com/thoughtbot/gitsh/compare/gb-tab-complete-spaces\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34973829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34974939", "body": "Thanks for the PR, @blainesch.\n\nThere are a couple of things about this approach that I think might be a bit problematic:\n1. Using `and` and `or` introduces lots of ambiguity. For example, the command `add and commit` could mean \u201cexecute `git add`, then `git commit`\u201d or it could mean \u201cexecute `git add` on files called `and` and `commit`\u201d. I think we should stick to `&&` and `||` to avoid this.\n2. I think this probably belongs in the `Gitsh::Parser` rather than in the `Gitsh::Interpreter`. As we make gitsh support an increasingly complex and capable language (e.g. with functions), having the parsing all in one place will make it easier to maintain the code.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34974939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34986129", "body": "What version of Ruby is `/usr/local/bin/ruby`? It might be that you used Homebrew to install Ruby 1.9, and the gitsh Homebrew forumla is assuming that it will be 2.0.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34986129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34988325", "body": "Thanks @blainesch \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34988325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35006220", "body": "Run this command: `/usr/local/bin/ruby --version`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35006220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35060719", "body": "@blainesch This approach sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35060719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35060828", "body": "`Readline` stores the history of the current session in `Readline::HISTORY`. The `Gitsh::History` object (which you've already worked on) populates `Readline::HISTORY` when gitsh starts with the history from earlier sessions, and then each time we call `Readline.readline(prompt, true)` the new input is added to `Readline::HISTORY`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35060828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35060979", "body": "It's likely that `/usr/local/bin/ruby` was installed by Homebrew. If you run `brew info ruby`, it will either tell you Ruby is \"Not installed\", or it will give you information about the install. If that version of Ruby was installed by Homebrew, you can try to fix it with `brew uninstall ruby && brew install ruby`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35060979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35063140", "body": "Since I'm looking for alternatives (#49) and we have a nice work around (Homebrew Ruby) I'm going to close this for now.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35063140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35090774", "body": "Thanks Mike, merged.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35090774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35091032", "body": "Thanks, merged.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35091032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35091610", "body": "Thanks, squashed and merged.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35091610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35117626", "body": "Thanks for the PR, @hoop33. I've made a couple of comments, but I think this is definitely on the right track.\n\nMy only other thought is that currently this will also allow gitsh-specific commands to be prefixed (e.g. `git :exit`). I'd like to follow the principle of least astonishment and do whatever seems least surprising to the user, but in this case I'm not sure what the least surprising option is. If `git :exit` is a bug and not a feature, then an alternative might be to put the `git` prefix in Git command branch of the `command_identifier` rule, otherwise it should stay where it is.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35117626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35162730", "body": "I'm not too keen on this idea. It would cause the same command to execute differently in different contexts, which again would hurt the portability of scripts.\n\nIt's also hard to determine if a command is unknown to Git, or has just been used incorrectly (built in Git commands seem to be quite well behaved and use different exit statuses to indicate what's going on, but there's no guarantee that a custom Git command \u2013 a binary file like `git-foo` somewhere on the user's `$PATH` \u2013 would follow Git's exit status convention). I suppose we could compare to the theoretically complete list of commands that we use for tab completion, but even then portability would still be a problem.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35162730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35163588", "body": "@Adam89 @sgrif This is looking really good. A few minor comments, and then it's good to merge. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35163588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35167128", "body": "I think you might be missing a `require`, but otherwise this looks great. Thanks, Sean.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35167128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194104", "body": "@cristeab The default gitsh prompt already changes colour and sigil based on the repo's current status:\n- When everything is clean, it is blue and ends with `@`.\n- When there are uncommitted changes, it is orange and ends with `&`.\n- When there are untracked files, it is red and ends with `!`.\n\nIs there a case that we're not already covering?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194188", "body": "@shsteven I've updated the first example in the README to use <kbd>ctrl</kbd><kbd>d</kbd>, and it's mentioned in the man page. I'd like to keep the startup message short, and this is common Unix behaviour (it works in the vast majority of interactive shells), so I'm hoping the README and manual changes are enough.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194342", "body": "If those files aren't going to be committed, would it make sense to add them to your `.gitignore` file?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35195062", "body": "It looks like you have a broken Ruby install in `/usr/local/bin`, and that it didn't come from Homebrew. Do you know where it did come from? Did you use MacPorts (or similar) on this machine before installing Homebrew? Is `/usr/local/bin/ruby` a symlink to anywhere?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35195062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35196702", "body": "The [`.gitignore` file format](https://www.kernel.org/pub/software/scm/git/docs/gitignore.html) supports various kinds of globbing; even when there isn't a fixed name for some temporary build output it's usually possible to construct a rule that will ignore it either by ignoring a directory or by using a pattern (for example, this project has a [`.gitignore` line to ignore the distribution tarball](https://github.com/thoughtbot/gitsh/blob/master/.gitignore#L20)). I've not worked much with cmake, are there any temporary files that don't follow a regular pattern?\n\nAdditionally, the colour and symbol changes are deliberately always synchronised, so that there's never any information that is only communicated using colour. This is to support users who can't see the colours (either because their terminal doesn't support coloured output, or because they have difficulty distinguishing between different colours).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35196702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35233995", "body": "@shsteven There still seems to be some demand for an option to allow the `:` prefix to be dropped, so I'm going to reopen this for the time being.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35233995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35234703", "body": "Thanks for this @blainesch. Other than the spec failure, I have a couple of concerns:\n- There are complex nested arrays being passed around that are hard to understand. I think I'd prefer it if the `Gitsh::Transformer` only emitted objects that responded to `#execute` (ideally the `Gitsh::Interpreter` wouldn't have to change at all).\n- There is no integration spec that runs chained commands through the whole program. I think this would be very useful, and will turn up some additional issues. For example the code seems to assume that `Gitsh::GitCommand#execute` and `Gitsh::InternalCommand#execute` return a value indicating success, but currently they don't return any meaningful values.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35234703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35323213", "body": "@blainesch Your second paragraph (`OrClass`, `AndClass`, \u2026 but with better names that I can't think of right now either) is exactly the route I was thinking. Changing the transformer makes sense, but I think the code will be much cleaner if the interpreter just takes whatever the transformer gives it and calls `#execute`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35323213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35360591", "body": "Agreed, we should support these.\n\nIn the meantime, it might be useful to know that readline's default (emacs) key bindings include <kbd>alt</kbd><kbd>_</kbd>, which appends the last argument from the previous command to the current command, and can be used instead of `!$`. (Sadly this won't work if your Ruby uses libedit instead of readline, or if you've tweaked you `.inputrc` in various ways)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35360591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35428426", "body": "This is a bug, but @blainesch recently fixed it (see #81) so you'll get full branch names after the next release, which should be in the next week or so.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35428426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35599558", "body": "@fuadsaud Yes, me too. Ruby has decent globbing support, so we should be able to add it at some point.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35599558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35599606", "body": "@marcioAlmada I'd prefer to keep `:` as a prefix for internal gitsh commands (like `:set` and `:exit`). Nothing against using `\\`, but `!` will be consistent with a bunch of other programs so I think we should stick with that.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35599606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35599721", "body": "@blainesch Thanks for the update! I don't have time to look into it in detail today, but I'll look through the code and the test failures in the next couple of days.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35599721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35599765", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35599765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35601778", "body": "Thanks for the PR. It looks like `version.rb` is getting the wrong permissions, good catch.\n\nUnfortunately including it in `EXTRA_DIST` won't work either, because it won't be installed to the correct place. Maybe `dist_pkgruby_DATA` would be more appropriate?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35601778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35633772", "body": "I agree, this would be very useful.\n\n(I'm closing this issue because it's a duplicate of #90, but the feature is definitely planned.)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35633772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35703011", "body": "Thanks for this @adrianlang. I'm curious how you got man to emit warnings? I'd like to check the man page for errors as part of the test suite.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35703011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35706870", "body": "@fuadsaud Git has it's own editor settings which it will prefer (if they are set). To find out which editor Git is using, you can run `git var GIT_EDITOR`.\n\nAccording to the [man page for git-var(1)](https://www.kernel.org/pub/software/scm/git/docs/git-var.html):\n\n> The order of preference is the `$GIT_EDITOR` environment variable, then `core.editor` configuration, then `$VISUAL`, then `$EDITOR`, and then the default chosen at compile time, which is usually _vi_.\n\nI have used `gitsh` with both `hub` and `gh` and had no trouble creating pull requests.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35706870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35715170", "body": "Thanks @adrianlang. I've merged in the change.\n\nUnfortunately `man --warnings` isn't portable, so I won't be able to add it to the test suite.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35715170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35719702", "body": "Thanks @adrianlang! I've rebased this onto master and merged it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35719702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35745876", "body": "@mike-burns It doesn't work under OS X or Free BSD\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35745876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35765977", "body": "I'm not convinced we should do this. `:set` can already be used to add `-c` flags, and a `:version` command could output both the Git version and the gitsh version. Is there a use case I'm missing?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35765977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35820543", "body": "Thanks for sticking with this through all my nitpicking, @blainesch. The latest round of changes look great.\n\nMy main concern now is that the operator precedence doesn't match the semantics of other languages, for example `add && commit; push || reset` is read as `(add && (commit; push)) || (reset)` whereas the more common way to parse that would be as `(add && commit); (push || reset)`. I don't think this will require any major changes though, just a little bit of shuffling around of the parser rules and their related specs.\n\nOther than that my comments are all pretty minor style and naming stuff to help keep the codebase internally consistent.\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35820543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35835328", "body": "Good catch, @AgentAntelope, thanks. I feel like the spec maybe belongs in the `Gitsh::Transformer` unit test, rather than as an integration test (which is slower), but otherwise this is good to merge.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35835328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35929594", "body": "Closing this, because we're nearly ready to merge #95.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35929594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35929712", "body": "Closing this in favour of PR #97 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35929712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35929937", "body": "Closing this in favour of PR #107 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35929937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/36096432", "body": "@yasuoza Good catch, thanks. I think there's still a potential bug in the implementation that's worth looking at before we merge.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/36096432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640346", "body": "I'd prefer `current HEAD` to `branch name` here.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640368", "body": "Maybe better as: `The current HEAD is a branch name, tag name, abbreviated SHA, or the text`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640377", "body": "I think this would be more clear as `the current directory is not a git repository`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640390", "body": "Looks good Mike. A few minor comments, but otherwise good to merge.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4640390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4671351", "body": "This change directly contradicts the advice given here: http://www.gnu.org/software/autoconf/manual/autoconf.html#Installation-Directory-Variables\n\nApparently, in order to support a custom prefix given to either `configure` or `make`, we should not use `AC_SUBST` with paths that include the prefix, but instead we should do some complicated `sed` dance to manually replace them in our `Makefile`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4671351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4671504", "body": "Fixed in d02ea1b9388dd7eead5d49878ad4d04a7bb17a7f\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/4671504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/6959684", "body": "I wrote a small test script, and this won't work in directories with spaces. Good catch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/6959684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446594", "body": "Other classes in this codebase don't have explanatory comments. Do you think it's more necessary in this case, or can we do without it?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446618", "body": "Having class-level state can easily introduce problems, for example if we set up 5 responses in `StubbedMethodResult` and then our test only consumed 3 of them, we'd be left with something for the next spec.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446667", "body": "This might be more clear if we renamed it to `wait_results`, since it's used by the stubbed `#wait` method?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446674", "body": "As above, maybe `readline_results` would be more clear?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446688", "body": "http://robots.thoughtbot.com/meditations-on-a-class-method might be relevant.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7387266", "body": "This is the wrong way of doing this in interactive mode: It prevents git from using a pager, an editor, etc. Doing it in such a way that git can be interactive might break the test infrastructure and render this whole PR pointless.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7387266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7387269", "body": "This method feels like a bit of a hack. I'd appreciate alternatives.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7387269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7891434", "body": "Note to self: `exit EX_USAGE`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/7891434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192945", "body": "We should allow for that, right now it causes a parse error. Good catch.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193011", "body": "I considered using `inspect`, but I was concerned it would be unclear and decided this way was more explicit and less fragile (if the keys were ever not symbols, for example). I'll change it if you feel strongly, but I prefer it as is.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193051", "body": "Good call. If parslet allows the order to be reversed, I'll do it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8202718", "body": "Done in 56408ee\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8202718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8202729", "body": "Fixed in b4e72d7\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8202729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8269450", "body": "You're right about the `cd`, @pbrisbin.\n\nThe `echo` is to convert from a list with one item on each line, to a list on a single line separated by spaces. If you know of a cleaner way of expressing that I'd love to make it a bit less magical.\n\nI'll clean up the style points before I merge, thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8269450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8271099", "body": "It does matter: the values are dropped verbatim into the Makefile, so an unescaped newline will cause problems.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8271099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8966195", "body": "I think I'd prefer something akin to `Hash#fetch`; it will still allow us to remove the `nil` check, but it won't require shelling out to `git config` twice\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8966195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8986912", "body": "Done in 3dab396\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8986912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8986913", "body": "Agreed. Done in e2dfc21\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8986913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9045829", "body": "I tend to use an `attr_reader` for all i-vars these days, so they are only explicitly referenced on assignment. I feel like that solves the same problem in a different way.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9045829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9045892", "body": "I think that's an improvement. How would you feel about this?\n\n``` ruby\ndef expanded_path\n  @expanded_path ||= if original_path.end_with?('/')\n    ...\n  else\n    ...\n  end\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9045892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9125145", "body": "I memoised this method because it is called N+1 times when building completions for a directory with N files. Some quick-and-dirty benchmarks reveal that this really isn't a problem, so I'll just drop the memoisation.\n\n``` shell\n$ time /usr/bin/ruby -e '1000.times  { |i| \"x\".end_with?(\"/\") ; File.expand_path(\"~/foo/../bar/#{i}\") }'\n\nreal    0m0.036s\nuser    0m0.026s\nsys     0m0.009s\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9125145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9154631", "body": "I've expanded the description, but tried to avoid mentioning specific settings; I imagine the range of `-c` arguments passed in the integration specs will increase as we add more features, and I don't want the comment to get out of date.\n\nDoes this new version address your concerns?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9154631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9535042", "body": "Good call, done.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9535042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9562921", "body": "There is some shell code for packaging and distribution, but gitsh is (according to GitHub) 98.2% Ruby.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9562921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9660963", "body": "This expectation probably isn't required, since it's already included in the previous spec.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9660963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9661146", "body": "This returns `\"\"` instead of `nil` when there is no branch name, which causes `#current_head` to break (it's implemented as `current_branch_name || current_tag_name || \u2026`).\n\nThe same kind of check that we use in `#current_tag_name` would probably work well here.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9661146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9750983", "body": "I think the `git_literal` rule should probably include a definite space; the `maybe` on the space could lead to things like `gitcommit` being accepted as `commit` which seems like unexpected behaviour.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9750983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9750994", "body": "How do you feel about the name `git_prefix`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9750994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9760862", "body": "Parslet's repeat method can be a little confusing, but `repeat(0)` here means \u201czero or more times\u201d (like `*` in regexp), so it will match `gitgit`, `gitgitgit`, etc. I think we can just drop the `repeat` call here.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9760862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9617442", "body": "This project follows the [thoughtbot Ruby style guide](https://github.com/thoughtbot/guides/tree/master/style#ruby), which says:\n\n> Avoid conditional modifiers (lines that end with conditionals).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9617442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9617457", "body": "I think `command.chomp.empty?` could be more readable than `command.chomp == \"\"`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9617457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9617460", "body": "Marking specs as pending (like commenting code) is usually a temporary measure. Before this is merged into master, any pending specs should either be restored or removed completely if they are no longer relevant.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9617460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9617479", "body": "Tiny niggle: This line uses two different quote styles (single and double quotes).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9617479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9661548", "body": "Great, thanks. I suspect this might be failing because it depends on certain types of files existing in the user's home directory. Maybe constructing a fake, temporary home directory and setting the `$HOME` environment variable will help here.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9661548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773697", "body": "This line being added here only contains whitespace, so it's not clear if the test passes because `add_hist` is `false` (which is what the example description says we're testing here), or because of the whitespace filter (as covered in the previous example)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773705", "body": "It's good practice to always implement `#respond_to_missing?` whenever you implement `#method_missing`. See this blog post for more details: http://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773726", "body": "How would you feel about applying the filter after reading from the `opts` hash? Something like this:\n\n```\n@readline = ReadlineBlankFilter.new(opts.fetch(:readline, Readline))\n```\n\nIn the integration specs we inject a `FakeReadline` instance into `CLI` (see this helper: https://github.com/thoughtbot/gitsh/blob/master/spec/support/gitsh_runner.rb#L43). To make sure those specs still exercise as much of the whole program as possible we should make sure they use the `ReadlineBlankFilter` somehow, and applying it to the injected `Readline` here avoids complicating the already slightly hairy integration spec setup even further.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773728", "body": "I really like the re-use of `FakeReadline` here.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773738", "body": "This is much cleaner than the method I used to achieve the same effect in `FakeReadline` (see: https://github.com/thoughtbot/gitsh/blob/master/spec/support/fake_readline.rb#L7), nice work.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9774238", "body": "I see, sorry, I misunderstood what was happening here. I think my confusion arose from the phrase \u201cmodify the history\u201d which I (mis)read as \u201cadd to the history\u201d. Perhaps something that makes it explicit that \u201cmodify\u201d means `#pop` in this context?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9774238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9774280", "body": "Does this file need to `require 'gitsh/module_delegator'`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9774280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9937469", "body": "@yasuoza makes a good point: the `Environment` is created in `CLI#initialize` but `@git_command` isn't set until the options are parsed (https://github.com/thoughtbot/gitsh/blob/master/lib/gitsh/cli.rb#L100). I'm not a huge fan of this mutation, but I couldn't find a cleaner way of organising the code in `CLI`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9937469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973745", "body": "`Dir.chdir` will always return `0`, so an explicit `true` here would probably make the intention more clear:\n\n``` ruby\nDir.chdir(path)\ntrue\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973750", "body": "Since `:or_operation` is now the root rule, it should appear first (the rest of the file is arranged so that a rule's dependencies are always further down the file).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973751", "body": "How would you feel about calling the root rule `:program`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973755", "body": "I'd prefer if this was named something more descriptive than `meh`. `delimiter` or `semicolon` maybe?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973759", "body": "Is there a reason that this is a mixin, rather than a superclass?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973763", "body": "The rest of this codebase avoids accessing ivars directly, and prefers private `attr_readers` instead.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973767", "body": "I'd prefer if this had a more descriptive name. Maybe something like `chaining commands with semicolon`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973810", "body": "I'd expect the parser to produce a different tree structure here. Something more like this (I've abbreviated the commands for readability):\n\n``` ruby\nmulti: {\n  left: {\n    and: {\n      left: 'add -p',\n      right: 'commit -v'\n    }\n  },\n  right: {\n    or: {\n      left: 'push origin',\n      right: 'reset --soft HEAD'\n    }\n  }\n}\n```\n\nThis would more closely match the semantics of bourne shell (which gitsh borrows heavily from in other places), Ruby, and a whole host of other languages.\n\nIf we want to support other more complex structures, we should add support for parentheses (although that's probably out of scope for this original PR).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973824", "body": "Other specs in this codebase use the bourne gem to make assertions about stubbed calls after the method under test has been exercised, which makes them fit the four phase testing model better (setup, exercise, verify, teardown).\n\nThis example could be written as:\n\n``` ruby\nt.stubs(execute: true)\nf.stubs(execute: false)\n\nGitsh::Tree::Or.new(f, t).execute\n\nexpect(f).to have_received(:execute).once\nexpect(t).to have_received(:execute).once\n```\n\nIn this spec the return values of `t.execute` and `f.execute` could be moved to the `let` blocks, which would reduce some repetition and simplify the test cases.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973826", "body": "A longer description would be useful here, maybe something like `complex combinations of commands`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973828", "body": "Thanks for rolling this in from the discussion on the other PR.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973833", "body": "These new `Gitsh::Tree::*` objects are great.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973873", "body": "It would be great to add an internal command example to this spec. Maybe something like this:\n\n``` ruby\ngitsh.type ':set test.setting hello && config test.setting'\nexpect(gitsh).to output 'hello'\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973916", "body": "I think `program` would probably be the new name for `multi_command`, and the order of things should change a bit (see comments on the parser spec below). Just a suggestion, though.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9975291", "body": "Was there a reason to revert back from `Process.wait` from `Process.wait2`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9975291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9976384", "body": "Ah, interesting. I didn't know about that behaviour, I was just trying to avoid the use of global state. Good catch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9976384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9965398", "body": "I agree with @blainesch that this is a good preparation for chaining commands.\n\nI'd prefer to use [`Process.wait2`](http://www.ruby-doc.org/core-1.9.3/Process.html#method-c-wait2) though, because it makes the relationship between the child process and the exit status more explicit than `Process.wait` and `$?` does.\n\nSomething like this:\n\n```\npid, status = Process.wait2(pid)\nstatus.success?\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9965398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10070121", "body": "I've updated this to return `$?.success?`\n\n@mike-burns I think we're good to merge, could you take a quick look at the last commit?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10070121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10114235", "body": "Agreed, fixed.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10114235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10069879", "body": "I'm not sure this regex is correct: the character class `[^alias]` means \u201cany character except a, l, i, or s\u201d, so any alias that includes a newline followed by one of these letters will still suffer from the same problem (e.g. `status\\nlog`).\n\nSince we only need the names of the aliases, and not their contents, perhaps filtering out the lines that don't begin with `alias.` would be better:\n\n``` ruby\ngit_output(%q( \u2026 )).\n  lines.\n  grep(/^alias\\./).\n  map { |line| \u2026 }\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10069879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10409978", "body": "Since we're only trying to get the names of the aliases, and not their values, this seems more complex than it needs to be. How about just filtering with `grep(/^alias\\./)` after the call to `lines`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10409978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10409091", "body": "Rather than maintaining this list manually, how about we dynamically build the list in `configure.ac`? We already generate a list of files under `lib` there.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10409091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10434721", "body": "With the latest changes, this step in the documentation is redundant.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10434721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10434739", "body": "What does this file do? Having a hard-coded absolute path makes me a bit nervous.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10434739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10608249", "body": "Agreed.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10608249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10764571", "body": "Small [style guide](https://github.com/thoughtbot/guides/blob/master/style/README.md#formatting) violation here:\n\n> Don't vertically align tokens on consecutive lines.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10764571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193576", "body": "Typo: `configured`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193598", "body": "Why is this line required? I'd expect `DEFAULT_GIT_COMMAND` to be used without any setup.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193604", "body": "Type: `defaults`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195063", "body": "Now that we're in a temporary home directory this messy line is probably redundant. Hooray!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194194", "body": "As discussed in other PRs, Hound isn't up to date with the style guide on this issue: https://github.com/thoughtbot/hound/issues/147\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194245", "body": "I think I prefer this style for things like factories and stubs, where there is a single identifying argument followed by a Hash of options:\n\n``` ruby\nfoo = create(:something, {\n  bar: 1,\n  baz: 1\n})\n```\n\nThe alternative blurs the boundary between the identifier and the attributes:\n\n``` ruby\nfoo = create(\n  :something,\n  bar: 1,\n  baz: 1\n)\n```\n\nI don't think I'm violating the thoughtbot style guide here, just using some punctuation that could be omitted. I could also omit parentheses on many method calls where I choose not to.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11997800", "body": "Thanks, @AgentAntelope. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11997800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12729832", "body": "Could we get rid of the `||` by using a regexp like `/^\\s*$/`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12729832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12729859", "body": "Since `InteractiveRunner#read_command` is replacing the blank line with the default command before it's passed to the interpreter, are these parser changes necessary?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12729859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12729879", "body": "It also might be more readable to put the regexp in a constant.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12729879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12770115", "body": "Passing `argv` directly here should be fine. According to C99 \u00a7 5.1.2.2.1:\n\n> `argv[argc]` shall be a null pointer.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12770115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11474871", "body": "There are a few problems with this line:\n- The first `match` rule will accept a `,` character, which I can't think of a use case for.\n- The second `match` rule will accept the `/` character, which makes the `forward_slash` rule redundant.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11474871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11474890", "body": "Parslet has a `str` method, which is better than `match` when we only want to match a specific string.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11474890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11474905", "body": "This worries me a little: We're inside `gitsh`, and then we start `gitsh` again. Seems like it could be problematic.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11474905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13749844", "body": "Agreed, and fixed.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13749844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13749851", "body": "Good point. I've moved it to the bottom.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13749851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13805765", "body": "After discussing this in person, you're absolutely right that these can be handled in the same way as comments: a comment is turned into a `Gitsh::Comment` object which responds to `#execute` but does nothing. If we renamed `Gitsh::Comment` to `Gitsh::NoOp` or similar then we could use this class for both comments and blank lines.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13805765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13805791", "body": "Good catch, thanks. It originally read \u201cPass the path to a file \u2026\u201d, but was partially changed to be consistent with the previous sentence.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13805791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14086998", "body": "Maybe. I'm not completely happy with the failure message yet; when one matcher fails the others still output a message like `expected 0, got 0`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14086998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14088467", "body": "This isn't a thing.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14088467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14088498", "body": "`^\\s*$`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14088498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14291003", "body": "Good call. Done.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14291003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14298084", "body": "Good call. I've gone with `returns the input stream passed to the constructor`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14298084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14298120", "body": "I'd like to stick with `returns` here, to be consistent with other examples in this file.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14298120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14424951", "body": "Since `:exit` is a command, it should be marked up using the `Ic` macro:\n\n```\nalias for\n.Ic :exit .\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14424951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10409214", "body": "I'm not sure if this is an improvement: the `input` would need escaping before interpolating into the regular expression.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10409214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10766386", "body": "I can't think of a more succinct way of describing this example, so I'm happy to leave this at 82 characters.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10766386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193708", "body": "Good call, thanks. I always forget about `#flat_map`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193730", "body": "Go home, @houndci. You're drunk.\n\nI think this actually referred to line 65, which I've wrapped to shorten it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193749", "body": "Indeed it should. Moved.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193863", "body": "Definitely not intended, good catch. I believe the intention was to avoid escaping the space at the end of the completion, which is there to separate it from the next argument rather than being part of the current argument.\n\nI've fixed this using a look ahead, which I don't like doing, but in this case it seems like the simplest approach:\n\n``` ruby\narg.gsub(/ (?!$)/, '\\ ')\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11193863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12014999", "body": "Good catch.\n\nUnfortunately trying to fix it got really complicated really fast. Ruby's Readline module doesn't understand that escaped spaces (`'\\ '`) aren't a break between arguments, so when it's given `add a\\ text` to complete it assumes we are completing the word `text` and not the phrase `a\\ text`. We have access to enough information to figure out that this is happening, and return `['a\\ text\\ file', 'a\\ text\\ document']` or `['\\ file', '\\ document']`, but in either case there are circumstances where that's the wrong thing to do, and the Ruby bindings don't give us enough information to figure out which would be correct for the current situation.\n\nWhat we really need to do is tell Readline how to determine if a character is escaped. Conveniently, we can do this using [`rl_char_is_quoted_p`](http://cnswww.cns.cwru.edu/php/chet/readline/readline.html#IDX364). Inconveniently, the Ruby bindings don't expose this method.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12014999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12185265", "body": "I spent some time last Friday writing some C to expose that function, and in the process discovered that libedit either doesn't have the function or at least has a sufficiently different implementation that my code wouldn't build against it.\n\nWriting a parser wouldn't solve the problem of Readline/libedit only replacing the portion it has determined is being completed. We could stop using the built in tab completion entirely, but we'd lose some support for various `inputrc` settings.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12185265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12229992", "body": "I'm going to have another look at Ruby Readline implementations (#49) first.\n\nThe simplest other language approach would probably be a C extension to extend the built-in Ruby Readline module, or possibly to replace it entirely. I'm reticent to do a full rewrite, although with this, the process name thing (#41), and the sh-bang problems (#7), we're racking up quite a few things that we can't do in Ruby.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12229992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12234891", "body": "Probably this: https://github.com/georgebrock/readline-extensions\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12234891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14566576", "body": "I've started integrating the custom Readline code on the `gb-custom-readline-extension` branch.\n\nSo far I've got a working C extension which creates an empty `Gitsh::LineEditor` module, which is properly configured and built by the `./configure && make` dance. Running `make install` will install it globally for the selected Ruby version without doing any extra work, which means that other programs could theoretically `require 'gitsh/line_editor`, but that's probably fine.\n\nAll that remains now is to make it, y'know, do things, and to update the `configure.ac` or `extconf.rb` scripts to ensure we have access to all of the relevant line editing features.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14566576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16882581", "body": "Good catch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16882581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/18820566", "body": "Agreed about `Colors::NONE` here. Done in 6468b2d\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/18820566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/18820607", "body": "I think this is a problem with the abstraction: the unpleasant interface for getting a colour from git-config(1) is leaking through into gitsh. How about a `Gitsh::GitRepository#color` method? 67d405d\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/18820607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20643870", "body": "Possibly add:\n\n```\ngit commit -m \"Update INSTALL\" -- INSTALL\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20643870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20643925", "body": "Since `INSTALL` depends on the version number, and that's stored in a variable in the `Makefile` (after `./configure`), then making the `INSTALL` target depend on the `Makefile` would probably remove the need for this step.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20643925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22727730", "body": "Good point, I'll remove the extra branch from the conditional.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22727730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22730974", "body": "If the key doesn't exist, `#fetch` will yield to the block for the default value. In this case, the default value is `nil`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22730974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731540", "body": "I removed the `#[]` method, to avoid having a method that might return `nil`: This is one of the very few cases where a `nil` would be useful, and I thought it was better to be explicit and use the slightly odd looking `{ nil }` here, rather than keep the `#[]` method that might let `nil` values accidentally leak into places where they're not wanted.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731978", "body": "Good call. Done.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22732230", "body": "Yes, it's mostly to make the message clear: this is where the exception comes from originally with a message indicating that the variable we're looking for didn't match any Git configuration variables, but it's re-raised in `Environment#fetch` with a different message to make it clear that the variable didn't exist anywhere we looked for it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22732230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22732776", "body": "Good call. Extracted.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22732776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22734703", "body": "Oh, yes, good call.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22734703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22759517", "body": "Huh, I didn't know that. I'm learning a lot of en-US this week: I didn't know \u201cdonut\u201d was the en-US spelling of \u201cdoughnut\u201d until yesterday.\n\nI'm happy to leave this as is, I think the phrase is similar enough to be comprehensible.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22759517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22759544", "body": "Good call. I've called it `Gitsh::UnsetVariableError` instead, because I think that better captures the purpose.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22759544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22834892", "body": "It's used by the command classes to verify that their argument lists contain the correct number of arguments (e.g. [internal_command.rb:65](https://github.com/thoughtbot/gitsh/blob/5136aa62b1c2c6fd233bd97cac760b45de7326af/lib/gitsh/commands/internal_command.rb#L65)).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22834892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22861484", "body": "I like it. Done.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22861484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22971496", "body": "@hrs and I were both unhappy with this spec, but we weren't sure how to improve it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22971496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22972148", "body": "Good call. Done.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22972148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22972439", "body": "Good call. Done.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22972439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22972630", "body": "This project mocks with mocha for historical reasons (RSpec didn't have test spies when I started the project). You're the second or third person to be surprised by this, so I've opened an issue: #215\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22972630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23112063", "body": "Good idea.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23112063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23112073", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23112073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20410066", "body": "Looks like I should call `super`, and also return `self`. Good catch, thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20410066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20410213", "body": "Good call. Done.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20410213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20410217", "body": "Less code for me to maintain: sounds like a good idea.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20410217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20735853", "body": "Good call. Default removed in dc93658d421eb41e1c09318021118b157d543b07.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20735853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23182902", "body": "This line is how you say \u201cany single character except for `)`\u201d in the Parslet DSL.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23182902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23228213", "body": "I think I prefer it after the greeting: if there are commands in the rc file that produce output, it makes sense if that output appears after the greeting.\n\nFor example, here's my current `.gitshrc` file:\n\n```\n:set color.ui true\n\n:echo\nstatus\n:echo\nlog --oneline -n 1\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23228213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23228511", "body": "We need something more complete than stubbing for the integration specs.\n\nEven if our Ruby code was hitting a fake file system, any Git commands that are called in the integration specs would still read the user's real `.gitconfig` file from their real home directory. Since the contents of the `.gitconfig` can make a big difference to the output of Git commands, it would be hard to write tests that make assertions about output if the output was different on different systems.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23228511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23228697", "body": "Yes, it should. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23228697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230472", "body": "There should probably all use blocks, otherwise the defaults will be instantiated even when they're not used.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230621", "body": "Fixed in ce563af98ca1d575f89ab7e8475403f9127dda45. Thanks, Gabe.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230687", "body": "The `gitshrc_path` depends on the user's home directory, and one of the things that the `interactive` method does is switch to a fake home directory to avoid using a real `.gitconfig` file.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230749", "body": "Good call. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23232956", "body": "I was uncomfortable just leaving an empty rescue block. Do you think that\u2014and an implicit `nil`\u2014would be preferable to a potentially confusing unused value?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23232956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "scottluptowski": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/244", "title": "Aliasing internal gitsh commands", "body": "There doesn't seem to be a way to alias `:exit` within gitsh.\nNeither of these lines work when added to my gitconfig:\n\n```\ne = \":exit\"\ne = !\":exit\"\n```\n\nI would like to be able to type `e` to `:exit` gitsh. Is this by design or is there a way to alias the command?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dleve123": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/240", "title": "Error message scoped to `git`", "body": "A \"picture\" speaks a thousand words:\n\n``` bash\n$ gitsh\nextract-class master@ add\nNothing specified, nothing added.\nMaybe you wanted to say 'git add .'?\n```\n\nTo those that are unfamiliar with `git` and `gitsh`, this error message might be somewhat confusing as `git add .` leads to an error message.\n\nIf the maintainers are interesting in fixing this issue, I'm more than happy to help out.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pbrisbin": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/170", "title": "Automate posting PKGBUILD to AUR on release", "body": "Right now, a new PKGBUILD is generated via `make release` but it has to be manually bundled into a \"taurball\" and posted to the AUR.\n\nIn my apps, I automate this task via [aur-submit](https://github.com/pbrisbin/aur-submit). Example [here](https://github.com/pbrisbin/aurget/blob/master/Makefile#L27-28). This requires a tool called [mkaurball](https://github.com/falconindy/pkgbuild-introspection) though which is only available in Arch. It may be possible to port it to other OSs though (it's just a shell script IIRC).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29087354", "body": "It might be an [Arch-specific-requirement](https://wiki.archlinux.org/index.php/Pkgbuild#license) where the LICENSE should go. I'm not sure if `$PREFIX/share/licenses/$pkgname/LICENSE` is standard across everything, that means `make install` can't dictate or assume where to put it.\n\nI'll dig through some existing PKGBUILDs and see if they do as I've done or use some `./configure` option to specify the location.\n\nI assumed `./configure` would find and use the system ruby if present and of the needed version; the `depends` line in the PKGBUILD ensures it will be -- is there anything else required?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29087354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29090216", "body": "Ah, OK so the ruby thing requires some explanation....\n\nTo use this PKGBUILD as-is, the user _building_ the package would have to ensure that the system ruby was active when building. If this were an official package being built by an Arch maintainer and distributed pre-built to end-users, I would have no problem with this. These sorts of things are well-know duties to maintainers who build generic packages for distribution.\n\nHowever, since this is an unofficial package (at this point anyway) being placed on the [AUR](https://aur.archlinux.org), it will be both built and installed by the same end-user. It's likely that they would not know to activate the system ruby before building and may end up embedding an rvm/chruby-enabled ruby into gitsh.\n\nAt this point, I'd like to claim that user is in the same position as someone building from source (since they are) and should be required to know themselves that this may happen and to avoid it (both `RUBY='...' makepkg` and `chruby-exec system -- makepkg` should work fine).\n\nThere are existing ruby packages in the the AUR which suffer from this (ruby-bundler, for example) and the \"problem\" will only occur for someone using a ruby version-manager, which increases the chance that they can deal with this scenario themselves (as I do for ruby-bundler, which is a dependency of the heroku-toolbelt). I think a comment in the AUR package page could be sufficient.\n\nIt's part of the Arch philosophy to not put extraneous code or checks into things to protect users from themselves. So I'm hesitant to bloat the PKGBUILD. On the other hand, this may not be _too_ hairy to code around and it would probably avoid trouble for some users, so I'm not sure...\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29090216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29115590", "body": "To answer the first question, yes, separately `install`ing the LICENSE file is done quite frequently in Arch PKGBUILDs. I'd guess that installing a license is not commonly done via `make install` -- though, that doesn't answer if it _should_ be.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29115590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29211243", "body": "If the changes in #22 don't prove to be robust enough, and we decide to deal with it in packaging, I would advocate adding something like this to the PKGBUILD:\n\n``` bash\n# If the user hasn't defined a custom RUBY and the one returned by which is\n# not owned by the system ruby package...\nif [[ -z \"$RUBY\" && \"$(pacman -Qqo $(which ruby))\" != 'ruby' ]]; then\n  cat >&2 << EOF\ngitsh cannot be installed while a non-system ruby is active, etc, etc\n\nPlease activate system ruby or set the RUBY variable and try again.\nEOF\n\n  return 1 # aborts packaging\nfi\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29211243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29294712", "body": "Cool, thanks for the info -- I had forgotten about the `\\`-prefix plan. I should probably work on swapping my `clear` habit for `Ctrl-l` anyway, since that works more consistently overall.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29294712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29309175", "body": "I thought of that after opening the issue. As far as I can tell the completion system is just a bit naive. It completes all commands/options listed in help all the time, or remote info in some cases?\n\nThe zsh completion script is smart about when to complete what options, when to complete remote or local branches, present files, tracked files, indexed files, etc and includes aliases and completes them correctly too.\n\nI'd love to port all of that over, and would be willing to work on it myself.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29309175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29309964", "body": "Indeed, I have such an alias and I like the `gitsh`/`hubsh` idea since the usage would be completely analogous to what I do with `git`/`hub` and I would just set up the same sort of alias.\n\nMy reasoning for suggesting we only call `hub` on unrecognized commands is that `hub` is slower (slightly, but noticeably so) than `git`. Making things conditional such that `hub` is only called when needed is annoying in shell, thus the always-`hub` alias is preferable; however, since we're in ruby-land now, I thought maybe we could have that logic more elegantly.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29309964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29398849", "body": "Why do we need the colon?\n\n```\n@ project=rcm\n@ export foo.bar=1\n@ status\n(git -c foo.bar=1 status)\n@ project\n\"rcm\"\n@ foo.bar\n1\n@ flimflop\nUnrecognized error...\n```\n\nOtherwise, I'd favor explicit `:set` (or maybe `:let`?) and `:export` commands.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29398849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29399877", "body": "I understand the colon as disambiguator; however, I consider it a viable approach to just let user-defined statements shadow git-defined in the case of conflicts. If I do `commit=1`, then a bare `commit` will return `1` rather than run `git commit` -- I don't feel strongly at all either way, was just mentioning it as an option.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29399877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8268460", "body": "The former will output paths relative to `$(dirname $0)/vendor`. The latter will include it. I assume that matters.\n\nI'm curious why you need to (re-)echo the output for find.\n\nStyle nits (if anyone cares): don't mix backtick and `$( )` (and prefer `$( )`), quote all expansions (`\"$(dirname \"$0\")\"`)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8268460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8269899", "body": "> The echo is to convert from a list with one item on each line, to a list on a single line separated by spaces. If you know of a cleaner way of expressing that I'd love to make it a bit less magical.\n\nI don't, though I'd be curious to see if the consumer of `$vendorfiles` even cared that they're newline-separated or space-separated. Normally tools like these all use `$IFS` which is space, newline, or tab.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8269899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8273182", "body": "Ah gotcha, and you most likely can't use `echo gems/*` because the files are nested and `gems/**/*` is not portable.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8273182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "leifg": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/145", "title": "Wildcards don't seem to work correctly", "body": "In gitsh (version 0.5, without any special git binary) I get the following error:\n\n```\ndiff Gemfile*\n```\n\nresults in\n\n```\nfatal: ambiguous argument 'Gemfile*': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]'\n```\n\nHowever `git diff Gemfile*` on the shell works correctly\n\nAny ideas?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Haegin": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/100", "title": "Shell shortcuts like !$, !^ and !! don't work currently", "body": "Shell shortcuts such as !!, !$ and !^ are really quite useful on the shell and don't work in gitsh. Particularly useful is `diff path/to/file` followed by `add !$`. It'd be great if gitsh supported these shortcuts as well.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mike-burns": {"issues": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/67", "title": "Edit command in $VISUAL", "body": "I'd like to use ($VISUAL || $EDITOR || vi || ed) to edit a command.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/67/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8394084d7e9fb346c11772fe6cd3dd8a80d46aa0", "message": "Typo: charater -> character\n\nFound by Debian lintian.\n\nhttps://github.com/thoughtbot/apt/pull/1"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/f5be3e3b915b777674cb01b0260ef496789597eb", "message": "Use a non-recursive Makefile.\n\nRecursive Makefiles are less ideal [1] than iterative ones, for quite a few\nreasons. But the main driver for this move is as a simplification so that we\ncan concentrate on the ext directory separately from autotools.\n\nThis commit does not fix the distcheck target, but dist and check each work.\nSwitching to a non-recursive Makefile has changed the location where some\nfiles are installed. Rather than fighting with Automake to change their\ninstall locations, this commit also updates the program to look for them in\ntheir new homes.\n\n$prefix/share/gitsh/gems -> $prefix/share/gitsh/vendor/gems\n$prefix/share/gitsh/ruby/gitsh -> $prefix/share/gitsh/ruby/lib/gitsh\n\n[1]: http://aegis.sourceforge.net/auug97.pdf"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/0f69768470335c1750801e097855866b711dbea3", "message": "Link to thoughtbot's contributor code of conduct"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/32bc5b13db12d6004849847ba01a4ac03070b045", "message": "Commit the generated INSTALL documentation\n\nThe `INSTALL` file is generated from `INSTALL.in`; however, since it is\nthe installation guide, it is often read before the program is even\ndownloaded. For example, on GitHub we link to `INSTALL.in` from the\n`README.md`. Rather than recommend that people read a template of a\ndocumentation, we can instead simply add the generated documentation to\nthe repo."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/82ecab03b6d67b702e8e2c48812b981c786e517c", "message": "Add OpenBSD instructions\n\nRemoved the `On ` prefix in the instructions to reduce redundancy.\n\nThe gitsh port and package are in OpenBSD 5.7+, which is not yet\nreleased, so the instructions target -current. The package mirrors are\nnot even caught up yet but they hopefully will be soon.\n\nhttp://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/devel/gitsh/"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6af920065f4762665606bc2dc1c25594287f2d73", "message": "Support ruby21\n\nSome systems (e.g. OpenBSD) name their Ruby 2.1.x as `ruby21`. This is a\nsupported version, so handle it."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4ee77bfe0530da4ff4aed63cc62da594f95303a2", "message": "Use the check target to run tests\n\nThis provides for tighter integration into the autotools framework. More\ndetails: https://www.gnu.org/software/automake/manual/html_node/Tests.html#Tests\n\nInstead of using\n\n    rspec\n\nto run the full test suite, instead you use\n\n    make check\n\nFixes #126."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/edb5fcbc362f926aad0eaff2409af485fcb935e8", "message": "The tarball is for version 0.5"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e1e60663a4dbaa59943c6ed6f4aece0a0ca37a6a", "message": "Mention gh, which is faster than hub\n\nShowing `hub` in the example will cause people to try it with `hub`,\nwhich will lead to an unpleasant first experience due to `hub`'s speed.\nBy showing `gh` in the example, we hint at something better and help\npopularize the faster alternative.\n\nWe see this in FactoryGirl, where people complain that FG is slow merely\nbecause they write to the database often."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053221", "body": "I cannot think of a better way to do that. Ideas:\n- `select`\n- watching the FS - requires flushing\n\nLooks good to merge to get things started.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28053221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28707576", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28707576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28709242", "body": "Done. Muh freedom.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28709242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28801249", "body": "Yup, looks good to merge.\n\nWe'll have to find a better looking way to handle the empty command and comments (`#`), between interactive and non-interactive mode, ... later.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/28801249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131173", "body": "Also fun: something to make pairing easier.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29131173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29203883", "body": "Which programs output to stderr? All I could find was Java.\n\nI also found this: http://bugs.python.org/issue18338\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29203883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204598", "body": "I was bit by the `heroku` toolbelt this weekend. I broke my rvm ruby, system Ruby was fine, but:\n\n```\n~% head -1 =heroku\n#!/usr/bin/env ruby1.9.1\n```\n\nSo I'm in favor of only using system Ruby.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29204598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29205516", "body": "Portable: yup, as in it won't crash anywhere that I can think of.\n\nHowever, from FreeBSD:\n\n```\nzsh% env -i sh -c 'echo $PATH'\n/usr/bin:/bin\nzsh% echo $PATH\n/~home/mike/.bin:/home/mike/.local/bin:/home/mike/.bin:/home/mike/.local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/home/mike/bin:/home/mike/local/bin:/home/mike/.local/bin:/home/mike/local/bin:/home/mike/.local/bin\nzsh% which ruby\n/usr/local/bin/ruby\n```\n\nDo you have access to `$(PATH)`, or at least `$(SHELL)`, from within `configure.ac`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29205516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29206431", "body": "One further:\n\n```\nzsh% env -i /usr/local/bin/zsh -c 'echo $PATH'\n/bin:/usr/bin:/usr/ucb:/usr/local/bin\n```\n\nI don't even have a `/usr/ucb`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29206431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29391901", "body": "Will there also be a way to set a variable that is not exported to git?\n\n```\ngitsh@ :export gitsh.format=\"%p \"\n@ :set project=rcm\n@ add ${project}*tar.gz\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29391901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29393308", "body": "OK yeah, that'd be fine too, though a little inconsistent: \"you must precede your gitsh-specific command with `:` unless it contains other characters that could make it unambiguous\".\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29393308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29399400", "body": "@pbrisbin the issue is that we want to support two kids of statements: git-defined/user-defined statements, and gitsh statements. The first type are e.g. `commit`, `add`, but also `lg` and `up` (aliases), and the second are `:set`, `:exit`. Ideally these two will never conflict.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29399400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29698467", "body": "As discussed with George on a fika walk: the autotools shouldn't install parslet as part of the build process, but it should instead vendor parslet while making the dist tarball. Or something thereabouts.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/29698467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30118864", "body": "Definitely does what it says on the tin. No further thoughts: looks fine to merge.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30118864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30224794", "body": "The code looks good. Do it!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30224794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30308859", "body": "All the code is easy to follow and makes sense. Can't think of how to use make or auto\\* builtins to handle this.\n\nLooks good to merge.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30308859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32604708", "body": "We disagree on colors. How about splitting the color stuff out into a separate PR.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32604708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32606081", "body": "Should also have support for `..`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32606081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32606119", "body": "You're more than welcome to split this into two PRs, or support `..` in a separate PR.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32606119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32903453", "body": "Great!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/32903453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33171953", "body": "Good to merge!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33171953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33228947", "body": "Good find. Merge away!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33228947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33239943", "body": "Looks great.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33239943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33354942", "body": "- Re: cyan: I don't like adding things to the prompt that the user cannot add themselves.\n- Re: removing colors. Crazy refactoring idea: build the prompt as a data structure that responds to `#to_prompt`. This data structure changes based on whether color is enabled. For example:\n\n``` ruby\n\nPrompt.new(['%D', ' ', '%c', '%b', '%#', '%w'], color: true)\n\nclass Prompt\n  def self.new(fields, args)\n    if args[:color]\n      ColorPrompt.new(fields)\n    else\n      PlainPrompt.new(fields)\n    end\n  end\nend\n\nclass ColorPrompt\n\n  def initialize(fields)\n    @prompt_fields = fields\n  end\n\n  def to_prompt\n    # ...\n  end\n\n  private\n\n  attr_reader :prompt_fields\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33354942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33698906", "body": "We could merge this by removing the `#{Colors::CYAN_FG}` from the default prompt and only adding `%c` and `%w` for now. We can add custom colors post-1.0.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33698906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34046908", "body": "I'd like a `gitsh.greeting = false` option to disable it. (See also: `no-greeting` in gpg.conf(5).)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34046908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34440858", "body": "SImple, to the point, and it means I finally get `-sb`. Looks good to merge.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34440858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34441270", "body": "Looks good to merge.\n\n(If I were to bikeshed, I'd argue that Strunk & White would rather `showGreeting = false` than `noGreeting = true`. But this is also fine.)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34441270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34441836", "body": "https://www.debian.org/doc/manuals/distribute-deb/distribute-deb.html#non-native-packaging\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34441836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34625011", "body": "Should be usable as a sh-bang.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34625011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34764534", "body": "Writing a tiny C wrapper would also make #41 possible.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34764534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34765395", "body": "See also: http://www.in-ulm.de/~mascheck/various/shebang/ especially \"nterpreter itself as #! script\".\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34765395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35082052", "body": "Looks good to merge.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35082052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35082146", "body": "Good explanations. Good to merge.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35082146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35082795", "body": "@georgebrock that `#to_i` is fascinating. I tried this locally and it worked fine.\n\n@blainesch It's complicated.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35082795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35546175", "body": "@fuadsaud if you're using a GUI vim (gvim, MacVim), be sure your `$VISUAL` is set correctly: http://robots.thoughtbot.com/visual-ize-the-future\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35546175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35616225", "body": "There should be a `docs` file with the `README.md` listed, so that piece of documentation will be installed.\n\nUPDATE: nevermind, this is done by default.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35616225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35616266", "body": "@adrianlang thanks for starting on this.\n\nThis should be factored into the `release` make target, too.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35616266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35729480", "body": "@georgebrock it works under man-db 2.6.6 (Debian). If it works under OS X as well, it might be good to add it to the `distcheck` target, so you can catch things just before release.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35729480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35871458", "body": "How I got here: I was experimenting with a `vdiff` alias that would set the pager to gvim in a one-off. A major point behind a REPL for me is that I can experiment with things before formally defining them.\n\nThe alternative you suggested doesn't seem as appealing (though I can see a use for `:version`). It means that every time I need to use a git-wide option, such as `--bare` or `--man-path`, I need to look up the mapping of how to do this in gitsh.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35871458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35873342", "body": "I get this failure on 1.9.3 on master, too:\n\n```\n% ruby -v\nruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-linux]\n% \n% rspec\n........................../home/mike/gitsh/spec/support/fake_readline.rb:16: [BUG] Segmentation fault\nruby 2.0.0p353 (2013-11-22) [x86_64-linux-gnu]\n\n-- Control frame information -----------------------------------------------\nc:0009 p:---- s:0035 e:000034 CFUNC  :readline\nc:0008 p:0053 s:0030 e:000029 METHOD /home/mike/gitsh/spec/support/fake_readline.rb:16\nc:0007 p:0017 s:0025 e:000024 METHOD /home/mike/gitsh/lib/gitsh/readline_blank_filter.rb:5\nc:0006 p:0014 s:0020 e:000019 METHOD /home/mike/gitsh/lib/gitsh/cli.rb:64\nc:0005 p:0023 s:0016 e:000015 METHOD /home/mike/gitsh/lib/gitsh/cli.rb:54\nc:0004 p:0027 s:0012 e:000011 METHOD /home/mike/gitsh/lib/gitsh/cli.rb:43\nc:0003 p:0029 s:0009 e:000008 METHOD /home/mike/gitsh/lib/gitsh/cli.rb:31\nc:0002 p:0117 s:0006 e:000005 BLOCK  /home/mike/gitsh/spec/support/gitsh_runner.rb:46 [FINISH]\nc:0001 p:---- s:0002 e:000001 TOP    [FINISH]\n\n-- Ruby level backtrace information ----------------------------------------\n/home/mike/gitsh/spec/support/gitsh_runner.rb:46:in `block (2 levels) in run_interactive'\n/home/mike/gitsh/lib/gitsh/cli.rb:31:in `run'\n/home/mike/gitsh/lib/gitsh/cli.rb:43:in `run_interactive'\n/home/mike/gitsh/lib/gitsh/cli.rb:54:in `interactive_loop'\n/home/mike/gitsh/lib/gitsh/cli.rb:64:in `read_command'\n/home/mike/gitsh/lib/gitsh/readline_blank_filter.rb:5:in `readline'\n/home/mike/gitsh/spec/support/fake_readline.rb:16:in `readline'\n/home/mike/gitsh/spec/support/fake_readline.rb:16:in `readline'\n\n-- C level backtrace information -------------------------------------------\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x17783b) [0x7ff3b5ea283b]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x64b0a) [0x7ff3b5d8fb0a] vfscanf.c:1017\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(rb_bug+0xb3) [0x7ff3b5d90213] vfscanf.c:657\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x111ff6) [0x7ff3b5e3cff6] auth_des.c:106\n/lib/x86_64-linux-gnu/libpthread.so.0(+0xf210) [0x7ff3b5b1e210] ../nptl/sysdeps/pthread/funlockfile.c:29\n/lib/x86_64-linux-gnu/libc.so.6(cfree+0x14) [0x7ff3b4ea0454] malloc.c:2887\n/lib/x86_64-linux-gnu/libc.so.6(_IO_free_backup_area+0x1a) [0x7ff3b4e99e6a] genops.c:210\n/lib/x86_64-linux-gnu/libc.so.6(_IO_file_overflow+0x1d9) [0x7ff3b4e99619] fileops.c:850\n/lib/x86_64-linux-gnu/libc.so.6(_IO_file_xsputn+0xd1) [0x7ff3b4e98881] fileops.c:1333\n/lib/x86_64-linux-gnu/libc.so.6(fwrite+0x105) [0x7ff3b4e8e3e5] iofwrite.c:43\n/lib/x86_64-linux-gnu/libreadline.so.6(+0x2653d) [0x7ff3b378153d]\n/lib/x86_64-linux-gnu/libreadline.so.6(rl_redisplay+0x5b5) [0x7ff3b3782a25]\n/lib/x86_64-linux-gnu/libreadline.so.6(_rl_internal_char_cleanup+0x89) [0x7ff3b3771809]\n/lib/x86_64-linux-gnu/libreadline.so.6(readline_internal_char+0xc5) [0x7ff3b3772055]\n/lib/x86_64-linux-gnu/libreadline.so.6(readline+0x55) [0x7ff3b3772535]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(rb_protect+0xcb) [0x7ff3b5d94edb] printf-parse.h:86\n/usr/lib/x86_64-linux-gnu/ruby/2.0.0/readline.so(+0x46b5) [0x7ff3b39a66b5]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x161574) [0x7ff3b5e8c574]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x16df7e) [0x7ff3b5e98f7e]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x164a3c) [0x7ff3b5e8fa3c]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x169777) [0x7ff3b5e94777]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x16c7a6) [0x7ff3b5e977a6]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x16d1c6) [0x7ff3b5e981c6]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x16d20a) [0x7ff3b5e9820a]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x17ef85) [0x7ff3b5ea9f85]\n/usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0(+0x17f150) [0x7ff3b5eaa150]\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x7e0e) [0x7ff3b5b16e0e] pthread_create.c:311\n/lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7ff3b4f0b0fd] ../sysdeps/unix/sysv/linux/x86_64/clone.S:113\n\n-- Other runtime information -----------------------------------------------\n\n* Loaded script: /usr/local/bin/rspec\n\n* Loaded features:\n\n    0 enumerator.so\n    1 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/encdb.so\n    2 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/trans/transdb.so\n    3 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/rbconfig.rb\n    4 /usr/lib/ruby/2.0.0/rubygems/compatibility.rb\n    5 /usr/lib/ruby/2.0.0/rubygems/defaults.rb\n    6 /usr/lib/ruby/2.0.0/rubygems/deprecate.rb\n    7 /usr/lib/ruby/2.0.0/rubygems/errors.rb\n    8 /usr/lib/ruby/2.0.0/rubygems/version.rb\n    9 /usr/lib/ruby/2.0.0/rubygems/requirement.rb\n   10 /usr/lib/ruby/2.0.0/rubygems/platform.rb\n   11 /usr/lib/ruby/2.0.0/rubygems/specification.rb\n   12 /usr/lib/ruby/2.0.0/rubygems/exceptions.rb\n   13 /usr/lib/ruby/vendor_ruby/rubygems/defaults/operating_system.rb\n   14 /usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_gem.rb\n   15 /usr/lib/ruby/2.0.0/thread.rb\n   16 /usr/lib/ruby/2.0.0/monitor.rb\n   17 /usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb\n   18 /usr/lib/ruby/2.0.0/rubygems.rb\n   19 /usr/lib/ruby/2.0.0/rubygems/dependency.rb\n   20 /usr/lib/ruby/2.0.0/rubygems/path_support.rb\n   21 /usr/lib/ruby/2.0.0/set.rb\n   22 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/date_core.so\n   23 /usr/lib/ruby/2.0.0/date/format.rb\n   24 /usr/lib/ruby/2.0.0/date.rb\n   25 /usr/lib/ruby/2.0.0/time.rb\n   26 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/filter_manager.rb\n   27 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/dsl.rb\n   28 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/extensions/kernel.rb\n   29 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/extensions/instance_eval_with_args.rb\n   30 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/extensions/module_eval_with_args.rb\n   31 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/extensions/ordered.rb\n   32 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/deprecation.rb\n   33 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/backward_compatibility.rb\n   34 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/reporter.rb\n   35 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/metadata_hash_builder.rb\n   36 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/hooks.rb\n   37 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/memoized_helpers.rb\n   38 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/metadata.rb\n   39 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/pending.rb\n   40 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/formatters.rb\n   41 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/world.rb\n   42 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/etc.so\n   43 /usr/lib/ruby/2.0.0/fileutils.rb\n   44 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/backtrace_cleaner.rb\n   45 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/pathname.so\n   46 /usr/lib/ruby/2.0.0/pathname.rb\n   47 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/ruby_project.rb\n   48 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/formatters/deprecation_formatter.rb\n   49 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/configuration.rb\n   50 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/project_initializer.rb\n   51 /usr/lib/ruby/2.0.0/optparse.rb\n   52 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/option_parser.rb\n   53 /usr/lib/ruby/2.0.0/cgi/util.rb\n   54 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/strscan.so\n   55 /usr/lib/ruby/2.0.0/erb.rb\n   56 /usr/lib/ruby/2.0.0/shellwords.rb\n   57 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/configuration_options.rb\n   58 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/command_line.rb\n   59 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/runner.rb\n   60 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/example.rb\n   61 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/shared_example_group/collection.rb\n   62 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/shared_example_group.rb\n   63 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/example_group.rb\n   64 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/version.rb\n   65 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core.rb\n   66 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/autorun.rb\n   67 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/base.rb\n   68 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/equals.rb\n   69 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/object.rb\n   70 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/all_of.rb\n   71 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/any_of.rb\n   72 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/any_parameters.rb\n   73 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/anything.rb\n   74 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/has_entry.rb\n   75 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/has_entries.rb\n   76 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/has_key.rb\n   77 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/has_value.rb\n   78 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/includes.rb\n   79 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/instance_of.rb\n   80 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/is_a.rb\n   81 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/kind_of.rb\n   82 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/not.rb\n   83 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/optionally.rb\n   84 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/regexp_matches.rb\n   85 /usr/lib/ruby/2.0.0/psych/syntax_error.rb\n   86 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/psych.so\n   87 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/stringio.so\n   88 /usr/lib/ruby/2.0.0/psych/nodes/node.rb\n   89 /usr/lib/ruby/2.0.0/psych/nodes/stream.rb\n   90 /usr/lib/ruby/2.0.0/psych/nodes/document.rb\n   91 /usr/lib/ruby/2.0.0/psych/nodes/sequence.rb\n   92 /usr/lib/ruby/2.0.0/psych/nodes/scalar.rb\n   93 /usr/lib/ruby/2.0.0/psych/nodes/mapping.rb\n   94 /usr/lib/ruby/2.0.0/psych/nodes/alias.rb\n   95 /usr/lib/ruby/2.0.0/psych/nodes.rb\n   96 /usr/lib/ruby/2.0.0/psych/streaming.rb\n   97 /usr/lib/ruby/2.0.0/psych/visitors/visitor.rb\n   98 /usr/lib/ruby/2.0.0/psych/scalar_scanner.rb\n   99 /usr/lib/ruby/2.0.0/psych/visitors/to_ruby.rb\n  100 /usr/lib/ruby/2.0.0/psych/visitors/emitter.rb\n  101 /usr/lib/ruby/2.0.0/psych/visitors/yaml_tree.rb\n  102 /usr/lib/ruby/2.0.0/psych/json/ruby_events.rb\n  103 /usr/lib/ruby/2.0.0/psych/visitors/json_tree.rb\n  104 /usr/lib/ruby/2.0.0/psych/visitors/depth_first.rb\n  105 /usr/lib/ruby/2.0.0/psych/visitors.rb\n  106 /usr/lib/ruby/2.0.0/psych/handler.rb\n  107 /usr/lib/ruby/2.0.0/psych/tree_builder.rb\n  108 /usr/lib/ruby/2.0.0/psych/parser.rb\n  109 /usr/lib/ruby/2.0.0/psych/omap.rb\n  110 /usr/lib/ruby/2.0.0/psych/set.rb\n  111 /usr/lib/ruby/2.0.0/psych/coder.rb\n  112 /usr/lib/ruby/2.0.0/psych/core_ext.rb\n  113 /usr/lib/ruby/2.0.0/psych/deprecated.rb\n  114 /usr/lib/ruby/2.0.0/psych/stream.rb\n  115 /usr/lib/ruby/2.0.0/psych/json/yaml_events.rb\n  116 /usr/lib/ruby/2.0.0/psych/json/tree_builder.rb\n  117 /usr/lib/ruby/2.0.0/psych/json/stream.rb\n  118 /usr/lib/ruby/2.0.0/psych/handlers/document_stream.rb\n  119 /usr/lib/ruby/2.0.0/psych.rb\n  120 /usr/lib/ruby/2.0.0/yaml.rb\n  121 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/responds_with.rb\n  122 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/yaml_equivalent.rb\n  123 /usr/lib/ruby/2.0.0/uri/common.rb\n  124 /usr/lib/ruby/2.0.0/uri/generic.rb\n  125 /usr/lib/ruby/2.0.0/uri/ftp.rb\n  126 /usr/lib/ruby/2.0.0/uri/http.rb\n  127 /usr/lib/ruby/2.0.0/uri/https.rb\n  128 /usr/lib/ruby/2.0.0/uri/ldap.rb\n  129 /usr/lib/ruby/2.0.0/uri/ldaps.rb\n  130 /usr/lib/ruby/2.0.0/uri/mailto.rb\n  131 /usr/lib/ruby/2.0.0/uri.rb\n  132 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers/query_string.rb\n  133 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameter_matchers.rb\n  134 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/central.rb\n  135 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/metaclass-0.0.1/lib/metaclass/version.rb\n  136 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/metaclass-0.0.1/lib/metaclass/object_methods.rb\n  137 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/metaclass-0.0.1/lib/metaclass.rb\n  138 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/method_matcher.rb\n  139 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/inspect.rb\n  140 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/parameters_matcher.rb\n  141 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/expectation_error.rb\n  142 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/is_a.rb\n  143 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/single_return_value.rb\n  144 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/return_values.rb\n  145 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/exception_raiser.rb\n  146 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/thrower.rb\n  147 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/no_yields.rb\n  148 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/single_yield.rb\n  149 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/multiple_yields.rb\n  150 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/yield_parameters.rb\n  151 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/in_state_ordering_constraint.rb\n  152 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/change_state_side_effect.rb\n  153 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/cardinality.rb\n  154 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/expectation.rb\n  155 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/expectation_list.rb\n  156 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/names.rb\n  157 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/unexpected_invocation.rb\n  158 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/argument_iterator.rb\n  159 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/backtrace_filter.rb\n  160 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/expectation_error_factory.rb\n  161 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/mock.rb\n  162 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/state_machine.rb\n  163 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/logger.rb\n  164 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/configuration.rb\n  165 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/stubbing_error.rb\n  166 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/mockery.rb\n  167 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/hooks.rb\n  168 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/sequence.rb\n  169 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/class_method.rb\n  170 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/instance_method.rb\n  171 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/object_methods.rb\n  172 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/module_method.rb\n  173 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/module_methods.rb\n  174 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/any_instance_method.rb\n  175 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/class_methods.rb\n  176 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/mocha-0.14.0/lib/mocha/api.rb\n  177 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/bourne-1.5.0/lib/bourne/mock.rb\n  178 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/bourne-1.5.0/lib/bourne/invocation.rb\n  179 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/bourne-1.5.0/lib/bourne/mockery.rb\n  180 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/bourne-1.5.0/lib/bourne/api.rb\n  181 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/bourne-1.5.0/lib/bourne.rb\n  182 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/extensions/array.rb\n  183 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/extensions/object.rb\n  184 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/extensions.rb\n  185 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/extensions/instance_eval_with_args.rb\n  186 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/pretty.rb\n  187 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/built_in/base_matcher.rb\n  188 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/built_in.rb\n  189 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/matcher.rb\n  190 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/operator_matcher.rb\n  191 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/be_close.rb\n  192 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/generated_descriptions.rb\n  193 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/method_missing.rb\n  194 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/compatibility.rb\n  195 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/dsl.rb\n  196 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/test_unit_integration.rb\n  197 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/built_in/match_array.rb\n  198 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers.rb\n  199 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/expectation_target.rb\n  200 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/syntax.rb\n  201 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/configuration.rb\n  202 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/fail_with.rb\n  203 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/errors.rb\n  204 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/deprecation.rb\n  205 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/handler.rb\n  206 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/version.rb\n  207 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/diff-lcs-1.2.4/lib/diff/lcs/change.rb\n  208 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/diff-lcs-1.2.4/lib/diff/lcs/callbacks.rb\n  209 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/diff-lcs-1.2.4/lib/diff/lcs/internals.rb\n  210 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/diff-lcs-1.2.4/lib/diff/lcs.rb\n  211 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/diff-lcs-1.2.4/lib/diff/lcs/block.rb\n  212 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/diff-lcs-1.2.4/lib/diff/lcs/hunk.rb\n  213 /usr/lib/ruby/2.0.0/prettyprint.rb\n  214 /usr/lib/ruby/2.0.0/pp.rb\n  215 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations/differ.rb\n  216 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/expectations.rb\n  217 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/rig/rspec.rb\n  218 /home/mike/gitsh/lib/gitsh/module_delegator.rb\n  219 /home/mike/gitsh/spec/support/fake_readline.rb\n  220 /home/mike/gitsh/spec/support/file_system.rb\n  221 /home/mike/gitsh/spec/support/parser.rb\n  222 /home/mike/gitsh/lib/gitsh/colors.rb\n  223 /home/mike/gitsh/spec/support/colors.rb\n  224 /home/mike/gitsh/spec/support/delegate_matcher.rb\n  225 /usr/lib/ruby/2.0.0/delegate.rb\n  226 /usr/lib/ruby/2.0.0/tmpdir.rb\n  227 /usr/lib/ruby/2.0.0/tempfile.rb\n  228 /usr/lib/x86_64-linux-gnu/ruby/2.0.0/readline.so\n  229 /home/mike/gitsh/lib/gitsh/internal_command.rb\n  230 /home/mike/gitsh/lib/gitsh/completer.rb\n  231 /usr/lib/ruby/2.0.0/open3.rb\n  232 /home/mike/gitsh/lib/gitsh/git_repository.rb\n  233 /home/mike/gitsh/lib/gitsh/environment.rb\n  234 /home/mike/gitsh/lib/gitsh/history.rb\n  235 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/slice.rb\n  236 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/cause.rb\n  237 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/source/line_cache.rb\n  238 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/source.rb\n  239 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/can_flatten.rb\n  240 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/context.rb\n  241 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/dsl.rb\n  242 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/base.rb\n  243 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/named.rb\n  244 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/lookahead.rb\n  245 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/alternative.rb\n  246 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/sequence.rb\n  247 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/repetition.rb\n  248 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/re.rb\n  249 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/str.rb\n  250 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/entity.rb\n  251 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/capture.rb\n  252 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/dynamic.rb\n  253 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms/scope.rb\n  254 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/atoms.rb\n  255 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/pattern.rb\n  256 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/pattern/binding.rb\n  257 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/transform.rb\n  258 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/parser.rb\n  259 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/error_reporter/tree.rb\n  260 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/error_reporter/deepest.rb\n  261 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/error_reporter.rb\n  262 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/scope.rb\n  263 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet.rb\n  264 /home/mike/gitsh/lib/gitsh/git_command.rb\n  265 /home/mike/gitsh/lib/gitsh/transformer.rb\n  266 /home/mike/gitsh/lib/gitsh/parser.rb\n  267 /home/mike/gitsh/lib/gitsh/interpreter.rb\n  268 /home/mike/gitsh/lib/gitsh/prompter.rb\n  269 /home/mike/gitsh/lib/gitsh/readline_blank_filter.rb\n  270 /home/mike/gitsh/lib/gitsh/version.rb\n  271 /home/mike/gitsh/lib/gitsh/cli.rb\n  272 /home/mike/gitsh/spec/support/gitsh_runner.rb\n  273 /home/mike/gitsh/spec/support/working_directory.rb\n  274 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/mocking/with_mocha.rb\n  275 /home/mike/gitsh/spec/spec_helper.rb\n  276 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/formatters/helpers.rb\n  277 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/formatters/base_formatter.rb\n  278 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/formatters/base_text_formatter.rb\n  279 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-core-2.14.7/lib/rspec/core/formatters/progress_formatter.rb\n  280 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/built_in/raise_error.rb\n  281 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/built_in/be.rb\n  282 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/built_in/eq.rb\n  283 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/rspec-expectations-2.14.3/lib/rspec/matchers/built_in/match.rb\n  284 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/blankslate-2.1.2.4/lib/blankslate.rb\n  285 /home/mike/.rvm/gems/ruby-1.9.3-p484/gems/parslet-1.5.0/lib/parslet/transform/context.rb\n\n* Process memory map:\n\n00400000-00401000 r-xp 00000000 08:01 25690415                           /usr/bin/ruby2.0\n00600000-00601000 r--p 00000000 08:01 25690415                           /usr/bin/ruby2.0\n00601000-00602000 rw-p 00001000 08:01 25690415                           /usr/bin/ruby2.0\n019d0000-02ac4000 rw-p 00000000 00:00 0                                  [heap]\n7ff3a0000000-7ff3a0077000 rw-p 00000000 00:00 0 \n7ff3a0077000-7ff3a4000000 ---p 00000000 00:00 0 \n7ff3a4000000-7ff3a4072000 rw-p 00000000 00:00 0 \n7ff3a4072000-7ff3a8000000 ---p 00000000 00:00 0 \n7ff3a8000000-7ff3a8079000 rw-p 00000000 00:00 0 \n7ff3a8079000-7ff3ac000000 ---p 00000000 00:00 0 \n7ff3ac000000-7ff3ac63a000 rw-p 00000000 00:00 0 \n7ff3ac63a000-7ff3b0000000 ---p 00000000 00:00 0 \n7ff3b28ef000-7ff3b2904000 r-xp 00000000 08:01 7078741                    /lib/x86_64-linux-gnu/libgcc_s.so.1\n7ff3b2904000-7ff3b2b04000 ---p 00015000 08:01 7078741                    /lib/x86_64-linux-gnu/libgcc_s.so.1\n7ff3b2b04000-7ff3b2b05000 rw-p 00015000 08:01 7078741                    /lib/x86_64-linux-gnu/libgcc_s.so.1\n7ff3b2b05000-7ff3b2b06000 ---p 00000000 00:00 0 \n7ff3b2b06000-7ff3b2d07000 rw-p 00000000 00:00 0 \n7ff3b2d07000-7ff3b2d08000 ---p 00000000 00:00 0 \n7ff3b2d08000-7ff3b2f09000 rw-p 00000000 00:00 0 \n7ff3b2f09000-7ff3b2f0a000 ---p 00000000 00:00 0 \n7ff3b2f0a000-7ff3b310b000 rw-p 00000000 00:00 0 \n7ff3b310b000-7ff3b310c000 ---p 00000000 00:00 0 \n7ff3b310c000-7ff3b330d000 rw-p 00000000 00:00 0 \n7ff3b330d000-7ff3b3332000 r-xp 00000000 08:01 7078713                    /lib/x86_64-linux-gnu/libtinfo.so.5.9\n7ff3b3332000-7ff3b3532000 ---p 00025000 08:01 7078713                    /lib/x86_64-linux-gnu/libtinfo.so.5.9\n7ff3b3532000-7ff3b3536000 r--p 00025000 08:01 7078713                    /lib/x86_64-linux-gnu/libtinfo.so.5.9\n7ff3b3536000-7ff3b3537000 rw-p 00029000 08:01 7078713                    /lib/x86_64-linux-gnu/libtinfo.so.5.9\n7ff3b3537000-7ff3b355a000 r-xp 00000000 08:01 7078742                    /lib/x86_64-linux-gnu/libncurses.so.5.9\n7ff3b355a000-7ff3b3759000 ---p 00023000 08:01 7078742                    /lib/x86_64-linux-gnu/libncurses.so.5.9\n7ff3b3759000-7ff3b375a000 r--p 00022000 08:01 7078742                    /lib/x86_64-linux-gnu/libncurses.so.5.9\n7ff3b375a000-7ff3b375b000 rw-p 00023000 08:01 7078742                    /lib/x86_64-linux-gnu/libncurses.so.5.9\n7ff3b375b000-7ff3b3798000 r-xp 00000000 08:01 7078790                    /lib/x86_64-linux-gnu/libreadline.so.6.2\n7ff3b3798000-7ff3b3998000 ---p 0003d000 08:01 7078790                    /lib/x86_64-linux-gnu/libreadline.so.6.2\n7ff3b3998000-7ff3b399a000 r--p 0003d000 08:01 7078790                    /lib/x86_64-linux-gnu/libreadline.so.6.2\n7ff3b399a000-7ff3b39a0000 rw-p 0003f000 08:01 7078790                    /lib/x86_64-linux-gnu/libreadline.so.6.2\n7ff3b39a0000-7ff3b39a2000 rw-p 00000000 00:00 0 \n7ff3b39a2000-7ff3b39a9000 r-xp 00000000 08:01 660080                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/readline.so\n7ff3b39a9000-7ff3b3ba8000 ---p 00007000 08:01 660080                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/readline.so\n7ff3b3ba8000-7ff3b3ba9000 r--p 00006000 08:01 660080                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/readline.so\n7ff3b3ba9000-7ff3b3baa000 rw-p 00007000 08:01 660080                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/readline.so\n7ff3b3baa000-7ff3b3bb1000 r-xp 00000000 08:01 660074                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/stringio.so\n7ff3b3bb1000-7ff3b3db0000 ---p 00007000 08:01 660074                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/stringio.so\n7ff3b3db0000-7ff3b3db1000 r--p 00006000 08:01 660074                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/stringio.so\n7ff3b3db1000-7ff3b3db2000 rw-p 00007000 08:01 660074                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/stringio.so\n7ff3b3db2000-7ff3b3dd1000 r-xp 00000000 08:01 25692837                   /usr/lib/x86_64-linux-gnu/libyaml-0.so.2.0.2\n7ff3b3dd1000-7ff3b3fd0000 ---p 0001f000 08:01 25692837                   /usr/lib/x86_64-linux-gnu/libyaml-0.so.2.0.2\n7ff3b3fd0000-7ff3b3fd1000 r--p 0001e000 08:01 25692837                   /usr/lib/x86_64-linux-gnu/libyaml-0.so.2.0.2\n7ff3b3fd1000-7ff3b3fd2000 rw-p 0001f000 08:01 25692837                   /usr/lib/x86_64-linux-gnu/libyaml-0.so.2.0.2\n7ff3b3fd2000-7ff3b3fd8000 r-xp 00000000 08:01 660083                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/psych.so\n7ff3b3fd8000-7ff3b41d7000 ---p 00006000 08:01 660083                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/psych.so\n7ff3b41d7000-7ff3b41d8000 r--p 00005000 08:01 660083                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/psych.so\n7ff3b41d8000-7ff3b41d9000 rw-p 00006000 08:01 660083                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/psych.so\n7ff3b41d9000-7ff3b41de000 r-xp 00000000 08:01 660073                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/strscan.so\n7ff3b41de000-7ff3b43dd000 ---p 00005000 08:01 660073                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/strscan.so\n7ff3b43dd000-7ff3b43de000 r--p 00004000 08:01 660073                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/strscan.so\n7ff3b43de000-7ff3b43df000 rw-p 00005000 08:01 660073                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/strscan.so\n7ff3b43df000-7ff3b43e5000 r-xp 00000000 08:01 660069                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/pathname.so\n7ff3b43e5000-7ff3b45e4000 ---p 00006000 08:01 660069                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/pathname.so\n7ff3b45e4000-7ff3b45e5000 r--p 00005000 08:01 660069                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/pathname.so\n7ff3b45e5000-7ff3b45e6000 rw-p 00006000 08:01 660069                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/pathname.so\n7ff3b45e6000-7ff3b45e9000 r-xp 00000000 08:01 659988                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/etc.so\n7ff3b45e9000-7ff3b47e8000 ---p 00003000 08:01 659988                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/etc.so\n7ff3b47e8000-7ff3b47e9000 r--p 00002000 08:01 659988                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/etc.so\n7ff3b47e9000-7ff3b47ea000 rw-p 00003000 08:01 659988                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/etc.so\n7ff3b47ea000-7ff3b4818000 r-xp 00000000 08:01 660078                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/date_core.so\n7ff3b4818000-7ff3b4a18000 ---p 0002e000 08:01 660078                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/date_core.so\n7ff3b4a18000-7ff3b4a19000 r--p 0002e000 08:01 660078                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/date_core.so\n7ff3b4a19000-7ff3b4a1a000 rw-p 0002f000 08:01 660078                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/date_core.so\n7ff3b4a1a000-7ff3b4a1b000 rw-p 00000000 00:00 0 \n7ff3b4a1b000-7ff3b4a1d000 r-xp 00000000 08:01 660046                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/trans/transdb.so\n7ff3b4a1d000-7ff3b4c1d000 ---p 00002000 08:01 660046                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/trans/transdb.so\n7ff3b4c1d000-7ff3b4c1e000 r--p 00002000 08:01 660046                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/trans/transdb.so\n7ff3b4c1e000-7ff3b4c1f000 rw-p 00003000 08:01 660046                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/trans/transdb.so\n7ff3b4c1f000-7ff3b4c21000 r-xp 00000000 08:01 660022                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/encdb.so\n7ff3b4c21000-7ff3b4e20000 ---p 00002000 08:01 660022                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/encdb.so\n7ff3b4e20000-7ff3b4e21000 r--p 00001000 08:01 660022                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/encdb.so\n7ff3b4e21000-7ff3b4e22000 rw-p 00002000 08:01 660022                     /usr/lib/x86_64-linux-gnu/ruby/2.0.0/enc/encdb.so\n7ff3b4e22000-7ff3b4fc5000 r-xp 00000000 08:01 7079010                    /lib/x86_64-linux-gnu/libc-2.17.so\n7ff3b4fc5000-7ff3b51c4000 ---p 001a3000 08:01 7079010                    /lib/x86_64-linux-gnu/libc-2.17.so\n7ff3b51c4000-7ff3b51c8000 r--p 001a2000 08:01 7079010                    /lib/x86_64-linux-gnu/libc-2.17.so\n7ff3b51c8000-7ff3b51ca000 rw-p 001a6000 08:01 7079010                    /lib/x86_64-linux-gnu/libc-2.17.so\n7ff3b51ca000-7ff3b51ce000 rw-p 00000000 00:00 0 \n7ff3b51ce000-7ff3b52ca000 r-xp 00000000 08:01 7083158                    /lib/x86_64-linux-gnu/libm-2.17.so\n7ff3b52ca000-7ff3b54ca000 ---p 000fc000 08:01 7083158                    /lib/x86_64-linux-gnu/libm-2.17.so\n7ff3b54ca000-7ff3b54cb000 r--p 000fc000 08:01 7083158                    /lib/x86_64-linux-gnu/libm-2.17.so\n7ff3b54cb000-7ff3b54cc000 rw-p 000fd000 08:01 7083158                    /lib/x86_64-linux-gnu/libm-2.17.so\n7ff3b54cc000-7ff3b54d4000 r-xp 00000000 08:01 7083157                    /lib/x86_64-linux-gnu/libcrypt-2.17.so\n7ff3b54d4000-7ff3b56d3000 ---p 00008000 08:01 7083157                    /lib/x86_64-linux-gnu/libcrypt-2.17.so\n7ff3b56d3000-7ff3b56d4000 r--p 00007000 08:01 7083157                    /lib/x86_64-linux-gnu/libcrypt-2.17.so\n7ff3b56d4000-7ff3b56d5000 rw-p 00008000 08:01 7083157                    /lib/x86_64-linux-gnu/libcrypt-2.17.so\n7ff3b56d5000-7ff3b5703000 rw-p 00000000 00:00 0 \n7ff3b5703000-7ff3b5706000 r-xp 00000000 08:01 7078815                    /lib/x86_64-linux-gnu/libdl-2.17.so\n7ff3b5706000-7ff3b5905000 ---p 00003000 08:01 7078815                    /lib/x86_64-linux-gnu/libdl-2.17.so\n7ff3b5905000-7ff3b5906000 r--p 00002000 08:01 7078815                    /lib/x86_64-linux-gnu/libdl-2.17.so\n7ff3b5906000-7ff3b5907000 rw-p 00003000 08:01 7078815                    /lib/x86_64-linux-gnu/libdl-2.17.so\n7ff3b5907000-7ff3b590e000 r-xp 00000000 08:01 7078702                    /lib/x86_64-linux-gnu/librt-2.17.so\n7ff3b590e000-7ff3b5b0d000 ---p 00007000 08:01 7078702                    /lib/x86_64-linux-gnu/librt-2.17.so\n7ff3b5b0d000-7ff3b5b0e000 r--p 00006000 08:01 7078702                    /lib/x86_64-linux-gnu/librt-2.17.so\n7ff3b5b0e000-7ff3b5b0f000 rw-p 00007000 08:01 7078702                    /lib/x86_64-linux-gnu/librt-2.17.so\n7ff3b5b0f000-7ff3b5b26000 r-xp 00000000 08:01 7078758                    /lib/x86_64-linux-gnu/libpthread-2.17.so\n7ff3b5b26000-7ff3b5d25000 ---p 00017000 08:01 7078758                    /lib/x86_64-linux-gnu/libpthread-2.17.so\n7ff3b5d25000-7ff3b5d26000 r--p 00016000 08:01 7078758                    /lib/x86_64-linux-gnu/libpthread-2.17.so\n7ff3b5d26000-7ff3b5d27000 rw-p 00017000 08:01 7078758                    /lib/x86_64-linux-gnu/libpthread-2.17.so\n7ff3b5d27000-7ff3b5d2b000 rw-p 00000000 00:00 0 \n7ff3b5d2b000-7ff3b5f5e000 r-xp 00000000 08:01 25690406                   /usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0.0\n7ff3b5f5e000-7ff3b615e000 ---p 00233000 08:01 25690406                   /usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0.0\n7ff3b615e000-7ff3b6166000 rw-p 00233000 08:01 25690406                   /usr/lib/x86_64-linux-gnu/libruby-2.0.so.2.0.0\n7ff3b6166000-7ff3b6186000 rw-p 00000000 00:00 0 \n7ff3b6186000-7ff3b61a7000 r-xp 00000000 08:01 7078754                    /lib/x86_64-linux-gnu/ld-2.17.so\n7ff3b6238000-7ff3b6339000 rw-p 00000000 00:00 0 \n7ff3b6339000-7ff3b6378000 r--p 00000000 08:01 29625959                   /usr/lib/locale/wo_SN/LC_CTYPE\n7ff3b6378000-7ff3b637d000 rw-p 00000000 00:00 0 \n7ff3b6394000-7ff3b6395000 rw-p 00000000 00:00 0 \n7ff3b6397000-7ff3b639a000 rw-p 00000000 00:00 0 \n7ff3b639a000-7ff3b639b000 ---p 00000000 00:00 0 \n7ff3b639b000-7ff3b639e000 rw-p 00000000 00:00 0                          [stack:22132]\n7ff3b639e000-7ff3b63a5000 r--s 00000000 08:01 25699366                   /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache\n7ff3b63a5000-7ff3b63a7000 rw-p 00000000 00:00 0 \n7ff3b63a7000-7ff3b63a8000 r--p 00021000 08:01 7078754                    /lib/x86_64-linux-gnu/ld-2.17.so\n7ff3b63a8000-7ff3b63aa000 rw-p 00022000 08:01 7078754                    /lib/x86_64-linux-gnu/ld-2.17.so\n7fff79b8a000-7fff79bac000 rw-p 00000000 00:00 0                          [stack]\n7fff79bfe000-7fff79c00000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\n\n[NOTE]\nYou may have encountered a bug in the Ruby interpreter or extension libraries.\nBug reports are welcome.\nFor details: http://www.ruby-lang.org/bugreport.html\n\nzsh: abort      rspec\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35873342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35873585", "body": "Of note: TravisCI and I use GNU Readline:\n\n```\n% dpkg -s libreadline6-dev\nPackage: libreadline6-dev\nStatus: install ok installed\nPriority: optional\nSection: libdevel\nInstalled-Size: 709\nMaintainer: Matthias Klose <doko@debian.org>\nArchitecture: amd64\nMulti-Arch: same\nSource: readline6\nVersion: 6.2+dfsg-0.1\nDepends: libreadline6 (= 6.2+dfsg-0.1), libtinfo-dev, dpkg (>= 1.15.4) | install-info\nConflicts: libreadline-gplv2-dev, libreadline5-dev\nDescription: GNU readline and history libraries, development files\n The GNU readline library aids in the consistency of user interface\n across discrete programs that need to provide a command line\n interface.\n .\n The GNU history library provides a consistent user interface for\n recalling lines of previously typed input.\n .\n This package contains development files and the readline documentation\n in info format.\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35873585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35873953", "body": "This looks good and accurate.\n\nFor those who are unfamiliar with the Debian process, such as @georgebrock , it'd be good to update `CONTRIBUTING.md` with instructions on how to build the `deb`.\n\nHowever, I am working on automating this in rcm - thoughtbot/rcm#40 - with the goal of bringing this back into gitsh.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35873953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35874099", "body": "Ah I see. Looks good.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35874099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35917512", "body": "Closing in favor of #104.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35917512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/6911130", "body": "I honestly don't know this answer: does `$PWD` need double quotes around it to prevent shenanigans with spaces in filenames? Does this work if built from the `/home/george/awesome stuff/gitsh` directory (with a space)?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/6911130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192462", "body": "```\nmap(&:inspect)\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192552", "body": "Can commands start with a space, too?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192565", "body": "Is it possible to write this file in the other direction: the `root` at the top, and the insignificant things (`space`, `identifier`) at the bottom?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8192565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193024", "body": "I want to start a campaign to get your nickname internationally recognized as Sysexits.\n\nGeorge \"Sysexits\" Brocklehurst.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8193024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8261933", "body": "That subshell just took me down a fascinating and pedantic history lesson. Apparently there is no fully-compatible way of using `head` to get the first line from stdin!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8261933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8262007", "body": "Is this different from:\n\n```\nfind `dirname $0`/vendor/gems -type f -print\n```\n\n?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8262007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964565", "body": "Emphasize the `temporarily` - make it very clear that these are not persisted beyond this session.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964692", "body": "There's some common code here. Perhaps a matcher would provide a good abstraction?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964798", "body": "If you use `#has_key?` it more closely matches the semantics of a variable being set or unset. Plus it can remove the `nil` check.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8964798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965059", "body": "For documentation purposes, would be useful to move 8-15 into a private method with a descriptive name. `chdir_and_allow_nesting` or `potentially_nested_chdir` or the like.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965102", "body": "Lines 7-10 are irrelevant.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965127", "body": "This could potentially raise (maybe?) if the directory disappears, even between checking whether it exists and calling the method.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965210", "body": "`File.expand_path` exists, but it doesn't solve the issue of showing results that start with `~`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965216", "body": "`File.expand_path`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/8965216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9042686", "body": "How about:\n\n```\ndef expanded_path\n  @expanded_path ||= raw_expanded_path\nend\n\ndef raw_expanded_path\n   if original_path.end_with?('/')\n     File.expand_path(original_path) + '/'\n   else\n     File.expand_path(original_path)\n   end\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9042686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9042702", "body": "I tend to use `@_expanded_path` for memoizing i-vars, so they're not confused with instance-accessible i-vars.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9042702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9070852", "body": "I'm not so into assigning a variable to the result of an `if`. Not opposed, just not my style.\n\nDoes this need to be memoized? How slow is the `#end_with?` method?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9070852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9131341", "body": "How about `file` instead of `f`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9131341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9131479", "body": "Instead of checking for existence, you could `File.read` and handle the `Errno::ENOENT`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9131479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9144412", "body": "I feel like dropping the `-c` will become a debugging point in the future. It will be nice to know why this does this for when another dev stumbles across this and needs to know how to fix her failing test.\n\n```\n# Drop -c ... arguments so we can ignore changes to the history file in the test.\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9144412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9534163", "body": "http://www.fileformat.info/info/unicode/char/23ce/index.htm\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9534163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9747654", "body": "What about passing just `@git_command` instead of all of `self`? This reduces the interface requirements.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9747654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9986623", "body": "It seems that `Dir.chdir` produces `0` on success, which is a truthy value. So this `true` isn't completely needed.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9986623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9986854", "body": "This description seems off.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9986854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9986884", "body": "Code style: we have not been putting a newline after `describe`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9986884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9986900", "body": "Code style: no extra newline after `module` or `class`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9986900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9987008", "body": "I'm not entirely convinced on the usecase for this. When would I want to run a command without care for whether the prior command worked?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9987008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9994169", "body": "Leaving @georgebrock as the decision-maker on this.\n\nDiscussed with him over lunch: `set -e` and what that means for `;` in sh, and this was in relation to my suggestion to him: treat `;` as a synonym for `&&`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9994169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10002171", "body": "The `or_operation` and `and_operation` are subjectively in the wrong order. `or_operation` depends on `and_operation`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10002171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10002200", "body": "George came up with a use case: `commit -m \"All done\" && (push github ; push heroku)`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10002200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10071034", "body": "Gave it a quick look, seems correct. Merge away!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10071034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10078978", "body": "You need to make sure `$?` exists before calling methods on it, apparently.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10078978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10509902", "body": "I feel that the `#flatten` should be here.\n- This is only used in one place, and that one place expects flattened args.\n- The concept of a command with its arguments makes me think of an array, not a nested array.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10509902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10957145", "body": "I didn't read this completely the first time, sorry.\n\nhttps://github.com/thoughtbot/guides/commit/237d16b2f401d0c4c4f19102fce64c69cf9e8a46\n\n@houndci is incorrect.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10957145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10957380", "body": "What sets `force_default_git_command` to true?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10957380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10969127", "body": "I've opened thoughtbot/hound#147 to fix this.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10969127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10399825", "body": "```\nmkdir -p\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10399825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742039", "body": "Unused.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742128", "body": "Consider K&R style for vim reasons.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742468", "body": "The  first  argument,  by  convention,  should  point  to the filename associated with the file being executed.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742568", "body": "The array of pointers must be terminated by a NULL pointer.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742737", "body": "Should you check the return value and produce something from sysexits.h instead? And use err(3).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12742737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12770594", "body": "This error message is a little ambiguous:\n\n```\ngitsh: No such file or directory\n```\n\nHow about passing something instead of the `NULL`. Even just `GITSH_RB_PATH` would be useful to know.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12770594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12770599", "body": "Now that you've included `sysexits.h` you could use `EX_OK`! If you want.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12770599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13748877", "body": "This is awkward. How about:\n\nThe gitsh configure script will attempt ...\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13748877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13748939", "body": "This section should be at the bottom, since it's the part that people tend to get right.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13748939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13794461", "body": "Is there no way to push this into the parser?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13794461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13794481", "body": "This reads as a sentence fragment to me. How about s/to run/will run/.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13794481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13794508", "body": "This seems bloggable.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/13794508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112001", "body": "How about `Enumerable#flat_map`?\n\nThere's also the slightly less clear `Enumerable#inject`:\n\n```\navailable_completers.inject do |acc, completers|\n  acc + completers.completions.map { |arg| escape(arg) }\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112027", "body": "If you rename `some file.txt` to `a file.txt`, it will be shorter!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112217", "body": "This method definition should be below `#escape`.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112256", "body": "```\n2.0.0p353 :001 > 'foo    bar'.gsub(/ (.)/, '\\ \\1')\n => \"foo\\\\  \\\\  bar\" \n```\n\nIntended?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112319", "body": "Aha, it looks like @houndci commented on the wrong line. You're right, this is a great description.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11112319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11197999", "body": "How do you want the system to respond to the user typing `\\` manually, such as `add a\\ text`<kbd>TAB</kbd>?\n\nThis will also come up for partial matches, right? If the files names `a text file` and `a text document` exist, completing `a` will give the user `a\\ text\\`; typing <kbd>dTAB</kbd> from there will cause further completion off text with a `\\` in it.\n\nI believe the above code will double-escape the `\\` in that case.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11197999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12037844", "body": "Does libedit have that function?\n\nShould we write some C to expose this function to gitsh?\n\nAlternatively we could write a small parser that's used only during tab completion.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12037844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12223057", "body": "Is it possible to force a dependency on GNU Readline? During `./configure`, check whether Ruby was built using Readline instead of libedit?\n\n(Alternatively: does re-writing in another language solve this problem?)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12223057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710126", "body": "Missing newline.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710225", "body": "Newline.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710254", "body": "Newline.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710258", "body": "Newline.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710386", "body": "s/commands/command/\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710468", "body": "This is a little too chatty for my taste.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710522", "body": "This indentation is odd.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/16710522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/18735119", "body": "I don't love this use of `''` but I also don't immediately see a better way.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/18735119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/18735162", "body": "Now that you're using `''` twice, how about a `Colors::NONE` or something?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/18735162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22734371", "body": "You want `false`, not `nil`, because it's a Boolean test (`if`).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22734371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22757937", "body": "I had to look this up: `different to` is en-GB and `different than` is en-US. Now we know.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22757937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22757945", "body": "It often proves useful to know what kind of exception happened without string parsing. This is the first exception class, so it doesn't matter yet, but how about starting off with a `Gitsh::KeyError` subclass here?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22757945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22832845", "body": "Where is `#length` used? The only place I see it in this PR, aside from the unit tests, are in `ArgumentBuilder::combined_arguments` -- but that's for an Array created in the initializer, not for an ArgumentList.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22832845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22848093", "body": "Though this could be:\n\n``` ruby\ndef shortened_branch_name\n  branch_name[0..BRANCH_CHAR_LIMIT] + ellipsis\nend\ndef ellipsis\n  if branch_name.length > BRANCH_CHAR_LIMIT\n    \"...\"\n  else\n    \"\"\nend\n```\n\nI think the above is more clear because the conditional has fewer things in it, but it might also be more ugly.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22848093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22848127", "body": "Nice. I like this solution.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22848127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23232087", "body": "This value is unused.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23232087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "teoljungberg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c8f8de8346f3d7c609dedd0490832534bca7f531", "message": "Quell ruby warnings for unused variables\n\nThis commit quells warnings along the likes of:\n\n```\nwarning: assigned but unused variable - X\n```\n\nWhere X is the variable in question."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/176ea67a09d09ea42610543a997b44fe8f15b970", "message": "Enable hound\n\nConfigure Rubocop to enforce single quotes, if there is no need for\ninterpolation and therefore double quotes."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5e72305054696a296018bf88ed1e714d33b5605f", "message": "Do not duplicate character ranges\n\nTo quell the following warning:\n\n```\ncharacter class has duplicated range: /X/\n```\n\nWhere `/X/` is the regex.\n\n`\\s+` matches the output `[\\n\\r\\s]+` does."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/b6e9f21c0bdfcfbd5a92230dd6741bd2b0797fdd", "message": "Initialize instance variables\n\nTo quell the following warning:\n\n```\ninstance variable @X not initialized\n```\n\nWhere `@X` is the instance variable."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/7e959568dc8c839153306a9bcbd7889d0862f413", "message": "Remove unused variables\n\nTo quell the following warning:\n\n```\nassigned but unused variable - X\n```\n\nWhere `X` is the unused variable."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d2975f6d5812c796471f46f794d0d06674afd289", "message": "Add parenthesis around regexps\n\nTo quell the following warning:\n\n```\nambiguous first argument; put parentheses or a space even after `/'\noperator\n```"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/716f2b90d1ec8905bbc5f1884b6cb0a414b7a5e7", "message": "Replace Mocha with RSpec Mocks\n\n- Replace Mocha's `stub` with `double` from Rspec.\n  - Use spy instead where applicable.\n- Add `StubbedMethodResult` helper to allow arbitrary mock\n  implementations to be called after each other.\n\nCloses #215"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/134974c90e5ada29f7c2b6972fb09c63e93a754d", "message": "Upgrade `rspec`\n\n- Replace deprecated `be_{true,false}`\n  - `be_true` is replaced by `be_truthy`\n  - `be_false` is replaced by `be_falsey`\n- Rename deprecated `failure_message_for_should`\n- Update `parslet` to quell `rspec` deprecations"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446636", "body": "Since this is a helper method I would prefer being clear, and explain how it works for the reader. Thoughts? But maybe that's overkill as you said\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/comments/9446636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23227332", "body": "Don't we want to load the rc file before greeting the user? Might be good for i.e turning of the greeting message?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23227332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23227436", "body": "How about considering using a library for this? https://github.com/defunkt/fakefs\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23227436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "xduugu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/1ed14c7696b43448dcc520b85872b7b5da857713", "message": "Expand historyFile path\n\nExpand the configured history file path, so it is possible to use a \"~\"\nfor the user's home directory instead of an absolute path.\n\nBefore, a path like \"~/.local/share/gitsh_history\" led to the following\nerror:\n\ngitsh: Error: No such file or directory @ rb_sysopen - ~/.local/share/gitsh_history\n\n(Test added by George Brocklehurst)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sidraval": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/f93cde46578c42bb36b62d09699b0f433a50d6e3", "message": "Fix code block rendering in README.md\n\nFormatting was a bit off in the code block."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pablobm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/805511833343edee4adf29402218758bac8830dc", "message": "Fix dead link"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "whmii": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3f2be1e4764af7c0735860591f3b47035c8b9440", "message": "Update logo with new design"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tysongach": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/26a1e3eb7da79b9b53acead44de26f30b17b020a", "message": "Update thoughtbot logo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cippaciong": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5246eec2d3e7b1959b5348307d9bbfaa40a3e46d", "message": "Honor DESTDIR during make install\n\nBetween version 0.10 and 0.11 `make` stopped honoring DESTDIR during the\ninstall phase. This might not be relevant when installing from source\nwith the customary `sudo make install`, but becomes relevant when the\ncommand is issued in package creation for distros. In such\ncircumstances, we don't want to install files directly in /usr/share but in\na custom directory that will be used to create the final package."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34732511", "body": "Hi, I just created an AUR package based on the existing PKGBUILD.\nhttps://aur.archlinux.org/packages/gitsh/\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34732511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34738231", "body": "Sure @georgebrock, just subscribed to project releases atom feed. =)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34738231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "charlietran": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/2a9940545a084d646b02bd1a8e58641a51afa255", "message": "Fix small typo in README.md"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "calleerlandsson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/1e411d939e3b99017412fa45708f171057dc7fa2", "message": "Improve prompt generation speed\n\nThis is done by:\n\n- Only computing prompt placeholder substitutions when necessary.\n\n  Previously, since `gsub` was invoked with a hash, all substitutions\n  would be computed regardless of whether the relevant placeholder was\n  found in the prompt format string.\n\n  This commit changes the invocation to use the block form of `gsub`.\n  The passed block will be executed once for every placeholder found in\n  the format string. On each execution it will only calculate the\n  relevant substitution.\n\n- Caching repo info during prompt generation.\n\n  When generating the prompt, the `Prompter` and `PromptColor` would\n  repeatedly ask the `Environment` for information about the repo. This\n  resulted in many calls to external git commands, slowing down the\n  prompt generation.\n\n  This commit reduces the number of calls to external git commands to\n  the minimum possible to retain the previous behavior by caching\n  information within a `Prompt` object during calls to `#prompt` and\n  within a `Status` object used both in `Prompter` and `PromptColor`."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/53be5c788bb486de7fc554e60ceb884b68fdcfce", "message": "Provide a helpful message if git is not executable\n\nDisplay a helpful message and exit early when gitsh is installed on a\nsystem without git or when a non-existent git is specified using the\n`--git` option.\n\nThis fixes #193."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/eab8d12e443a063ee806fac2d4ee0ca1a10a161a", "message": "Run test suite on Travis using ruby 2.1.1"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/fc60e1801ecbddbc91d894c00a5866563d98348a", "message": "Open tempfile in write mode\n\nFixes #148"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3fe582c7da62e0fea328bc950979b98374f8c921", "message": "--version prints what readline lib gitsh is using"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/b6859752bcf42c144e1be510579ac3ad9a3466ef", "message": "Test git interaction inside a temporary home dir"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34741470", "body": "I think my version of ruby is already using readline:\n\n``` bash\n$ /usr/bin/env ruby -r rbconfig -e 'puts RbConfig::CONFIG[\"configure_args\"]'\n '--prefix=/Users/calleerlandsson/.rbenv/versions/2.1.0' '--with-openssl-dir=/usr/local/opt/openssl' '--with-readline-dir=/usr/local/opt/readline' 'CFLAGS= -O3 -Wno-error=shorten-64-to-32 ' 'LDFLAGS=-L/Users/calleerlandsson/.rbenv/versions/2.1.0/lib ' 'CPPFLAGS=-I/Users/calleerlandsson/.rbenv/versions/2.1.0/include '\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34741470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34748656", "body": "Ah, I see! I installed the homebrew ruby 2.1 and can no longer reproduce this issue. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34748656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10967441", "body": "Ah, I see! I'll fix that.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10967441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10967506", "body": "It's set to `true` when trying to `fetch` the `gitsh.gitCommand` variable in `Environment#git_command` here: https://github.com/thoughtbot/gitsh/blob/9c0df1439ec2115b69f9db66233b70a189860ad9/lib/gitsh/environment.rb#L20\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10967506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10969284", "body": "Great!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10969284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194796", "body": "Thanks! Fixed in https://github.com/thoughtbot/gitsh/commit/fcc24fe82ed39a6fc472bee17fa6729fd904a746\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194798", "body": "Thanks! Fixed in https://github.com/thoughtbot/gitsh/commit/fcc24fe82ed39a6fc472bee17fa6729fd904a746\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195169", "body": "This makes sure that gitsh does not use the `gitCommand` as specified by git-config on the local machine. The real solution here is to run this inside a temporary home directory. This is done in https://github.com/thoughtbot/gitsh/commit/bc7711aec2896a453ee966dab0fe1c34f76e1299 . In the same commit I also changed the git repository spec so that all specs are run inside a temporary home directory. I don't know if we want to merge this or if we want to wait for https://github.com/thoughtbot/gitsh/pull/122 ?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195273", "body": "All the tests pass on my machine without it! Gone!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195329", "body": "thoughtbot/hound#147\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14290707", "body": "Should this be \"it understands magic variables\"?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14290707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "srstevenson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d1e59e2d65ae660c992b35aa0a1f36811d6b1322", "message": "Show home directory as a tilde in the prompt\n\nWhen gitsh is launched from the user's home directory, the basename of\nthe current working directory shown by the `%D` format string is\ntypically the same as the user's username, which is a potential source\nof confusion as to what this prompt section shows. With this commit, the\nhome directory name is replaced by a tilde in the `%d` and `%D` format\nstrings, as is conventional for Unix shells.\n\nWithout this commit:\n\n    $ cd ~\n    $ pwd\n    /home/srs\n    $ gitsh\n    gitsh 0.10\n    Type :exit to exit\n    srs uninitialized!!\n\nWith this commit:\n\n    $ cd ~\n    $ pwd\n    /home/srs\n    $ gitsh\n    gitsh 0.10\n    Type :exit to exit\n    ~ uninitialized!!"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/d2ed25825e134057ad044f2edf8e1bf3feee48be", "message": "Ignore shared objects\n\nThis causes Git to ignore ext/gitsh/line_editor_native.so, which was\ncreated when building gitsh on Linux."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "croaky": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/da7d8560e257fc671a365119439c9df2c7c7ed23", "message": "Give credit where credit it due\n\nThanks, Stockholm!"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34517458", "body": "This looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34517458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34517561", "body": "Commented on #65. The video is great, too. Maybe include that in the announcement blog post?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34517561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9558933", "body": "Should this link to https://github.com/thoughtbot/guides/tree/master/style#shell instead?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9558933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "christoomey": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/ccba254c5d7d60a3c6d5d50e195f6c3f8d129e55", "message": "Add link to Weekly Iteration video on Upcase"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jjb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4c8a7b8bcadb45b9bb04b71437080285f15b69dd", "message": "Update installation instructions for newest release"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "philoserf": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4fa9f0cf7366e03a1e36f62cba42ff1820eb9289", "message": "Fix broken URL in homebrew formula."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "willium": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/34f73b8986909f53715512045a51eedd78317a8f", "message": "Double line, fragment"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jakirkham": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/676207d6436c0110525f2630e74718a05479bbe6", "message": "README: Note about changing the default command.\n\n[ci skip]"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andybalaam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4fc0ed633b38e924fefe3d1648a709163fc4f22f", "message": "Fix two typos in README.md"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jferris": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/2af9961e1a4cab527e33685367ab191ffd9e7ab7", "message": "Add \"About thoughtbot\" to README"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22727062", "body": "It looks like this is only used from `Environment`, and a block is always provided.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22727062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23111895", "body": "These interactive tests are nice.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23111895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23112003", "body": "Worth extracting this usage string into a method/constant?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23112003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20389639", "body": "You can use `SimpleDelegator` to implement these two methods if you wish.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20389639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20389688", "body": "It doesn't seem as though this class is so tightly coupled to `Subshell` that it needs to be nested. Maybe it should live in its own file, with its own identity and personality.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20389688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20389988", "body": "Do you need to call `super` here? It looks like the default implementation does some sanity checks: https://github.com/ruby/ruby/blob/61ad543a33fe10d21d1dc85efcbf3e9d96cc93b7/object.c#L429\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20389988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20510755", "body": "This class is only initialized once in the code, and `options` is never used outside of the tests. If you removed the default for `interperater_factory`, you'd only have to pass it in in one place, and the concrete dependency would be fully removed from `Subshell`. That would mean you wouldn't need to require `gitsh/interpreter` here, etc, and the production code would be using a more similar path to the test code.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/20510755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "lf-": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/bbb53ad031c95d78a364c090fc8620c645aeac62", "message": "Fix install instructions.\n\nThe URL in the INSTALL instructions redirects. `curl` won't follow the\nredirect without the `-L` flag."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeffmueller": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e4b435c84cca3fee42866664cd34226be4c366f9", "message": "Added :q alias for :exit command"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AgentAntelope": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c664b51156f42ca5f18f3c6b86c28770f7b1a71b", "message": "Prevent blank lines from causing a parse error.\n\nThis was an issue as most commands currently can be preceded by\nspaces, but there was no rule to support spaces alone.\n\nThe behaviour of a blank line is now identical to that of an empty\nline; by default the `git status` command, overridden by\ngitsh.defaultCommand"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/e3255903a3db7e15c1902c6cd1a51106d8aecfc6", "message": "Add completion of remotes."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/cf90d7808787216f0318928d289923a122cffb23", "message": "Use sequence for args, as it will always be an array."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/3a44f72c8de5e9e7c5cd79faf1a11c314edcb3a2", "message": "Add instructions for running gitsh locally to contributing guide."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/08730fb9e922c9a356cce26bcd10ee089cf8ef2e", "message": "Rework specs around completing '~'.\n\nThis is because if there were no files in '~', the previous test would fail.\nSo instead, check for directories (which are more likely).\n\nAlso adds a test ensuring directory completion functions."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/642b59d2717390855babc8454a95b2bc970b19eb", "message": "Allow the parser to understand upper and lower case letters.\n\nWe should pass bad commands onto git to get the standard\n\"git: 'X' is not a git command. See 'git --help'.\" message."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/8e9f79894d7073c92546b2117b1ff0d32572d46d", "message": "Set $PROGRAM_NAME so that gitsh shows up as 'gitsh'"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c0449fe3c5de92885aa3862f4b14177eb81a1492", "message": "Ensure transformer can handle empty string arguments"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35835840", "body": "Updated. Had some difficulty before understanding how to test it (I've not worked with a parser before) but I think that should cover it.\n\nCertainly that test fails without my change, and passes with it :)\n\nEdit: Or so I thought. Travis disagrees, but I can't see why.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35835840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11559342", "body": "Minor typo here.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11559342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12768037", "body": "Good point! This is a hangover from my initial approach before I realised it would be nicer done in it's current form. I'll remove this.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/12768037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "yasuoza": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/c653779fc15a43c3633a44f93304f695b2aeb505", "message": "Fix 'Error: undefined method `sub' for nil:NilClass' when newline is included git alias\n\nWhen there is at least one newline in git aliases like:\n\n    ln = log --pretty=format:'%C(blue bold)%h %C(yellow bold)%cd %C(magenta bold)%cn %C(red bold)%d\\n\\n%C(white bold)%s\\n%Creset%b'\n\ntab completion fails with 'Error: undefined method `sub' for nil:NilClass'.\n\nThis commit fixes the issue."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9935450", "body": "If `@git_command` was passed to `initialize` here, it always points to `DEFAULT_GIT_COMMAND`. \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9935450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9937839", "body": "I agree with @georgebrock. I think this patch isn't cool code, but I can't find better way(with minimal patch) than this PR.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9937839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10417161", "body": "Hmmm... I agree. I will update.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10417161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "blainesch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/5acfeb75f9cb04f9b2af9aab38d262f5a4fe36cc", "message": "Set test order to random to surface order dependencies."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/fb2d72bd331df9c011b055148ad36af7b04997ee", "message": "Add `Pry` for easier test debugging."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/6eacd525fa54b8d78814403f2765a45ecf365118", "message": "Add ability to chain multiple methods together."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/4913a67f9109957d322cf3f86c7f15b2135912d5", "message": "Change `current_branch_name` to use short branch name."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34883496", "body": "Here's how I got around it.\n\n```\nbundle\nAUTOM4TE=/usr/local/bin/autom4te ./autogen.sh\nRUBY=/Users/blaineschmeisser/.rvm/wrappers/ruby-2.0.0-p195/ruby ./configure\n# was trying to use system ruby 1.8.7\nmake\nrspec\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34883496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34883747", "body": "Specs are passing, w00t!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34883747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34888414", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34888414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34986030", "body": "I'll submit a patch sometime today. Adding support for `;` sounds easy as well.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34986030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35011039", "body": "@KyleMacey the `&&` and `||` operators could have the same issue in a commit message. I believe I need to update the parser to support multiple commands, then update the transformer to create hopefully-lazy `Condition` instances which would be a tree and either halt/return, continue true, or continue false.\n\n@georgebrock If this is the wrong approach or something you no longer wish to support let me know! [:\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35011039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35050803", "body": ":+1:\n\nIs there another maintainer? I notice you are the only one merging, and you have quite a few open pr's.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35050803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35098675", "body": "@georgebrock I got a working example of the parser/transformer over [here](https://gist.github.com/blainesch/9003529). I'll try and get it incorporated tonight.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35098675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35099257", "body": "@KyleMacey oh right, I was. I'll be sure to add that in there. I believe it'll just add a third level in the array.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35099257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35230042", "body": "Updated @georgebrock @KyleMacey \n\nErr failing. One moment.\n\nStill failing, heading to bed.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35230042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35296585", "body": "@georgebrock I'm not entirely sure how the first suggestion would work. If we pass a command to the interpreter, it goes to the parser which gives us the tree. Since we don't want to modify the transformer we'd have to have a middleman here to transform and traverse the tree (TraverseTransformer?) which calls the transformer every time it's unsure of how to handle a key (like git_cmd). It seems like we'd have two transformers at this point. I'm not entirely sure I follow how you're wanting me to approach this.\n\nOh or maybe have an `OrClass`, an `AndClass`, and a `SemicolonClass` (halp with names!)... the transformer returns the most top level class, which responds to `execute`, which would go through the chain. In this instance the interpreter class would not need to change, but I'd still need to add to transformer.\n\nThe specs are failing for an odd reason. Locally I run `./bin/gitsh` and go into the terminal, I can call `:exit` and it'll exit for me. However if I do `init` return, then `add -p` it'll actually give me the return value of the previous command. I'll have to look at it later tonight.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35296585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35448432", "body": "@georgebrock updated and hound approves ^_^\n\nThe specs pass locally but I see travis borked on some weird faults. I assume travis isn't fully setup yet?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35448432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35820682", "body": "Thanks for the feedback, I'm looking through them now! [:\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35820682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35821793", "body": "@georgebrock I updated the pr. I added two commits that are a little outside the pr. Usually I don't add pry as a dependency since not everybody uses it, but I kept having to look up how to set the stdin/stdout in order to use it in this library.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35821793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35895481", "body": "@georgebrock and @mike-burns I have completed the last round of updates except for the decision on the semicolon.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35895481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35929974", "body": "This should be good to go, right? :D\n\nTests are passing locally. Seems like this project isn't having a lot of success with travis :/\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35929974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35966308", "body": "Can this be closed?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35966308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/36073441", "body": "Maybe just some colored bullets above the prompt?  We could just set done variables and make the prompt customizable.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/36073441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973882", "body": "Would `program` simply call `or_operation`? Or are you suggesting a name change of `or_operation`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973903", "body": "You're right, going to a directory that doesn't exist throws an error. I overlooked that.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973921", "body": "Going based on the other class names, I probably should have called this `Multi` for it's class `Gitsh::Tree::Multi`. Objections to using that?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973928", "body": "Good call.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9973928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9974047", "body": "@georgebrock sometimes I get a `Errno::ECHILD: No child processes` response from `wait2`. Specifically from two `commit` commands, which should return `true`, so returning `false` on this error isn't correct. I assume the command finished before it gets to the `wait2` method. Accessing it like `Process.wait(pid); $?.success?` still works. I'll revert back to that unless you know of a better way of doing this.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9974047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9976374", "body": "@georgebrock yes, because of a race condition. `Process.wait2` threw an exception if it was called after the process had finished, and this was the only reliable way (I could find) to determine it's success or not.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9976374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9993412", "body": "Whoops, should have been `returns false with invalid arguments`. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9993412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9993959", "body": "I've never used semicolons in chaining methods either, I added because it was part of the feature request.\n\nLocally I have a `cl` => `clean -fd` (useful with `git add -p`), I might run it similar to `push origin; cl` if the push fails (renamed origin to need to rebase), I'd still want it to clean, especially if I needed to rebase.\n\nI'd be alright with dropping it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9993959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10007633", "body": "Fixed. The diff on the conversation is outdated, but the diff on the files changes tab reflects this change correctly. This should be an outdated diff now.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10007633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9953510", "body": "Can this return `true`/`false` to allow chaining? The `Process.wait` only returns the pid after completion.\n\n```\n$? && $?.exitstatus == 0\n```\n\nShould do the trick.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9953510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9956368", "body": "@Adam89 no it should return true/false so that it can be chained. For instance `!foo || !cd foo` if the first one returns `false` I don't want it to stop executing totally, I want it to chain correctly to the next command.\n\nThis request is related to #95 \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9956368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "aldrik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/43002401669586397b046ff889c828dd60a21804", "message": "List similar projects in the README"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34975406", "body": "I have added the above suggestions, thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34975406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "adrianheine": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/60155289002886ba2cc0f124e822e47b2268798a", "message": "Don't handle version.rb as SCRIPTS file\n\nSCRIPTS get execution permission on installation; this is not intended here."}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/aca6b169e6750467ee8266abc705cb8e93e501dd", "message": "Close list in manpage"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35603221", "body": "I do that (putting it in `dist_pkgruby_DATA`) now.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35603221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35713397", "body": "I used Lintian. You can see [in its source](http://anonscm.debian.org/gitweb/?p=lintian/lintian.git;a=blob;f=checks/manpages.pm;h=57290bba5b68e48140330cf75fafdf5b8d6d6a62;hb=HEAD#l251) what it's doing:\n\n```\nman --warnings -E UTF-8 -l -Tutf8 -Z\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35713397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sgrif": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/a443b3973e52ff2e7179ffcf8ae8302c423cb865", "message": "Extract `ModuleDelegator` from classes that wrap `Readline`"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35132337", "body": "@georgebrock Adam and I paired on this issue this afternoon. Cheers on injecting `Readline`, that made this extremely simple.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35132337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35167041", "body": "This was resolved in #77\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35167041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773832", "body": "It is because of add_hist being false, the test is to make sure we don't\npop \"hello\" when we're trying to get rid of the blank line (which would\nhave never been added to the history)\nOn Feb 15, 2014 11:16 AM, \"George Brocklehurst\" notifications@github.com\nwrote:\n\n> In spec/units/readline_blank_filter_spec.rb:\n> \n> > -    it 'does not enter lines consisting of only whitespace into the history' do\n> > -      readline_blank_filter = ReadlineBlankFilter.new(fake_readline)\n> >   +\n> > -      fake_readline.type(\"\\n   \\n\")\n> > -      readline_blank_filter.readline('>', true)\n> >   +\n> > -      expect(readline_blank_filter::HISTORY.to_a).to be_empty\n> > -    end\n> >   +\n> > -    it 'does not modify the history if add_hist is false' do\n> > -      readline_blank_filter = ReadlineBlankFilter.new(fake_readline)\n> >   +\n> > -      fake_readline.type('hello')\n> > -      readline_blank_filter.readline('>', true)\n> > -      fake_readline.type(' ')\n> > -      readline_blank_filter.readline('>', false)\n> \n> This line being added here only contains whitespace, so it's not clear if\n> the test passes because add_hist is false (which is what the example\n> description says we're testing here), or because of the whitespace filter\n> (as covered in the previous example)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/thoughtbot/gitsh/pull/77/files#r9773697\n> .\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9773832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9774050", "body": "Specifically, it's to make sure the implementation takes `add_hist` into account. If we don't check whether or not the value was actually added to the history, we would pop whatever was added previously, which in this test would result in `HISTORY.to_a` returning `[]`. I'm not sure how to make this clearer in the test, so I'd love any suggestions.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9774050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tomlea": {"issues": [], "commits": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/commits/1270abcd48c6899333a28c7333a2ba5d37dd1bf6", "message": "Remove redundant check.\n\nThe regexp can include the starts_with check."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "r00k": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30270274", "body": "Good stuff! Looking forward to seeing what comes next.\n\nOn Tue, Dec 10, 2013 at 1:55 PM, George Brocklehurst <\nnotifications@github.com> wrote:\n\n> Good call, @r00k https://github.com/r00k, thanks. I've listed the\n> current benefits in the READMEhttps://github.com/thoughtbot/gitsh#why-should-you-use-gitsh.\n> So far, it mostly just saves on typing, but now we have the basics down\n> there's a lot more good stuff to come.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/thoughtbot/gitsh/issues/39#issuecomment-30256445\n> .\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/30270274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gylaz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33830284", "body": "I'm seeing this same issue. Wonder if there's a way to hook into `rbenv` for ruby versioning somehow.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33830284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33859459", "body": "It works! Thanks @georgebrock\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33859459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33879614", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33879614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "JoelQ": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33834821", "body": "@gylaz It would be better not to depend on `rbenv` directly since that would break for `rvm` and `chruby` users.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33834821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33844956", "body": "It looks like it thought the system ruby was ok.\n\n```\n==> ./configure --disable-silent-rules\nchecking for ruby... (cached) /usr/bin/ruby\nchecking for a sed that does not truncate output... /usr/local/Library/ENV/4.3/sed\nchecking for grep that handles long lines and -e... /usr/bin/grep\nchecking for ruby version... 1.8.7\nconfigure: error: Ruby 2.0 or later is required to install gitsh\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33844956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gabebw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33953054", "body": "I like that. Unobtrusive and helpful.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/33953054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22971659", "body": "\"error\" instead of \"e\"?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22971659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22971700", "body": "Why not spell out \"command\"?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22971700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22972272", "body": "`allow(command_instance).to receive(:execute).and_raise(Gitsh::Error, 'Oh noes!')` is the RSpec 3.x way to do it, I believe\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22972272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22973394", "body": "Oh hey Mocha. `.stubs` vs `.stub`, always confusing me.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22973394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23182592", "body": "What's this do?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23182592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23182625", "body": "What a lovely abstraction.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23182625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23229848", "body": "Hm, why use a block here and for `@term_info` but not for `@interpreter` or `@history`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23229848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23229955", "body": "Does this need to be inside the `interactive` block? Does it make more sense to move it out?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23229955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230051", "body": "Should this have an empty line above it to separate it from the setup phase?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23230051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "djcp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34642598", "body": "If you've using a ruby version manager like rvm or rbenv, you can export the path to your more modern ruby before configure, thusly:\n\n``` bash\nRUBY=/home/djcp/.rbenv/shims/ruby ./configure\n```\n\nI use rbenv, your ruby path will probably be different. After setting that environment variable, configure should find your more up-to-date ruby.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34642598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dimitrismistriotis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34645374", "body": "@djcp: You rock.\nJust for the next person for RVM:\n\n```\nRUBY=~/.rvm/rubies/ruby-2.1.0/bin/ruby ./configure\n```\n\nJust made install. Thanx\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34645374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mrageh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34664502", "body": "Hi George I will start to work on this in my spare time please give me a few days to finish this feature. \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34664502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34684003", "body": "Hi George \nWhy do we have the .in extension on the ruby version file?\nThe file could not be required in cli file and none of the specs would run, so I decided\nto copy it and remove the .in extension so I could run all of the specs. \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34684003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34717380", "body": "Thanks George \nCould you review my pull request.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34717380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34954812", "body": "Hi George \nAm trying to understand why Readline.readline should not add blank lines to the current session. The read command method in cli.rb uses this to read a command and execute blank lines as git status. So if I remove blank lines from the current session am guessing the status will never be returned or am I missing a piece of the puzzle?\nCan I remove a blank line from the current session after it has been executed?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34954812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35026307", "body": "Hi George \nWhere is the current session handled, is it in the environment class or the cli.rb. \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35026307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35165898", "body": "Thanks Sean I will do that \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35165898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35167171", "body": "Thanks for the help guys\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35167171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9629871", "body": "George when I cloned this project and first ran the specs this one failed. It looks like it has nothing to do with the issue am working on so I commented it out. I hope to be able to fix that failing spec in a new pull request\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9629871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9954999", "body": "So you mean the code should only continue executing after Process.wait returns true.\n\n``` ruby\nProcess.wait(pid)\nunless ($? && $?.exitstatus == 0)\n  raise \"BOOM\"\nend   \n $?.exitstatus\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9954999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9961357", "body": "I think I could get this working but am going to wait for a second opinion before I proceed with this. \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/9961357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "lifeiscontent": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34679733", "body": "@gfontenot beautiful. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34679733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hakanw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34749000", "body": "I also see the text input gets messed up if you press up/down-arrow to walk through the shell history.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34749000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34754635", "body": "But won't it be a long time until all (for example) OS X installations update its system ruby and system libedit? Maybe if gitsh wants to work on homebrew and for normal setups it should consider a fix or workaround for this?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34754635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "AtomicCat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34815628", "body": "Pleas remove me from this list: I don't know why I am on it.\n\n## \n\nVenessa Zadeh-Becker | Business Manager | Synapticats, Inc. | 503.954.1488 ext 102\nvenessa@synapticats.com\n\nOn Feb 11, 2014, at 1:33 PM, Jason Butz notifications@github.com wrote:\n\n> Filenames with spaces don't appear to be handled correctly for tab completion.\n> \n> They are completed, but the space is not escaped and the file path is not in quotes.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34815628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bjonord": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34852469", "body": "@georgebrock \n\nSame issue on my machine running Debian Wheezy. \n\nThe `gitsh-0.3/vendor/gems/setup.rb` exists after configure has run as well on my system.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34852469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34854315", "body": "Solved this by correcting which the system ruby was supposed to be. The scripts seems to have be a bit confused as to which ruby to use.\n\nOn another note that could be of use, is that the \"bin\" file was aiming to use `#!/usr/bin/ruby` while I needed to set this to `#!/usr/local/bin/ruby` to ensure that the correct ruby was used instead of the fallback ruby 1.8.7.\n\nHope this is of use to someone.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34854315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jmpalacios": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34893472", "body": "@georgebrock Thanks for the quick reply! I'm a bit embarrassed to admit I'm not really sure what happened the first time, but here's the output after trying a second time (hint: worked perfectly and gitsh is now running fine so far on OS X Lion):\n\n```\n-> curl -O http://thoughtbot.github.io/gitsh/gitsh-0.3.tar.gz\n(snip)\n -> tar xzvf gitsh-0.3.tar.gz\n(snip)\n -> cd gitsh-0.3/\n -> ls vendor/gems/setup.r\n-rw-r--r--  1 jmpp  staff   147B Jan 28 10:28 vendor/gems/setup.rb\n -> export RUBY=/opt/local/bin/ruby\n -> ./configure --prefix=/usr/local/\n(snip)\n -> ls vendor/gems/setup.rb \n-rw-r--r--  1 jmpp  staff   147B Jan 28 10:28 vendor/gems/setup.rb\n -> make\n(snip)\n -> ls vendor/gems/setup.rb \n-rw-r--r--  1 jmpp  staff   147B Jan 28 10:28 vendor/gems/setup.rb\n -> sudo make install\n(snip)\n -> ls /usr/local/share/gitsh/gems/setup.rb \n-rw-r--r--  1 root  wheel   147B Feb 12 12:52 /usr/local/share/gitsh/gems/setup.rb\n -> diff /usr/local/share/gitsh/gems/setup.rb vendor/gems/setup.rb\n(no differences)\n```\n\nIn fact, the output of `make install` was much longer this time round, so apparently something failed to configure for some odd reason the first time I tried, or something like that... no real idea what could have gone wrong.\n\nIn any case, this turned out into a non-issue, so I'm gonna close it. Sorry for wasting your time :( and thanks for such a nifty utility!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34893472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cwells": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34899182", "body": "I installed from git and had to do the following (Fedora 20):\n\nsudo gem install bundler\nsudo gem install blankslate\n\nPerhaps these dependencies should be added to the README?\n\n[edit]\nAfter installation, I also needed to install the parslet gem, which seemed to bring in a different version of blankslate, so perhaps the following would be the appropriate recommendation:\n\nsudo gem install bundler parslet\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34899182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34912944", "body": "Was just going to make a similar suggestion. If this is done, please avoid the verbosity of something like \"command\" as git-sh does ;-) I agree with Matthew that \"!\" seems a reasonable escape character.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34912944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matthewadams": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34922408", "body": "Really, any single character will do.  I'd take any one of !, @, #, ^, \\, /, `, or ; (not necessarily in that order).\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34922408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34922500", "body": "...or you could even make it configurable:  gitsh.escape?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34922500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35036095", "body": "@georgebrock Sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35036095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35157242", "body": "Because I'm _this_ lazy, how about you still go with `!` for an explicit shell escape character, but if a command is issued that is not a known git command (native or alias), you _automatically_ escape it to the shell?  Then, the `!` escape would only have to be used if a git command or alias had the same as a shell command.  The thought of not having to type _anything_ unnecessary to issue a shell command is very appealing.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35157242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35403866", "body": "@georgebrock, I see your point.  Just remember, you're dealing with programmers, who are _that_ [lazy](http://c2.com/cgi/wiki?LazinessImpatienceHubris). :)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35403866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dwineman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34930822", "body": "Adding my vote for `![command]` to send `[command]` to the shell. `!` is actually pretty standard for this usage among those old Unix utilities that ran their own built-in command shells. Even \"dc\" (your own example on the announcement page) uses it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34930822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lawrencem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34946718", "body": "I used the repository.\n\nOn Wed, Feb 12, 2014 at 4:15 AM, George Brocklehurst <\nnotifications@github.com> wrote:\n\n> Are you installing from the repository, or from the tarball?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/thoughtbot/gitsh/issues/84#issuecomment-34851059\n> .\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34946718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "logankoester": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34953335", "body": "I agree with this suggestion! I have this problem as well. Actually, I wouldn't mind if it chided me slightly to remind me what shell I am in.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34953335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34953390", "body": ":thumbsup: I think this should be an option.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34953390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34957012", "body": "I agree with your preferred default.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34957012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "shsteven": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34960836", "body": "ctrl-d sounds good!\nAny chance to change the startup message to provide a hint?\n\n```\nType :exit or press Ctrl-d to exit\n```\n\nInstead of\n\n```\nType :exit to exit\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34960836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35227553", "body": "Nice!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35227553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kylemacey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34991833", "body": "Yeah, maybe not use `and` or `or`... especially since they can be comming in commit messages..etc\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34991833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34992727", "body": "It just looks like the code you added in the interpreter may also parse inline commit messages eg\n\n```\ncommit -am \"fixes some problem and another problem\"\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/34992727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35098928", "body": "@blainesch are you also planning on matching semicolons?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35098928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tomoakley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35004770", "body": "How do I check the `/usr/local/bin/ruby` Ruby version?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35004770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35006839", "body": "Thanks George. Worryingly, it outputs this:\n\n```\ntommbp:~ Tom$ /usr/local/bin/ruby --version\ndyld: Library not loaded: /usr/local/lib/libruby.1.9.1.dylib\n  Referenced from: /usr/local/bin/ruby\n  Reason: image not found\nTrace/BPT trap: 5\ntommbp:~ Tom$ \n```\n\nIf I do `/usr/bin/ruby --version` it outputs this:\n\n```\ntommbp:~ Tom$ /usr/bin/ruby --version\nruby 2.0.0p247 (2013-06-27 revision 41674) [universal.x86_64-darwin13]\n```\n\nwhich is the global version of Ruby I installed using rbenv.\n\nSorry to mess you about like this, it'c clearly my machine's problem and not Gitsh's fault :/\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35006839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35133303", "body": "More problems, it seems... `brew uninstall ruby`, it just gives me:\n\n`Error: No such keg: /usr/local/Cellar/ruby`\n\nwhich i'm assuming means that Ruby isn't installed (by Homebrew), which is confirmed by `brew info ruby`.\n\nWhen I run `brew install ruby`, it returns this:\n\n```\ntommbp:~ Tom$ brew install ruby\n==> Downloading http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.0.tar.bz2\nAlready downloaded: /Library/Caches/Homebrew/ruby-2.1.0.tar.bz2\n==> ./configure --prefix=/usr/local/Cellar/ruby/2.1.0 --enable-shared --disable-\n==> make\n==> make install\n    from ./tool/rbinstall.rb:789:in `call'\n    from ./tool/rbinstall.rb:789:in `block in <main>'\n    from ./tool/rbinstall.rb:786:in `each'\n    from ./tool/rbinstall.rb:786:in `<main>'\nmake: *** [do-install-nodoc] Error 1\n```\n\nIt then advises me to read `https://github.com/Homebrew/homebrew/wiki/troubleshooting`, which gives me nothing on the error message (I don't think). I've run `brew update`, all updated fine, and `brew doctor`, again it just returned `Ready to brew`.\n\nRunning `brew --config` returns:\n\n```\ntommbp:~ Tom$ brew --config\nHOMEBREW_VERSION: 0.9.5\nORIGIN: https://github.com/Homebrew/homebrew.git\nHEAD: 34ff9d0df69f551141a0eedd6f354913095c5471\nHOMEBREW_PREFIX: /usr/local\nHOMEBREW_CELLAR: /usr/local/Cellar\nCPU: dual-core 64-bit penryn\nOS X: 10.9.1-x86_64\nXcode: 5.0.2\nCLT: 5.0.1.0.1.1382131676\nGCC-4.2: build 5666\nClang: 5.0 build 500\nX11: 2.7.5 => /opt/X11\nSystem Ruby: 1.8.7-358\nPerl: /usr/bin/perl\nPython: /usr/local/bin/python => /Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7\nRuby: /Users/Tom/.rbenv/shims/ruby\n```\n\nAgain, sorry for all my problems, but thanks so much for helping me out :D\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35133303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "merrill-oakland": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35012026", "body": "I want to point out for people - this but all effects Ctrl-A (jump to beginning of line).\n\nAlso, George's fix of installing brew ruby, then reinstalling gitsh does indeed fix it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35012026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cristeab": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194171", "body": "Currently my prompt is always red because I have some untracked files (some of them are object files). I would prefer to have a prompt whose color change based on the current status of my tracked files. Some sign might be used to signal that there are untracked files. Currently the cursor is red regardless of tracked files status\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194646", "body": "Well, it might be a solution, but for cmake based projects usually a build folder is created just below the source root folder where all object files and the temporary sources reside. Using .gitignore it means that the build folder name must be fixed. \n\nIn my opinion having untracked files/folders in the source root folder is quite common, so that it makes more sense to have a prompt whose color change as a function of tracked files status and add another symbol suffix when there are untracked files. \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35194646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35197018", "body": "cmake creates all files inside a single folder, I guess that using .gitignore should be enough. Agree that using colours only might be an issue for blind people. Thanks for your help\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35197018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hoop33": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35533297", "body": "Thanks for the feedback! Yeah, I muddled my way through Parslet. I'll take another crack at it.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35533297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fuadsaud": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35542171", "body": "Is pull-request creation working? here it just won't open vim and fail as it doesn't have a pr message :(\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35542171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35542320", "body": "also I miss globbing :(\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35542320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35575824", "body": "both `$EDITOR`,  `$VISUAL` are set to `vim`. I'm not sure if I'm forgetting something :\\\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35575824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/36071897", "body": "I'm not sure what was wrong, but It's working now :grin:\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/36071897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marcioAlmada": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35546302", "body": "I was just going to make a similar suggestion too, but what I had in mind was `\\`. it's  ugly but wouldn't make anyone confused about bash `!!`. Ex:\n\n`$ \\ls -la`\n\nAlso, why not just `:`?\n\n`$ :ls -la`\n\nI'm not against `!` by the way, just giving my pet suggestions. I think this project rocks and this feature is a must for me.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35546302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35639406", "body": "thank you!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35639406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mauricerkelly": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35604868", "body": "@popstr thanks for raising this. I have a lot of branch names with version numbers in them (e.g. `mrk/2.X/feature-name`) and being able to use autocompletion beyond the period would be awesome. I'll watch this thread with avid interest :-)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35604868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bachue": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35635477", "body": "@georgebrock Great, thanks!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35635477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kaishin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35894776", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/issues/comments/35894776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "houndci-bot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10608359", "body": "Space missing after comma.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10608359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922335", "body": "Surrounding space missing in default value assignment.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922336", "body": "Surrounding space missing in default value assignment.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922337", "body": "Surrounding space missing in default value assignment.<br>Surrounding space missing in default value assignment.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922339", "body": "Surrounding space missing in default value assignment.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922340", "body": "Line is too long. [89/80]\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922456", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10922456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10967543", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10967543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195021", "body": "Line is too long. [83/80]\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195304", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11195304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11286155", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11286155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11286768", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11286768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11292246", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11292246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11295934", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11295934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194092", "body": "Line is too long. [82/80]\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194093", "body": "Trailing whitespace detected.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194094", "body": "Redundant curly braces around a hash parameter.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194095", "body": "Redundant curly braces around a hash parameter.<br>Use 2 (not 1) spaces for indentation.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194096", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194097", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194098", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194099", "body": "Place the . on the next line, together with the method name.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194110", "body": "Redundant curly braces around a hash parameter.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11194110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11296350", "body": "Prefer single-quoted strings when you don't need string interpolation or special symbols.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11296350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11296351", "body": "Prefer single-quoted strings when you don't need string interpolation or special symbols.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11296351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11435734", "body": "Line is too long. [81/80]\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/11435734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10765951", "body": "Line is too long. [82/80]\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10765951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10831917", "body": "Line is too long. [81/80]\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10831917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10831918", "body": "Line is too long. [82/80]\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10831918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "drapergeek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14296371", "body": "More consistent docstring possibly?\n\n```\nit 'returns the overridden constructor option' do\n```\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14296371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14296389", "body": "`it 'is true..'` instead of 'returns true' maybe?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14296389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14296401", "body": "Same here, instead of returning false, `it 'is false'`\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/14296401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "zamith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10341638", "body": "We could have done this with\n\n```\nline_buffer.gsub(/#{input}$/, '').end_with?('\"', \"'\")\n```\n\nwhich I think reads better.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10341638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10409383", "body": "Something like this?\n\n```\nline_buffer.gsub(/#{Regexp.quote(input)}$/, '').end_with?('\"', \"'\")\n```\n\nProbably it is not a big gain, you're right. And it is a private method, so the implications are not big and it can always be changed in the future.\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/10409383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jessieay": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22730908", "body": "I haven't seen this syntax with `fetch` before (that is, having anything beyond `fetch(:foo)`)- what is the purpose of passing `{ nil }` here?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22730908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22730978", "body": "I am wondering if these changes make sense in this case - if we are going to raise an error when the config var isn't set, why not just call it normally rather than `fetch`? Is it just so the error message is more readable?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22730978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731051", "body": "Interesting - so how is this better than what we had before? (I previously understood the benefit of `fetch` to be that it would not return `nil`)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731190", "body": "oh wait, I think I may have misunderstood. This is if the KEY doesn't exist, not if it doesn't have a value. Nevermind then! :)\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731374", "body": "newlines to separate spec phases?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22731374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22732100", "body": "would be helpful to make `\"!echo zzz\"` a variable here (to be used in `run` statement and in expectation) - would improve readability of test, in my opinion!\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/22732100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Euraldius": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23226368", "body": "Should `orginal` be `original`?\n", "reactions": {"url": "https://api.github.com/repos/thoughtbot/gitsh/pulls/comments/23226368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}