{"_default": {"1": {"mptre": {"issues": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/269", "title": "Sanbox support for more operating systems", "body": "It would be interesting to investigate adding support for sandboxing on\r\noperating systems other than OpenBSD where [pledge] is available.\r\nThere's seccomp on Linux and Capsicum on FreeBSD. I wouldn't worry about\r\nthe portability at this stage, just the code required to get it working\r\nwould be a great start.\r\n\r\n[pledge]: http://man.openbsd.org/pledge", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/calleerlandsson/pick/commits/807addf75b5bec8b27e146b05813c8a70e4f6309", "message": "Update release notes"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/8794aa989fab07e499ab684de8e2f2b9ec9050b3", "message": "Update version to 2.0.1"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/cee420d15cc94251121245e6918173d1225502d9", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/4223dfb1403b15e9298a800c2e7022d7084d3404", "message": "Update release notes"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/099f808ab2b9e60b520424534ec5d981474a57c5", "message": "Remove a cast since tparm takes a non-const char pointer"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7d60299c42880ed15461d327b90573e277c4f01c", "message": "travis: execute script in a subshell enabling errexit and xtrace\n\nEnabling errexit on Travis could interfere with their scripts, therefore\nuse a subshell. The xtrace option makes debugging easier."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/fe86c66614ceadb36972842545bd76a32f0dfd88", "message": "Simplify logic used to determine when choices must be re-displayed\n\nEnabling dofilter implies dochoices by now. Therefore, there's no longer\nnecessary to fiddle with dochoices for each key binding that doesn't\nresult in filtering of the choices."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/494ce2987cce653b221e6eae24cc2571d7b867c4", "message": "Ensure correctness while typing a query fast\n\nTyping a query fast enough to trigger the poll check in filter_choices()\ncould yield a wrong set of choices. Since filter_choices() is\ninterrupted, all choices have yet not been examined and potential\nmatches could still be left unexamined. Calling print_choices() in this\nstate causes the unexamined choices to never be reconsidered as\npotential matches since they will have a score = 0. The solution is to\nnever call print_choices() if filter_choices() was interrupted.\n\nProblem reported and partial solution provided by Jenz Guenther in\nGitHub issue #268."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f553d4a7415139f0f56722659584bca59d07f94a", "message": "Bump pick-test timeout\n\nNeeded when compiling with the `-coverage' option since it writes\ncoverage data upon exit. Ideally, the timeout should only be increased\nwhen running under these circumstances. However, the tests finish much\nearlier if all is well."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3c1e29ff2c7b31e2e04994d1d02fcd81da7fd2ba", "message": "travis: enable codecov.io\n\nNecessary to use the check rather distcheck task since coverage files\nwill be present causing distcheck to fail."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e9edbc6623b0c55d5534667ba91666145fea851c", "message": "travis: switch on BUILD_TYPE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9e52dd980ba4f64132c67535f70d485468eae57c", "message": "Add missing tests for right key\n\nDiscovered using lcov:\n\n$ env CFLAGS='-g -O0 -fprofile-arcs -ftest-coverage' CC=gcc ./configure\n$ lcov --base-directory . --directory . --zerocounters -q\n$ make check\n$ lcov --base-directory . --directory . -c -o pick.info\n$ mkdir html\n$ genhtml -o html pick.info\n$ xdg-open html/index.html"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/2a34f97cf9a10f2db22d5cd7e27d7dda0160f114", "message": "Do not use the escape sequence for literal escape"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/388c8812657db7c989a6a00b3683a205489ba33f", "message": "Allow multiple tests per file to actually run\n\nDo not clear the input file after each test run, obvious mistake since\nit only allows one tests per file to be executed. My bad, regression\nintroduced in commit 54b1e43 (\"Add toggle sorting key binding\")."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f6401823b7918be03190a07ac4c6fb0170bba6c2", "message": "Update version to 2.0.0"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/83ed055b8a6d77e7edc45509ff5e4cdcf8268560", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1e8fb53f5dbbe1f29c3d68df2b5ae9bb8a0a0285", "message": "Only redraw the choices when necessary\n\nSome key bindings only affect the query and unconditionally redrawing\nthe choices is therefore a wast of time in such scenarios.\n\nOriginally proposed by Jenz Guenther in PR #254."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d36423b2ba7b0a3437b3721e41b700cb0481194c", "message": "Add toggle sorting key binding"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f833b3a11cbae418807796f2c1102520bcd3d2ed", "message": "Fix exit code for h option\n\nSurprised to find out that the h option has been broken from the start."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/54b1e4357ad22f4109be4135d27b49503e4dca3e", "message": "Do not run each test in a separate process\n\nFixes a severe bug where the exit code was incorrect for failing tests."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c80bf1b823a80970e7d5fe6d72f61dc43567676c", "message": "Add missing tests"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b4f21f664a718b3472f2d0d72f5a8574c1037e29", "message": "Fix test failure cause bug"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6186e3bcbb7ed8104637225eaa7c951dad0d8593", "message": "Rename tests to match implementation"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/8b0db62880754f1071bc08a1df289e8d8b23f661", "message": "Cleanup tests"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5f74382b9784ab403919bec9d23d3a5059b1454e", "message": "As of OpenBSD 6.2 pick is now available as a package\n\nUnfortunately, 1.9.0 did not make the cut."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d9f827fb853301b82509f9da64ad48a431aebfc3", "message": "Consolidate tests"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f9e02561ba933609e39db64b759c1721fe3c2d97", "message": "Allow multiple tests to be specified in a single file"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/54895b7adc443a4278791c88df7379f049716ac6", "message": "Error out on mandoc style violations"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/494e330051d42d8ae7274febe4ced5cc3bbbacd2", "message": "Rename DEVELOPING.md -> CONTRIBUTING.md\n\nIn order to match the conventions defined by GitHub."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/2a66f5dff2be38a4da7f3cb79e2d4ff5e6f1152b", "message": "Always cause realloc() to reallocate on OpenBSD\n\nIncreases the chance of catching dangling pointers."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3b69d1dc1bdf153b9f4b8fe004cae844275e081f", "message": "Lowercase markdown references"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ae843493453312d428d57a8105c21a966aac66b6", "message": "No need to quote the arguments passed to eval\n\nPointed out by Jenz Guenther in issue #253."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/031817f6d9b544606fb8fac273c7040359851f86", "message": "Use eval in example\n\nOtherwise, aliases won't be expanded. Pointed out by Jenz Guenther in\nissue #253."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/274969a223c59a54aaff537aea748d7b6768b23f", "message": "Do not ignore return value from mbtowc(3)\n\nFixes an issue discovered while compiling using GCC 4.7 on Debian 7 by\nJenz Guenther in #255."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ad5735532ec41cb1e6d656a2720bcfabc685a2d3", "message": "Update example in manual\n\nReplace example with a more portable but equally useful one. Proposed by\nJenz Guenther in PR #253."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/bdc6a2617cde2aed6e64840e24add03851871858", "message": "Initialize variable\n\nIn order to silence GCC 2.95 and 4.8.5 on NetBSD. Sure looks like a\nfalse-positive too me. Reported by Jenz Guenther in PR #251."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c0c18efcd3aec716969938a163304b00e3e16b09", "message": "Low-hanging optimization\n\nIf the user didn't add more characters to the query all choices have to\nbe reconsidered as potential matches. In the opposite scenario, there's\nno point in reconsidered all choices again since the ones that didn't\nmatch the previous query will clearly not match the current one due to\nthe fact that previous query is a left-most substring of the current\none."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b1a030f0b5691612b3e5dd7f28ee3df66d955327", "message": "Consolidate calls to filter_choices()"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/a380b411448394e9653ae70789d3dd8153e30618", "message": "Ignore OSC escape sequences\n\nIt was brought to my attention that pick didn't handle OSC escape\nsequences correctly. Make sure to ignore them while calculating the line\nwidth for each choice and ignore them while matching."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e8213072769d5edd29e335f21e8627450c67f988", "message": "Breakout logic for ignoring escape sequences"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/29b9020fbae9844960588c489bb09c5e697c4cdb", "message": "Add a couple missing tests\n\nNot covering any new behavior but it increases the test coverage and the\nchances of finding bugs/regressions. Discovered using gcov(1)."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/687f2021693b4b31b22e2f4ecd6a11dce0bfc207", "message": "Fix typo in test case comment"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/21f16d03023c75f0297420fbfd60a69ad75386cc", "message": "Inline CCEQ macro\n\nMakes pick compile using musl-libc, reported by Michael Gehring in #249."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3fed462698954e08110cd3f12f20c31879294205", "message": "Add missing break"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/608c56a29c78379f1e412e026169364903add87d", "message": "Update README\n\n- Remove outdated from source installation instructions, we no longer\n  use gpg.\n\n- Mention how-to run the latest unstable version"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f61fe2bb3b501fcbbc1e754b1ae21d918cf23111", "message": "Update release notes\n\n- Add version bump commit message template\n\n- Verify the checksum\n\n- Add mail headers template suitable for use with mutt(1)"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5180eadb7aecc1e2174cdf000523f9fdc793bb79", "message": "Update version number to 1.9.0"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6b717f5473ed575dd97e05e9e930225ec9226daa", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5339e347b5016953b024e9ab5fb4512d5d98be2f", "message": "Update release instructions"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6fca1c4d25566463e3711d216744515d1ad23696", "message": "Add K option to disable toggling of keyboard transmit mode\n\nUseful when running pick from within another interactive program (like\nVim) which does not re-enable keyboard transmit mode after executing an\nexternal program.\n\nFixes #246."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9886750f0bf271507d3893376e0cbe369ffcad84", "message": "Explicitly handle control characters\n\nThe current SIGINT handler is not considered safe since it invokes\nfunctions that are not considered asynchronous safe[1]. Quoting the\nCERT C Coding Standard:\n\n  In general, it is not safe to invoke I/O functions from within signal\n  handlers.\n\nInstead, do not turn control characters into signal but instead handle\nthe relevant ones explicitly. A pleasant side-effect is being able to\ntest the Ctrl-C error path.\n\nWhile here, fix the broken suspend/resume behavior by resetting the\ninitial terminal state prior suspending and re-read it upon resume. I do\nactually use suspend/resume while running pick when I forgot to check\nsomething that will affect the choice to select.\n\n[1] https://www.securecoding.cert.org/confluence/display/c/SIG30-C.+Call+only+asynchronous-safe+functions+within+signal+handlers"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/78a02b663c5faa01f1957abf4e0d83110df55433", "message": "Add missing paragraphs to examples section in manual"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9034255e2fb617044d267751ac8c966a0eb0790b", "message": "Fix broken INSTALL.md.in path while running `make distcheck`\n\nThe distcheck target ensures that the distribution tarball is\nself-contained, i.e. using only the files present in the distribution it\ncan create another identical distribution[1]. While doing so, we can't\nassume that the current directory is the top-level.\n\n[1] https://www.gnu.org/software/automake/manual/automake.html#Checking-the-Distribution"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ffba8008d0f7b218aa04f3283b612bb9e186d2f9", "message": "Make obvious use of xmbtowc()\n\nShould have been fixed in commit 1a4888f (\"Unify mbtowc() invocation and\nerror handling\")."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f6b44faa6a43e315409509d4ccf046a328137eac", "message": "Consistently use size_t while counting choices\n\n- Since we can have SIZE_T_MAX many choices, don't use plain signed\n  integers.\n\n- Make `choices_lines` unsigned to keep it consistent with\n  `tty_{columns,lines}` since commit b5fe77f (\"Make tty_{columns,lines}\n  unsigned\").\n\n- Drop (by now) redundant casts to size_t\n\n- Rework some logic in order to prevent doing subtraction on unsigned\n  integers since it could result in wrapping.\n\n- Rework the complex loop in print_choices() by keeping the upper bound\n  in the loop declaration. The other loop condition is better suited\n  inside the body of the loop. This convention is in general a good rule\n  of thumb while constructing complex loops."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/964b75bfc887603343e8544eb05d79317b5fe9a8", "message": "Clarify that the alternate screen is used by default"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6713d37a5da762af3d08e31911bb24a22b34e691", "message": "Improve the semantics of the manual\n\nDon't treat the slash delimiter as part of the key binding."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/adbb33ca2fb9a52cd5a497618d423a355d24d1c7", "message": "Wrap macro arguments in parentheses\n\nFound by clang-tidy."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/2092491ac5c6ff2dc405f4fd62287c35794b812f", "message": "Add clang 5.0 to the build matrix on Travis"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1a4888f9c13e3101a881dd5ebcd4df85820249d9", "message": "Unify mbtowc() invocation and error handling\n\nAn abstraction worth performing since we can unify the internal state\nreset and there's currently no need to distinguish between the two\nscenarios where mbtowc() returns -1 or 0."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7a7ab4aaf1d8260db4d23d5925bd645bea3e453f", "message": "Refactor get_key()\n\nSimplify the prototype by only passing a pointer-pointer that will point\nto the input buffer upon return.\n\nWhile here, declare the buffer as unsigned since the signedness of char\ncan differ between platforms. This issue was also pointed out by Jenz\nGuenther in PR #217."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/48b0ec2e0bd120862a036e3ad1996f1feb47d35c", "message": "Fix cast\n\nShould have been fixed in commit 7b99e29 (\"Use a double for score\")."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b2081bd80c207072b4154b6f6ae4596be54f1233", "message": "Avoid integer truncation in choicecmp()\n\nIf the size of stdin > INT_MAX the returned value from choicecmp() could\nend up being truncated. Therefore make sure to only return integer\nconstants based on the result of the comparisons."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b5fe77faa22a4ff8cc6a693427dbb650a925fb63", "message": "Make tty_{columns,lines} unsigned\n\nBecause having negative dimensions doesn't make sense. This is also\nconsistent with `struct winsize` where both ws_{row,col} are declared as\nunsigned.\n\nAlso, guard against negative cols and lines terminal capabilities."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c1e0a91da15e1bb250560cccb80414a4dce78208", "message": "Recognize alphanumeric and underscore characters as words\n\nThis is equivalent to the ALTWERASE algorithm.\n\nBased on previous work done by Jenz Guenther in PR #231 but further\nenhanced to support UTF-8."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/073ea930b986317109a26042c1bb8c52f31005f8", "message": "Update release notes\n\n- Pass verbose option to tar(1)\n\n- Simplify tagging instructions"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/de3f53d99ab2096c88cb0b32f67c8c8772f7c253", "message": "Don't ignore distribution files\n\nMakes it more convenient to inspect the outcome of `make distcheck`."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c9cfd51236859b170c149ba5daf50c1bbd3d237c", "message": "Update version number to 1.8.0"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e86e5443f33fc5723c91d79aac5c44b3f8924cda", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e3332e203b8bb8797735ec08cea5a6d37203620e", "message": "Update release notes\n\nAfter discussing the release process with @calleerlandsson and\n@mike-burns we decided to stop signing releases in order to simplify the\nprocess. Instead, a SHA-256 checksum will be available for the release\ntarball."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d7d25a80c4101a9f3261b7cda4b92456c6e9db75", "message": "Favor the shortest match\n\nInstead of unconditionally returning the length of the current match,\nmake sure the shortest match bubbles up along the recursive call stack.\n\nNote that this bug only occurs when a choice contains multiple instances\nof the query and the right-most match is the shortest one. See the\nexample below including the choice, query, match prior this commit and\nafter:\n\nChoice       Query  Before       After\naa/\u00e5\u00e5/aa/aa  aa/aa  aa/\u00e5\u00e5/aa/aa  aa/\u00e5\u00e5/aa/aa\n                    ^      ^           ^   ^\n                    |------|           |---|"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/50e964545406b22849c9eaca17a720b4fe5ce7b7", "message": "Mention SIGWINCH in manual"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c9457c071bf75b57c3f251322fe69c4a003b6c3a", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/50e274842ef7672136a75da626c97e1c09f13ddb", "message": "Fix scroll up bug\n\nHow to re-produce, press PageDown repeatedly:\n\n  $ env LINES=10 ./pick -X <LICENSE\n\nReported by Jenz Guenther in PR #232."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/37500b20636c9b17a644e8c582b2ee344d70b5d5", "message": "Fix indent in DEVELOPING.md"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/790ec2da0176d9f1077856370b8f5fd8c641069c", "message": "Mention Coverity Scan as part of the release process\n\nWhile here, drop the pager in the example examining the release tarball."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c733c62d49d538dfb0a61b38c2624cfc3708c813", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5969e965684a2a47dfd2c89327e280888c7ddaec", "message": "Add SIGWINCH support"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b630f0dc6ebd1ceba0653115f6a499575637f52b", "message": "Drop pedantic compiler flag\n\nRequired by compat-strtonum.c which makes use of `long long`."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5491427b5515ad7303b2f4f896e59a0f551fb61a", "message": "Fix TTY size precedence\n\nPrecedence order: environment variables, TIOCGWINSZ, terminfo"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b7b0429fc83e2b9b01ad52406fdd04067ceeb9a9", "message": "Remove outdated comment from Travis configuration\n\nWe no longer need an up-to-date version of autotools due to commit\n054b323 (\"Lower requirements for autoconf and automake\")."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1ef79707e3d6b5110335f311cfc7a3068a009588", "message": "Fix and simplify xscroll\n\nIssue reported by Jenz Guenther in PR #230."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e2b06a6b622b124b9b982fc4abb93188dd6d70b1", "message": "Disable colored test output by default\n\nOne can still opt-in on using colors:\n\n  $ make AM_COLOR_TESTS=always check"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/2fc1ac741c598f5bcee02d47adf6855d9caf6630", "message": "No need for sudo on Travis"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/63b61387cd8b8d5253abdca836196834a4f5edf3", "message": "Install cppcheck using the APT addon on Travis"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/50e2176ab50680b9bfce7739fede90d50e51b3cb", "message": "Consolidate CONTRIBUTING.md and DEVELOPING.md\n\n- Since they overlap, I do think it makes sense to keep the info in one\n  file.\n\n- Elaborate a bit more on the steps one should take before submitting a\n  PR.\n\n- Don't make any promises about getting back in X days.\n\n- Formatting"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f493b93c7e832be768457135eae2e903335544f7", "message": "Run Coverity Scan on Travis"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3e04320ea15bbab0fca15b61807af35a4a13f373", "message": "NUL-terminate the input buffer by assignment rather than using memset()\n\nWriting a final NUL-terminator is sufficient rather than zeroing out the\nunused slice of the input buffer. Suppresses a false-positive reported\nby Coverity Scan.\n\nCoverity CID 163308; Severity: Insignificant"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/cd3fccaf9d4a3d4304962c1587859aafae809bf4", "message": "ASAN and UBSAN can be combined"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1cdf59294ed6626aae7ff25852c43eab2d5786d5", "message": "Prefix UP since it's already defined on NetBSD\n\nAlso, prefix DOWN for consistency.\n\nIssue reported by Jenz Guenther in PR #216."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d3a158d6eec3c998a16b66932b53253011d47c30", "message": "Always pass 9 parameters to tparm()\n\nSome implementations like NetBSD have a non-variadic prototype of\ntparm() requiring 9 explicit parameters. Therefore always make sure to\npass 9 parameters. Since other implementations uses a variadic prototype\nit will work on them as well.\n\nInspired by how this solved in the portable version of tmux.\n\nSpotted by Jenz Guenther in PR #216 and later fixed in PR #218."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/421197ef4555a41f53edde12a9fb4f94a888d88a", "message": "Use complete names in CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/31799d8be146322892eb55ce6e8823e67e83219b", "message": "Swap __dead and static"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/fcfbc10e618d25d210f54100c068275af5722eb2", "message": "Use the more common type declaration of argv in main()"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/8179104a0cfbfcff2638a3950091b585c66e0275", "message": "Pass keys to pick-test using a file instead of literal argument\n\nAllows newlines to be passed as is without escaping."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/15606861702134134703f1fa76e25def4249b5a4", "message": "Run cppcheck(1) on Travis"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ce4e1b9129ab32bf30a70b26be5dfbd329816fdf", "message": "Rework Travis configuration\n\n- Use an explicit matrix instead of excluding\n\n- Split the build into two types: default and mandoc\n\n- Use literal blocks for shell scripts"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/8a70fe7e8f5bd46bb3a1451d93d9b2a1ca7821fa", "message": "Disable IEXTEN to solve Ctrl-V conflict\n\nWhile here, sort local mode flags."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/369eb665d59cc0374c690068a4c1f609e99c3280", "message": "Accept env vars in tests"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/975e39346a0af22ce2586f75d7d0d1e0793eb0b0", "message": "Sync comment with code\n\nThe comment was invalidated in commit 1ee1a1d (Use a modern terminal in\npick-test).\n\nWhile here, fix alignment of another trailing comment."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/478e7154295e31e0100d1a56b15af65ea22155ea", "message": "Add missing compat-reallocarray.c source to pick-test\n\nRegression introduced in 58b17e0 (Use reallocarray in pick-test)."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/58b17e05d58e6f8f94893433d7607591f828e995", "message": "Use reallocarray in pick-test"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/be071ece5b1fc74d9e1aa3559df988e7dbbdbc5a", "message": "Rename compat.c -> compat-reallocarray.c"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/aef7c4859ecabec0dccf80c1a7c280786670a238", "message": "Join conditional"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e894dd0b7346fb6fc22e81c36863a0306721ca8f", "message": "Make sure $IFS is not an empty string\n\nWhile here, shorten the name of the variable."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/edbc0cb307786d672dc8b781edf781e33b65f9d6", "message": "Align struct members"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/dd29ca203d48a9a6ec7211f87939a84b7e988fe6", "message": "Declare functions as dead\n\nFixes #202, an issue discovered while compiling pick-test with GCC 7."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/bf666ed43d3e13c4234487585589f82370608d8e", "message": "Revert \"Only define __dead if it's missing\"\n\nThis reverts commit 7f5694ac1cf3a68b462a9f22e03a12a719249ee5.\n\nPartial fix to #202."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/87bf34056da9b7ce9a3c9d8dd81f5ea4b903335b", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/19ff2ea3d2699d1a2e6848236447bc9de070fe0a", "message": "Define END and HOME using terminfo"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/71f95058f5b884fb707d6b84c7080314293f8d89", "message": "Mention the choice of TERM and its implications"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1ee1a1d45e66c6b9384aa1ff6fca03b73ab33e23", "message": "Use a modern terminal in pick-test\n\nAlso, overwrite any existing value for the mandatory environment\nvariables. This is of important in order make the test environment\nconsistent."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b8857fd9d207b7c8c520d3b4b2199816aca07ba9", "message": "Read keys defined as terminal capabilities from terminfo\n\nA first step towards making pick truly portable. Defining a key using\nthe new CAP() macro will read the corresponding value for the given\ncapability using tigetstr(), the result will be stored in the keys\nstructure in order to only invoke tigetstr() once per capability."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ecdca3d66c6ccdb4a43e3c7a2d80f224223bac12", "message": "Don't move the cursor upwards if no choices where printed\n\nFixes #98 and #196."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/84410ec8fc6fc7ffc0e56f1ad43f6113738e8534", "message": "Improve description of tests"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/61a5ae5603d275d6fd531346f51f0e87c8cc72c6", "message": "Map CR to NL\n\nInstead of explicitly list all key bindings that could be either CR or\nNL, make use of the ICRNL input mode."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9086de213c8f052bc8ea96b22d48be12705a09c2", "message": "Update tests/README\n\n- Use atx headers\n\n- Break on period and comma\n\n- Improve markup of fields"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f37e5e8d2605e68c3f36c224d9109acc993ab2fc", "message": "Run mandoc on Travis"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/368d37d575a30c0e7f98cccf6665fe23a759038b", "message": "Enable UBSan on Travis\n\nCurrently only available on Linux using Clang."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/74aa733b8f111e4238ec129fb29331c1dd0a4f72", "message": "Make get_key() return PRINTABLE\n\n- Removes the need to validate the input buffer in get_choices()\n\n- Returning an enum gives us nice compiler warnings if a new key type\n  where to be added"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5b237d3418264434e6f4a85b869488c4fe881b09", "message": "Rework handling of unrecognized escape sequences\n\nMake sure to check the last read character prior reading a new one."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/bfe26ae454a3ae2bc875da6492cf7057b71dc9ff", "message": "Replace goto with a nested loop"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c16475f6e1097a729b5f3886ca4c32a6796c33be", "message": "Define keys using a macro\n\nI find this a easier to read and less error-prone due to usage of\nsizeof() instead of explicitly stating the length of the sequence."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7b99e290d52fa4ac9d53c083552929c49d71640f", "message": "Use a double for score\n\nIncreases the precision and removes the need to pad `struct choice`\nusing 4-bytes on 64-bit architectures. Spotted by `clang -Wpadded`."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/46650b8679e9d1a062ad93afd5ee6171d8324a8d", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/db2d9f4e7d14ed907194b38275363a72b2c7cbca", "message": "Fix tab output bug\n\nIncrement the column counter prior decrementing the calculated width of\nthe tab.\n\nRegression introduced in commit 369350b (Calculate the width of each\ndisplayed character)."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9eb2ca7bafd87cbee7aebc62a9ae49409cce2770", "message": "Add OpenBSD install instructions"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/50871c100ce9196a3d3d5f91a48e8c9db4fcbafa", "message": "Copyright++"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d14add4c4b392145d9b30b8d9a476f4ca66319ce", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ffb4ca48e9efd1eae7ebc61f30f4eee2c5ba609e", "message": "Define _GNU_SOURCE\n\nRequired by posix_openpt(3) and wcwidth(3) on Linux."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/369350be78940f1a15273c747788cbc1aa331380", "message": "Calculate the width of each displayed character\n\nIn an attempt to fix a bug caused by lines including Unicode characters\nthat occupy more than one column.\n\nWhile at it, fix another bug related to the column counter when a line\ncontains more than one escape sequence."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3c0b407b1accba4b4227737b644095735455decf", "message": "Don't match strings inside escape sequences\n\nIf a match for the given query is found inside an escape sequence,\ndiscard it.\n\nIn order to test input containing non-printable characters, its passed\nthrough printf(1)."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f550192b24bcda56476fb8b3e67f1b5c05d480de", "message": "More const"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/59ac70fc032996f4ab929d0f3d305f4172563df9", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/bb0ef4f21430d3fee2ffe304ec1dbab478dfbcbc", "message": "Postpone initial pledge call\n\nProposed by Theo Buehler on the OpenBSD-ports mailing-list[1].\n\n[1] http://marc.info/?l=openbsd-ports&m=149199039810675&w=2"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/136a8b5ede3a73fd071eecb3fb819d111b1bdcc4", "message": "Indent trailing comments using tabs"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e3a52070aac2102a350c1820969595f8000bd7ed", "message": "Remove usage of sysexits.h\n\nA recent discussion on the OpenBSD tech-mailing-list[1] brought to my\nattention that sysexits.h originates from sendmail(8) and further usage\nis not encouraged.\n\n[1] http://marc.info/?l=openbsd-tech&m=149191614721371&w=2"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/fd824f5c92852784b1dccb38b830d918209c8c28", "message": "Don't pass uninitialized memory to the kernel\n\nFound by Clang."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/618a4901cf2247802b29833b5e5cc5f0e520217f", "message": "Fix order of diff(1) arguments in pick-test.sh\n\nThe name of the output files was also inverted."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/63c7da5d98f950e103c034396fb0204111f1e25d", "message": "Plug memory leak\n\nAn intentional memory leak was introduced in commit c6bd924 (Remove\nglobal input variable). Fix the leak in order to silence ASAN."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/2a5196ad287e00bf669e7549b5ea304cc0bf2e8a", "message": "Fix broken cat of test-suite.log on Travis failure\n\nThe test-suite.log is located in the dist-directory which depends on the\ncurrent version of pick. Use find(1) to locate the file instead."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5c339d8e8006e4792380af678d14df6af4e889ac", "message": "Enable ASAN on Travis"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/aa5429d963b3d2f08425322d337bcd0628e51203", "message": "Setup crucial environment for pick in pick-test"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9c3cdf1a064d7401fa9b4805d44adc05f0fda862", "message": "Rename tests/test.sh -> tests/pick-test.sh\n\nFor consistency with tests/pick-test."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/4018a79cad9fdedecbb9309290f44991ac85cc41", "message": "Use same CFLAGS for both pick and pick-test"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f218e9337b12634b9aec289d38f0ce86bed5de68", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7f5694ac1cf3a68b462a9f22e03a12a719249ee5", "message": "Only define __dead if it's missing"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/4ccdeb71c8652950c3ea9cc85e5d8be093aa7fcd", "message": "Inline score function\n\nThis is a hot path and it looks more like a left-over from a previous\ndesign."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f000e34628a31f4ab26ce5b5db0dae09f25c497e", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b4c86567b0b74d4a3d09f544211f03bd1bad8727", "message": "Fix undefined behavior\n\nShifting a signed integer is undefined, found using clang UBSan."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7cdb4ad19ac394643a557c7c37a60652809a2630", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/445da1d05bf6116e56529b4f72cf0d8e79160d7e", "message": "Recognize carriage return as enter\n\nFixes #177."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b05811ca4bf8bd9672794369d4ea92fc05193e8c", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/647b734e0c9a221e3f93b05ffa24cc7685971686", "message": "Optimize min_match\n\nInstead of advancing to the next character in the string to examine,\nmove passed the first occurrence of the first character in the query.\nThis is the only place another potential match could reside.\n\nThis is an order of magnitude faster on my machine when the number of\nchoices with a match is large."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/dedf9622bee96dd3bab328e2cd2fa7dcf720a373", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/42c81973e30cdfc3c2eb98f528584effdc639586", "message": "Favor the shortest left-most match\n\nPrior this commit, aca would be highlighted as opposed of aba:\n\n  echo aba aca | pick -q aa\n\nIf the match is longer than the query, the shortest right-most match was\nfavor due to a bug introduced in commit 97b510a (Optimize min_match).\nLEQ should be used since the algorithm is recursive."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e79721abe9d43189eeb758670ac2ba36990b45d4", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d914904430a8c2f573401cfa50d5c043dd69316f", "message": "Fix underline spill over bug\n\nIf the end of the match is greater than the number of columns the\nunderline attribute will spill over on the next line since it's never\nexited. Running the following command before/after applying this commit\nhighlights the bug:\n\n  for _ in 0 1; do\n    jot -n -s '' $(($COLUMNS - 1)) 0 0\n    echo ab\n  done | pick -q ab"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/cd0ea8b1cb64573b3800dc6a9fb2d65e6eeec8c3", "message": "Remove unused autoconf checks\n\nValidating existence of things that hasn't changed since the 80s seems\nwasteful. Especially when the types, headers and functions to look for\nis out-of-date in respect to what's used by pick.\n\nLooking for the two non-portable functions pledge and reallocarray makes\nsense and is therefore kept as is."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5659e387223f9d0763ad966b538aaaea4069383e", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5d9e12becd3b1941de0fff972ca4618bf801095d", "message": "Cleanup man page\n\n- Less verbose by reducing the usage of Nm\n\n- Mention stdin/stdout for input/output\n\n- Sort options, disregarding case\n\n- Turn option descriptions into sentences\n\n- Update cross-reference: ncurses -> curses\n\n- Move keys into commands section, inspired by less(1)\n\n- Simplify examples using Dl and add prefix with shell prompt, de facto\n  standard to emphasis on the privileges needed to run the command\n\n- Add diagnostics section\n\n- Remove redundant quotes around authors and turn emails into hyperlinks"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b2925c4d8e038cf437ce3c8202afeb824acea529", "message": "Move tests to EXTRA_DIST\n\nAs previously discussed, this is the intended use case for EXTRA_DIST\ninstead of treating the tests as dependencies of pick-test."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/bc0e8ef0e7e215aec8034c22c42e3ed65017b9b6", "message": "Add missing new line to test case\n\nShould have been introduced in 1aad04e."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3c03f7b1147c278bd27ba3b2ddba02c364bfd146", "message": "Simplify exit code\n\nThe error message is more helpful than the exit code."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f73689257a21a0bb1ff944b4a4cfd67bdff3f64e", "message": "Don't look for pick in PATH"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d5d71c88f982b84e5b3fae1d39a602cc7e98e282", "message": "Exclude GCC macOS build on Travis"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f92665db9df3675b5d386c8495bb07f7c3f0c2ee", "message": "Wrap CHANGELOG references in parentheses"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/426b0bdd19b59e0141e567066db47c56cda9cd25", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/85543a3dc556e5d7a19851e09cee373a1e4dd4a5", "message": "Favor linking against curses instead of ncursesw"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d960563de32c3eca74c8090d45d038cd40b12ed4", "message": "Fix macro indent"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/485b436f1882c6e8981af34e111df46ab41d8d5d", "message": "Fix off-by-one bug\n\nDue to usage of strict less than. While at it, swap the operands since\nit reads better to me. Discovered by tests/41.t and the new malloc\ncanaries on OpenBSD."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f51c2e9d50c508c95ff07c083282984cc555b6a8", "message": "Add Travis config"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/0c8972e73720a2a120b7ca943ec51b367e814d36", "message": "Make tests/test.sh executable"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/df367e44085a4d0982a012e9d05a403162a12524", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/506a393b23f41d0c35445af86ddd19353e316171", "message": "Conditionally disconnected the controlling TTY\n\nA missing controlling TTY is not a fatal error but rather a good thing\nsince there is no TTY to disconnect."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3b5520aa5b8095fe836c521549d1d6b240432394", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/860b9312114f0b8a4f4e4458a65bf5688b0ad22a", "message": "Check MB_CUR_MAX in UTF-8 functions\n\nBorrowed from OpenBSD."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7c30d660530794d53720b958218c396cbfd0d909", "message": "Make min_match return the length of the match\n\nRemoves the need to calculate the length twice."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/231ec026ce624ead52f4cc5930c4b17338d39790", "message": "Cleanup strcasechr\n\n- Remove space after tab\n\n- Make loop-condition explicit\n\n- Join conditionals"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6e8dacdc826915caf5efdf8d9648f3cc2a399d30", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/903729973a0a48eb1bf4db5bc7a65e7c77190221", "message": "Don't exit for some missing capabilities\n\nAll terminal capabilities used are not critical for pick to behave\ncorrectly, such as {enter,exit}_ca_mode and cursor_{invisible,normal}.\nThis change makes pick work in OpenBSD console where TERM=v100."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/046db0cff0ec7f92ad0403c747df53a71adbeeeb", "message": "Continue in empty loops\n\nReplace empty loop bodies with continue. This communicates that the body\nis omitted on purpose. Idea borrowed from OpenBSD[1].\n\n[1] http://marc.info/?l=openbsd-tech&m=146480130130222&w=2"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/60fb41e475761f01baf7820fe58ddb4aa3a1f952", "message": "errc is not available on Linux, use errx"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/825966e3d998b50c4de8e4102a8826b3946f5b42", "message": "Use choices_lines\n\nShould have been included in 754da66."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d775f88dae31448d469e0a8739cb888f451928b6", "message": "Remove redundant strlen call, use query_length"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1f6c0f1a44ab852f64a32a6a5c83d1699169224a", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7003d935a5ed1f268824181b58f68655ff1e2c2b", "message": "Add comment support to tests\n\nIn order to clarify the used keys in each test case. Comments may be\nplaced anywhere on a line. This works since a leading comment will be\nevaluated to:\n\n  eval \"# comment goes here=''\"\n\n... which is an no-op. Trailing comments are stripped using a sh(1)\nsuffix substitute parameter."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/0dc81e54ffa70c6d0e41d7c7c7241c899a66b00b", "message": "Cleanup pick-test.c\n\nThis is an attempt to make the code look more like pick.c\n\n- Add function declarations\n\n- Move main function definition to the top followed by usage.\n\n- Use a switch with fork(2)\n\n- Improve ioctl error messages"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/346c4ece91ea2d4bc8228afdc175fbc9c3618727", "message": "Add CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6058de8bd0c6bd2c6539b7c0e9a1bfd30ec2778d", "message": "Remove usage of save and restore cursor\n\nUsage of cursor save and restore capabilities is non-obvious. Moving the\ncursor the appropriate number of lines/columns is easier to follow.\n\nWhile at it, make the query cursor movement a single operation as\nopposed of the current implementation which is linear with the number of\ncharacters in the query."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/2ac93c8b2d02e60fbca4c38552cc3f71870af675", "message": "Discard unrecognized escape sequences\n\nIf the user inputs a unrecognized escape sequence longer than the size\nof the input buffer, parts of the sequence would end up in the query.\n\nSince the sequence should be ignored, there's no need to put the read\nbytes in the input buffer."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/83587f540371a6aff21fa3ef0a498eaa1206b5e8", "message": "Fix potential integer overflow"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/cb2eb4c497fdec00f6638f84d00411fac56c08b3", "message": "Right-justify backslashes according to style(9)"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d6c363f2261c4b739f88b5e1b5664ca4baa6e637", "message": "Add missing test cases\n\n- C-{A,E,K,U,W} keys\n\n- Unrecognized terminal capabilities\n\n- Query reallocation\n\n- Tabs in input"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d5aae2f6928b4690cd23244556ec3c5e43cd849f", "message": "Update tests/README"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b964b31d9f8b91ea50ecae91addfe51b014caf50", "message": "Improve diff output on test failure"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5f9693b6cbdcd6fcfe27c5ba79f20a00ddc506b6", "message": "Sort variables"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/17504be60392ebd96745b992e9f872f88666f2b7", "message": "Return const from strcasechr"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/a0d7d2bf64cfc5d0f0edfbf0d34953ba6e8572bd", "message": "Fix alignment"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f33673ede84cda63d1b64a6600fff224b0d7a47e", "message": "Remove ESCAPE macro\n\nUse the octal representation of escape consistently."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/97b510a95d0e3c19548efc5c65a0a7e5bd3224dc", "message": "Optimize min_match\n\nThe min_match function calls itself recursively once a match is found in\norder to find the minimal matching substring using the given query.\nHowever, if the length of a match is equal to the length of the query\nthere's no point in continue the recursion since the left-most match is\nfavored."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3928ed10ccae17e3d17c4a18abcbf17804d23e9a", "message": "Add global query_length variable"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/beccc9daf35593903a49019d37579f88158626a1", "message": "Remove empty lines"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ffc0ef20f23443ed5318a61f1e17c0d8324bcdb6", "message": "Add query option test and fix timing issue\n\nThe test spotted a bug related to filter abort introduced in 1ba7398.\nThe pick-test command enters keyboard input at a very high pace causing\nthe filtering to be aborted since the input file descriptor contains\nunexamined data and 0 mod any number will always equal 0. Therefore,\nonly abort if at least 50 choices has already been filtered. This is not\na exhaustive solution, consider the following scenario: the number of\nchoices is greater than 50 and the search is slow, the user inputs any\nkey that won't affect the query (like choice movement) the filtering\nwill then be aborted leaving the filtered choices in a bad state. The\ncorrect solution would be to peek at the input file descriptor and only\nabort if the first byte is a printable ASCII or UTF-8 character. Such a\nsolution is complex and this scenario is unlikely to occur."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/fe5aa015236f843fbb9453d8f837bc596af942ce", "message": "Add version option test"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9a979bbda3c8941e6a7b2e8c79f336998744a480", "message": "Print the output from pick-test on failure"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/0dce2cb4c89c6dd65a585cbd69e686d9ba06a84f", "message": "Remove redundant braces"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/754da66f1b65fec298233b6578c1d53175996473", "message": "Calculate number of available lines once"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e61efb5a7831489a3f2b1ad98a0e6ebb6a183e09", "message": "Add missing test of Vim arrow keys\n\nThe test does not hit any new code-path but can be useful for the future\nin order to prevent regression."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b1e9124fb71185b22135b0ab8f5ba614e0431da9", "message": "Cleanup CFLAGS\n\n- Using -pedantic with -Werror has the same effect as -pedantic-errors\n\n- -Wno-unused-parameter is redundant with -Wextra"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/aa1a897cf9c66a746952db4d279529a0b04c4fe0", "message": "Inline trivial version function\n\nSince it only has one call-site."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c74a80820b6e21dfb7d49f1b6642de8dd94b9ac6", "message": "Rename variable option -> c\n\nThis is de-facto a more common name for the return value of getopt."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c6bd92490044182caf387319e32e8d9d486eede6", "message": "Remove global input variable\n\nThe variable is only used inside the get_choices function. With one\ncaveat, it can't be freed. No big deal in my opinion since the memory is\naccessed through-out the whole execution. Free-ing choices.v[0].string\nwould not work either since the choices are sorted while searching and\ncan be reordered.\n\nWhile at it, favor reallocarray over realloc."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/334e1e8368e1973ab515d41bbb9790599d116266", "message": "Remove redundant memset of input buffer\n\nThe input buffer is never accessed unless it contains anything\nconsidered valid."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f9d49331298669bd6c216780c60ff0a02943c62d", "message": "Remove bounds check\n\nThis condition should always be true. Rather than returning NULL and\nsilently suppress a potential bug, I would prefer (hopefully) crashing\nthe program due to a segfault."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/74b5a85e2a0b49a3983d61273ef0c386804ad90e", "message": "Make condition explicit"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/42e17c71aa0006e4019d5a7c821365484323e691", "message": "Use tty as a prefix rather than suffix\n\nIn order to gain some consistency regarding function naming."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/923c3239d3d043db987edd4d361d8a39258e2ba9", "message": "Fix variable shadowing\n\nThe standout variable shadowed a already existing macro defined by\nncurses. While at it, shorten the underline variables, ulso and uleo is\nan abbreviation of underline {start,end}-offset. I think the function\nprovides enough context to make their purpose clear. On the other hand,\nthe fact I'm documented their meaning in this commit might prove my\nassumption wrong."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/bd5819f89dc8c15d47de825dbca81380e5f299a9", "message": "Fix clear bug\n\nThe screen was not cleared when scrolling vertically. Running the\nfollowing command and pressing page down would leave a dangling choice\nwhich should no longer be visible:\n\n  printf '1\\n2\\n3\\n' | env LINES=3 pick\n\nThe solution is to take the current scroll offset into account."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d3b12061b74d7f460086a3767fb54c0e738b2ba1", "message": "Add support for page keys\n\nPressing Page-Down/Page-Up will scroll to next/previous page of choices."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/57103ddc281237c9583bd8038ba8290e4180dc85", "message": "Update year in LICENSE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/31ddc5be1d1d71ab11b2166ce04ae90b32142ce4", "message": "Add myself as an author"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c7967194d6809c1c1c1a4d683fb21f406a7e90eb", "message": "Update tests/README"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ce6c2785e5fa58cd6ba811ca5ddfa77f9ab01770", "message": "Use one trap\n\nFixes an issue with running the test-suite on Linux."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b8b417bb6070116d15ddd5a7122c786a9436aeec", "message": "Don't require k option in pick-test\n\nSome test-cases omit the keys field but make sure we always pass a valid\nkeys argument to the parent function since it unconditionally calls\nstrlen with the given pointer."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/aa6075e4eaff3102d37a4519456c14e8eada2fd6", "message": "Don't disable OXTABS\n\nWhen compiling on Ubuntu, OXTABS is not defined. SInce we no longer\noutput any raw tabs, disabling OXTABS output mode is redundant."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f12d87e1192f1e0ced32cd256b53d0cccca6b567", "message": "Rename pick-test option i -> k for consistency"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/62208c6da19a4b6c5114710f9b126be9f1e5aa5d", "message": "Adopt style(9) in pick-test"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1aad04e99819f8aa326828b59e4f316eae48f8b6", "message": "Refactor test.sh and test-case file format\n\nChanges to the test-case file format:\n\n- Turn stdout into a proper field instead of being the last paragraph in\n  the test-case file\n\n- Accept multi-line values for stdin and stdout fields\n\n- Rename arguments -> args\n\n- Rename input -> keys\n\n- The exit field must contain the actual exit code. A corresponding\n  value of 1 does no longer imply a errorneous exit code.\n\nChanges to test.sh:\n\n- Turn every field in the test-case into a variable. Travsering the\n  whole file to access a single field is no longer needed. Running all\n  test-cases on my machine is 30% faster by now.\n\n- Assume the command is executed from the root of this repository\n\n- Strict exit code validation"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/f8dea08152b073292ff384a8d335068a2877e48d", "message": "Rename test.c -> pick-test.c\n\nSince test(1) already exists, use a less common command name."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/33a94dce69dc1ad51094e8e8959ca3338720f952", "message": "Remove executable mode from test.sh"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/77eb0daf7c49af580ca31bf8390db9d0d76f7e4f", "message": "Remove redundant fields from tests/19.t"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5fc3844d78cda50f77b5e83dd530f3e601b48dc0", "message": "Simplify test input handling\n\nInstead of parsing the input given to the test-runner let printf(1) do\nthe work. This has several advantages: less code and the sequences\ndefined in get_key can be used without modification in the test-cases.\nWith one caveat, new-line can't be sent as is since it's a\ninput-field-separator. Therefore, \\\\n is used to include a new-line.\n\nSpaces present in the input-field will be ignored unless they are\npreceded by a backslash. This makes the test-cases a bit more easier to\nread."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ee641319e1944ca32d9fd1d287cda625f3fd477d", "message": "Use autoconf log compiler for test suite\n\nUsing the log compiler feature of autoconf will run the test runner for\neach test-case instead of treating all test-cases as a single test."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/a6811d3eaeff5d0fa56905386632b3d8ed4c036f", "message": "Change test file extension\n\nSince the in-extension is used by autoconf it's confusing to use the\nsame extension for files that are not used by autoconf. The t-extension\nis borrowed from the OpenBSD ksh(1) regression-test-suite."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ebf87b4b2a02a3f080534ee256846b33b28762bb", "message": "Rename scroll -> xscroll for consistency"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/dece16481eab346afe7da5b63505353eccfa85a5", "message": "Add support for vertical scrolling\n\nMoving beyond the first/last visible choice will now scroll vertically\nwhenever possible.\n\nThe dimensions of the pseudo-tty in by the test-runner is explicitly set\nin order to easier deduct when scrolling should happen."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1ba7398ff6846c65045114b8c41fff4cdaa9789f", "message": "Improve search performance by not wasting cycles\n\nUsing pick with a large number of choices is slow. The threshold on my\ncomputer is somewhere around 10k lines of input. Benchmarking the\nfiltering revealed that the scoring is the bottleneck. This is no\nsurprise since the current search algorithm is an O(n^2) operation in\nworst case. The second most time consuming task is the sorting of the\nchoices. However, the time taken for qsort(3) is consistent and several\norder of magnitude less time consuming than the scoring.\n\nWhen the user inputs a query longer greater than 1 character we\ncurrently waste lots of cycles by performing a search every time a new\ncharacter is received. Even if the current query is outdated since the\nuser already has typed more character yet to be processed. Therefore,\nabort the search if there is unprocessed user input available. This is\ndone by performing a non-blocking poll(2) call on the user input file\ndescriptor. The check for new input is done on every 50:th iteration.\nThe number is empirically chosen and close to the number of lines in my\nterminal. There's no guarantee that this number is optimal for everyone.\nExperimenting with the number on different computers is therefore of\ninterest.\n\nThis change gives the notion of a responsive interface even when the\ninput is large. Running the following command prior and after this\nchange should result in a noticeable speed-up:\n\n  $ find ~ | pick\n\nI think this a decent trade-off in terms of gained performance vs.\ncomplexity.\n\nWhile at it, remove a cast by changing the type of the local i variable\nand replace pre-increment with post-increment."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/878dad103eb48505c8227e5eaaa1a11f13912f78", "message": "Fix output of tabs\n\nWhen a tab is present in the input, output the appropriate number of\nspaces. I couldn't achieve the same behavior when the OXTABS output mode\nis enabled for some unknown reason."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/719087fdbb67548518d5d5db9734f66943629e36", "message": "Remove unused header check\n\nLeft-over from 6e9ffc9."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/0634ac42898cab759fa59bb7bbe84cef4c2ac4b1", "message": "Remove blank line"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e54dbedf6e7a9c612a87c3c7f69bd9c707a120b7", "message": "Sort global variables"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9ced21903a94a4e28ddfedfb329ebdce6a9c2454", "message": "Sort function declarations\n\nWhile at it, break long lines."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e634c473b56badab35a1b47375d2ab62b58fea78", "message": "Add missing blank line according to style(9)"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b70ab896e8449ba0c747dffd2538765eaa3a0dec", "message": "Add missing description tests\n\nTurn '\\n' literals in the output field into proper new lines in order to\nmatch the output when the `-o` option is present."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/31ee2a25882beb40314f5acb363eff096d5501d2", "message": "Inline trivial put_choice function\n\n- Don't use puts for non compile-time constants\n\n- Turn output_description into a local variable"}], "pull_requests": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/273", "title": "Sandbox abstraction proposal", "body": "Related to GitHub issue #269 and #271.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/272", "title": "Remove Werror compiler flag", "body": "It's generally considered bad practice to ship software with this flag.\r\nIssue revealed while updating the port on [OpenBSD].\r\n\r\n[OpenBSD]: https://marc.info/?l=openbsd-ports&m=151482370923381&w=2", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165050046", "body": "Position your prompt at the bottom of the terminal: either by running a command\noutputting many lines or by hitting the return key repeatedly. Then run:\n\n  printf 'foo\\nbar\\n' | pick -X\n\nThe pick interface should be drawn at the bottom of the terminal. \n\nThe `-X' isn't necessarily needed but just used as an example to surely disable\nthe alternate screen.\n\nOn Wed, Dec 16, 2015 at 12:36:17AM -0800, Calle Erlandsson wrote:\n\n> Hey @mptre, I tried your branch locally and it works great. I'm not sure I see any difference in behavior to what is currently on master, though. How can I test this?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/79#issuecomment-165032748\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165050046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165828779", "body": "Notice I'm using screen with the alternate screen disabled:\n\n![pick](https://cloud.githubusercontent.com/assets/43914/11901789/cd0d550e-a5ad-11e5-930e-72727c8b8554.gif)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165828779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/166571253", "body": "Good question. Since it a behavioural change it might be more suitable with a\nmajor release for easier distinction between the prior and later behavior. On\nthe other hand I've always considered the prior ordering a bug and therefore a\nminor would be sufficient :)\n\nOn Tue, Dec 22, 2015 at 01:32:43AM -0800, Calle Erlandsson wrote:\n\n> Hey @mptre, this looks great! Thanks for contributing! I commented with a couple of questions above.\n> \n> Since this is a change in behavior, do you think we need to increment the major or minor version number when releasing?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/81#issuecomment-166566145\n\n## \n\n:wq\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/166571253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19413053", "body": "Still a couple of occurrences left:\n\n``` sh\n$ git grep -i thoughtbot\nCONTRIBUTING.md:to abide by the thoughtbot [code of conduct].\nCONTRIBUTING.md:[code of conduct]: https://thoughtbot.com/open-source-code-of-conduct\nLICENSE:Copyright (c) 2016 Calle Erlandsson, Anton Lindqvist & thoughtbot, Inc.\nREADME.md:Copyright (c) 2016 Calle Erlandsson, Anton Lindqvist & thoughtbot.\nman/man1/pick.1:.An \"thoughtbot\" Aq hello@thoughtbot.com\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19413053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19415188", "body": "On Thu, Oct 13, 2016 at 08:19:23AM -0700, Mike Burns wrote:\n\n> - Feel free to remove tbot from the list of authors in the man page; up to you.\n\ntbot could be mentioned in history section instead?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19415188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19455632", "body": "> I think a HISTORY section would be great.\n\n@calleerlandsson care to add the section since you know more of the\nhistory than me?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19455632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/20803254", "body": "In general, I don't tend to bother for data that lives throughout the\r\nwhole execution. Which is true in this case. However, since we run ASAN\r\non Travis by now I consider it a fare trade-off to free the memory and\r\nsatisfy ASAN since it could help us in the future to detect memory\r\nrelated bugs.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/20803254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/23294871", "body": "Agree, that would be nice. But we might need to scroll in order to keep\r\nthe selection visible and hence the question: should the selection be\r\nplaced in the middle of the screen, top or bottom? If you have a opinion\r\nor know how others solve it, please let me know.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/23294871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/24311154", "body": "Thanks! [Fixed](https://github.com/calleerlandsson/pick/commit/615c536ae7af4b859ebf7e0bba5fe0446a796aa8)", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/24311154/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25415100", "body": "See #183.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25415100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25447343", "body": "Although, they are defined by [POSIX]; I don't think such churn adds\r\nvalue (might not comes as a surprise :-)). Thoughts @calleerlandsson?\r\n\r\n[POSIX]: http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdlib.h.html", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25447343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47753894", "body": "It's pre-allocating the number of lines needed to output the query line and all\ninput lines that fits on the screen in order to determine the position of the\nfirst line. This could probably be done by moving the cursor up the same amount\nof times as the number of matching choices after printing the choices but this\nrequires more state and I prefer the single save and restore capability.\n\nOn Wed, Dec 16, 2015 at 12:29:01AM -0800, Calle Erlandsson wrote:\n\n> > @@ -591,7 +591,16 @@ init_tty(void)\n> >     if (use_alternate_screen)\n> >         tty_putp(enter_ca_mode);\n> > -   tty_putp(clear_screen);\n> > -   /\\* Emit enough lines to fit all choices. */\n> \n> What is the reason for emitting these lines?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/79/files#r47747515\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47753894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47754202", "body": "Probably but you then need to move the cursor to the right position on query\nline after printing the matching choices.\n\nOn Wed, Dec 16, 2015 at 12:31:51AM -0800, Calle Erlandsson wrote:\n\n> > ```\n> > size_t       length, line_length = 64;\n> > struct choice   *choice;\n> > ```\n> > -   /\\* Emit query line. */\n> > -   tty_putc('\\n');\n> \n> Could this be avoided by printing the query before printing the choices?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/79/files#r47747714\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47754202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48132819", "body": "The struct members should probably be renamed in order to match the current naming convention of pick.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48132819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48238139", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48238139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48238241", "body": "Fixed. Not a fan but it feels more consistent with the current codebase.\n\nOn Tue, Dec 22, 2015 at 01:27:09AM -0800, Calle Erlandsson wrote:\n\n> > ```\n> > ssize_t      length;\n> > struct choice   *choice;\n> > \n> > if ((field_separators = getenv(\"IFS\")) == NULL)\n> >     field_separators = \" \";\n> > ```\n> > -   input.size = BUFSIZ;\n> > -   if ((input.v = malloc(input.size)) == NULL)\n> > -       err(1, \"malloc\");\n> > -   for (;;) {\n> > -       if ((length = read(0, input.v + input.nmemb,\n> \n> Do you think replacing `0` with `STDIN_FILENO` would be make this easier to read?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/81/files#r48235527\n\n## \n\n:wq\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48238241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48742693", "body": "Great catch, fixed.\n\nOn Mon, Jan 04, 2016 at 01:36:56AM -0800, Calle Erlandsson wrote:\n\n> > @@ -703,7 +650,11 @@ print_choices(int selection)\n> >     if ((line = calloc(sizeof(*line), line_length)) == NULL)\n> >         err(1, \"calloc\");\n> > -   SLIST_FOREACH(choice, choices, choices) {\n> > -   for (i = 0;\n> > -        i < (ssize_t)choices.nmemb\n> > -        && i < lines\n> \n> I think there might be an off by one error here. Running pick with more choices than would fit on screen, the selection is invisible. I think this is because the last choice printed to the terminal makes it scroll and then the first choice is overwritten by the query line.\n> \n> Changing this to `&& i < lines + 1` locally fixes the issue for me.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/82/files#r48715092\n\n## \n\n:wq\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48742693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48742917", "body": "In this case there is no off-by-one error since starting the program will\nplace the cursor on the next line after the prompt (i.e. the query line) and\ntherefore `min(choices.nmemb, lines)` lines needs to be emitted.\n\nOn Mon, Jan 04, 2016 at 01:40:33AM -0800, Calle Erlandsson wrote:\n\n> > @@ -602,13 +553,9 @@ init_tty(void)\n> >         tty_putp(enter_ca_mode);\n> > \n> > ```\n> > /* Emit enough lines to fit all choices. */\n> > ```\n> > -   SLIST_FOREACH(choice, choices, choices) {\n> > -       choices_count++;\n> > -   for (i = 0; i < (ssize_t)choices.nmemb && i < lines; ++i)\n> \n> Given https://github.com/thoughtbot/pick/pull/82/files#r48715231 is correct, should it be `lines - 1` here too?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/82/files#r48715292\n\n## \n\n:wq\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48742917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48743013", "body": "Fixed, how about `v`?\n\nOn Mon, Jan 04, 2016 at 01:42:46AM -0800, Calle Erlandsson wrote:\n\n> > @@ -102,7 +96,11 @@ static int       output_description = 0;\n> >  static int      use_alternate_screen;\n> >  static size_t       query_size;\n> >  static struct termios   original_attributes;\n> > -static struct choices  *choices;\n> > +static struct {\n> > -   size_t size;\n> > -   size_t nmemb;\n> \n> What do you think about naming this length to be more consistent with https://github.com/thoughtbot/pick/pull/82/files#diff-803c5170888b8642f2a97e5e9423d399R106?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/82/files#r48715414\n\n## \n\n:wq\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48743013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48743109", "body": "Makes sense, how about `choicecmp` or `choice_cmp`? Both inspired by `strcmp`.\n\nOn Mon, Jan 04, 2016 at 01:44:03AM -0800, Calle Erlandsson wrote:\n\n> > -   SLIST_FOREACH(choice, choices, choices) {\n> > -       choice->score = score(choice->string);\n> > -   }\n> > -   for (i = 0; i < (ssize_t)choices.nmemb; ++i)\n> > -       choices.v[i].score = score(choices.v[i].string);\n> >   +\n> > -   qsort(choices.v, choices.nmemb, sizeof(struct choice), sort_choices);\n> >   +}\n> >   +\n> >   +static int\n> >   +sort_choices(const void *p1, const void *p2)\n> \n> What do you think about naming this something like `compare_choices` or `cmp_choices` to denote that it serves as a comparison function?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/82/files#r48715505\n\n## \n\n:wq\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48743109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48865165", "body": "Why not use `strncasecmp`?\n\n``` c\nif (!(start = strncasecmp(string, query, 1)))\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48865165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48865360", "body": "``` c\nif (strncasecmp(end, &query[i], 1) == 0)\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48865360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49067646", "body": "Ah, my bad.\n\nOn Thu, Jan 07, 2016 at 02:14:32AM -0800, Calle Erlandsson wrote:\n\n> > -                   if (tolower((unsigned char)string[match_position]) == query_char) {\n> > -                       ++match_position;\n> > -                       break;\n> > -                   }\n> > -               }\n> > -           }\n> > -           if (match_length == 0 || match_length > match_position -\n> > -               match_start + 1)\n> > -               match_length = match_position - match_start + 1;\n> > -       }\n> > -   }\n> > -   char    *start, *end;\n> > -   int  i;\n> > -   size_t   length, min;\n> >   +\n> > -   if (!(start = strcasechr(string, query[0])))\n> \n> In this case, `start` has to be a `char *` to the start of the match but `strncasecmp` returns an `int`. I have updated `strcasechr` to use `strncasecmp`, though in af25c5f.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/83/files#r49058819\n\n## \n\n:wq\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49067646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49871090", "body": "Vim[1]. If your settings is the preferred style of pick lets keep it that way.\n\n[1] https://github.com/mptre/dotfiles/blob/freebsd/vim/ftplugin/c.vim#L1\n\nOn Fri, Jan 15, 2016 at 07:28:55AM -0800, Calle Erlandsson wrote:\n\n> > @@ -291,10 +292,10 @@ selected_choice(void)\n> >         case DEL:\n> >             if (cursor_position > 0) {\n> >                 delete_between(\n> > -                   query,\n> > -                   query_length,\n> > -                   cursor_position - 1,\n> > -                   cursor_position);\n> > -                          query,\n> > -                          query_length,\n> > -                          cursor_position - 1,\n> > -                          cursor_position);\n> \n> I think these instances were correctly indented. I use `cinoptions=:0,t0,+4,(4` in Vim. What editor and configuration do you use?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/thoughtbot/pick/pull/96/files#r49865276\n\n## \n\n:wq\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49871090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/54331535", "body": "Could it be renamed to `printable_length` for consistency and add a comment on the definition of a printable character?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/54331535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/54331542", "body": "I would wrap the if-statement in braces.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/54331542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55673029", "body": "On Thu, Mar 10, 2016 at 02:42:33AM -0800, Mike Burns wrote:\n\n> > -                   memmove(\n> > -                       query + cursor_position + 1,\n> > -                       query + cursor_position,\n> > -                       query_length - cursor_position);\n> > \n> > ## \\-               }\n> > -               query[cursor_position++] = key;\n> > -               query[++query_length] = '\\0';\n> > -               filter_choices();\n> > -               selection = 0;\n> > -           if (query_size < query_length + length) {\n> > -               do\n> > -                   query_size *= 2;\n> > -               while (query_size < query_length + length);\n> > -               query = reallocarray(\n> > -                   query, query_size, sizeof(char));\n> \n> OpenBSD's reallocarray(3) says:\n> \n> > Do not adjust the variable describing how much memory has been allocated until the allocation has been successful. This can cause aberrant program behavior if the incorrect size value is used. In most cases, the above sample will also result in a leak of memory. As stated earlier, a return value of NULL indicates that the old object still remains allocated.\n> \n> http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man3/calloc.3\n> \n> They show this with `realloc` but then later with `reallocarray`.\n\nI'm aware of this. Since it terminates on `reallocarray` failure: is it\nreally necessary?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55673029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55673904", "body": "On Thu, Mar 10, 2016 at 02:43:18AM -0800, Mike Burns wrote:\n\n> > -                       query + cursor_position,\n> > -                       query_length - cursor_position);\n> > \n> > ## \\-               }\n> > -               query[cursor_position++] = key;\n> > -               query[++query_length] = '\\0';\n> > -               filter_choices();\n> > -               selection = 0;\n> > -           if (query_size < query_length + length) {\n> > -               do\n> > -                   query_size *= 2;\n> > -               while (query_size < query_length + length);\n> > -               query = reallocarray(\n> > -                   query, query_size, sizeof(char));\n> > -               if (query == NULL)\n> > -                   err(1, \"reallocarray\");\n> \n> Passing `NULL` as the second argument to err(3) will print a default message, which (should, hopefully) include the text \"reallocarray\".\n\nCorrect, thanks. Fixed in b8961ce.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55673904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55674138", "body": "A somewhat related question: do you use any program or Vim options to\nensure KNF (style(9)) compliance?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55674138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55743772", "body": "On Thu, Mar 10, 2016 at 04:56:17AM -0800, Mike Burns wrote:\n\n> In vim:\n> \n> ```\n> set cinoptions=:0,t0,+4,(4\n> au BufNewFile,BufReadPost *.{c,h,cc,cpp,hpp,y,l} setl noet sw=0 ts=8\n> ```\n\nTy!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55743772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59135958", "body": "On Fri, Apr 08, 2016 at 01:24:34AM -0700, Calle Erlandsson wrote:\n\n> > @@ -65,19 +65,21 @@ static const struct choice  *selected_choice(void);\n> >  static void             filter_choices(void);\n> >  static void             score(struct choice *);\n> >  static int          min_match(const char *, size_t, size_t *, size_t *);\n> > -static char            *strcasechr(const char *, char);\n> > +static char             *strcasechr(const char *, const char *);\n> \n> Should we remove the space in front of the first `*` on this line?\n> \n> In the past, I've tried to align the declared function names for readability. The added space in front of the functions not returning a pointer is to account for the asterisk for those that do. This is described in OpenBSD's style(9):\n> \n> > Prototypes may have an extra space after a tab to enable function names to line up:\n> > \n> > ```\n> > static char *function(int, const char *); \n> > static void  usage(void);\n> > ```\n\nNice catch, fixed in 0bd3350.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59135958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59135990", "body": "On Fri, Apr 08, 2016 at 01:41:19AM -0700, Calle Erlandsson wrote:\n\n> > @@ -729,3 +792,15 @@ free_choices(void)\n> >     free(choices.v);\n> >     free(input.string);\n> >  }\n> > +\n> > +int\n> > +isu8cont(unsigned char c)\n> \n> Does this function return whether or not the byte is the continuation of an utf-8 character?\n\nIt returns 1 if the given byte is a UTF-8 continuation byte.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59135990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59136018", "body": "On Fri, Apr 08, 2016 at 01:41:23AM -0700, Calle Erlandsson wrote:\n\n> > @@ -729,3 +792,15 @@ free_choices(void)\n> >     free(choices.v);\n> >     free(input.string);\n> >  }\n> > +\n> > +int\n> > +isu8cont(unsigned char c)\n> > +{\n> > -   return (c & (0x80 | 0x40)) == 0x80;\n> >   +}\n> >   +\n> >   +int\n> >   +isu8start(unsigned char c)\n> \n> Does this function return whether or not the byte is the continuation of an utf-8 character?\n\nIt returns 1 if the given byte marks the start of a UTF-8 character: the\ntwo MSBs are both set to 1 as opposed of a continuation byte where the\ntwo MSBs are equal to `10'.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59136018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59136023", "body": "On Fri, Apr 08, 2016 at 01:43:14AM -0700, Calle Erlandsson wrote:\n\n> > ```\n> >         /* A null character will be present before the\n> >          * terminating null character if descriptions is\n> >          * enabled. */\n> > ```\n> > -           if (tty_putc(choice->string[j] == '\\0'\n> > -                    ? ' ' : choice->string[j]) == EOF)\n> > -               err(1, \"tty_putc\");\n> > -           if (choice->string[j] == '\\0') {\n> > -               if (tty_putc(' ') == EOF)\n> > -                   err(1, \"tty_putc\");\n> > -           } else {\n> > -               if (tty_putc(choice->string[j]) == EOF)\n> \n> Could this `if` be joined with the above `else` to reduce indentation?\n\nNice catch, fixed in 727b8f6.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59136023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/61756605", "body": "Only one case label is needed here. I suggest you remove the `CTRL_D` value completely and let the `CTRL('D')` binding return `DEL` instead.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/61756605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/61757006", "body": "Would be great if the delete key was mentioned explicitly here.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/61757006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/65002187", "body": "I used the environment variable since the current process is replaced\nwhen calling `execvp`.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/65002187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/66970870", "body": "Totally valid point. However, I plan on fixing output of tabs later\nwhich is currently broken. Then the number of conditions is no longer\nbinary, therefore the pro-active switch.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/66970870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69102608", "body": "Remove blank line.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69102608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69799313", "body": "Nice catch! I ended up begin explicit and resetting `yscroll` when\nappropriate. See ab2fe6f.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69799313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69946163", "body": "Ty\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69946163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71064078", "body": "I've changed the error message to include the path for all open related\nerrors[1]. Do you still advocate on passing `NULL` as the message on\nfailure?\n\n[1] 27991aa3cd6614aa7c2df8b17210028b94f39dd0\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71064078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71064130", "body": "Correct. I didn't bother including `src/compat.c` to access\n`reallocarray(3)`. If we want to play it safe, how about:\n\n``` c\nif (size > SIZE_MAX/2)\n    errx(1, \"overflow\");\nelse if ((buf = realloc(buf, 2*size)) == NULL)\n    err(1, NULL);\n```\n\nIf not, maybe leaving a comment for now will do?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71064130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71088139", "body": "Fixed in b766d62.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71088139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72121205", "body": "Good point! I just changed the page up behavior to always scroll even\nwhen less than a page has been scrolled, in this scenario the vertical\nscroll is removed and the first choice is selected. For page down, we\ncould either:\n- Scroll and only show the last choice\n- Select the last choice but do not scroll any further. This is somewhat\n  more consistent to the current page up behavior and how mutt(1)\n  behaves as well.\n\nI vote for the later, what's your take?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72121205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72268386", "body": "Great input! I agree, the current behaviour is confusing. I followed\nyour advice and made the page down/up move the selection one page\ndown/up, counting from the current selection. If less choices than a\nfull page is available the first/last choice is selected. The man-page\nis updated, do you think it describes the behaviour clear enough?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72268386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/73000672", "body": "You're right, `length` will never be zero. Fixed in 02e4a4c.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/73000672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/73000895", "body": "Great proposal, fixed in f52c184.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/73000895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/74970465", "body": "I decided to remove the ability to use aliases in 5fc3844 due to the\nfollowing reasons:\n- Less code\n- There's a 1-1 mapping between the keys present in test-files and the\n  ones declared in the `get_key` function.\n\nI like the idea of comment support in order to add clarity. Something\nsimple as:\n\n``` sh\nval=$(echo $val | sed 's/#.*//')\n```\n\n... in `tests/test.sh` will probably do, thoughts?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/74970465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/79312945", "body": "The `sys/limits.h -> limits.h` change makes sense and is more\nportable. However, I would not bother adding the extra check since\nlimits.h is defined by POSIX[1].\n\n[1] http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/limits.h.html\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/79312945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/79312952", "body": "See comment below.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/79312952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/81445476", "body": "Correct. However, it's common to repeat the keyword at the definition as\nwell. I might revert the change to `src/pick.c` later.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/81445476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/83554650", "body": "Please keep the `PATH`-lookup.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/83554650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/83554666", "body": "Please keep the `PATH`-lookup and change to:\n\n``` sh\nenv PATH=\".:${PATH}\"\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/83554666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84217607", "body": "Change to `./tests/pick-test`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84217607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84219916", "body": "Yes, I tend to use the relative prefix for binaries not in `PATH` or\nwhen the path is not absolute. Your call.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84219916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84625339", "body": "Looks correct to me.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84625339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/85498219", "body": "Start the sentence on a new line.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/85498219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111908781", "body": "Replying to all comments above here. Unfortunately no, defining it on\r\n*BSD makes BSD-specific functions like `pledge` and `reallocarray`\r\nunavailable.\r\n\r\nMaybe @mike-burns could shed some insight on how-to solve this?\r\n\r\nThe OS detection is taken from here [1] [2].\r\n\r\n[1]: https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/Canonicalizing.html\r\n[2]: http://www.clearchain.com/blog/posts/autotools", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111908781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111908804", "body": "Correct", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111908804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111908830", "body": "Nice catch, fixed!", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111908830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111977605", "body": "Works, thanks!", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111977605/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564703", "body": "No need for a conditional here, just do `yscroll = selection = 0`.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564733", "body": "I would prefer the following:\r\n\r\n```c\r\nif (choices_count > 0) {\r\n\tselection = choices_count - 1;\r\n\tif (selection >= choices_lines)\r\n\t\tyscroll = choices_count - choices_lines;\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564747", "body": "See comment above, this line also has misleading indentation since the if-statement above is not wrapped in curly-braces.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564749", "body": "Please keep this list sorted.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564795", "body": "Where did you find the sequences for `HOME` and `END`? Doesn't match the sequences on my machine, this works however:\r\n\r\n```c\r\nKEY(END,        \"\\033[4~\"),\r\nKEY(HOME,       \"\\033[1~\"),\r\n```\r\n\r\nAs mentioned above, keep the list sorted.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122564795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122596705", "body": "Although, I do agree this list should be sorted. But lets skip that for\r\nnow and produce the smallest possible diff. Just add `END` and `HOME`\r\nbefore `PRINTABLE`.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122596705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122596747", "body": "Could we move to the second choice prior pressing `HOME`, just to make\r\nsure it actually works:\r\n\r\n```\r\nkeys: \\016 \\033OH \\\\n # DOWN HOME ENTER\r\n```", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122596747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122596771", "body": "You could incorporate this in `tests/03.t` instead of adding a new test:\r\n\r\n```\r\nkeys: abb \\177 \\b c \\\\n ## BACKSPACE BACKSPACE ENTER\r\n```\r\n\r\nDon't forget to remove `tests/49.t` from `Makefile.am`.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122596771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/124051908", "body": "Yeah, that's exactly why it can't be `const`. I don't have an\r\nexplanation either.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/124051908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/125728691", "body": "Nice find! I would prefer grouping the `tty_putp` calls and make sure to\r\nexit from the same mode.\r\n\r\n```diff\r\ndiff --git a/pick.c b/pick.c\r\nindex 2c23aeb..df185b9 100644\r\n--- a/pick.c\r\n+++ b/pick.c\r\n@@ -655,6 +655,8 @@ tty_init(void)\r\n \tif (use_alternate_screen)\r\n \t\ttty_putp(enter_ca_mode, 0);\r\n \r\n+\ttty_putp(keypad_xmit, 0);\r\n+\r\n \tsignal(SIGINT, handle_sigint);\r\n }\r\n \r\n@@ -677,6 +679,7 @@ tty_restore(void)\r\n \ttcsetattr(fileno(tty_in), TCSANOW, &original_attributes);\r\n \tfclose(tty_in);\r\n \r\n+\ttty_putp(keypad_local, 0);\r\n \ttty_putp(carriage_return, 1);\t/* move cursor to first column */\r\n \ttty_putp(clr_eos, 1);\r\n \r\n```", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/125728691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127062780", "body": "Should be placed on a separate line before the other includes, see [style(9)](http://man.openbsd.org/style).", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127062780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127062887", "body": "Indent using a single tab after `winsize`.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127062887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127063140", "body": "`co -> cols`", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127063140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127063173", "body": "`li -> lines`", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127063173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127746796", "body": "This does not work with the alternate screen disabled (`-X`).", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127746796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136595689", "body": "> Out of curiosity: What are the pros of scoping this static variable to `get_key` and letting `*key` point to it rather than declaring it outside `get_key` and letting `selected_choice` refer directly to it? Making it possible to declare it `const`?\r\n\r\nLess dereferencing going on in `get_key` and if we where to declare\r\n`buf` as `unsigned` in `selected_choice` it would require lots of\r\ncasting while passing it to various functions. I find the `get_key` code\r\na bit easier to follow after applying this diff, but that's just my\r\nopinion.\r\n\r\n> The size of `buf` seems to have increased from `6` to `8`. What was the reason for doing that?\r\n\r\nNo real reason, other than 8 being a power of 2.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136595689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136691115", "body": "Interesting, I wonder if Coverity will complain though: 3e04320.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136691115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136836305", "body": "Coverity didn't complain so this change is in, thanks!", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136836305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/138996641", "body": "My bad, here's the updated [commit](https://github.com/calleerlandsson/pick/commit/8c79e57a2e62a242aa9e3b53684607282afb8076) to review (should have made that clearer).", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/138996641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145884446", "body": "Uppercase letters are by convention used to disable a feature in pick. I guess you chosed `V` since `v` already is taken. Enabling Vi-mode might therefore be done using a separate key binding.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145884446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145884513", "body": "No need to initialize a static variable to 0. Might be done for clarity, though.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145884513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145884629", "body": "I would expect ESC to exit insert mode and not toggle Vi-mode.\r\n\r\n```c\r\nif (vi_mode)\r\n  vi_mode = 0;\r\n```", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145884629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885493", "body": "This will break on Big Endian machines. Since `c` is declared as an `int` the read byte will end up in the Most-Significant-Byte (`c & 0xff000000`). The remaning bytes of `c` will be filled with potential garbage from stack since `c` is not initialized. Reading uninitialized memory from the stack is in addition undefined behavior. `c` should therefore be declared as `char` and preferably `unsigned char`. Note that this is only important when passing the argument to `read(3)`. The variable can then safely be promoted to a larger type such as `int`.\r\n\r\nPrior to release, I always run the tests on an old Mac with a 32-bit PPC processor.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885603", "body": "Don't see the point of a pointer-pointer (no pun intended!). Probably due to copy-pasting the prototype for `get_key`.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885741", "body": "I would rather see the bindings being defined inside `get_key` and adding a field to the struct indicating that some bindings are only applicable to Vi-mode.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885792", "body": "Same reasoning as above regarding the type of `c`.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885926", "body": "I would prefer `-1` instead of `ERR` for consistency with the rest of the code. Also, continuing reading on `errno == EINTR` would be a good addition.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/145885926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146100251", "body": "Not necessary due to `int getc(FILE *)`.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146100251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146100362", "body": "I would rather loop until success/error, untested code below:\r\n\r\nI would rather loop until success/error, untested code below:\r\n\r\n```c\r\nfor (;;) {\r\n  n = read(fileno(tty_in), &c, 1);\r\n  if (n == -1) {\r\n    if (errno == EINTR)\r\n      continue;\r\n    if (gotsigwinch)\r\n      break;\r\n    err(1, \"read\");\r\n  }\r\n  if (n > 0)\r\n    break;\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146100362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/153137335", "body": "New sentence -> new line.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/153137335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/153137370", "body": "Use an absolute URL.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/153137370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/161024514", "body": "Nice catch!", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/161024514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "kylebebak": {"issues": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/145", "title": "Create a pick Recipes page, maybe as part of the Wiki", "body": "`pick` is really awesome, in less than a month it's become a great friend to me. It makes working with git branches and commits a lot easier, but maybe I wouldn't have thought to use it like that if I hadn't seen the gif in the README.\n\nMy point is that pick is a versatile tool whose possibilities aren't necessarily obvious at first. I think having a Wiki-style section for Recipes could bring in creative, cool use cases, and give new users more ideas of how to use pick.\n\nI wrote [a post](http://kylebebak.github.io/post/git-utility-functions-pick) about how I use it with git, I basically wrote some [helper functions](https://github.com/kylebebak/dotfiles/blob/master/dotfiles/.helpers/pick.sh) that wrap pick to make operations with branches and commits very fast.\n\nThis is the kind of stuff I think could go into Recipes, snippets of code using pick and gifs showing them in action. If this seems like a good idea I would love to contribute.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ggilder": {"issues": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/22", "title": "Stream input", "body": "pick must read its input entirely before the filtering interface becomes responsive. For an example, in a directory with a large number of entries (say > 150,000), compare `find . -type f | pick`, which will take at least seconds to become responsive, and `find . -type f | less`, which is immediately responsive. [fzf](https://github.com/junegunn/fzf) is one example of a fuzzy finder that handles this well by searching over entries received so far and streaming in new entries as they match.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/22/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67879125", "body": "@Keithbsmiley thanks for tracking these, I'll go through and check if any of them have been resolved and open individual issues if not.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67879125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882297", "body": "> interferes with vim's \"alternate screen\", vim window appears in terminal scrollback after running pick\n\nDuplicate of https://github.com/thoughtbot/pick/issues/4\n\n> in vim, arrow keys stop working after running pick (seem to be mapped to something different)\n\nFiled as https://github.com/thoughtbot/pick/issues/18\n\n> can't use vim-tmux-navigator C-h,j,k,l navigation to other panes while pick is up\n\nFiled as https://github.com/thoughtbot/pick/issues/19\n\n> arrows work to navigate around filter entry, but no cursor indication makes that difficult\n\nFiled as https://github.com/thoughtbot/pick/issues/20\n\n> doesn't highlight matched part of entry like FZF (nice-to-have)\n\nFiled as https://github.com/thoughtbot/pick/issues/21\n\n> slow on large number of entries due to lack of streaming / threading (FZF excels here)\n\nFiled as https://github.com/thoughtbot/pick/issues/22\n\n> when run from zsh and a selection is confirmed, it messes up the terminal config so that CR is converted to LF\n> when run from bash and selection is confirmed, messes up the terminal even more, CR has no effect and input is no longer printed to screen\n\nSeems to be duplicate of https://github.com/thoughtbot/pick/issues/9\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882368", "body": "Feel free to close this one now :smile: \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882520", "body": "Cool, thanks for checking! :)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882676", "body": "Actually, looks like I was wrong \u2014 `display-message -p \"#{pane_current_command}\"` outputs `vim` when I have pick up.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70388703", "body": "Yup, I get a cursor in the shell. Weird!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70388703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76242003", "body": "Actually, I am still seeing the problem running 94180de913e0462ba856d592bb38a7a2f71f2952...\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76242003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76242889", "body": "This is actually still happening for me... do you think there are any changes to the vim function needed? Here's what I'm using:\n\n```\n\" pick\nfunction! EscapeFilePath(path)\n  return substitute(a:path, ' ', '\\\\ ', 'g')\nendfunction\n\nfunction! Pick(choice_command, vim_command)\n  try\n    let selection = system(a:choice_command . \" | pick\")\n  catch /Vim:Interrupt/\n    \" Swallow the ^C so that the redraw below happens; otherwise there will be\n    \" UI leftovers on the screen\n    redraw!\n    return\n  endtry\n  redraw!\n  if strlen(selection) > 0\n    exec a:vim_command . \" \" . EscapeFilePath(selection)\n  endif\nendfunction\n\nnnoremap <leader>t :call Pick(\"find * -type f\", \":e\")<cr>\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76242889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77435064", "body": "Tested with 1.1.0, and unfortunately I still see the issue. I tried both with `-X` and without.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77435064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77620042", "body": "@calleerlandsson I'm running 10.9.5; I wonder if it might work on 10.10. I don't have a 10.10 system handy to test on unfortunately.\n\nBut yes, I think the problem is as you describe: while pick is up in Vim, Vim does not receive input so vim-tmux-navigator hotkeys don't work.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77620042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DBOTW": {"issues": [], "commits": [{"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9c68b29e7ffeae63540ea8eba135072e61523b95", "message": "Fix brew runtime error on travis"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9822a5af120bbaa2c3e6905b84eb05f7ccc7aea5", "message": "Update usage examples in README\n\n- Quote argument to cd(1) in order to handle directory names including\n  spaces\n\n- Import the new example from the manual"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9128ec3525c79cbbe38f097ae1288f01045674bd", "message": "Update package information for Ubuntu\n\nSupport for Ubuntu 15.10 (Wily Werewolf) ended on July 28, 2016."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/58c5b46aeb968599ea31213c9f3207f1128f5a4a", "message": "Do not reset yscroll and selection on redraw\n\nWhile here, unify handling of when the selection goes off screen."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1585928500bd2da0d8597fe13d261a5830a84618", "message": "Simplify error handling of tty_putc()\n\nThe error handling can be done inside tty_putc() even tho it's used as\nthe putfunc argument to tputs() since the latter does not rely on\ngetting EOF back. Quoting POSIX[1]:\n\n  The user-supplied function putfunc (specified as an argument to\n  tputs()) is either putchar() or some other function with the same\n  prototype. The tputs() function ignores the return value of putfunc.\n\n[1] http://pubs.opengroup.org/onlinepubs/7908799/xcurses/putp.html"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7d0a5683032eaf3a5cc309aa533b22aa35730a7a", "message": "Alternative keys for Ctrl-W and Page-Down"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6ce2b56f6c78a40be4eea52ba5d091539738f2df", "message": "Use tty_columns instead of columns while calculating xscroll\n\nSince commit 7cdafc8 (\"Add redraw support with respect to TTY\ndimensions\") tty_columns is the correct and preferred way of obtaining\nthe number of columns for the current tty."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7cdafc8584603d36cd07baca69ebbc06eb5efeb7", "message": "Add redraw support with respect to TTY dimensions"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/054b323c441031c9839993ead7b5266cb5aa0555", "message": "Lower requirements for autoconf and automake\n\nMakes it possible to compile pick on Debian 5 (lenny release) as\ndiscussed in PR #220."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/716fc0a54db411c6f76e4aa02680c6a84459eba0", "message": "Use compound-list for POSIX compatibility"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/98a87799e76c50a6417e9f695c544dc8f0e3b227", "message": "Ensure blocking read in noncanonical mode"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/91d7bbafa83bede6b4dbfaa11609b88c6f6c73f5", "message": "Declare handle_sigint as dead"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/99152e2223186175b86e50cff58e10eda90cde4e", "message": "Add missing tests for Emacs keys"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/2d57016edb52ad80dc676e4466cace2e65edf373", "message": "Enable keyboard_transmit-mode for arrow keys to work with xterm"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/0c3369b1bca63928ddd73fad69ba114f97462301", "message": "Use the new CAP macro for movement keys and delete"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/128418adddffc7cb95a7e0b669b0992890b730e6", "message": "Some more Emacs key bindings"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/92e492b92b82cb6ed75920418c33fbb1cf3948fd", "message": "Fix to #199: selection bar vanishes on Page-Down"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/10f04ae65eea620a1322f8031d071a305cfb757b", "message": "Update man page"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/0a545bc3f8dca9036fefa1dbdcae802482f0b393", "message": "Add Keys for Home/End"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/1402ecc8975927080b985c21e5d674720623068b", "message": "Add Ctrl-H for Backspace"}], "pull_requests": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/274", "title": "Add seccomp support for sandbox", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/comments/23294608", "body": "Great work as always @mptre: of course this is much more better! Only one suggestion: the selection should not be cleared on resizing as this is confusing ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/23294608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/23295293", "body": "https://github.com/DBOTW/pick/blob/f08d779b6a481de32e8fd3e1f2811c781c1eb2c2/pick.c#L311-L312\r\n(please see also the review from @calleerlandsson on https://github.com/calleerlandsson/pick/pull/212)", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/23295293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/23295709", "body": "Also the two lines with the range check\r\n```C\r\nif (selection - yscroll >= choices_lines)\r\n\tyscroll = choices_count - choices_lines;\r\n```\r\n\r\nin `case PAGE_DOWN` and `case END` can be deleted  ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/23295709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25414082", "body": "`/usr/include/sysexits.h` defines `64` as the preferable exit code for usage errors ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25414082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25415336", "body": "Sorry for the noise!", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25415336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25435987", "body": "Wouldn't `EXIT_SUCCESS` & `EXIT_FAILURE` instead of `0` & `1` make it easier to read?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25435987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25489455", "body": "Please judge on https://github.com/calleerlandsson/pick/pull/265 ... for me `EXIT_SUCCESS` & `EXIT_FAILURE` are clearer than `0` & `1` ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/25489455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122571501", "body": "The intention was to prevent a \"redraw\" when already at the first selection ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122571501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122571519", "body": "Yes, second that - my code has too many \"-1\" and \"+1\" ... ;-)", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122571519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122571524", "body": "\"rxvt\"-terminals use \"\\033[7~\" & \"\\033[8~\" for \"Home\"/\"End\", I use \"rxvt-unicode\" and \"infocmp\" shows: \"khome=\\E[7~\", \"kend=\\E[8~\" ...\r\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122571524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122572292", "body": "OK, that will look \"cleaner\" - should \"switch\" in \"selected_choice(void)\" also sorted?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/122572292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127762851", "body": "Sometimes after (rapid) switching between fullscreen and resized window, the choices appear in the bottom half of the fullscreen window, not on top. Pressing a key fixes this, so better remove this line to keep `alternate screen disabled` working ... ", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127762851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127766067", "body": "Yes, but the reason was to prevent that the `selection` becomes \"invisible\" if the window was resized. It also fixes https://github.com/calleerlandsson/pick/issues/199. Instead of `yscroll = selection - choices_lines + 1;` it could (or should?) be `yscroll = selection - tty_lines` ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127766067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/128898289", "body": "Sorry for the noise: this was a bug in `rxvt-unicode` version 9.20, update to 9.22 solves this ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/128898289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136690417", "body": "How about using `memset` at the beginning to zero out the buffer?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136690417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136692416", "body": "```diff\r\ndiff --git a/pick.c b/pick.c\r\nindex 73cc0e4..5354ea2 100644\r\n--- a/pick.c\r\n+++ b/pick.c\r\n@@ -937,13 +937,14 @@ get_key(const char **key)\r\n        *key = (const char *)buf;\r\n        len = 0;\r\n \r\n+       memset(buf, '\\0', sizeof(buf));\r\n+\r\n        /*\r\n         * Allow SIGWINCH on the first read. If the signal is received, return\r\n         * CTRL_L which will trigger a resize.\r\n         */\r\n        toggle_sigwinch(1);\r\n        buf[len++] = tty_getc();\r\n-       buf[len] = '\\0';\r\n        toggle_sigwinch(0);\r\n        if (gotsigwinch) {\r\n                gotsigwinch = 0;\r\n@@ -971,7 +972,6 @@ get_key(const char **key)\r\n                if (len == sizeof(buf) - 1)\r\n                        break;\r\n                buf[len++] = tty_getc();\r\n-               buf[len] = '\\0';\r\n        }\r\n \r\n        if (len > 1 && buf[0] == '\\033' && (buf[1] == '[' || buf[1] == 'O')) {\r\n@@ -1006,7 +1006,6 @@ get_key(const char **key)\r\n                        return UNKNOWN;\r\n \r\n                buf[len++] = tty_getc();\r\n-               buf[len] = '\\0';\r\n        }\r\n \r\n        return PRINTABLE;\r\n```", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136692416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146041842", "body": "Didn't know about this convention and you guessed right ... ;-) I'm thinking of `-y` as the command line switch to enable the `vi`-mode at start ... a separate key binding would maybe inconvenient when `pick` is called from a script (`pick.vim`) ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146041842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146042330", "body": "Right ... fixed ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146042330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146044617", "body": "... a separate key binding would then be necessary to enable the Vi-mode again ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146044617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146046141", "body": "Thanks for the clarification: I've fixed this. Would it make sense (although not necessary) to change it also in the original code?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146046141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146046335", "body": "Of course that was the reason ... ;-)", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146046335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146047119", "body": "Changed it to:\r\n```C\r\nagain:\r\n        while ((n = read(fileno(tty_in), &c, 1)) == 0);\r\n        if (n == -1) {\r\n                if (errno == EINTR)\r\n                        goto again;\r\n                if (!gotsigwinch)\r\n                        err(1, \"read\");\r\n        }\r\n\r\n        return c;\r\n```\r\nOK?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146047119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146106999", "body": "The idea was some sort of \"hybrid-mode\":  the \"insert mode\" is the \"emacs mode\" with all the known key bindings. By pressing `ESC` you switch to the Vi command-mode and the keys are \"translated\" to appropriate function of the \"emacs mode\": some commands (or `ESC`) brings you back to the \"emacs mode\". The command line switch only activates the Vi command-mode at start to mimic the behavior of Vi: you have to press some command keys (like `a`, `i`, `/`) or `ESC` first to enter the search query ... don't know if Vi-addicts like or want this ... ;-)", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146106999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146127721", "body": "Although this will not work on all terminals, it seems the only \"portable\" way to change the cursor appearance (as an indicator that the Vi command-mode is active) ... the alternative is: https://vt100.net/docs/vt510-rm/DECSCUSR.html", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146127721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146127810", "body": "Regardless of the mode, the cursor should set to \"normal\" again ...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/146127810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "rtlanceroad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/calleerlandsson/pick/commits/26eea32febc2554543cf7b162d22f14ecd076a65", "message": "Add installation instruction for CRUX"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ebfe": {"issues": [], "commits": [{"url": "https://api.github.com/repos/calleerlandsson/pick/commits/dce2ddf6827e40fef12fd27587629574609681ac", "message": "Add Void Linux install instructions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radhermit": {"issues": [], "commits": [{"url": "https://api.github.com/repos/calleerlandsson/pick/commits/99d5a6f48e9c61aae7fdff2826fa6ffe5590a077", "message": "Add Gentoo install instructions to README\n\nFixes #243."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/615c536ae7af4b859ebf7e0bba5fe0446a796aa8", "message": "Fallback to pkg-config while looking for ncurses library\n\nMakes pick build on Gentoo where ncurses and libtinfo are split out, as\ndiscussed in PR #241."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "calleerlandsson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/calleerlandsson/pick/commits/7e952072c46f88b4c9b35e4ec1a50f34b7e3bf5b", "message": "Update version number to 1.7.0"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/8199b9bd18f287913416ca04652ff52e7a547412", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/9923346b10c5ad49d5d6fb1a84914500fec54b36", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/0ec636164a224aff83534b9ade42aae2836225a1", "message": "Update version number to 1.6.1"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5eed7cfcaf04ee8e85de82b00737b9162e95540e", "message": "Ignore signature files"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d14e28079774a3098dd9c3c08145eef18f1010ad", "message": "Update version number to 1.6.0"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ebdff5042a4b800379ddcf8d16831127fa8bca27", "message": "Stop maintaining the Arch Linux package"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/10cd1f5425cc3f06ab4fb879bc1ae456cc2c64ad", "message": "Update version number to 1.5.4"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/627254515a4ab4177587a8922450d856bdc63fb9", "message": "Update version number to 1.5.3"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3c852942a08e0a39a298637bfcebfef795f65fea", "message": "Move thoughtbot to HISTORY"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/dd78cf19e8564c154ee0cdf9e95315d549ee91e4", "message": "Refer to test programs using relative paths\n\nThis removes any doubt around whether other programs on the PATH are\nbeing executed instead of the pick in the project root."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/999e0246d096aaf305d31f67d5849c7e421548ef", "message": "Keep source files in the project root"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/c030cdcff73ec6b13f209dc1227519b77dcb143d", "message": "Keep man page in the project root"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d4facd2aac4a1681dd43100626f22dc32ce8237a", "message": "Update and include the project's code of conduct"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/5c458914f42c2f6d30378e2dc2e1f4da2aa6afc6", "message": "Use a non-personal email for the project\n\nThis prevents me from becoming a bottleneck in communications."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6b8276c62aaa414c9f01c6a8b4398fa8b479c251", "message": "Run distcheck in favor of check on Travis CI\n\nIn addition to running the test suite (just like the `check` Make\ntarget), the `distcheck` target also takes the following steps to test\nthe distribution:\n\n- tries to do a `VPATH` build, with the `srcdir` and all its content\n  made read-only;\n- installs the package in a temporary directory (with `make install`),\n  and tries runs the test suite on the resulting installation (with\n  `make installcheck`);\n- checks that the package can be correctly uninstalled (by `make\n  uninstall`) and cleaned (by `make distclean`);\n- finally, makes another tarball to ensure the distribution is\n  self-contained.\n\nFor more info, see https://www.gnu.org/software/automake/manual/html_node/Checking-the-Distribution.html"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/db10ff312c514276c5767bf8c2337f0f16e29515", "message": "Update repo references and sponsorship status\n\nThe pick and pick.vim GitHub repos were transferred from the thoughtbot\norganization to calleerlandsson and thoughtbot is no longer sponsoring\nthe project."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/61317dcc18fa6c93108c8fe099e686cc1ab8a50f", "message": "Update Calle's email address"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/2cd4267a6149aa18d310fb1bafe65549838cc729", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/4d55e39b199679cf1da9c76fe221b2f13b86abb2", "message": "Update version number to 1.5.2"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/3762d61321215f4b3858137ed3ceb9163b20cda6", "message": "Update version number to 1.5.1"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/ab39ef41f7f1191689fc6a37f235f554895e8ec4", "message": "Update version number to 1.5.0"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/e17843843c124f14579312b74950aaafd2db6062", "message": "Update CHANGELOG"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/b3c5bb1b0897daa418cc679235e5de54f948ffc4", "message": "Make make distcheck pass\n\n`make distcheck` was failing on the `check` task during the VPATH build\ndue to two reasons:\n\n1. The `tests/*.t` and `tests/test.sh` were missing in the distribution.\n2. The `T_LOG_COMPILER` command could not find the file `tests/test.sh`\nsince it was located in the source directory, not the build directory."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/fde77fc6b05875a99245a0d1da56fec168e30599", "message": "Ignore files produced by make check\n\nThe changes in ee64131 and f8dea08 cause changes to what files are\nproduced by `make check`."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/d90b3ff7a3ed4913412766447a14d5405da5c4cb", "message": "Include <limits.h> instead of <sys/limits.h>\n\n`<sys/limits.h>` isn't available on macOS."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/6ec397b662377686a13eb5863be4561ac7d84cca", "message": "Add a list of package maintainers"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/a2fbe7544c58956def2d29debcc9eac999969c13", "message": "Remove remaining release tasks\n\nThe remaining release tasks don't work well and for the last couple of\nreleases I've updated the AUR package manually.\n\nMaintaining distribution specific packages outside of the repo creates a\nclear separation of concerns."}, {"url": "https://api.github.com/repos/calleerlandsson/pick/commits/315714ef88441c89d2d52a69f211a70d237f50a6", "message": "Update Homebrew installation instructions\n\nSince Pick was added to Homebrew core in Homebrew/homebrew-core#1977,\nadding the thoughtbot tap before installing with `brew` is no longer\nneeded."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53536437", "body": "Thanks for the feedback! I will work on this more tomorrow night or on Friday. @mike-burns What does <kbd><kbd>Ctrl</kbd>-<kbd>K</kbd></kbd> do?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53536437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53873729", "body": "Comments are addressed and <kbd><kbd>Ctrl</kbd>-<kbd>K</kbd></kbd> is implemented. Ready for another pass.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53873729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53901943", "body": "Thanks @georgebrock. Merging.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53901943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/63076303", "body": "Me and Jack discussed this IRL and agreed on it being ready to be merged in.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/63076303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64237026", "body": "This is awesome @Keithbsmiley! Thanks a lot for figuring this out. Merge at your discretion.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64237026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64267196", "body": "Thanks for reporting this, @Keithbsmiley.\n\n`bsd/string.h` is included for the `strlcpy` function for safely copying strings.\n\nMaybe we could check for the existence of `strlcpy` and include a bundled version if it's not available, like @mike-burns does [in Argonaut](https://github.com/bitptr/argonaut/blob/7377e106c2a855a82f7571a276a38a63dde18724/src/compat.c)?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64267196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64269650", "body": "Running in raw mode will make `ncurses` pass through all characters, including those used for quit, interrupt, suspend and flow control.\n\nMaybe we could use `signal(3)` to trap `SIGINT` to avoid passing through all of them and just handling the interrupt signal?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64269650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64270437", "body": "I had one small comment, other than that, this looks good to merge. Thanks for adding this, @Keithbsmiley!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64270437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64327255", "body": "Thanks, @Keithbsmiley.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64327255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64535365", "body": "I can reproduce this locally. This bug did not manifest itself before we added the call to `refresh` in dcc7a8bb52be649cc55a37c9e2b7dee3ab63d2f0. \n\nReading `curs_initscr(3X)` it seems like the call to `refresh` after the call to `endwin` might bring us back into curses mode:\n\n```\nA program should always call endwin before exiting or escaping from curses mode tem\u2010\nporarily.   This routine restores tty modes, moves the cursor to the lower left-hand\ncorner of the screen and resets the terminal into the proper non-visual mode.  Call\ning refresh or doupdate after a temporary escape causes the program to resume visual\nmode.\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64535365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64537120", "body": "Looks great @Keithbsmiley, I had some style comments and one question.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64537120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64763198", "body": "@Keithbsmiley I had one question, other than that, this looks great to merge! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64763198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64808638", "body": "This looks good!\n\nThe build is currently failing on my system because I don't have the `strlcpy`function in my `string.h`. Therefore, the `strlcpy.c` needs to be conditionally included. One example of how this is done is how `compat/queue.h` gets included in `src/choices.c`.\n\nI have left some comments on how I think it could be fixed. I totally understand if you don't have time to work on this @Keithbsmiley and I can finish this tomorrow.\n\nHere is my make output:\n\n```\n~/Projects/pick $ make\n(CDPATH=\"${ZSH_VERSION+.}:\" && cd . && /bin/sh /home/calleerlandsson/Projects/pick/missing autoheader)\nrm -f stamp-h1\ntouch config.h.in\ncd . && /bin/sh ./config.status config.h\nconfig.status: creating config.h\nconfig.status: config.h is unchanged\nmake  all-recursive\nmake[1]: Entering directory '/home/calleerlandsson/Projects/pick'\nMaking all in src\nmake[2]: Entering directory '/home/calleerlandsson/Projects/pick/src'\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT choice.o -MD -MP -MF .deps/choice.Tpo -c -o choice.o choice.c\nmv -f .deps/choice.Tpo .deps/choice.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT choices.o -MD -MP -MF .deps/choices.Tpo -c -o choices.o choices.c\nmv -f .deps/choices.Tpo .deps/choices.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT io.o -MD -MP -MF .deps/io.Tpo -c -o io.o io.c\nmv -f .deps/io.Tpo .deps/io.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT main.o -MD -MP -MF .deps/main.Tpo -c -o main.o main.c\nmv -f .deps/main.Tpo .deps/main.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT ui.o -MD -MP -MF .deps/ui.Tpo -c -o ui.o ui.c\nui.c: In function \u2018put_choices\u2019:\nui.c:102:3: error: implicit declaration of function \u2018strlcpy\u2019 [-Werror=implicit-function-declaration]\n   strlcpy(line, c->str, llen);\n   ^\nui.c:103:3: error: implicit declaration of function \u2018strlcat\u2019 [-Werror=implicit-function-declaration]\n   strlcat(line, \" \", llen);\n   ^\ncc1: all warnings being treated as errors\nMakefile:336: recipe for target 'ui.o' failed\nmake[2]: *** [ui.o] Error 1\nmake[2]: Leaving directory '/home/calleerlandsson/Projects/pick/src'\nMakefile:342: recipe for target 'all-recursive' failed\nmake[1]: *** [all-recursive] Error 1\nmake[1]: Leaving directory '/home/calleerlandsson/Projects/pick'\nMakefile:282: recipe for target 'all' failed\nmake: *** [all] Error 2\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64808638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64809240", "body": "Yeah, that seem like a good approach. The question is what we should switch on.\n\nI think this has to do with the state of the terminal when `pick` gets executed. By having a quick look at `ncurses(3X)`, I think logging the return values of these functions when `pick` starts and ends might tell us more:\n\n```\nis_cleared              curs_opaque(3X)*\nis_idcok                curs_opaque(3X)*\nis_idlok                curs_opaque(3X)*\nis_immedok              curs_opaque(3X)*\nis_keypad               curs_opaque(3X)*\nis_leaveok              curs_opaque(3X)*\nis_linetouched          curs_touch(3X)\nis_nodelay              curs_opaque(3X)*\nis_notimeout            curs_opaque(3X)*\nis_scrollok             curs_opaque(3X)*\nis_syncok               curs_opaque(3X)*\nis_term_resized         resizeterm(3X)*\nis_wintouched           curs_touch(3X)\nisendwin                curs_initscr(3X)\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64809240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64905565", "body": "@Keithbsmiley I have pushed the changes I suggested. It also turned out that we needed `strlcat` from `bsd/string.h` so I grabbed the OpenBSD implementation of that aswell.\n\n@Keithbsmiley @mike-burns can you try to build this locally and see if I screwed something up?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64905565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65028115", "body": "@Keithbsmiley The errors you are seeing puzzles me. I added `subdir-objects` to `Makefile.am`, yet that is what gets reported as missing.\n\nCould you paste the full output of `./autogen.sh && ./configure && make`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65028115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65088243", "body": "Thanks @mike-burns. So FreeBSD needs a `getline`. How about stealing [this](http://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/lib/libc/stdio/getline.c?rev=1.1&content-type=text/plain) and [this](http://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/lib/libc/stdio/getdelim.c?rev=1.2&content-type=text/plain)?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65088243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65374164", "body": "Hey @Keithbsmiley, thanks for gathering this feedback. I'll also spend time verifying and figuring these issues out as when I get a chance, hopefully in the beginning of next week.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65374164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65374527", "body": "Thanks for testing this locally. I'll make changes and ask you to try it again when I get a chance.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65374527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66144980", "body": "Thanks @Keithbsmiley and @mike-burns! Merging.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66144980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66145487", "body": "I totally agree with you @Keithbsmiley, I'm experimenting with solutions locally but haven't had investment time in a while. I will be on PTO for a month beginning Wednesday.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66145487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66145677", "body": "I have removed the whitespace. Merging.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66145677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70272958", "body": "Thanks for reporting @ggilder. I'm able to reproduce this when calling `pick` using `system()` from within Vim. When executing `:!pick` in Vim and when I run `pick` from my shell I do get a cursor, though. Could you confirm that this is the case for you too?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70272958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70274478", "body": "@Keithbsmiley @mike-burns me and @teoljungberg have added some commits that will hopefully fix the build on OS X and FreeBSD and get rid of the warnings on OpenBSD. Could you confirm this?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70274478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70284436", "body": "Thanks for contributing @ecerulm! I'm sorry for not getting back to you earlier. I've been travelling without internet access for a month.\n\nI left some line comments. \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70284436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70460722", "body": "Thanks @ecerulm. I will squash and merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70460722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70462243", "body": "Thanks @ggilder. I think this is related to #19, #18, and #4.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70462243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70462711", "body": "Merged as 59c434f1ecc78ccfd6ba53de37f7ef9b6387624a and 0c03b0d76a8546016f824f7f977593fcbf1dab90.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70462711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70463098", "body": "Although I still think we should merge #10 for enhanced portability, 59c434f1ecc78ccfd6ba53de37f7ef9b6387624a from #16 should be solving this issue. Could @teoljungberg or @Keithbsmiley try to build and run on OS X?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70463098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70463942", "body": "This is solved in 769b3b5335e7cbdef4de1a8c29242ac405cbebfa, which also reopens #4.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70463942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464059", "body": "I like this idea, @ggilder. A PR is very welcome.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464100", "body": "I would also like this. PR's are welcome.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464155", "body": "I think this is an effect of #4.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464197", "body": "I think this is an effect of #4.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71190103", "body": "I have rebased this on master and have made necessary changes. Since this seems to build on all our OSs I'm going to merge this. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71190103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71307827", "body": "This is very cool @Keithbsmiley! I think @halogenandtoast ran into the same off by one error when setting up tests for `min_match_length`. `min_match_length` is very complex, do you think we could pull out some things or replace some of the looping with recursion?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71307827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71307943", "body": "I think this is a great idea. Maybe we could add it to `DEVELOPING.md` like @mike-burns has done in [argonaut](https://github.com/bitptr/argonaut/blob/0f586c6e2c37d88bf6306aa5439b433b7d0becea/DEVELOPING.md)?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71307943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71435733", "body": "Looks good to me!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71435733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75246451", "body": "I have some refactoring to do but wanted to get this tested as soon as possible.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75246451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75258187", "body": "After some testing, I realize that this breaks using arrow keys in pick. This is due to the fact that `getc` reads a character where as ncurses `getch` when using `keypad(stdscr, TRUE);` reads multiple characters in the case of function keys. I will look into how we can replicate this functionality.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75258187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75270742", "body": "I have pushed a solution to the arrow key issue. I have no idea how portable it is.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75270742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75428643", "body": "Damn. I can reproduce it too.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75428643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75612620", "body": "That's great! Yes, I think fixing and merging #26 before publishing would be good.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75612620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75612879", "body": "If someone wants to tackle this, I think the solution is in logging read characters when pressing arrow keys while running within Vim. If not, I'll do it on Thursday.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75612879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76154854", "body": "It's now working and I can build and run successfully on Yosemite and Arch. I want to do a lot of refactoring in general but would prefer to do this in a separate PR.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76154854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76170713", "body": "Awesome! Thanks for testing this so thoroughly, @mike-burns! Merging.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76170713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76172294", "body": "@teoljungberg @Keithbsmiley #26 is merged and I think we are ready to package pick.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76172294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76172444", "body": "@ggilder Could you test this and see if this issue persists after merging #26?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76172444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76172985", "body": "Since we are no longer using `ncurses` we would have to do this by hand. Here is a good resource on how to read UTF-8 characters:\n\nhttp://zaemis.blogspot.se/2011/06/reading-unicode-utf-8-by-hand-in-c.html\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76172985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76174196", "body": "Doing it!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76174196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76221471", "body": "Thanks! Looks great. Merge at will.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76221471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76261951", "body": "@ggilder are you running with the `-X` flag?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76261951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76348303", "body": "I agree. Thanks @mike-burns! Since it isn't that much code I'll add it in this PR.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76348303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76349144", "body": "This is ready for another pass.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76349144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76354077", "body": "Good point. Done in b1d19e4.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76354077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76362740", "body": "Great! Merging.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76362740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76364196", "body": "Since merging #35 (just now) you should not have to pass the `-X` flag anymore.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76364196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76388548", "body": "Looks great. I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76388548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76388734", "body": "I will and am signing tarballs. Should I add instructions to verify the tarballs signature?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76388734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76390068", "body": "Going to Malm\u00f6.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76390068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76398244", "body": "Merging after IRL discussion.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76398244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76686855", "body": "@mike-burns That would work but I think that would mean that only the person who generated the original release tarball would be able to create the formula and PKGBUILD. Also if that person deleted the tarball, they would not be able to generate the formula and PKGBUILD.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76686855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76940815", "body": "Thanks for reviewing. I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76940815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77353148", "body": "@ggilder Does this issue persist?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77353148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77530458", "body": "@ggilder Interesting. What version of Mac OS are you running? I wonder what the difference between your system and @Keithbsmiley's is.\n\nAm I understanding this correctly? This is not really an issue with vim-tmux-navigator (the Vim plugin) since Vim is no longer receiving input. Instead it is a problem with pick and tmux key bindings. When run from the shell in tmux pick does not affect tmux key bindings but when run from vim inside a shell in tmux, tmux key bindings do not work.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77530458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77572070", "body": "I will merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77572070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77832803", "body": "Ha. Thanks. Merging. \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77832803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78229069", "body": "I can reproduce this.\n\nI think this is because we print to the terminal before reading all available characters on the stream. We should read and handle all typed characters before printing anything.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78229069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78229851", "body": "Thanks for reporting this @geoffharcourt.\n\npick is not using a specific color but instead uses the built in standout feature of the terminal.\n\nIf you run `less < /dev/null`, `(END)` should be printed at the top left of your terminal, when you press <kbd>q</kbd> it should go away. `less` should print `(END)` using the same standout feature pick uses. Can you check if you see experience similar problems with this command using different themes?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78229851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78265291", "body": "Me and @teoljungberg tested and can confirm what I stated in my previous comment. I think the problem lies in how running pick from within Vim's `system()` changes how keys behave. selecta, another fuzzy search tool had the same problem when we tested it. Do you guys know a tool that does work?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78265291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78293120", "body": "@geoffharcourt Looking at [the fzf implementation](https://github.com/junegunn/fzf/blob/master/src/curses/curses.go), they seem to explicitly set a color pair of the output whereas pick will use the terminal default standout color pair. If the less command does not give you the right color, I unfortunately think there might be a problem with your theme.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78293120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78980680", "body": "@eavgerinos That's great, thank you!\n\nThere is some BSD licensed code in https://github.com/thoughtbot/pick/tree/master/src/compat.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78980680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78980947", "body": "Thanks @eavgerinos. I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78980947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78982148", "body": "Merged as afecec06d78359d6bbaa868bbb5ccb0bca93e626.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78982148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78985036", "body": "Hey @gnapse!\n\nThanks for reporting this.\n\nI think all examples in the README and on the man page (except the `cd` one in the README) are using `xargs`. I'll keep this in mind when adding more examples, though.\n\nAs far as I know there is no way of working around the limitation of `cd` being a shell builtin and the current working directory being a property of the current process. When you run `xargs cd`, your shell will spawn a new `xargs` process that will in turn spawn a new shell process that changes into the directory before exiting. This will not affect the outer shell.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78985036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/79440489", "body": "Awesome! Thanks so much!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/79440489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86875782", "body": "Hey @eavgerinos, thanks for reporting this.\n\nI think this is because the conditional on [this line](https://github.com/thoughtbot/pick/blob/92b3fbadfc92a7c786623f847f1ad137f5d3fa01/src/choices.c#L78) only checks the score of choices. By also sorting choices with the same score alphabetically, the order would be deterministic.\n\nUnless someone beats me to it, I'll look into this as soon as I can.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86875782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86880405", "body": "Hey @rosshadden,\n\nDo I understand this correctly? When you use `pick` from within `tig` and exit `pick` by pressing <kbd><kbd>Control</kbd><kbd>C</kbd></kbd>, `tig` also exits?\n\nI think this is because of how `tig` is implemented to handle exit codes of programs it runs. For example running `pick` from within Vim and exiting by pressing <kbd><kbd>Control</kbd><kbd>C</kbd></kbd> does not exit Vim.\n\nI'm definitely interested in solving this though! I could not find a description of the behavior you're referring to in the `selecta` README nor could I find the code supporting it. Could you describe it in more detail?\n\nWhat mapping would be suitable for this functionality?\nWhat would `pick` output when exiting?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86880405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86883297", "body": "Hey @GBuella, thanks for fixing this!\n\nDoes this build on your system when casting to `unsigned char` instead of `unsigned`? If so, I think it would be worth changing to that since that is what the standard is specifying.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86883297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86887846", "body": "Hey @eavgerinos, thanks for submitting this PR!\n\nI pulled down this branch and tried piping som unicode characters to pick, tried typing some unicode characters in the search field, tried selecting one of the unicode choices, and found some problems:\n- pick will not accept unicode characters as input to the search field but will simply ignore them. This is because we're reading a normal character and are checking for a range of printable ASCII characters.\n- When selecting a choice with unicode characters in it, the characters get mangled when output to stdout when pick is exiting. I think this is because we're still storing the strings as `char` arrays and output them with `printf`.\n\nAm I misunderstanding the purpose of this PR or is it just not working on my system?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86887846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86888824", "body": "I knew there was something I did not quite get! Now I do, though. Sounds like a great idea!\n\nI'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86888824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/88377317", "body": "@rosshadden If I understand this correctly, the issue was not caused by the abort but rather by the mapping of it to <kbd>ESC</kbd>. This is because escape sequences start with <kbd>ESC</kbd> and to determine wether the user entered an escape sequence or an <kbd>ESC</kbd> we'd have to deal with timing.\n\nIf we map the abort function to a different key combination we would not have this issue.\n\nIt still seems like `selecta`, when aborted, would exit with a non-zero status, though? How is that different to how `pick` handles an interrupt?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/88377317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/90830879", "body": "That's awesome! Thanks for helping out, @eavgerinos!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/90830879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/90844799", "body": "Thanks @teoljungberg. I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/90844799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/90854872", "body": "Thanks @GBuella! Merged as cbd0e7a.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/90854872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/92254664", "body": "Hey @mayuroks, thanks for reporting this!\n\nIf you want to try fixing it, a PR would be very welcome. If not, I'll fix it as soon as I get to it.\n\nSince this is a duplicate of #50, I'm going to close this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/92254664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/100235660", "body": "Yeah, it is terrible. That's a great refactoring! I'd like to get this PR in, in order to squash this bug but I'd be happy to include that in my coming refactoring PR.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/100235660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/100250068", "body": "I will merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/100250068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/100251015", "body": "I will merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/100251015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/108768159", "body": "Hey @rosshadden, thanks for your feedback.\n\nThis sounds like a cool idea. Am I understanding this correctly? The user would type something into pick to filter the results, then press a combination of keys. This would make pick output whatever the user typed regardless of whether it matched a choice or not?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/108768159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109210534", "body": "Nice! Would you like to take a stab at adding this? If so, I'd be happy to give you pointers to where to start and answer your questions along the way!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109210534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109893355", "body": "Hey @GBuella! I'm looking forward to your ideas!\n\nI'll resolve @mike-burns' comments on these commits and merge this PR on Friday.\n\nIn the future, I'll open smaller refactoring PRs so that they can be merged faster.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109893355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109896030", "body": "Great!\n\nShift+Enter and Ctrl+Enter sends the same character as Enter. I don't think this is a problem, though. We could actually use the same Enter key binding for this. What we could do to not alter the current functionality of pick, though, is to add a command line flag to turn this feature on.\n\nAdding the flag is done in [`main.c`](https://github.com/thoughtbot/pick/blob/master/src/main.c).\n\nAn `int` saying whether or not the flag is present would have to be passed to `get_selected` here: https://github.com/thoughtbot/pick/blob/master/src/main.c#L59\n\nIn `ui.c` we could switch on this new `int` parameter: https://github.com/thoughtbot/pick/blob/master/src/ui.c#L243-L247\n\nSince `get_selected` currently returns a pointer to a `struct choice` contained in the passed in `struct choices` we'll either have to figure out:\n1. How we could return the current query as a `struct choice`.\n2. How we can change `get_selected` to always return a `char *` and then return the current query if the flag is present.\n\nI'd love your feedback on these ideas!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109896030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/111044758", "body": "I think it will work if the user is using alt or option as a meta key in their terminal emulator.\n\nThis will send two characters to pick: escape followed by enter.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/111044758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/111425707", "body": "Thanks for the review @mike-burns! I have resolved your comments and will merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/111425707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/111967177", "body": "Thanks @xuchunyang! I'll merge this right away!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/111967177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112020445", "body": "Great! Thanks a lot @eavgerinos! Would you like to add installation instructions to the README?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112020445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112021785", "body": "Hey @keith, thanks for spending time on this! Quite a lot has changed on master since this was opened. Would you like to update this PR to get it merged in?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112021785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112022182", "body": "No hurry! Thanks.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112022182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/114034521", "body": "Awesome @rosshadden! Thanks for working on this.\n\nI do think we should add a `break` statement to the `TTY_ENTER` case since not doing so would change existing behavior. If it becomes obvious that the `Alt+Enter` behavior is the one we use most of the time, I'm totally open to change this in the next major release.\n\nIf I get time to look at the code during the week, I will. Otherwise, I'll look at it on Friday.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/114034521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/114766990", "body": "@mattix Great question! Sadly, I don't have a good answer for you. Do you have any ideas on how to best handle this?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/114766990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115567797", "body": "Thanks @rosshadden!\n\nI've checked out the code, tried it out locally, and it works great!\n\nThe only thing that came to mind when looking at the code was that we're not freeing some memory on exit. More specifically, the query string and the new choice are not freed.\n\nSince we're exiting, it's not that big a deal but I think making sure to free memory will make the program easier to change and refactor in the future.\n\nWhat do you think about this patch?\n\n``` patch\ndiff --git a/src/ui.c b/src/ui.c\nindex 88c5abc..04eaa44 100644\n--- a/src/ui.c\n+++ b/src/ui.c\n@@ -40,6 +40,7 @@ ui_selected_choice(struct choices *choices, char *initial_query,\n        char *query;\n        int key, selection, visible_choices_count, word_position;\n        size_t cursor_position, query_size, query_length, initial_query_length;\n+       struct choice *choice;\n\n        initial_query_length = strlen(initial_query);\n        cursor_position = initial_query_length;\n@@ -78,7 +79,10 @@ ui_selected_choice(struct choices *choices, char *initial_query,\n                        break;\n                case TTY_ALT_ENTER:\n                        tty_restore();\n-                       return choice_new(query, \"\", 1);\n+                       choice = choice_new(query, \"\", 1);\n+                       SLIST_INSERT_HEAD(choices, choice, choices);\n+                       free(query);\n+                       return choice;\n                case TTY_CTRL_N:\n                        if (selection < visible_choices_count - 1) {\n                                ++selection;\n```\n\nSince `query` will be `strdup`ed in `choice_new`, we're free to `free` it after calling `choice_new`. Adding the choice to the list of choices before exiting will allow it to be freed by the call to `choices_free` on https://github.com/thoughtbot/pick/blob/d2831c6926f50677e61b135da78a3a3d946e059c/src/main.c#L64.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115567797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115573495", "body": "That's a nice solution!\n\nI wonder, though, if we should exit with an exit code indicating failure since we weren't able to produce any meaningful output? Maybe we could even print an error message on `stderr` saying pick requires input?\n\nI guess it depends on the use case.\n\nDo you have a specific use case for this behavior, @mattix?\n\n@rosshadden, do you have any thoughts on this?\n\nI think #58, might be sort of related. If we exit immediately unless we get input, the user won't be able to use the new feature in #61.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115573495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/116510914", "body": "Hey @GBuella, thanks so much for contributing!\n\nI'm not familiar with and have yet to try Levenshtein edit distance based search.\n\nSearching through the same strings, how does it differ from the current algorithm in pick? Is it better for searching through a specific type of strings? Do you think it could replace the current algorithm?\n\nIf I get time during the week, I'll take a look at the code. If not, I'll look at it on Friday.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/116510914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/116514069", "body": "@rosshadden, @mattix All good points.\n\n@mattix, what would the use-case for this be? I have personally not run into this issue before.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/116514069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/117046672", "body": "Cool! Then I'll apply it before merging this on Friday. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/117046672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118356835", "body": "Hey @GBuella,\n\nThis is a cool algorithm and seems to fit your use-case very well!\n\nI'm not sure this feature would be a good fit for merging into pick.\n\nHere are some reasons to why I'm hesitant to do so:\n- The way the current algorithm works is a big part of what pick is. The\n  ability to type `scacsp<CR>` to jump straight to\n  `spec/controllers/application_controller_spec.rb` is specific to the\n  algorithm and in line with what I think people generally expect of a\n  fuzzy finder.\n- The feature is adding a considerable amount of code that will have to\n  be debugged, maintained and considered during refactoring and\n  development.\n\nSince I'm using pick differently, I won't use the feature provided by\nthis code and will therefore struggle with maintaining the it.\n\nI want to make sure you know that I'm very thankful for the time you've\nspent on this and that I can clearly see how this supports your\nuse-case.\n\nI'm trying to think of a plugin architecture that would allow for anyone\nto provide their own search algorithm but have yet to come up with\nanything good that allows pick to continue to be performant even with\nlarge sets of choices.\n\nDo you think a plugin architecture would make sense? Do you have any\nideas for how one could work? Would using this algorithm as a plugin fit\nyour use-case?\n\nI'd be very happy to hear your ideas about such an architecture!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118356835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118361795", "body": "Thanks @mike-burns! Merging.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118361795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118362823", "body": "Thanks for understanding, @GBuella.\n\nI'll think more about the plugin infrastructure. If anyone has ideas or wants to submit a PR for that, I'd very much appreciate it!\n\nI will close this PR in the meantime.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118362823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118583549", "body": "These are really good points and I think the following makes a lot more sense since it would not require changing when the type of line is changed:\n\n```\nline = calloc(sizeof(*line), line_length);\n```\n\nLets keep this issue open until these instances have been replaced.\n\nThanks for the feedback, @GBuella!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118583549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/119858104", "body": "Hey @mooreniemi,\n\nWhat happened if you did not supply the --output-document flag? What version of wget are you running?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/119858104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/127163699", "body": "I'll close this issue due to inactivity.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/127163699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/127163945", "body": "@mattix do you have any ideas on what use-case this would support?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/127163945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/127164300", "body": "Hey @ScoreUnder, thanks for contributing!\n\nI have been traveling and am sorry you haven't heard back from me until now.\n\nThis change looks good. I'll try it out this Friday and get back to you!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/127164300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/128689976", "body": "Hey @ScoreUnder, I tried you branch out locally and it works great!\n\nWhile I was trying it, I realized that flushing should only be required if the output is buffered. Since we want output to show up at the tty directly, I figured we could try setting the output stream to be unbuffered instead of flushing it on every iteration.\n\nI have pushed a branch called [unbuffered-out](https://github.com/thoughtbot/pick/tree/unbuffered-out) that does just this. Could you try it locally to see if it fixes the issues you were having?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/128689976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/128720721", "body": "Hey @eavgerinos! I just released pick 1.2.0. Would you like to update the Debian package and also add installation instructions to the README?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/128720721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129365266", "body": "Thanks for trying it out! It definitely seems like the flushing buffered versions works best so lets go with that one. I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129365266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129368459", "body": "Hey @temochka, thanks so much for both reporting and fixing this! I've tried this out locally and it works great. I'll merge it right away!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129368459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129369445", "body": "Hey @temochka, thanks for reporting this! This is definitely a bug and a PR would be much welcome!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129369445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129703967", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129703967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/131742484", "body": "Hey @temochka, thanks for submitting this PR! I had two questions, other than that, this looks great!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/131742484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/131742745", "body": "Hey @rheber, thanks for submitting this PR! I think it looks great and will merge it right away!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/131742745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/136970174", "body": "Thanks @temochka! I will get time to merge this in on Friday!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/136970174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/137715306", "body": "Merged as 5e243a5b1666573a349f33911c3d22779eac0899, 3259fadac76914857f16db5b048e651bcf7e7c8b, and 011075fb249f97fdee2df784eda54d0b857b45b3. Thanks, @temochka!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/137715306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138516363", "body": "Thanks for finding those! If you'd want to help fix them, that'd be much appreciated. If not, I'll get to it as soon as I can!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138516363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138657320", "body": "Sure, checking return values makes a lot of sense.\n\nI'm not sure what that would look like in terms of this project. Could you give me an example of how to apply it to pick?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138657320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138672161", "body": "Static analysis seems like a good idea. Which program would you recommend?\n\nThanks for the links. The second one seems to be broken.\n\nIn general I feel like I have a tough time imagining what this would look like in C. Would it rely heavily on macros? The articles you link to seem to be for a specialized aspect oriented language and C++ respectively.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138672161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/139962479", "body": "I'm not sure how to handle this issue. PRs to improve code quality are much welcome.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/139962479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140001334", "body": "If you submit a PR integrating it, I'd be happy to consider it!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140001334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140006177", "body": "I'm not sure how that integration would affect the project. Since AspectC++ seems to be a totally different language from C, I think it would require a total rewrite. If so, I'd not want to integrate it. If not, could you please demonstrate what kind of things would have to change by supplying an example?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140006177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140015330", "body": "OK, I'm not interested in doing a rewrite in AspectC++.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140015330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/143191318", "body": "Thanks for reporting this @rosshadden. I'm not sure what might be causing this and will look into it when I have time.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/143191318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/147731050", "body": "Interesting.\n\nAll the linking is done by autotools and the libraries to link to are specified in [configure.ac](https://github.com/thoughtbot/pick/blob/011075fb249f97fdee2df784eda54d0b857b45b3/configure.ac). I don't see how this would lock it at version 5, though.\n\nIf you uninstall `ncurses5` and `pick`, then reinstall `pick` without installing `ncurses5`, will it work?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/147731050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148686908", "body": "I'm going to close this due to inactivity.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148686908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148692645", "body": "Thanks, @mike-burns!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148692645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148749338", "body": "@rosshadden Would this be supported by pressing <kbd><kbd>Alt</kbd><kbd>Enter</kbd></kbd> without typing anything into pick when it starts?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148749338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148752963", "body": "I'm hesitant in adding more key bindings in the interest of keeping the interaction simple.\n\nWhy does `tig` exit when `pick` exits with a non-zero status code?\n\nWhy does pressing <kbd><kbd>Alt</kbd><kbd>Enter</kbd></kbd> directly after launching `pick` (or <kbd><kbd>Ctrl</kbd><kbd>U</kbd></kbd><kbd><kbd>Alt</kbd><kbd>Enter</kbd></kbd> after typing something) not support this?\n\nAre there other alternatives? Maybe providing an option to not treat canceling as an error, i.e. return a zero status code?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148752963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148898385", "body": "Cool! I'm happy it works.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148898385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/150551917", "body": "Thanks @srstevenson!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/150551917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/152109853", "body": "Hey @FreedomBen, thanks for contributing!\n\nDid you download the latest release? When creating the tarball that's uploaded and published for every release Automake will create `INSTALL.md` from `INSTALL.md.in`, it will also run the equivalent of `./autogen.sh` so that when you unpack the tarball you can run `./configure` directly.\n\nIf you want to build directly from `master` you should follow the instructions in `DEVELOPING.md`. Does these seem more correct to you?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/152109853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/152948051", "body": "Thanks @FreedomBen, I'm glad you like it!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/152948051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/155051583", "body": "Thanks @mike-burns! I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/155051583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/158016866", "body": "Hey @FreedomBen, thanks for reporting this.\n\nWhat versions of pick and tmux are you running? Might this be an issue with your colorscheme similar to #44?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/158016866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/158388212", "body": "I'm happy the problem is solved. Thanks for documenting how you did it, @FreedomBen!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/158388212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/162452075", "body": "Thanks for submitting this PR, @mptre! I'll take a closer look at this and get back to you when I've had time to do so!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/162452075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165029240", "body": "Thanks for submitting this PR, @mptre, it looks great! I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165029240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165032748", "body": "Hey @mptre, I tried your branch locally and it works great. I'm not sure I see any difference in behavior to what is currently on master, though. How do I best test this?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165032748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165714650", "body": "Following your instructions, on Mac OS X 10.11.2 in Terminal.app, I'm seeing the same behavior on both your branch and master. I'm not sure if I'm seeing the correct behavior or the incorrect behavior.\n\n> The pick interface should be drawn at the bottom of the terminal.\n\nI think this is happening but I'm not sure. Here's an animated gif of what I'm seeing:\n\n![pick](https://cloud.githubusercontent.com/assets/66666/11892708/13d60e74-a56b-11e5-8cac-15afe8dd29f1.gif)\n\nAre you seeing something different? If so, could you describe or record it? What OS and terminal emulator are you running?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/165714650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/166225190", "body": "I see! I was using the wrong executable and wasn't seeing the behavior your gif demonstrates.\n\nThis looks good to me. I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/166225190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/166227309", "body": "Merged as dc0c39dc337ffae9a88354f9c2c3e2d1809868f4. Thanks, @mptre!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/166227309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/166566145", "body": "Hey @mptre, this looks great! Thanks for contributing! I commented with a couple of questions above.\n\nSince this is a change in behavior, do you think we need to increment the major or minor version number when releasing?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/166566145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/167520850", "body": "Thanks, @mptre. I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/167520850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/167521390", "body": "Merged as bf58c61a7639ad9a45cc33e9d47488367fed7ae1.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/167521390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/168625731", "body": "Hey @mptre, this is awesome! Thanks for your great work! I left some comments above but other than that this looks great and I'd be happy to merge it. I also agree with your `TODO` notes.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/168625731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/168634266", "body": "@mike-burns, @mptre I would love your feedback on this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/168634266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/168646191", "body": "Thanks, @teoljungberg. I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/168646191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9982217", "body": "@mike-burns Sounds interesting. In what way is it more flexible?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9982217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11541823", "body": "style(9) says:\n\n> Prototypes may have an extra space after a tab to enable function names to line up\n\nI interpreted \"may\" as \"optional\". Is the space optional but the tab not? Should it be _a_ tab specifically? I do think following the style guide is important.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11541823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650104", "body": "Resloved IRL. The reason is line 100 were `raw_tty_putc` is  passed to `tputs`.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650209", "body": "Maybe, but I'm not sure how. Could you give an example?\n\nThe complexity is that if we read ESC and _then_ '[' or '0' and _then_ 'A', 'B', 'C' or 'D'. If we at some point do not read any of these we bail and return `ch`.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650221", "body": "Oh, yeah! Good catch.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650419", "body": "Using `reallocarray` is a great idea! In the interest of merging this PR as quickly as possible I have created #59 for this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650471", "body": "Great catch! Fixed.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11650471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/13816399", "body": "Thanks, @xuchunyang!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/13816399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19413353", "body": "Thanks for checking, @mptre!\n\nI intentionally left the first occurrences in since I think the thoughtbot code of conduct makes sense. In retrospect, this might be wrong since the code of conduct refers to conduct@thoughtbot.com which neither of us receives email for?\n\nI'm not a lawyer but I think thoughtbot still are copyright holders in some sense so I also left the mentions for the copyright and authors.\n\n@mike-burns What are your thoughts on this?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19413353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19444463", "body": "Thanks for the feedback, @mike-burns and @mptre. I have opened #170 to address the code of conduct issue.\n\nI think a HISTORY section would be great.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19444463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19606021", "body": "Sure! Done in #175.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19606021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/20230144", "body": "Nice catch!", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/20230144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/20795834", "body": "Nice catch!\r\n\r\nWhat are your thoughts on letting the OS clean up after the process? Is there any case where manually cleaning up is required? If not, manually cleaning up might make sense in case the code is ever moved around.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/20795834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/20805553", "body": "That makes sense!", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/20805553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896347", "body": "Extracted as `filter_choices` in 2d8d063.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896358", "body": "`word_pos` is much better. Changed in 2061c44.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896373", "body": "Great point. Done in 62a52a2.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896700", "body": "I'm glad you asked. `KEY_ENTER` is defined in `ncurses.h` and is really <kbd><kbd>Ctrl</kbd>-<kbd>Enter</kbd></kbd>. Very confusing.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16907939", "body": "Good point. Added in ebd3453.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16907939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16908160", "body": "Good question. I don't actually know. I tend to use pre-decrement operator because I find that it makes more sense for the expression to evaluate to the decremented value, not the original. I only use the post-decrement operator when I really mean it. In this case it does not matter since we just throw the value away. I guess it is just a habit. @mike-burns Do you know what's the normal thing to do here?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16908160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20362726", "body": "Thanks for finding that. Confirmed the leak with valgrind(1) and fixed it in b964aa5.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20362726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20363086", "body": "Since we're using `int`s as booleans in other places I think I prefer to stick to this style for consistency.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20363086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20824686", "body": "Would specifying these in the same order as \"Left/Right or Ctrl-B/Ctrl-F\" make sense?\n\nI'm thinking something like:\n\n```\n.It Ic \"Up\\&/Down or Ctrl\\&-P\\&/Ctrl\\&-N\"\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20824686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20923949", "body": "Should we error in this scenario or should we `exit`? I feel like interrupting pick is a part of normal execution and therefor I think `exit` might be better.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20923949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20924041", "body": "Could `130` be extracted into `EX_SIGINT`?\n\n```\n#define EX_SIG 128\n#define EX_SIGINT (EX_SIG + SIGINT)\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20924041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20924115", "body": "Should we use snake case for this function name to comply with the existing convention?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20924115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20984835", "body": "Should this be `EX_SIGINT` instead of `EX_SIGNINT`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20984835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23089436", "body": "If neither `strlcpy` nor libbsd is present on the system, will this error out? #10 bundles implementations of `strlcpy` and `strlcat` which are used if `AC_CHECK_FUNCS` doesn't find the functions. Would that do as a replacement for `AC_SEARCH_LIBS`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23089436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23092727", "body": "Would using an `if` statement to check the return value and `err` to error if `freopen` returns `NULL` improve consistency with other parts of the code base?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23092727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003375", "body": "Should this file move into the `compat` directory?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003408", "body": "Should this include `compat/strlcpy.c` and `compat/strlcpy.h`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003421", "body": "Should there be a header file declaring `strlcpy`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003436", "body": "Should this file include `compat/strlcpy.h`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21003436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23495382", "body": "I'm not sure I understand how this works. When is `*start_pos == -1`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23495382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23495390", "body": "Now that this methods also communicates back the start position of the match would renaming it `find_match`, accepting another pointer for the length and returning `1` if a match was found and `0` if not, make this clearer?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23495390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23495399", "body": "I see how `mpos` is reset on every iteration in `score_str` but I don't get if `mlen` will reset as well? It seems like it will only reset if it is `-1`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23495399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23495405", "body": "Since this function is not only used for putting matcher would it be clearer that this was mure general purpos if `mpos` and `mlen` were renamed `upos` and `ulen` for underline?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23495405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25444990", "body": "Yeah, I think a we could just remove `ncurses(3X)`.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25444990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25862988", "body": "I actually do not know. My theory is that selecta handles control characters differently.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25862988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25933087", "body": "Yes. I mistakenly removed this in an earlier commit since it had no effect on my Arch Linux machine. This made it fail on @teoljungberg's Mac. Instead of returning we fall through to the redraw on line 74.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25933087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25949222", "body": "Good catch. Thanks @gabebw.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25949222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27285558", "body": "I just realized, won't this be handled by `autoconf`? After building this locally I have a modified `config.h.in` with:\n\n``` diff\n+/* Define if ncursesw is available */\n+#undef HAVE_NCURSESW_H\n+\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27285558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27290394", "body": "Awesome. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27290394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27473696", "body": "@eavgerinos No stress! Thanks for fixing it!\n\nI'm still curious, though, what does the `AC_TRY_LINK` construct do that the `AC_SEARCH_LIBS` and `config.h.in` does not?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27473696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27549586", "body": "Won't that be handled by `AC_SEARCH_LIBS` on configure when `config.h` is created?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27549586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27886080", "body": "I'm sorry if I'm not getting this correctly, but won't `AC_SEARCH_LIBS` define `HAVE_NCURSESW_H` in `config.h` if `ncursesw` exists, that will then be available in `src/ui.c`?\n\nWhat I'm suggesting is we drop `AC_TRY_LINK`. Does that build on your system?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27886080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/28219612", "body": "Great, I'll merge this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/28219612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/29942694", "body": "I don't know. What would `n` be? The length of the shortest string? Is that what `strcmp` does?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/29942694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37170665", "body": "Is this the same as the following and would you in that case think the following is clearer?\n\n``` c\ntmp_ptr = strpbrk(string, separators);\nwhile (tmp_ptr = strpbrk(tmp_ptr, separators)) {\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37170665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37170710", "body": "Should `separators` be singular `separator`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37170710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37723492", "body": "That makes a lot of sense. Thanks for explaining it! Should we rename `field_separator` to `field_separators` or `separators` for parity?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37723492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37723566", "body": "That is a very good point! Thanks for explaining. It's obvious that the `for` loop is superior in this case!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37723566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47746681", "body": "Today I learned about [stringification](https://gcc.gnu.org/onlinedocs/cpp/Stringification.html)! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47746681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47747515", "body": "What is the reason for emitting these lines?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47747515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47747714", "body": "Could this be avoided by printing the query before printing the choices?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/47747714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48235527", "body": "Do you think replacing `0` with `STDIN_FILENO` would be make this easier to read?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48235527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48235906", "body": "What do you think about the following member names?\n\n```\nsize_t size;\nsize_t length;\nchar *string;\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48235906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715092", "body": "I think there might be an off by one error here. Running pick with more choices than would fit on screen, the selection is invisible. I think this is because the last choice printed to the terminal makes it scroll and then the first choice is overwritten by the query line.\n\nChanging this to `&& i < lines + 1` locally fixes the issue for me.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715231", "body": "Sorry, `- 1` that is.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715292", "body": "Given https://github.com/thoughtbot/pick/pull/82/files#r48715231 is correct, should it be `lines - 1` here too?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715414", "body": "What do you think about naming this length to be more consistent with https://github.com/thoughtbot/pick/pull/82/files#diff-803c5170888b8642f2a97e5e9423d399R106?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715505", "body": "What do you think about naming this something like `compare_choices` or `cmp_choices` to denote that it serves as a comparison function?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48715505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48825814", "body": "Thanks! I can't come up with a good name for it. Is `v` for vector? Let's leave it be for now.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48825814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48826050", "body": "I just realized I merged without resolving this one. Fixed in fdaefda.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/48826050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49058819", "body": "In this case, `start` has to be a `char *` to the start of the match but `strncasecmp` returns an `int`. I have updated `strcasechr` to use `strncasecmp`, though in af25c5f.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49058819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49058849", "body": "Good catch! I didn't think about that. Fixed in af25c5f.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49058849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49865276", "body": "I think these instances were correctly indented. I use `cinoptions=:0,t0,+4,(4` in Vim. What editor and configuration do you use?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/49865276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/53463218", "body": "Good point. Parens added in e1b7bda.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/53463218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/53476768", "body": "Great idea @mike-burns! What do you think of 8747705?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/53476768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55012934", "body": "Yeah, that's a great idea! Done in 3c2bec4.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55012934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55012944", "body": "Good call! Done in 50f4b06.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55012944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59009941", "body": "I like the reversed one! Changed in 1f285e8.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59009941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/58994029", "body": "Should we remove the space in front of the first `*` on this line?\n\nIn the past, I've tried to align the declared function names for readability. The added space in front of the functions not returning a pointer is to account for the asterisk for those that do. This is described in OpenBSD's style(9):\n\n> Prototypes may have an extra space after a tab to enable function names to line up:\n> \n> ```\n> static char   *function(int, const char *); \n> static void    usage(void);\n> ```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/58994029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/58995755", "body": "Does this function return whether or not the byte is the continuation of an utf-8 character?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/58995755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/58995765", "body": "Does this function return whether or not the byte is the continuation of an utf-8 character?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/58995765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/58995954", "body": "Could this `if` be joined with the above `else` to reduce indentation?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/58995954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/66942383", "body": "Since there are only two cases, do you think an if statement would make this clearer?\n\n```\nif (c == '\\0') {\n    /*\n     * A null character will be present prior the\n     * terminating null character if descriptions is\n     * enabled.\n     */\n    c = ' ';\n    col++;\n} else if (!isu8cont(c))\n    col++;\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/66942383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/66942453", "body": "I think this is a great solution!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/66942453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69742716", "body": "As far as I understand, we only want to do this when the query is changed or put differently; whenever we do the following:\n\n```\nfilter_choices();\nselection = 0;\n```\n\nReading through the code, I notice this bit being duplicated in all cases where the query is changed.\n\nIn all other cases we also want to skip resetting `yscroll`. For example, in the left and right arrow key cases. Currently after advancing `yscroll`, pressing left or right arrow will reset it to `0`.\n\nI see two possible solutions to this:\n- We could add `yscroll = 0;` wherever the above bit is duplicated. This would introduce more duplication but would fix the bug.\n- Alternatively, we could extract the call to `filter_choices` and resetting the `selection` to just above this line and add `continue` statements to all branches that shouldn't go through the reset.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69742716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72056378", "body": "How does this handle the case where there are still choices below the selection and possibly below the scroll, but not more than `lines - 1`.\n\nIf a full page can't be scrolled (if this condition is false), I'd expect it to scroll to and select the last choice. What are your thoughts?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72056378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72208220", "body": "That's a great improvement!\n\nWhen I try it out locally it still feels a bit unnatural, though. For example, if I select the third choice by pressing the down arrow key twice and then press page up, nothing happens. What I'd expect is for the first choice to be selected. Another example is if I select the last choice in a list with more choices than would fit two pages, and then press page up it will advance the selection by two pages - 1.\n\nI think what confuses me is that it is not immediately clear to me what the page up/down keys are controlling. In the case of the arrow keys, it is clearly controlling the selection and then the choices are scrolled to always show the selected one.\n\nWhat do you think about letting the page up/down keys also control the selection by advancing it by a `lines` number of choices and then scrolling the choices to show the selection?\n\nIf `selection < lines` then it could `selection = 0` and when `choices_count - selection < lines` then it could `selection = choices_count`.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72208220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72573229", "body": "The new behavior works great and the description sounds good!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72573229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72942343", "body": "I agree that zeroing out the input buffer isn't necessary. Thanks for catching that!\n\nI'm not sure how the change to this condition is related to this. Could you elaborate on this? When is `length` zero?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72942343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72942693", "body": "Since we're only ever freeing this at the end of successful execution, I agree that letting the OS do this is fine.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72942693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72943871", "body": "I can't really tell the difference between `tty_lines` and `lines` just from this name.\n\nWould something like `choice_lines` make it clearer that it is `lines` minus 1 for the query line?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72943871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72948074", "body": "Great catch!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/72948074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/74804984", "body": "I don't think we should hold back on merging this PR due to this but a thought for future PRs:\n\nIt's not obvious to me what keys are pressed in this spec. I wonder if we could clarify by using some kind of key character aliases in the `keys` such as `Ctrl-B` or `^B` to mean `\\002`? If not, what do you think about adding support for comments in the spec runner so one could write:\n\n```\nkeys: abc \\002 \\025 \\\\n -- Ctrl-B followed by Ctrl-U and Enter\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/74804984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/79314256", "body": "Great point! Fixed in 64a5107.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/79314256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/81335514", "body": "Now that his is declared up top, can we drop `static` here?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/81335514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/81702299", "body": "Nice, I didn't know about `MB_CUR_MAX`.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/81702299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/83448531", "body": "Just curious: why `\"x$with_ncursesw\" != xno` and not `\"$with_ncursesw\" != no`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/83448531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/83455879", "body": "The old `AC_SEARCH_LIBS` mentioned `ncurses` instead of `curses`. I'm not sure what the differences between them are.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/83455879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84219451", "body": "I thought the two were identical?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84219451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84225959", "body": "I see. I'll merge this as is for now. Thanks for reviewing!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84225959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84598191", "body": "Should it be \"a\" instead of \"an\"?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/84598191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111887331", "body": "Is `$build_linux` used solely to define `LINUX` so that it can be picked up in `Makefile.am` or is it used elsewhere?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111887331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111887864", "body": "I haven't used `AC_CANONICAL_HOST` before and didn't find any documentation detailing the formatting of `host_os`. Is `linux*` a reliable pattern for catching all Linux-based OSs?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111887864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111888056", "body": "Could defining `_XOPEN_SOURCE` on non-linux platforms cause problems? If not, what do you think of always defining it? That way we could avoid the complexities of testing for the host os.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111888056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111888172", "body": "Should this comment say `exit_underline` instead of `uleo` that the parameter names have been changed?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111888172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111888960", "body": "Is this for resetting internal state of `mbtowc`?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111888960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111915836", "body": "I see. Thanks for the links! I'm happy to try this and correct course if we run into issues with some distro.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111915836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/123994195", "body": "What do you think about caching this in `keys` like we do with the string?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/123994195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/123994629", "body": "I was wondering why this wasn't `const char` but then I saw `tigetstr` takes a `char *`. I'm not quite sure why though...", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/123994629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127662209", "body": "What kind of clutter appears if we don't output this? I tried removing this line but could reproduce any issues.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127662209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127663173", "body": "This is off by one from the code that was removed from the `PAGE_DOWN` and `END` branches in `selected_choice()`. Is this because it is now done prior to printing the choices?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/127663173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136509650", "body": "Out of curiosity: What are the pros of scoping this static variable to `get_key` and letting `*key` point to it rather than declaring it outside `get_key` and letting `selected_choice` refer directly to it? Making it possible to declare it `const`?\r\n\r\nThe size of `buf` seems to have increased from `6` to `8`. What was the reason for doing that?", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/136509650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/160897499", "body": "It seems like a space snuck in just before `-fsanitize`.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/160897499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "borstel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/calleerlandsson/pick/commits/0268ad01e2d09339fd5ac772f80736a6830f9177", "message": "change the keycode structure in get_key()\n\n- make function get_key() work on big endian machines\n- remove inclusion of 'sys/ttydefaults.h'\n- remove variable key in get_key()"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mike-burns": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53391174", "body": "Great change, and the extracted `memmove()` is a good idea.\n\nWishlist: `^k`. Actual emacs users don't use `^u` or `^w` but hammer on `^k` all day.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53391174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53542824", "body": "<kbd><kbd>Ctrl</kbd>-<kbd>k</kbd></kbd> will delete until the end of line. In actual emacs, to delete a whole line you'd type <kbd><kbd>Ctrl</kbd>-<kbd>a</kbd> <kbd>Ctrl</kbd>-<kbd>u</kbd></kbd>.\n\n(In emacs, <kbd><kbd>Ctrl</kbd>-<kbd>u</kbd></kbd> will add a number in front of a command, so e.g. <kbd><kbd>Ctrl</kbd>-<kbd>u</kbd> <kbd>4</kbd> <kbd>Ctrl</kbd>-<kbd>;</kbd></kbd> will comment out four lines.)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53542824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64391512", "body": "That's what I recommend. I especially recommend using the system library when possible; libbsd does its best to stay up-to-date but your OS gets security patches more often.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64391512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64391567", "body": "This is the other piece of glue, BTW: https://github.com/bitptr/argonaut/blob/master/configure.ac#L6\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64391567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65086891", "body": "Works fine on Debian GNU/Linux jessie. Will test OpenBSD tonight.\n\nFreeBSD:\n\n```\n~/pick% uname -a\nFreeBSD jack.mike-burns.com 9.3-RELEASE-p3 FreeBSD 9.3-RELEASE-p3 #0: Mon Oct 20 15:08:33 UTC 2014     root@amd64-builder.daemonology.net:/usr/obj/usr/src/sys/GENERIC  amd64\n~/pick% ./autogen.sh \nconfigure.ac:5: installing './compile'\nconfigure.ac:3: installing './install-sh'\nconfigure.ac:3: installing './missing'\nsrc/Makefile.am: installing './depcomp'\n~/pick% ./configure --prefix=$HOME/.localest\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... ./install-sh -c -d\nchecking for gawk... no\nchecking for mawk... no\nchecking for nawk... nawk\nchecking whether make sets $(MAKE)... yes\nchecking whether make supports nested variables... yes\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables... \nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking whether gcc understands -c and -o together... yes\nchecking for style of include used by make... GNU\nchecking dependency style of gcc... gcc3\nchecking how to run the C preprocessor... gcc -E\nchecking for grep that handles long lines and -e... /usr/bin/grep\nchecking for egrep... /usr/bin/grep -E\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking fcntl.h usability... yes\nchecking fcntl.h presence... yes\nchecking for fcntl.h... yes\nchecking locale.h usability... yes\nchecking locale.h presence... yes\nchecking for locale.h... yes\nchecking for stdlib.h... (cached) yes\nchecking for string.h... (cached) yes\nchecking for unistd.h... (cached) yes\nchecking for size_t... yes\nchecking for ssize_t... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible malloc... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible realloc... yes\nchecking for memmove... yes\nchecking for setlocale... yes\nchecking for strdup... yes\nchecking that generated files are newer than configure... done\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating src/Makefile\nconfig.status: creating man/Makefile\nconfig.status: creating config.h\nconfig.status: executing depfiles commands\n~/pick% make\n(CDPATH=\"${ZSH_VERSION+.}:\" && cd . && /bin/sh /home/mike/pick/missing autoheader)\nrm -f stamp-h1\ntouch ./config.h.in\ncd . && /bin/sh ./config.status config.h\nconfig.status: creating config.h\nconfig.status: config.h is unchanged\nmake  all-recursive\nMaking all in src\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT choice.o -MD -MP -MF .deps/choice.Tpo -c -o choice.o choice.c\nmv -f .deps/choice.Tpo .deps/choice.Po\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT choices.o -MD -MP -MF .deps/choices.Tpo -c -o choices.o choices.c\nmv -f .deps/choices.Tpo .deps/choices.Po\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT io.o -MD -MP -MF .deps/io.Tpo -c -o io.o io.c\ncc1: warnings being treated as errors\nio.c: In function 'get_choices':\nio.c:46: warning: implicit declaration of function 'getline'\n*** [io.o] Error code 1\n\nStop in /usr/home/mike/pick/src.\n*** [all-recursive] Error code 1\n\nStop in /usr/home/mike/pick.\n*** [all] Error code 1\n\nStop in /usr/home/mike/pick.\n~/pick% \n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65086891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65089493", "body": "Actually, it has one, but you need to define `_WITH_GETLINE` before using it:\n\nhttps://www.freebsd.org/cgi/man.cgi?query=getline&apropos=0&sektion=0&manpath=FreeBSD+11-current&arch=default&format=html\n\nWeird, really.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65089493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65136116", "body": "Sorry, I was in the wrong branch. This is FreeBSD on `ks-bsd`:\n\n```\n~/pick% git co ks-bsd\nBranch ks-bsd set up to track remote branch ks-bsd from origin.\nSwitched to a new branch 'ks-bsd'\n~/pick% ./autogen.sh \nsrc/Makefile.am:4: warning: source file 'compat/strlcpy.c' is in a subdirectory,\nsrc/Makefile.am:4: but option 'subdir-objects' is disabled\nautomake-1.14: warning: possible forward-incompatibility.\nautomake-1.14: At least a source file is in a subdirectory, but the 'subdir-objects'\nautomake-1.14: automake option hasn't been enabled.  For now, the corresponding output\nautomake-1.14: object file(s) will be placed in the top-level directory.  However,\nautomake-1.14: this behaviour will change in future Automake versions: they will\nautomake-1.14: unconditionally cause object files to be placed in the same subdirectory\nautomake-1.14: of the corresponding sources.\nautomake-1.14: You are advised to start using 'subdir-objects' option throughout your\nautomake-1.14: project, to avoid future incompatibilities.\nsrc/Makefile.am:4: warning: source file 'compat/strlcat.c' is in a subdirectory,\nsrc/Makefile.am:4: but option 'subdir-objects' is disabled\n~/pick% ./configure --prefix=$HOME/.localest\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... ./install-sh -c -d\nchecking for gawk... no\nchecking for mawk... no\nchecking for nawk... nawk\nchecking whether make sets $(MAKE)... yes\nchecking whether make supports nested variables... yes\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables... \nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking whether gcc understands -c and -o together... yes\nchecking for style of include used by make... GNU\nchecking dependency style of gcc... gcc3\nchecking how to run the C preprocessor... gcc -E\nchecking for grep that handles long lines and -e... /usr/bin/grep\nchecking for egrep... /usr/bin/grep -E\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking fcntl.h usability... yes\nchecking fcntl.h presence... yes\nchecking for fcntl.h... yes\nchecking locale.h usability... yes\nchecking locale.h presence... yes\nchecking for locale.h... yes\nchecking for stdlib.h... (cached) yes\nchecking for string.h... (cached) yes\nchecking for unistd.h... (cached) yes\nchecking for size_t... yes\nchecking for ssize_t... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible malloc... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible realloc... yes\nchecking for memmove... yes\nchecking for setlocale... yes\nchecking for strdup... yes\nchecking for strlcpy... yes\nchecking for strlcat... yes\nchecking that generated files are newer than configure... done\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating src/Makefile\nconfig.status: creating man/Makefile\nconfig.status: creating config.h\nconfig.status: executing depfiles commands\n~/pick% make\n(CDPATH=\"${ZSH_VERSION+.}:\" && cd . && /bin/sh /home/mike/pick/missing autoheader)\nrm -f stamp-h1\ntouch ./config.h.in\ncd . && /bin/sh ./config.status config.h\nconfig.status: creating config.h\nconfig.status: config.h is unchanged\nmake  all-recursive\nMaking all in src\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT choice.o -MD -MP -MF .deps/choice.Tpo -c -o choice.o choice.c\nmv -f .deps/choice.Tpo .deps/choice.Po\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT choices.o -MD -MP -MF .deps/choices.Tpo -c -o choices.o choices.c\nmv -f .deps/choices.Tpo .deps/choices.Po\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -g -O2 -MT io.o -MD -MP -MF .deps/io.Tpo -c -o io.o io.c\ncc1: warnings being treated as errors\nio.c: In function 'get_choices':\nio.c:46: warning: implicit declaration of function 'getline'\n*** [io.o] Error code 1\n\nStop in /usr/home/mike/pick/src.\n*** [all-recursive] Error code 1\n\nStop in /usr/home/mike/pick.\n*** [all] Error code 1\n\nStop in /usr/home/mike/pick.\n```\n\nAnd this is OpenBSD:\n\n```\n~/thoughtbot/pick% ./autogen.sh\nconfigure.ac:6: installing './compile'\nconfigure.ac:4: installing './install-sh'\nconfigure.ac:4: installing './missing'\nsrc/Makefile.am:4: warning: source file 'compat/strlcpy.c' is in a subdirectory,\nsrc/Makefile.am:4: but option 'subdir-objects' is disabled\nautomake-1.14: warning: possible forward-incompatibility.\nautomake-1.14: At least a source file is in a subdirectory, but the 'subdir-objects'\nautomake-1.14: automake option hasn't been enabled.  For now, the corresponding output\nautomake-1.14: object file(s) will be placed in the top-level directory.  However,\nautomake-1.14: this behaviour will change in future Automake versions: they will\nautomake-1.14: unconditionally cause object files to be placed in the same subdirectory\nautomake-1.14: of the corresponding sources.\nautomake-1.14: You are advised to start using 'subdir-objects' option throughout your\nautomake-1.14: project, to avoid future incompatibilities.\nsrc/Makefile.am:4: warning: source file 'compat/strlcat.c' is in a subdirectory,\nsrc/Makefile.am:4: but option 'subdir-objects' is disabled\nsrc/Makefile.am: installing './depcomp'\n~/thoughtbot/pick% ./configure --prefix=$HOME/.localest\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... ./install-sh -c -d\nchecking for gawk... no\nchecking for mawk... no\nchecking for nawk... no\nchecking for awk... awk\nchecking whether make sets $(MAKE)... yes\nchecking whether make supports nested variables... yes\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables... \nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking whether gcc understands -c and -o together... yes\nchecking for style of include used by make... GNU\nchecking dependency style of gcc... gcc3\nchecking how to run the C preprocessor... gcc -E\nchecking for grep that handles long lines and -e... /usr/bin/grep\nchecking for egrep... /usr/bin/grep -E\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking fcntl.h usability... yes\nchecking fcntl.h presence... yes\nchecking for fcntl.h... yes\nchecking locale.h usability... yes\nchecking locale.h presence... yes\nchecking for locale.h... yes\nchecking for stdlib.h... (cached) yes\nchecking for string.h... (cached) yes\nchecking for unistd.h... (cached) yes\nchecking for size_t... yes\nchecking for ssize_t... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible malloc... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible realloc... yes\nchecking for memmove... yes\nchecking for setlocale... yes\nchecking for strdup... yes\nchecking for strlcpy... yes\nchecking for strlcat... yes\nchecking that generated files are newer than configure... done\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating src/Makefile\nconfig.status: creating man/Makefile\nconfig.status: creating config.h\nconfig.status: executing depfiles commands\n~/thoughtbot/pick% make\n(CDPATH=\"${ZSH_VERSION+.}:\" && cd . && /bin/sh /home/mike/thoughtbot/pick/missing autoheader)\nrm -f stamp-h1\ntouch ./config.h.in\ncd . && /bin/sh ./config.status config.h\nconfig.status: creating config.h\nconfig.status: config.h is unchanged\nmake  all-recursive\nMaking all in src\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -I /usr/local/include/db4 -g -O2 -Wstack-protector -fstack-protector -MT choice.o -MD -MP -MF .deps/choice.Tpo -c -o choice.o choice.c\nmv -f .deps/choice.Tpo .deps/choice.Po\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -I /usr/local/include/db4 -g -O2 -Wstack-protector -fstack-protector -MT choices.o -MD -MP -MF .deps/choices.Tpo -c -o choices.o choices.c\nmv -f .deps/choices.Tpo .deps/choices.Po\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -I /usr/local/include/db4 -g -O2 -Wstack-protector -fstack-protector -MT io.o -MD -MP -MF .deps/io.Tpo -c -o io.o io.c\nmv -f .deps/io.Tpo .deps/io.Po\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -I /usr/local/include/db4 -g -O2 -Wstack-protector -fstack-protector -MT main.o -MD -MP -MF .deps/main.Tpo -c -o main.o main.c\nmv -f .deps/main.Tpo .deps/main.Po\ngcc -DHAVE_CONFIG_H -I. -I..     -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -I /usr/local/include/db4 -g -O2 -Wstack-protector -fstack-protector -MT ui.o -MD -MP -MF .deps/ui.Tpo -c -o ui.o ui.c\nmv -f .deps/ui.Tpo .deps/ui.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -I /usr/local/include/db4 -g -O2 -Wstack-protector -fstack-protector -MT strlcpy.o -MD -MP -MF .deps/strlcpy.Tpo -c -o strlcpy.o `test -f 'compat/strlcpy.c' || echo './'`compat/strlcpy.c\nmv -f .deps/strlcpy.Tpo .deps/strlcpy.Po\ngcc -DHAVE_CONFIG_H -I. -I..    -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -I /usr/local/include/db4 -g -O2 -Wstack-protector -fstack-protector -MT strlcat.o -MD -MP -MF .deps/strlcat.Tpo -c -o strlcat.o `test -f 'compat/strlcat.c' || echo './'`compat/strlcat.c\nmv -f .deps/strlcat.Tpo .deps/strlcat.Po\ngcc -Wall -Wextra -pedantic-errors -Wno-unused-parameter -Werror -I /usr/local/include/db4 -g -O2 -Wstack-protector -fstack-protector -lncurses -L /usr/local/lib/db4 -o pick choice.o choices.o io.o  main.o ui.o strlcpy.o  strlcat.o  \nui.o(.text+0x443): In function `get_selected':\n/home/mike/thoughtbot/pick/src/ui.c:185: warning: strcpy() is almost always misused, please use strlcpy()\nMaking all in man\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/65136116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66143689", "body": "Looks good. Just one comment then merge.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66143689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66144655", "body": "Yup, this makes sense to me.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66144655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/69550570", "body": "Relevant explanations of issues on OS X with strlcpy(3):\n\nhttps://trac.macports.org/ticket/40763\nhttp://mail-archives.apache.org/mod_mbox/thrift-dev/201310.mbox/%3CJIRA.12672435.1380931512599.101994.1382416363861@arcas%3E\n\nLooks like we should define `_FORTIFY_SOURCE=0` on OS X.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/69550570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70469591", "body": "Compiles and works on OpenBSD 5.6 with no warnings.\n\nCompiles and works on FreeBSD 9.3 with no warnings.\n\n(I have OpenBSD 5.6 in a VM on my work laptop now, too.)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70469591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75249195", "body": "Cool progress. Some general code cleanup will be nice (more vertical spacing/newlines), but it's certainly off to a fun start.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75249195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76170601", "body": "- Works on Debian Jessie, in and outside of vim, including arrow keys.\n- Works on OpenBSD 5.6-RELEASE (inside a VM), in and outside of vim, including arrow keys.\n- Works on FreeBSD 10.1-RELEASE (inside a VM), in and outside of vim, including arrow keys.\n\nLGTM!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76170601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76174009", "body": "Yeah, do it!\n\nhttps://i.ytimg.com/vi/PFp-EyNSX1Q/hqdefault.jpg\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76174009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76347956", "body": "I like that there is still the option to force it with `-X`. I'll submit a PR to override it with `-x`, later. LGTN.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76347956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76350335", "body": "Can you update the manpage to document that it also looks for `$VIM`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76350335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76358189", "body": "Looks good to merge.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76358189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76374717", "body": "Looks right to me. Up to @calleerlandsson how he wants the release infrastructure to look.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76374717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76388297", "body": "Will you be signing the tarball?\n\nOther than that: good changes.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76388297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76388936", "body": "Yes, I think that would be a nice addition.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76388936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76390059", "body": "Let's Go To Malm\u00f6.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76390059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76685249", "body": "I was thinking about this over the weekend.\n\nDepending on `distcheck` means that it is always rebuilt. Is there another target we can depend on that invokes `distcheck` only if needed? What if you depended on `$(srcdir)/$(DIST_ARCHIVES)` or something like that? Would that also solve this issue?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76685249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76690298", "body": "OK yes, I see the issue.\n\nUltimately this comes down to what your workflow is. If the same person generates the tarball, formula, and PKGBUILD at the same time, then my idea makes some sense; if it's two or three different people, then this PR LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76690298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77530728", "body": "The code works from vim.\n\nCan you add something to warn people that it only works from terminal vim, not GUI vim.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77530728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77831652", "body": "Nice catch, very subtle.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77831652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78152901", "body": "Can anyone repro this yet?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78152901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/100230620", "body": "The code makes sense. That nesting in `get_selected` is deep; perhaps it could be simplified by swapping the `ERR` check and using the fact that err(3) exits. e.g.\n\n``` c\nif ((c = getc(tty_in)) == ERR)\n        err(1, \"getc\");\nif (ch != KEY_BRACKET && ch != KEY_RAW_O)\n        break;\nif ((ch = getc(tty_in)) == ERR)\n        err(1, \"getc\");\nswitch (ch) {\n...\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/100230620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118361009", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118361009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148692263", "body": "Simple solution. LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148692263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/154875840", "body": "That is much simpler, and seems like a good base from which we can refactor and extract more. LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/154875840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953280", "body": "That's not a thing. Did you mean `-v` ?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953310", "body": "These aren't needed for Homebrew-ing. Were I doing it all over again, I wouldn't have a `release` target.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953320", "body": "Might be worth noting: I just switched rcm from a Makefile-driven release to a sh-driven release, and it's given me more flexibility: https://github.com/thoughtbot/rcm/blob/master/maint/release.in\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9982524", "body": "You're right, \"flexible\" is the wrong word. It's more that m4sh has a harder syntax than normal sh; it's all of sh's syntax combined with all of m4's syntax combined with all of make's syntax. Because of this, I extracted it.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9982524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540525", "body": "This commit LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540538", "body": "Rest in peace, alignment. This commit seems fine, despite the fact that it now diverges from my coding style.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540547", "body": "Good change. This commit LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11540547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11541919", "body": "All the examples in style(9) show tabs + an optional space in function prototypes to get things aligned. The guide itself is unclear about the specifics.\n\nWould it be jarring to have a file with the tabs and a file without the tabs in the same project (but separate files)?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11541919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542144", "body": "You could drop the braces here.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542177", "body": "Ah, you added braces everywhere. OK!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542192", "body": "Nice.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542217", "body": "I like it.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542268", "body": "Ouch; is this for an 80 char limit? I feel like violating that guideline here would make it easier to read.\n\n(Perhaps this is changed in a later commit anyway...)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542333", "body": "Does this handle multiplication overflow issues/should you use reallocarray(3) instead?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542449", "body": "[We talked IRL; the tabs go back.]\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542472", "body": "Can this use calloc(3) to avoid multiplication overflow concerns?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542510", "body": "style(9) says:\n\n> Use a space after keywords (if, while, for, return, switch). No braces are used for control statements with zero or only a single statement unless that statement is more than a single line, in which case they are permitted.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542519", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542570", "body": "This is beautiful poetry.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542667", "body": "Overall: I'm into it. Though I don't mind `str`, `desc`, and `len` -- those seem clear and common enough to me. But I also don't mind `string`, `description`, and `length`.\n\nSo anyway: LGTM.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542698", "body": "Great.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11542698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543161", "body": "Beautiful.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543930", "body": "Yes.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543951", "body": "I'm not sold on this abstraction. Why is `raw_tty_putc` a separate function?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543965", "body": "Lovely.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543983", "body": "Great abstraction.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543992", "body": "Can this all be done with a `switch` and some fall-through?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11543992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11544014", "body": "Can this be on one line now?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/11544014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19413623", "body": "I agree with your assessment:\n- Copyright 2016 Calle, Anton, tbot\n- Copyright 2017 Calle and Anton\n- Might be good to copy the thoughtbot code of conduct into this repo (bundler calls theirs `CODE_OF_CONDUCT.md`), changing the email address.\n- Feel free to remove tbot from the list of authors in the man page; up to you.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/19413623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/24310746", "body": "I typically see `AM_CPPFLAGS` instead of `AM_CFLAGS` here. It doesn't matter much, but it is tradition.\r\n\r\nhttps://www.gnu.org/software/automake/manual/html_node/Program-Variables.html\r\n\r\n`AM_CPPFLAGS` is the new `INCLUDES`, and `PKG_CHECK_MODULES` typically deals with `-I`-related stuff.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/24310746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16701735", "body": "This code is repeated. Maybe extract a `void reset()` function?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16701735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21465128", "body": "Maybe `make && echo \"hello\\ngoodbye\" | src/pick` ? Otherwise people will need to know more about unix which isn't bad but is unrelated to this one line.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21465128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21465747", "body": "Why this whitespace?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/21465747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25073314", "body": "How about a newline between the declarations and the start of the code (the `if`)?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25073314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25932905", "body": "Is this comment still valid?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25932905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25933026", "body": "I guess it is.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25933026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/29938868", "body": "It might be faster to use strncmp(3). Or maybe that will just lead to bad results. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/29938868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/29942996", "body": "Yeah, I guess that's what strcmp(3) does. If `front->str` and `back->str` are definitely strings, I guess strcmp(3) is faster.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/29942996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/53462246", "body": "I worry about expansion -- should `s` and `i` be wrapped in parens?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/53462246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/53462886", "body": "Maybe these could be extracted like:\n\n``` c\np = skip_esc(p, choice->string, j, &esc);\n```\n\nSo I guess:\n\n``` c\nint\nskip_esc(int p, char *str, int j, int *esc)\n{\n  if (*esc) {\n    *esc = IN_ESC_SEQ(str, j);\n    return p;\n  } else if(!(*esc = (str[j] == ESCAPE)))\n    return p + 1;\n}\n```\n\nI don't love that `(!(esc = (choice->string[j] == ESCAPE)))` line because I was skimming for where `esc` is set and instead I have to carefully read this line. How about pulling out the assignment from the comparison?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/53462886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59009784", "body": "This is missing a verb. One of these two should do it:\n- Instead of being filtered and sorted by score, choices will only be filtered.\n- Instead of filtering and sorting by score, only filter the choices.\n\nMaybe we can reverse the focus:\n- Only filter the choices instead of additionally sorting by score.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/59009784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55661611", "body": "OpenBSD's reallocarray(3) says:\n\n> Do not adjust the variable describing how much memory has been allocated until the allocation has been successful. This can cause aberrant program behavior if the incorrect size value is used. In most cases, the above sample will also result in a leak of memory. As stated earlier, a return value of NULL indicates that the old object still remains allocated.\n\nhttp://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man3/calloc.3\n\nThey show this with `realloc` but then later with `reallocarray`.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55661611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55661711", "body": "Passing `NULL` as the second argument to err(3) will print a default message, which (should, hopefully) include the text \"reallocarray\".\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55661711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55674291", "body": "In vim:\n\n```\nset cinoptions=:0,t0,+4,(4\nau BufNewFile,BufReadPost *.{c,h,cc,cpp,hpp,y,l} setl noet sw=0 ts=8\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/55674291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/65001967", "body": "This can alternatively be done with the global `malloc_options` char pointer; see [`usr.sbin/httpd/patterns/patterns-tester.c`](http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/regress/usr.sbin/httpd/patterns/patterns-tester.c?rev=1.1&content-type=text/x-cvsweb-markup) for an example (lines 25 and 66).\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/65001967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/65002193", "body": "Ah right, that makes sense!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/65002193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69890075", "body": "s/deduct/deduce/\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/69890075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/70941800", "body": "Totally doesn't matter for this test script, because we control all the input, but this could technically lead to overflow. Not saying you should do anything about this though.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/70941800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/70941957", "body": "Could be `err(1, NULL)` (and elsewhere in here).\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/70941957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71064178", "body": "That path is a great improvement -- keep that!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71064178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71064189", "body": "I like the comment solution -- shows that we are aware of it and will happily accept fixes for it should it ever become a problem.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/71064189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111964889", "body": "I don't see why, from a quick skim of the repo, `pledge` disappears when defining `_XOPEN_SOURCE`. But I do see this in glibc: https://github.com/bminor/glibc/blob/963394a22b38c4ec92b6875a6c06d3b15d5c0d21/include/features.h#L186-L208\r\n\r\nSo maybe: skip the OS check (which should be a glibc check ... somehow?) and instead do:\r\n\r\n```\r\nAM_CPPFLAGS+=-D_GNU_SOURCE\r\n```", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111964889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/138991665", "body": "These should probably modify `AM_CPPFLAGS` and `AM_LDFLAGS` in the `Makefile.am`, like so:\r\n\r\n```Makefile\r\nAM_CPPFLAGS = $(NCURSES_CFLAGS)\r\nAM_LDFLAGS = $(NCURSES_LIBS)\r\n```\r\n\r\nThis way the end user (the person compiling from the tarball) can override `CFLAGS` from the `make` command line.\r\n\r\n(I'm not 100% sure I understand the original problem being solved, so let me know if I have something obvious wrong.)", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/138991665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/138997428", "body": "Aha! LGTM. One optional suggestion.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/138997428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "georgebrock": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53875080", "body": "My C's a little rusty, but this looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/53875080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16716713", "body": "Is there a more expressive name for this variable? e.g. `word_pos`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16716713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16716754", "body": "Does it make sense to `#define` away these magic numbers, so that they are consistent with `KEY_LEFT` etc.?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16716754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896638", "body": "What makes this `REAL`?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896811", "body": "Style question: is it more normal to pre-decrement? I find the post-decrement operator (i.e. `cursor_pos--`) easier to read, but possibly only because I'm more used to seeing it.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16896811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16897012", "body": "Should there be a comment here? I found myself searching the file for `KEY_ENTER` and getting confused.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16897012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "keith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64164751", "body": "+1 Can reproduce locally in iTerm on OS X\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64164751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64239150", "body": "This still appears to be an issue with these steps:\n1. Open vim\n2. Open your pick search\n3. Hit CTRL-C to exit pick without choosing a file\n4. Quit vim\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64239150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64259416", "body": "Assuming we choose to go this way we may want to add this to the man page as well.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64259416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64298218", "body": ":+1: got this signal method to work locally. I'll clean it up tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64298218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64516368", "body": "@calleerlandsson updated with signals.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64516368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64688536", "body": "@calleerlandsson updated!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64688536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64690804", "body": "Since calling refresh when running in Vim seems to be what we want should we be trying to do that conditionally?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64690804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64915130", "body": "@calleerlandsson I get this error when running `./autogen.sh`\n\n```\nconfigure.ac:5: installing './compile'\nconfigure.ac:3: installing './install-sh'\nconfigure.ac:3: installing './missing'\nsrc/Makefile.am:4: warning: source file 'compat/strlcpy.c' is in a subdirectory,\nsrc/Makefile.am:4: but option 'subdir-objects' is disabled\nautomake: warning: possible forward-incompatibility.\nautomake: At least a source file is in a subdirectory, but the 'subdir-objects'\nautomake: automake option hasn't been enabled.  For now, the corresponding output\nautomake: object file(s) will be placed in the top-level directory.  However,\nautomake: this behaviour will change in future Automake versions: they will\nautomake: unconditionally cause object files to be placed in the same subdirectory\nautomake: of the corresponding sources.\nautomake: You are advised to start using 'subdir-objects' option throughout your\nautomake: project, to avoid future incompatibilities.\nsrc/Makefile.am:4: warning: source file 'compat/strlcat.c' is in a subdirectory,\nsrc/Makefile.am:4: but option 'subdir-objects' is disabled\nsrc/Makefile.am: installing './depcomp'\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64915130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64915281", "body": "After this, configure runs fine but `make` fails with some related errors:\n\n```\n./compat/strlcpy.h:13:10: error: expected parameter declarator\nsize_t   strlcpy(char *, const char *, size_t);\n...\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/64915281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66143239", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66143239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66144639", "body": ":+1: it would be great if we could find a way to deal with this in all cases though. This is a blocker for me using it in vim.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66144639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66733021", "body": "This looks like an ordering thing in the makefile. Possibly putting this as the first `cflag` will solve this problem. http://stackoverflow.com/questions/16192087/undefined-reference-to-initscr-ncurses\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66733021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66733132", "body": "Although doing this on OS X breaks my build.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66733132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67881018", "body": "This output looks good to me. Assuming you have `brew` installed you actually don't need the `sudo` on the install command either.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67881018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67881046", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67881046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71295186", "body": "Just realized I'm not sure if this is needed anymore. Headed out will close if so.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71295186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71299715", "body": "See https://github.com/thoughtbot/pick/pull/24\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71299715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71299720", "body": "Closes https://github.com/thoughtbot/pick/issues/21 when it's merged.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71299720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71330089", "body": "Ugh on the difference through vim. I hope that's related to #4 \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71330089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71330507", "body": "Moved this info to `DEVELOPING.md`\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71330507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71345478", "body": "Oh interesting, I'm also seeing this on a different machine still in zsh...\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71345478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75611437", "body": "+1 I'd be glad to help to. Should be pretty easy.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75611437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75611530", "body": "I think we are holding off on this until all the cursor and screen issues are fixed.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75611530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76228226", "body": "It looks like this isn't a problem anymore but it would still be good if @ggilder could verify.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76228226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76231633", "body": "Using `pick -X` fixes this.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76231633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76248231", "body": "@ggilder see https://github.com/thoughtbot/pick/issues/32 you need to use `pick -X`\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76248231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76248488", "body": "This should also be added to an example for how to use this with vim.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76248488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77628466", "body": "Ah yes I misunderstood what was happening. Pressing `CTRL-J` while pick is open definitely doesn't do what it should in tmux.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/77628466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78351200", "body": "This does not work in selecta either.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78351200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112151646", "body": "Closing for now, there were still some issues with compatibility with this. Feel free to try and take it over!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112151646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23498141", "body": "This is just a flag to test if `start_pos` has already been set. The issue here is that it could be reset if the word being searched contained the first character of the query more than once.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23498141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23498151", "body": "I don't have a preference on the naming but the implementation would change in that case, since right now this still returns the same length but then the index of the first character of the match, not whether or not there was one.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23498151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23498157", "body": "Ah yes I could do that. Although I'm also not sure underline is the best long term case for this, it was just the easiest to test with during development.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23498157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ecerulm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66891232", "body": "I cleaned up a bit the Autotools setup. Using AC_SEARCH_LIBS to detect and link `libncurses` and `libbsd`.\n\n`bsd/string.h` is only included if it exists. (If the plaform already have `strlcpy` and friends without `libbsd` then included that file will led to a `File not found` error.\n\nIn some plaforms (Ubuntu 14.04, for example) `freopen` is defined with `__attribute__((warn_unused_result))` so it will raise a warning if the return value of `freopen` is ignored. The current setup is to treat warning as errors so the build break. \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66891232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66891392", "body": "I created #16  to fix this problem. Using `AC_SEARCH_LIBS` in the `configure.ac` so that the proper linker flags are generated by the Autotools. \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66891392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66891551", "body": "I created pull request #16 which solves this issue and #15. \n\nThe source of the problem is that `freopen` in Ubuntu 14.04 is defined with `__attribute__((warn_unused_result))` so it will generate a warning (I guess that in other platforms it's lacking this attribute). Since warnings are treated as errors , ignoring the return value of `freopen` breaks the build. #16 asserts the the return value is non-null. \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/66891551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70402100", "body": "I updated the error message if `strlcpy` cannot be found prompting the user to install `libbsd`. #10 will make that obsolete when it's merged but until that happens it's needed to build in Linux. \n\nI replaced the `assert` with `if/err` construct.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70402100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23131971", "body": "Yes it will error out,  I guess the message should be \"unable to find strlcpy(). Make sure libbsd is installed\"  \n\nGuess if #10 gets merged you can remove the whole `AC_SEARCH_LIBS`  since you are not dependent on `libbsd`  after #10. \n\nThis was more  to solve the current issue of warning the user that there was no `strlcpy` at `./configure`  instead of at compile time. It depends on when are you going to merge #10, you can always remove this `AC_SEARCH_LIBS` after merging #10. \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/23131971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "christoomey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882397", "body": "I believe you are correct. You can check by running `display-message -p \"#{pane_current_command}\"` at the tmux command prompt `<prefix>:`. Assuming this is the case, I don't think there is anything I can do to work around it.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/67882397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "teoljungberg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70274728", "body": "The patches we made worked on my OS X laptop\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70274728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70368454", "body": "This happens to me aswell, I compiled `pick` from the `ks-bsd` branch.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70368454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70463794", "body": "Building from master, on my OS X machine, works great after the merge :+1:\nI agree on merging #10 for even better portability\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70463794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464564", "body": "An idea that @calleerlandsson and I talked about IRL is to explicitly reset the terminal when closing ncurses. Right now we configuring ncurses on boot: https://github.com/thoughtbot/pick/blob/0c03b0d76a8546016f824f7f977593fcbf1dab90/src/ui.c#L46-L65\nMaybe doing the same on when we're stopping ncursise might do the trick?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/70464564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71323886", "body": "This looks different when you call `pick` from inside of `vim`\n\n![screenshot 2015-01-24 16 52 53](https://cloud.githubusercontent.com/assets/810650/5887927/4a2b8fea-a3ea-11e4-8b56-932003e3c732.png)\n\nEdit: this is also the case just from `bash` \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71323886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71331776", "body": "@keithbsmiley it's also present in bash, so it's not vim only\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/71331776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75247982", "body": "I'll give it a whirl for the next few days, I can already confirm that it doesn't fuckup the arrow-keys\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75247982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75384048", "body": "@calleerlandsson The arrow keys work in the shell now, but not from vim\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75384048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75607763", "body": "I can gladly write one once @calleerlandsson feels it's ready to get shown to the world\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/75607763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76374775", "body": "References #27\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76374775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76530590", "body": "Closed by https://github.com/thoughtbot/homebrew-formulae/commit/60afac6807473d9288be6f899030da12c9721027\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76530590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76684800", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76684800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/90842666", "body": "Looks great, I'm really happy seeing our Code of Conduct getting out there\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/90842666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/168643242", "body": "Looks great to me!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/168643242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953353", "body": "I did, thanks for pointing it out\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953380", "body": "Sounds great~ I atleast understand `sh` better than `make`\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/9953380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25859092", "body": "Was this only neccessary because `selecta` didn't use the alternate screen thing, and pick does?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25859092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25863241", "body": "If you try it out and fire up `pick` from inside of vim and then ctrl-c you'll see your screen is borked\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25863241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25863259", "body": "So the function is needed as is\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25863259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/96588313", "body": "I like the old school reference here!", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/96588313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111690692", "body": "I, for one, am of the view to write out as many acronyms as possible. But since we have `ssize_t` unt so weiter already, I'd say this falls in line with that style better.", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/111690692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gabebw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76205958", "body": "We should add it to https://github.com/thoughtbot/homebrew-formulae\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76205958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25948652", "body": "\"therefore cannot\"?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25948652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "c0nspiracy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76421379", "body": "I'm experiencing the same problem.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76421379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "brentm5": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76423264", "body": "I fixed the problem locally for me by just following the following steps.\n\nFirst I ran the following:\n`brew edit pick`\n\nThen changed the following line:\n\n```\n- sha1 \"cec167acc776065c055ab13a918d4e0300dca2f8\"\n+ sha1 \"8b035e64cc5faea407e73cce01ca039e3ce3b4ac\"\n```\n\nThen ran the following again:\n`brew install pick`\n\nIt looks like someone just type-oed the sha1 hash because when I actually download the file from that url and run `shasum -a 1 pick-1.1.0.tar.gz` I get this hash `8b035e64cc5faea407e73cce01ca039e3ce3b4ac`\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/76423264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mange": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78111635", "body": "What is your `$TERM` inside tmux?\n\n```\n> echo $TERM\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78111635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "geoffharcourt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78120807", "body": ".HI @mange, my $TERM in tmux is `screen-256color`\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78120807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78271213", "body": "@calleerlandsson, when I run that in the Jellybeans theme, I see don't see any highlighting.\n\nThis could be a problem with the theme, which certainly shouldn't be a concern of this project. I'm currently able to get highlighting with fzf, so I think that project must use a different means of applying a highlight.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78271213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78301354", "body": "Thanks for the help, (I have zero experience reading C), looks like it's time to move on to a better theme.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/78301354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "eavgerinos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/79109588", "body": "Nice :) I'll close this issue when the Debian ftp-masters approve the package.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/79109588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/80685346", "body": "UPDATE: Progress can be tracked [here](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=780483)\n\nAnytime :)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/80685346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86888358", "body": "@calleerlandsson I'm sorry, I should have written a description.\nIt's true, it does not fix anything about unicode characters. The nature of this PR is to give the ability to build and link to the libncursesw if it is available on your system instead of demanding libncurses. \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/86888358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/89406256", "body": "Submitted the package to [Debian](https://ftp-master.debian.org/new/pick_1.1.1-1.html).\n\n[Git repo with debian packaging](https://github.com/eavgerinos/pkg-pick)\n\nNow we are waiting the Debian ftp-masters to review it (it may take a while considering they are busy with the jessie stable release)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/89406256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/91536627", "body": "Same with #50 imho\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/91536627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112018904", "body": "[Accepted](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=780483) to Debian unstable (at last) :)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112018904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112020863", "body": "@calleerlandsson  Thank you. Will do later today :) (or worst case withing this week) \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/112020863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27287893", "body": "Yeap, sorry, forgot to stage it.\n\nWill do it later tonigh! Good catch! thanks\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27287893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27422429", "body": "@calleerlandsson  Sorry for being late. Fixed :smiley: \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27422429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27549505", "body": "I'm just using it do define the constant `HAVE_NCURSESW_H` in order for the compiler to decide what it should link.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27549505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27728020", "body": "This is done because we need to include different headers, so I use the `HAVE_NCURSESW_H` hdef to decide the header.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/27728020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/28000035", "body": "Yeap, it builds (it's also a [patch](https://github.com/eavgerinos/pkg-pick/blob/master/debian/patches/ncursesw-compatibility) I included in the debian package).\n\nThe [`AC_TRY_LINK`](http://ftp.gnu.org/old-gnu/Manuals/autoconf-2.53/html_node/Examining-Libraries.html) defines the `HAVE_NCURSESW_H` hdef.\n\nOn the other hand [`AC_SEARCH_LIBS`](https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/Libraries.html) iterates through a list of alternative choices in order to tell if at least 1 of the alternatives is available on the system.\n\nSo, imho, we need `AC_TRY_LINK`\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/28000035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gnapse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/79288351", "body": "Agreed. More than an actual bug, I thought it was important to raise attention to this issue. The bug, if any, if fish's fault in this case.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/79288351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "GBuella": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/87323189", "body": "All right, I guess that doesn't technically change anything, but might make it more clear for some reading the code.\nAdded in another commit.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/87323189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109744935", "body": "Hi guys, I'v got a couple of ideas to do with pick, but hesitant to start coding before this refactor is final, due to lot os possible conflicts. Question is, is it going into master soon?\n( You know you can always do a second refactoring, a third )\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109744935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/116528133", "body": "Hey @calleerlandsson , I attempt to solve two things with this: matching typos, and excluding a lot of unnecessary noise in the results.\n\nconsider a user typing \"makefile\", the following inputs do match:\n\n~/something/makefile\n~/ma/teker/alf/miles_per_hour     <- due to \"ma\" + \"ke\" + \"f\" + \"ile\"\n\nOften I totally don't need the second of these.\nA partial solution would be to only look for exactly matching substring, but that is still not good enough:\n\nLooking for \"makefile\":\n\n~/something/makefile                    <- found\n~/ma/teker/alf/miles_per_hour      <- noise, not matching, as expected\n~/something/other/makfile             <- typo, not matching\n\nI would like to find the substring \"makfile\" as well, which has an edit distance of 1 form the original query \"makefile\"\n\nThus looking for substrings with sufficiently low distance from the query:\n\nE.g.: looking for \"some/makefile\" finds:\n\n~/code/some//makefile            <- not two slashes\n~/code/other/some//makfile     <- missing \"e\" in \"makfile\"\nsome makefile                         <-   no slash, but a match anyways\nsome/makelife                         <-  typo,  makelife vs. makefile\n\nand similar matching strings, while excluding a lot of unnecessary long input lines, that just happen to have the characters in the right order.\n\nIf find some more time, I'll try to write a more clear explanation. For now, I hope this explanation is understandable.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/116528133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118361084", "body": "Hi, in response:\n\n\"Since I'm using pick differently, I won't use the feature provided\"  that is why the default behaviour is kept, and this one is optinal ( currently enabled by pressing ctrl-X )\n\n\"will have tobe debugged, maintained and considered during refactoring \"  True, although I can surely help with that\n\n\"Do you think a plugin architecture would make sense\"  I don't know for sure, I have no idea how many other devs would like to make plugins.\nIf it is easy enough to make a plugin, perhaps some poeple would make plugins. As of now, if this one would be the only plugin, not much use of a plugin architecture -- it would still mean maintaining a few hundred lines of code only for this.\n\nAnyways, I'm just going to use this from my own repo then, so it doesn't matter much to me either way... and if one or two other devs would like another special way of matching, then a plugin system surely makes a lot of sense.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/118361084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rosshadden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/88315272", "body": "~~I found it in the `selecta` history:  https://github.com/garybernhardt/selecta/issues/49#issuecomment-62595572~~\n\nApparently it was removed from `selecta`, because it caused an issue.  The more you know!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/88315272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/108911642", "body": "Yeah, exactly.  The main idea is users can enter something not necessarily in the list.\n\nI got the idea from `dmenu`, which is what many projects like this are inspired by.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/108911642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109305780", "body": "Sure, I'd be happy to.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/109305780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/110080996", "body": "I don't think it should be hidden behind a flag.  The default behavior is still the most useful, which is to select the best-matching result when you hit `enter`.  I think it should just be a separate mapping to use the current input.\n\nIt sucks that terminals don't all support `shift+enter` or `ctrl+enter`, as nothing else makes as much sense (vim-wise).  What about `alt+enter` (tested with `^[<cr>` in vim)?  That sequence is sent correctly for me in `urxvt`---does it work in all terminals?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/110080996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/113973942", "body": "@calleerlandsson Assuming you like the feature addition, there's a decision we need to make before it gets merged in.\n\nThere is currently no `break;` statement at the end of the [`TTY_ENTER` case](https://github.com/rosshadden/pick/blob/d3bca6d123805a2314f2abfdfa13f768e2940b7e/src/ui.c#L71-L76).  What this means is that if the user's query has 0 `visible_choices_count`, merely pressing `Enter` (without `Alt`) will use the input query, as execution falls into my `TTY_ALT_ENTER` case.\n\nSaid more plainly, it means that typing `blah<Enter>` when there are no matches will output `blah`.\n\nI actually like this behavior a lot, but I'm leaving it up to you to decide if it should be in `pick`.  If you don't, I merely add a `break;` to the end of the preceding case.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/113973942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/114226605", "body": "Okay cool.  I agree, this way it's consistent.  I made the change and this is ready to be looked over.  No rush---I'm already using my fork, and I daresay it has greatly improved my use cases of `pick` :dog: \n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/114226605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115715248", "body": "I think it's best to maintain consistent behavior. If the list is empty, it's still a list, it just has zero items. While I understand the motivation, I do not consider zero choices an \"error\", especially not one worthy of a nonzero exit code. \n\nJust my two cents.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115715248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/116669013", "body": "Yeah, it looks good to me.  Thanks, I don't write C often.  But when I do... etc. etc.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/116669013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/147414644", "body": "Here's what is going on. In Arch Linux, they updated to `ncurses` 6, as implied by my above post.  This means it's a breaking change for things explicitly looking for `/usr/lib/libncursesw.so.5`.\n\nI \"solved\" this by installing an `ncurses5` package alongside my main `ncurses` package, however the best solution would be for `pick` to instead use `/usr/lib/libncursesw.so`.  On most systems this should be a symlink to the current `ncurses`, in my case `6`.\n\nI don't see in the code where this reference is made, so I don't know where to change it.  You guys are possibly using a library or wrapper around `ncurses` which is doing this.  If so let me know and I will open an issue there.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/147414644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/147739831", "body": "Yes, that worked!  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/147739831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148741513", "body": "I still think this should be added, I just can't think of a good key combination to use.\n\nMaybe `alt-c` since it's similar to the existing `ctrl-c`?  That is, `^[c`, like how we used `^[Enter` for [using the current input](https://github.com/thoughtbot/pick/commit/d1f486a9b4cca9f7637b32112cb54364ebf75b99).\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148741513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148749838", "body": "No I was just saying `Alt-Enter` is an alt mapping we are already using. I'm proposing `Alt-c` to cancel (at any point), unless you have a better idea.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148749838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148781310", "body": "Oh I understand what you meant now.  Yeah, I guess I hadn't thought about that, but it does work perfectly.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/148781310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "xuchunyang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/111967341", "body": "Thank you.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/111967341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/comments/13815435", "body": "@calleerlandsson The version of pick in MacPorts also has been upgraded to 1.2.1. It is done in r141363 (the corresponding link should be https://trac.macports.org/changeset/141363, but it doesn't work for now, MacPorts's website has been confirmed encountered some problem).\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/comments/13815435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "stormaaja": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/114809408", "body": "Sure thing!\n\nMaybe simplest solution which comes to mind would be adding:\n\n```\nif (!SLIST_EMPTY(choices)) {\n    io_print_choice(\n        ui_selected_choice(choices, query, use_alternate_screen),\n        output_description);\n}\n```\n\nto https://github.com/thoughtbot/pick/blob/master/src/main.c#L60\n\nThis way pick will do nothing and return nothing if input is empty.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/114809408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115206239", "body": "This way:\nhttps://github.com/mattix/pick/blob/master/src/main.c\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115206239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115986620", "body": "I wouldn't print any error either. The only choice for empty list would be empty I guess. \n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/115986620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ScoreUnder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/128742005", "body": "The unbuffered-out branch works, but compare:\n\nUnbuffered:\n![Screenshot](https://i.imgur.com/4ndXroq.gif)\n(Note, I'm not sure why there are white flashes here - I couldn't see them while actually using the program)\n\nBuffered with flush:\n![Screenshot](https://i.imgur.com/JdXQhpw.gif)\n\nThe unbuffered version sometimes draws a half-done frame before it finishes, then quickly overwrites it with the full frame. While you type or press the arrow keys, the cursor noticeably flickers. It's still a great improvement over the previous behaviour I was seeing.\n\nCurrent master (I'm pressing the arrow keys more slowly here to show off the problem a little more):\n![Screenshot](https://i.imgur.com/WdAjVXk.gif)\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/128742005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "temochka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129595821", "body": "Sounds good. I\u2019ll try to work on it later this week!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/129595821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/137086224", "body": "Sure, take your time, and thanks for the heads-up!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/137086224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/137994505", "body": "No problem, I was glad to help. Thank you too, @calleerlandsson!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/137994505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37191012", "body": "Having done far more C++ than C I\u2019m definitely biased towards `for` loops. However, in this particular case I believe that `for` loop actually improves readability. Your suggested implementation is incomplete, since `strpbrk` can return `NULL` on the first call, meaning we\u2019d need to handle this special case with an extra `if` statement. Like this:\n\n``` c\nstatic char *\neager_strpbrk(const char *string, const char *separators) {\n    char *ptr, *tmp_ptr;\n    ptr = tmp_ptr = strpbrk(string, separators);\n\n    if (ptr == NULL) {\n        return NULL;\n    }\n\n    while ((tmp_ptr = strpbrk(++tmp_ptr, separators))) {\n        ptr = tmp_ptr;\n    }\n\n    return ptr;\n}\n```\n\nOn the contrary, `for` loop handles NULL pointers naturally. But if you still think that `while`-based implementation is clearer or more consistent with the rest of the project\u2019s codebase, I don\u2019t mind changing my commit to it.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37191012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37191016", "body": "Given that `$IFS` is actually a list of possible field separating characters, I think `separators` is a better name for what it is. In case you weren\u2019t aware of this behavior, this is exactly how `strtok_r` works too, so there should be no regression. `strtok_r` [uses](https://github.molgen.mpg.de/git-mirror/glibc/blob/master/string/strtok_r.c#L63) `strpbrk` internally, while `strpbrk` is [implemented via two loops](https://github.molgen.mpg.de/git-mirror/glibc/blob/master/string/strpbrk.c) with the outer loop iterating a given string char-by-char and the inner one checking these characters for inclusion in separators.\n\nDefault `$IFS` set by Bash includes all regular whitespace characters (space, tab and newline):\n\n``` bash\n$ echo \"$IFS\" | cat -te\n ^I$\n$\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37191016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37933606", "body": "Makes sense. Pushed another commit that does exactly that.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/37933606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "elfring": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138528112", "body": "I suggest to avoid [ignorance of return values](https://cwe.mitre.org/data/definitions/252.html) a bit more.\n\nAre you interested to apply [aspect-oriented software development](http://aspectc.org/)?\nHow do you think about to encapsulate error detection and corresponding exception handling as [a reusable aspect](http://en.wikipedia.org/wiki/Aspect_%28computer_programming%29) in your software?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138528112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138662010", "body": "How do you think about to improve [static source code analysis](https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#C.2FC.2B.2B) also for your software?\n\nDo you find information sources like the following useful?\n- Article \"[A Reusable Aspect for Memory Allocation Checking](https://sites.google.com/a/gapp.msrg.utoronto.ca/aspectc/tutorial#A_Reusable_Aspect_for_Memory_All)\"\n- Document \"[Aspect-Oriented Software Development - An Introduction](http://www.info.ucl.ac.be/~jbrichau/courses/introductionToAOSD.pdf)\" by Johan Brichau and Theo D'Hondt\n- Paper \"[On Typesafe Aspect Implementations in C++](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.125.2164)\" by Daniel Lohmann and Olaf Spinczyk\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138662010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138678507", "body": "I suggest to reuse the following tools for finding more update candidates depending on your preferences for factors like [freedom](https://www.fsf.org/about/what-is-free-software), [licence costs](http://www.computerweekly.com/feature/Lower-your-software-licence-fees) and programming language support.\n1. [AspectC++](http://aspectc.org/)\n2. [Secure Programming Lint](http://splint.org/faq.html#quest9)\n3. [Coccinelle](http://coccinelle.lip6.fr/)\n4. [Coverity Scan](https://scan.coverity.com/)\n\n> The second one seems to be broken.\n\nDo you get further ideas from another information source like [the \"Wiley Encyclopedia of Computer Science and Engineering\"](http://onlinelibrary.wiley.com/doi/10.1002/9780470050118.ecse022/abstract)?\n\n> Would it rely heavily on macros?\n\nHow do you think about to delegate specific software maintenance tasks to dedicated development tools?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138678507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/139999030", "body": "How do you think about to integrate any of the suggested tools into your software development process?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/139999030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140004203", "body": "I would appreciate if a bit more consensus can be achieved before further efforts will be invested for possible changes.\nWould you like to integrate the tool \"AspectC++\" into your software build system?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140004203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140009100", "body": "A tool like \"AspectC++\" is providing another programming language which supports to specify the combination of a pointcut with advice. (Such a C++ tool can also support the programming language \"C\" to some degree.)\nWould you like to reuse such functionality generally?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140009100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akerl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138725931", "body": "This is the weirdest github issue bot I've seen in a while\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/138725931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xijo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140900554", "body": "I found a workaround for this problem until fish-shell/fish-shell#1362 is solved\n\n``` fish\nfunction scm -d 'Pick and jump into a subdirectory of ~/scm'\n  set evalfn /tmp/pick_scm    # define a tmp file to store the pick result\n  ls ~/scm | pick >$evalfn    # run pick and store the result\n  eval cd ~/scm/(cat $evalfn) # read the content of the file and use it for the cd\n  rm $evalfn                  # remove the tmp file afterwards\nend\n```\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/140900554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "FreedomBen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/152304258", "body": "Oh yeah, that does make sense.  I never downloaded the tarball so that explains the confusion.  Thanks!  And pick is super awesome by the way.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/152304258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/158212407", "body": "Tmux version:  1.9a-5\nPick version:  1.1.1 and 1.2.1 with same effect\n\nThis could very well be #44.  I'll give that a try and report back.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/158212407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/158236671", "body": "Yep it's definitely #44.  Thanks for referring.  I did some searching through open/closed issues before opening one but missed that one.\n\nSome great instructions here:  http://unix.stackexchange.com/questions/167843/tmux-vim-colorscheme-background-is-not-showing\n\nMy solution was to put this in `~/.bashrc` :\n\n```\n# hack to fix tmux color scheme not showing background standout color\nexport TERM=\"xterm-256color\"\n```\n\nMight have side effects but at least pick is working again.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/issues/comments/158236671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "calebthompson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16719218", "body": "Seems like a good idea.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/16719218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jnutting": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20361102", "body": "I think it should be 'parse_desc == 1' or 'parse_desc != 0' inside the parens, just for clarity's sake.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20361102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20361572", "body": "It looks like line is never freed.\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/20361572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Koronen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25444828", "body": "`ncurses` has been replace with tputs and termios, #26. Might as well update that part too?\n", "reactions": {"url": "https://api.github.com/repos/calleerlandsson/pick/pulls/comments/25444828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}